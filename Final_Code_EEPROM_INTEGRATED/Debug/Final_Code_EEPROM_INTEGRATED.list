
Final_Code_EEPROM_INTEGRATED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c28  0800f9a8  0800f9a8  000109a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115d0  080115d0  000131f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080115d0  080115d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115d8  080115d8  000131f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115d8  080115d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080115dc  080115dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080115e0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f10  200001f8  080117d8  000131f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001108  080117d8  00014108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7af  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a1f  00000000  00000000  0002d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  000323f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000113a  00000000  00000000  00033a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028321  00000000  00000000  00034baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b4f  00000000  00000000  0005cecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d82e2  00000000  00000000  0007fa1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157cfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007078  00000000  00000000  00157d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  0015edb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f990 	.word	0x0800f990

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800f990 	.word	0x0800f990

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 ba09 	b.w	80010fc <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9be 	b.w	80010fc <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	468e      	mov	lr, r1
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	4688      	mov	r8, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14a      	bne.n	8000eaa <__udivmoddi4+0xa6>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d962      	bls.n	8000ee0 <__udivmoddi4+0xdc>
 8000e1a:	fab2 f682 	clz	r6, r2
 8000e1e:	b14e      	cbz	r6, 8000e34 <__udivmoddi4+0x30>
 8000e20:	f1c6 0320 	rsb	r3, r6, #32
 8000e24:	fa01 f806 	lsl.w	r8, r1, r6
 8000e28:	fa20 f303 	lsr.w	r3, r0, r3
 8000e2c:	40b7      	lsls	r7, r6
 8000e2e:	ea43 0808 	orr.w	r8, r3, r8
 8000e32:	40b4      	lsls	r4, r6
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	fa1f fc87 	uxth.w	ip, r7
 8000e3c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e40:	0c23      	lsrs	r3, r4, #16
 8000e42:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e4a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x62>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e58:	f080 80ea 	bcs.w	8001030 <__udivmoddi4+0x22c>
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f240 80e7 	bls.w	8001030 <__udivmoddi4+0x22c>
 8000e62:	3902      	subs	r1, #2
 8000e64:	443b      	add	r3, r7
 8000e66:	1a9a      	subs	r2, r3, r2
 8000e68:	b2a3      	uxth	r3, r4
 8000e6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e76:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e7a:	459c      	cmp	ip, r3
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x8e>
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e84:	f080 80d6 	bcs.w	8001034 <__udivmoddi4+0x230>
 8000e88:	459c      	cmp	ip, r3
 8000e8a:	f240 80d3 	bls.w	8001034 <__udivmoddi4+0x230>
 8000e8e:	443b      	add	r3, r7
 8000e90:	3802      	subs	r0, #2
 8000e92:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e96:	eba3 030c 	sub.w	r3, r3, ip
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	b11d      	cbz	r5, 8000ea6 <__udivmoddi4+0xa2>
 8000e9e:	40f3      	lsrs	r3, r6
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d905      	bls.n	8000eba <__udivmoddi4+0xb6>
 8000eae:	b10d      	cbz	r5, 8000eb4 <__udivmoddi4+0xb0>
 8000eb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e7f5      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000eba:	fab3 f183 	clz	r1, r3
 8000ebe:	2900      	cmp	r1, #0
 8000ec0:	d146      	bne.n	8000f50 <__udivmoddi4+0x14c>
 8000ec2:	4573      	cmp	r3, lr
 8000ec4:	d302      	bcc.n	8000ecc <__udivmoddi4+0xc8>
 8000ec6:	4282      	cmp	r2, r0
 8000ec8:	f200 8105 	bhi.w	80010d6 <__udivmoddi4+0x2d2>
 8000ecc:	1a84      	subs	r4, r0, r2
 8000ece:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	4690      	mov	r8, r2
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d0e5      	beq.n	8000ea6 <__udivmoddi4+0xa2>
 8000eda:	e9c5 4800 	strd	r4, r8, [r5]
 8000ede:	e7e2      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	f000 8090 	beq.w	8001006 <__udivmoddi4+0x202>
 8000ee6:	fab2 f682 	clz	r6, r2
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	f040 80a4 	bne.w	8001038 <__udivmoddi4+0x234>
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	0c03      	lsrs	r3, r0, #16
 8000ef4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef8:	b280      	uxth	r0, r0
 8000efa:	b2bc      	uxth	r4, r7
 8000efc:	2101      	movs	r1, #1
 8000efe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f02:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f0a:	fb04 f20c 	mul.w	r2, r4, ip
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x11e>
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x11c>
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	f200 80e0 	bhi.w	80010e0 <__udivmoddi4+0x2dc>
 8000f20:	46c4      	mov	ip, r8
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f28:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f2c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f30:	fb02 f404 	mul.w	r4, r2, r4
 8000f34:	429c      	cmp	r4, r3
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x144>
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f3e:	d202      	bcs.n	8000f46 <__udivmoddi4+0x142>
 8000f40:	429c      	cmp	r4, r3
 8000f42:	f200 80ca 	bhi.w	80010da <__udivmoddi4+0x2d6>
 8000f46:	4602      	mov	r2, r0
 8000f48:	1b1b      	subs	r3, r3, r4
 8000f4a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f4e:	e7a5      	b.n	8000e9c <__udivmoddi4+0x98>
 8000f50:	f1c1 0620 	rsb	r6, r1, #32
 8000f54:	408b      	lsls	r3, r1
 8000f56:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f60:	fa20 f306 	lsr.w	r3, r0, r6
 8000f64:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f68:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f6c:	4323      	orrs	r3, r4
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	fa1f fc87 	uxth.w	ip, r7
 8000f76:	fbbe f0f9 	udiv	r0, lr, r9
 8000f7a:	0c1c      	lsrs	r4, r3, #16
 8000f7c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f80:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f84:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f88:	45a6      	cmp	lr, r4
 8000f8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f8e:	d909      	bls.n	8000fa4 <__udivmoddi4+0x1a0>
 8000f90:	193c      	adds	r4, r7, r4
 8000f92:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f96:	f080 809c 	bcs.w	80010d2 <__udivmoddi4+0x2ce>
 8000f9a:	45a6      	cmp	lr, r4
 8000f9c:	f240 8099 	bls.w	80010d2 <__udivmoddi4+0x2ce>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	443c      	add	r4, r7
 8000fa4:	eba4 040e 	sub.w	r4, r4, lr
 8000fa8:	fa1f fe83 	uxth.w	lr, r3
 8000fac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fb8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fbc:	45a4      	cmp	ip, r4
 8000fbe:	d908      	bls.n	8000fd2 <__udivmoddi4+0x1ce>
 8000fc0:	193c      	adds	r4, r7, r4
 8000fc2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fc6:	f080 8082 	bcs.w	80010ce <__udivmoddi4+0x2ca>
 8000fca:	45a4      	cmp	ip, r4
 8000fcc:	d97f      	bls.n	80010ce <__udivmoddi4+0x2ca>
 8000fce:	3b02      	subs	r3, #2
 8000fd0:	443c      	add	r4, r7
 8000fd2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fd6:	eba4 040c 	sub.w	r4, r4, ip
 8000fda:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fde:	4564      	cmp	r4, ip
 8000fe0:	4673      	mov	r3, lr
 8000fe2:	46e1      	mov	r9, ip
 8000fe4:	d362      	bcc.n	80010ac <__udivmoddi4+0x2a8>
 8000fe6:	d05f      	beq.n	80010a8 <__udivmoddi4+0x2a4>
 8000fe8:	b15d      	cbz	r5, 8001002 <__udivmoddi4+0x1fe>
 8000fea:	ebb8 0203 	subs.w	r2, r8, r3
 8000fee:	eb64 0409 	sbc.w	r4, r4, r9
 8000ff2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ff6:	fa22 f301 	lsr.w	r3, r2, r1
 8000ffa:	431e      	orrs	r6, r3
 8000ffc:	40cc      	lsrs	r4, r1
 8000ffe:	e9c5 6400 	strd	r6, r4, [r5]
 8001002:	2100      	movs	r1, #0
 8001004:	e74f      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8001006:	fbb1 fcf2 	udiv	ip, r1, r2
 800100a:	0c01      	lsrs	r1, r0, #16
 800100c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001010:	b280      	uxth	r0, r0
 8001012:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001016:	463b      	mov	r3, r7
 8001018:	4638      	mov	r0, r7
 800101a:	463c      	mov	r4, r7
 800101c:	46b8      	mov	r8, r7
 800101e:	46be      	mov	lr, r7
 8001020:	2620      	movs	r6, #32
 8001022:	fbb1 f1f7 	udiv	r1, r1, r7
 8001026:	eba2 0208 	sub.w	r2, r2, r8
 800102a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800102e:	e766      	b.n	8000efe <__udivmoddi4+0xfa>
 8001030:	4601      	mov	r1, r0
 8001032:	e718      	b.n	8000e66 <__udivmoddi4+0x62>
 8001034:	4610      	mov	r0, r2
 8001036:	e72c      	b.n	8000e92 <__udivmoddi4+0x8e>
 8001038:	f1c6 0220 	rsb	r2, r6, #32
 800103c:	fa2e f302 	lsr.w	r3, lr, r2
 8001040:	40b7      	lsls	r7, r6
 8001042:	40b1      	lsls	r1, r6
 8001044:	fa20 f202 	lsr.w	r2, r0, r2
 8001048:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800104c:	430a      	orrs	r2, r1
 800104e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001052:	b2bc      	uxth	r4, r7
 8001054:	fb0e 3318 	mls	r3, lr, r8, r3
 8001058:	0c11      	lsrs	r1, r2, #16
 800105a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105e:	fb08 f904 	mul.w	r9, r8, r4
 8001062:	40b0      	lsls	r0, r6
 8001064:	4589      	cmp	r9, r1
 8001066:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800106a:	b280      	uxth	r0, r0
 800106c:	d93e      	bls.n	80010ec <__udivmoddi4+0x2e8>
 800106e:	1879      	adds	r1, r7, r1
 8001070:	f108 3cff 	add.w	ip, r8, #4294967295
 8001074:	d201      	bcs.n	800107a <__udivmoddi4+0x276>
 8001076:	4589      	cmp	r9, r1
 8001078:	d81f      	bhi.n	80010ba <__udivmoddi4+0x2b6>
 800107a:	eba1 0109 	sub.w	r1, r1, r9
 800107e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001082:	fb09 f804 	mul.w	r8, r9, r4
 8001086:	fb0e 1119 	mls	r1, lr, r9, r1
 800108a:	b292      	uxth	r2, r2
 800108c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001090:	4542      	cmp	r2, r8
 8001092:	d229      	bcs.n	80010e8 <__udivmoddi4+0x2e4>
 8001094:	18ba      	adds	r2, r7, r2
 8001096:	f109 31ff 	add.w	r1, r9, #4294967295
 800109a:	d2c4      	bcs.n	8001026 <__udivmoddi4+0x222>
 800109c:	4542      	cmp	r2, r8
 800109e:	d2c2      	bcs.n	8001026 <__udivmoddi4+0x222>
 80010a0:	f1a9 0102 	sub.w	r1, r9, #2
 80010a4:	443a      	add	r2, r7
 80010a6:	e7be      	b.n	8001026 <__udivmoddi4+0x222>
 80010a8:	45f0      	cmp	r8, lr
 80010aa:	d29d      	bcs.n	8000fe8 <__udivmoddi4+0x1e4>
 80010ac:	ebbe 0302 	subs.w	r3, lr, r2
 80010b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010b4:	3801      	subs	r0, #1
 80010b6:	46e1      	mov	r9, ip
 80010b8:	e796      	b.n	8000fe8 <__udivmoddi4+0x1e4>
 80010ba:	eba7 0909 	sub.w	r9, r7, r9
 80010be:	4449      	add	r1, r9
 80010c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c8:	fb09 f804 	mul.w	r8, r9, r4
 80010cc:	e7db      	b.n	8001086 <__udivmoddi4+0x282>
 80010ce:	4673      	mov	r3, lr
 80010d0:	e77f      	b.n	8000fd2 <__udivmoddi4+0x1ce>
 80010d2:	4650      	mov	r0, sl
 80010d4:	e766      	b.n	8000fa4 <__udivmoddi4+0x1a0>
 80010d6:	4608      	mov	r0, r1
 80010d8:	e6fd      	b.n	8000ed6 <__udivmoddi4+0xd2>
 80010da:	443b      	add	r3, r7
 80010dc:	3a02      	subs	r2, #2
 80010de:	e733      	b.n	8000f48 <__udivmoddi4+0x144>
 80010e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010e4:	443b      	add	r3, r7
 80010e6:	e71c      	b.n	8000f22 <__udivmoddi4+0x11e>
 80010e8:	4649      	mov	r1, r9
 80010ea:	e79c      	b.n	8001026 <__udivmoddi4+0x222>
 80010ec:	eba1 0109 	sub.w	r1, r1, r9
 80010f0:	46c4      	mov	ip, r8
 80010f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010f6:	fb09 f804 	mul.w	r8, r9, r4
 80010fa:	e7c4      	b.n	8001086 <__udivmoddi4+0x282>

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b08d      	sub	sp, #52	@ 0x34
 8001104:	af02      	add	r7, sp, #8
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	4611      	mov	r1, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	460b      	mov	r3, r1
 8001112:	81bb      	strh	r3, [r7, #12]
 8001114:	4613      	mov	r3, r2
 8001116:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b1e      	cmp	r3, #30
 800111c:	d964      	bls.n	80011e8 <ILI9341_DrawChar+0xe8>
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db60      	blt.n	80011e8 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	3301      	adds	r3, #1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3302      	adds	r3, #2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3303      	adds	r3, #3
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	3b20      	subs	r3, #32
 8001148:	7ffa      	ldrb	r2, [r7, #31]
 800114a:	fb02 f303 	mul.w	r3, r2, r3
 800114e:	3304      	adds	r3, #4
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	4413      	add	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8001156:	7fbb      	ldrb	r3, [r7, #30]
 8001158:	b29a      	uxth	r2, r3
 800115a:	7f7b      	ldrb	r3, [r7, #29]
 800115c:	b29c      	uxth	r4, r3
 800115e:	88f9      	ldrh	r1, [r7, #6]
 8001160:	89b8      	ldrh	r0, [r7, #12]
 8001162:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	4623      	mov	r3, r4
 8001168:	f000 fc20 	bl	80019ac <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001170:	e035      	b.n	80011de <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	e02b      	b.n	80011d0 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001178:	7f3b      	ldrb	r3, [r7, #28]
 800117a:	6a3a      	ldr	r2, [r7, #32]
 800117c:	fb03 f202 	mul.w	r2, r3, r2
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	10db      	asrs	r3, r3, #3
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	4413      	add	r3, r2
 800118a:	3301      	adds	r3, #1
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	2201      	movs	r2, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80011a2:	7dfa      	ldrb	r2, [r7, #23]
 80011a4:	7dbb      	ldrb	r3, [r7, #22]
 80011a6:	4013      	ands	r3, r2
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00d      	beq.n	80011ca <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	89bb      	ldrh	r3, [r7, #12]
 80011b4:	4413      	add	r3, r2
 80011b6:	b298      	uxth	r0, r3
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	4413      	add	r3, r2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80011c4:	4619      	mov	r1, r3
 80011c6:	f000 fb8b 	bl	80018e0 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	3301      	adds	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
 80011d0:	7fbb      	ldrb	r3, [r7, #30]
 80011d2:	6a3a      	ldr	r2, [r7, #32]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbcf      	blt.n	8001178 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	3301      	adds	r3, #1
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011de:	7f7b      	ldrb	r3, [r7, #29]
 80011e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dbc5      	blt.n	8001172 <ILI9341_DrawChar+0x72>
 80011e6:	e000      	b.n	80011ea <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80011e8:	bf00      	nop
			}
		}
	}
}
 80011ea:	372c      	adds	r7, #44	@ 0x2c
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd90      	pop	{r4, r7, pc}

080011f0 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	4611      	mov	r1, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	80fb      	strh	r3, [r7, #6]
 8001202:	4613      	mov	r3, r2
 8001204:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3301      	adds	r3, #1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8001214:	e02d      	b.n	8001272 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	7818      	ldrb	r0, [r3, #0]
 800121a:	88b9      	ldrh	r1, [r7, #4]
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	460b      	mov	r3, r1
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	f7ff ff69 	bl	8001100 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	3b20      	subs	r3, #32
 8001234:	7ffa      	ldrb	r2, [r7, #31]
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	3304      	adds	r3, #4
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	4413      	add	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	1c9a      	adds	r2, r3, #2
 800124c:	7fbb      	ldrb	r3, [r7, #30]
 800124e:	429a      	cmp	r2, r3
 8001250:	da07      	bge.n	8001262 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001252:	7dfb      	ldrb	r3, [r7, #23]
 8001254:	b29a      	uxth	r2, r3
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4413      	add	r3, r2
 800125a:	b29b      	uxth	r3, r3
 800125c:	3302      	adds	r3, #2
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	e004      	b.n	800126c <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001262:	7fbb      	ldrb	r3, [r7, #30]
 8001264:	b29a      	uxth	r2, r3
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	4413      	add	r3, r2
 800126a:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3301      	adds	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1cd      	bne.n	8001216 <ILI9341_DrawText+0x26>
	}
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <HAL_SPI_TxCpltCallback+0x24>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d105      	bne.n	80012a0 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129a:	4804      	ldr	r0, [pc, #16]	@ (80012ac <HAL_SPI_TxCpltCallback+0x28>)
 800129c:	f003 fcfc 	bl	8004c98 <HAL_GPIO_WritePin>
  }
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000d3c 	.word	0x20000d3c
 80012ac:	40020400 	.word	0x40020400

080012b0 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80012ba:	bf00      	nop
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <ILI9341_SPI_Tx+0x30>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d1f8      	bne.n	80012bc <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	2201      	movs	r2, #1
 80012ce:	4619      	mov	r1, r3
 80012d0:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <ILI9341_SPI_Tx+0x30>)
 80012d2:	f004 ff05 	bl	80060e0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000d3c 	.word	0x20000d3c

080012e4 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80012f0:	bf00      	nop
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <ILI9341_SPI_TxBuffer+0x30>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d1f8      	bne.n	80012f2 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	461a      	mov	r2, r3
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4803      	ldr	r0, [pc, #12]	@ (8001314 <ILI9341_SPI_TxBuffer+0x30>)
 8001308:	f004 feea 	bl	80060e0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000d3c 	.word	0x20000d3c

08001318 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001322:	2200      	movs	r2, #0
 8001324:	2120      	movs	r1, #32
 8001326:	4808      	ldr	r0, [pc, #32]	@ (8001348 <ILI9341_WriteCommand+0x30>)
 8001328:	f003 fcb6 	bl	8004c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <ILI9341_WriteCommand+0x30>)
 8001334:	f003 fcb0 	bl	8004c98 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ffb8 	bl	80012b0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40020400 	.word	0x40020400

0800134c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001356:	2201      	movs	r2, #1
 8001358:	2120      	movs	r1, #32
 800135a:	4808      	ldr	r0, [pc, #32]	@ (800137c <ILI9341_WriteData+0x30>)
 800135c:	f003 fc9c 	bl	8004c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <ILI9341_WriteData+0x30>)
 8001368:	f003 fc96 	bl	8004c98 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff9e 	bl	80012b0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40020400 	.word	0x40020400

08001380 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800138c:	2201      	movs	r2, #1
 800138e:	2120      	movs	r1, #32
 8001390:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <ILI9341_WriteBuffer+0x34>)
 8001392:	f003 fc81 	bl	8004c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <ILI9341_WriteBuffer+0x34>)
 800139e:	f003 fc7b 	bl	8004c98 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	4619      	mov	r1, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff9c 	bl	80012e4 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40020400 	.word	0x40020400

080013b8 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4604      	mov	r4, r0
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4623      	mov	r3, r4
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	4603      	mov	r3, r0
 80013cc:	80bb      	strh	r3, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	807b      	strh	r3, [r7, #2]
 80013d2:	4613      	mov	r3, r2
 80013d4:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	b29b      	uxth	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80013f6:	202a      	movs	r0, #42	@ 0x2a
 80013f8:	f7ff ff8e 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2104      	movs	r1, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ffbc 	bl	8001380 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	b29b      	uxth	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001418:	883b      	ldrh	r3, [r7, #0]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001422:	883b      	ldrh	r3, [r7, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001428:	202b      	movs	r0, #43	@ 0x2b
 800142a:	f7ff ff75 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2104      	movs	r1, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ffa3 	bl	8001380 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800143a:	202c      	movs	r0, #44	@ 0x2c
 800143c:	f7ff ff6c 	bl	8001318 <ILI9341_WriteCommand>
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bd90      	pop	{r4, r7, pc}

08001448 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001452:	480e      	ldr	r0, [pc, #56]	@ (800148c <ILI9341_Reset+0x44>)
 8001454:	f003 fc20 	bl	8004c98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001458:	200a      	movs	r0, #10
 800145a:	f002 fdcb 	bl	8003ff4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001464:	4809      	ldr	r0, [pc, #36]	@ (800148c <ILI9341_Reset+0x44>)
 8001466:	f003 fc17 	bl	8004c98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800146a:	200a      	movs	r0, #10
 800146c:	f002 fdc2 	bl	8003ff4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001470:	2201      	movs	r2, #1
 8001472:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <ILI9341_Reset+0x44>)
 8001478:	f003 fc0e 	bl	8004c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001482:	4802      	ldr	r0, [pc, #8]	@ (800148c <ILI9341_Reset+0x44>)
 8001484:	f003 fc08 	bl	8004c98 <HAL_GPIO_WritePin>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40020400 	.word	0x40020400

08001490 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800149a:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <ILI9341_Enable+0x14>)
 800149c:	f003 fbfc 	bl	8004c98 <HAL_GPIO_WritePin>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40020400 	.word	0x40020400

080014a8 <ILI9341_Init>:

void ILI9341_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80014ac:	f7ff fff0 	bl	8001490 <ILI9341_Enable>
	ILI9341_Reset();
 80014b0:	f7ff ffca 	bl	8001448 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff ff2f 	bl	8001318 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f002 fd9a 	bl	8003ff4 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80014c0:	20cb      	movs	r0, #203	@ 0xcb
 80014c2:	f7ff ff29 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80014c6:	2039      	movs	r0, #57	@ 0x39
 80014c8:	f7ff ff40 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80014cc:	202c      	movs	r0, #44	@ 0x2c
 80014ce:	f7ff ff3d 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ff3a 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80014d8:	2034      	movs	r0, #52	@ 0x34
 80014da:	f7ff ff37 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80014de:	2002      	movs	r0, #2
 80014e0:	f7ff ff34 	bl	800134c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80014e4:	20cf      	movs	r0, #207	@ 0xcf
 80014e6:	f7ff ff17 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff ff2e 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80014f0:	20c1      	movs	r0, #193	@ 0xc1
 80014f2:	f7ff ff2b 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80014f6:	2030      	movs	r0, #48	@ 0x30
 80014f8:	f7ff ff28 	bl	800134c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80014fc:	20e8      	movs	r0, #232	@ 0xe8
 80014fe:	f7ff ff0b 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001502:	2085      	movs	r0, #133	@ 0x85
 8001504:	f7ff ff22 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff ff1f 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800150e:	2078      	movs	r0, #120	@ 0x78
 8001510:	f7ff ff1c 	bl	800134c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001514:	20ea      	movs	r0, #234	@ 0xea
 8001516:	f7ff feff 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff ff16 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ff13 	bl	800134c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001526:	20ed      	movs	r0, #237	@ 0xed
 8001528:	f7ff fef6 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 800152c:	2064      	movs	r0, #100	@ 0x64
 800152e:	f7ff ff0d 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001532:	2003      	movs	r0, #3
 8001534:	f7ff ff0a 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001538:	2012      	movs	r0, #18
 800153a:	f7ff ff07 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800153e:	2081      	movs	r0, #129	@ 0x81
 8001540:	f7ff ff04 	bl	800134c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001544:	20f7      	movs	r0, #247	@ 0xf7
 8001546:	f7ff fee7 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800154a:	2020      	movs	r0, #32
 800154c:	f7ff fefe 	bl	800134c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001550:	20c0      	movs	r0, #192	@ 0xc0
 8001552:	f7ff fee1 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8001556:	2023      	movs	r0, #35	@ 0x23
 8001558:	f7ff fef8 	bl	800134c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800155c:	20c1      	movs	r0, #193	@ 0xc1
 800155e:	f7ff fedb 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001562:	2010      	movs	r0, #16
 8001564:	f7ff fef2 	bl	800134c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001568:	20c5      	movs	r0, #197	@ 0xc5
 800156a:	f7ff fed5 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800156e:	203e      	movs	r0, #62	@ 0x3e
 8001570:	f7ff feec 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001574:	2028      	movs	r0, #40	@ 0x28
 8001576:	f7ff fee9 	bl	800134c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800157a:	20c7      	movs	r0, #199	@ 0xc7
 800157c:	f7ff fecc 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001580:	2086      	movs	r0, #134	@ 0x86
 8001582:	f7ff fee3 	bl	800134c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001586:	2036      	movs	r0, #54	@ 0x36
 8001588:	f7ff fec6 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 800158c:	2048      	movs	r0, #72	@ 0x48
 800158e:	f7ff fedd 	bl	800134c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001592:	203a      	movs	r0, #58	@ 0x3a
 8001594:	f7ff fec0 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001598:	2055      	movs	r0, #85	@ 0x55
 800159a:	f7ff fed7 	bl	800134c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800159e:	20b1      	movs	r0, #177	@ 0xb1
 80015a0:	f7ff feba 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff fed1 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80015aa:	2018      	movs	r0, #24
 80015ac:	f7ff fece 	bl	800134c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80015b0:	20b6      	movs	r0, #182	@ 0xb6
 80015b2:	f7ff feb1 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80015b6:	2008      	movs	r0, #8
 80015b8:	f7ff fec8 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80015bc:	2082      	movs	r0, #130	@ 0x82
 80015be:	f7ff fec5 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80015c2:	2027      	movs	r0, #39	@ 0x27
 80015c4:	f7ff fec2 	bl	800134c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80015c8:	20f2      	movs	r0, #242	@ 0xf2
 80015ca:	f7ff fea5 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff febc 	bl	800134c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80015d4:	2026      	movs	r0, #38	@ 0x26
 80015d6:	f7ff fe9f 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff feb6 	bl	800134c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80015e0:	20e0      	movs	r0, #224	@ 0xe0
 80015e2:	f7ff fe99 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f7ff feb0 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80015ec:	2031      	movs	r0, #49	@ 0x31
 80015ee:	f7ff fead 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80015f2:	202b      	movs	r0, #43	@ 0x2b
 80015f4:	f7ff feaa 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80015f8:	200c      	movs	r0, #12
 80015fa:	f7ff fea7 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80015fe:	200e      	movs	r0, #14
 8001600:	f7ff fea4 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001604:	2008      	movs	r0, #8
 8001606:	f7ff fea1 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800160a:	204e      	movs	r0, #78	@ 0x4e
 800160c:	f7ff fe9e 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001610:	20f1      	movs	r0, #241	@ 0xf1
 8001612:	f7ff fe9b 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001616:	2037      	movs	r0, #55	@ 0x37
 8001618:	f7ff fe98 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800161c:	2007      	movs	r0, #7
 800161e:	f7ff fe95 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001622:	2010      	movs	r0, #16
 8001624:	f7ff fe92 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001628:	2003      	movs	r0, #3
 800162a:	f7ff fe8f 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800162e:	200e      	movs	r0, #14
 8001630:	f7ff fe8c 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001634:	2009      	movs	r0, #9
 8001636:	f7ff fe89 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff fe86 	bl	800134c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001640:	20e1      	movs	r0, #225	@ 0xe1
 8001642:	f7ff fe69 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff fe80 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800164c:	200e      	movs	r0, #14
 800164e:	f7ff fe7d 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001652:	2014      	movs	r0, #20
 8001654:	f7ff fe7a 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001658:	2003      	movs	r0, #3
 800165a:	f7ff fe77 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800165e:	2011      	movs	r0, #17
 8001660:	f7ff fe74 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001664:	2007      	movs	r0, #7
 8001666:	f7ff fe71 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800166a:	2031      	movs	r0, #49	@ 0x31
 800166c:	f7ff fe6e 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001670:	20c1      	movs	r0, #193	@ 0xc1
 8001672:	f7ff fe6b 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001676:	2048      	movs	r0, #72	@ 0x48
 8001678:	f7ff fe68 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800167c:	2008      	movs	r0, #8
 800167e:	f7ff fe65 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001682:	200f      	movs	r0, #15
 8001684:	f7ff fe62 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001688:	200c      	movs	r0, #12
 800168a:	f7ff fe5f 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800168e:	2031      	movs	r0, #49	@ 0x31
 8001690:	f7ff fe5c 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001694:	2036      	movs	r0, #54	@ 0x36
 8001696:	f7ff fe59 	bl	800134c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800169a:	200f      	movs	r0, #15
 800169c:	f7ff fe56 	bl	800134c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80016a0:	2011      	movs	r0, #17
 80016a2:	f7ff fe39 	bl	8001318 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80016a6:	2064      	movs	r0, #100	@ 0x64
 80016a8:	f002 fca4 	bl	8003ff4 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80016ac:	2029      	movs	r0, #41	@ 0x29
 80016ae:	f7ff fe33 	bl	8001318 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f802 	bl	80016bc <ILI9341_SetRotation>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80016c6:	2036      	movs	r0, #54	@ 0x36
 80016c8:	f7ff fe26 	bl	8001318 <ILI9341_WriteCommand>
	HAL_Delay(1);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f002 fc91 	bl	8003ff4 <HAL_Delay>

	switch(rotation)
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d837      	bhi.n	8001748 <ILI9341_SetRotation+0x8c>
 80016d8:	a201      	add	r2, pc, #4	@ (adr r2, 80016e0 <ILI9341_SetRotation+0x24>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	080016f1 	.word	0x080016f1
 80016e4:	08001707 	.word	0x08001707
 80016e8:	0800171d 	.word	0x0800171d
 80016ec:	08001733 	.word	0x08001733
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80016f0:	2048      	movs	r0, #72	@ 0x48
 80016f2:	f7ff fe2b 	bl	800134c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <ILI9341_SetRotation+0x98>)
 80016f8:	22f0      	movs	r2, #240	@ 0xf0
 80016fa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <ILI9341_SetRotation+0x9c>)
 80016fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001702:	801a      	strh	r2, [r3, #0]
		break;
 8001704:	e021      	b.n	800174a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8001706:	2028      	movs	r0, #40	@ 0x28
 8001708:	f7ff fe20 	bl	800134c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <ILI9341_SetRotation+0x98>)
 800170e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001712:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <ILI9341_SetRotation+0x9c>)
 8001716:	22f0      	movs	r2, #240	@ 0xf0
 8001718:	801a      	strh	r2, [r3, #0]
		break;
 800171a:	e016      	b.n	800174a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 800171c:	2088      	movs	r0, #136	@ 0x88
 800171e:	f7ff fe15 	bl	800134c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <ILI9341_SetRotation+0x98>)
 8001724:	22f0      	movs	r2, #240	@ 0xf0
 8001726:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <ILI9341_SetRotation+0x9c>)
 800172a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800172e:	801a      	strh	r2, [r3, #0]
		break;
 8001730:	e00b      	b.n	800174a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001732:	20e8      	movs	r0, #232	@ 0xe8
 8001734:	f7ff fe0a 	bl	800134c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <ILI9341_SetRotation+0x98>)
 800173a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800173e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <ILI9341_SetRotation+0x9c>)
 8001742:	22f0      	movs	r2, #240	@ 0xf0
 8001744:	801a      	strh	r2, [r3, #0]
		break;
 8001746:	e000      	b.n	800174a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001748:	bf00      	nop
	}
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000002 	.word	0x20000002
 8001758:	20000000 	.word	0x20000000

0800175c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 800175c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001760:	b08d      	sub	sp, #52	@ 0x34
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	6039      	str	r1, [r7, #0]
 8001768:	80fb      	strh	r3, [r7, #6]
 800176a:	466b      	mov	r3, sp
 800176c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800177a:	d202      	bcs.n	8001782 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001780:	e002      	b.n	8001788 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001782:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001786:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2120      	movs	r1, #32
 800178c:	483f      	ldr	r0, [pc, #252]	@ (800188c <ILI9341_DrawColorBurst+0x130>)
 800178e:	f003 fa83 	bl	8004c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001798:	483c      	ldr	r0, [pc, #240]	@ (800188c <ILI9341_DrawColorBurst+0x130>)
 800179a:	f003 fa7d 	bl	8004c98 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 80017a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017aa:	460b      	mov	r3, r1
 80017ac:	3b01      	subs	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	2300      	movs	r3, #0
 80017b2:	4688      	mov	r8, r1
 80017b4:	4699      	mov	r9, r3
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ca:	2300      	movs	r3, #0
 80017cc:	460c      	mov	r4, r1
 80017ce:	461d      	mov	r5, r3
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	00eb      	lsls	r3, r5, #3
 80017da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017de:	00e2      	lsls	r2, r4, #3
 80017e0:	1dcb      	adds	r3, r1, #7
 80017e2:	08db      	lsrs	r3, r3, #3
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	ebad 0d03 	sub.w	sp, sp, r3
 80017ea:	466b      	mov	r3, sp
 80017ec:	3300      	adds	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017f4:	e00e      	b.n	8001814 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fa:	4413      	add	r3, r2
 80017fc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001800:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001804:	3301      	adds	r3, #1
 8001806:	88fa      	ldrh	r2, [r7, #6]
 8001808:	b2d1      	uxtb	r1, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 800180e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001810:	3302      	adds	r3, #2
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001818:	429a      	cmp	r2, r3
 800181a:	d3ec      	bcc.n	80017f6 <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001830:	fbb3 f2f2 	udiv	r2, r3, r2
 8001834:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001836:	fb01 f202 	mul.w	r2, r1, r2
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d010      	beq.n	8001866 <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
 8001848:	e009      	b.n	800185e <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800184a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184c:	b29a      	uxth	r2, r3
 800184e:	230a      	movs	r3, #10
 8001850:	69b9      	ldr	r1, [r7, #24]
 8001852:	480f      	ldr	r0, [pc, #60]	@ (8001890 <ILI9341_DrawColorBurst+0x134>)
 8001854:	f004 f83d 	bl	80058d2 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	3301      	adds	r3, #1
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
 800185e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	429a      	cmp	r2, r3
 8001864:	d3f1      	bcc.n	800184a <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	b29a      	uxth	r2, r3
 800186a:	230a      	movs	r3, #10
 800186c:	69b9      	ldr	r1, [r7, #24]
 800186e:	4808      	ldr	r0, [pc, #32]	@ (8001890 <ILI9341_DrawColorBurst+0x134>)
 8001870:	f004 f82f 	bl	80058d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187a:	4804      	ldr	r0, [pc, #16]	@ (800188c <ILI9341_DrawColorBurst+0x130>)
 800187c:	f003 fa0c 	bl	8004c98 <HAL_GPIO_WritePin>
 8001880:	46b5      	mov	sp, r6
}
 8001882:	bf00      	nop
 8001884:	3734      	adds	r7, #52	@ 0x34
 8001886:	46bd      	mov	sp, r7
 8001888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800188c:	40020400 	.word	0x40020400
 8001890:	20000d3c 	.word	0x20000d3c

08001894 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <ILI9341_FillScreen+0x44>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <ILI9341_FillScreen+0x48>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2100      	movs	r1, #0
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fd83 	bl	80013b8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <ILI9341_FillScreen+0x44>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <ILI9341_FillScreen+0x48>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff46 	bl	800175c <ILI9341_DrawColorBurst>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000002 	.word	0x20000002
 80018dc:	20000000 	.word	0x20000000

080018e0 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	80bb      	strh	r3, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018f2:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <ILI9341_DrawPixel+0xc4>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d24d      	bcs.n	800199a <ILI9341_DrawPixel+0xba>
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <ILI9341_DrawPixel+0xc8>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	88ba      	ldrh	r2, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d247      	bcs.n	800199a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	753b      	strb	r3, [r7, #20]
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	757b      	strb	r3, [r7, #21]
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	3301      	adds	r3, #1
 800191e:	121b      	asrs	r3, r3, #8
 8001920:	b2db      	uxtb	r3, r3
 8001922:	75bb      	strb	r3, [r7, #22]
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3301      	adds	r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	743b      	strb	r3, [r7, #16]
 8001938:	88bb      	ldrh	r3, [r7, #4]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	747b      	strb	r3, [r7, #17]
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	121b      	asrs	r3, r3, #8
 8001944:	b2db      	uxtb	r3, r3
 8001946:	74bb      	strb	r3, [r7, #18]
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	3301      	adds	r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	b29b      	uxth	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	733b      	strb	r3, [r7, #12]
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001962:	202a      	movs	r0, #42	@ 0x2a
 8001964:	f7ff fcd8 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2104      	movs	r1, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fd06 	bl	8001380 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001974:	202b      	movs	r0, #43	@ 0x2b
 8001976:	f7ff fccf 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	2104      	movs	r1, #4
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fcfd 	bl	8001380 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001986:	202c      	movs	r0, #44	@ 0x2c
 8001988:	f7ff fcc6 	bl	8001318 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2102      	movs	r1, #2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fcf4 	bl	8001380 <ILI9341_WriteBuffer>
 8001998:	e000      	b.n	800199c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800199a:	bf00      	nop
}
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000002 	.word	0x20000002
 80019a8:	20000000 	.word	0x20000000

080019ac <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	4603      	mov	r3, r0
 80019c0:	80bb      	strh	r3, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
 80019c6:	4613      	mov	r3, r2
 80019c8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ca:	4b24      	ldr	r3, [pc, #144]	@ (8001a5c <ILI9341_DrawRectangle+0xb0>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	88fa      	ldrh	r2, [r7, #6]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d23d      	bcs.n	8001a52 <ILI9341_DrawRectangle+0xa6>
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <ILI9341_DrawRectangle+0xb4>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	88ba      	ldrh	r2, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d237      	bcs.n	8001a52 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a5c <ILI9341_DrawRectangle+0xb0>)
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	b292      	uxth	r2, r2
 80019ee:	4293      	cmp	r3, r2
 80019f0:	dd05      	ble.n	80019fe <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <ILI9341_DrawRectangle+0xb0>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80019fe:	88ba      	ldrh	r2, [r7, #4]
 8001a00:	883b      	ldrh	r3, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <ILI9341_DrawRectangle+0xb4>)
 8001a06:	8812      	ldrh	r2, [r2, #0]
 8001a08:	b292      	uxth	r2, r2
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	dd05      	ble.n	8001a1a <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <ILI9341_DrawRectangle+0xb4>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	88bb      	ldrh	r3, [r7, #4]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001a1a:	88fa      	ldrh	r2, [r7, #6]
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29c      	uxth	r4, r3
 8001a26:	88ba      	ldrh	r2, [r7, #4]
 8001a28:	883b      	ldrh	r3, [r7, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	88b9      	ldrh	r1, [r7, #4]
 8001a34:	88f8      	ldrh	r0, [r7, #6]
 8001a36:	4622      	mov	r2, r4
 8001a38:	f7ff fcbe 	bl	80013b8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001a3c:	883b      	ldrh	r3, [r7, #0]
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	8b3b      	ldrh	r3, [r7, #24]
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fe86 	bl	800175c <ILI9341_DrawColorBurst>
 8001a50:	e000      	b.n	8001a54 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a52:	bf00      	nop
}
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd90      	pop	{r4, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000002 	.word	0x20000002
 8001a60:	20000000 	.word	0x20000000

08001a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <MX_DMA_Init+0x3c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <MX_DMA_Init+0x3c>)
 8001a74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <MX_DMA_Init+0x3c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	200f      	movs	r0, #15
 8001a8c:	f002 fbb1 	bl	80041f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a90:	200f      	movs	r0, #15
 8001a92:	f002 fbca 	bl	800422a <HAL_NVIC_EnableIRQ>

}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <buttonPress>:





void buttonPress(){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
	while(1){
		uint8_t button = HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4806      	ldr	r0, [pc, #24]	@ (8001ac8 <buttonPress+0x24>)
 8001aae:	f003 f8db 	bl	8004c68 <HAL_GPIO_ReadPin>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
		if(button){
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d100      	bne.n	8001abe <buttonPress+0x1a>
	while(1){
 8001abc:	e7f5      	b.n	8001aaa <buttonPress+0x6>
			break;
 8001abe:	bf00      	nop
		}

	}
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40020400 	.word	0x40020400

08001acc <getTare>:


uint32_t getTare(){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	printf("Remove all weight from the drawer(5 seconds)\n\r");
 8001ad2:	4815      	ldr	r0, [pc, #84]	@ (8001b28 <getTare+0x5c>)
 8001ad4:	f00a fa40 	bl	800bf58 <iprintf>
	HAL_Delay(5000);
 8001ad8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001adc:	f002 fa8a 	bl	8003ff4 <HAL_Delay>
	printf("Gathering initial Tare of Load Cell...\n\r");
 8001ae0:	4812      	ldr	r0, [pc, #72]	@ (8001b2c <getTare+0x60>)
 8001ae2:	f00a fa39 	bl	800bf58 <iprintf>
	int weight_temp = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 1; i <= 4; i++){
 8001aea:	2301      	movs	r3, #1
 8001aec:	807b      	strh	r3, [r7, #2]
 8001aee:	e00e      	b.n	8001b0e <getTare+0x42>
			weight_temp = (int)weighRaw();
 8001af0:	f001 fcab 	bl	800344a <weighRaw>
 8001af4:	6078      	str	r0, [r7, #4]
			printf("Tare attempt %d: %d\n\r", i, weight_temp);
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4619      	mov	r1, r3
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <getTare+0x64>)
 8001afe:	f00a fa2b 	bl	800bf58 <iprintf>
			HAL_Delay(10);
 8001b02:	200a      	movs	r0, #10
 8001b04:	f002 fa76 	bl	8003ff4 <HAL_Delay>
	for(uint16_t i = 1; i <= 4; i++){
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	807b      	strh	r3, [r7, #2]
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d9ed      	bls.n	8001af0 <getTare+0x24>
		}
	printf("Tare Set: %d\n\r", weight_temp);
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4807      	ldr	r0, [pc, #28]	@ (8001b34 <getTare+0x68>)
 8001b18:	f00a fa1e 	bl	800bf58 <iprintf>
	return weight_temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	0800f9a8 	.word	0x0800f9a8
 8001b2c:	0800f9d8 	.word	0x0800f9d8
 8001b30:	0800fa04 	.word	0x0800fa04
 8001b34:	0800fa1c 	.word	0x0800fa1c

08001b38 <Calibrate>:

void Calibrate(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b094      	sub	sp, #80	@ 0x50
 8001b3c:	af02      	add	r7, sp, #8
	printf("Beginning with Row: 1 Drawer: 1\n\r");
 8001b3e:	48a5      	ldr	r0, [pc, #660]	@ (8001dd4 <Calibrate+0x29c>)
 8001b40:	f00a fa0a 	bl	800bf58 <iprintf>

	uint32_t tare = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	@ 0x30
	int knownHX711 = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t thresh = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t ID = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	FRESULT res = f_unlink("drwConf.txt"); //deletes the original file
 8001b56:	48a0      	ldr	r0, [pc, #640]	@ (8001dd8 <Calibrate+0x2a0>)
 8001b58:	f009 f813 	bl	800ab82 <f_unlink>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	if(res == FR_OK){
 8001b62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <Calibrate+0x38>
		printf("Removed old 'drwConf.txt'\n\r");
 8001b6a:	489c      	ldr	r0, [pc, #624]	@ (8001ddc <Calibrate+0x2a4>)
 8001b6c:	f00a f9f4 	bl	800bf58 <iprintf>
	}
	f_unlink("temp_drawerConfig.txt"); //deletes the original file
 8001b70:	489b      	ldr	r0, [pc, #620]	@ (8001de0 <Calibrate+0x2a8>)
 8001b72:	f009 f806 	bl	800ab82 <f_unlink>


	for(int i = 1; i <= 1; i++){
 8001b76:	2301      	movs	r3, #1
 8001b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b7a:	e122      	b.n	8001dc2 <Calibrate+0x28a>

		uint16_t A_mast = MuxCombos[i-1].A;
 8001b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b7e:	1e5a      	subs	r2, r3, #1
 8001b80:	4998      	ldr	r1, [pc, #608]	@ (8001de4 <Calibrate+0x2ac>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t B_mast = MuxCombos[i-1].B;
 8001b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b92:	1e5a      	subs	r2, r3, #1
 8001b94:	4993      	ldr	r1, [pc, #588]	@ (8001de4 <Calibrate+0x2ac>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint16_t C_mast = MuxCombos[i-1].C;
 8001ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ba6:	1e5a      	subs	r2, r3, #1
 8001ba8:	498e      	ldr	r1, [pc, #568]	@ (8001de4 <Calibrate+0x2ac>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	843b      	strh	r3, [r7, #32]

		muxSET(A_mast, B_mast, C_mast, 1);
 8001bb6:	8c3a      	ldrh	r2, [r7, #32]
 8001bb8:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8001bba:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f001 fab5 	bl	800312c <muxSET>

		setRelay(i);
 8001bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 faf8 	bl	80031bc <setRelay>

		if(i == 1){
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d17a      	bne.n	8001cc8 <Calibrate+0x190>
			for(int j = 1; j <= 4; j++){
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bd6:	e073      	b.n	8001cc0 <Calibrate+0x188>

				uint16_t A_slave = MuxCombos[j-1].A;
 8001bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bda:	1e5a      	subs	r2, r3, #1
 8001bdc:	4981      	ldr	r1, [pc, #516]	@ (8001de4 <Calibrate+0x2ac>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	3302      	adds	r3, #2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	81fb      	strh	r3, [r7, #14]
				uint16_t B_slave = MuxCombos[j-1].B;
 8001bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bee:	1e5a      	subs	r2, r3, #1
 8001bf0:	497c      	ldr	r1, [pc, #496]	@ (8001de4 <Calibrate+0x2ac>)
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	81bb      	strh	r3, [r7, #12]
				uint16_t C_slave = MuxCombos[j-1].C;
 8001c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	4977      	ldr	r1, [pc, #476]	@ (8001de4 <Calibrate+0x2ac>)
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	817b      	strh	r3, [r7, #10]

				muxSET(A_slave, B_slave, C_slave, 0);
 8001c12:	897a      	ldrh	r2, [r7, #10]
 8001c14:	89b9      	ldrh	r1, [r7, #12]
 8001c16:	89f8      	ldrh	r0, [r7, #14]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f001 fa87 	bl	800312c <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, j);
 8001c1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c22:	4871      	ldr	r0, [pc, #452]	@ (8001de8 <Calibrate+0x2b0>)
 8001c24:	f00a f998 	bl	800bf58 <iprintf>
				tare = getTare();
 8001c28:	f7ff ff50 	bl	8001acc <getTare>
 8001c2c:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the CONFIRMATION button when ready to calibrate\n\r");
 8001c2e:	486f      	ldr	r0, [pc, #444]	@ (8001dec <Calibrate+0x2b4>)
 8001c30:	f00a f992 	bl	800bf58 <iprintf>

				//double press confirmation here
				//button_output(num);
				buttonPress();
 8001c34:	f7ff ff36 	bl	8001aa4 <buttonPress>


				knownHX711 = weighRawTare(tare);
 8001c38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c3a:	f001 fc40 	bl	80034be <weighRawTare>
 8001c3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8001c40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c42:	486b      	ldr	r0, [pc, #428]	@ (8001df0 <Calibrate+0x2b8>)
 8001c44:	f00a f988 	bl	800bf58 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fc78 	bl	8003540 <getCalFactor>
 8001c50:	ed87 0a01 	vstr	s0, [r7, #4]

				for(int p = 0; p < 4; p++){
 8001c54:	2300      	movs	r3, #0
 8001c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c58:	e010      	b.n	8001c7c <Calibrate+0x144>
					int weight = weigh(tare, calFactor);
 8001c5a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c60:	f001 fba4 	bl	80033ac <weigh>
 8001c64:	6038      	str	r0, [r7, #0]
					printf("Weight: %d\n\r", weight);
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	4862      	ldr	r0, [pc, #392]	@ (8001df4 <Calibrate+0x2bc>)
 8001c6a:	f00a f975 	bl	800bf58 <iprintf>
					HAL_Delay(400);
 8001c6e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c72:	f002 f9bf 	bl	8003ff4 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c78:	3301      	adds	r3, #1
 8001c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	ddeb      	ble.n	8001c5a <Calibrate+0x122>
				}

				thresh = refillDrawer(tare, calFactor);
 8001c82:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c88:	f000 f914 	bl	8001eb4 <refillDrawer>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28

				ID = EEPROM_ReadByte(0x00);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f000 fd8f 	bl	80027b4 <EEPROM_ReadByte>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

				SD_init();
 8001c9c:	f000 fdbe 	bl	800281c <SD_init>

				saveDrawerConfig(i, j, calFactor, tare, thresh, ID);
 8001ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ca6:	b299      	uxth	r1, r3
 8001ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cb2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cb6:	f000 fded 	bl	8002894 <saveDrawerConfig>
			for(int j = 1; j <= 4; j++){
 8001cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	dd88      	ble.n	8001bd8 <Calibrate+0xa0>
 8001cc6:	e079      	b.n	8001dbc <Calibrate+0x284>
			}
		}
		else{
			for(int k = 1; k <= 7; k++){
 8001cc8:	2301      	movs	r3, #1
 8001cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ccc:	e073      	b.n	8001db6 <Calibrate+0x27e>

				uint16_t A_slave = MuxCombos[k-1].A;
 8001cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	4944      	ldr	r1, [pc, #272]	@ (8001de4 <Calibrate+0x2ac>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3302      	adds	r3, #2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	83fb      	strh	r3, [r7, #30]
				uint16_t B_slave = MuxCombos[k-1].B;
 8001ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ce4:	1e5a      	subs	r2, r3, #1
 8001ce6:	493f      	ldr	r1, [pc, #252]	@ (8001de4 <Calibrate+0x2ac>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	83bb      	strh	r3, [r7, #28]
				uint16_t C_slave = MuxCombos[k-1].C;
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf8:	1e5a      	subs	r2, r3, #1
 8001cfa:	493a      	ldr	r1, [pc, #232]	@ (8001de4 <Calibrate+0x2ac>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	837b      	strh	r3, [r7, #26]

				muxSET(A_slave, B_slave, C_slave, 0);
 8001d08:	8b7a      	ldrh	r2, [r7, #26]
 8001d0a:	8bb9      	ldrh	r1, [r7, #28]
 8001d0c:	8bf8      	ldrh	r0, [r7, #30]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f001 fa0c 	bl	800312c <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, k);
 8001d14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001d18:	4833      	ldr	r0, [pc, #204]	@ (8001de8 <Calibrate+0x2b0>)
 8001d1a:	f00a f91d 	bl	800bf58 <iprintf>
				tare = getTare();
 8001d1e:	f7ff fed5 	bl	8001acc <getTare>
 8001d22:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the CONFIRMATION button when ready to calibrate\n\r");
 8001d24:	4831      	ldr	r0, [pc, #196]	@ (8001dec <Calibrate+0x2b4>)
 8001d26:	f00a f917 	bl	800bf58 <iprintf>

				//double press confirmation here
				//button_output(num);
				buttonPress();
 8001d2a:	f7ff febb 	bl	8001aa4 <buttonPress>



				knownHX711 = weighRawTare(tare);
 8001d2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d30:	f001 fbc5 	bl	80034be <weighRawTare>
 8001d34:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8001d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d38:	482d      	ldr	r0, [pc, #180]	@ (8001df0 <Calibrate+0x2b8>)
 8001d3a:	f00a f90d 	bl	800bf58 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fbfd 	bl	8003540 <getCalFactor>
 8001d46:	ed87 0a05 	vstr	s0, [r7, #20]

				for(int p = 0; p < 4; p++){
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d4e:	e010      	b.n	8001d72 <Calibrate+0x23a>
					int weight = weigh(tare, calFactor);
 8001d50:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d56:	f001 fb29 	bl	80033ac <weigh>
 8001d5a:	6138      	str	r0, [r7, #16]
					printf("Weight: %d\n\r", weight);
 8001d5c:	6939      	ldr	r1, [r7, #16]
 8001d5e:	4825      	ldr	r0, [pc, #148]	@ (8001df4 <Calibrate+0x2bc>)
 8001d60:	f00a f8fa 	bl	800bf58 <iprintf>
					HAL_Delay(400);
 8001d64:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001d68:	f002 f944 	bl	8003ff4 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6e:	3301      	adds	r3, #1
 8001d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	ddeb      	ble.n	8001d50 <Calibrate+0x218>
				}

				thresh = refillDrawer(tare, calFactor);
 8001d78:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d7e:	f000 f899 	bl	8001eb4 <refillDrawer>
 8001d82:	4603      	mov	r3, r0
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28

				ID = EEPROM_ReadByte(0x00);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f000 fd14 	bl	80027b4 <EEPROM_ReadByte>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

				SD_init();
 8001d92:	f000 fd43 	bl	800281c <SD_init>

				saveDrawerConfig(i, k, calFactor, tare, thresh, ID);
 8001d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d98:	b298      	uxth	r0, r3
 8001d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001da8:	ed97 0a05 	vldr	s0, [r7, #20]
 8001dac:	f000 fd72 	bl	8002894 <saveDrawerConfig>
			for(int k = 1; k <= 7; k++){
 8001db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db2:	3301      	adds	r3, #1
 8001db4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db8:	2b07      	cmp	r3, #7
 8001dba:	dd88      	ble.n	8001cce <Calibrate+0x196>
	for(int i = 1; i <= 1; i++){
 8001dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f77f aed9 	ble.w	8001b7c <Calibrate+0x44>

			}
		}
	}
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	3748      	adds	r7, #72	@ 0x48
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	0800fa2c 	.word	0x0800fa2c
 8001dd8:	0800fa50 	.word	0x0800fa50
 8001ddc:	0800fa5c 	.word	0x0800fa5c
 8001de0:	0800fa78 	.word	0x0800fa78
 8001de4:	08011098 	.word	0x08011098
 8001de8:	0800fa90 	.word	0x0800fa90
 8001dec:	0800faa8 	.word	0x0800faa8
 8001df0:	0800fb0c 	.word	0x0800fb0c
 8001df4:	0800fb20 	.word	0x0800fb20

08001df8 <buttonPress2>:
uint32_t press_time = 0;  // Timestamp of the first press
uint8_t press_count = 0;  // A Flag that's used for indicating a second press

int num2 = 1;

void buttonPress2(){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
	while(1){
		uint8_t button = HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 8001dfe:	2104      	movs	r1, #4
 8001e00:	4806      	ldr	r0, [pc, #24]	@ (8001e1c <buttonPress2+0x24>)
 8001e02:	f002 ff31 	bl	8004c68 <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
		if(button){
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d100      	bne.n	8001e12 <buttonPress2+0x1a>
	while(1){
 8001e10:	e7f5      	b.n	8001dfe <buttonPress2+0x6>
			break;
 8001e12:	bf00      	nop
		}

	}
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020400 	.word	0x40020400

08001e20 <getThresh>:

uint32_t getThresh(uint32_t tare, float calFactor){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	ed87 0a00 	vstr	s0, [r7]
	uint32_t sum = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
	float avg = 0;
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < 4; i++){
 8001e36:	2300      	movs	r3, #0
 8001e38:	827b      	strh	r3, [r7, #18]
 8001e3a:	e00d      	b.n	8001e58 <getThresh+0x38>
		uint16_t weight = weigh(tare, calFactor);
 8001e3c:	ed97 0a00 	vldr	s0, [r7]
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f001 fab3 	bl	80033ac <weigh>
 8001e46:	4603      	mov	r3, r0
 8001e48:	817b      	strh	r3, [r7, #10]
		sum += weight;
 8001e4a:	897b      	ldrh	r3, [r7, #10]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4413      	add	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < 4; i++){
 8001e52:	8a7b      	ldrh	r3, [r7, #18]
 8001e54:	3301      	adds	r3, #1
 8001e56:	827b      	strh	r3, [r7, #18]
 8001e58:	8a7b      	ldrh	r3, [r7, #18]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d9ee      	bls.n	8001e3c <getThresh+0x1c>
	}

	avg = sum / 4.0;
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7fe fb70 	bl	8000544 <__aeabi_ui2d>
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <getThresh+0x90>)
 8001e6a:	f7fe fd0f 	bl	800088c <__aeabi_ddiv>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe fed7 	bl	8000c28 <__aeabi_d2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	60fb      	str	r3, [r7, #12]

	return (avg * 0.1); //returns 10% of the normalized weight as the threshold
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f7fe fb82 	bl	8000588 <__aeabi_f2d>
 8001e84:	a308      	add	r3, pc, #32	@ (adr r3, 8001ea8 <getThresh+0x88>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f7fe fbd5 	bl	8000638 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7fe fea7 	bl	8000be8 <__aeabi_d2uiz>
 8001e9a:	4603      	mov	r3, r0

}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	9999999a 	.word	0x9999999a
 8001eac:	3fb99999 	.word	0x3fb99999
 8001eb0:	40100000 	.word	0x40100000

08001eb4 <refillDrawer>:



int refillDrawer(uint32_t tare, float calFactor){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	ed87 0a00 	vstr	s0, [r7]
	printf("Please refill the current drawer\n\rPress the CONFIRM button when ready\n\r");
 8001ec0:	4809      	ldr	r0, [pc, #36]	@ (8001ee8 <refillDrawer+0x34>)
 8001ec2:	f00a f849 	bl	800bf58 <iprintf>

	//function to wait for a double press then a confirmation press
	//button_output(num2);

	buttonPress2();
 8001ec6:	f7ff ff97 	bl	8001df8 <buttonPress2>

	//doublePress(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);

	uint32_t thresh = getThresh(tare, calFactor);
 8001eca:	ed97 0a00 	vldr	s0, [r7]
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa6 	bl	8001e20 <getThresh>
 8001ed4:	60f8      	str	r0, [r7, #12]
	printf("Threshold set to %ld\n\r", thresh);
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	4804      	ldr	r0, [pc, #16]	@ (8001eec <refillDrawer+0x38>)
 8001eda:	f00a f83d 	bl	800bf58 <iprintf>
	return thresh;
 8001ede:	68fb      	ldr	r3, [r7, #12]


}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	0800fb30 	.word	0x0800fb30
 8001eec:	0800fb78 	.word	0x0800fb78

08001ef0 <main_function>:
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"



void main_function(){
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b0b0      	sub	sp, #192	@ 0xc0
 8001ef4:	af02      	add	r7, sp, #8


	struct drawerInfo drawerInst;
	uint32_t tare = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float calFactor = 1;
 8001efc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	int thresh;
	uint8_t fileID = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	uint8_t realID = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

	uint32_t sum;
	uint16_t normalizedWeight;

	for(uint16_t i = 1; i <= 4; i++){
 8001f10:	2301      	movs	r3, #1
 8001f12:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8001f16:	e261      	b.n	80023dc <main_function+0x4ec>
			printf("Row %d", i);
 8001f18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	48a0      	ldr	r0, [pc, #640]	@ (80021a0 <main_function+0x2b0>)
 8001f20:	f00a f81a 	bl	800bf58 <iprintf>

			uint16_t A_mast = MuxCombos[i-1].A;
 8001f24:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	499e      	ldr	r1, [pc, #632]	@ (80021a4 <main_function+0x2b4>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	3302      	adds	r3, #2
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
			uint16_t B_mast = MuxCombos[i-1].B;
 8001f3c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001f40:	1e5a      	subs	r2, r3, #1
 8001f42:	4998      	ldr	r1, [pc, #608]	@ (80021a4 <main_function+0x2b4>)
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
			uint16_t C_mast = MuxCombos[i-1].C;
 8001f54:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	4992      	ldr	r1, [pc, #584]	@ (80021a4 <main_function+0x2b4>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

			muxSET(A_mast, B_mast, C_mast, 1);
 8001f6a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8001f6e:	f8b7 108e 	ldrh.w	r1, [r7, #142]	@ 0x8e
 8001f72:	f8b7 0090 	ldrh.w	r0, [r7, #144]	@ 0x90
 8001f76:	2301      	movs	r3, #1
 8001f78:	f001 f8d8 	bl	800312c <muxSET>

			setRelay(i);
 8001f7c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 f91a 	bl	80031bc <setRelay>

			if(i == 1){
 8001f88:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 8103 	bne.w	8002198 <main_function+0x2a8>
				for(uint16_t j = 1; j <= 4; j++){
 8001f92:	2301      	movs	r3, #1
 8001f94:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8001f98:	e0f8      	b.n	800218c <main_function+0x29c>

					sum = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					normalizedWeight = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

					uint16_t A_slave = MuxCombos[j-1].A;
 8001fa6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8001faa:	1e5a      	subs	r2, r3, #1
 8001fac:	497d      	ldr	r1, [pc, #500]	@ (80021a4 <main_function+0x2b4>)
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
					uint16_t B_slave = MuxCombos[j-1].B;
 8001fbe:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8001fc2:	1e5a      	subs	r2, r3, #1
 8001fc4:	4977      	ldr	r1, [pc, #476]	@ (80021a4 <main_function+0x2b4>)
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3301      	adds	r3, #1
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
					uint16_t C_slave = MuxCombos[j-1].C;
 8001fd6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8001fda:	1e5a      	subs	r2, r3, #1
 8001fdc:	4971      	ldr	r1, [pc, #452]	@ (80021a4 <main_function+0x2b4>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

					muxSET(A_slave, B_slave, C_slave, 0);
 8001fec:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 8001ff0:	f8b7 106c 	ldrh.w	r1, [r7, #108]	@ 0x6c
 8001ff4:	f8b7 006e 	ldrh.w	r0, [r7, #110]	@ 0x6e
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f001 f897 	bl	800312c <muxSET>

					printf("Drawer %d\n", j);
 8001ffe:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8002002:	4619      	mov	r1, r3
 8002004:	4868      	ldr	r0, [pc, #416]	@ (80021a8 <main_function+0x2b8>)
 8002006:	f009 ffa7 	bl	800bf58 <iprintf>

					realID = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
					realID = EEPROM_ReadByte(0x00);
 8002010:	2000      	movs	r0, #0
 8002012:	f000 fbcf 	bl	80027b4 <EEPROM_ReadByte>
 8002016:	4603      	mov	r3, r0
 8002018:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

					drawerInst = getFileInfo(i, j, 0, 0);
 800201c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002020:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	@ 0xa0
 8002024:	f8b7 10a2 	ldrh.w	r1, [r7, #162]	@ 0xa2
 8002028:	2300      	movs	r3, #0
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2300      	movs	r3, #0
 800202e:	f000 fe7f 	bl	8002d30 <getFileInfo>

					tare = drawerInst.Tare;
 8002032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
					calFactor = drawerInst.calFactor;
 8002038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800203a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
					thresh = drawerInst.thresh;
 800203e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002046:	ee17 3a90 	vmov	r3, s15
 800204a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
					fileID = drawerInst.ID;
 800204e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002052:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab



					if(fileID != realID){
 8002056:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800205a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800205e:	429a      	cmp	r2, r3
 8002060:	d04c      	beq.n	80020fc <main_function+0x20c>
						printf("ID Mismatch, replacing drawer location...");
 8002062:	4852      	ldr	r0, [pc, #328]	@ (80021ac <main_function+0x2bc>)
 8002064:	f009 ff78 	bl	800bf58 <iprintf>

						struct drawerInfo tempInst;
						tempInst =  getFileInfo(i , j, realID, 1);
 8002068:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800206c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002070:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	@ 0xa0
 8002074:	f8b7 10a2 	ldrh.w	r1, [r7, #162]	@ 0xa2
 8002078:	2401      	movs	r4, #1
 800207a:	9400      	str	r4, [sp, #0]
 800207c:	f000 fe58 	bl	8002d30 <getFileInfo>

						uint32_t tempTare = tempInst.Tare;
 8002080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002082:	667b      	str	r3, [r7, #100]	@ 0x64
						float tempCalFactor = tempInst.calFactor;
 8002084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002086:	663b      	str	r3, [r7, #96]	@ 0x60
						int tempThresh = tempInst.thresh;
 8002088:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800208c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002090:	ee17 3a90 	vmov	r3, s15
 8002094:	65fb      	str	r3, [r7, #92]	@ 0x5c
						uint8_t tempRow = tempInst.row;
 8002096:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002098:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
						uint8_t tempDrawer = tempInst.drawer;
 800209c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800209e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

						updateDrawerConfig(i, j, tempCalFactor, tempTare, tempThresh, realID);
 80020a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80020a4:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	@ 0xa0
 80020a8:	f8b7 00a2 	ldrh.w	r0, [r7, #162]	@ 0xa2
 80020ac:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80020b6:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 80020ba:	f000 fd61 	bl	8002b80 <updateDrawerConfig>

						updateDrawerConfig(tempRow, tempDrawer, calFactor, tare, thresh, fileID);
 80020be:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80020c2:	b298      	uxth	r0, r3
 80020c4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80020c8:	b299      	uxth	r1, r3
 80020ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80020ce:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020da:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 80020de:	f000 fd4f 	bl	8002b80 <updateDrawerConfig>

						tare = tempTare;
 80020e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
						calFactor = tempCalFactor;
 80020e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						thresh = tempThresh;
 80020ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						fileID = realID;
 80020f4:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80020f8:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab



					}

					for(int p = 0; p < 4; p++){
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002102:	e015      	b.n	8002130 <main_function+0x240>

						int weight = weigh(tare, calFactor);
 8002104:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 8002108:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800210c:	f001 f94e 	bl	80033ac <weigh>
 8002110:	6578      	str	r0, [r7, #84]	@ 0x54
						sum += weight;
 8002112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002114:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002118:	4413      	add	r3, r2
 800211a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						HAL_Delay(400);
 800211e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002122:	f001 ff67 	bl	8003ff4 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 8002126:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800212a:	3301      	adds	r3, #1
 800212c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002134:	2b03      	cmp	r3, #3
 8002136:	dde5      	ble.n	8002104 <main_function+0x214>
					}

					normalizedWeight = sum / 4;
 8002138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

					if((thresh + 100) > normalizedWeight){
 8002142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002146:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 800214a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800214e:	429a      	cmp	r2, r3
 8002150:	db17      	blt.n	8002182 <main_function+0x292>

						thresh = refillDrawer(tare, calFactor);
 8002152:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 8002156:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800215a:	f7ff feab 	bl	8001eb4 <refillDrawer>
 800215e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
						updateDrawerConfig(i, j, calFactor, tare, thresh, fileID);
 8002162:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002166:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	@ 0xa0
 800216a:	f8b7 00a2 	ldrh.w	r0, [r7, #162]	@ 0xa2
 800216e:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800217a:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 800217e:	f000 fcff 	bl	8002b80 <updateDrawerConfig>
				for(uint16_t j = 1; j <= 4; j++){
 8002182:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8002186:	3301      	adds	r3, #1
 8002188:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 800218c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8002190:	2b04      	cmp	r3, #4
 8002192:	f67f af02 	bls.w	8001f9a <main_function+0xaa>
 8002196:	e11c      	b.n	80023d2 <main_function+0x4e2>


				}
			}
			else{
				for(int k = 1; k <= 7; k++){
 8002198:	2301      	movs	r3, #1
 800219a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800219e:	e113      	b.n	80023c8 <main_function+0x4d8>
 80021a0:	0800fb90 	.word	0x0800fb90
 80021a4:	08011098 	.word	0x08011098
 80021a8:	0800fb98 	.word	0x0800fb98
 80021ac:	0800fba4 	.word	0x0800fba4

					sum = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					normalizedWeight = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

					uint16_t A_slave = MuxCombos[k-1].A;
 80021bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	498b      	ldr	r1, [pc, #556]	@ (80023f0 <main_function+0x500>)
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	3302      	adds	r3, #2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
					uint16_t B_slave = MuxCombos[k-1].B;
 80021d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	4985      	ldr	r1, [pc, #532]	@ (80023f0 <main_function+0x500>)
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	3301      	adds	r3, #1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
					uint16_t C_slave = MuxCombos[k-1].C;
 80021ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021f0:	1e5a      	subs	r2, r3, #1
 80021f2:	497f      	ldr	r1, [pc, #508]	@ (80023f0 <main_function+0x500>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	440b      	add	r3, r1
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

					muxSET(A_slave, B_slave, C_slave, 0);
 8002202:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 8002206:	f8b7 1086 	ldrh.w	r1, [r7, #134]	@ 0x86
 800220a:	f8b7 0088 	ldrh.w	r0, [r7, #136]	@ 0x88
 800220e:	2300      	movs	r3, #0
 8002210:	f000 ff8c 	bl	800312c <muxSET>

					printf("Drawer %d", k);
 8002214:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002218:	4876      	ldr	r0, [pc, #472]	@ (80023f4 <main_function+0x504>)
 800221a:	f009 fe9d 	bl	800bf58 <iprintf>

					realID = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
					realID = EEPROM_ReadByte(0x00);
 8002224:	2000      	movs	r0, #0
 8002226:	f000 fac5 	bl	80027b4 <EEPROM_ReadByte>
 800222a:	4603      	mov	r3, r0
 800222c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

					drawerInst = getFileInfo(i, k, realID, 0);
 8002230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002234:	b29a      	uxth	r2, r3
 8002236:	4638      	mov	r0, r7
 8002238:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800223c:	f8b7 10a2 	ldrh.w	r1, [r7, #162]	@ 0xa2
 8002240:	2400      	movs	r4, #0
 8002242:	9400      	str	r4, [sp, #0]
 8002244:	f000 fd74 	bl	8002d30 <getFileInfo>
 8002248:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800224c:	463d      	mov	r5, r7
 800224e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002252:	682b      	ldr	r3, [r5, #0]
 8002254:	6023      	str	r3, [r4, #0]

					tare = drawerInst.Tare;
 8002256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
					calFactor = drawerInst.calFactor;
 800225c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800225e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
					thresh = drawerInst.thresh;
 8002262:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800226a:	ee17 3a90 	vmov	r3, s15
 800226e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
					fileID = drawerInst.ID;
 8002272:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002276:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab

					if(fileID != realID){
 800227a:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800227e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002282:	429a      	cmp	r2, r3
 8002284:	d051      	beq.n	800232a <main_function+0x43a>
							printf("ID Mismatch, replacing drawer location...");
 8002286:	485c      	ldr	r0, [pc, #368]	@ (80023f8 <main_function+0x508>)
 8002288:	f009 fe66 	bl	800bf58 <iprintf>

							struct drawerInfo tempInst;
							tempInst =  getFileInfo(i , k, realID, 1);
 800228c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002290:	b29a      	uxth	r2, r3
 8002292:	f107 0018 	add.w	r0, r7, #24
 8002296:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800229a:	f8b7 10a2 	ldrh.w	r1, [r7, #162]	@ 0xa2
 800229e:	2401      	movs	r4, #1
 80022a0:	9400      	str	r4, [sp, #0]
 80022a2:	f000 fd45 	bl	8002d30 <getFileInfo>

							uint32_t tempTare = tempInst.Tare;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
							float tempCalFactor = tempInst.calFactor;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
							int tempThresh = tempInst.thresh;
 80022b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80022b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b8:	ee17 3a90 	vmov	r3, s15
 80022bc:	67bb      	str	r3, [r7, #120]	@ 0x78
							uint8_t tempRow = tempInst.row;
 80022be:	8b3b      	ldrh	r3, [r7, #24]
 80022c0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							uint8_t tempDrawer = tempInst.drawer;
 80022c4:	8b7b      	ldrh	r3, [r7, #26]
 80022c6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

							updateDrawerConfig(i, k, tempCalFactor, tempTare, tempThresh, realID);
 80022ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022ce:	b299      	uxth	r1, r3
 80022d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80022d2:	f8b7 00a2 	ldrh.w	r0, [r7, #162]	@ 0xa2
 80022d6:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022e2:	ed97 0a1f 	vldr	s0, [r7, #124]	@ 0x7c
 80022e6:	f000 fc4b 	bl	8002b80 <updateDrawerConfig>

							updateDrawerConfig(tempRow, tempDrawer, calFactor, tare, thresh, fileID);
 80022ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80022ee:	b298      	uxth	r0, r3
 80022f0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80022f4:	b299      	uxth	r1, r3
 80022f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80022fa:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002306:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 800230a:	f000 fc39 	bl	8002b80 <updateDrawerConfig>

							tare = tempTare;
 800230e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
							calFactor = tempCalFactor;
 8002316:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
							thresh = tempThresh;
 800231c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800231e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
							fileID = realID;
 8002322:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002326:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab



					}

					for(int p = 0; p < 4; p++){
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002330:	e015      	b.n	800235e <main_function+0x46e>

						int weight = weigh(tare, calFactor);
 8002332:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 8002336:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800233a:	f001 f837 	bl	80033ac <weigh>
 800233e:	6738      	str	r0, [r7, #112]	@ 0x70
						sum += weight;
 8002340:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002342:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002346:	4413      	add	r3, r2
 8002348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						HAL_Delay(400);
 800234c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002350:	f001 fe50 	bl	8003ff4 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 8002354:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002358:	3301      	adds	r3, #1
 800235a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800235e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002362:	2b03      	cmp	r3, #3
 8002364:	dde5      	ble.n	8002332 <main_function+0x442>
					}

					normalizedWeight = sum / 4;
 8002366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

					if((thresh + 100) > normalizedWeight){
 8002370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002374:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8002378:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800237c:	429a      	cmp	r2, r3
 800237e:	db1e      	blt.n	80023be <main_function+0x4ce>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 8002380:	481e      	ldr	r0, [pc, #120]	@ (80023fc <main_function+0x50c>)
 8002382:	f009 fde9 	bl	800bf58 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 8002386:	481e      	ldr	r0, [pc, #120]	@ (8002400 <main_function+0x510>)
 8002388:	f009 fde6 	bl	800bf58 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 800238c:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 8002390:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002394:	f7ff fd8e 	bl	8001eb4 <refillDrawer>
 8002398:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
						updateDrawerConfig(i, k, calFactor, tare, thresh, fileID);
 800239c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023a0:	b299      	uxth	r1, r3
 80023a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80023a6:	f8b7 00a2 	ldrh.w	r0, [r7, #162]	@ 0xa2
 80023aa:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023b6:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 80023ba:	f000 fbe1 	bl	8002b80 <updateDrawerConfig>
				for(int k = 1; k <= 7; k++){
 80023be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023c2:	3301      	adds	r3, #1
 80023c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023cc:	2b07      	cmp	r3, #7
 80023ce:	f77f aeef 	ble.w	80021b0 <main_function+0x2c0>
	for(uint16_t i = 1; i <= 4; i++){
 80023d2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80023d6:	3301      	adds	r3, #1
 80023d8:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 80023dc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	f67f ad99 	bls.w	8001f18 <main_function+0x28>

				}
			}
	}

}
 80023e6:	bf00      	nop
 80023e8:	bf00      	nop
 80023ea:	37b8      	adds	r7, #184	@ 0xb8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bdb0      	pop	{r4, r5, r7, pc}
 80023f0:	08011098 	.word	0x08011098
 80023f4:	0800fbd0 	.word	0x0800fbd0
 80023f8:	0800fba4 	.word	0x0800fba4
 80023fc:	0800fbdc 	.word	0x0800fbdc
 8002400:	0800fc18 	.word	0x0800fc18

08002404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b6a      	ldr	r3, [pc, #424]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	4a69      	ldr	r2, [pc, #420]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002428:	6313      	str	r3, [r2, #48]	@ 0x30
 800242a:	4b67      	ldr	r3, [pc, #412]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b63      	ldr	r3, [pc, #396]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	4a62      	ldr	r2, [pc, #392]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6313      	str	r3, [r2, #48]	@ 0x30
 8002446:	4b60      	ldr	r3, [pc, #384]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b5c      	ldr	r3, [pc, #368]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	4a5b      	ldr	r2, [pc, #364]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6313      	str	r3, [r2, #48]	@ 0x30
 8002462:	4b59      	ldr	r3, [pc, #356]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	4b55      	ldr	r3, [pc, #340]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a54      	ldr	r2, [pc, #336]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b52      	ldr	r3, [pc, #328]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	4b4e      	ldr	r3, [pc, #312]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a4d      	ldr	r2, [pc, #308]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b4b      	ldr	r3, [pc, #300]	@ (80025c8 <MX_GPIO_Init+0x1c4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SLAVE_C_Pin|SLAVE_B_Pin|REL_2_Pin|REL_1_Pin, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2163      	movs	r1, #99	@ 0x63
 80024aa:	4848      	ldr	r0, [pc, #288]	@ (80025cc <MX_GPIO_Init+0x1c8>)
 80024ac:	f002 fbf4 	bl	8004c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAST_A_Pin|MAST_B_Pin|MAST_C_Pin, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2113      	movs	r1, #19
 80024b4:	4846      	ldr	r0, [pc, #280]	@ (80025d0 <MX_GPIO_Init+0x1cc>)
 80024b6:	f002 fbef 	bl	8004c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 80024ba:	2200      	movs	r2, #0
 80024bc:	f24c 7121 	movw	r1, #50977	@ 0xc721
 80024c0:	4844      	ldr	r0, [pc, #272]	@ (80025d4 <MX_GPIO_Init+0x1d0>)
 80024c2:	f002 fbe9 	bl	8004c98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|REL_4_Pin|REL_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80024c6:	2201      	movs	r2, #1
 80024c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024cc:	4840      	ldr	r0, [pc, #256]	@ (80025d0 <MX_GPIO_Init+0x1cc>)
 80024ce:	f002 fbe3 	bl	8004c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2104      	movs	r1, #4
 80024d6:	4840      	ldr	r0, [pc, #256]	@ (80025d8 <MX_GPIO_Init+0x1d4>)
 80024d8:	f002 fbde 	bl	8004c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLAVE_C_Pin SLAVE_B_Pin REL_2_Pin REL_1_Pin */
  GPIO_InitStruct.Pin = SLAVE_C_Pin|SLAVE_B_Pin|REL_2_Pin|REL_1_Pin;
 80024dc:	2363      	movs	r3, #99	@ 0x63
 80024de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	4836      	ldr	r0, [pc, #216]	@ (80025cc <MX_GPIO_Init+0x1c8>)
 80024f4:	f002 fa24 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAST_A_Pin MAST_B_Pin MAST_C_Pin */
  GPIO_InitStruct.Pin = MAST_A_Pin|MAST_B_Pin|MAST_C_Pin;
 80024f8:	2313      	movs	r3, #19
 80024fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	4830      	ldr	r0, [pc, #192]	@ (80025d0 <MX_GPIO_Init+0x1cc>)
 8002510:	f002 fa16 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLAVE_A_Pin SCK_DRW_Pin PB14 PB15
                           PB5 REL_4_Pin REL_3_Pin */
  GPIO_InitStruct.Pin = SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 8002514:	f24c 7321 	movw	r3, #50977	@ 0xc721
 8002518:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|REL_4_Pin|REL_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251a:	2301      	movs	r3, #1
 800251c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	4619      	mov	r1, r3
 800252c:	4829      	ldr	r0, [pc, #164]	@ (80025d4 <MX_GPIO_Init+0x1d0>)
 800252e:	f002 fa07 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BTN_Pin CONFIRM_BTN_Pin */
  GPIO_InitStruct.Pin = RESET_BTN_Pin|CONFIRM_BTN_Pin;
 8002532:	2306      	movs	r3, #6
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002536:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800253a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4619      	mov	r1, r3
 8002546:	4823      	ldr	r0, [pc, #140]	@ (80025d4 <MX_GPIO_Init+0x1d0>)
 8002548:	f002 f9fa 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAT_IN_Pin */
  GPIO_InitStruct.Pin = DAT_IN_Pin;
 800254c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAT_IN_GPIO_Port, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	481b      	ldr	r0, [pc, #108]	@ (80025d0 <MX_GPIO_Init+0x1cc>)
 8002562:	f002 f9ed 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800256a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256c:	2301      	movs	r3, #1
 800256e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002570:	2301      	movs	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	4619      	mov	r1, r3
 800257e:	4814      	ldr	r0, [pc, #80]	@ (80025d0 <MX_GPIO_Init+0x1cc>)
 8002580:	f002 f9de 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_CS_Pin */
  GPIO_InitStruct.Pin = EEPROM_CS_Pin;
 8002584:	2304      	movs	r3, #4
 8002586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	2301      	movs	r3, #1
 800258a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_GPIO_Port, &GPIO_InitStruct);
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4619      	mov	r1, r3
 800259a:	480f      	ldr	r0, [pc, #60]	@ (80025d8 <MX_GPIO_Init+0x1d4>)
 800259c:	f002 f9d0 	bl	8004940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2100      	movs	r1, #0
 80025a4:	2007      	movs	r0, #7
 80025a6:	f001 fe24 	bl	80041f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80025aa:	2007      	movs	r0, #7
 80025ac:	f001 fe3d 	bl	800422a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	2008      	movs	r0, #8
 80025b6:	f001 fe1c 	bl	80041f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80025ba:	2008      	movs	r0, #8
 80025bc:	f001 fe35 	bl	800422a <HAL_NVIC_EnableIRQ>

}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	@ 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020800 	.word	0x40020800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020c00 	.word	0x40020c00

080025dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	//disables internal buffering for input stream for scanf
	setvbuf(stdin, NULL, _IONBF, 0);
 80025e2:	4b35      	ldr	r3, [pc, #212]	@ (80026b8 <main+0xdc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6858      	ldr	r0, [r3, #4]
 80025e8:	2300      	movs	r3, #0
 80025ea:	2202      	movs	r2, #2
 80025ec:	2100      	movs	r1, #0
 80025ee:	f009 fcc5 	bl	800bf7c <setvbuf>

	/* Configure the system clock */
	SystemClock_Config();
 80025f2:	f000 f86d 	bl	80026d0 <SystemClock_Config>

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025f6:	f001 fc8b 	bl	8003f10 <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025fa:	f7ff ff03 	bl	8002404 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80025fe:	f001 fbeb 	bl	8003dd8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8002602:	f001 faa7 	bl	8003b54 <MX_TIM2_Init>
	MX_FATFS_Init();
 8002606:	f005 f9a3 	bl	8007950 <MX_FATFS_Init>
	MX_SPI1_Init();
 800260a:	f000 ffbd 	bl	8003588 <MX_SPI1_Init>

	printf("Hello from STM32 UART!\n\r");
 800260e:	482b      	ldr	r0, [pc, #172]	@ (80026bc <main+0xe0>)
 8002610:	f009 fca2 	bl	800bf58 <iprintf>

	HAL_TIM_Base_Start(&htim2);
 8002614:	482a      	ldr	r0, [pc, #168]	@ (80026c0 <main+0xe4>)
 8002616:	f004 f83d 	bl	8006694 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 800261a:	2201      	movs	r2, #1
 800261c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002620:	4828      	ldr	r0, [pc, #160]	@ (80026c4 <main+0xe8>)
 8002622:	f002 fb39 	bl	8004c98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002626:	200a      	movs	r0, #10
 8002628:	f001 fce4 	bl	8003ff4 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002632:	4824      	ldr	r0, [pc, #144]	@ (80026c4 <main+0xe8>)
 8002634:	f002 fb30 	bl	8004c98 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002638:	200a      	movs	r0, #10
 800263a:	f001 fcdb 	bl	8003ff4 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263e:	f001 fc67 	bl	8003f10 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002642:	f000 f845 	bl	80026d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002646:	f7ff fedd 	bl	8002404 <MX_GPIO_Init>
  MX_DMA_Init();
 800264a:	f7ff fa0b 	bl	8001a64 <MX_DMA_Init>
  MX_TIM2_Init();
 800264e:	f001 fa81 	bl	8003b54 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002652:	f001 fbc1 	bl	8003dd8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002656:	f005 f97b 	bl	8007950 <MX_FATFS_Init>
  MX_SPI1_Init();
 800265a:	f000 ff95 	bl	8003588 <MX_SPI1_Init>
  MX_SPI2_Init();
 800265e:	f000 ffc9 	bl	80035f4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002662:	f001 fac3 	bl	8003bec <MX_TIM3_Init>
  MX_TIM4_Init();
 8002666:	f001 fb0f 	bl	8003c88 <MX_TIM4_Init>
  MX_SPI3_Init();
 800266a:	f000 fff9 	bl	8003660 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 800266e:	f7fe ff1b 	bl	80014a8 <ILI9341_Init>

  int rectXStart = 80;
 8002672:	2350      	movs	r3, #80	@ 0x50
 8002674:	607b      	str	r3, [r7, #4]
  int rectYStart = 80;
 8002676:	2350      	movs	r3, #80	@ 0x50
 8002678:	603b      	str	r3, [r7, #0]

  // Simple Text writing (Text, Font, X, Y, Color, BackColor)
  // Available Fonts are FONT1, FONT2, FONT3 and FONT4
  ILI9341_FillScreen(BLACK);
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff f90a 	bl	8001894 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8002680:	2003      	movs	r0, #3
 8002682:	f7ff f81b 	bl	80016bc <ILI9341_SetRotation>
  ILI9341_DrawText("Hello from STM32 UART!", FONT4, 55, 110, WHITE, BLACK);
 8002686:	2300      	movs	r3, #0
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	236e      	movs	r3, #110	@ 0x6e
 8002692:	2237      	movs	r2, #55	@ 0x37
 8002694:	490c      	ldr	r1, [pc, #48]	@ (80026c8 <main+0xec>)
 8002696:	480d      	ldr	r0, [pc, #52]	@ (80026cc <main+0xf0>)
 8002698:	f7fe fdaa 	bl	80011f0 <ILI9341_DrawText>
  HAL_Delay(3000);
 800269c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80026a0:	f001 fca8 	bl	8003ff4 <HAL_Delay>
//
//		HAL_Delay(1000);
//
//  }

  Calibrate();
 80026a4:	f7ff fa48 	bl	8001b38 <Calibrate>
  main_function();
 80026a8:	f7ff fc22 	bl	8001ef0 <main_function>
 80026ac:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000003c 	.word	0x2000003c
 80026bc:	0800fc48 	.word	0x0800fc48
 80026c0:	20000e50 	.word	0x20000e50
 80026c4:	40020400 	.word	0x40020400
 80026c8:	0800ff54 	.word	0x0800ff54
 80026cc:	0800fc64 	.word	0x0800fc64

080026d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b094      	sub	sp, #80	@ 0x50
 80026d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	2234      	movs	r2, #52	@ 0x34
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f009 fd9b 	bl	800c21a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	4b29      	ldr	r3, [pc, #164]	@ (80027a0 <SystemClock_Config+0xd0>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	4a28      	ldr	r2, [pc, #160]	@ (80027a0 <SystemClock_Config+0xd0>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002702:	6413      	str	r3, [r2, #64]	@ 0x40
 8002704:	4b26      	ldr	r3, [pc, #152]	@ (80027a0 <SystemClock_Config+0xd0>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002710:	2300      	movs	r3, #0
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <SystemClock_Config+0xd4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800271c:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <SystemClock_Config+0xd4>)
 800271e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b1f      	ldr	r3, [pc, #124]	@ (80027a4 <SystemClock_Config+0xd4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002730:	2302      	movs	r3, #2
 8002732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002734:	2301      	movs	r3, #1
 8002736:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002738:	2310      	movs	r3, #16
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800273c:	2302      	movs	r3, #2
 800273e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002740:	2300      	movs	r3, #0
 8002742:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002744:	2308      	movs	r3, #8
 8002746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002748:	2340      	movs	r3, #64	@ 0x40
 800274a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800274c:	2302      	movs	r3, #2
 800274e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002750:	2302      	movs	r3, #2
 8002752:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002754:	2302      	movs	r3, #2
 8002756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	4618      	mov	r0, r3
 800275e:	f002 fd91 	bl	8005284 <HAL_RCC_OscConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002768:	f000 f81e 	bl	80027a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800276c:	230f      	movs	r3, #15
 800276e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002770:	2302      	movs	r3, #2
 8002772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800277c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002782:	f107 0308 	add.w	r3, r7, #8
 8002786:	2102      	movs	r1, #2
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fab7 	bl	8004cfc <HAL_RCC_ClockConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002794:	f000 f808 	bl	80027a8 <Error_Handler>
  }
}
 8002798:	bf00      	nop
 800279a:	3750      	adds	r7, #80	@ 0x50
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40007000 	.word	0x40007000

080027a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ac:	b672      	cpsid	i
}
 80027ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <Error_Handler+0x8>

080027b4 <EEPROM_ReadByte>:
    EEPROM_CS_HIGH();
    HAL_Delay(100);

}

uint8_t EEPROM_ReadByte(uint8_t addr) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd[2] = {0x03, addr}; // READ instruction
 80027be:	2303      	movs	r3, #3
 80027c0:	733b      	strb	r3, [r7, #12]
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	737b      	strb	r3, [r7, #13]
    uint8_t data = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	72fb      	strb	r3, [r7, #11]
    EEPROM_CS_LOW();
 80027ca:	2201      	movs	r2, #1
 80027cc:	2104      	movs	r1, #4
 80027ce:	4811      	ldr	r0, [pc, #68]	@ (8002814 <EEPROM_ReadByte+0x60>)
 80027d0:	f002 fa62 	bl	8004c98 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80027d4:	2064      	movs	r0, #100	@ 0x64
 80027d6:	f001 fc0d 	bl	8003ff4 <HAL_Delay>
    HAL_SPI_Transmit(&hspi3, cmd, 2, HAL_MAX_DELAY);
 80027da:	f107 010c 	add.w	r1, r7, #12
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	2202      	movs	r2, #2
 80027e4:	480c      	ldr	r0, [pc, #48]	@ (8002818 <EEPROM_ReadByte+0x64>)
 80027e6:	f003 f874 	bl	80058d2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &data, 1, HAL_MAX_DELAY);
 80027ea:	f107 010b 	add.w	r1, r7, #11
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	2201      	movs	r2, #1
 80027f4:	4808      	ldr	r0, [pc, #32]	@ (8002818 <EEPROM_ReadByte+0x64>)
 80027f6:	f003 f9b0 	bl	8005b5a <HAL_SPI_Receive>
    EEPROM_CS_HIGH();
 80027fa:	2200      	movs	r2, #0
 80027fc:	2104      	movs	r1, #4
 80027fe:	4805      	ldr	r0, [pc, #20]	@ (8002814 <EEPROM_ReadByte+0x60>)
 8002800:	f002 fa4a 	bl	8004c98 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002804:	2064      	movs	r0, #100	@ 0x64
 8002806:	f001 fbf5 	bl	8003ff4 <HAL_Delay>
    return data;
 800280a:	7afb      	ldrb	r3, [r7, #11]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40020c00 	.word	0x40020c00
 8002818:	20000d94 	.word	0x20000d94

0800281c <SD_init>:

static char buffer[MAX_FILELINE];
BYTE previousLine[MAX_FILELINE];


void  SD_init(){
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8002822:	2201      	movs	r2, #1
 8002824:	4916      	ldr	r1, [pc, #88]	@ (8002880 <SD_init+0x64>)
 8002826:	4817      	ldr	r0, [pc, #92]	@ (8002884 <SD_init+0x68>)
 8002828:	f007 fb9a 	bl	8009f60 <f_mount>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <SD_init+0x6c>)
 8002832:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <SD_init+0x6c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <SD_init+0x30>
		printf("f_mount error (%i)\r\n", fres);
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <SD_init+0x6c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	4812      	ldr	r0, [pc, #72]	@ (800288c <SD_init+0x70>)
 8002844:	f009 fb88 	bl	800bf58 <iprintf>
		while(1);
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <SD_init+0x2c>
	//Let's get some statistics from the SD card
	DWORD free_clusters;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 800284c:	463a      	mov	r2, r7
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	4619      	mov	r1, r3
 8002852:	480b      	ldr	r0, [pc, #44]	@ (8002880 <SD_init+0x64>)
 8002854:	f008 f8e0 	bl	800aa18 <f_getfree>
 8002858:	4603      	mov	r3, r0
 800285a:	461a      	mov	r2, r3
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <SD_init+0x6c>)
 800285e:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002860:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <SD_init+0x6c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <SD_init+0x5c>
		printf("f_getfree error (%i)\r\n", fres);
 8002868:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <SD_init+0x6c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4619      	mov	r1, r3
 800286e:	4808      	ldr	r0, [pc, #32]	@ (8002890 <SD_init+0x74>)
 8002870:	f009 fb72 	bl	800bf58 <iprintf>
		while(1);
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <SD_init+0x58>
	}

}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	0800fc94 	.word	0x0800fc94
 8002884:	20000214 	.word	0x20000214
 8002888:	200008a4 	.word	0x200008a4
 800288c:	0800fc98 	.word	0x0800fc98
 8002890:	0800fcb0 	.word	0x0800fcb0

08002894 <saveDrawerConfig>:

void saveDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh, uint8_t ID){
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b08e      	sub	sp, #56	@ 0x38
 8002898:	af08      	add	r7, sp, #32
 800289a:	ed87 0a02 	vstr	s0, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4603      	mov	r3, r0
 80028a4:	81fb      	strh	r3, [r7, #14]
 80028a6:	460b      	mov	r3, r1
 80028a8:	81bb      	strh	r3, [r7, #12]

	UINT bytesWrote;

	//f_unlink((TCHAR*)filename); //deletes the original file

	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND | FA_CREATE_NEW);
 80028aa:	4b35      	ldr	r3, [pc, #212]	@ (8002980 <saveDrawerConfig+0xec>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2236      	movs	r2, #54	@ 0x36
 80028b0:	4619      	mov	r1, r3
 80028b2:	4834      	ldr	r0, [pc, #208]	@ (8002984 <saveDrawerConfig+0xf0>)
 80028b4:	f007 fb9a 	bl	8009fec <f_open>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b32      	ldr	r3, [pc, #200]	@ (8002988 <saveDrawerConfig+0xf4>)
 80028be:	701a      	strb	r2, [r3, #0]

	if(fres == FR_EXIST){
 80028c0:	4b31      	ldr	r3, [pc, #196]	@ (8002988 <saveDrawerConfig+0xf4>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d116      	bne.n	80028f6 <saveDrawerConfig+0x62>
				fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND);
 80028c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002980 <saveDrawerConfig+0xec>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2232      	movs	r2, #50	@ 0x32
 80028ce:	4619      	mov	r1, r3
 80028d0:	482c      	ldr	r0, [pc, #176]	@ (8002984 <saveDrawerConfig+0xf0>)
 80028d2:	f007 fb8b 	bl	8009fec <f_open>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4b2b      	ldr	r3, [pc, #172]	@ (8002988 <saveDrawerConfig+0xf4>)
 80028dc:	701a      	strb	r2, [r3, #0]
				if(fres != FR_OK){
 80028de:	4b2a      	ldr	r3, [pc, #168]	@ (8002988 <saveDrawerConfig+0xf4>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d017      	beq.n	8002916 <saveDrawerConfig+0x82>
					printf("f_write error (%i) IN saveDrawerConfig\r\n", fres);
 80028e6:	4b28      	ldr	r3, [pc, #160]	@ (8002988 <saveDrawerConfig+0xf4>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4827      	ldr	r0, [pc, #156]	@ (800298c <saveDrawerConfig+0xf8>)
 80028ee:	f009 fb33 	bl	800bf58 <iprintf>
					while(1);
 80028f2:	bf00      	nop
 80028f4:	e7fd      	b.n	80028f2 <saveDrawerConfig+0x5e>
				}
	}
	else if(fres == FR_OK){
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <saveDrawerConfig+0xf4>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <saveDrawerConfig+0x72>
		printf("Created new file");
 80028fe:	4824      	ldr	r0, [pc, #144]	@ (8002990 <saveDrawerConfig+0xfc>)
 8002900:	f009 fb2a 	bl	800bf58 <iprintf>
 8002904:	e007      	b.n	8002916 <saveDrawerConfig+0x82>
	}
	else {
		printf("f_open error (%i) IN saveDrawerConfig\r\n", fres);
 8002906:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <saveDrawerConfig+0xf4>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4821      	ldr	r0, [pc, #132]	@ (8002994 <saveDrawerConfig+0x100>)
 800290e:	f009 fb23 	bl	800bf58 <iprintf>
		while(1);
 8002912:	bf00      	nop
 8002914:	e7fd      	b.n	8002912 <saveDrawerConfig+0x7e>
	}

	snprintf((char*)buffer, sizeof(buffer),"Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld;ID:%d\n", row, drawer, calFactor, Tare, thresh, ID);
 8002916:	89fd      	ldrh	r5, [r7, #14]
 8002918:	89bc      	ldrh	r4, [r7, #12]
 800291a:	68b8      	ldr	r0, [r7, #8]
 800291c:	f7fd fe34 	bl	8000588 <__aeabi_f2d>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8002928:	9106      	str	r1, [sp, #24]
 800292a:	6839      	ldr	r1, [r7, #0]
 800292c:	9105      	str	r1, [sp, #20]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	9104      	str	r1, [sp, #16]
 8002932:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002936:	9400      	str	r4, [sp, #0]
 8002938:	462b      	mov	r3, r5
 800293a:	4a17      	ldr	r2, [pc, #92]	@ (8002998 <saveDrawerConfig+0x104>)
 800293c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002940:	4816      	ldr	r0, [pc, #88]	@ (800299c <saveDrawerConfig+0x108>)
 8002942:	f009 fbcf 	bl	800c0e4 <sniprintf>
	fres = f_write(&fil, buffer, strlen(buffer), &bytesWrote);
 8002946:	4815      	ldr	r0, [pc, #84]	@ (800299c <saveDrawerConfig+0x108>)
 8002948:	f7fd fcb2 	bl	80002b0 <strlen>
 800294c:	4602      	mov	r2, r0
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4912      	ldr	r1, [pc, #72]	@ (800299c <saveDrawerConfig+0x108>)
 8002954:	480b      	ldr	r0, [pc, #44]	@ (8002984 <saveDrawerConfig+0xf0>)
 8002956:	f007 fe42 	bl	800a5de <f_write>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <saveDrawerConfig+0xf4>)
 8002960:	701a      	strb	r2, [r3, #0]
	printf("Wrote %i bytes to %s\r\n", bytesWrote,filename);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	4a06      	ldr	r2, [pc, #24]	@ (8002980 <saveDrawerConfig+0xec>)
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	480d      	ldr	r0, [pc, #52]	@ (80029a0 <saveDrawerConfig+0x10c>)
 800296c:	f009 faf4 	bl	800bf58 <iprintf>


	f_close(&fil);
 8002970:	4804      	ldr	r0, [pc, #16]	@ (8002984 <saveDrawerConfig+0xf0>)
 8002972:	f008 f827 	bl	800a9c4 <f_close>

}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bdb0      	pop	{r4, r5, r7, pc}
 800297e:	bf00      	nop
 8002980:	20000004 	.word	0x20000004
 8002984:	20000444 	.word	0x20000444
 8002988:	200008a4 	.word	0x200008a4
 800298c:	0800fcc8 	.word	0x0800fcc8
 8002990:	0800fcf4 	.word	0x0800fcf4
 8002994:	0800fd08 	.word	0x0800fd08
 8002998:	0800fd30 	.word	0x0800fd30
 800299c:	200008a8 	.word	0x200008a8
 80029a0:	0800fd6c 	.word	0x0800fd6c

080029a4 <getData>:

uint32_t getData(char* token){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i <= 1; i++){
 80029ac:	2300      	movs	r3, #0
 80029ae:	81fb      	strh	r3, [r7, #14]
 80029b0:	e011      	b.n	80029d6 <getData+0x32>
		char* temp_token = strtok(token, ":");
 80029b2:	490d      	ldr	r1, [pc, #52]	@ (80029e8 <getData+0x44>)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f009 fc39 	bl	800c22c <strtok>
 80029ba:	60b8      	str	r0, [r7, #8]
		if(i == 1){
 80029bc:	89fb      	ldrh	r3, [r7, #14]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d106      	bne.n	80029d0 <getData+0x2c>

			return strtol(temp_token, NULL, 10);
 80029c2:	220a      	movs	r2, #10
 80029c4:	2100      	movs	r1, #0
 80029c6:	68b8      	ldr	r0, [r7, #8]
 80029c8:	f008 fb96 	bl	800b0f8 <strtol>
 80029cc:	4603      	mov	r3, r0
 80029ce:	e006      	b.n	80029de <getData+0x3a>
	for(uint16_t i = 0; i <= 1; i++){
 80029d0:	89fb      	ldrh	r3, [r7, #14]
 80029d2:	3301      	adds	r3, #1
 80029d4:	81fb      	strh	r3, [r7, #14]
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d9ea      	bls.n	80029b2 <getData+0xe>
		}
	}
	return 0;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	0800fd84 	.word	0x0800fd84

080029ec <getLineMarker>:

uint16_t getLineMarker(uint16_t row, uint16_t drawer){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	460a      	mov	r2, r1
 80029f6:	80fb      	strh	r3, [r7, #6]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80bb      	strh	r3, [r7, #4]

	fres = f_open(&fil, filename, FA_READ);
 80029fc:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <getLineMarker+0xb8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4619      	mov	r1, r3
 8002a04:	4828      	ldr	r0, [pc, #160]	@ (8002aa8 <getLineMarker+0xbc>)
 8002a06:	f007 faf1 	bl	8009fec <f_open>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <getLineMarker+0xc0>)
 8002a10:	701a      	strb	r2, [r3, #0]
	uint16_t fileIndex = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (fres != FR_OK){
 8002a16:	4b25      	ldr	r3, [pc, #148]	@ (8002aac <getLineMarker+0xc0>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <getLineMarker+0x42>
		printf("f_open error (%i) IN getLineMarker\r\n", fres);
 8002a1e:	4b23      	ldr	r3, [pc, #140]	@ (8002aac <getLineMarker+0xc0>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4619      	mov	r1, r3
 8002a24:	4822      	ldr	r0, [pc, #136]	@ (8002ab0 <getLineMarker+0xc4>)
 8002a26:	f009 fa97 	bl	800bf58 <iprintf>
		while(1);
 8002a2a:	bf00      	nop
 8002a2c:	e7fd      	b.n	8002a2a <getLineMarker+0x3e>
	}
	else{
		TCHAR* rres = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
		do{
			rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8002a32:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <getLineMarker+0xbc>)
 8002a34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a38:	481e      	ldr	r0, [pc, #120]	@ (8002ab4 <getLineMarker+0xc8>)
 8002a3a:	f008 fa46 	bl	800aeca <f_gets>
 8002a3e:	6138      	str	r0, [r7, #16]

			//char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
			char* token = strtok(rres, ";");
 8002a40:	491d      	ldr	r1, [pc, #116]	@ (8002ab8 <getLineMarker+0xcc>)
 8002a42:	6938      	ldr	r0, [r7, #16]
 8002a44:	f009 fbf2 	bl	800c22c <strtok>
 8002a48:	60f8      	str	r0, [r7, #12]

			for(uint16_t i = 0; i <= 1 ; i++){
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	82bb      	strh	r3, [r7, #20]
 8002a4e:	e00a      	b.n	8002a66 <getLineMarker+0x7a>
				array[i] = getData(token);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ffa7 	bl	80029a4 <getData>
 8002a56:	4602      	mov	r2, r0
 8002a58:	8abb      	ldrh	r3, [r7, #20]
 8002a5a:	b2d1      	uxtb	r1, r2
 8002a5c:	4a17      	ldr	r2, [pc, #92]	@ (8002abc <getLineMarker+0xd0>)
 8002a5e:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i = 0; i <= 1 ; i++){
 8002a60:	8abb      	ldrh	r3, [r7, #20]
 8002a62:	3301      	adds	r3, #1
 8002a64:	82bb      	strh	r3, [r7, #20]
 8002a66:	8abb      	ldrh	r3, [r7, #20]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d9f1      	bls.n	8002a50 <getLineMarker+0x64>
			}

			if(row == array[0] && drawer == array[1]){
 8002a6c:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <getLineMarker+0xd0>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d107      	bne.n	8002a88 <getLineMarker+0x9c>
 8002a78:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <getLineMarker+0xd0>)
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	88bb      	ldrh	r3, [r7, #4]
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <getLineMarker+0x9c>
					return fileIndex;
 8002a84:	8afb      	ldrh	r3, [r7, #22]
 8002a86:	e009      	b.n	8002a9c <getLineMarker+0xb0>
			}
			else{
				fileIndex++;
 8002a88:	8afb      	ldrh	r3, [r7, #22]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	82fb      	strh	r3, [r7, #22]

			}
		}while(rres != 0);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ce      	bne.n	8002a32 <getLineMarker+0x46>
	}
	f_close(&fil);
 8002a94:	4804      	ldr	r0, [pc, #16]	@ (8002aa8 <getLineMarker+0xbc>)
 8002a96:	f007 ff95 	bl	800a9c4 <f_close>
	return 0;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	20000444 	.word	0x20000444
 8002aac:	200008a4 	.word	0x200008a4
 8002ab0:	0800fd88 	.word	0x0800fd88
 8002ab4:	200008a8 	.word	0x200008a8
 8002ab8:	0800fdb0 	.word	0x0800fdb0
 8002abc:	20000ca8 	.word	0x20000ca8

08002ac0 <getLineMarkerID>:

uint16_t getLineMarkerID(uint8_t ID){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]

	fres = f_open(&fil, filename, FA_READ);
 8002aca:	4b26      	ldr	r3, [pc, #152]	@ (8002b64 <getLineMarkerID+0xa4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4825      	ldr	r0, [pc, #148]	@ (8002b68 <getLineMarkerID+0xa8>)
 8002ad4:	f007 fa8a 	bl	8009fec <f_open>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b23      	ldr	r3, [pc, #140]	@ (8002b6c <getLineMarkerID+0xac>)
 8002ade:	701a      	strb	r2, [r3, #0]
	uint16_t fileIndex = 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (fres != FR_OK){
 8002ae4:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <getLineMarkerID+0xac>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <getLineMarkerID+0x3c>
		printf("f_open error (%i) IN getLineMarker\r\n", fres);
 8002aec:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <getLineMarkerID+0xac>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	481f      	ldr	r0, [pc, #124]	@ (8002b70 <getLineMarkerID+0xb0>)
 8002af4:	f009 fa30 	bl	800bf58 <iprintf>
		while(1);
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <getLineMarkerID+0x38>
	}
	else{
		TCHAR* rres = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
		do{
			rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8002b00:	4a19      	ldr	r2, [pc, #100]	@ (8002b68 <getLineMarkerID+0xa8>)
 8002b02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b06:	481b      	ldr	r0, [pc, #108]	@ (8002b74 <getLineMarkerID+0xb4>)
 8002b08:	f008 f9df 	bl	800aeca <f_gets>
 8002b0c:	6138      	str	r0, [r7, #16]

			//char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
			char* token = strtok(rres, ";");
 8002b0e:	491a      	ldr	r1, [pc, #104]	@ (8002b78 <getLineMarkerID+0xb8>)
 8002b10:	6938      	ldr	r0, [r7, #16]
 8002b12:	f009 fb8b 	bl	800c22c <strtok>
 8002b16:	60f8      	str	r0, [r7, #12]

			for(uint16_t i = 0; i <= 5 ; i++){
 8002b18:	2300      	movs	r3, #0
 8002b1a:	82bb      	strh	r3, [r7, #20]
 8002b1c:	e00a      	b.n	8002b34 <getLineMarkerID+0x74>
				array[i] = getData(token);
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff ff40 	bl	80029a4 <getData>
 8002b24:	4602      	mov	r2, r0
 8002b26:	8abb      	ldrh	r3, [r7, #20]
 8002b28:	b2d1      	uxtb	r1, r2
 8002b2a:	4a14      	ldr	r2, [pc, #80]	@ (8002b7c <getLineMarkerID+0xbc>)
 8002b2c:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i = 0; i <= 5 ; i++){
 8002b2e:	8abb      	ldrh	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	82bb      	strh	r3, [r7, #20]
 8002b34:	8abb      	ldrh	r3, [r7, #20]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d9f1      	bls.n	8002b1e <getLineMarkerID+0x5e>
			}

			if(ID == array[5]){
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <getLineMarkerID+0xbc>)
 8002b3c:	795b      	ldrb	r3, [r3, #5]
 8002b3e:	79fa      	ldrb	r2, [r7, #7]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d101      	bne.n	8002b48 <getLineMarkerID+0x88>
					return fileIndex;
 8002b44:	8afb      	ldrh	r3, [r7, #22]
 8002b46:	e009      	b.n	8002b5c <getLineMarkerID+0x9c>
			}
			else{
				fileIndex++;
 8002b48:	8afb      	ldrh	r3, [r7, #22]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	82fb      	strh	r3, [r7, #22]

			}
		}while(rres != 0);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1d5      	bne.n	8002b00 <getLineMarkerID+0x40>
	}
	f_close(&fil);
 8002b54:	4804      	ldr	r0, [pc, #16]	@ (8002b68 <getLineMarkerID+0xa8>)
 8002b56:	f007 ff35 	bl	800a9c4 <f_close>
	return 0;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000004 	.word	0x20000004
 8002b68:	20000444 	.word	0x20000444
 8002b6c:	200008a4 	.word	0x200008a4
 8002b70:	0800fd88 	.word	0x0800fd88
 8002b74:	200008a8 	.word	0x200008a8
 8002b78:	0800fdb0 	.word	0x0800fdb0
 8002b7c:	20000cac 	.word	0x20000cac

08002b80 <updateDrawerConfig>:

void updateDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh, uint8_t ID){ //will need to add ID marker and compare if they are the same, if not then change both locations
 8002b80:	b5b0      	push	{r4, r5, r7, lr}
 8002b82:	b090      	sub	sp, #64	@ 0x40
 8002b84:	af08      	add	r7, sp, #32
 8002b86:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	4603      	mov	r3, r0
 8002b90:	81fb      	strh	r3, [r7, #14]
 8002b92:	460b      	mov	r3, r1
 8002b94:	81bb      	strh	r3, [r7, #12]

	fres = f_open(&fil, filename, FA_READ);
 8002b96:	4b5a      	ldr	r3, [pc, #360]	@ (8002d00 <updateDrawerConfig+0x180>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4859      	ldr	r0, [pc, #356]	@ (8002d04 <updateDrawerConfig+0x184>)
 8002ba0:	f007 fa24 	bl	8009fec <f_open>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b57      	ldr	r3, [pc, #348]	@ (8002d08 <updateDrawerConfig+0x188>)
 8002baa:	701a      	strb	r2, [r3, #0]
	fres_temp = f_open(&fil_temp, temp_filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002bac:	4b57      	ldr	r3, [pc, #348]	@ (8002d0c <updateDrawerConfig+0x18c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	221a      	movs	r2, #26
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4856      	ldr	r0, [pc, #344]	@ (8002d10 <updateDrawerConfig+0x190>)
 8002bb6:	f007 fa19 	bl	8009fec <f_open>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b55      	ldr	r3, [pc, #340]	@ (8002d14 <updateDrawerConfig+0x194>)
 8002bc0:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8002bc2:	4b51      	ldr	r3, [pc, #324]	@ (8002d08 <updateDrawerConfig+0x188>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <updateDrawerConfig+0x5a>
		printf("f_open error (%i) IN updateDrawerConfig FOR filename\r\n", fres);
 8002bca:	4b4f      	ldr	r3, [pc, #316]	@ (8002d08 <updateDrawerConfig+0x188>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4851      	ldr	r0, [pc, #324]	@ (8002d18 <updateDrawerConfig+0x198>)
 8002bd2:	f009 f9c1 	bl	800bf58 <iprintf>
		while(1);
 8002bd6:	bf00      	nop
 8002bd8:	e7fd      	b.n	8002bd6 <updateDrawerConfig+0x56>
	}
	if (fres_temp != FR_OK){
 8002bda:	4b4e      	ldr	r3, [pc, #312]	@ (8002d14 <updateDrawerConfig+0x194>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <updateDrawerConfig+0x72>
		printf("f_open error (%i) IN updateDrawerConfig FOR temp_filename\r\n", fres_temp);
 8002be2:	4b4c      	ldr	r3, [pc, #304]	@ (8002d14 <updateDrawerConfig+0x194>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	484c      	ldr	r0, [pc, #304]	@ (8002d1c <updateDrawerConfig+0x19c>)
 8002bea:	f009 f9b5 	bl	800bf58 <iprintf>
		while(1);
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <updateDrawerConfig+0x6e>
	}

	UINT bytesWrote;

	bool keep_reading = true;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	77fb      	strb	r3, [r7, #31]
	uint16_t lineMarker = getLineMarker(row, drawer);
 8002bf6:	89ba      	ldrh	r2, [r7, #12]
 8002bf8:	89fb      	ldrh	r3, [r7, #14]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fef5 	bl	80029ec <getLineMarker>
 8002c02:	4603      	mov	r3, r0
 8002c04:	837b      	strh	r3, [r7, #26]
	uint16_t currentLine = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	83bb      	strh	r3, [r7, #28]
	do{

		TCHAR* rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8002c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d04 <updateDrawerConfig+0x184>)
 8002c0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c10:	4843      	ldr	r0, [pc, #268]	@ (8002d20 <updateDrawerConfig+0x1a0>)
 8002c12:	f008 f95a 	bl	800aeca <f_gets>
 8002c16:	6178      	str	r0, [r7, #20]

		if(rres == 0) keep_reading = false;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <updateDrawerConfig+0xa4>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e04f      	b.n	8002cc4 <updateDrawerConfig+0x144>
		else if(currentLine == lineMarker){ //ID matching would go here, check if IDs match, if not then save previous line, update line, then search for original location of ID and replace that line
 8002c24:	8bba      	ldrh	r2, [r7, #28]
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d131      	bne.n	8002c90 <updateDrawerConfig+0x110>
			snprintf((char*)buffer, MAX_FILELINE, "Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld;ID:%d", row, drawer, calFactor, Tare, thresh, ID);
 8002c2c:	89fd      	ldrh	r5, [r7, #14]
 8002c2e:	89bc      	ldrh	r4, [r7, #12]
 8002c30:	68b8      	ldr	r0, [r7, #8]
 8002c32:	f7fd fca9 	bl	8000588 <__aeabi_f2d>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002c3e:	9106      	str	r1, [sp, #24]
 8002c40:	6839      	ldr	r1, [r7, #0]
 8002c42:	9105      	str	r1, [sp, #20]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	9104      	str	r1, [sp, #16]
 8002c48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c4c:	9400      	str	r4, [sp, #0]
 8002c4e:	462b      	mov	r3, r5
 8002c50:	4a34      	ldr	r2, [pc, #208]	@ (8002d24 <updateDrawerConfig+0x1a4>)
 8002c52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c56:	4832      	ldr	r0, [pc, #200]	@ (8002d20 <updateDrawerConfig+0x1a0>)
 8002c58:	f009 fa44 	bl	800c0e4 <sniprintf>
			//fputs(buffer, temp);

			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8002c5c:	4830      	ldr	r0, [pc, #192]	@ (8002d20 <updateDrawerConfig+0x1a0>)
 8002c5e:	f7fd fb27 	bl	80002b0 <strlen>
 8002c62:	4602      	mov	r2, r0
 8002c64:	f107 0310 	add.w	r3, r7, #16
 8002c68:	492d      	ldr	r1, [pc, #180]	@ (8002d20 <updateDrawerConfig+0x1a0>)
 8002c6a:	4829      	ldr	r0, [pc, #164]	@ (8002d10 <updateDrawerConfig+0x190>)
 8002c6c:	f007 fcb7 	bl	800a5de <f_write>
 8002c70:	4603      	mov	r3, r0
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b24      	ldr	r3, [pc, #144]	@ (8002d08 <updateDrawerConfig+0x188>)
 8002c76:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8002c78:	4b23      	ldr	r3, [pc, #140]	@ (8002d08 <updateDrawerConfig+0x188>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d021      	beq.n	8002cc4 <updateDrawerConfig+0x144>
				printf("f_write error (%i) IN updateDrawerConfig(1)\r\n", fres);
 8002c80:	4b21      	ldr	r3, [pc, #132]	@ (8002d08 <updateDrawerConfig+0x188>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	4619      	mov	r1, r3
 8002c86:	4828      	ldr	r0, [pc, #160]	@ (8002d28 <updateDrawerConfig+0x1a8>)
 8002c88:	f009 f966 	bl	800bf58 <iprintf>
				while(1);
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <updateDrawerConfig+0x10c>
			}

		}
		else {
			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8002c90:	4823      	ldr	r0, [pc, #140]	@ (8002d20 <updateDrawerConfig+0x1a0>)
 8002c92:	f7fd fb0d 	bl	80002b0 <strlen>
 8002c96:	4602      	mov	r2, r0
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	4920      	ldr	r1, [pc, #128]	@ (8002d20 <updateDrawerConfig+0x1a0>)
 8002c9e:	481c      	ldr	r0, [pc, #112]	@ (8002d10 <updateDrawerConfig+0x190>)
 8002ca0:	f007 fc9d 	bl	800a5de <f_write>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <updateDrawerConfig+0x188>)
 8002caa:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8002cac:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <updateDrawerConfig+0x188>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <updateDrawerConfig+0x144>
				printf("f_write error (%i) IN updateDrawerConfig(2)\r\n", fres);
 8002cb4:	4b14      	ldr	r3, [pc, #80]	@ (8002d08 <updateDrawerConfig+0x188>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	481c      	ldr	r0, [pc, #112]	@ (8002d2c <updateDrawerConfig+0x1ac>)
 8002cbc:	f009 f94c 	bl	800bf58 <iprintf>
				while(1);
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <updateDrawerConfig+0x140>
			}
		}


		currentLine++;
 8002cc4:	8bbb      	ldrh	r3, [r7, #28]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	83bb      	strh	r3, [r7, #28]

	}while(keep_reading);
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d19c      	bne.n	8002c0a <updateDrawerConfig+0x8a>

	f_close(&fil);
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <updateDrawerConfig+0x184>)
 8002cd2:	f007 fe77 	bl	800a9c4 <f_close>
	f_close(&fil_temp);
 8002cd6:	480e      	ldr	r0, [pc, #56]	@ (8002d10 <updateDrawerConfig+0x190>)
 8002cd8:	f007 fe74 	bl	800a9c4 <f_close>

	f_unlink((TCHAR*)filename); //deletes the original file
 8002cdc:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <updateDrawerConfig+0x180>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f007 ff4e 	bl	800ab82 <f_unlink>
	f_rename((TCHAR*)temp_filename, (TCHAR*)filename); //rename the temp file to be the new "orginal" file
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <updateDrawerConfig+0x18c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <updateDrawerConfig+0x180>)
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f007 fff1 	bl	800acd8 <f_rename>


}
 8002cf6:	bf00      	nop
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000004 	.word	0x20000004
 8002d04:	20000444 	.word	0x20000444
 8002d08:	200008a4 	.word	0x200008a4
 8002d0c:	20000008 	.word	0x20000008
 8002d10:	20000674 	.word	0x20000674
 8002d14:	200008a5 	.word	0x200008a5
 8002d18:	0800fdb4 	.word	0x0800fdb4
 8002d1c:	0800fdec 	.word	0x0800fdec
 8002d20:	200008a8 	.word	0x200008a8
 8002d24:	0800fe28 	.word	0x0800fe28
 8002d28:	0800fe60 	.word	0x0800fe60
 8002d2c:	0800fe90 	.word	0x0800fe90

08002d30 <getFileInfo>:


struct drawerInfo getFileInfo(uint16_t row, uint16_t drawer, uint8_t ID, uint8_t control){ //add ID parameter here later
 8002d30:	b5b0      	push	{r4, r5, r7, lr}
 8002d32:	b08e      	sub	sp, #56	@ 0x38
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	460b      	mov	r3, r1
 8002d44:	813b      	strh	r3, [r7, #8]
 8002d46:	4613      	mov	r3, r2
 8002d48:	71fb      	strb	r3, [r7, #7]

	struct drawerInfo drawerInst = { 0 };
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	611a      	str	r2, [r3, #16]
	static unsigned int array[5];

	uint16_t lineMarker = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	86fb      	strh	r3, [r7, #54]	@ 0x36

	if(control == 1){
 8002d5e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d108      	bne.n	8002d78 <getFileInfo+0x48>
		lineMarker = getLineMarker(row, drawer);
 8002d66:	893a      	ldrh	r2, [r7, #8]
 8002d68:	897b      	ldrh	r3, [r7, #10]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fe3d 	bl	80029ec <getLineMarker>
 8002d72:	4603      	mov	r3, r0
 8002d74:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002d76:	e005      	b.n	8002d84 <getFileInfo+0x54>
	}
	else{
		lineMarker = getLineMarkerID(ID);
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fea0 	bl	8002ac0 <getLineMarkerID>
 8002d80:	4603      	mov	r3, r0
 8002d82:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}

	uint16_t fileIndex = 1;
 8002d84:	2301      	movs	r3, #1
 8002d86:	86bb      	strh	r3, [r7, #52]	@ 0x34

	fres = f_open(&fil, filename, FA_READ);
 8002d88:	4b41      	ldr	r3, [pc, #260]	@ (8002e90 <getFileInfo+0x160>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4840      	ldr	r0, [pc, #256]	@ (8002e94 <getFileInfo+0x164>)
 8002d92:	f007 f92b 	bl	8009fec <f_open>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e98 <getFileInfo+0x168>)
 8002d9c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8002d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <getFileInfo+0x168>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <getFileInfo+0x86>
			printf("f_open error (%i) IN getFileInfo\r\n", fres);
 8002da6:	4b3c      	ldr	r3, [pc, #240]	@ (8002e98 <getFileInfo+0x168>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4619      	mov	r1, r3
 8002dac:	483b      	ldr	r0, [pc, #236]	@ (8002e9c <getFileInfo+0x16c>)
 8002dae:	f009 f8d3 	bl	800bf58 <iprintf>
			while(1);
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <getFileInfo+0x82>
		}
	else {
		TCHAR* rres = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
		do {

				rres = f_gets((TCHAR*) buffer, MAX_FILELINE, &fil);
 8002dba:	4a36      	ldr	r2, [pc, #216]	@ (8002e94 <getFileInfo+0x164>)
 8002dbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dc0:	4837      	ldr	r0, [pc, #220]	@ (8002ea0 <getFileInfo+0x170>)
 8002dc2:	f008 f882 	bl	800aeca <f_gets>
 8002dc6:	62b8      	str	r0, [r7, #40]	@ 0x28

				if (fileIndex == lineMarker) {
 8002dc8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002dca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d146      	bne.n	8002e5e <getFileInfo+0x12e>
						char* token = strtok(buffer, ";");
 8002dd0:	4934      	ldr	r1, [pc, #208]	@ (8002ea4 <getFileInfo+0x174>)
 8002dd2:	4833      	ldr	r0, [pc, #204]	@ (8002ea0 <getFileInfo+0x170>)
 8002dd4:	f009 fa2a 	bl	800c22c <strtok>
 8002dd8:	6338      	str	r0, [r7, #48]	@ 0x30
						unsigned int index = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c

						while (token != NULL) {
 8002dde:	e00f      	b.n	8002e00 <getFileInfo+0xd0>
								array[index] = getData(token);
 8002de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002de2:	f7ff fddf 	bl	80029a4 <getData>
 8002de6:	4602      	mov	r2, r0
 8002de8:	492f      	ldr	r1, [pc, #188]	@ (8002ea8 <getFileInfo+0x178>)
 8002dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								token = strtok(NULL, ";");
 8002df0:	492c      	ldr	r1, [pc, #176]	@ (8002ea4 <getFileInfo+0x174>)
 8002df2:	2000      	movs	r0, #0
 8002df4:	f009 fa1a 	bl	800c22c <strtok>
 8002df8:	6338      	str	r0, [r7, #48]	@ 0x30
								index++;
 8002dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
						while (token != NULL) {
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ec      	bne.n	8002de0 <getFileInfo+0xb0>
						}
						f_close(&fil);
 8002e06:	4823      	ldr	r0, [pc, #140]	@ (8002e94 <getFileInfo+0x164>)
 8002e08:	f007 fddc 	bl	800a9c4 <f_close>

						drawerInst.row = array[0];
 8002e0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <getFileInfo+0x178>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	82bb      	strh	r3, [r7, #20]
						drawerInst.drawer = array[1];
 8002e14:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <getFileInfo+0x178>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	82fb      	strh	r3, [r7, #22]
						drawerInst.calFactor = array[2];
 8002e1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <getFileInfo+0x178>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e28:	edc7 7a06 	vstr	s15, [r7, #24]
						drawerInst.Tare = array[3];
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea8 <getFileInfo+0x178>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61fb      	str	r3, [r7, #28]
						drawerInst.thresh = array[4];
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <getFileInfo+0x178>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3e:	edc7 7a08 	vstr	s15, [r7, #32]
						drawerInst.ID = array[5];
 8002e42:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <getFileInfo+0x178>)
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

						return drawerInst;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	461d      	mov	r5, r3
 8002e50:	f107 0414 	add.w	r4, r7, #20
 8002e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	602b      	str	r3, [r5, #0]
 8002e5c:	e013      	b.n	8002e86 <getFileInfo+0x156>
				}
				fileIndex++;
 8002e5e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002e60:	3301      	adds	r3, #1
 8002e62:	86bb      	strh	r3, [r7, #52]	@ 0x34
		}while(rres != 0);
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1a7      	bne.n	8002dba <getFileInfo+0x8a>
	}

	f_close(&fil);
 8002e6a:	480a      	ldr	r0, [pc, #40]	@ (8002e94 <getFileInfo+0x164>)
 8002e6c:	f007 fdaa 	bl	800a9c4 <f_close>
	printf("An error occurred during info extraction.");
 8002e70:	480e      	ldr	r0, [pc, #56]	@ (8002eac <getFileInfo+0x17c>)
 8002e72:	f009 f871 	bl	800bf58 <iprintf>
	return drawerInst;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	461d      	mov	r5, r3
 8002e7a:	f107 0414 	add.w	r4, r7, #20
 8002e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	602b      	str	r3, [r5, #0]
}
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	3738      	adds	r7, #56	@ 0x38
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000004 	.word	0x20000004
 8002e94:	20000444 	.word	0x20000444
 8002e98:	200008a4 	.word	0x200008a4
 8002e9c:	0800fec0 	.word	0x0800fec0
 8002ea0:	200008a8 	.word	0x200008a8
 8002ea4:	0800fdb0 	.word	0x0800fdb0
 8002ea8:	20000cb0 	.word	0x20000cb0
 8002eac:	0800fee4 	.word	0x0800fee4

08002eb0 <_write>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

// Code to enable printf statements
int _write(int file, char *data, int len) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	4804      	ldr	r0, [pc, #16]	@ (8002ed8 <_write+0x28>)
 8002ec8:	f004 f8f0 	bl	80070ac <HAL_UART_Transmit>
    return len;
 8002ecc:	687b      	ldr	r3, [r7, #4]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000f28 	.word	0x20000f28

08002edc <__io_getchar>:

//Code to enable scanf statements
GETCHAR_PROTOTYPE
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4b0e      	ldr	r3, [pc, #56]	@ (8002f24 <__io_getchar+0x48>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <__io_getchar+0x48>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002efc:	1df9      	adds	r1, r7, #7
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	2201      	movs	r2, #1
 8002f04:	4807      	ldr	r0, [pc, #28]	@ (8002f24 <__io_getchar+0x48>)
 8002f06:	f004 f95c 	bl	80071c2 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002f0a:	1df9      	adds	r1, r7, #7
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f10:	2201      	movs	r2, #1
 8002f12:	4804      	ldr	r0, [pc, #16]	@ (8002f24 <__io_getchar+0x48>)
 8002f14:	f004 f8ca 	bl	80070ac <HAL_UART_Transmit>
  return ch;
 8002f18:	79fb      	ldrb	r3, [r7, #7]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000f28 	.word	0x20000f28

08002f28 <HAL_GPIO_EXTI_Callback>:
unsigned int released_time; // Timestamp of the button released

int num_button = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
	// D7
	if (GPIO_Pin == RESET_BTN_Pin) {
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d137      	bne.n	8002fa8 <HAL_GPIO_EXTI_Callback+0x80>
		// printf("Reset button Pressed");
		num_button = 1;
 8002f38:	4b3f      	ldr	r3, [pc, #252]	@ (8003038 <HAL_GPIO_EXTI_Callback+0x110>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
		if 	(timer_active == 0){
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800303c <HAL_GPIO_EXTI_Callback+0x114>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d174      	bne.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
			if(HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin) == GPIO_PIN_SET && i == 0){
 8002f46:	2102      	movs	r1, #2
 8002f48:	483d      	ldr	r0, [pc, #244]	@ (8003040 <HAL_GPIO_EXTI_Callback+0x118>)
 8002f4a:	f001 fe8d 	bl	8004c68 <HAL_GPIO_ReadPin>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d10c      	bne.n	8002f6e <HAL_GPIO_EXTI_Callback+0x46>
 8002f54:	4b3b      	ldr	r3, [pc, #236]	@ (8003044 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d108      	bne.n	8002f6e <HAL_GPIO_EXTI_Callback+0x46>
					i = 1; // states the button already been pressed to ignore interrupts
 8002f5c:	4b39      	ldr	r3, [pc, #228]	@ (8003044 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
					// printf("%d i\n\r", i);
					time_start = HAL_GetTick(); // reads when button is pressed
 8002f62:	f001 f83b 	bl	8003fdc <HAL_GetTick>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4a37      	ldr	r2, [pc, #220]	@ (8003048 <HAL_GPIO_EXTI_Callback+0x120>)
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	e060      	b.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
				}

				else if (HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin) == GPIO_PIN_RESET && j == 0){
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4833      	ldr	r0, [pc, #204]	@ (8003040 <HAL_GPIO_EXTI_Callback+0x118>)
 8002f72:	f001 fe79 	bl	8004c68 <HAL_GPIO_ReadPin>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d159      	bne.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
 8002f7c:	4b33      	ldr	r3, [pc, #204]	@ (800304c <HAL_GPIO_EXTI_Callback+0x124>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d155      	bne.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
					j = 1;
 8002f84:	4b31      	ldr	r3, [pc, #196]	@ (800304c <HAL_GPIO_EXTI_Callback+0x124>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
					count = 1;
 8002f8a:	4b31      	ldr	r3, [pc, #196]	@ (8003050 <HAL_GPIO_EXTI_Callback+0x128>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
					/*printf("%d j\n\r", j);*/
					released_time = HAL_GetTick();// reads when button is released
 8002f90:	f001 f824 	bl	8003fdc <HAL_GetTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	4a2f      	ldr	r2, [pc, #188]	@ (8003054 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002f98:	6013      	str	r3, [r2, #0]
					HAL_TIM_Base_Start_IT(&htim3);
 8002f9a:	482f      	ldr	r0, [pc, #188]	@ (8003058 <HAL_GPIO_EXTI_Callback+0x130>)
 8002f9c:	f003 fbe2 	bl	8006764 <HAL_TIM_Base_Start_IT>
					timer_active = 1; // timer has active so button sequence is paused
 8002fa0:	4b26      	ldr	r3, [pc, #152]	@ (800303c <HAL_GPIO_EXTI_Callback+0x114>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
						num_button = 2;
					}
				}
			}

}
 8002fa6:	e043      	b.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
		else if (GPIO_Pin == CONFIRM_BTN_Pin){
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d140      	bne.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
			num_button = 2;
 8002fae:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <HAL_GPIO_EXTI_Callback+0x110>)
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	601a      	str	r2, [r3, #0]
			if(count != 2){
 8002fb4:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <HAL_GPIO_EXTI_Callback+0x128>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d039      	beq.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
				if ( count == 0){
 8002fbc:	4b24      	ldr	r3, [pc, #144]	@ (8003050 <HAL_GPIO_EXTI_Callback+0x128>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <HAL_GPIO_EXTI_Callback+0xa2>
				HAL_TIM_Base_Start_IT(&htim3);
 8002fc4:	4824      	ldr	r0, [pc, #144]	@ (8003058 <HAL_GPIO_EXTI_Callback+0x130>)
 8002fc6:	f003 fbcd 	bl	8006764 <HAL_TIM_Base_Start_IT>
					if(HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin) == GPIO_PIN_SET && i == 0){
 8002fca:	2104      	movs	r1, #4
 8002fcc:	481c      	ldr	r0, [pc, #112]	@ (8003040 <HAL_GPIO_EXTI_Callback+0x118>)
 8002fce:	f001 fe4b 	bl	8004c68 <HAL_GPIO_ReadPin>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_GPIO_EXTI_Callback+0xca>
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003044 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <HAL_GPIO_EXTI_Callback+0xca>
						i = 1;
 8002fe0:	4b18      	ldr	r3, [pc, #96]	@ (8003044 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
						time_start = HAL_GetTick(); // reads when button is pressed
 8002fe6:	f000 fff9 	bl	8003fdc <HAL_GetTick>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4a16      	ldr	r2, [pc, #88]	@ (8003048 <HAL_GPIO_EXTI_Callback+0x120>)
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e01e      	b.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
					else if(HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin) == GPIO_PIN_RESET && j == 0) {
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	4812      	ldr	r0, [pc, #72]	@ (8003040 <HAL_GPIO_EXTI_Callback+0x118>)
 8002ff6:	f001 fe37 	bl	8004c68 <HAL_GPIO_ReadPin>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d117      	bne.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
 8003000:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_GPIO_EXTI_Callback+0x124>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d113      	bne.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
						j = 1;
 8003008:	4b10      	ldr	r3, [pc, #64]	@ (800304c <HAL_GPIO_EXTI_Callback+0x124>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]
						count++;
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <HAL_GPIO_EXTI_Callback+0x128>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	4a0e      	ldr	r2, [pc, #56]	@ (8003050 <HAL_GPIO_EXTI_Callback+0x128>)
 8003016:	6013      	str	r3, [r2, #0]
						released_time = HAL_GetTick();// reads when button is released
 8003018:	f000 ffe0 	bl	8003fdc <HAL_GetTick>
 800301c:	4603      	mov	r3, r0
 800301e:	4a0d      	ldr	r2, [pc, #52]	@ (8003054 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003020:	6013      	str	r3, [r2, #0]
						HAL_TIM_Base_Start_IT(&htim4);// timer used to reset i and j values & handle debounce
 8003022:	480e      	ldr	r0, [pc, #56]	@ (800305c <HAL_GPIO_EXTI_Callback+0x134>)
 8003024:	f003 fb9e 	bl	8006764 <HAL_TIM_Base_Start_IT>
						num_button = 2;
 8003028:	4b03      	ldr	r3, [pc, #12]	@ (8003038 <HAL_GPIO_EXTI_Callback+0x110>)
 800302a:	2202      	movs	r2, #2
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	e7ff      	b.n	8003030 <HAL_GPIO_EXTI_Callback+0x108>
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000ce0 	.word	0x20000ce0
 800303c:	20000cd4 	.word	0x20000cd4
 8003040:	40020400 	.word	0x40020400
 8003044:	20000cc8 	.word	0x20000cc8
 8003048:	20000cd8 	.word	0x20000cd8
 800304c:	20000ccc 	.word	0x20000ccc
 8003050:	20000cd0 	.word	0x20000cd0
 8003054:	20000cdc 	.word	0x20000cdc
 8003058:	20000e98 	.word	0x20000e98
 800305c:	20000ee0 	.word	0x20000ee0

08003060 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	// executes once the time runs out
	if(htim -> Instance == TIM3){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a24      	ldr	r2, [pc, #144]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d133      	bne.n	80030da <HAL_TIM_PeriodElapsedCallback+0x7a>
		if ( count == 1){
 8003072:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d118      	bne.n	80030ac <HAL_TIM_PeriodElapsedCallback+0x4c>
			// short press
			if (released_time - time_start <= 900){
 800307a:	4b23      	ldr	r3, [pc, #140]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b23      	ldr	r3, [pc, #140]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8003088:	d803      	bhi.n	8003092 <HAL_TIM_PeriodElapsedCallback+0x32>
				button_press = press_short;
 800308a:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e013      	b.n	80030ba <HAL_TIM_PeriodElapsedCallback+0x5a>
			}
			// long press
			else if (released_time - time_start >= 1100){
 8003092:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f240 424b 	movw	r2, #1099	@ 0x44b
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d90a      	bls.n	80030ba <HAL_TIM_PeriodElapsedCallback+0x5a>
				button_press = press_long;
 80030a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80030a6:	2203      	movs	r2, #3
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e006      	b.n	80030ba <HAL_TIM_PeriodElapsedCallback+0x5a>
			}
		}
		// double press
		else if ( count == 2){
 80030ac:	4b15      	ldr	r3, [pc, #84]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d102      	bne.n	80030ba <HAL_TIM_PeriodElapsedCallback+0x5a>
			button_press = press_double;
 80030b4:	4b16      	ldr	r3, [pc, #88]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80030b6:	2202      	movs	r2, #2
 80030b8:	701a      	strb	r2, [r3, #0]
		}

		HAL_TIM_Base_Stop_IT(&htim3); // stops timer interrupt
 80030ba:	4816      	ldr	r0, [pc, #88]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80030bc:	f003 fbc2 	bl	8006844 <HAL_TIM_Base_Stop_IT>
		//resets flags & press count
		i = 0;
 80030c0:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
		timer_active = 0;
 80030c6:	4b15      	ldr	r3, [pc, #84]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
		j = 0;
 80030cc:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
		count = 0;
 80030d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
			// resets flags
			i = 0;
			j = 0;
		}

}
 80030d8:	e00d      	b.n	80030f6 <HAL_TIM_PeriodElapsedCallback+0x96>
		else if (htim -> Instance == TIM4){
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a11      	ldr	r2, [pc, #68]	@ (8003124 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d108      	bne.n	80030f6 <HAL_TIM_PeriodElapsedCallback+0x96>
			HAL_TIM_Base_Stop_IT(&htim4); // stops timer interrupt
 80030e4:	4810      	ldr	r0, [pc, #64]	@ (8003128 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80030e6:	f003 fbad 	bl	8006844 <HAL_TIM_Base_Stop_IT>
			i = 0;
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
			j = 0;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40000400 	.word	0x40000400
 8003104:	20000cd0 	.word	0x20000cd0
 8003108:	20000cdc 	.word	0x20000cdc
 800310c:	20000cd8 	.word	0x20000cd8
 8003110:	20000cc4 	.word	0x20000cc4
 8003114:	20000e98 	.word	0x20000e98
 8003118:	20000cc8 	.word	0x20000cc8
 800311c:	20000cd4 	.word	0x20000cd4
 8003120:	20000ccc 	.word	0x20000ccc
 8003124:	40000800 	.word	0x40000800
 8003128:	20000ee0 	.word	0x20000ee0

0800312c <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4604      	mov	r4, r0
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	461a      	mov	r2, r3
 800313a:	4623      	mov	r3, r4
 800313c:	80fb      	strh	r3, [r7, #6]
 800313e:	4603      	mov	r3, r0
 8003140:	80bb      	strh	r3, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	807b      	strh	r3, [r7, #2]
 8003146:	4613      	mov	r3, r2
 8003148:	707b      	strb	r3, [r7, #1]
  if(control){
 800314a:	787b      	ldrb	r3, [r7, #1]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <muxSET+0x50>
    HAL_GPIO_WritePin(MAST_A_GPIO_Port, MAST_A_Pin, A);
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	2101      	movs	r1, #1
 8003158:	4815      	ldr	r0, [pc, #84]	@ (80031b0 <muxSET+0x84>)
 800315a:	f001 fd9d 	bl	8004c98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_B_GPIO_Port, MAST_B_Pin, B);
 800315e:	88bb      	ldrh	r3, [r7, #4]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	2102      	movs	r1, #2
 8003166:	4812      	ldr	r0, [pc, #72]	@ (80031b0 <muxSET+0x84>)
 8003168:	f001 fd96 	bl	8004c98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_C_GPIO_Port, MAST_C_Pin, C);
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	2110      	movs	r1, #16
 8003174:	480e      	ldr	r0, [pc, #56]	@ (80031b0 <muxSET+0x84>)
 8003176:	f001 fd8f 	bl	8004c98 <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
  }
}
 800317a:	e014      	b.n	80031a6 <muxSET+0x7a>
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	2101      	movs	r1, #1
 8003184:	480b      	ldr	r0, [pc, #44]	@ (80031b4 <muxSET+0x88>)
 8003186:	f001 fd87 	bl	8004c98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
 800318a:	88bb      	ldrh	r3, [r7, #4]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	2102      	movs	r1, #2
 8003192:	4809      	ldr	r0, [pc, #36]	@ (80031b8 <muxSET+0x8c>)
 8003194:	f001 fd80 	bl	8004c98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	2101      	movs	r1, #1
 80031a0:	4805      	ldr	r0, [pc, #20]	@ (80031b8 <muxSET+0x8c>)
 80031a2:	f001 fd79 	bl	8004c98 <HAL_GPIO_WritePin>
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40020000 	.word	0x40020000
 80031b4:	40020400 	.word	0x40020400
 80031b8:	40020800 	.word	0x40020800

080031bc <setRelay>:
#include <manager_io.h>
#include <manager_mux.h>
#include <manager_weight.h>


void setRelay(uint8_t rowNum){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]

	switch (rowNum){
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d866      	bhi.n	800329c <setRelay+0xe0>
 80031ce:	a201      	add	r2, pc, #4	@ (adr r2, 80031d4 <setRelay+0x18>)
 80031d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d4:	080031e5 	.word	0x080031e5
 80031d8:	08003213 	.word	0x08003213
 80031dc:	08003241 	.word	0x08003241
 80031e0:	0800326f 	.word	0x0800326f
		case 1:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 1);
 80031e4:	2201      	movs	r2, #1
 80031e6:	2140      	movs	r1, #64	@ 0x40
 80031e8:	482e      	ldr	r0, [pc, #184]	@ (80032a4 <setRelay+0xe8>)
 80031ea:	f001 fd55 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2120      	movs	r1, #32
 80031f2:	482c      	ldr	r0, [pc, #176]	@ (80032a4 <setRelay+0xe8>)
 80031f4:	f001 fd50 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 80031f8:	2200      	movs	r2, #0
 80031fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031fe:	482a      	ldr	r0, [pc, #168]	@ (80032a8 <setRelay+0xec>)
 8003200:	f001 fd4a 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800320a:	4827      	ldr	r0, [pc, #156]	@ (80032a8 <setRelay+0xec>)
 800320c:	f001 fd44 	bl	8004c98 <HAL_GPIO_WritePin>
			break;
 8003210:	e045      	b.n	800329e <setRelay+0xe2>

		case 2:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2140      	movs	r1, #64	@ 0x40
 8003216:	4823      	ldr	r0, [pc, #140]	@ (80032a4 <setRelay+0xe8>)
 8003218:	f001 fd3e 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 1);
 800321c:	2201      	movs	r2, #1
 800321e:	2120      	movs	r1, #32
 8003220:	4820      	ldr	r0, [pc, #128]	@ (80032a4 <setRelay+0xe8>)
 8003222:	f001 fd39 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800322c:	481e      	ldr	r0, [pc, #120]	@ (80032a8 <setRelay+0xec>)
 800322e:	f001 fd33 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003238:	481b      	ldr	r0, [pc, #108]	@ (80032a8 <setRelay+0xec>)
 800323a:	f001 fd2d 	bl	8004c98 <HAL_GPIO_WritePin>
			break;
 800323e:	e02e      	b.n	800329e <setRelay+0xe2>

		case 3:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8003240:	2200      	movs	r2, #0
 8003242:	2140      	movs	r1, #64	@ 0x40
 8003244:	4817      	ldr	r0, [pc, #92]	@ (80032a4 <setRelay+0xe8>)
 8003246:	f001 fd27 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2120      	movs	r1, #32
 800324e:	4815      	ldr	r0, [pc, #84]	@ (80032a4 <setRelay+0xe8>)
 8003250:	f001 fd22 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 1);
 8003254:	2201      	movs	r2, #1
 8003256:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800325a:	4813      	ldr	r0, [pc, #76]	@ (80032a8 <setRelay+0xec>)
 800325c:	f001 fd1c 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003266:	4810      	ldr	r0, [pc, #64]	@ (80032a8 <setRelay+0xec>)
 8003268:	f001 fd16 	bl	8004c98 <HAL_GPIO_WritePin>
			break;
 800326c:	e017      	b.n	800329e <setRelay+0xe2>

		case 4:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2140      	movs	r1, #64	@ 0x40
 8003272:	480c      	ldr	r0, [pc, #48]	@ (80032a4 <setRelay+0xe8>)
 8003274:	f001 fd10 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8003278:	2200      	movs	r2, #0
 800327a:	2120      	movs	r1, #32
 800327c:	4809      	ldr	r0, [pc, #36]	@ (80032a4 <setRelay+0xe8>)
 800327e:	f001 fd0b 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003288:	4807      	ldr	r0, [pc, #28]	@ (80032a8 <setRelay+0xec>)
 800328a:	f001 fd05 	bl	8004c98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 1);
 800328e:	2201      	movs	r2, #1
 8003290:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003294:	4804      	ldr	r0, [pc, #16]	@ (80032a8 <setRelay+0xec>)
 8003296:	f001 fcff 	bl	8004c98 <HAL_GPIO_WritePin>
			break;
 800329a:	e000      	b.n	800329e <setRelay+0xe2>

		default:
			return;
 800329c:	bf00      	nop
	}
}
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40020800 	.word	0x40020800
 80032a8:	40020400 	.word	0x40020400

080032ac <microDelay>:
#include "gpio.h"
#include "tim.h"


void microDelay(uint16_t delay)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80032b6:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <microDelay+0x30>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 80032be:	bf00      	nop
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <microDelay+0x30>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3f9      	bcc.n	80032c0 <microDelay+0x14>
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000e50 	.word	0x20000e50

080032e0 <getHX711>:

int32_t getHX711(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 80032ea:	f000 fe77 	bl	8003fdc <HAL_GetTick>
 80032ee:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 80032f0:	e008      	b.n	8003304 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 80032f2:	f000 fe73 	bl	8003fdc <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2bc8      	cmp	r3, #200	@ 0xc8
 80032fe:	d901      	bls.n	8003304 <getHX711+0x24>
      return 0;
 8003300:	2300      	movs	r3, #0
 8003302:	e04b      	b.n	800339c <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8003304:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003308:	4826      	ldr	r0, [pc, #152]	@ (80033a4 <getHX711+0xc4>)
 800330a:	f001 fcad 	bl	8004c68 <HAL_GPIO_ReadPin>
 800330e:	4603      	mov	r3, r0
 8003310:	2b01      	cmp	r3, #1
 8003312:	d0ee      	beq.n	80032f2 <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8003314:	2300      	movs	r3, #0
 8003316:	72fb      	strb	r3, [r7, #11]
 8003318:	e025      	b.n	8003366 <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 800331a:	2201      	movs	r2, #1
 800331c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003320:	4821      	ldr	r0, [pc, #132]	@ (80033a8 <getHX711+0xc8>)
 8003322:	f001 fcb9 	bl	8004c98 <HAL_GPIO_WritePin>
    microDelay(1);
 8003326:	2001      	movs	r0, #1
 8003328:	f7ff ffc0 	bl	80032ac <microDelay>
    data = data << 1;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8003332:	2200      	movs	r2, #0
 8003334:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003338:	481b      	ldr	r0, [pc, #108]	@ (80033a8 <getHX711+0xc8>)
 800333a:	f001 fcad 	bl	8004c98 <HAL_GPIO_WritePin>
    microDelay(1);
 800333e:	2001      	movs	r0, #1
 8003340:	f7ff ffb4 	bl	80032ac <microDelay>
    if(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8003344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003348:	4816      	ldr	r0, [pc, #88]	@ (80033a4 <getHX711+0xc4>)
 800334a:	f001 fc8d 	bl	8004c68 <HAL_GPIO_ReadPin>
 800334e:	4603      	mov	r3, r0
 8003350:	2b01      	cmp	r3, #1
 8003352:	d102      	bne.n	800335a <getHX711+0x7a>
      data ++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3301      	adds	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 800335a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	3301      	adds	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	72fb      	strb	r3, [r7, #11]
 8003366:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800336a:	2b17      	cmp	r3, #23
 800336c:	ddd5      	ble.n	800331a <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8003374:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 8003376:	2201      	movs	r2, #1
 8003378:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800337c:	480a      	ldr	r0, [pc, #40]	@ (80033a8 <getHX711+0xc8>)
 800337e:	f001 fc8b 	bl	8004c98 <HAL_GPIO_WritePin>
  microDelay(1);
 8003382:	2001      	movs	r0, #1
 8003384:	f7ff ff92 	bl	80032ac <microDelay>
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800338e:	4806      	ldr	r0, [pc, #24]	@ (80033a8 <getHX711+0xc8>)
 8003390:	f001 fc82 	bl	8004c98 <HAL_GPIO_WritePin>
  microDelay(1);
 8003394:	2001      	movs	r0, #1
 8003396:	f7ff ff89 	bl	80032ac <microDelay>
  return data;
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40020000 	.word	0x40020000
 80033a8:	40020400 	.word	0x40020400

080033ac <weigh>:

int weigh(uint32_t tare, float calFactor)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b088      	sub	sp, #32
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	ed87 0a00 	vstr	s0, [r7]
  int64_t  total = 0;
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 80033c6:	2332      	movs	r3, #50	@ 0x32
 80033c8:	613b      	str	r3, [r7, #16]

  int milligram = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
  int32_t average = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	82fb      	strh	r3, [r7, #22]
 80033d6:	e010      	b.n	80033fa <weigh+0x4e>
  {
      total += getHX711();
 80033d8:	f7ff ff82 	bl	80032e0 <getHX711>
 80033dc:	4603      	mov	r3, r0
 80033de:	17da      	asrs	r2, r3, #31
 80033e0:	461c      	mov	r4, r3
 80033e2:	4615      	mov	r5, r2
 80033e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e8:	eb12 0804 	adds.w	r8, r2, r4
 80033ec:	eb43 0905 	adc.w	r9, r3, r5
 80033f0:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 80033f4:	8afb      	ldrh	r3, [r7, #22]
 80033f6:	3301      	adds	r3, #1
 80033f8:	82fb      	strh	r3, [r7, #22]
 80033fa:	8afb      	ldrh	r3, [r7, #22]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	429a      	cmp	r2, r3
 8003400:	dcea      	bgt.n	80033d8 <weigh+0x2c>
  }
  average = (int32_t)(total / samples);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	17da      	asrs	r2, r3, #31
 8003406:	469a      	mov	sl, r3
 8003408:	4693      	mov	fp, r2
 800340a:	4652      	mov	r2, sl
 800340c:	465b      	mov	r3, fp
 800340e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003412:	f7fd fc59 	bl	8000cc8 <__aeabi_ldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4613      	mov	r3, r2
 800341c:	60bb      	str	r3, [r7, #8]
  milligram = (int)(average - tare)*calFactor;
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800342c:	edd7 7a00 	vldr	s15, [r7]
 8003430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003438:	ee17 3a90 	vmov	r3, s15
 800343c:	60fb      	str	r3, [r7, #12]
  return milligram;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800344a <weighRaw>:

int32_t weighRaw()
{
 800344a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
  int64_t  	total = 0;
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  	samples = 50;
 800345e:	2332      	movs	r3, #50	@ 0x32
 8003460:	60bb      	str	r3, [r7, #8]
  int32_t 	average = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]

  for(uint16_t i=0 ; i<samples ; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	81fb      	strh	r3, [r7, #14]
 800346a:	e010      	b.n	800348e <weighRaw+0x44>
  {
      total += getHX711();
 800346c:	f7ff ff38 	bl	80032e0 <getHX711>
 8003470:	4603      	mov	r3, r0
 8003472:	17da      	asrs	r2, r3, #31
 8003474:	461c      	mov	r4, r3
 8003476:	4615      	mov	r5, r2
 8003478:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800347c:	eb12 0804 	adds.w	r8, r2, r4
 8003480:	eb43 0905 	adc.w	r9, r3, r5
 8003484:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 8003488:	89fb      	ldrh	r3, [r7, #14]
 800348a:	3301      	adds	r3, #1
 800348c:	81fb      	strh	r3, [r7, #14]
 800348e:	89fb      	ldrh	r3, [r7, #14]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	dcea      	bgt.n	800346c <weighRaw+0x22>
  }
  average = (int32_t)(total / samples);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	17da      	asrs	r2, r3, #31
 800349a:	469a      	mov	sl, r3
 800349c:	4693      	mov	fp, r2
 800349e:	4652      	mov	r2, sl
 80034a0:	465b      	mov	r3, fp
 80034a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034a6:	f7fd fc0f 	bl	8000cc8 <__aeabi_ldivmod>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4613      	mov	r3, r2
 80034b0:	607b      	str	r3, [r7, #4]
  return average;
 80034b2:	687b      	ldr	r3, [r7, #4]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034be <weighRawTare>:

int32_t weighRawTare(uint32_t tare)
{
 80034be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  int64_t  	total = 0;
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  	samples = 50;
 80034d4:	2332      	movs	r3, #50	@ 0x32
 80034d6:	613b      	str	r3, [r7, #16]
  int32_t 	average = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  int32_t 	avgTare = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 80034e0:	2300      	movs	r3, #0
 80034e2:	82fb      	strh	r3, [r7, #22]
 80034e4:	e010      	b.n	8003508 <weighRawTare+0x4a>
  {
      total += getHX711();
 80034e6:	f7ff fefb 	bl	80032e0 <getHX711>
 80034ea:	4603      	mov	r3, r0
 80034ec:	17da      	asrs	r2, r3, #31
 80034ee:	461c      	mov	r4, r3
 80034f0:	4615      	mov	r5, r2
 80034f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f6:	eb12 0804 	adds.w	r8, r2, r4
 80034fa:	eb43 0905 	adc.w	r9, r3, r5
 80034fe:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8003502:	8afb      	ldrh	r3, [r7, #22]
 8003504:	3301      	adds	r3, #1
 8003506:	82fb      	strh	r3, [r7, #22]
 8003508:	8afb      	ldrh	r3, [r7, #22]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	dcea      	bgt.n	80034e6 <weighRawTare+0x28>
  }
  average = (int32_t)(total / samples);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	17da      	asrs	r2, r3, #31
 8003514:	469a      	mov	sl, r3
 8003516:	4693      	mov	fp, r2
 8003518:	4652      	mov	r2, sl
 800351a:	465b      	mov	r3, fp
 800351c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003520:	f7fd fbd2 	bl	8000cc8 <__aeabi_ldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  avgTare = average - tare;
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	60bb      	str	r3, [r7, #8]
  return avgTare;
 8003534:	68bb      	ldr	r3, [r7, #8]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003540 <getCalFactor>:

float getCalFactor(uint32_t knownHX711){
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	float cal = 20000.0 / knownHX711;
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fc fffb 	bl	8000544 <__aeabi_ui2d>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	a10b      	add	r1, pc, #44	@ (adr r1, 8003580 <getCalFactor+0x40>)
 8003554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003558:	f7fd f998 	bl	800088c <__aeabi_ddiv>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7fd fb60 	bl	8000c28 <__aeabi_d2f>
 8003568:	4603      	mov	r3, r0
 800356a:	60fb      	str	r3, [r7, #12]
	return cal;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	ee07 3a90 	vmov	s15, r3
}
 8003572:	eeb0 0a67 	vmov.f32	s0, s15
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	f3af 8000 	nop.w
 8003580:	00000000 	.word	0x00000000
 8003584:	40d38800 	.word	0x40d38800

08003588 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800358c:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <MX_SPI1_Init+0x64>)
 800358e:	4a18      	ldr	r2, [pc, #96]	@ (80035f0 <MX_SPI1_Init+0x68>)
 8003590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003592:	4b16      	ldr	r3, [pc, #88]	@ (80035ec <MX_SPI1_Init+0x64>)
 8003594:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800359a:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <MX_SPI1_Init+0x64>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035a0:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035a6:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ba:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035bc:	2200      	movs	r2, #0
 80035be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035c6:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035cc:	4b07      	ldr	r3, [pc, #28]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035d2:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035d4:	220a      	movs	r2, #10
 80035d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035d8:	4804      	ldr	r0, [pc, #16]	@ (80035ec <MX_SPI1_Init+0x64>)
 80035da:	f002 f8f1 	bl	80057c0 <HAL_SPI_Init>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80035e4:	f7ff f8e0 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000ce4 	.word	0x20000ce4
 80035f0:	40013000 	.word	0x40013000

080035f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80035f8:	4b17      	ldr	r3, [pc, #92]	@ (8003658 <MX_SPI2_Init+0x64>)
 80035fa:	4a18      	ldr	r2, [pc, #96]	@ (800365c <MX_SPI2_Init+0x68>)
 80035fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035fe:	4b16      	ldr	r3, [pc, #88]	@ (8003658 <MX_SPI2_Init+0x64>)
 8003600:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003604:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003606:	4b14      	ldr	r3, [pc, #80]	@ (8003658 <MX_SPI2_Init+0x64>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800360c:	4b12      	ldr	r3, [pc, #72]	@ (8003658 <MX_SPI2_Init+0x64>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003612:	4b11      	ldr	r3, [pc, #68]	@ (8003658 <MX_SPI2_Init+0x64>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003618:	4b0f      	ldr	r3, [pc, #60]	@ (8003658 <MX_SPI2_Init+0x64>)
 800361a:	2200      	movs	r2, #0
 800361c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800361e:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <MX_SPI2_Init+0x64>)
 8003620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003624:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003626:	4b0c      	ldr	r3, [pc, #48]	@ (8003658 <MX_SPI2_Init+0x64>)
 8003628:	2200      	movs	r2, #0
 800362a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800362c:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <MX_SPI2_Init+0x64>)
 800362e:	2200      	movs	r2, #0
 8003630:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003632:	4b09      	ldr	r3, [pc, #36]	@ (8003658 <MX_SPI2_Init+0x64>)
 8003634:	2200      	movs	r2, #0
 8003636:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003638:	4b07      	ldr	r3, [pc, #28]	@ (8003658 <MX_SPI2_Init+0x64>)
 800363a:	2200      	movs	r2, #0
 800363c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <MX_SPI2_Init+0x64>)
 8003640:	220a      	movs	r2, #10
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003644:	4804      	ldr	r0, [pc, #16]	@ (8003658 <MX_SPI2_Init+0x64>)
 8003646:	f002 f8bb 	bl	80057c0 <HAL_SPI_Init>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003650:	f7ff f8aa 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000d3c 	.word	0x20000d3c
 800365c:	40003800 	.word	0x40003800

08003660 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003664:	4b17      	ldr	r3, [pc, #92]	@ (80036c4 <MX_SPI3_Init+0x64>)
 8003666:	4a18      	ldr	r2, [pc, #96]	@ (80036c8 <MX_SPI3_Init+0x68>)
 8003668:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800366a:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <MX_SPI3_Init+0x64>)
 800366c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003670:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003672:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <MX_SPI3_Init+0x64>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003678:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <MX_SPI3_Init+0x64>)
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800367e:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <MX_SPI3_Init+0x64>)
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <MX_SPI3_Init+0x64>)
 8003686:	2200      	movs	r2, #0
 8003688:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800368a:	4b0e      	ldr	r3, [pc, #56]	@ (80036c4 <MX_SPI3_Init+0x64>)
 800368c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003690:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <MX_SPI3_Init+0x64>)
 8003694:	2200      	movs	r2, #0
 8003696:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003698:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <MX_SPI3_Init+0x64>)
 800369a:	2200      	movs	r2, #0
 800369c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <MX_SPI3_Init+0x64>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036a4:	4b07      	ldr	r3, [pc, #28]	@ (80036c4 <MX_SPI3_Init+0x64>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <MX_SPI3_Init+0x64>)
 80036ac:	220a      	movs	r2, #10
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80036b0:	4804      	ldr	r0, [pc, #16]	@ (80036c4 <MX_SPI3_Init+0x64>)
 80036b2:	f002 f885 	bl	80057c0 <HAL_SPI_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80036bc:	f7ff f874 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80036c0:	bf00      	nop
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000d94 	.word	0x20000d94
 80036c8:	40003c00 	.word	0x40003c00

080036cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08e      	sub	sp, #56	@ 0x38
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a71      	ldr	r2, [pc, #452]	@ (80038b0 <HAL_SPI_MspInit+0x1e4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d12c      	bne.n	8003748 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	4b70      	ldr	r3, [pc, #448]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	4a6f      	ldr	r2, [pc, #444]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 80036f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80036fe:	4b6d      	ldr	r3, [pc, #436]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003706:	623b      	str	r3, [r7, #32]
 8003708:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	4b69      	ldr	r3, [pc, #420]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	4a68      	ldr	r2, [pc, #416]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6313      	str	r3, [r2, #48]	@ 0x30
 800371a:	4b66      	ldr	r3, [pc, #408]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003726:	23e0      	movs	r3, #224	@ 0xe0
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372a:	2302      	movs	r3, #2
 800372c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003732:	2303      	movs	r3, #3
 8003734:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003736:	2305      	movs	r3, #5
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800373e:	4619      	mov	r1, r3
 8003740:	485d      	ldr	r0, [pc, #372]	@ (80038b8 <HAL_SPI_MspInit+0x1ec>)
 8003742:	f001 f8fd 	bl	8004940 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003746:	e0af      	b.n	80038a8 <HAL_SPI_MspInit+0x1dc>
  else if(spiHandle->Instance==SPI2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a5b      	ldr	r2, [pc, #364]	@ (80038bc <HAL_SPI_MspInit+0x1f0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d178      	bne.n	8003844 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	4b57      	ldr	r3, [pc, #348]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	4a56      	ldr	r2, [pc, #344]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 800375c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003760:	6413      	str	r3, [r2, #64]	@ 0x40
 8003762:	4b54      	ldr	r3, [pc, #336]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	4b50      	ldr	r3, [pc, #320]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	4a4f      	ldr	r2, [pc, #316]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	6313      	str	r3, [r2, #48]	@ 0x30
 800377e:	4b4d      	ldr	r3, [pc, #308]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	4b49      	ldr	r3, [pc, #292]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	4a48      	ldr	r2, [pc, #288]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	6313      	str	r3, [r2, #48]	@ 0x30
 800379a:	4b46      	ldr	r3, [pc, #280]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037a6:	2308      	movs	r3, #8
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b2:	2303      	movs	r3, #3
 80037b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037b6:	2305      	movs	r3, #5
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037be:	4619      	mov	r1, r3
 80037c0:	483f      	ldr	r0, [pc, #252]	@ (80038c0 <HAL_SPI_MspInit+0x1f4>)
 80037c2:	f001 f8bd 	bl	8004940 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d4:	2303      	movs	r3, #3
 80037d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037d8:	2305      	movs	r3, #5
 80037da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e0:	4619      	mov	r1, r3
 80037e2:	4838      	ldr	r0, [pc, #224]	@ (80038c4 <HAL_SPI_MspInit+0x1f8>)
 80037e4:	f001 f8ac 	bl	8004940 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80037e8:	4b37      	ldr	r3, [pc, #220]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 80037ea:	4a38      	ldr	r2, [pc, #224]	@ (80038cc <HAL_SPI_MspInit+0x200>)
 80037ec:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80037ee:	4b36      	ldr	r3, [pc, #216]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037f4:	4b34      	ldr	r3, [pc, #208]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 80037f6:	2240      	movs	r2, #64	@ 0x40
 80037f8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037fa:	4b33      	ldr	r3, [pc, #204]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003800:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 8003802:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003806:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003808:	4b2f      	ldr	r3, [pc, #188]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 800380a:	2200      	movs	r2, #0
 800380c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800380e:	4b2e      	ldr	r3, [pc, #184]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003814:	4b2c      	ldr	r3, [pc, #176]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800381a:	4b2b      	ldr	r3, [pc, #172]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 800381c:	2200      	movs	r2, #0
 800381e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003820:	4b29      	ldr	r3, [pc, #164]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 8003822:	2200      	movs	r2, #0
 8003824:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003826:	4828      	ldr	r0, [pc, #160]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 8003828:	f000 fd1a 	bl	8004260 <HAL_DMA_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 8003832:	f7fe ffb9 	bl	80027a8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a23      	ldr	r2, [pc, #140]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 800383a:	649a      	str	r2, [r3, #72]	@ 0x48
 800383c:	4a22      	ldr	r2, [pc, #136]	@ (80038c8 <HAL_SPI_MspInit+0x1fc>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003842:	e031      	b.n	80038a8 <HAL_SPI_MspInit+0x1dc>
  else if(spiHandle->Instance==SPI3)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a21      	ldr	r2, [pc, #132]	@ (80038d0 <HAL_SPI_MspInit+0x204>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d12c      	bne.n	80038a8 <HAL_SPI_MspInit+0x1dc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	4b18      	ldr	r3, [pc, #96]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	4a17      	ldr	r2, [pc, #92]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800385c:	6413      	str	r3, [r2, #64]	@ 0x40
 800385e:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	4b11      	ldr	r3, [pc, #68]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	4a10      	ldr	r2, [pc, #64]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6313      	str	r3, [r2, #48]	@ 0x30
 800387a:	4b0e      	ldr	r3, [pc, #56]	@ (80038b4 <HAL_SPI_MspInit+0x1e8>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003886:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003898:	2306      	movs	r3, #6
 800389a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a0:	4619      	mov	r1, r3
 80038a2:	4807      	ldr	r0, [pc, #28]	@ (80038c0 <HAL_SPI_MspInit+0x1f4>)
 80038a4:	f001 f84c 	bl	8004940 <HAL_GPIO_Init>
}
 80038a8:	bf00      	nop
 80038aa:	3738      	adds	r7, #56	@ 0x38
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40013000 	.word	0x40013000
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40020000 	.word	0x40020000
 80038bc:	40003800 	.word	0x40003800
 80038c0:	40020800 	.word	0x40020800
 80038c4:	40020400 	.word	0x40020400
 80038c8:	20000dec 	.word	0x20000dec
 80038cc:	40026070 	.word	0x40026070
 80038d0:	40003c00 	.word	0x40003c00

080038d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <HAL_MspInit+0x4c>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003920 <HAL_MspInit+0x4c>)
 80038e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <HAL_MspInit+0x4c>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4b09      	ldr	r3, [pc, #36]	@ (8003920 <HAL_MspInit+0x4c>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	4a08      	ldr	r2, [pc, #32]	@ (8003920 <HAL_MspInit+0x4c>)
 8003900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003904:	6413      	str	r3, [r2, #64]	@ 0x40
 8003906:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <HAL_MspInit+0x4c>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800

08003924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <NMI_Handler+0x4>

0800392c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <HardFault_Handler+0x4>

08003934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <MemManage_Handler+0x4>

0800393c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <BusFault_Handler+0x4>

08003944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <UsageFault_Handler+0x4>

0800394c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800397a:	f000 fb1b 	bl	8003fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}

08003982 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_BTN_Pin);
 8003986:	2002      	movs	r0, #2
 8003988:	f001 f9a0 	bl	8004ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}

08003990 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CONFIRM_BTN_Pin);
 8003994:	2004      	movs	r0, #4
 8003996:	f001 f999 	bl	8004ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80039a4:	4802      	ldr	r0, [pc, #8]	@ (80039b0 <DMA1_Stream4_IRQHandler+0x10>)
 80039a6:	f000 fd61 	bl	800446c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000dec 	.word	0x20000dec

080039b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039b8:	4802      	ldr	r0, [pc, #8]	@ (80039c4 <TIM3_IRQHandler+0x10>)
 80039ba:	f002 ff72 	bl	80068a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000e98 	.word	0x20000e98

080039c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039cc:	4802      	ldr	r0, [pc, #8]	@ (80039d8 <TIM4_IRQHandler+0x10>)
 80039ce:	f002 ff68 	bl	80068a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000ee0 	.word	0x20000ee0

080039dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return 1;
 80039e0:	2301      	movs	r3, #1
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_kill>:

int _kill(int pid, int sig)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039f6:	f008 fcbf 	bl	800c378 <__errno>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2216      	movs	r2, #22
 80039fe:	601a      	str	r2, [r3, #0]
  return -1;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_exit>:

void _exit (int status)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a14:	f04f 31ff 	mov.w	r1, #4294967295
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ffe7 	bl	80039ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a1e:	bf00      	nop
 8003a20:	e7fd      	b.n	8003a1e <_exit+0x12>

08003a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e00a      	b.n	8003a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a34:	f7ff fa52 	bl	8002edc <__io_getchar>
 8003a38:	4601      	mov	r1, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	60ba      	str	r2, [r7, #8]
 8003a40:	b2ca      	uxtb	r2, r1
 8003a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3301      	adds	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	dbf0      	blt.n	8003a34 <_read+0x12>
  }

  return len;
 8003a52:	687b      	ldr	r3, [r7, #4]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_close>:
  }
  return len;
}

int _close(int file)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a84:	605a      	str	r2, [r3, #4]
  return 0;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <_isatty>:

int _isatty(int file)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a9c:	2301      	movs	r3, #1
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003acc:	4a14      	ldr	r2, [pc, #80]	@ (8003b20 <_sbrk+0x5c>)
 8003ace:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <_sbrk+0x60>)
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ad8:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <_sbrk+0x64>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ae0:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <_sbrk+0x64>)
 8003ae2:	4a12      	ldr	r2, [pc, #72]	@ (8003b2c <_sbrk+0x68>)
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ae6:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <_sbrk+0x64>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d207      	bcs.n	8003b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003af4:	f008 fc40 	bl	800c378 <__errno>
 8003af8:	4603      	mov	r3, r0
 8003afa:	220c      	movs	r2, #12
 8003afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
 8003b02:	e009      	b.n	8003b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b04:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <_sbrk+0x64>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b0a:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <_sbrk+0x64>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	4a05      	ldr	r2, [pc, #20]	@ (8003b28 <_sbrk+0x64>)
 8003b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b16:	68fb      	ldr	r3, [r7, #12]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20020000 	.word	0x20020000
 8003b24:	00000400 	.word	0x00000400
 8003b28:	20000e4c 	.word	0x20000e4c
 8003b2c:	20001108 	.word	0x20001108

08003b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <SystemInit+0x20>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3a:	4a05      	ldr	r2, [pc, #20]	@ (8003b50 <SystemInit+0x20>)
 8003b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b68:	463b      	mov	r3, r7
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <MX_TIM2_Init+0x94>)
 8003b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8003b78:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <MX_TIM2_Init+0x94>)
 8003b7a:	2207      	movs	r2, #7
 8003b7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003be8 <MX_TIM2_Init+0x94>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003b84:	4b18      	ldr	r3, [pc, #96]	@ (8003be8 <MX_TIM2_Init+0x94>)
 8003b86:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b8c:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <MX_TIM2_Init+0x94>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b92:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <MX_TIM2_Init+0x94>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b98:	4813      	ldr	r0, [pc, #76]	@ (8003be8 <MX_TIM2_Init+0x94>)
 8003b9a:	f002 fd2b 	bl	80065f4 <HAL_TIM_Base_Init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003ba4:	f7fe fe00 	bl	80027a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bae:	f107 0308 	add.w	r3, r7, #8
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	480c      	ldr	r0, [pc, #48]	@ (8003be8 <MX_TIM2_Init+0x94>)
 8003bb6:	f002 ff64 	bl	8006a82 <HAL_TIM_ConfigClockSource>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003bc0:	f7fe fdf2 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bcc:	463b      	mov	r3, r7
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4805      	ldr	r0, [pc, #20]	@ (8003be8 <MX_TIM2_Init+0x94>)
 8003bd2:	f003 f98b 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003bdc:	f7fe fde4 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003be0:	bf00      	nop
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20000e50 	.word	0x20000e50

08003bec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
 8003bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c00:	463b      	mov	r3, r7
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c08:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <MX_TIM3_Init+0x94>)
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c84 <MX_TIM3_Init+0x98>)
 8003c0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c80 <MX_TIM3_Init+0x94>)
 8003c10:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8003c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c16:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <MX_TIM3_Init+0x94>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19000 - 1;
 8003c1c:	4b18      	ldr	r3, [pc, #96]	@ (8003c80 <MX_TIM3_Init+0x94>)
 8003c1e:	f644 2237 	movw	r2, #18999	@ 0x4a37
 8003c22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c24:	4b16      	ldr	r3, [pc, #88]	@ (8003c80 <MX_TIM3_Init+0x94>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <MX_TIM3_Init+0x94>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c30:	4813      	ldr	r0, [pc, #76]	@ (8003c80 <MX_TIM3_Init+0x94>)
 8003c32:	f002 fcdf 	bl	80065f4 <HAL_TIM_Base_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003c3c:	f7fe fdb4 	bl	80027a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	480c      	ldr	r0, [pc, #48]	@ (8003c80 <MX_TIM3_Init+0x94>)
 8003c4e:	f002 ff18 	bl	8006a82 <HAL_TIM_ConfigClockSource>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003c58:	f7fe fda6 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c64:	463b      	mov	r3, r7
 8003c66:	4619      	mov	r1, r3
 8003c68:	4805      	ldr	r0, [pc, #20]	@ (8003c80 <MX_TIM3_Init+0x94>)
 8003c6a:	f003 f93f 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003c74:	f7fe fd98 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c78:	bf00      	nop
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000e98 	.word	0x20000e98
 8003c84:	40000400 	.word	0x40000400

08003c88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8e:	f107 0308 	add.w	r3, r7, #8
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <MX_TIM4_Init+0x94>)
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <MX_TIM4_Init+0x98>)
 8003ca8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6400 - 1;
 8003caa:	4b1c      	ldr	r3, [pc, #112]	@ (8003d1c <MX_TIM4_Init+0x94>)
 8003cac:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8003cb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <MX_TIM4_Init+0x94>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1135 - 1;
 8003cb8:	4b18      	ldr	r3, [pc, #96]	@ (8003d1c <MX_TIM4_Init+0x94>)
 8003cba:	f240 426e 	movw	r2, #1134	@ 0x46e
 8003cbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cc0:	4b16      	ldr	r3, [pc, #88]	@ (8003d1c <MX_TIM4_Init+0x94>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc6:	4b15      	ldr	r3, [pc, #84]	@ (8003d1c <MX_TIM4_Init+0x94>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003ccc:	4813      	ldr	r0, [pc, #76]	@ (8003d1c <MX_TIM4_Init+0x94>)
 8003cce:	f002 fc91 	bl	80065f4 <HAL_TIM_Base_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003cd8:	f7fe fd66 	bl	80027a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ce2:	f107 0308 	add.w	r3, r7, #8
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480c      	ldr	r0, [pc, #48]	@ (8003d1c <MX_TIM4_Init+0x94>)
 8003cea:	f002 feca 	bl	8006a82 <HAL_TIM_ConfigClockSource>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003cf4:	f7fe fd58 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d00:	463b      	mov	r3, r7
 8003d02:	4619      	mov	r1, r3
 8003d04:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <MX_TIM4_Init+0x94>)
 8003d06:	f003 f8f1 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003d10:	f7fe fd4a 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000ee0 	.word	0x20000ee0
 8003d20:	40000800 	.word	0x40000800

08003d24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <HAL_TIM_Base_MspInit+0xa8>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	4a23      	ldr	r2, [pc, #140]	@ (8003dcc <HAL_TIM_Base_MspInit+0xa8>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d46:	4b21      	ldr	r3, [pc, #132]	@ (8003dcc <HAL_TIM_Base_MspInit+0xa8>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003d52:	e036      	b.n	8003dc2 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <HAL_TIM_Base_MspInit+0xac>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d116      	bne.n	8003d8c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <HAL_TIM_Base_MspInit+0xa8>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	4a19      	ldr	r2, [pc, #100]	@ (8003dcc <HAL_TIM_Base_MspInit+0xa8>)
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d6e:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <HAL_TIM_Base_MspInit+0xa8>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	201d      	movs	r0, #29
 8003d80:	f000 fa37 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d84:	201d      	movs	r0, #29
 8003d86:	f000 fa50 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 8003d8a:	e01a      	b.n	8003dc2 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a10      	ldr	r2, [pc, #64]	@ (8003dd4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d115      	bne.n	8003dc2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <HAL_TIM_Base_MspInit+0xa8>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8003dcc <HAL_TIM_Base_MspInit+0xa8>)
 8003da0:	f043 0304 	orr.w	r3, r3, #4
 8003da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da6:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <HAL_TIM_Base_MspInit+0xa8>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2100      	movs	r1, #0
 8003db6:	201e      	movs	r0, #30
 8003db8:	f000 fa1b 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003dbc:	201e      	movs	r0, #30
 8003dbe:	f000 fa34 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800

08003dd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ddc:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <MX_USART2_UART_Init+0x4c>)
 8003dde:	4a12      	ldr	r2, [pc, #72]	@ (8003e28 <MX_USART2_UART_Init+0x50>)
 8003de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003de2:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <MX_USART2_UART_Init+0x4c>)
 8003de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dea:	4b0e      	ldr	r3, [pc, #56]	@ (8003e24 <MX_USART2_UART_Init+0x4c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003df0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <MX_USART2_UART_Init+0x4c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003df6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <MX_USART2_UART_Init+0x4c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dfc:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <MX_USART2_UART_Init+0x4c>)
 8003dfe:	220c      	movs	r2, #12
 8003e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e02:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <MX_USART2_UART_Init+0x4c>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e08:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <MX_USART2_UART_Init+0x4c>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e0e:	4805      	ldr	r0, [pc, #20]	@ (8003e24 <MX_USART2_UART_Init+0x4c>)
 8003e10:	f003 f8fc 	bl	800700c <HAL_UART_Init>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e1a:	f7fe fcc5 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000f28 	.word	0x20000f28
 8003e28:	40004400 	.word	0x40004400

08003e2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	@ 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a19      	ldr	r2, [pc, #100]	@ (8003eb0 <HAL_UART_MspInit+0x84>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d12b      	bne.n	8003ea6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	4b18      	ldr	r3, [pc, #96]	@ (8003eb4 <HAL_UART_MspInit+0x88>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	4a17      	ldr	r2, [pc, #92]	@ (8003eb4 <HAL_UART_MspInit+0x88>)
 8003e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e5e:	4b15      	ldr	r3, [pc, #84]	@ (8003eb4 <HAL_UART_MspInit+0x88>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_UART_MspInit+0x88>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	4a10      	ldr	r2, [pc, #64]	@ (8003eb4 <HAL_UART_MspInit+0x88>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <HAL_UART_MspInit+0x88>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e86:	230c      	movs	r3, #12
 8003e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e92:	2303      	movs	r3, #3
 8003e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e96:	2307      	movs	r3, #7
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4805      	ldr	r0, [pc, #20]	@ (8003eb8 <HAL_UART_MspInit+0x8c>)
 8003ea2:	f000 fd4d 	bl	8004940 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	3728      	adds	r7, #40	@ 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40004400 	.word	0x40004400
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40020000 	.word	0x40020000

08003ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ef4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ec0:	f7ff fe36 	bl	8003b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ec4:	480c      	ldr	r0, [pc, #48]	@ (8003ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ec6:	490d      	ldr	r1, [pc, #52]	@ (8003efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ecc:	e002      	b.n	8003ed4 <LoopCopyDataInit>

08003ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ed2:	3304      	adds	r3, #4

08003ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ed8:	d3f9      	bcc.n	8003ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eda:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003edc:	4c0a      	ldr	r4, [pc, #40]	@ (8003f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ee0:	e001      	b.n	8003ee6 <LoopFillZerobss>

08003ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ee4:	3204      	adds	r2, #4

08003ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ee8:	d3fb      	bcc.n	8003ee2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003eea:	f008 fa4b 	bl	800c384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eee:	f7fe fb75 	bl	80025dc <main>
  bx  lr    
 8003ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003efc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003f00:	080115e0 	.word	0x080115e0
  ldr r2, =_sbss
 8003f04:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003f08:	20001108 	.word	0x20001108

08003f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f0c:	e7fe      	b.n	8003f0c <ADC_IRQHandler>
	...

08003f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f14:	4b0e      	ldr	r3, [pc, #56]	@ (8003f50 <HAL_Init+0x40>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0d      	ldr	r2, [pc, #52]	@ (8003f50 <HAL_Init+0x40>)
 8003f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f20:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <HAL_Init+0x40>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0a      	ldr	r2, [pc, #40]	@ (8003f50 <HAL_Init+0x40>)
 8003f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f2c:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <HAL_Init+0x40>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a07      	ldr	r2, [pc, #28]	@ (8003f50 <HAL_Init+0x40>)
 8003f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f38:	2003      	movs	r0, #3
 8003f3a:	f000 f94f 	bl	80041dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f3e:	200f      	movs	r0, #15
 8003f40:	f000 f808 	bl	8003f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f44:	f7ff fcc6 	bl	80038d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023c00 	.word	0x40023c00

08003f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f5c:	4b12      	ldr	r3, [pc, #72]	@ (8003fa8 <HAL_InitTick+0x54>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b12      	ldr	r3, [pc, #72]	@ (8003fac <HAL_InitTick+0x58>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	4619      	mov	r1, r3
 8003f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f967 	bl	8004246 <HAL_SYSTICK_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00e      	b.n	8003fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d80a      	bhi.n	8003f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	f000 f92f 	bl	80041f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f94:	4a06      	ldr	r2, [pc, #24]	@ (8003fb0 <HAL_InitTick+0x5c>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	2000000c 	.word	0x2000000c
 8003fac:	20000014 	.word	0x20000014
 8003fb0:	20000010 	.word	0x20000010

08003fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fb8:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <HAL_IncTick+0x20>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <HAL_IncTick+0x24>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a04      	ldr	r2, [pc, #16]	@ (8003fd8 <HAL_IncTick+0x24>)
 8003fc6:	6013      	str	r3, [r2, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000014 	.word	0x20000014
 8003fd8:	20000f70 	.word	0x20000f70

08003fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return uwTick;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	@ (8003ff0 <HAL_GetTick+0x14>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000f70 	.word	0x20000f70

08003ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7ff ffee 	bl	8003fdc <HAL_GetTick>
 8004000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d005      	beq.n	800401a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800400e:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <HAL_Delay+0x44>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800401a:	bf00      	nop
 800401c:	f7ff ffde 	bl	8003fdc <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	429a      	cmp	r2, r3
 800402a:	d8f7      	bhi.n	800401c <HAL_Delay+0x28>
  {
  }
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000014 	.word	0x20000014

0800403c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800404c:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004058:	4013      	ands	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800406c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800406e:	4a04      	ldr	r2, [pc, #16]	@ (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	60d3      	str	r3, [r2, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004088:	4b04      	ldr	r3, [pc, #16]	@ (800409c <__NVIC_GetPriorityGrouping+0x18>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	f003 0307 	and.w	r3, r3, #7
}
 8004092:	4618      	mov	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db0b      	blt.n	80040ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	f003 021f 	and.w	r2, r3, #31
 80040b8:	4907      	ldr	r1, [pc, #28]	@ (80040d8 <__NVIC_EnableIRQ+0x38>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2001      	movs	r0, #1
 80040c2:	fa00 f202 	lsl.w	r2, r0, r2
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000e100 	.word	0xe000e100

080040dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db0a      	blt.n	8004106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	490c      	ldr	r1, [pc, #48]	@ (8004128 <__NVIC_SetPriority+0x4c>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	440b      	add	r3, r1
 8004100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004104:	e00a      	b.n	800411c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4908      	ldr	r1, [pc, #32]	@ (800412c <__NVIC_SetPriority+0x50>)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	3b04      	subs	r3, #4
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	440b      	add	r3, r1
 800411a:	761a      	strb	r2, [r3, #24]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000e100 	.word	0xe000e100
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	@ 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f1c3 0307 	rsb	r3, r3, #7
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf28      	it	cs
 800414e:	2304      	movcs	r3, #4
 8004150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3304      	adds	r3, #4
 8004156:	2b06      	cmp	r3, #6
 8004158:	d902      	bls.n	8004160 <NVIC_EncodePriority+0x30>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3b03      	subs	r3, #3
 800415e:	e000      	b.n	8004162 <NVIC_EncodePriority+0x32>
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	f04f 32ff 	mov.w	r2, #4294967295
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004178:	f04f 31ff 	mov.w	r1, #4294967295
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	43d9      	mvns	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	4313      	orrs	r3, r2
         );
}
 800418a:	4618      	mov	r0, r3
 800418c:	3724      	adds	r7, #36	@ 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041a8:	d301      	bcc.n	80041ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041aa:	2301      	movs	r3, #1
 80041ac:	e00f      	b.n	80041ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ae:	4a0a      	ldr	r2, [pc, #40]	@ (80041d8 <SysTick_Config+0x40>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041b6:	210f      	movs	r1, #15
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	f7ff ff8e 	bl	80040dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <SysTick_Config+0x40>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c6:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <SysTick_Config+0x40>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	e000e010 	.word	0xe000e010

080041dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff29 	bl	800403c <__NVIC_SetPriorityGrouping>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004204:	f7ff ff3e 	bl	8004084 <__NVIC_GetPriorityGrouping>
 8004208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff ff8e 	bl	8004130 <NVIC_EncodePriority>
 8004214:	4602      	mov	r2, r0
 8004216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff5d 	bl	80040dc <__NVIC_SetPriority>
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff31 	bl	80040a0 <__NVIC_EnableIRQ>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffa2 	bl	8004198 <SysTick_Config>
 8004254:	4603      	mov	r3, r0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800426c:	f7ff feb6 	bl	8003fdc <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e099      	b.n	80043b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800429c:	e00f      	b.n	80042be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800429e:	f7ff fe9d 	bl	8003fdc <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	d908      	bls.n	80042be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2203      	movs	r2, #3
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e078      	b.n	80043b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e8      	bne.n	800429e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4b38      	ldr	r3, [pc, #224]	@ (80043b8 <HAL_DMA_Init+0x158>)
 80042d8:	4013      	ands	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	2b04      	cmp	r3, #4
 8004316:	d107      	bne.n	8004328 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	4313      	orrs	r3, r2
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0307 	bic.w	r3, r3, #7
 800433e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	2b04      	cmp	r3, #4
 8004350:	d117      	bne.n	8004382 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00e      	beq.n	8004382 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fa6f 	bl	8004848 <DMA_CheckFifoParam>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2240      	movs	r2, #64	@ 0x40
 8004374:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800437e:	2301      	movs	r3, #1
 8004380:	e016      	b.n	80043b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa26 	bl	80047dc <DMA_CalcBaseAndBitshift>
 8004390:	4603      	mov	r3, r0
 8004392:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004398:	223f      	movs	r2, #63	@ 0x3f
 800439a:	409a      	lsls	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	f010803f 	.word	0xf010803f

080043bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_DMA_Start_IT+0x26>
 80043de:	2302      	movs	r3, #2
 80043e0:	e040      	b.n	8004464 <HAL_DMA_Start_IT+0xa8>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d12f      	bne.n	8004456 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f9b8 	bl	8004780 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004414:	223f      	movs	r2, #63	@ 0x3f
 8004416:	409a      	lsls	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0216 	orr.w	r2, r2, #22
 800442a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0208 	orr.w	r2, r2, #8
 8004442:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e005      	b.n	8004462 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800445e:	2302      	movs	r3, #2
 8004460:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004462:	7dfb      	ldrb	r3, [r7, #23]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004478:	4b8e      	ldr	r3, [pc, #568]	@ (80046b4 <HAL_DMA_IRQHandler+0x248>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a8e      	ldr	r2, [pc, #568]	@ (80046b8 <HAL_DMA_IRQHandler+0x24c>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0a9b      	lsrs	r3, r3, #10
 8004484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004496:	2208      	movs	r2, #8
 8004498:	409a      	lsls	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01a      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d013      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0204 	bic.w	r2, r2, #4
 80044be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c4:	2208      	movs	r2, #8
 80044c6:	409a      	lsls	r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044dc:	2201      	movs	r2, #1
 80044de:	409a      	lsls	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d012      	beq.n	800450e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fa:	2201      	movs	r2, #1
 80044fc:	409a      	lsls	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	f043 0202 	orr.w	r2, r3, #2
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004512:	2204      	movs	r2, #4
 8004514:	409a      	lsls	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d012      	beq.n	8004544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00b      	beq.n	8004544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004530:	2204      	movs	r2, #4
 8004532:	409a      	lsls	r2, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453c:	f043 0204 	orr.w	r2, r3, #4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004548:	2210      	movs	r2, #16
 800454a:	409a      	lsls	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d043      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d03c      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004566:	2210      	movs	r2, #16
 8004568:	409a      	lsls	r2, r3
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d018      	beq.n	80045ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d024      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
 800459a:	e01f      	b.n	80045dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4798      	blx	r3
 80045ac:	e016      	b.n	80045dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0208 	bic.w	r2, r2, #8
 80045ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e0:	2220      	movs	r2, #32
 80045e2:	409a      	lsls	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 808f 	beq.w	800470c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8087 	beq.w	800470c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004602:	2220      	movs	r2, #32
 8004604:	409a      	lsls	r2, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b05      	cmp	r3, #5
 8004614:	d136      	bne.n	8004684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0216 	bic.w	r2, r2, #22
 8004624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <HAL_DMA_IRQHandler+0x1da>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0208 	bic.w	r2, r2, #8
 8004654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465a:	223f      	movs	r2, #63	@ 0x3f
 800465c:	409a      	lsls	r2, r3
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004676:	2b00      	cmp	r3, #0
 8004678:	d07e      	beq.n	8004778 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
        }
        return;
 8004682:	e079      	b.n	8004778 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01d      	beq.n	80046ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d031      	beq.n	800470c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
 80046b0:	e02c      	b.n	800470c <HAL_DMA_IRQHandler+0x2a0>
 80046b2:	bf00      	nop
 80046b4:	2000000c 	.word	0x2000000c
 80046b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d023      	beq.n	800470c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	4798      	blx	r3
 80046cc:	e01e      	b.n	800470c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10f      	bne.n	80046fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0210 	bic.w	r2, r2, #16
 80046ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004710:	2b00      	cmp	r3, #0
 8004712:	d032      	beq.n	800477a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d022      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2205      	movs	r2, #5
 8004724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	3301      	adds	r3, #1
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	429a      	cmp	r2, r3
 8004742:	d307      	bcc.n	8004754 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f2      	bne.n	8004738 <HAL_DMA_IRQHandler+0x2cc>
 8004752:	e000      	b.n	8004756 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004754:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
 8004776:	e000      	b.n	800477a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004778:	bf00      	nop
    }
  }
}
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800479c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b40      	cmp	r3, #64	@ 0x40
 80047ac:	d108      	bne.n	80047c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047be:	e007      	b.n	80047d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3b10      	subs	r3, #16
 80047ec:	4a14      	ldr	r2, [pc, #80]	@ (8004840 <DMA_CalcBaseAndBitshift+0x64>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047f6:	4a13      	ldr	r2, [pc, #76]	@ (8004844 <DMA_CalcBaseAndBitshift+0x68>)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d909      	bls.n	800481e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	1d1a      	adds	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	659a      	str	r2, [r3, #88]	@ 0x58
 800481c:	e007      	b.n	800482e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	aaaaaaab 	.word	0xaaaaaaab
 8004844:	080110c8 	.word	0x080110c8

08004848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d11f      	bne.n	80048a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d856      	bhi.n	8004916 <DMA_CheckFifoParam+0xce>
 8004868:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <DMA_CheckFifoParam+0x28>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004881 	.word	0x08004881
 8004874:	08004893 	.word	0x08004893
 8004878:	08004881 	.word	0x08004881
 800487c:	08004917 	.word	0x08004917
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d046      	beq.n	800491a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e043      	b.n	800491a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800489a:	d140      	bne.n	800491e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a0:	e03d      	b.n	800491e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048aa:	d121      	bne.n	80048f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d837      	bhi.n	8004922 <DMA_CheckFifoParam+0xda>
 80048b2:	a201      	add	r2, pc, #4	@ (adr r2, 80048b8 <DMA_CheckFifoParam+0x70>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048cf 	.word	0x080048cf
 80048c0:	080048c9 	.word	0x080048c9
 80048c4:	080048e1 	.word	0x080048e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      break;
 80048cc:	e030      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d025      	beq.n	8004926 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048de:	e022      	b.n	8004926 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048e8:	d11f      	bne.n	800492a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048ee:	e01c      	b.n	800492a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d903      	bls.n	80048fe <DMA_CheckFifoParam+0xb6>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d003      	beq.n	8004904 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048fc:	e018      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
      break;
 8004902:	e015      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	e00b      	b.n	800492e <DMA_CheckFifoParam+0xe6>
      break;
 8004916:	bf00      	nop
 8004918:	e00a      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800491a:	bf00      	nop
 800491c:	e008      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800491e:	bf00      	nop
 8004920:	e006      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 8004922:	bf00      	nop
 8004924:	e004      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 8004926:	bf00      	nop
 8004928:	e002      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;   
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800492e:	bf00      	nop
    }
  } 
  
  return status; 
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	@ 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e165      	b.n	8004c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800495c:	2201      	movs	r2, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	429a      	cmp	r2, r3
 8004976:	f040 8154 	bne.w	8004c22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d005      	beq.n	8004992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800498e:	2b02      	cmp	r3, #2
 8004990:	d130      	bne.n	80049f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	2203      	movs	r2, #3
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049c8:	2201      	movs	r2, #1
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 0201 	and.w	r2, r3, #1
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d017      	beq.n	8004a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d123      	bne.n	8004a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	08da      	lsrs	r2, r3, #3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3208      	adds	r2, #8
 8004a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	220f      	movs	r2, #15
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	08da      	lsrs	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3208      	adds	r2, #8
 8004a7e:	69b9      	ldr	r1, [r7, #24]
 8004a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	2203      	movs	r2, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0203 	and.w	r2, r3, #3
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80ae 	beq.w	8004c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	4b5d      	ldr	r3, [pc, #372]	@ (8004c40 <HAL_GPIO_Init+0x300>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ace:	4a5c      	ldr	r2, [pc, #368]	@ (8004c40 <HAL_GPIO_Init+0x300>)
 8004ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8004c40 <HAL_GPIO_Init+0x300>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ae2:	4a58      	ldr	r2, [pc, #352]	@ (8004c44 <HAL_GPIO_Init+0x304>)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	089b      	lsrs	r3, r3, #2
 8004ae8:	3302      	adds	r3, #2
 8004aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	220f      	movs	r2, #15
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a4f      	ldr	r2, [pc, #316]	@ (8004c48 <HAL_GPIO_Init+0x308>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d025      	beq.n	8004b5a <HAL_GPIO_Init+0x21a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a4e      	ldr	r2, [pc, #312]	@ (8004c4c <HAL_GPIO_Init+0x30c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01f      	beq.n	8004b56 <HAL_GPIO_Init+0x216>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a4d      	ldr	r2, [pc, #308]	@ (8004c50 <HAL_GPIO_Init+0x310>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d019      	beq.n	8004b52 <HAL_GPIO_Init+0x212>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a4c      	ldr	r2, [pc, #304]	@ (8004c54 <HAL_GPIO_Init+0x314>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_GPIO_Init+0x20e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a4b      	ldr	r2, [pc, #300]	@ (8004c58 <HAL_GPIO_Init+0x318>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00d      	beq.n	8004b4a <HAL_GPIO_Init+0x20a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a4a      	ldr	r2, [pc, #296]	@ (8004c5c <HAL_GPIO_Init+0x31c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <HAL_GPIO_Init+0x206>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a49      	ldr	r2, [pc, #292]	@ (8004c60 <HAL_GPIO_Init+0x320>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d101      	bne.n	8004b42 <HAL_GPIO_Init+0x202>
 8004b3e:	2306      	movs	r3, #6
 8004b40:	e00c      	b.n	8004b5c <HAL_GPIO_Init+0x21c>
 8004b42:	2307      	movs	r3, #7
 8004b44:	e00a      	b.n	8004b5c <HAL_GPIO_Init+0x21c>
 8004b46:	2305      	movs	r3, #5
 8004b48:	e008      	b.n	8004b5c <HAL_GPIO_Init+0x21c>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	e006      	b.n	8004b5c <HAL_GPIO_Init+0x21c>
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e004      	b.n	8004b5c <HAL_GPIO_Init+0x21c>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e002      	b.n	8004b5c <HAL_GPIO_Init+0x21c>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <HAL_GPIO_Init+0x21c>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	f002 0203 	and.w	r2, r2, #3
 8004b62:	0092      	lsls	r2, r2, #2
 8004b64:	4093      	lsls	r3, r2
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b6c:	4935      	ldr	r1, [pc, #212]	@ (8004c44 <HAL_GPIO_Init+0x304>)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	089b      	lsrs	r3, r3, #2
 8004b72:	3302      	adds	r3, #2
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c64 <HAL_GPIO_Init+0x324>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	43db      	mvns	r3, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4013      	ands	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b9e:	4a31      	ldr	r2, [pc, #196]	@ (8004c64 <HAL_GPIO_Init+0x324>)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c64 <HAL_GPIO_Init+0x324>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bc8:	4a26      	ldr	r2, [pc, #152]	@ (8004c64 <HAL_GPIO_Init+0x324>)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bce:	4b25      	ldr	r3, [pc, #148]	@ (8004c64 <HAL_GPIO_Init+0x324>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <HAL_GPIO_Init+0x324>)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c64 <HAL_GPIO_Init+0x324>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c1c:	4a11      	ldr	r2, [pc, #68]	@ (8004c64 <HAL_GPIO_Init+0x324>)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3301      	adds	r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	f67f ae96 	bls.w	800495c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	3724      	adds	r7, #36	@ 0x24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	40013800 	.word	0x40013800
 8004c48:	40020000 	.word	0x40020000
 8004c4c:	40020400 	.word	0x40020400
 8004c50:	40020800 	.word	0x40020800
 8004c54:	40020c00 	.word	0x40020c00
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40021400 	.word	0x40021400
 8004c60:	40021800 	.word	0x40021800
 8004c64:	40013c00 	.word	0x40013c00

08004c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	887b      	ldrh	r3, [r7, #2]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
 8004c84:	e001      	b.n	8004c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	807b      	strh	r3, [r7, #2]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ca8:	787b      	ldrb	r3, [r7, #1]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cb4:	e003      	b.n	8004cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cb6:	887b      	ldrh	r3, [r7, #2]
 8004cb8:	041a      	lsls	r2, r3, #16
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	619a      	str	r2, [r3, #24]
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004cd6:	4b08      	ldr	r3, [pc, #32]	@ (8004cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d006      	beq.n	8004cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ce2:	4a05      	ldr	r2, [pc, #20]	@ (8004cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ce4:	88fb      	ldrh	r3, [r7, #6]
 8004ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe f91c 	bl	8002f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40013c00 	.word	0x40013c00

08004cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0cc      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b68      	ldr	r3, [pc, #416]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d90c      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b65      	ldr	r3, [pc, #404]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b63      	ldr	r3, [pc, #396]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0b8      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d50:	4b59      	ldr	r3, [pc, #356]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a58      	ldr	r2, [pc, #352]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d68:	4b53      	ldr	r3, [pc, #332]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a52      	ldr	r2, [pc, #328]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d74:	4b50      	ldr	r3, [pc, #320]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	494d      	ldr	r1, [pc, #308]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d044      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d119      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dba:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e06f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dca:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e067      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dda:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 0203 	bic.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4934      	ldr	r1, [pc, #208]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dec:	f7ff f8f6 	bl	8003fdc <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	e00a      	b.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df4:	f7ff f8f2 	bl	8003fdc <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e04f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 020c 	and.w	r2, r3, #12
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d1eb      	bne.n	8004df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b25      	ldr	r3, [pc, #148]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d20c      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b22      	ldr	r3, [pc, #136]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b20      	ldr	r3, [pc, #128]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e032      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e50:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4916      	ldr	r1, [pc, #88]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6e:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	490e      	ldr	r1, [pc, #56]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e82:	f000 f855 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8004e86:	4602      	mov	r2, r0
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	490a      	ldr	r1, [pc, #40]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	5ccb      	ldrb	r3, [r1, r3]
 8004e96:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9a:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff f856 	bl	8003f54 <HAL_InitTick>

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023c00 	.word	0x40023c00
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	080110b0 	.word	0x080110b0
 8004ec0:	2000000c 	.word	0x2000000c
 8004ec4:	20000010 	.word	0x20000010

08004ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ecc:	4b03      	ldr	r3, [pc, #12]	@ (8004edc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ece:	681b      	ldr	r3, [r3, #0]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	2000000c 	.word	0x2000000c

08004ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ee4:	f7ff fff0 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	0a9b      	lsrs	r3, r3, #10
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4903      	ldr	r1, [pc, #12]	@ (8004f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef6:	5ccb      	ldrb	r3, [r1, r3]
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40023800 	.word	0x40023800
 8004f04:	080110c0 	.word	0x080110c0

08004f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f0c:	f7ff ffdc 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0b5b      	lsrs	r3, r3, #13
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4903      	ldr	r1, [pc, #12]	@ (8004f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	080110c0 	.word	0x080110c0

08004f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f34:	b0a6      	sub	sp, #152	@ 0x98
 8004f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f56:	4bc8      	ldr	r3, [pc, #800]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	f200 817e 	bhi.w	8005260 <HAL_RCC_GetSysClockFreq+0x330>
 8004f64:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08005261 	.word	0x08005261
 8004f74:	08005261 	.word	0x08005261
 8004f78:	08005261 	.word	0x08005261
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08005261 	.word	0x08005261
 8004f84:	08005261 	.word	0x08005261
 8004f88:	08005261 	.word	0x08005261
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08005261 	.word	0x08005261
 8004f94:	08005261 	.word	0x08005261
 8004f98:	08005261 	.word	0x08005261
 8004f9c:	0800511b 	.word	0x0800511b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4bb6      	ldr	r3, [pc, #728]	@ (800527c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004fa6:	e15f      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa8:	4bb5      	ldr	r3, [pc, #724]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x350>)
 8004faa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004fae:	e15b      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb0:	4bb1      	ldr	r3, [pc, #708]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fbc:	4bae      	ldr	r3, [pc, #696]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d031      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc8:	4bab      	ldr	r3, [pc, #684]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	099b      	lsrs	r3, r3, #6
 8004fce:	2200      	movs	r2, #0
 8004fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fdc:	2300      	movs	r3, #0
 8004fde:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fe0:	4ba7      	ldr	r3, [pc, #668]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x350>)
 8004fe2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004fe6:	462a      	mov	r2, r5
 8004fe8:	fb03 f202 	mul.w	r2, r3, r2
 8004fec:	2300      	movs	r3, #0
 8004fee:	4621      	mov	r1, r4
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4aa2      	ldr	r2, [pc, #648]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	fba1 1202 	umull	r1, r2, r1, r2
 8004ffe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005000:	460a      	mov	r2, r1
 8005002:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005004:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005006:	4413      	add	r3, r2
 8005008:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800500a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800500e:	2200      	movs	r2, #0
 8005010:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005012:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005014:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005018:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800501c:	f7fb fea4 	bl	8000d68 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800502a:	e064      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502c:	4b92      	ldr	r3, [pc, #584]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	099b      	lsrs	r3, r3, #6
 8005032:	2200      	movs	r2, #0
 8005034:	653b      	str	r3, [r7, #80]	@ 0x50
 8005036:	657a      	str	r2, [r7, #84]	@ 0x54
 8005038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800503a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005040:	2300      	movs	r3, #0
 8005042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005044:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005048:	4622      	mov	r2, r4
 800504a:	462b      	mov	r3, r5
 800504c:	f04f 0000 	mov.w	r0, #0
 8005050:	f04f 0100 	mov.w	r1, #0
 8005054:	0159      	lsls	r1, r3, #5
 8005056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800505a:	0150      	lsls	r0, r2, #5
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4621      	mov	r1, r4
 8005062:	1a51      	subs	r1, r2, r1
 8005064:	6139      	str	r1, [r7, #16]
 8005066:	4629      	mov	r1, r5
 8005068:	eb63 0301 	sbc.w	r3, r3, r1
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800507a:	4659      	mov	r1, fp
 800507c:	018b      	lsls	r3, r1, #6
 800507e:	4651      	mov	r1, sl
 8005080:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005084:	4651      	mov	r1, sl
 8005086:	018a      	lsls	r2, r1, #6
 8005088:	4651      	mov	r1, sl
 800508a:	ebb2 0801 	subs.w	r8, r2, r1
 800508e:	4659      	mov	r1, fp
 8005090:	eb63 0901 	sbc.w	r9, r3, r1
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050a8:	4690      	mov	r8, r2
 80050aa:	4699      	mov	r9, r3
 80050ac:	4623      	mov	r3, r4
 80050ae:	eb18 0303 	adds.w	r3, r8, r3
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	462b      	mov	r3, r5
 80050b6:	eb49 0303 	adc.w	r3, r9, r3
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050c8:	4629      	mov	r1, r5
 80050ca:	028b      	lsls	r3, r1, #10
 80050cc:	4621      	mov	r1, r4
 80050ce:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050d2:	4621      	mov	r1, r4
 80050d4:	028a      	lsls	r2, r1, #10
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050de:	2200      	movs	r2, #0
 80050e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050e8:	f7fb fe3e 	bl	8000d68 <__aeabi_uldivmod>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4613      	mov	r3, r2
 80050f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050f6:	4b60      	ldr	r3, [pc, #384]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	0c1b      	lsrs	r3, r3, #16
 80050fc:	f003 0303 	and.w	r3, r3, #3
 8005100:	3301      	adds	r3, #1
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005108:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800510c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005118:	e0a6      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800511a:	4b57      	ldr	r3, [pc, #348]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005126:	4b54      	ldr	r3, [pc, #336]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d02a      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005132:	4b51      	ldr	r3, [pc, #324]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	099b      	lsrs	r3, r3, #6
 8005138:	2200      	movs	r2, #0
 800513a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800513c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005144:	2100      	movs	r1, #0
 8005146:	4b4e      	ldr	r3, [pc, #312]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x350>)
 8005148:	fb03 f201 	mul.w	r2, r3, r1
 800514c:	2300      	movs	r3, #0
 800514e:	fb00 f303 	mul.w	r3, r0, r3
 8005152:	4413      	add	r3, r2
 8005154:	4a4a      	ldr	r2, [pc, #296]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x350>)
 8005156:	fba0 1202 	umull	r1, r2, r0, r2
 800515a:	677a      	str	r2, [r7, #116]	@ 0x74
 800515c:	460a      	mov	r2, r1
 800515e:	673a      	str	r2, [r7, #112]	@ 0x70
 8005160:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005162:	4413      	add	r3, r2
 8005164:	677b      	str	r3, [r7, #116]	@ 0x74
 8005166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800516a:	2200      	movs	r2, #0
 800516c:	633b      	str	r3, [r7, #48]	@ 0x30
 800516e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005170:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005174:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005178:	f7fb fdf6 	bl	8000d68 <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4613      	mov	r3, r2
 8005182:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005186:	e05b      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005188:	4b3b      	ldr	r3, [pc, #236]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	099b      	lsrs	r3, r3, #6
 800518e:	2200      	movs	r2, #0
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	2300      	movs	r3, #0
 800519e:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051a4:	4642      	mov	r2, r8
 80051a6:	464b      	mov	r3, r9
 80051a8:	f04f 0000 	mov.w	r0, #0
 80051ac:	f04f 0100 	mov.w	r1, #0
 80051b0:	0159      	lsls	r1, r3, #5
 80051b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051b6:	0150      	lsls	r0, r2, #5
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4641      	mov	r1, r8
 80051be:	ebb2 0a01 	subs.w	sl, r2, r1
 80051c2:	4649      	mov	r1, r9
 80051c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051dc:	ebb2 040a 	subs.w	r4, r2, sl
 80051e0:	eb63 050b 	sbc.w	r5, r3, fp
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	00eb      	lsls	r3, r5, #3
 80051ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f2:	00e2      	lsls	r2, r4, #3
 80051f4:	4614      	mov	r4, r2
 80051f6:	461d      	mov	r5, r3
 80051f8:	4643      	mov	r3, r8
 80051fa:	18e3      	adds	r3, r4, r3
 80051fc:	603b      	str	r3, [r7, #0]
 80051fe:	464b      	mov	r3, r9
 8005200:	eb45 0303 	adc.w	r3, r5, r3
 8005204:	607b      	str	r3, [r7, #4]
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005212:	4629      	mov	r1, r5
 8005214:	028b      	lsls	r3, r1, #10
 8005216:	4621      	mov	r1, r4
 8005218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800521c:	4621      	mov	r1, r4
 800521e:	028a      	lsls	r2, r1, #10
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005228:	2200      	movs	r2, #0
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	61fa      	str	r2, [r7, #28]
 800522e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005232:	f7fb fd99 	bl	8000d68 <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4613      	mov	r3, r2
 800523c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005240:	4b0d      	ldr	r3, [pc, #52]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x348>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	0f1b      	lsrs	r3, r3, #28
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800524e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005252:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800525e:	e003      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005260:	4b06      	ldr	r3, [pc, #24]	@ (800527c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005266:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005268:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800526c:	4618      	mov	r0, r3
 800526e:	3798      	adds	r7, #152	@ 0x98
 8005270:	46bd      	mov	sp, r7
 8005272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005276:	bf00      	nop
 8005278:	40023800 	.word	0x40023800
 800527c:	00f42400 	.word	0x00f42400
 8005280:	017d7840 	.word	0x017d7840

08005284 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e28d      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8083 	beq.w	80053aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052a4:	4b94      	ldr	r3, [pc, #592]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 030c 	and.w	r3, r3, #12
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d019      	beq.n	80052e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052b0:	4b91      	ldr	r3, [pc, #580]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d106      	bne.n	80052ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052bc:	4b8e      	ldr	r3, [pc, #568]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052c8:	d00c      	beq.n	80052e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ca:	4b8b      	ldr	r3, [pc, #556]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052d2:	2b0c      	cmp	r3, #12
 80052d4:	d112      	bne.n	80052fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052d6:	4b88      	ldr	r3, [pc, #544]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052e2:	d10b      	bne.n	80052fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e4:	4b84      	ldr	r3, [pc, #528]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d05b      	beq.n	80053a8 <HAL_RCC_OscConfig+0x124>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d157      	bne.n	80053a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e25a      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005304:	d106      	bne.n	8005314 <HAL_RCC_OscConfig+0x90>
 8005306:	4b7c      	ldr	r3, [pc, #496]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a7b      	ldr	r2, [pc, #492]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e01d      	b.n	8005350 <HAL_RCC_OscConfig+0xcc>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800531c:	d10c      	bne.n	8005338 <HAL_RCC_OscConfig+0xb4>
 800531e:	4b76      	ldr	r3, [pc, #472]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a75      	ldr	r2, [pc, #468]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 8005324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	4b73      	ldr	r3, [pc, #460]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a72      	ldr	r2, [pc, #456]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e00b      	b.n	8005350 <HAL_RCC_OscConfig+0xcc>
 8005338:	4b6f      	ldr	r3, [pc, #444]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6e      	ldr	r2, [pc, #440]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800533e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	4b6c      	ldr	r3, [pc, #432]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a6b      	ldr	r2, [pc, #428]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800534a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800534e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d013      	beq.n	8005380 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fe fe40 	bl	8003fdc <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005360:	f7fe fe3c 	bl	8003fdc <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	@ 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e21f      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005372:	4b61      	ldr	r3, [pc, #388]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0xdc>
 800537e:	e014      	b.n	80053aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fe fe2c 	bl	8003fdc <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005388:	f7fe fe28 	bl	8003fdc <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	@ 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e20b      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800539a:	4b57      	ldr	r3, [pc, #348]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x104>
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d06f      	beq.n	8005496 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053b6:	4b50      	ldr	r3, [pc, #320]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d017      	beq.n	80053f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053c2:	4b4d      	ldr	r3, [pc, #308]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d105      	bne.n	80053da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053ce:	4b4a      	ldr	r3, [pc, #296]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053da:	4b47      	ldr	r3, [pc, #284]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d11c      	bne.n	8005420 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053e6:	4b44      	ldr	r3, [pc, #272]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d116      	bne.n	8005420 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f2:	4b41      	ldr	r3, [pc, #260]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <HAL_RCC_OscConfig+0x186>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d001      	beq.n	800540a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e1d3      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540a:	4b3b      	ldr	r3, [pc, #236]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4937      	ldr	r1, [pc, #220]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800541e:	e03a      	b.n	8005496 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d020      	beq.n	800546a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005428:	4b34      	ldr	r3, [pc, #208]	@ (80054fc <HAL_RCC_OscConfig+0x278>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fe fdd5 	bl	8003fdc <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005436:	f7fe fdd1 	bl	8003fdc <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e1b4      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005448:	4b2b      	ldr	r3, [pc, #172]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005454:	4b28      	ldr	r3, [pc, #160]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4925      	ldr	r1, [pc, #148]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]
 8005468:	e015      	b.n	8005496 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546a:	4b24      	ldr	r3, [pc, #144]	@ (80054fc <HAL_RCC_OscConfig+0x278>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fe fdb4 	bl	8003fdc <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005478:	f7fe fdb0 	bl	8003fdc <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e193      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548a:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d036      	beq.n	8005510 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d016      	beq.n	80054d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054aa:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <HAL_RCC_OscConfig+0x27c>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fe fd94 	bl	8003fdc <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b8:	f7fe fd90 	bl	8003fdc <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e173      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ca:	4b0b      	ldr	r3, [pc, #44]	@ (80054f8 <HAL_RCC_OscConfig+0x274>)
 80054cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x234>
 80054d6:	e01b      	b.n	8005510 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054d8:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <HAL_RCC_OscConfig+0x27c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054de:	f7fe fd7d 	bl	8003fdc <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e4:	e00e      	b.n	8005504 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e6:	f7fe fd79 	bl	8003fdc <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d907      	bls.n	8005504 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e15c      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
 80054f8:	40023800 	.word	0x40023800
 80054fc:	42470000 	.word	0x42470000
 8005500:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005504:	4b8a      	ldr	r3, [pc, #552]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1ea      	bne.n	80054e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8097 	beq.w	800564c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800551e:	2300      	movs	r3, #0
 8005520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005522:	4b83      	ldr	r3, [pc, #524]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10f      	bne.n	800554e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	4b7f      	ldr	r3, [pc, #508]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	4a7e      	ldr	r2, [pc, #504]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800553c:	6413      	str	r3, [r2, #64]	@ 0x40
 800553e:	4b7c      	ldr	r3, [pc, #496]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005546:	60bb      	str	r3, [r7, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554a:	2301      	movs	r3, #1
 800554c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554e:	4b79      	ldr	r3, [pc, #484]	@ (8005734 <HAL_RCC_OscConfig+0x4b0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d118      	bne.n	800558c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800555a:	4b76      	ldr	r3, [pc, #472]	@ (8005734 <HAL_RCC_OscConfig+0x4b0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a75      	ldr	r2, [pc, #468]	@ (8005734 <HAL_RCC_OscConfig+0x4b0>)
 8005560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005566:	f7fe fd39 	bl	8003fdc <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556e:	f7fe fd35 	bl	8003fdc <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e118      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005580:	4b6c      	ldr	r3, [pc, #432]	@ (8005734 <HAL_RCC_OscConfig+0x4b0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d106      	bne.n	80055a2 <HAL_RCC_OscConfig+0x31e>
 8005594:	4b66      	ldr	r3, [pc, #408]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005598:	4a65      	ldr	r2, [pc, #404]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	@ 0x70
 80055a0:	e01c      	b.n	80055dc <HAL_RCC_OscConfig+0x358>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCC_OscConfig+0x340>
 80055aa:	4b61      	ldr	r3, [pc, #388]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ae:	4a60      	ldr	r2, [pc, #384]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80055b0:	f043 0304 	orr.w	r3, r3, #4
 80055b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ba:	4a5d      	ldr	r2, [pc, #372]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c2:	e00b      	b.n	80055dc <HAL_RCC_OscConfig+0x358>
 80055c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c8:	4a59      	ldr	r2, [pc, #356]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d0:	4b57      	ldr	r3, [pc, #348]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d4:	4a56      	ldr	r2, [pc, #344]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80055d6:	f023 0304 	bic.w	r3, r3, #4
 80055da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d015      	beq.n	8005610 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e4:	f7fe fcfa 	bl	8003fdc <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ea:	e00a      	b.n	8005602 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ec:	f7fe fcf6 	bl	8003fdc <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0d7      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005602:	4b4b      	ldr	r3, [pc, #300]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0ee      	beq.n	80055ec <HAL_RCC_OscConfig+0x368>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005610:	f7fe fce4 	bl	8003fdc <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005616:	e00a      	b.n	800562e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005618:	f7fe fce0 	bl	8003fdc <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e0c1      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562e:	4b40      	ldr	r3, [pc, #256]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ee      	bne.n	8005618 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d105      	bne.n	800564c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005640:	4b3b      	ldr	r3, [pc, #236]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005644:	4a3a      	ldr	r2, [pc, #232]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800564a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80ad 	beq.w	80057b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005656:	4b36      	ldr	r3, [pc, #216]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b08      	cmp	r3, #8
 8005660:	d060      	beq.n	8005724 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d145      	bne.n	80056f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566a:	4b33      	ldr	r3, [pc, #204]	@ (8005738 <HAL_RCC_OscConfig+0x4b4>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fe fcb4 	bl	8003fdc <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005678:	f7fe fcb0 	bl	8003fdc <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e093      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568a:	4b29      	ldr	r3, [pc, #164]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69da      	ldr	r2, [r3, #28]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	3b01      	subs	r3, #1
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c0:	071b      	lsls	r3, r3, #28
 80056c2:	491b      	ldr	r1, [pc, #108]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005738 <HAL_RCC_OscConfig+0x4b4>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ce:	f7fe fc85 	bl	8003fdc <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fe fc81 	bl	8003fdc <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e064      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e8:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0f0      	beq.n	80056d6 <HAL_RCC_OscConfig+0x452>
 80056f4:	e05c      	b.n	80057b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f6:	4b10      	ldr	r3, [pc, #64]	@ (8005738 <HAL_RCC_OscConfig+0x4b4>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fc:	f7fe fc6e 	bl	8003fdc <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005704:	f7fe fc6a 	bl	8003fdc <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e04d      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005716:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <HAL_RCC_OscConfig+0x4ac>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x480>
 8005722:	e045      	b.n	80057b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d107      	bne.n	800573c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e040      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
 8005730:	40023800 	.word	0x40023800
 8005734:	40007000 	.word	0x40007000
 8005738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800573c:	4b1f      	ldr	r3, [pc, #124]	@ (80057bc <HAL_RCC_OscConfig+0x538>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d030      	beq.n	80057ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005754:	429a      	cmp	r2, r3
 8005756:	d129      	bne.n	80057ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d122      	bne.n	80057ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800576c:	4013      	ands	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005774:	4293      	cmp	r3, r2
 8005776:	d119      	bne.n	80057ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	3b01      	subs	r3, #1
 8005786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005788:	429a      	cmp	r2, r3
 800578a:	d10f      	bne.n	80057ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005798:	429a      	cmp	r2, r3
 800579a:	d107      	bne.n	80057ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d001      	beq.n	80057b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800

080057c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e07b      	b.n	80058ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d108      	bne.n	80057ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057e2:	d009      	beq.n	80057f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	61da      	str	r2, [r3, #28]
 80057ea:	e005      	b.n	80057f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fd ff5a 	bl	80036cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800582e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587c:	ea42 0103 	orr.w	r1, r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	f003 0104 	and.w	r1, r3, #4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	f003 0210 	and.w	r2, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b088      	sub	sp, #32
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058e2:	f7fe fb7b 	bl	8003fdc <HAL_GetTick>
 80058e6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
 80058fa:	e12a      	b.n	8005b52 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_SPI_Transmit+0x36>
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e122      	b.n	8005b52 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_SPI_Transmit+0x48>
 8005916:	2302      	movs	r3, #2
 8005918:	e11b      	b.n	8005b52 <HAL_SPI_Transmit+0x280>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2203      	movs	r2, #3
 8005926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005968:	d10f      	bne.n	800598a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005978:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005988:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005994:	2b40      	cmp	r3, #64	@ 0x40
 8005996:	d007      	beq.n	80059a8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059b0:	d152      	bne.n	8005a58 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_SPI_Transmit+0xee>
 80059ba:	8b7b      	ldrh	r3, [r7, #26]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d145      	bne.n	8005a4c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c4:	881a      	ldrh	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d0:	1c9a      	adds	r2, r3, #2
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059e4:	e032      	b.n	8005a4c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d112      	bne.n	8005a1a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f8:	881a      	ldrh	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a04:	1c9a      	adds	r2, r3, #2
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a18:	e018      	b.n	8005a4c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1a:	f7fe fadf 	bl	8003fdc <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d803      	bhi.n	8005a32 <HAL_SPI_Transmit+0x160>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d102      	bne.n	8005a38 <HAL_SPI_Transmit+0x166>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d109      	bne.n	8005a4c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e082      	b.n	8005b52 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1c7      	bne.n	80059e6 <HAL_SPI_Transmit+0x114>
 8005a56:	e053      	b.n	8005b00 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_SPI_Transmit+0x194>
 8005a60:	8b7b      	ldrh	r3, [r7, #26]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d147      	bne.n	8005af6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	7812      	ldrb	r2, [r2, #0]
 8005a72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a8c:	e033      	b.n	8005af6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d113      	bne.n	8005ac4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	7812      	ldrb	r2, [r2, #0]
 8005aa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ac2:	e018      	b.n	8005af6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ac4:	f7fe fa8a 	bl	8003fdc <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d803      	bhi.n	8005adc <HAL_SPI_Transmit+0x20a>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d102      	bne.n	8005ae2 <HAL_SPI_Transmit+0x210>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e02d      	b.n	8005b52 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1c6      	bne.n	8005a8e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fd21 	bl	800654c <SPI_EndRxTxTransaction>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b50:	2300      	movs	r3, #0
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b088      	sub	sp, #32
 8005b5e:	af02      	add	r7, sp, #8
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005b76:	2302      	movs	r3, #2
 8005b78:	e104      	b.n	8005d84 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b82:	d112      	bne.n	8005baa <HAL_SPI_Receive+0x50>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10e      	bne.n	8005baa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2204      	movs	r2, #4
 8005b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f8f3 	bl	8005d8c <HAL_SPI_TransmitReceive>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	e0ec      	b.n	8005d84 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005baa:	f7fe fa17 	bl	8003fdc <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_SPI_Receive+0x62>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0e1      	b.n	8005d84 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_SPI_Receive+0x74>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e0da      	b.n	8005d84 <HAL_SPI_Receive+0x22a>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	88fa      	ldrh	r2, [r7, #6]
 8005bee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c1c:	d10f      	bne.n	8005c3e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b40      	cmp	r3, #64	@ 0x40
 8005c4a:	d007      	beq.n	8005c5c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d170      	bne.n	8005d46 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c64:	e035      	b.n	8005cd2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d115      	bne.n	8005ca0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f103 020c 	add.w	r2, r3, #12
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c9e:	e018      	b.n	8005cd2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ca0:	f7fe f99c 	bl	8003fdc <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d803      	bhi.n	8005cb8 <HAL_SPI_Receive+0x15e>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb6:	d102      	bne.n	8005cbe <HAL_SPI_Receive+0x164>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e058      	b.n	8005d84 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1c4      	bne.n	8005c66 <HAL_SPI_Receive+0x10c>
 8005cdc:	e038      	b.n	8005d50 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d113      	bne.n	8005d14 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf6:	b292      	uxth	r2, r2
 8005cf8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d12:	e018      	b.n	8005d46 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d14:	f7fe f962 	bl	8003fdc <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d803      	bhi.n	8005d2c <HAL_SPI_Receive+0x1d2>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d102      	bne.n	8005d32 <HAL_SPI_Receive+0x1d8>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e01e      	b.n	8005d84 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1c6      	bne.n	8005cde <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 fb93 	bl	8006480 <SPI_EndRxTransaction>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2220      	movs	r2, #32
 8005d64:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005d82:	2300      	movs	r3, #0
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	@ 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d9e:	f7fe f91d 	bl	8003fdc <HAL_GetTick>
 8005da2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005daa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005db2:	887b      	ldrh	r3, [r7, #2]
 8005db4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005db6:	7ffb      	ldrb	r3, [r7, #31]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d00c      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x4a>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dc2:	d106      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x46>
 8005dcc:	7ffb      	ldrb	r3, [r7, #31]
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	d001      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e17f      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x5c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x5c>
 8005de2:	887b      	ldrh	r3, [r7, #2]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e174      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x6e>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e16d      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x34a>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d003      	beq.n	8005e16 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2205      	movs	r2, #5
 8005e12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	887a      	ldrh	r2, [r7, #2]
 8005e26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	887a      	ldrh	r2, [r7, #2]
 8005e2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	887a      	ldrh	r2, [r7, #2]
 8005e38:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	887a      	ldrh	r2, [r7, #2]
 8005e3e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e56:	2b40      	cmp	r3, #64	@ 0x40
 8005e58:	d007      	beq.n	8005e6a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e72:	d17e      	bne.n	8005f72 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_SPI_TransmitReceive+0xf6>
 8005e7c:	8afb      	ldrh	r3, [r7, #22]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d16c      	bne.n	8005f5c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e92:	1c9a      	adds	r2, r3, #2
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ea6:	e059      	b.n	8005f5c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d11b      	bne.n	8005eee <HAL_SPI_TransmitReceive+0x162>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d016      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x162>
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d113      	bne.n	8005eee <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eca:	881a      	ldrh	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed6:	1c9a      	adds	r2, r3, #2
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d119      	bne.n	8005f30 <HAL_SPI_TransmitReceive+0x1a4>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d014      	beq.n	8005f30 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f10:	b292      	uxth	r2, r2
 8005f12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	1c9a      	adds	r2, r3, #2
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f30:	f7fe f854 	bl	8003fdc <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d80d      	bhi.n	8005f5c <HAL_SPI_TransmitReceive+0x1d0>
 8005f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d009      	beq.n	8005f5c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e0bc      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1a0      	bne.n	8005ea8 <HAL_SPI_TransmitReceive+0x11c>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d19b      	bne.n	8005ea8 <HAL_SPI_TransmitReceive+0x11c>
 8005f70:	e082      	b.n	8006078 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0x1f4>
 8005f7a:	8afb      	ldrh	r3, [r7, #22]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d171      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	7812      	ldrb	r2, [r2, #0]
 8005f8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa6:	e05d      	b.n	8006064 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d11c      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x264>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d017      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x264>
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d114      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	7812      	ldrb	r2, [r2, #0]
 8005fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d119      	bne.n	8006032 <HAL_SPI_TransmitReceive+0x2a6>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d014      	beq.n	8006032 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800602e:	2301      	movs	r3, #1
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006032:	f7fd ffd3 	bl	8003fdc <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603e:	429a      	cmp	r2, r3
 8006040:	d803      	bhi.n	800604a <HAL_SPI_TransmitReceive+0x2be>
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d102      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x2c4>
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e038      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d19c      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x21c>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d197      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 fa65 	bl	800654c <SPI_EndRxTxTransaction>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e01d      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060a2:	2300      	movs	r3, #0
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80060d4:	2300      	movs	r3, #0
  }
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3728      	adds	r7, #40	@ 0x28
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d001      	beq.n	80060fe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80060fa:	2302      	movs	r3, #2
 80060fc:	e097      	b.n	800622e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <HAL_SPI_Transmit_DMA+0x2a>
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e08f      	b.n	800622e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_SPI_Transmit_DMA+0x3c>
 8006118:	2302      	movs	r3, #2
 800611a:	e088      	b.n	800622e <HAL_SPI_Transmit_DMA+0x14e>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2203      	movs	r2, #3
 8006128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800616a:	d10f      	bne.n	800618c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800617a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800618a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006190:	4a29      	ldr	r2, [pc, #164]	@ (8006238 <HAL_SPI_Transmit_DMA+0x158>)
 8006192:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006198:	4a28      	ldr	r2, [pc, #160]	@ (800623c <HAL_SPI_Transmit_DMA+0x15c>)
 800619a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a0:	4a27      	ldr	r2, [pc, #156]	@ (8006240 <HAL_SPI_Transmit_DMA+0x160>)
 80061a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a8:	2200      	movs	r2, #0
 80061aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b4:	4619      	mov	r1, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061c4:	f7fe f8fa 	bl	80043bc <HAL_DMA_Start_IT>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d2:	f043 0210 	orr.w	r2, r3, #16
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e023      	b.n	800622e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	2b40      	cmp	r3, #64	@ 0x40
 80061f2:	d007      	beq.n	8006204 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006202:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0220 	orr.w	r2, r2, #32
 800621a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0202 	orr.w	r2, r2, #2
 800622a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	08006315 	.word	0x08006315
 800623c:	0800626d 	.word	0x0800626d
 8006240:	08006331 	.word	0x08006331

08006244 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006278:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800627a:	f7fd feaf 	bl	8003fdc <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800628e:	d03b      	beq.n	8006308 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0220 	bic.w	r2, r2, #32
 800629e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0202 	bic.w	r2, r2, #2
 80062ae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	2164      	movs	r1, #100	@ 0x64
 80062b4:	6978      	ldr	r0, [r7, #20]
 80062b6:	f000 f949 	bl	800654c <SPI_EndRxTxTransaction>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c4:	f043 0220 	orr.w	r2, r3, #32
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2200      	movs	r2, #0
 80062ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006300:	6978      	ldr	r0, [r7, #20]
 8006302:	f7ff ffa9 	bl	8006258 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006306:	e002      	b.n	800630e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006308:	6978      	ldr	r0, [r7, #20]
 800630a:	f7fa ffbb 	bl	8001284 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006320:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff ff8e 	bl	8006244 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0203 	bic.w	r2, r2, #3
 800634c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006352:	f043 0210 	orr.w	r2, r3, #16
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff ff78 	bl	8006258 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006380:	f7fd fe2c 	bl	8003fdc <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	4413      	add	r3, r2
 800638e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006390:	f7fd fe24 	bl	8003fdc <HAL_GetTick>
 8006394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006396:	4b39      	ldr	r3, [pc, #228]	@ (800647c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	015b      	lsls	r3, r3, #5
 800639c:	0d1b      	lsrs	r3, r3, #20
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	fb02 f303 	mul.w	r3, r2, r3
 80063a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a6:	e054      	b.n	8006452 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d050      	beq.n	8006452 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063b0:	f7fd fe14 	bl	8003fdc <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d902      	bls.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d13d      	bne.n	8006442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063de:	d111      	bne.n	8006404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063e8:	d004      	beq.n	80063f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f2:	d107      	bne.n	8006404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800640c:	d10f      	bne.n	800642e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800642c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e017      	b.n	8006472 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	3b01      	subs	r3, #1
 8006450:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4013      	ands	r3, r2
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	429a      	cmp	r2, r3
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	429a      	cmp	r2, r3
 800646e:	d19b      	bne.n	80063a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	2000000c 	.word	0x2000000c

08006480 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006494:	d111      	bne.n	80064ba <SPI_EndRxTransaction+0x3a>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800649e:	d004      	beq.n	80064aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a8:	d107      	bne.n	80064ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064c2:	d12a      	bne.n	800651a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064cc:	d012      	beq.n	80064f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	2180      	movs	r1, #128	@ 0x80
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f7ff ff49 	bl	8006370 <SPI_WaitFlagStateUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d02d      	beq.n	8006540 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e8:	f043 0220 	orr.w	r2, r3, #32
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e026      	b.n	8006542 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2200      	movs	r2, #0
 80064fc:	2101      	movs	r1, #1
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff ff36 	bl	8006370 <SPI_WaitFlagStateUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01a      	beq.n	8006540 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	f043 0220 	orr.w	r2, r3, #32
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e013      	b.n	8006542 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2200      	movs	r2, #0
 8006522:	2101      	movs	r1, #1
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff ff23 	bl	8006370 <SPI_WaitFlagStateUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006534:	f043 0220 	orr.w	r2, r3, #32
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e000      	b.n	8006542 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2201      	movs	r2, #1
 8006560:	2102      	movs	r1, #2
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7ff ff04 	bl	8006370 <SPI_WaitFlagStateUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d007      	beq.n	800657e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006572:	f043 0220 	orr.w	r2, r3, #32
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e032      	b.n	80065e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800657e:	4b1b      	ldr	r3, [pc, #108]	@ (80065ec <SPI_EndRxTxTransaction+0xa0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1b      	ldr	r2, [pc, #108]	@ (80065f0 <SPI_EndRxTxTransaction+0xa4>)
 8006584:	fba2 2303 	umull	r2, r3, r2, r3
 8006588:	0d5b      	lsrs	r3, r3, #21
 800658a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800659c:	d112      	bne.n	80065c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2200      	movs	r2, #0
 80065a6:	2180      	movs	r1, #128	@ 0x80
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff fee1 	bl	8006370 <SPI_WaitFlagStateUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d016      	beq.n	80065e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b8:	f043 0220 	orr.w	r2, r3, #32
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e00f      	b.n	80065e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065da:	2b80      	cmp	r3, #128	@ 0x80
 80065dc:	d0f2      	beq.n	80065c4 <SPI_EndRxTxTransaction+0x78>
 80065de:	e000      	b.n	80065e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80065e0:	bf00      	nop
  }

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	2000000c 	.word	0x2000000c
 80065f0:	165e9f81 	.word	0x165e9f81

080065f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e041      	b.n	800668a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fd fb82 	bl	8003d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3304      	adds	r3, #4
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f000 fb14 	bl	8006c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d001      	beq.n	80066ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e046      	b.n	800673a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a23      	ldr	r2, [pc, #140]	@ (8006748 <HAL_TIM_Base_Start+0xb4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d022      	beq.n	8006704 <HAL_TIM_Base_Start+0x70>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c6:	d01d      	beq.n	8006704 <HAL_TIM_Base_Start+0x70>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1f      	ldr	r2, [pc, #124]	@ (800674c <HAL_TIM_Base_Start+0xb8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d018      	beq.n	8006704 <HAL_TIM_Base_Start+0x70>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006750 <HAL_TIM_Base_Start+0xbc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <HAL_TIM_Base_Start+0x70>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006754 <HAL_TIM_Base_Start+0xc0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00e      	beq.n	8006704 <HAL_TIM_Base_Start+0x70>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006758 <HAL_TIM_Base_Start+0xc4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_TIM_Base_Start+0x70>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a19      	ldr	r2, [pc, #100]	@ (800675c <HAL_TIM_Base_Start+0xc8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_TIM_Base_Start+0x70>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a18      	ldr	r2, [pc, #96]	@ (8006760 <HAL_TIM_Base_Start+0xcc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d111      	bne.n	8006728 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b06      	cmp	r3, #6
 8006714:	d010      	beq.n	8006738 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0201 	orr.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006726:	e007      	b.n	8006738 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	40010000 	.word	0x40010000
 800674c:	40000400 	.word	0x40000400
 8006750:	40000800 	.word	0x40000800
 8006754:	40000c00 	.word	0x40000c00
 8006758:	40010400 	.word	0x40010400
 800675c:	40014000 	.word	0x40014000
 8006760:	40001800 	.word	0x40001800

08006764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	d001      	beq.n	800677c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e04e      	b.n	800681a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a23      	ldr	r2, [pc, #140]	@ (8006828 <HAL_TIM_Base_Start_IT+0xc4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d022      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x80>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a6:	d01d      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x80>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1f      	ldr	r2, [pc, #124]	@ (800682c <HAL_TIM_Base_Start_IT+0xc8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x80>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006830 <HAL_TIM_Base_Start_IT+0xcc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x80>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006834 <HAL_TIM_Base_Start_IT+0xd0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x80>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006838 <HAL_TIM_Base_Start_IT+0xd4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x80>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a19      	ldr	r2, [pc, #100]	@ (800683c <HAL_TIM_Base_Start_IT+0xd8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x80>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a18      	ldr	r2, [pc, #96]	@ (8006840 <HAL_TIM_Base_Start_IT+0xdc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d111      	bne.n	8006808 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b06      	cmp	r3, #6
 80067f4:	d010      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006806:	e007      	b.n	8006818 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800
 8006834:	40000c00 	.word	0x40000c00
 8006838:	40010400 	.word	0x40010400
 800683c:	40014000 	.word	0x40014000
 8006840:	40001800 	.word	0x40001800

08006844 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006866:	4013      	ands	r3, r2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10f      	bne.n	800688c <HAL_TIM_Base_Stop_IT+0x48>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	f240 4344 	movw	r3, #1092	@ 0x444
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d107      	bne.n	800688c <HAL_TIM_Base_Stop_IT+0x48>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d020      	beq.n	8006906 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01b      	beq.n	8006906 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f06f 0202 	mvn.w	r2, #2
 80068d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f999 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 80068f2:	e005      	b.n	8006900 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f98b 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f99c 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d01b      	beq.n	8006952 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f06f 0204 	mvn.w	r2, #4
 8006922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f973 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 800693e:	e005      	b.n	800694c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f965 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f976 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b00      	cmp	r3, #0
 800695a:	d020      	beq.n	800699e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01b      	beq.n	800699e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f06f 0208 	mvn.w	r2, #8
 800696e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2204      	movs	r2, #4
 8006974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f94d 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 800698a:	e005      	b.n	8006998 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f93f 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f950 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d020      	beq.n	80069ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01b      	beq.n	80069ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0210 	mvn.w	r2, #16
 80069ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2208      	movs	r2, #8
 80069c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f927 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 80069d6:	e005      	b.n	80069e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f919 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f92a 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00c      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f06f 0201 	mvn.w	r2, #1
 8006a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fc fb29 	bl	8003060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00c      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fae3 	bl	8006ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00c      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f8fb 	bl	8006c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00c      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f06f 0220 	mvn.w	r2, #32
 8006a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fab5 	bl	8006fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_ConfigClockSource+0x1c>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e0b4      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x186>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006abc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ac4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad6:	d03e      	beq.n	8006b56 <HAL_TIM_ConfigClockSource+0xd4>
 8006ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006adc:	f200 8087 	bhi.w	8006bee <HAL_TIM_ConfigClockSource+0x16c>
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae4:	f000 8086 	beq.w	8006bf4 <HAL_TIM_ConfigClockSource+0x172>
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aec:	d87f      	bhi.n	8006bee <HAL_TIM_ConfigClockSource+0x16c>
 8006aee:	2b70      	cmp	r3, #112	@ 0x70
 8006af0:	d01a      	beq.n	8006b28 <HAL_TIM_ConfigClockSource+0xa6>
 8006af2:	2b70      	cmp	r3, #112	@ 0x70
 8006af4:	d87b      	bhi.n	8006bee <HAL_TIM_ConfigClockSource+0x16c>
 8006af6:	2b60      	cmp	r3, #96	@ 0x60
 8006af8:	d050      	beq.n	8006b9c <HAL_TIM_ConfigClockSource+0x11a>
 8006afa:	2b60      	cmp	r3, #96	@ 0x60
 8006afc:	d877      	bhi.n	8006bee <HAL_TIM_ConfigClockSource+0x16c>
 8006afe:	2b50      	cmp	r3, #80	@ 0x50
 8006b00:	d03c      	beq.n	8006b7c <HAL_TIM_ConfigClockSource+0xfa>
 8006b02:	2b50      	cmp	r3, #80	@ 0x50
 8006b04:	d873      	bhi.n	8006bee <HAL_TIM_ConfigClockSource+0x16c>
 8006b06:	2b40      	cmp	r3, #64	@ 0x40
 8006b08:	d058      	beq.n	8006bbc <HAL_TIM_ConfigClockSource+0x13a>
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d86f      	bhi.n	8006bee <HAL_TIM_ConfigClockSource+0x16c>
 8006b0e:	2b30      	cmp	r3, #48	@ 0x30
 8006b10:	d064      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x15a>
 8006b12:	2b30      	cmp	r3, #48	@ 0x30
 8006b14:	d86b      	bhi.n	8006bee <HAL_TIM_ConfigClockSource+0x16c>
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d060      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x15a>
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d867      	bhi.n	8006bee <HAL_TIM_ConfigClockSource+0x16c>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d05c      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x15a>
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d05a      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x15a>
 8006b26:	e062      	b.n	8006bee <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b38:	f000 f9b8 	bl	8006eac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b4a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	609a      	str	r2, [r3, #8]
      break;
 8006b54:	e04f      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b66:	f000 f9a1 	bl	8006eac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b78:	609a      	str	r2, [r3, #8]
      break;
 8006b7a:	e03c      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f000 f915 	bl	8006db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2150      	movs	r1, #80	@ 0x50
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 f96e 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 8006b9a:	e02c      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f000 f934 	bl	8006e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2160      	movs	r1, #96	@ 0x60
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f95e 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 8006bba:	e01c      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f000 f8f5 	bl	8006db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2140      	movs	r1, #64	@ 0x40
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f94e 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 8006bda:	e00c      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4619      	mov	r1, r3
 8006be6:	4610      	mov	r0, r2
 8006be8:	f000 f945 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 8006bec:	e003      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf2:	e000      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a46      	ldr	r2, [pc, #280]	@ (8006d8c <TIM_Base_SetConfig+0x12c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d013      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c7e:	d00f      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a43      	ldr	r2, [pc, #268]	@ (8006d90 <TIM_Base_SetConfig+0x130>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00b      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a42      	ldr	r2, [pc, #264]	@ (8006d94 <TIM_Base_SetConfig+0x134>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d007      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a41      	ldr	r2, [pc, #260]	@ (8006d98 <TIM_Base_SetConfig+0x138>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a40      	ldr	r2, [pc, #256]	@ (8006d9c <TIM_Base_SetConfig+0x13c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d108      	bne.n	8006cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a35      	ldr	r2, [pc, #212]	@ (8006d8c <TIM_Base_SetConfig+0x12c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d02b      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc0:	d027      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a32      	ldr	r2, [pc, #200]	@ (8006d90 <TIM_Base_SetConfig+0x130>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d023      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a31      	ldr	r2, [pc, #196]	@ (8006d94 <TIM_Base_SetConfig+0x134>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01f      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a30      	ldr	r2, [pc, #192]	@ (8006d98 <TIM_Base_SetConfig+0x138>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01b      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8006d9c <TIM_Base_SetConfig+0x13c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d017      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8006da0 <TIM_Base_SetConfig+0x140>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2d      	ldr	r2, [pc, #180]	@ (8006da4 <TIM_Base_SetConfig+0x144>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00f      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8006da8 <TIM_Base_SetConfig+0x148>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8006dac <TIM_Base_SetConfig+0x14c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a2a      	ldr	r2, [pc, #168]	@ (8006db0 <TIM_Base_SetConfig+0x150>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a29      	ldr	r2, [pc, #164]	@ (8006db4 <TIM_Base_SetConfig+0x154>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d108      	bne.n	8006d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a10      	ldr	r2, [pc, #64]	@ (8006d8c <TIM_Base_SetConfig+0x12c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <TIM_Base_SetConfig+0xf8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a12      	ldr	r2, [pc, #72]	@ (8006d9c <TIM_Base_SetConfig+0x13c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d103      	bne.n	8006d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d105      	bne.n	8006d7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f023 0201 	bic.w	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	611a      	str	r2, [r3, #16]
  }
}
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40000c00 	.word	0x40000c00
 8006d9c:	40010400 	.word	0x40010400
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800
 8006dac:	40001800 	.word	0x40001800
 8006db0:	40001c00 	.word	0x40001c00
 8006db4:	40002000 	.word	0x40002000

08006db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f023 0201 	bic.w	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 030a 	bic.w	r3, r3, #10
 8006df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b087      	sub	sp, #28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f023 0210 	bic.w	r2, r3, #16
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	031b      	lsls	r3, r3, #12
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f043 0307 	orr.w	r3, r3, #7
 8006e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	609a      	str	r2, [r3, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	021a      	lsls	r2, r3, #8
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	609a      	str	r2, [r3, #8]
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e05a      	b.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a21      	ldr	r2, [pc, #132]	@ (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d022      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f50:	d01d      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1d      	ldr	r2, [pc, #116]	@ (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d018      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1b      	ldr	r2, [pc, #108]	@ (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d013      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00e      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a18      	ldr	r2, [pc, #96]	@ (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d009      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a17      	ldr	r2, [pc, #92]	@ (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d004      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a15      	ldr	r2, [pc, #84]	@ (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d10c      	bne.n	8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800
 8006fd4:	40000c00 	.word	0x40000c00
 8006fd8:	40010400 	.word	0x40010400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40001800 	.word	0x40001800

08006fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e042      	b.n	80070a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fc fefa 	bl	8003e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2224      	movs	r2, #36	@ 0x24
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800704e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fa09 	bl	8007468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695a      	ldr	r2, [r3, #20]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	@ 0x28
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d175      	bne.n	80071b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_UART_Transmit+0x2c>
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e06e      	b.n	80071ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2221      	movs	r2, #33	@ 0x21
 80070e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070ea:	f7fc ff77 	bl	8003fdc <HAL_GetTick>
 80070ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007104:	d108      	bne.n	8007118 <HAL_UART_Transmit+0x6c>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e003      	b.n	8007120 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007120:	e02e      	b.n	8007180 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2200      	movs	r2, #0
 800712a:	2180      	movs	r1, #128	@ 0x80
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f8df 	bl	80072f0 <UART_WaitOnFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e03a      	b.n	80071ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10b      	bne.n	8007162 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	3302      	adds	r3, #2
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	e007      	b.n	8007172 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3301      	adds	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1cb      	bne.n	8007122 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	2140      	movs	r1, #64	@ 0x40
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f8ab 	bl	80072f0 <UART_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e006      	b.n	80071ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	e000      	b.n	80071ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80071b8:	2302      	movs	r3, #2
  }
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3720      	adds	r7, #32
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b08a      	sub	sp, #40	@ 0x28
 80071c6:	af02      	add	r7, sp, #8
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	603b      	str	r3, [r7, #0]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b20      	cmp	r3, #32
 80071e0:	f040 8081 	bne.w	80072e6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <HAL_UART_Receive+0x2e>
 80071ea:	88fb      	ldrh	r3, [r7, #6]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e079      	b.n	80072e8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2222      	movs	r2, #34	@ 0x22
 80071fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007208:	f7fc fee8 	bl	8003fdc <HAL_GetTick>
 800720c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	88fa      	ldrh	r2, [r7, #6]
 8007212:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007222:	d108      	bne.n	8007236 <HAL_UART_Receive+0x74>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	e003      	b.n	800723e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800723e:	e047      	b.n	80072d0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2200      	movs	r2, #0
 8007248:	2120      	movs	r1, #32
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f850 	bl	80072f0 <UART_WaitOnFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e042      	b.n	80072e8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10c      	bne.n	8007282 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007274:	b29a      	uxth	r2, r3
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	3302      	adds	r3, #2
 800727e:	61bb      	str	r3, [r7, #24]
 8007280:	e01f      	b.n	80072c2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728a:	d007      	beq.n	800729c <HAL_UART_Receive+0xda>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <HAL_UART_Receive+0xe8>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d106      	bne.n	80072aa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	e008      	b.n	80072bc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	3301      	adds	r3, #1
 80072c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1b2      	bne.n	8007240 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e000      	b.n	80072e8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80072e6:	2302      	movs	r3, #2
  }
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	4613      	mov	r3, r2
 80072fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007300:	e03b      	b.n	800737a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d037      	beq.n	800737a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730a:	f7fc fe67 	bl	8003fdc <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	6a3a      	ldr	r2, [r7, #32]
 8007316:	429a      	cmp	r2, r3
 8007318:	d302      	bcc.n	8007320 <UART_WaitOnFlagUntilTimeout+0x30>
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e03a      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d023      	beq.n	800737a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b80      	cmp	r3, #128	@ 0x80
 8007336:	d020      	beq.n	800737a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b40      	cmp	r3, #64	@ 0x40
 800733c:	d01d      	beq.n	800737a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b08      	cmp	r3, #8
 800734a:	d116      	bne.n	800737a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f81d 	bl	80073a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2208      	movs	r2, #8
 800736c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e00f      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4013      	ands	r3, r2
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	429a      	cmp	r2, r3
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	429a      	cmp	r2, r3
 8007396:	d0b4      	beq.n	8007302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b095      	sub	sp, #84	@ 0x54
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	330c      	adds	r3, #12
 80073c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80073cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3314      	adds	r3, #20
 80073e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3314      	adds	r3, #20
 80073fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e5      	bne.n	80073de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007416:	2b01      	cmp	r3, #1
 8007418:	d119      	bne.n	800744e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	330c      	adds	r3, #12
 8007420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	60bb      	str	r3, [r7, #8]
   return(result);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f023 0310 	bic.w	r3, r3, #16
 8007430:	647b      	str	r3, [r7, #68]	@ 0x44
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	330c      	adds	r3, #12
 8007438:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800743a:	61ba      	str	r2, [r7, #24]
 800743c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6979      	ldr	r1, [r7, #20]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	613b      	str	r3, [r7, #16]
   return(result);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e5      	bne.n	800741a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800745c:	bf00      	nop
 800745e:	3754      	adds	r7, #84	@ 0x54
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800746c:	b0c0      	sub	sp, #256	@ 0x100
 800746e:	af00      	add	r7, sp, #0
 8007470:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007484:	68d9      	ldr	r1, [r3, #12]
 8007486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	ea40 0301 	orr.w	r3, r0, r1
 8007490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	431a      	orrs	r2, r3
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	431a      	orrs	r2, r3
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80074c0:	f021 010c 	bic.w	r1, r1, #12
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074ce:	430b      	orrs	r3, r1
 80074d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80074de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e2:	6999      	ldr	r1, [r3, #24]
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	ea40 0301 	orr.w	r3, r0, r1
 80074ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	4b8f      	ldr	r3, [pc, #572]	@ (8007734 <UART_SetConfig+0x2cc>)
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d005      	beq.n	8007508 <UART_SetConfig+0xa0>
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4b8d      	ldr	r3, [pc, #564]	@ (8007738 <UART_SetConfig+0x2d0>)
 8007504:	429a      	cmp	r2, r3
 8007506:	d104      	bne.n	8007512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007508:	f7fd fcfe 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 800750c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007510:	e003      	b.n	800751a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007512:	f7fd fce5 	bl	8004ee0 <HAL_RCC_GetPCLK1Freq>
 8007516:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800751a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007524:	f040 810c 	bne.w	8007740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800752c:	2200      	movs	r2, #0
 800752e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007532:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800753a:	4622      	mov	r2, r4
 800753c:	462b      	mov	r3, r5
 800753e:	1891      	adds	r1, r2, r2
 8007540:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007542:	415b      	adcs	r3, r3
 8007544:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800754a:	4621      	mov	r1, r4
 800754c:	eb12 0801 	adds.w	r8, r2, r1
 8007550:	4629      	mov	r1, r5
 8007552:	eb43 0901 	adc.w	r9, r3, r1
 8007556:	f04f 0200 	mov.w	r2, #0
 800755a:	f04f 0300 	mov.w	r3, #0
 800755e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800756a:	4690      	mov	r8, r2
 800756c:	4699      	mov	r9, r3
 800756e:	4623      	mov	r3, r4
 8007570:	eb18 0303 	adds.w	r3, r8, r3
 8007574:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007578:	462b      	mov	r3, r5
 800757a:	eb49 0303 	adc.w	r3, r9, r3
 800757e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800758e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007596:	460b      	mov	r3, r1
 8007598:	18db      	adds	r3, r3, r3
 800759a:	653b      	str	r3, [r7, #80]	@ 0x50
 800759c:	4613      	mov	r3, r2
 800759e:	eb42 0303 	adc.w	r3, r2, r3
 80075a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80075a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075ac:	f7f9 fbdc 	bl	8000d68 <__aeabi_uldivmod>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4b61      	ldr	r3, [pc, #388]	@ (800773c <UART_SetConfig+0x2d4>)
 80075b6:	fba3 2302 	umull	r2, r3, r3, r2
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	011c      	lsls	r4, r3, #4
 80075be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075d0:	4642      	mov	r2, r8
 80075d2:	464b      	mov	r3, r9
 80075d4:	1891      	adds	r1, r2, r2
 80075d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075d8:	415b      	adcs	r3, r3
 80075da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80075e0:	4641      	mov	r1, r8
 80075e2:	eb12 0a01 	adds.w	sl, r2, r1
 80075e6:	4649      	mov	r1, r9
 80075e8:	eb43 0b01 	adc.w	fp, r3, r1
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007600:	4692      	mov	sl, r2
 8007602:	469b      	mov	fp, r3
 8007604:	4643      	mov	r3, r8
 8007606:	eb1a 0303 	adds.w	r3, sl, r3
 800760a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800760e:	464b      	mov	r3, r9
 8007610:	eb4b 0303 	adc.w	r3, fp, r3
 8007614:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007624:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800762c:	460b      	mov	r3, r1
 800762e:	18db      	adds	r3, r3, r3
 8007630:	643b      	str	r3, [r7, #64]	@ 0x40
 8007632:	4613      	mov	r3, r2
 8007634:	eb42 0303 	adc.w	r3, r2, r3
 8007638:	647b      	str	r3, [r7, #68]	@ 0x44
 800763a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800763e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007642:	f7f9 fb91 	bl	8000d68 <__aeabi_uldivmod>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4611      	mov	r1, r2
 800764c:	4b3b      	ldr	r3, [pc, #236]	@ (800773c <UART_SetConfig+0x2d4>)
 800764e:	fba3 2301 	umull	r2, r3, r3, r1
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	2264      	movs	r2, #100	@ 0x64
 8007656:	fb02 f303 	mul.w	r3, r2, r3
 800765a:	1acb      	subs	r3, r1, r3
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007662:	4b36      	ldr	r3, [pc, #216]	@ (800773c <UART_SetConfig+0x2d4>)
 8007664:	fba3 2302 	umull	r2, r3, r3, r2
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007670:	441c      	add	r4, r3
 8007672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007676:	2200      	movs	r2, #0
 8007678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800767c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007684:	4642      	mov	r2, r8
 8007686:	464b      	mov	r3, r9
 8007688:	1891      	adds	r1, r2, r2
 800768a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800768c:	415b      	adcs	r3, r3
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007694:	4641      	mov	r1, r8
 8007696:	1851      	adds	r1, r2, r1
 8007698:	6339      	str	r1, [r7, #48]	@ 0x30
 800769a:	4649      	mov	r1, r9
 800769c:	414b      	adcs	r3, r1
 800769e:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	f04f 0300 	mov.w	r3, #0
 80076a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076ac:	4659      	mov	r1, fp
 80076ae:	00cb      	lsls	r3, r1, #3
 80076b0:	4651      	mov	r1, sl
 80076b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076b6:	4651      	mov	r1, sl
 80076b8:	00ca      	lsls	r2, r1, #3
 80076ba:	4610      	mov	r0, r2
 80076bc:	4619      	mov	r1, r3
 80076be:	4603      	mov	r3, r0
 80076c0:	4642      	mov	r2, r8
 80076c2:	189b      	adds	r3, r3, r2
 80076c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076c8:	464b      	mov	r3, r9
 80076ca:	460a      	mov	r2, r1
 80076cc:	eb42 0303 	adc.w	r3, r2, r3
 80076d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80076e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076e8:	460b      	mov	r3, r1
 80076ea:	18db      	adds	r3, r3, r3
 80076ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076ee:	4613      	mov	r3, r2
 80076f0:	eb42 0303 	adc.w	r3, r2, r3
 80076f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80076fe:	f7f9 fb33 	bl	8000d68 <__aeabi_uldivmod>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <UART_SetConfig+0x2d4>)
 8007708:	fba3 1302 	umull	r1, r3, r3, r2
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	2164      	movs	r1, #100	@ 0x64
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	3332      	adds	r3, #50	@ 0x32
 800771a:	4a08      	ldr	r2, [pc, #32]	@ (800773c <UART_SetConfig+0x2d4>)
 800771c:	fba2 2303 	umull	r2, r3, r2, r3
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f003 0207 	and.w	r2, r3, #7
 8007726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4422      	add	r2, r4
 800772e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007730:	e106      	b.n	8007940 <UART_SetConfig+0x4d8>
 8007732:	bf00      	nop
 8007734:	40011000 	.word	0x40011000
 8007738:	40011400 	.word	0x40011400
 800773c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007744:	2200      	movs	r2, #0
 8007746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800774a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800774e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007752:	4642      	mov	r2, r8
 8007754:	464b      	mov	r3, r9
 8007756:	1891      	adds	r1, r2, r2
 8007758:	6239      	str	r1, [r7, #32]
 800775a:	415b      	adcs	r3, r3
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
 800775e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007762:	4641      	mov	r1, r8
 8007764:	1854      	adds	r4, r2, r1
 8007766:	4649      	mov	r1, r9
 8007768:	eb43 0501 	adc.w	r5, r3, r1
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	f04f 0300 	mov.w	r3, #0
 8007774:	00eb      	lsls	r3, r5, #3
 8007776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800777a:	00e2      	lsls	r2, r4, #3
 800777c:	4614      	mov	r4, r2
 800777e:	461d      	mov	r5, r3
 8007780:	4643      	mov	r3, r8
 8007782:	18e3      	adds	r3, r4, r3
 8007784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007788:	464b      	mov	r3, r9
 800778a:	eb45 0303 	adc.w	r3, r5, r3
 800778e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800779e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077a2:	f04f 0200 	mov.w	r2, #0
 80077a6:	f04f 0300 	mov.w	r3, #0
 80077aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077ae:	4629      	mov	r1, r5
 80077b0:	008b      	lsls	r3, r1, #2
 80077b2:	4621      	mov	r1, r4
 80077b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077b8:	4621      	mov	r1, r4
 80077ba:	008a      	lsls	r2, r1, #2
 80077bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077c0:	f7f9 fad2 	bl	8000d68 <__aeabi_uldivmod>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4b60      	ldr	r3, [pc, #384]	@ (800794c <UART_SetConfig+0x4e4>)
 80077ca:	fba3 2302 	umull	r2, r3, r3, r2
 80077ce:	095b      	lsrs	r3, r3, #5
 80077d0:	011c      	lsls	r4, r3, #4
 80077d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80077e4:	4642      	mov	r2, r8
 80077e6:	464b      	mov	r3, r9
 80077e8:	1891      	adds	r1, r2, r2
 80077ea:	61b9      	str	r1, [r7, #24]
 80077ec:	415b      	adcs	r3, r3
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077f4:	4641      	mov	r1, r8
 80077f6:	1851      	adds	r1, r2, r1
 80077f8:	6139      	str	r1, [r7, #16]
 80077fa:	4649      	mov	r1, r9
 80077fc:	414b      	adcs	r3, r1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800780c:	4659      	mov	r1, fp
 800780e:	00cb      	lsls	r3, r1, #3
 8007810:	4651      	mov	r1, sl
 8007812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007816:	4651      	mov	r1, sl
 8007818:	00ca      	lsls	r2, r1, #3
 800781a:	4610      	mov	r0, r2
 800781c:	4619      	mov	r1, r3
 800781e:	4603      	mov	r3, r0
 8007820:	4642      	mov	r2, r8
 8007822:	189b      	adds	r3, r3, r2
 8007824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007828:	464b      	mov	r3, r9
 800782a:	460a      	mov	r2, r1
 800782c:	eb42 0303 	adc.w	r3, r2, r3
 8007830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800783e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007840:	f04f 0200 	mov.w	r2, #0
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800784c:	4649      	mov	r1, r9
 800784e:	008b      	lsls	r3, r1, #2
 8007850:	4641      	mov	r1, r8
 8007852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007856:	4641      	mov	r1, r8
 8007858:	008a      	lsls	r2, r1, #2
 800785a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800785e:	f7f9 fa83 	bl	8000d68 <__aeabi_uldivmod>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4611      	mov	r1, r2
 8007868:	4b38      	ldr	r3, [pc, #224]	@ (800794c <UART_SetConfig+0x4e4>)
 800786a:	fba3 2301 	umull	r2, r3, r3, r1
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	2264      	movs	r2, #100	@ 0x64
 8007872:	fb02 f303 	mul.w	r3, r2, r3
 8007876:	1acb      	subs	r3, r1, r3
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	3332      	adds	r3, #50	@ 0x32
 800787c:	4a33      	ldr	r2, [pc, #204]	@ (800794c <UART_SetConfig+0x4e4>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007888:	441c      	add	r4, r3
 800788a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800788e:	2200      	movs	r2, #0
 8007890:	673b      	str	r3, [r7, #112]	@ 0x70
 8007892:	677a      	str	r2, [r7, #116]	@ 0x74
 8007894:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007898:	4642      	mov	r2, r8
 800789a:	464b      	mov	r3, r9
 800789c:	1891      	adds	r1, r2, r2
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	415b      	adcs	r3, r3
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078a8:	4641      	mov	r1, r8
 80078aa:	1851      	adds	r1, r2, r1
 80078ac:	6039      	str	r1, [r7, #0]
 80078ae:	4649      	mov	r1, r9
 80078b0:	414b      	adcs	r3, r1
 80078b2:	607b      	str	r3, [r7, #4]
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078c0:	4659      	mov	r1, fp
 80078c2:	00cb      	lsls	r3, r1, #3
 80078c4:	4651      	mov	r1, sl
 80078c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ca:	4651      	mov	r1, sl
 80078cc:	00ca      	lsls	r2, r1, #3
 80078ce:	4610      	mov	r0, r2
 80078d0:	4619      	mov	r1, r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	4642      	mov	r2, r8
 80078d6:	189b      	adds	r3, r3, r2
 80078d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078da:	464b      	mov	r3, r9
 80078dc:	460a      	mov	r2, r1
 80078de:	eb42 0303 	adc.w	r3, r2, r3
 80078e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80078ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80078fc:	4649      	mov	r1, r9
 80078fe:	008b      	lsls	r3, r1, #2
 8007900:	4641      	mov	r1, r8
 8007902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007906:	4641      	mov	r1, r8
 8007908:	008a      	lsls	r2, r1, #2
 800790a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800790e:	f7f9 fa2b 	bl	8000d68 <__aeabi_uldivmod>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <UART_SetConfig+0x4e4>)
 8007918:	fba3 1302 	umull	r1, r3, r3, r2
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	2164      	movs	r1, #100	@ 0x64
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	3332      	adds	r3, #50	@ 0x32
 800792a:	4a08      	ldr	r2, [pc, #32]	@ (800794c <UART_SetConfig+0x4e4>)
 800792c:	fba2 2303 	umull	r2, r3, r2, r3
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	f003 020f 	and.w	r2, r3, #15
 8007936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4422      	add	r2, r4
 800793e:	609a      	str	r2, [r3, #8]
}
 8007940:	bf00      	nop
 8007942:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007946:	46bd      	mov	sp, r7
 8007948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800794c:	51eb851f 	.word	0x51eb851f

08007950 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007954:	4904      	ldr	r1, [pc, #16]	@ (8007968 <MX_FATFS_Init+0x18>)
 8007956:	4805      	ldr	r0, [pc, #20]	@ (800796c <MX_FATFS_Init+0x1c>)
 8007958:	f003 fb42 	bl	800afe0 <FATFS_LinkDriver>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	4b03      	ldr	r3, [pc, #12]	@ (8007970 <MX_FATFS_Init+0x20>)
 8007962:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007964:	bf00      	nop
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000f78 	.word	0x20000f78
 800796c:	20000018 	.word	0x20000018
 8007970:	20000f74 	.word	0x20000f74

08007974 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007978:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800797a:	4618      	mov	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f9d7 	bl	8007d44 <USER_SPI_initialize>
 8007996:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fab5 	bl	8007f1c <USER_SPI_status>
 80079b2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60b9      	str	r1, [r7, #8]
 80079c4:	607a      	str	r2, [r7, #4]
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80079cc:	7bf8      	ldrb	r0, [r7, #15]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	f000 fab8 	bl	8007f48 <USER_SPI_read>
 80079d8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80079f2:	7bf8      	ldrb	r0, [r7, #15]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	f000 fb0b 	bl	8008014 <USER_SPI_write>
 80079fe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	603a      	str	r2, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
 8007a14:	460b      	mov	r3, r1
 8007a16:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8007a18:	79b9      	ldrb	r1, [r7, #6]
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 fb74 	bl	800810c <USER_SPI_ioctl>
 8007a24:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007a38:	f7fc fad0 	bl	8003fdc <HAL_GetTick>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	4a04      	ldr	r2, [pc, #16]	@ (8007a50 <SPI_Timer_On+0x20>)
 8007a40:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007a42:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <SPI_Timer_On+0x24>)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6013      	str	r3, [r2, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000f80 	.word	0x20000f80
 8007a54:	20000f84 	.word	0x20000f84

08007a58 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007a5c:	f7fc fabe 	bl	8003fdc <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	4b06      	ldr	r3, [pc, #24]	@ (8007a7c <SPI_Timer_Status+0x24>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	1ad2      	subs	r2, r2, r3
 8007a68:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <SPI_Timer_Status+0x28>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	bf34      	ite	cc
 8007a70:	2301      	movcc	r3, #1
 8007a72:	2300      	movcs	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000f80 	.word	0x20000f80
 8007a80:	20000f84 	.word	0x20000f84

08007a84 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007a8e:	f107 020f 	add.w	r2, r7, #15
 8007a92:	1df9      	adds	r1, r7, #7
 8007a94:	2332      	movs	r3, #50	@ 0x32
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4804      	ldr	r0, [pc, #16]	@ (8007aac <xchg_spi+0x28>)
 8007a9c:	f7fe f976 	bl	8005d8c <HAL_SPI_TransmitReceive>
    return rxDat;
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000ce4 	.word	0x20000ce4

08007ab0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007ab0:	b590      	push	{r4, r7, lr}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e00a      	b.n	8007ad6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	18d4      	adds	r4, r2, r3
 8007ac6:	20ff      	movs	r0, #255	@ 0xff
 8007ac8:	f7ff ffdc 	bl	8007a84 <xchg_spi>
 8007acc:	4603      	mov	r3, r0
 8007ace:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	60fb      	str	r3, [r7, #12]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d3f0      	bcc.n	8007ac0 <rcvr_spi_multi+0x10>
	}
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd90      	pop	{r4, r7, pc}

08007ae8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	f04f 33ff 	mov.w	r3, #4294967295
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	4803      	ldr	r0, [pc, #12]	@ (8007b0c <xmit_spi_multi+0x24>)
 8007afe:	f7fd fee8 	bl	80058d2 <HAL_SPI_Transmit>
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000ce4 	.word	0x20000ce4

08007b10 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007b18:	f7fc fa60 	bl	8003fdc <HAL_GetTick>
 8007b1c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007b22:	20ff      	movs	r0, #255	@ 0xff
 8007b24:	f7ff ffae 	bl	8007a84 <xchg_spi>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	2bff      	cmp	r3, #255	@ 0xff
 8007b30:	d007      	beq.n	8007b42 <wait_ready+0x32>
 8007b32:	f7fc fa53 	bl	8003fdc <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d8ef      	bhi.n	8007b22 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	2bff      	cmp	r3, #255	@ 0xff
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b62:	4804      	ldr	r0, [pc, #16]	@ (8007b74 <despiselect+0x1c>)
 8007b64:	f7fd f898 	bl	8004c98 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007b68:	20ff      	movs	r0, #255	@ 0xff
 8007b6a:	f7ff ff8b 	bl	8007a84 <xchg_spi>

}
 8007b6e:	bf00      	nop
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	40020000 	.word	0x40020000

08007b78 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b82:	480a      	ldr	r0, [pc, #40]	@ (8007bac <spiselect+0x34>)
 8007b84:	f7fd f888 	bl	8004c98 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007b88:	20ff      	movs	r0, #255	@ 0xff
 8007b8a:	f7ff ff7b 	bl	8007a84 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007b8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007b92:	f7ff ffbd 	bl	8007b10 <wait_ready>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <spiselect+0x28>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e002      	b.n	8007ba6 <spiselect+0x2e>

	despiselect();
 8007ba0:	f7ff ffda 	bl	8007b58 <despiselect>
	return 0;	/* Timeout */
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	40020000 	.word	0x40020000

08007bb0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007bba:	20c8      	movs	r0, #200	@ 0xc8
 8007bbc:	f7ff ff38 	bl	8007a30 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007bc0:	20ff      	movs	r0, #255	@ 0xff
 8007bc2:	f7ff ff5f 	bl	8007a84 <xchg_spi>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2bff      	cmp	r3, #255	@ 0xff
 8007bce:	d104      	bne.n	8007bda <rcvr_datablock+0x2a>
 8007bd0:	f7ff ff42 	bl	8007a58 <SPI_Timer_Status>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1f2      	bne.n	8007bc0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	2bfe      	cmp	r3, #254	@ 0xfe
 8007bde:	d001      	beq.n	8007be4 <rcvr_datablock+0x34>
 8007be0:	2300      	movs	r3, #0
 8007be2:	e00a      	b.n	8007bfa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff ff62 	bl	8007ab0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007bec:	20ff      	movs	r0, #255	@ 0xff
 8007bee:	f7ff ff49 	bl	8007a84 <xchg_spi>
 8007bf2:	20ff      	movs	r0, #255	@ 0xff
 8007bf4:	f7ff ff46 	bl	8007a84 <xchg_spi>

	return 1;						/* Function succeeded */
 8007bf8:	2301      	movs	r3, #1
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007c0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007c12:	f7ff ff7d 	bl	8007b10 <wait_ready>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <xmit_datablock+0x1e>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e01e      	b.n	8007c5e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff ff2e 	bl	8007a84 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	2bfd      	cmp	r3, #253	@ 0xfd
 8007c2c:	d016      	beq.n	8007c5c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007c2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff ff58 	bl	8007ae8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007c38:	20ff      	movs	r0, #255	@ 0xff
 8007c3a:	f7ff ff23 	bl	8007a84 <xchg_spi>
 8007c3e:	20ff      	movs	r0, #255	@ 0xff
 8007c40:	f7ff ff20 	bl	8007a84 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007c44:	20ff      	movs	r0, #255	@ 0xff
 8007c46:	f7ff ff1d 	bl	8007a84 <xchg_spi>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2b05      	cmp	r3, #5
 8007c56:	d001      	beq.n	8007c5c <xmit_datablock+0x5a>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e000      	b.n	8007c5e <xmit_datablock+0x5c>
	}
	return 1;
 8007c5c:	2301      	movs	r3, #1
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	6039      	str	r1, [r7, #0]
 8007c70:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	da0e      	bge.n	8007c98 <send_cmd+0x32>
		cmd &= 0x7F;
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c80:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007c82:	2100      	movs	r1, #0
 8007c84:	2037      	movs	r0, #55	@ 0x37
 8007c86:	f7ff ffee 	bl	8007c66 <send_cmd>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d901      	bls.n	8007c98 <send_cmd+0x32>
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	e051      	b.n	8007d3c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	2b0c      	cmp	r3, #12
 8007c9c:	d008      	beq.n	8007cb0 <send_cmd+0x4a>
		despiselect();
 8007c9e:	f7ff ff5b 	bl	8007b58 <despiselect>
		if (!spiselect()) return 0xFF;
 8007ca2:	f7ff ff69 	bl	8007b78 <spiselect>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <send_cmd+0x4a>
 8007cac:	23ff      	movs	r3, #255	@ 0xff
 8007cae:	e045      	b.n	8007d3c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007cb0:	79fb      	ldrb	r3, [r7, #7]
 8007cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff fee3 	bl	8007a84 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	0e1b      	lsrs	r3, r3, #24
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff fedd 	bl	8007a84 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	0c1b      	lsrs	r3, r3, #16
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fed7 	bl	8007a84 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	0a1b      	lsrs	r3, r3, #8
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff fed1 	bl	8007a84 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fecc 	bl	8007a84 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <send_cmd+0x94>
 8007cf6:	2395      	movs	r3, #149	@ 0x95
 8007cf8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d101      	bne.n	8007d04 <send_cmd+0x9e>
 8007d00:	2387      	movs	r3, #135	@ 0x87
 8007d02:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff febc 	bl	8007a84 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	2b0c      	cmp	r3, #12
 8007d10:	d102      	bne.n	8007d18 <send_cmd+0xb2>
 8007d12:	20ff      	movs	r0, #255	@ 0xff
 8007d14:	f7ff feb6 	bl	8007a84 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007d18:	230a      	movs	r3, #10
 8007d1a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007d1c:	20ff      	movs	r0, #255	@ 0xff
 8007d1e:	f7ff feb1 	bl	8007a84 <xchg_spi>
 8007d22:	4603      	mov	r3, r0
 8007d24:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007d26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	da05      	bge.n	8007d3a <send_cmd+0xd4>
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1f0      	bne.n	8007d1c <send_cmd+0xb6>

	return res;							/* Return received response */
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007d44:	b590      	push	{r4, r7, lr}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <USER_SPI_initialize+0x14>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0d6      	b.n	8007f06 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007d58:	4b6d      	ldr	r3, [pc, #436]	@ (8007f10 <USER_SPI_initialize+0x1cc>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <USER_SPI_initialize+0x2a>
 8007d66:	4b6a      	ldr	r3, [pc, #424]	@ (8007f10 <USER_SPI_initialize+0x1cc>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	e0cb      	b.n	8007f06 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007d6e:	4b69      	ldr	r3, [pc, #420]	@ (8007f14 <USER_SPI_initialize+0x1d0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007d78:	4b66      	ldr	r3, [pc, #408]	@ (8007f14 <USER_SPI_initialize+0x1d0>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007d80:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007d82:	230a      	movs	r3, #10
 8007d84:	73fb      	strb	r3, [r7, #15]
 8007d86:	e005      	b.n	8007d94 <USER_SPI_initialize+0x50>
 8007d88:	20ff      	movs	r0, #255	@ 0xff
 8007d8a:	f7ff fe7b 	bl	8007a84 <xchg_spi>
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f6      	bne.n	8007d88 <USER_SPI_initialize+0x44>

	ty = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007d9e:	2100      	movs	r1, #0
 8007da0:	2000      	movs	r0, #0
 8007da2:	f7ff ff60 	bl	8007c66 <send_cmd>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	f040 808b 	bne.w	8007ec4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007dae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007db2:	f7ff fe3d 	bl	8007a30 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007db6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007dba:	2008      	movs	r0, #8
 8007dbc:	f7ff ff53 	bl	8007c66 <send_cmd>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d151      	bne.n	8007e6a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]
 8007dca:	e00d      	b.n	8007de8 <USER_SPI_initialize+0xa4>
 8007dcc:	7bfc      	ldrb	r4, [r7, #15]
 8007dce:	20ff      	movs	r0, #255	@ 0xff
 8007dd0:	f7ff fe58 	bl	8007a84 <xchg_spi>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f104 0310 	add.w	r3, r4, #16
 8007ddc:	443b      	add	r3, r7
 8007dde:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	3301      	adds	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d9ee      	bls.n	8007dcc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007dee:	7abb      	ldrb	r3, [r7, #10]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d167      	bne.n	8007ec4 <USER_SPI_initialize+0x180>
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	2baa      	cmp	r3, #170	@ 0xaa
 8007df8:	d164      	bne.n	8007ec4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007dfa:	bf00      	nop
 8007dfc:	f7ff fe2c 	bl	8007a58 <SPI_Timer_Status>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <USER_SPI_initialize+0xd2>
 8007e06:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007e0a:	20a9      	movs	r0, #169	@ 0xa9
 8007e0c:	f7ff ff2b 	bl	8007c66 <send_cmd>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f2      	bne.n	8007dfc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007e16:	f7ff fe1f 	bl	8007a58 <SPI_Timer_Status>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d051      	beq.n	8007ec4 <USER_SPI_initialize+0x180>
 8007e20:	2100      	movs	r1, #0
 8007e22:	203a      	movs	r0, #58	@ 0x3a
 8007e24:	f7ff ff1f 	bl	8007c66 <send_cmd>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d14a      	bne.n	8007ec4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	e00d      	b.n	8007e50 <USER_SPI_initialize+0x10c>
 8007e34:	7bfc      	ldrb	r4, [r7, #15]
 8007e36:	20ff      	movs	r0, #255	@ 0xff
 8007e38:	f7ff fe24 	bl	8007a84 <xchg_spi>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f104 0310 	add.w	r3, r4, #16
 8007e44:	443b      	add	r3, r7
 8007e46:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d9ee      	bls.n	8007e34 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007e56:	7a3b      	ldrb	r3, [r7, #8]
 8007e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <USER_SPI_initialize+0x120>
 8007e60:	230c      	movs	r3, #12
 8007e62:	e000      	b.n	8007e66 <USER_SPI_initialize+0x122>
 8007e64:	2304      	movs	r3, #4
 8007e66:	737b      	strb	r3, [r7, #13]
 8007e68:	e02c      	b.n	8007ec4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	20a9      	movs	r0, #169	@ 0xa9
 8007e6e:	f7ff fefa 	bl	8007c66 <send_cmd>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d804      	bhi.n	8007e82 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007e78:	2302      	movs	r3, #2
 8007e7a:	737b      	strb	r3, [r7, #13]
 8007e7c:	23a9      	movs	r3, #169	@ 0xa9
 8007e7e:	73bb      	strb	r3, [r7, #14]
 8007e80:	e003      	b.n	8007e8a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007e82:	2301      	movs	r3, #1
 8007e84:	737b      	strb	r3, [r7, #13]
 8007e86:	2301      	movs	r3, #1
 8007e88:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007e8a:	bf00      	nop
 8007e8c:	f7ff fde4 	bl	8007a58 <SPI_Timer_Status>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <USER_SPI_initialize+0x162>
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7ff fee3 	bl	8007c66 <send_cmd>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f2      	bne.n	8007e8c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007ea6:	f7ff fdd7 	bl	8007a58 <SPI_Timer_Status>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <USER_SPI_initialize+0x17c>
 8007eb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007eb4:	2010      	movs	r0, #16
 8007eb6:	f7ff fed6 	bl	8007c66 <send_cmd>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <USER_SPI_initialize+0x180>
				ty = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007ec4:	4a14      	ldr	r2, [pc, #80]	@ (8007f18 <USER_SPI_initialize+0x1d4>)
 8007ec6:	7b7b      	ldrb	r3, [r7, #13]
 8007ec8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007eca:	f7ff fe45 	bl	8007b58 <despiselect>

	if (ty) {			/* OK */
 8007ece:	7b7b      	ldrb	r3, [r7, #13]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d012      	beq.n	8007efa <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f14 <USER_SPI_initialize+0x1d0>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007ede:	4b0d      	ldr	r3, [pc, #52]	@ (8007f14 <USER_SPI_initialize+0x1d0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0210 	orr.w	r2, r2, #16
 8007ee6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007ee8:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <USER_SPI_initialize+0x1cc>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f023 0301 	bic.w	r3, r3, #1
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	4b06      	ldr	r3, [pc, #24]	@ (8007f10 <USER_SPI_initialize+0x1cc>)
 8007ef6:	701a      	strb	r2, [r3, #0]
 8007ef8:	e002      	b.n	8007f00 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007efa:	4b05      	ldr	r3, [pc, #20]	@ (8007f10 <USER_SPI_initialize+0x1cc>)
 8007efc:	2201      	movs	r2, #1
 8007efe:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007f00:	4b03      	ldr	r3, [pc, #12]	@ (8007f10 <USER_SPI_initialize+0x1cc>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b2db      	uxtb	r3, r3
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd90      	pop	{r4, r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	2000002c 	.word	0x2000002c
 8007f14:	20000ce4 	.word	0x20000ce4
 8007f18:	20000f7c 	.word	0x20000f7c

08007f1c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <USER_SPI_status+0x14>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e002      	b.n	8007f36 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007f30:	4b04      	ldr	r3, [pc, #16]	@ (8007f44 <USER_SPI_status+0x28>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	b2db      	uxtb	r3, r3
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	2000002c 	.word	0x2000002c

08007f48 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d102      	bne.n	8007f64 <USER_SPI_read+0x1c>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <USER_SPI_read+0x20>
 8007f64:	2304      	movs	r3, #4
 8007f66:	e04d      	b.n	8008004 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007f68:	4b28      	ldr	r3, [pc, #160]	@ (800800c <USER_SPI_read+0xc4>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <USER_SPI_read+0x32>
 8007f76:	2303      	movs	r3, #3
 8007f78:	e044      	b.n	8008004 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007f7a:	4b25      	ldr	r3, [pc, #148]	@ (8008010 <USER_SPI_read+0xc8>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <USER_SPI_read+0x44>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	025b      	lsls	r3, r3, #9
 8007f8a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d111      	bne.n	8007fb6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	2011      	movs	r0, #17
 8007f96:	f7ff fe66 	bl	8007c66 <send_cmd>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d129      	bne.n	8007ff4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007fa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007fa4:	68b8      	ldr	r0, [r7, #8]
 8007fa6:	f7ff fe03 	bl	8007bb0 <rcvr_datablock>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d021      	beq.n	8007ff4 <USER_SPI_read+0xac>
			count = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	e01e      	b.n	8007ff4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	2012      	movs	r0, #18
 8007fba:	f7ff fe54 	bl	8007c66 <send_cmd>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d117      	bne.n	8007ff4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007fc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007fc8:	68b8      	ldr	r0, [r7, #8]
 8007fca:	f7ff fdf1 	bl	8007bb0 <rcvr_datablock>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00a      	beq.n	8007fea <USER_SPI_read+0xa2>
				buff += 512;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007fda:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	603b      	str	r3, [r7, #0]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1ed      	bne.n	8007fc4 <USER_SPI_read+0x7c>
 8007fe8:	e000      	b.n	8007fec <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007fea:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007fec:	2100      	movs	r1, #0
 8007fee:	200c      	movs	r0, #12
 8007ff0:	f7ff fe39 	bl	8007c66 <send_cmd>
		}
	}
	despiselect();
 8007ff4:	f7ff fdb0 	bl	8007b58 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bf14      	ite	ne
 8007ffe:	2301      	movne	r3, #1
 8008000:	2300      	moveq	r3, #0
 8008002:	b2db      	uxtb	r3, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	2000002c 	.word	0x2000002c
 8008010:	20000f7c 	.word	0x20000f7c

08008014 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <USER_SPI_write+0x1c>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USER_SPI_write+0x20>
 8008030:	2304      	movs	r3, #4
 8008032:	e063      	b.n	80080fc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008034:	4b33      	ldr	r3, [pc, #204]	@ (8008104 <USER_SPI_write+0xf0>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <USER_SPI_write+0x32>
 8008042:	2303      	movs	r3, #3
 8008044:	e05a      	b.n	80080fc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008046:	4b2f      	ldr	r3, [pc, #188]	@ (8008104 <USER_SPI_write+0xf0>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	b2db      	uxtb	r3, r3
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <USER_SPI_write+0x44>
 8008054:	2302      	movs	r3, #2
 8008056:	e051      	b.n	80080fc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008058:	4b2b      	ldr	r3, [pc, #172]	@ (8008108 <USER_SPI_write+0xf4>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b00      	cmp	r3, #0
 8008062:	d102      	bne.n	800806a <USER_SPI_write+0x56>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	025b      	lsls	r3, r3, #9
 8008068:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d110      	bne.n	8008092 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	2018      	movs	r0, #24
 8008074:	f7ff fdf7 	bl	8007c66 <send_cmd>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d136      	bne.n	80080ec <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800807e:	21fe      	movs	r1, #254	@ 0xfe
 8008080:	68b8      	ldr	r0, [r7, #8]
 8008082:	f7ff fdbe 	bl	8007c02 <xmit_datablock>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d02f      	beq.n	80080ec <USER_SPI_write+0xd8>
			count = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	e02c      	b.n	80080ec <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8008092:	4b1d      	ldr	r3, [pc, #116]	@ (8008108 <USER_SPI_write+0xf4>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	f003 0306 	and.w	r3, r3, #6
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <USER_SPI_write+0x92>
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	2097      	movs	r0, #151	@ 0x97
 80080a2:	f7ff fde0 	bl	8007c66 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	2019      	movs	r0, #25
 80080aa:	f7ff fddc 	bl	8007c66 <send_cmd>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d11b      	bne.n	80080ec <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80080b4:	21fc      	movs	r1, #252	@ 0xfc
 80080b6:	68b8      	ldr	r0, [r7, #8]
 80080b8:	f7ff fda3 	bl	8007c02 <xmit_datablock>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <USER_SPI_write+0xc4>
				buff += 512;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80080c8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1ee      	bne.n	80080b4 <USER_SPI_write+0xa0>
 80080d6:	e000      	b.n	80080da <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80080d8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80080da:	21fd      	movs	r1, #253	@ 0xfd
 80080dc:	2000      	movs	r0, #0
 80080de:	f7ff fd90 	bl	8007c02 <xmit_datablock>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <USER_SPI_write+0xd8>
 80080e8:	2301      	movs	r3, #1
 80080ea:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80080ec:	f7ff fd34 	bl	8007b58 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bf14      	ite	ne
 80080f6:	2301      	movne	r3, #1
 80080f8:	2300      	moveq	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	2000002c 	.word	0x2000002c
 8008108:	20000f7c 	.word	0x20000f7c

0800810c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08c      	sub	sp, #48	@ 0x30
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	603a      	str	r2, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
 8008118:	460b      	mov	r3, r1
 800811a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <USER_SPI_ioctl+0x1a>
 8008122:	2304      	movs	r3, #4
 8008124:	e15a      	b.n	80083dc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008126:	4baf      	ldr	r3, [pc, #700]	@ (80083e4 <USER_SPI_ioctl+0x2d8>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <USER_SPI_ioctl+0x2c>
 8008134:	2303      	movs	r3, #3
 8008136:	e151      	b.n	80083dc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800813e:	79bb      	ldrb	r3, [r7, #6]
 8008140:	2b04      	cmp	r3, #4
 8008142:	f200 8136 	bhi.w	80083b2 <USER_SPI_ioctl+0x2a6>
 8008146:	a201      	add	r2, pc, #4	@ (adr r2, 800814c <USER_SPI_ioctl+0x40>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	08008161 	.word	0x08008161
 8008150:	08008175 	.word	0x08008175
 8008154:	080083b3 	.word	0x080083b3
 8008158:	08008221 	.word	0x08008221
 800815c:	08008317 	.word	0x08008317
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008160:	f7ff fd0a 	bl	8007b78 <spiselect>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8127 	beq.w	80083ba <USER_SPI_ioctl+0x2ae>
 800816c:	2300      	movs	r3, #0
 800816e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008172:	e122      	b.n	80083ba <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008174:	2100      	movs	r1, #0
 8008176:	2009      	movs	r0, #9
 8008178:	f7ff fd75 	bl	8007c66 <send_cmd>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	f040 811d 	bne.w	80083be <USER_SPI_ioctl+0x2b2>
 8008184:	f107 030c 	add.w	r3, r7, #12
 8008188:	2110      	movs	r1, #16
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fd10 	bl	8007bb0 <rcvr_datablock>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8113 	beq.w	80083be <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008198:	7b3b      	ldrb	r3, [r7, #12]
 800819a:	099b      	lsrs	r3, r3, #6
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d111      	bne.n	80081c6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80081a2:	7d7b      	ldrb	r3, [r7, #21]
 80081a4:	461a      	mov	r2, r3
 80081a6:	7d3b      	ldrb	r3, [r7, #20]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	4413      	add	r3, r2
 80081ac:	461a      	mov	r2, r3
 80081ae:	7cfb      	ldrb	r3, [r7, #19]
 80081b0:	041b      	lsls	r3, r3, #16
 80081b2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80081b6:	4413      	add	r3, r2
 80081b8:	3301      	adds	r3, #1
 80081ba:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	029a      	lsls	r2, r3, #10
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	e028      	b.n	8008218 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80081c6:	7c7b      	ldrb	r3, [r7, #17]
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	7dbb      	ldrb	r3, [r7, #22]
 80081d0:	09db      	lsrs	r3, r3, #7
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	4413      	add	r3, r2
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	7d7b      	ldrb	r3, [r7, #21]
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	f003 0306 	and.w	r3, r3, #6
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	4413      	add	r3, r2
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	3302      	adds	r3, #2
 80081ea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80081ee:	7d3b      	ldrb	r3, [r7, #20]
 80081f0:	099b      	lsrs	r3, r3, #6
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	461a      	mov	r2, r3
 80081f6:	7cfb      	ldrb	r3, [r7, #19]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	441a      	add	r2, r3
 80081fc:	7cbb      	ldrb	r3, [r7, #18]
 80081fe:	029b      	lsls	r3, r3, #10
 8008200:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008204:	4413      	add	r3, r2
 8008206:	3301      	adds	r3, #1
 8008208:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800820a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800820e:	3b09      	subs	r3, #9
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	409a      	lsls	r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800821e:	e0ce      	b.n	80083be <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008220:	4b71      	ldr	r3, [pc, #452]	@ (80083e8 <USER_SPI_ioctl+0x2dc>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d031      	beq.n	8008290 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800822c:	2100      	movs	r1, #0
 800822e:	208d      	movs	r0, #141	@ 0x8d
 8008230:	f7ff fd19 	bl	8007c66 <send_cmd>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 80c3 	bne.w	80083c2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800823c:	20ff      	movs	r0, #255	@ 0xff
 800823e:	f7ff fc21 	bl	8007a84 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008242:	f107 030c 	add.w	r3, r7, #12
 8008246:	2110      	movs	r1, #16
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fcb1 	bl	8007bb0 <rcvr_datablock>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80b6 	beq.w	80083c2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008256:	2330      	movs	r3, #48	@ 0x30
 8008258:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800825c:	e007      	b.n	800826e <USER_SPI_ioctl+0x162>
 800825e:	20ff      	movs	r0, #255	@ 0xff
 8008260:	f7ff fc10 	bl	8007a84 <xchg_spi>
 8008264:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008268:	3b01      	subs	r3, #1
 800826a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800826e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1f3      	bne.n	800825e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008276:	7dbb      	ldrb	r3, [r7, #22]
 8008278:	091b      	lsrs	r3, r3, #4
 800827a:	b2db      	uxtb	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	2310      	movs	r3, #16
 8008280:	fa03 f202 	lsl.w	r2, r3, r2
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800828e:	e098      	b.n	80083c2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008290:	2100      	movs	r1, #0
 8008292:	2009      	movs	r0, #9
 8008294:	f7ff fce7 	bl	8007c66 <send_cmd>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	f040 8091 	bne.w	80083c2 <USER_SPI_ioctl+0x2b6>
 80082a0:	f107 030c 	add.w	r3, r7, #12
 80082a4:	2110      	movs	r1, #16
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff fc82 	bl	8007bb0 <rcvr_datablock>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 8087 	beq.w	80083c2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80082b4:	4b4c      	ldr	r3, [pc, #304]	@ (80083e8 <USER_SPI_ioctl+0x2dc>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d012      	beq.n	80082e6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80082c0:	7dbb      	ldrb	r3, [r7, #22]
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80082c8:	7dfa      	ldrb	r2, [r7, #23]
 80082ca:	09d2      	lsrs	r2, r2, #7
 80082cc:	b2d2      	uxtb	r2, r2
 80082ce:	4413      	add	r3, r2
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	7e7b      	ldrb	r3, [r7, #25]
 80082d4:	099b      	lsrs	r3, r3, #6
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	fa02 f303 	lsl.w	r3, r2, r3
 80082de:	461a      	mov	r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e013      	b.n	800830e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80082e6:	7dbb      	ldrb	r3, [r7, #22]
 80082e8:	109b      	asrs	r3, r3, #2
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	3301      	adds	r3, #1
 80082f2:	7dfa      	ldrb	r2, [r7, #23]
 80082f4:	00d2      	lsls	r2, r2, #3
 80082f6:	f002 0218 	and.w	r2, r2, #24
 80082fa:	7df9      	ldrb	r1, [r7, #23]
 80082fc:	0949      	lsrs	r1, r1, #5
 80082fe:	b2c9      	uxtb	r1, r1
 8008300:	440a      	add	r2, r1
 8008302:	3201      	adds	r2, #1
 8008304:	fb02 f303 	mul.w	r3, r2, r3
 8008308:	461a      	mov	r2, r3
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008314:	e055      	b.n	80083c2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008316:	4b34      	ldr	r3, [pc, #208]	@ (80083e8 <USER_SPI_ioctl+0x2dc>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	f003 0306 	and.w	r3, r3, #6
 800831e:	2b00      	cmp	r3, #0
 8008320:	d051      	beq.n	80083c6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008322:	f107 020c 	add.w	r2, r7, #12
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	210b      	movs	r1, #11
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff feee 	bl	800810c <USER_SPI_ioctl>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d149      	bne.n	80083ca <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008336:	7b3b      	ldrb	r3, [r7, #12]
 8008338:	099b      	lsrs	r3, r3, #6
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <USER_SPI_ioctl+0x23e>
 8008340:	7dbb      	ldrb	r3, [r7, #22]
 8008342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	d041      	beq.n	80083ce <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	623b      	str	r3, [r7, #32]
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800835a:	4b23      	ldr	r3, [pc, #140]	@ (80083e8 <USER_SPI_ioctl+0x2dc>)
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d105      	bne.n	8008372 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008368:	025b      	lsls	r3, r3, #9
 800836a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	025b      	lsls	r3, r3, #9
 8008370:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008374:	2020      	movs	r0, #32
 8008376:	f7ff fc76 	bl	8007c66 <send_cmd>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d128      	bne.n	80083d2 <USER_SPI_ioctl+0x2c6>
 8008380:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008382:	2021      	movs	r0, #33	@ 0x21
 8008384:	f7ff fc6f 	bl	8007c66 <send_cmd>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d121      	bne.n	80083d2 <USER_SPI_ioctl+0x2c6>
 800838e:	2100      	movs	r1, #0
 8008390:	2026      	movs	r0, #38	@ 0x26
 8008392:	f7ff fc68 	bl	8007c66 <send_cmd>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d11a      	bne.n	80083d2 <USER_SPI_ioctl+0x2c6>
 800839c:	f247 5030 	movw	r0, #30000	@ 0x7530
 80083a0:	f7ff fbb6 	bl	8007b10 <wait_ready>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d013      	beq.n	80083d2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80083aa:	2300      	movs	r3, #0
 80083ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80083b0:	e00f      	b.n	80083d2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80083b2:	2304      	movs	r3, #4
 80083b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80083b8:	e00c      	b.n	80083d4 <USER_SPI_ioctl+0x2c8>
		break;
 80083ba:	bf00      	nop
 80083bc:	e00a      	b.n	80083d4 <USER_SPI_ioctl+0x2c8>
		break;
 80083be:	bf00      	nop
 80083c0:	e008      	b.n	80083d4 <USER_SPI_ioctl+0x2c8>
		break;
 80083c2:	bf00      	nop
 80083c4:	e006      	b.n	80083d4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80083c6:	bf00      	nop
 80083c8:	e004      	b.n	80083d4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80083ca:	bf00      	nop
 80083cc:	e002      	b.n	80083d4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80083ce:	bf00      	nop
 80083d0:	e000      	b.n	80083d4 <USER_SPI_ioctl+0x2c8>
		break;
 80083d2:	bf00      	nop
	}

	despiselect();
 80083d4:	f7ff fbc0 	bl	8007b58 <despiselect>

	return res;
 80083d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3730      	adds	r7, #48	@ 0x30
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	2000002c 	.word	0x2000002c
 80083e8:	20000f7c 	.word	0x20000f7c

080083ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	4a08      	ldr	r2, [pc, #32]	@ (800841c <disk_status+0x30>)
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	79fa      	ldrb	r2, [r7, #7]
 8008404:	4905      	ldr	r1, [pc, #20]	@ (800841c <disk_status+0x30>)
 8008406:	440a      	add	r2, r1
 8008408:	7a12      	ldrb	r2, [r2, #8]
 800840a:	4610      	mov	r0, r2
 800840c:	4798      	blx	r3
 800840e:	4603      	mov	r3, r0
 8008410:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20000fb0 	.word	0x20000fb0

08008420 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	4a0e      	ldr	r2, [pc, #56]	@ (800846c <disk_initialize+0x4c>)
 8008432:	5cd3      	ldrb	r3, [r2, r3]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d114      	bne.n	8008462 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	4a0c      	ldr	r2, [pc, #48]	@ (800846c <disk_initialize+0x4c>)
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	79fa      	ldrb	r2, [r7, #7]
 8008446:	4909      	ldr	r1, [pc, #36]	@ (800846c <disk_initialize+0x4c>)
 8008448:	440a      	add	r2, r1
 800844a:	7a12      	ldrb	r2, [r2, #8]
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d103      	bne.n	8008462 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	4a03      	ldr	r2, [pc, #12]	@ (800846c <disk_initialize+0x4c>)
 800845e:	2101      	movs	r1, #1
 8008460:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20000fb0 	.word	0x20000fb0

08008470 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008470:	b590      	push	{r4, r7, lr}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	607a      	str	r2, [r7, #4]
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	4a0a      	ldr	r2, [pc, #40]	@ (80084ac <disk_read+0x3c>)
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	689c      	ldr	r4, [r3, #8]
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	4a07      	ldr	r2, [pc, #28]	@ (80084ac <disk_read+0x3c>)
 8008490:	4413      	add	r3, r2
 8008492:	7a18      	ldrb	r0, [r3, #8]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	47a0      	blx	r4
 800849c:	4603      	mov	r3, r0
 800849e:	75fb      	strb	r3, [r7, #23]
  return res;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd90      	pop	{r4, r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000fb0 	.word	0x20000fb0

080084b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80084b0:	b590      	push	{r4, r7, lr}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60b9      	str	r1, [r7, #8]
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	4a0a      	ldr	r2, [pc, #40]	@ (80084ec <disk_write+0x3c>)
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	68dc      	ldr	r4, [r3, #12]
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	4a07      	ldr	r2, [pc, #28]	@ (80084ec <disk_write+0x3c>)
 80084d0:	4413      	add	r3, r2
 80084d2:	7a18      	ldrb	r0, [r3, #8]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	47a0      	blx	r4
 80084dc:	4603      	mov	r3, r0
 80084de:	75fb      	strb	r3, [r7, #23]
  return res;
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd90      	pop	{r4, r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20000fb0 	.word	0x20000fb0

080084f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	603a      	str	r2, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
 80084fc:	460b      	mov	r3, r1
 80084fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	4a09      	ldr	r2, [pc, #36]	@ (8008528 <disk_ioctl+0x38>)
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	79fa      	ldrb	r2, [r7, #7]
 800850e:	4906      	ldr	r1, [pc, #24]	@ (8008528 <disk_ioctl+0x38>)
 8008510:	440a      	add	r2, r1
 8008512:	7a10      	ldrb	r0, [r2, #8]
 8008514:	79b9      	ldrb	r1, [r7, #6]
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4798      	blx	r3
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]
  return res;
 800851e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20000fb0 	.word	0x20000fb0

0800852c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3301      	adds	r3, #1
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800853c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	b21a      	sxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	b21b      	sxth	r3, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	b21b      	sxth	r3, r3
 800854e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008550:	89fb      	ldrh	r3, [r7, #14]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3303      	adds	r3, #3
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	021b      	lsls	r3, r3, #8
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	3202      	adds	r2, #2
 8008576:	7812      	ldrb	r2, [r2, #0]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	021b      	lsls	r3, r3, #8
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	3201      	adds	r2, #1
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	021b      	lsls	r3, r3, #8
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
	return rv;
 8008596:	68fb      	ldr	r3, [r7, #12]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	607a      	str	r2, [r7, #4]
 80085b6:	887a      	ldrh	r2, [r7, #2]
 80085b8:	b2d2      	uxtb	r2, r2
 80085ba:	701a      	strb	r2, [r3, #0]
 80085bc:	887b      	ldrh	r3, [r7, #2]
 80085be:	0a1b      	lsrs	r3, r3, #8
 80085c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	887a      	ldrh	r2, [r7, #2]
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	701a      	strb	r2, [r3, #0]
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	701a      	strb	r2, [r3, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	0a1b      	lsrs	r3, r3, #8
 8008606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	0a1b      	lsrs	r3, r3, #8
 8008618:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	b2d2      	uxtb	r2, r2
 8008624:	701a      	strb	r2, [r3, #0]
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008632:	b480      	push	{r7}
 8008634:	b087      	sub	sp, #28
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00d      	beq.n	8008668 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	1c53      	adds	r3, r2, #1
 8008650:	613b      	str	r3, [r7, #16]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	1c59      	adds	r1, r3, #1
 8008656:	6179      	str	r1, [r7, #20]
 8008658:	7812      	ldrb	r2, [r2, #0]
 800865a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3b01      	subs	r3, #1
 8008660:	607b      	str	r3, [r7, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1f1      	bne.n	800864c <mem_cpy+0x1a>
	}
}
 8008668:	bf00      	nop
 800866a:	371c      	adds	r7, #28
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	617a      	str	r2, [r7, #20]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3b01      	subs	r3, #1
 8008694:	607b      	str	r3, [r7, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1f3      	bne.n	8008684 <mem_set+0x10>
}
 800869c:	bf00      	nop
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80086aa:	b480      	push	{r7}
 80086ac:	b089      	sub	sp, #36	@ 0x24
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	61fa      	str	r2, [r7, #28]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	4619      	mov	r1, r3
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	61ba      	str	r2, [r7, #24]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	1acb      	subs	r3, r1, r3
 80086d6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3b01      	subs	r3, #1
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <mem_cmp+0x40>
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0eb      	beq.n	80086c2 <mem_cmp+0x18>

	return r;
 80086ea:	697b      	ldr	r3, [r7, #20]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3724      	adds	r7, #36	@ 0x24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008702:	e002      	b.n	800870a <chk_chr+0x12>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3301      	adds	r3, #1
 8008708:	607b      	str	r3, [r7, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <chk_chr+0x26>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	4293      	cmp	r3, r2
 800871c:	d1f2      	bne.n	8008704 <chk_chr+0xc>
	return *str;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	781b      	ldrb	r3, [r3, #0]
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
	...

08008730 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800873a:	2300      	movs	r3, #0
 800873c:	60bb      	str	r3, [r7, #8]
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	e029      	b.n	8008798 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008744:	4a27      	ldr	r2, [pc, #156]	@ (80087e4 <chk_lock+0xb4>)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	011b      	lsls	r3, r3, #4
 800874a:	4413      	add	r3, r2
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d01d      	beq.n	800878e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008752:	4a24      	ldr	r2, [pc, #144]	@ (80087e4 <chk_lock+0xb4>)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	011b      	lsls	r3, r3, #4
 8008758:	4413      	add	r3, r2
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d116      	bne.n	8008792 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008764:	4a1f      	ldr	r2, [pc, #124]	@ (80087e4 <chk_lock+0xb4>)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	4413      	add	r3, r2
 800876c:	3304      	adds	r3, #4
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008774:	429a      	cmp	r2, r3
 8008776:	d10c      	bne.n	8008792 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008778:	4a1a      	ldr	r2, [pc, #104]	@ (80087e4 <chk_lock+0xb4>)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	4413      	add	r3, r2
 8008780:	3308      	adds	r3, #8
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008788:	429a      	cmp	r2, r3
 800878a:	d102      	bne.n	8008792 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800878c:	e007      	b.n	800879e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800878e:	2301      	movs	r3, #1
 8008790:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d9d2      	bls.n	8008744 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d109      	bne.n	80087b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d102      	bne.n	80087b0 <chk_lock+0x80>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d101      	bne.n	80087b4 <chk_lock+0x84>
 80087b0:	2300      	movs	r3, #0
 80087b2:	e010      	b.n	80087d6 <chk_lock+0xa6>
 80087b4:	2312      	movs	r3, #18
 80087b6:	e00e      	b.n	80087d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d108      	bne.n	80087d0 <chk_lock+0xa0>
 80087be:	4a09      	ldr	r2, [pc, #36]	@ (80087e4 <chk_lock+0xb4>)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	011b      	lsls	r3, r3, #4
 80087c4:	4413      	add	r3, r2
 80087c6:	330c      	adds	r3, #12
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ce:	d101      	bne.n	80087d4 <chk_lock+0xa4>
 80087d0:	2310      	movs	r3, #16
 80087d2:	e000      	b.n	80087d6 <chk_lock+0xa6>
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20000f90 	.word	0x20000f90

080087e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087ee:	2300      	movs	r3, #0
 80087f0:	607b      	str	r3, [r7, #4]
 80087f2:	e002      	b.n	80087fa <enq_lock+0x12>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3301      	adds	r3, #1
 80087f8:	607b      	str	r3, [r7, #4]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d806      	bhi.n	800880e <enq_lock+0x26>
 8008800:	4a09      	ldr	r2, [pc, #36]	@ (8008828 <enq_lock+0x40>)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	011b      	lsls	r3, r3, #4
 8008806:	4413      	add	r3, r2
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f2      	bne.n	80087f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b02      	cmp	r3, #2
 8008812:	bf14      	ite	ne
 8008814:	2301      	movne	r3, #1
 8008816:	2300      	moveq	r3, #0
 8008818:	b2db      	uxtb	r3, r3
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20000f90 	.word	0x20000f90

0800882c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	e01f      	b.n	800887c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800883c:	4a41      	ldr	r2, [pc, #260]	@ (8008944 <inc_lock+0x118>)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	011b      	lsls	r3, r3, #4
 8008842:	4413      	add	r3, r2
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d113      	bne.n	8008876 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800884e:	4a3d      	ldr	r2, [pc, #244]	@ (8008944 <inc_lock+0x118>)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	4413      	add	r3, r2
 8008856:	3304      	adds	r3, #4
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800885e:	429a      	cmp	r2, r3
 8008860:	d109      	bne.n	8008876 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008862:	4a38      	ldr	r2, [pc, #224]	@ (8008944 <inc_lock+0x118>)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	4413      	add	r3, r2
 800886a:	3308      	adds	r3, #8
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008872:	429a      	cmp	r2, r3
 8008874:	d006      	beq.n	8008884 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d9dc      	bls.n	800883c <inc_lock+0x10>
 8008882:	e000      	b.n	8008886 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008884:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d132      	bne.n	80088f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	e002      	b.n	8008898 <inc_lock+0x6c>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d806      	bhi.n	80088ac <inc_lock+0x80>
 800889e:	4a29      	ldr	r2, [pc, #164]	@ (8008944 <inc_lock+0x118>)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	4413      	add	r3, r2
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1f2      	bne.n	8008892 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d101      	bne.n	80088b6 <inc_lock+0x8a>
 80088b2:	2300      	movs	r3, #0
 80088b4:	e040      	b.n	8008938 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	4922      	ldr	r1, [pc, #136]	@ (8008944 <inc_lock+0x118>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	440b      	add	r3, r1
 80088c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	491e      	ldr	r1, [pc, #120]	@ (8008944 <inc_lock+0x118>)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	011b      	lsls	r3, r3, #4
 80088ce:	440b      	add	r3, r1
 80088d0:	3304      	adds	r3, #4
 80088d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	695a      	ldr	r2, [r3, #20]
 80088d8:	491a      	ldr	r1, [pc, #104]	@ (8008944 <inc_lock+0x118>)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	440b      	add	r3, r1
 80088e0:	3308      	adds	r3, #8
 80088e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80088e4:	4a17      	ldr	r2, [pc, #92]	@ (8008944 <inc_lock+0x118>)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	4413      	add	r3, r2
 80088ec:	330c      	adds	r3, #12
 80088ee:	2200      	movs	r2, #0
 80088f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <inc_lock+0xe0>
 80088f8:	4a12      	ldr	r2, [pc, #72]	@ (8008944 <inc_lock+0x118>)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	4413      	add	r3, r2
 8008900:	330c      	adds	r3, #12
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <inc_lock+0xe0>
 8008908:	2300      	movs	r3, #0
 800890a:	e015      	b.n	8008938 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d108      	bne.n	8008924 <inc_lock+0xf8>
 8008912:	4a0c      	ldr	r2, [pc, #48]	@ (8008944 <inc_lock+0x118>)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	4413      	add	r3, r2
 800891a:	330c      	adds	r3, #12
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	3301      	adds	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	e001      	b.n	8008928 <inc_lock+0xfc>
 8008924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008928:	4906      	ldr	r1, [pc, #24]	@ (8008944 <inc_lock+0x118>)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	011b      	lsls	r3, r3, #4
 800892e:	440b      	add	r3, r1
 8008930:	330c      	adds	r3, #12
 8008932:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3301      	adds	r3, #1
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	20000f90 	.word	0x20000f90

08008948 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3b01      	subs	r3, #1
 8008954:	607b      	str	r3, [r7, #4]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d825      	bhi.n	80089a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800895c:	4a17      	ldr	r2, [pc, #92]	@ (80089bc <dec_lock+0x74>)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	4413      	add	r3, r2
 8008964:	330c      	adds	r3, #12
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800896a:	89fb      	ldrh	r3, [r7, #14]
 800896c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008970:	d101      	bne.n	8008976 <dec_lock+0x2e>
 8008972:	2300      	movs	r3, #0
 8008974:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008976:	89fb      	ldrh	r3, [r7, #14]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <dec_lock+0x3a>
 800897c:	89fb      	ldrh	r3, [r7, #14]
 800897e:	3b01      	subs	r3, #1
 8008980:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008982:	4a0e      	ldr	r2, [pc, #56]	@ (80089bc <dec_lock+0x74>)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	4413      	add	r3, r2
 800898a:	330c      	adds	r3, #12
 800898c:	89fa      	ldrh	r2, [r7, #14]
 800898e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008990:	89fb      	ldrh	r3, [r7, #14]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <dec_lock+0x5a>
 8008996:	4a09      	ldr	r2, [pc, #36]	@ (80089bc <dec_lock+0x74>)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	4413      	add	r3, r2
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	737b      	strb	r3, [r7, #13]
 80089a6:	e001      	b.n	80089ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089a8:	2302      	movs	r3, #2
 80089aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80089ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	20000f90 	.word	0x20000f90

080089c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80089c8:	2300      	movs	r3, #0
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	e010      	b.n	80089f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80089ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008a04 <clear_lock+0x44>)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	4413      	add	r3, r2
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d105      	bne.n	80089ea <clear_lock+0x2a>
 80089de:	4a09      	ldr	r2, [pc, #36]	@ (8008a04 <clear_lock+0x44>)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	4413      	add	r3, r2
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d9eb      	bls.n	80089ce <clear_lock+0xe>
	}
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	20000f90 	.word	0x20000f90

08008a08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	78db      	ldrb	r3, [r3, #3]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d034      	beq.n	8008a86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	7858      	ldrb	r0, [r3, #1]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	f7ff fd3e 	bl	80084b0 <disk_write>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	73fb      	strb	r3, [r7, #15]
 8008a3e:	e022      	b.n	8008a86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	1ad2      	subs	r2, r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d217      	bcs.n	8008a86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	789b      	ldrb	r3, [r3, #2]
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	e010      	b.n	8008a80 <sync_window+0x78>
					wsect += fs->fsize;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	4413      	add	r3, r2
 8008a66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7858      	ldrb	r0, [r3, #1]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a72:	2301      	movs	r3, #1
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	f7ff fd1b 	bl	80084b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	613b      	str	r3, [r7, #16]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d8eb      	bhi.n	8008a5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d01b      	beq.n	8008ae0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff ffad 	bl	8008a08 <sync_window>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d113      	bne.n	8008ae0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7858      	ldrb	r0, [r3, #1]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	f7ff fcd3 	bl	8008470 <disk_read>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff ff87 	bl	8008a08 <sync_window>
 8008afa:	4603      	mov	r3, r0
 8008afc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d158      	bne.n	8008bb6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d148      	bne.n	8008b9e <sync_fs+0xb2>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	791b      	ldrb	r3, [r3, #4]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d144      	bne.n	8008b9e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3330      	adds	r3, #48	@ 0x30
 8008b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff fda8 	bl	8008674 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3330      	adds	r3, #48	@ 0x30
 8008b28:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b2c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff fd37 	bl	80085a4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3330      	adds	r3, #48	@ 0x30
 8008b3a:	4921      	ldr	r1, [pc, #132]	@ (8008bc0 <sync_fs+0xd4>)
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fd4c 	bl	80085da <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3330      	adds	r3, #48	@ 0x30
 8008b46:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008b4a:	491e      	ldr	r1, [pc, #120]	@ (8008bc4 <sync_fs+0xd8>)
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff fd44 	bl	80085da <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3330      	adds	r3, #48	@ 0x30
 8008b56:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4610      	mov	r0, r2
 8008b62:	f7ff fd3a 	bl	80085da <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3330      	adds	r3, #48	@ 0x30
 8008b6a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f7ff fd30 	bl	80085da <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	7858      	ldrb	r0, [r3, #1]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b92:	2301      	movs	r3, #1
 8008b94:	f7ff fc8c 	bl	80084b0 <disk_write>
			fs->fsi_flag = 0;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	785b      	ldrb	r3, [r3, #1]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff fca2 	bl	80084f0 <disk_ioctl>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <sync_fs+0xca>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	41615252 	.word	0x41615252
 8008bc4:	61417272 	.word	0x61417272

08008bc8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	3b02      	subs	r3, #2
 8008bd6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	3b02      	subs	r3, #2
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d301      	bcc.n	8008be8 <clust2sect+0x20>
 8008be4:	2300      	movs	r3, #0
 8008be6:	e008      	b.n	8008bfa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	895b      	ldrh	r3, [r3, #10]
 8008bec:	461a      	mov	r2, r3
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	fb03 f202 	mul.w	r2, r3, r2
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	4413      	add	r3, r2
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b086      	sub	sp, #24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d904      	bls.n	8008c26 <get_fat+0x20>
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d302      	bcc.n	8008c2c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c26:	2301      	movs	r3, #1
 8008c28:	617b      	str	r3, [r7, #20]
 8008c2a:	e08e      	b.n	8008d4a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d061      	beq.n	8008cfe <get_fat+0xf8>
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	dc7b      	bgt.n	8008d36 <get_fat+0x130>
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d002      	beq.n	8008c48 <get_fat+0x42>
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d041      	beq.n	8008cca <get_fat+0xc4>
 8008c46:	e076      	b.n	8008d36 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	085b      	lsrs	r3, r3, #1
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	0a5b      	lsrs	r3, r3, #9
 8008c5e:	4413      	add	r3, r2
 8008c60:	4619      	mov	r1, r3
 8008c62:	6938      	ldr	r0, [r7, #16]
 8008c64:	f7ff ff14 	bl	8008a90 <move_window>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d166      	bne.n	8008d3c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	60fa      	str	r2, [r7, #12]
 8008c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6a1a      	ldr	r2, [r3, #32]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	0a5b      	lsrs	r3, r3, #9
 8008c8a:	4413      	add	r3, r2
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6938      	ldr	r0, [r7, #16]
 8008c90:	f7ff fefe 	bl	8008a90 <move_window>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d152      	bne.n	8008d40 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ca8:	021b      	lsls	r3, r3, #8
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <get_fat+0xba>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	091b      	lsrs	r3, r3, #4
 8008cbe:	e002      	b.n	8008cc6 <get_fat+0xc0>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cc6:	617b      	str	r3, [r7, #20]
			break;
 8008cc8:	e03f      	b.n	8008d4a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	6a1a      	ldr	r2, [r3, #32]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	0a1b      	lsrs	r3, r3, #8
 8008cd2:	4413      	add	r3, r2
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6938      	ldr	r0, [r7, #16]
 8008cd8:	f7ff feda 	bl	8008a90 <move_window>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d130      	bne.n	8008d44 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008cf0:	4413      	add	r3, r2
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff fc1a 	bl	800852c <ld_word>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	617b      	str	r3, [r7, #20]
			break;
 8008cfc:	e025      	b.n	8008d4a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6a1a      	ldr	r2, [r3, #32]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	09db      	lsrs	r3, r3, #7
 8008d06:	4413      	add	r3, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6938      	ldr	r0, [r7, #16]
 8008d0c:	f7ff fec0 	bl	8008a90 <move_window>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d118      	bne.n	8008d48 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008d24:	4413      	add	r3, r2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff fc19 	bl	800855e <ld_dword>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008d32:	617b      	str	r3, [r7, #20]
			break;
 8008d34:	e009      	b.n	8008d4a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008d36:	2301      	movs	r3, #1
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	e006      	b.n	8008d4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d3c:	bf00      	nop
 8008d3e:	e004      	b.n	8008d4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d40:	bf00      	nop
 8008d42:	e002      	b.n	8008d4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d44:	bf00      	nop
 8008d46:	e000      	b.n	8008d4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d48:	bf00      	nop
		}
	}

	return val;
 8008d4a:	697b      	ldr	r3, [r7, #20]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b089      	sub	sp, #36	@ 0x24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008d60:	2302      	movs	r3, #2
 8008d62:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	f240 80d9 	bls.w	8008f1e <put_fat+0x1ca>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	f080 80d3 	bcs.w	8008f1e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	f000 8096 	beq.w	8008eae <put_fat+0x15a>
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	f300 80cb 	bgt.w	8008f1e <put_fat+0x1ca>
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d002      	beq.n	8008d92 <put_fat+0x3e>
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d06e      	beq.n	8008e6e <put_fat+0x11a>
 8008d90:	e0c5      	b.n	8008f1e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	61bb      	str	r3, [r7, #24]
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a1a      	ldr	r2, [r3, #32]
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	0a5b      	lsrs	r3, r3, #9
 8008da8:	4413      	add	r3, r2
 8008daa:	4619      	mov	r1, r3
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff fe6f 	bl	8008a90 <move_window>
 8008db2:	4603      	mov	r3, r0
 8008db4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008db6:	7ffb      	ldrb	r3, [r7, #31]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 80a9 	bne.w	8008f10 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	1c59      	adds	r1, r3, #1
 8008dc8:	61b9      	str	r1, [r7, #24]
 8008dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dce:	4413      	add	r3, r2
 8008dd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00d      	beq.n	8008df8 <put_fat+0xa4>
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	b25b      	sxtb	r3, r3
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	b25a      	sxtb	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	b25b      	sxtb	r3, r3
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	b25b      	sxtb	r3, r3
 8008df0:	4313      	orrs	r3, r2
 8008df2:	b25b      	sxtb	r3, r3
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	e001      	b.n	8008dfc <put_fat+0xa8>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a1a      	ldr	r2, [r3, #32]
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	0a5b      	lsrs	r3, r3, #9
 8008e0e:	4413      	add	r3, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f7ff fe3c 	bl	8008a90 <move_window>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e1c:	7ffb      	ldrb	r3, [r7, #31]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d178      	bne.n	8008f14 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2e:	4413      	add	r3, r2
 8008e30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <put_fat+0xf0>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	091b      	lsrs	r3, r3, #4
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	e00e      	b.n	8008e62 <put_fat+0x10e>
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	b25b      	sxtb	r3, r3
 8008e4a:	f023 030f 	bic.w	r3, r3, #15
 8008e4e:	b25a      	sxtb	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	0a1b      	lsrs	r3, r3, #8
 8008e54:	b25b      	sxtb	r3, r3
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	b25b      	sxtb	r3, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	b25b      	sxtb	r3, r3
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	70da      	strb	r2, [r3, #3]
			break;
 8008e6c:	e057      	b.n	8008f1e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6a1a      	ldr	r2, [r3, #32]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	0a1b      	lsrs	r3, r3, #8
 8008e76:	4413      	add	r3, r2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f7ff fe08 	bl	8008a90 <move_window>
 8008e80:	4603      	mov	r3, r0
 8008e82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e84:	7ffb      	ldrb	r3, [r7, #31]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d146      	bne.n	8008f18 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008e98:	4413      	add	r3, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	b292      	uxth	r2, r2
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff fb7f 	bl	80085a4 <st_word>
			fs->wflag = 1;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	70da      	strb	r2, [r3, #3]
			break;
 8008eac:	e037      	b.n	8008f1e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	09db      	lsrs	r3, r3, #7
 8008eb6:	4413      	add	r3, r2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fde8 	bl	8008a90 <move_window>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ec4:	7ffb      	ldrb	r3, [r7, #31]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d128      	bne.n	8008f1c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008ede:	4413      	add	r3, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff fb3c 	bl	800855e <ld_dword>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008eec:	4323      	orrs	r3, r4
 8008eee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008efe:	4413      	add	r3, r2
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff fb69 	bl	80085da <st_dword>
			fs->wflag = 1;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	70da      	strb	r2, [r3, #3]
			break;
 8008f0e:	e006      	b.n	8008f1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f10:	bf00      	nop
 8008f12:	e004      	b.n	8008f1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f14:	bf00      	nop
 8008f16:	e002      	b.n	8008f1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f18:	bf00      	nop
 8008f1a:	e000      	b.n	8008f1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f1c:	bf00      	nop
		}
	}
	return res;
 8008f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3724      	adds	r7, #36	@ 0x24
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd90      	pop	{r4, r7, pc}

08008f28 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d904      	bls.n	8008f4e <remove_chain+0x26>
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d301      	bcc.n	8008f52 <remove_chain+0x2a>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e04b      	b.n	8008fea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00c      	beq.n	8008f72 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008f58:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	69b8      	ldr	r0, [r7, #24]
 8008f60:	f7ff fef8 	bl	8008d54 <put_fat>
 8008f64:	4603      	mov	r3, r0
 8008f66:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008f68:	7ffb      	ldrb	r3, [r7, #31]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <remove_chain+0x4a>
 8008f6e:	7ffb      	ldrb	r3, [r7, #31]
 8008f70:	e03b      	b.n	8008fea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008f72:	68b9      	ldr	r1, [r7, #8]
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff fe46 	bl	8008c06 <get_fat>
 8008f7a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d031      	beq.n	8008fe6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <remove_chain+0x64>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e02e      	b.n	8008fea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f92:	d101      	bne.n	8008f98 <remove_chain+0x70>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e028      	b.n	8008fea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008f98:	2200      	movs	r2, #0
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	69b8      	ldr	r0, [r7, #24]
 8008f9e:	f7ff fed9 	bl	8008d54 <put_fat>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008fa6:	7ffb      	ldrb	r3, [r7, #31]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <remove_chain+0x88>
 8008fac:	7ffb      	ldrb	r3, [r7, #31]
 8008fae:	e01c      	b.n	8008fea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	691a      	ldr	r2, [r3, #16]
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	3b02      	subs	r3, #2
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d20b      	bcs.n	8008fd6 <remove_chain+0xae>
			fs->free_clst++;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	791b      	ldrb	r3, [r3, #4]
 8008fcc:	f043 0301 	orr.w	r3, r3, #1
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d3c6      	bcc.n	8008f72 <remove_chain+0x4a>
 8008fe4:	e000      	b.n	8008fe8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008fe6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3720      	adds	r7, #32
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b088      	sub	sp, #32
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10d      	bne.n	8009024 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <create_chain+0x2c>
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	695b      	ldr	r3, [r3, #20]
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	429a      	cmp	r2, r3
 800901c:	d31b      	bcc.n	8009056 <create_chain+0x64>
 800901e:	2301      	movs	r3, #1
 8009020:	61bb      	str	r3, [r7, #24]
 8009022:	e018      	b.n	8009056 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff fded 	bl	8008c06 <get_fat>
 800902c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d801      	bhi.n	8009038 <create_chain+0x46>
 8009034:	2301      	movs	r3, #1
 8009036:	e070      	b.n	800911a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903e:	d101      	bne.n	8009044 <create_chain+0x52>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	e06a      	b.n	800911a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	429a      	cmp	r2, r3
 800904c:	d201      	bcs.n	8009052 <create_chain+0x60>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	e063      	b.n	800911a <create_chain+0x128>
		scl = clst;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	3301      	adds	r3, #1
 800905e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	429a      	cmp	r2, r3
 8009068:	d307      	bcc.n	800907a <create_chain+0x88>
				ncl = 2;
 800906a:	2302      	movs	r3, #2
 800906c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800906e:	69fa      	ldr	r2, [r7, #28]
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	429a      	cmp	r2, r3
 8009074:	d901      	bls.n	800907a <create_chain+0x88>
 8009076:	2300      	movs	r3, #0
 8009078:	e04f      	b.n	800911a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800907a:	69f9      	ldr	r1, [r7, #28]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff fdc2 	bl	8008c06 <get_fat>
 8009082:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00e      	beq.n	80090a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d003      	beq.n	8009098 <create_chain+0xa6>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009096:	d101      	bne.n	800909c <create_chain+0xaa>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	e03e      	b.n	800911a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800909c:	69fa      	ldr	r2, [r7, #28]
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d1da      	bne.n	800905a <create_chain+0x68>
 80090a4:	2300      	movs	r3, #0
 80090a6:	e038      	b.n	800911a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80090a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80090aa:	f04f 32ff 	mov.w	r2, #4294967295
 80090ae:	69f9      	ldr	r1, [r7, #28]
 80090b0:	6938      	ldr	r0, [r7, #16]
 80090b2:	f7ff fe4f 	bl	8008d54 <put_fat>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d109      	bne.n	80090d4 <create_chain+0xe2>
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d006      	beq.n	80090d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6938      	ldr	r0, [r7, #16]
 80090cc:	f7ff fe42 	bl	8008d54 <put_fat>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d116      	bne.n	8009108 <create_chain+0x116>
		fs->last_clst = ncl;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	3b02      	subs	r3, #2
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d804      	bhi.n	80090f8 <create_chain+0x106>
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	1e5a      	subs	r2, r3, #1
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	791b      	ldrb	r3, [r3, #4]
 80090fc:	f043 0301 	orr.w	r3, r3, #1
 8009100:	b2da      	uxtb	r2, r3
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	711a      	strb	r2, [r3, #4]
 8009106:	e007      	b.n	8009118 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d102      	bne.n	8009114 <create_chain+0x122>
 800910e:	f04f 33ff 	mov.w	r3, #4294967295
 8009112:	e000      	b.n	8009116 <create_chain+0x124>
 8009114:	2301      	movs	r3, #1
 8009116:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009118:	69fb      	ldr	r3, [r7, #28]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3720      	adds	r7, #32
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009122:	b480      	push	{r7}
 8009124:	b087      	sub	sp, #28
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009136:	3304      	adds	r3, #4
 8009138:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	0a5b      	lsrs	r3, r3, #9
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	8952      	ldrh	r2, [r2, #10]
 8009142:	fbb3 f3f2 	udiv	r3, r3, r2
 8009146:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	1d1a      	adds	r2, r3, #4
 800914c:	613a      	str	r2, [r7, #16]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <clmt_clust+0x3a>
 8009158:	2300      	movs	r3, #0
 800915a:	e010      	b.n	800917e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	429a      	cmp	r2, r3
 8009162:	d307      	bcc.n	8009174 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	3304      	adds	r3, #4
 8009170:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009172:	e7e9      	b.n	8009148 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009174:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	4413      	add	r3, r2
}
 800917e:	4618      	mov	r0, r3
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b086      	sub	sp, #24
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091a0:	d204      	bcs.n	80091ac <dir_sdi+0x22>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	f003 031f 	and.w	r3, r3, #31
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80091ac:	2302      	movs	r3, #2
 80091ae:	e063      	b.n	8009278 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d106      	bne.n	80091d0 <dir_sdi+0x46>
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d902      	bls.n	80091d0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10c      	bne.n	80091f0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	095b      	lsrs	r3, r3, #5
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	8912      	ldrh	r2, [r2, #8]
 80091de:	4293      	cmp	r3, r2
 80091e0:	d301      	bcc.n	80091e6 <dir_sdi+0x5c>
 80091e2:	2302      	movs	r3, #2
 80091e4:	e048      	b.n	8009278 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	61da      	str	r2, [r3, #28]
 80091ee:	e029      	b.n	8009244 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	895b      	ldrh	r3, [r3, #10]
 80091f4:	025b      	lsls	r3, r3, #9
 80091f6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80091f8:	e019      	b.n	800922e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6979      	ldr	r1, [r7, #20]
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff fd01 	bl	8008c06 <get_fat>
 8009204:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920c:	d101      	bne.n	8009212 <dir_sdi+0x88>
 800920e:	2301      	movs	r3, #1
 8009210:	e032      	b.n	8009278 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d904      	bls.n	8009222 <dir_sdi+0x98>
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	429a      	cmp	r2, r3
 8009220:	d301      	bcc.n	8009226 <dir_sdi+0x9c>
 8009222:	2302      	movs	r3, #2
 8009224:	e028      	b.n	8009278 <dir_sdi+0xee>
			ofs -= csz;
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	429a      	cmp	r2, r3
 8009234:	d2e1      	bcs.n	80091fa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009236:	6979      	ldr	r1, [r7, #20]
 8009238:	6938      	ldr	r0, [r7, #16]
 800923a:	f7ff fcc5 	bl	8008bc8 <clust2sect>
 800923e:	4602      	mov	r2, r0
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <dir_sdi+0xcc>
 8009252:	2302      	movs	r3, #2
 8009254:	e010      	b.n	8009278 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	69da      	ldr	r2, [r3, #28]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	0a5b      	lsrs	r3, r3, #9
 800925e:	441a      	add	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009270:	441a      	add	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	3320      	adds	r3, #32
 8009296:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <dir_next+0x28>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092a6:	d301      	bcc.n	80092ac <dir_next+0x2c>
 80092a8:	2304      	movs	r3, #4
 80092aa:	e0aa      	b.n	8009402 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f040 8098 	bne.w	80093e8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	095b      	lsrs	r3, r3, #5
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	8912      	ldrh	r2, [r2, #8]
 80092d2:	4293      	cmp	r3, r2
 80092d4:	f0c0 8088 	bcc.w	80093e8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	61da      	str	r2, [r3, #28]
 80092de:	2304      	movs	r3, #4
 80092e0:	e08f      	b.n	8009402 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	0a5b      	lsrs	r3, r3, #9
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	8952      	ldrh	r2, [r2, #10]
 80092ea:	3a01      	subs	r2, #1
 80092ec:	4013      	ands	r3, r2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d17a      	bne.n	80093e8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	4619      	mov	r1, r3
 80092fa:	4610      	mov	r0, r2
 80092fc:	f7ff fc83 	bl	8008c06 <get_fat>
 8009300:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d801      	bhi.n	800930c <dir_next+0x8c>
 8009308:	2302      	movs	r3, #2
 800930a:	e07a      	b.n	8009402 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009312:	d101      	bne.n	8009318 <dir_next+0x98>
 8009314:	2301      	movs	r3, #1
 8009316:	e074      	b.n	8009402 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	429a      	cmp	r2, r3
 8009320:	d358      	bcc.n	80093d4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d104      	bne.n	8009332 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	61da      	str	r2, [r3, #28]
 800932e:	2304      	movs	r3, #4
 8009330:	e067      	b.n	8009402 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	4619      	mov	r1, r3
 800933a:	4610      	mov	r0, r2
 800933c:	f7ff fe59 	bl	8008ff2 <create_chain>
 8009340:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <dir_next+0xcc>
 8009348:	2307      	movs	r3, #7
 800934a:	e05a      	b.n	8009402 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <dir_next+0xd6>
 8009352:	2302      	movs	r3, #2
 8009354:	e055      	b.n	8009402 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935c:	d101      	bne.n	8009362 <dir_next+0xe2>
 800935e:	2301      	movs	r3, #1
 8009360:	e04f      	b.n	8009402 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff fb50 	bl	8008a08 <sync_window>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <dir_next+0xf2>
 800936e:	2301      	movs	r3, #1
 8009370:	e047      	b.n	8009402 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3330      	adds	r3, #48	@ 0x30
 8009376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff f979 	bl	8008674 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009382:	2300      	movs	r3, #0
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	6979      	ldr	r1, [r7, #20]
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7ff fc1d 	bl	8008bc8 <clust2sect>
 800938e:	4602      	mov	r2, r0
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009394:	e012      	b.n	80093bc <dir_next+0x13c>
						fs->wflag = 1;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f7ff fb33 	bl	8008a08 <sync_window>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <dir_next+0x12c>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e02a      	b.n	8009402 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	3301      	adds	r3, #1
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	895b      	ldrh	r3, [r3, #10]
 80093c0:	461a      	mov	r2, r3
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d3e6      	bcc.n	8009396 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	1ad2      	subs	r2, r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80093da:	6979      	ldr	r1, [r7, #20]
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff fbf3 	bl	8008bc8 <clust2sect>
 80093e2:	4602      	mov	r2, r0
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fa:	441a      	add	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b086      	sub	sp, #24
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff feb4 	bl	800918a <dir_sdi>
 8009422:	4603      	mov	r3, r0
 8009424:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d12b      	bne.n	8009484 <dir_alloc+0x7a>
		n = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	4619      	mov	r1, r3
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7ff fb2a 	bl	8008a90 <move_window>
 800943c:	4603      	mov	r3, r0
 800943e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d11d      	bne.n	8009482 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2be5      	cmp	r3, #229	@ 0xe5
 800944e:	d004      	beq.n	800945a <dir_alloc+0x50>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d107      	bne.n	800946a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	3301      	adds	r3, #1
 800945e:	613b      	str	r3, [r7, #16]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d102      	bne.n	800946e <dir_alloc+0x64>
 8009468:	e00c      	b.n	8009484 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800946a:	2300      	movs	r3, #0
 800946c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800946e:	2101      	movs	r1, #1
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff ff05 	bl	8009280 <dir_next>
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0d7      	beq.n	8009430 <dir_alloc+0x26>
 8009480:	e000      	b.n	8009484 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009482:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	2b04      	cmp	r3, #4
 8009488:	d101      	bne.n	800948e <dir_alloc+0x84>
 800948a:	2307      	movs	r3, #7
 800948c:	75fb      	strb	r3, [r7, #23]
	return res;
 800948e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	331a      	adds	r3, #26
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7ff f840 	bl	800852c <ld_word>
 80094ac:	4603      	mov	r3, r0
 80094ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d109      	bne.n	80094cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	3314      	adds	r3, #20
 80094bc:	4618      	mov	r0, r3
 80094be:	f7ff f835 	bl	800852c <ld_word>
 80094c2:	4603      	mov	r3, r0
 80094c4:	041b      	lsls	r3, r3, #16
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80094cc:	68fb      	ldr	r3, [r7, #12]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	331a      	adds	r3, #26
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	b292      	uxth	r2, r2
 80094ea:	4611      	mov	r1, r2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff f859 	bl	80085a4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d109      	bne.n	800950e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f103 0214 	add.w	r2, r3, #20
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	0c1b      	lsrs	r3, r3, #16
 8009504:	b29b      	uxth	r3, r3
 8009506:	4619      	mov	r1, r3
 8009508:	4610      	mov	r0, r2
 800950a:	f7ff f84b 	bl	80085a4 <st_word>
	}
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b086      	sub	sp, #24
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009520:	2304      	movs	r3, #4
 8009522:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800952a:	e03c      	b.n	80095a6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	4619      	mov	r1, r3
 8009532:	6938      	ldr	r0, [r7, #16]
 8009534:	f7ff faac 	bl	8008a90 <move_window>
 8009538:	4603      	mov	r3, r0
 800953a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d136      	bne.n	80095b0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d102      	bne.n	8009556 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009550:	2304      	movs	r3, #4
 8009552:	75fb      	strb	r3, [r7, #23]
 8009554:	e031      	b.n	80095ba <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	330b      	adds	r3, #11
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009562:	73bb      	strb	r3, [r7, #14]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7bba      	ldrb	r2, [r7, #14]
 8009568:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	2be5      	cmp	r3, #229	@ 0xe5
 800956e:	d011      	beq.n	8009594 <dir_read+0x7e>
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	2b2e      	cmp	r3, #46	@ 0x2e
 8009574:	d00e      	beq.n	8009594 <dir_read+0x7e>
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b0f      	cmp	r3, #15
 800957a:	d00b      	beq.n	8009594 <dir_read+0x7e>
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	f023 0320 	bic.w	r3, r3, #32
 8009582:	2b08      	cmp	r3, #8
 8009584:	bf0c      	ite	eq
 8009586:	2301      	moveq	r3, #1
 8009588:	2300      	movne	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	461a      	mov	r2, r3
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	4293      	cmp	r3, r2
 8009592:	d00f      	beq.n	80095b4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009594:	2100      	movs	r1, #0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff fe72 	bl	8009280 <dir_next>
 800959c:	4603      	mov	r3, r0
 800959e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d108      	bne.n	80095b8 <dir_read+0xa2>
	while (dp->sect) {
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1be      	bne.n	800952c <dir_read+0x16>
 80095ae:	e004      	b.n	80095ba <dir_read+0xa4>
		if (res != FR_OK) break;
 80095b0:	bf00      	nop
 80095b2:	e002      	b.n	80095ba <dir_read+0xa4>
				break;
 80095b4:	bf00      	nop
 80095b6:	e000      	b.n	80095ba <dir_read+0xa4>
		if (res != FR_OK) break;
 80095b8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <dir_read+0xb0>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	61da      	str	r2, [r3, #28]
	return res;
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80095de:	2100      	movs	r1, #0
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff fdd2 	bl	800918a <dir_sdi>
 80095e6:	4603      	mov	r3, r0
 80095e8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <dir_find+0x24>
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	e03e      	b.n	8009672 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	4619      	mov	r1, r3
 80095fa:	6938      	ldr	r0, [r7, #16]
 80095fc:	f7ff fa48 	bl	8008a90 <move_window>
 8009600:	4603      	mov	r3, r0
 8009602:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d12f      	bne.n	800966a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d102      	bne.n	800961e <dir_find+0x4e>
 8009618:	2304      	movs	r3, #4
 800961a:	75fb      	strb	r3, [r7, #23]
 800961c:	e028      	b.n	8009670 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	330b      	adds	r3, #11
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800962a:	b2da      	uxtb	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	330b      	adds	r3, #11
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	f003 0308 	and.w	r3, r3, #8
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <dir_find+0x86>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a18      	ldr	r0, [r3, #32]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3324      	adds	r3, #36	@ 0x24
 8009648:	220b      	movs	r2, #11
 800964a:	4619      	mov	r1, r3
 800964c:	f7ff f82d 	bl	80086aa <mem_cmp>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009656:	2100      	movs	r1, #0
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff fe11 	bl	8009280 <dir_next>
 800965e:	4603      	mov	r3, r0
 8009660:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d0c5      	beq.n	80095f4 <dir_find+0x24>
 8009668:	e002      	b.n	8009670 <dir_find+0xa0>
		if (res != FR_OK) break;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800966e:	bf00      	nop

	return res;
 8009670:	7dfb      	ldrb	r3, [r7, #23]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009688:	2101      	movs	r1, #1
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7ff febd 	bl	800940a <dir_alloc>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d11c      	bne.n	80096d4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	69db      	ldr	r3, [r3, #28]
 800969e:	4619      	mov	r1, r3
 80096a0:	68b8      	ldr	r0, [r7, #8]
 80096a2:	f7ff f9f5 	bl	8008a90 <move_window>
 80096a6:	4603      	mov	r3, r0
 80096a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d111      	bne.n	80096d4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	2220      	movs	r2, #32
 80096b6:	2100      	movs	r1, #0
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe ffdb 	bl	8008674 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a18      	ldr	r0, [r3, #32]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3324      	adds	r3, #36	@ 0x24
 80096c6:	220b      	movs	r2, #11
 80096c8:	4619      	mov	r1, r3
 80096ca:	f7fe ffb2 	bl	8008632 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2201      	movs	r2, #1
 80096d2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	4619      	mov	r1, r3
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f7ff f9cc 	bl	8008a90 <move_window>
 80096f8:	4603      	mov	r3, r0
 80096fa:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80096fc:	7afb      	ldrb	r3, [r7, #11]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	22e5      	movs	r2, #229	@ 0xe5
 8009708:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2201      	movs	r2, #1
 800970e:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8009710:	7afb      	ldrb	r3, [r7, #11]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b088      	sub	sp, #32
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3324      	adds	r3, #36	@ 0x24
 8009730:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009732:	220b      	movs	r2, #11
 8009734:	2120      	movs	r1, #32
 8009736:	68b8      	ldr	r0, [r7, #8]
 8009738:	f7fe ff9c 	bl	8008674 <mem_set>
	si = i = 0; ni = 8;
 800973c:	2300      	movs	r3, #0
 800973e:	613b      	str	r3, [r7, #16]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	61fb      	str	r3, [r7, #28]
 8009744:	2308      	movs	r3, #8
 8009746:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	61fa      	str	r2, [r7, #28]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	4413      	add	r3, r2
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009756:	7efb      	ldrb	r3, [r7, #27]
 8009758:	2b20      	cmp	r3, #32
 800975a:	d94e      	bls.n	80097fa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800975c:	7efb      	ldrb	r3, [r7, #27]
 800975e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009760:	d006      	beq.n	8009770 <create_name+0x54>
 8009762:	7efb      	ldrb	r3, [r7, #27]
 8009764:	2b5c      	cmp	r3, #92	@ 0x5c
 8009766:	d110      	bne.n	800978a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009768:	e002      	b.n	8009770 <create_name+0x54>
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	3301      	adds	r3, #1
 800976e:	61fb      	str	r3, [r7, #28]
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	4413      	add	r3, r2
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b2f      	cmp	r3, #47	@ 0x2f
 800977a:	d0f6      	beq.n	800976a <create_name+0x4e>
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	4413      	add	r3, r2
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b5c      	cmp	r3, #92	@ 0x5c
 8009786:	d0f0      	beq.n	800976a <create_name+0x4e>
			break;
 8009788:	e038      	b.n	80097fc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800978a:	7efb      	ldrb	r3, [r7, #27]
 800978c:	2b2e      	cmp	r3, #46	@ 0x2e
 800978e:	d003      	beq.n	8009798 <create_name+0x7c>
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	429a      	cmp	r2, r3
 8009796:	d30c      	bcc.n	80097b2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b0b      	cmp	r3, #11
 800979c:	d002      	beq.n	80097a4 <create_name+0x88>
 800979e:	7efb      	ldrb	r3, [r7, #27]
 80097a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80097a2:	d001      	beq.n	80097a8 <create_name+0x8c>
 80097a4:	2306      	movs	r3, #6
 80097a6:	e044      	b.n	8009832 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80097a8:	2308      	movs	r3, #8
 80097aa:	613b      	str	r3, [r7, #16]
 80097ac:	230b      	movs	r3, #11
 80097ae:	617b      	str	r3, [r7, #20]
			continue;
 80097b0:	e022      	b.n	80097f8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80097b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	da04      	bge.n	80097c4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80097ba:	7efb      	ldrb	r3, [r7, #27]
 80097bc:	3b80      	subs	r3, #128	@ 0x80
 80097be:	4a1f      	ldr	r2, [pc, #124]	@ (800983c <create_name+0x120>)
 80097c0:	5cd3      	ldrb	r3, [r2, r3]
 80097c2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80097c4:	7efb      	ldrb	r3, [r7, #27]
 80097c6:	4619      	mov	r1, r3
 80097c8:	481d      	ldr	r0, [pc, #116]	@ (8009840 <create_name+0x124>)
 80097ca:	f7fe ff95 	bl	80086f8 <chk_chr>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <create_name+0xbc>
 80097d4:	2306      	movs	r3, #6
 80097d6:	e02c      	b.n	8009832 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80097d8:	7efb      	ldrb	r3, [r7, #27]
 80097da:	2b60      	cmp	r3, #96	@ 0x60
 80097dc:	d905      	bls.n	80097ea <create_name+0xce>
 80097de:	7efb      	ldrb	r3, [r7, #27]
 80097e0:	2b7a      	cmp	r3, #122	@ 0x7a
 80097e2:	d802      	bhi.n	80097ea <create_name+0xce>
 80097e4:	7efb      	ldrb	r3, [r7, #27]
 80097e6:	3b20      	subs	r3, #32
 80097e8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	613a      	str	r2, [r7, #16]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	4413      	add	r3, r2
 80097f4:	7efa      	ldrb	r2, [r7, #27]
 80097f6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80097f8:	e7a6      	b.n	8009748 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80097fa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	441a      	add	r2, r3
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <create_name+0xf4>
 800980c:	2306      	movs	r3, #6
 800980e:	e010      	b.n	8009832 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2be5      	cmp	r3, #229	@ 0xe5
 8009816:	d102      	bne.n	800981e <create_name+0x102>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2205      	movs	r2, #5
 800981c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800981e:	7efb      	ldrb	r3, [r7, #27]
 8009820:	2b20      	cmp	r3, #32
 8009822:	d801      	bhi.n	8009828 <create_name+0x10c>
 8009824:	2204      	movs	r2, #4
 8009826:	e000      	b.n	800982a <create_name+0x10e>
 8009828:	2200      	movs	r2, #0
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	330b      	adds	r3, #11
 800982e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009830:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009832:	4618      	mov	r0, r3
 8009834:	3720      	adds	r7, #32
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	080110d0 	.word	0x080110d0
 8009840:	0800ff10 	.word	0x0800ff10

08009844 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009858:	e002      	b.n	8009860 <follow_path+0x1c>
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	3301      	adds	r3, #1
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2b2f      	cmp	r3, #47	@ 0x2f
 8009866:	d0f8      	beq.n	800985a <follow_path+0x16>
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b5c      	cmp	r3, #92	@ 0x5c
 800986e:	d0f4      	beq.n	800985a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	2200      	movs	r2, #0
 8009874:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	2b1f      	cmp	r3, #31
 800987c:	d80a      	bhi.n	8009894 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2280      	movs	r2, #128	@ 0x80
 8009882:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009886:	2100      	movs	r1, #0
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff fc7e 	bl	800918a <dir_sdi>
 800988e:	4603      	mov	r3, r0
 8009890:	75fb      	strb	r3, [r7, #23]
 8009892:	e043      	b.n	800991c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009894:	463b      	mov	r3, r7
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff ff3f 	bl	800971c <create_name>
 800989e:	4603      	mov	r3, r0
 80098a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d134      	bne.n	8009912 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff fe91 	bl	80095d0 <dir_find>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80098b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00a      	beq.n	80098d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d127      	bne.n	8009916 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d122      	bne.n	8009916 <follow_path+0xd2>
 80098d0:	2305      	movs	r3, #5
 80098d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80098d4:	e01f      	b.n	8009916 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	f003 0304 	and.w	r3, r3, #4
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d11c      	bne.n	800991a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	799b      	ldrb	r3, [r3, #6]
 80098e4:	f003 0310 	and.w	r3, r3, #16
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d102      	bne.n	80098f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80098ec:	2305      	movs	r3, #5
 80098ee:	75fb      	strb	r3, [r7, #23]
 80098f0:	e014      	b.n	800991c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009900:	4413      	add	r3, r2
 8009902:	4619      	mov	r1, r3
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7ff fdc7 	bl	8009498 <ld_clust>
 800990a:	4602      	mov	r2, r0
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009910:	e7c0      	b.n	8009894 <follow_path+0x50>
			if (res != FR_OK) break;
 8009912:	bf00      	nop
 8009914:	e002      	b.n	800991c <follow_path+0xd8>
				break;
 8009916:	bf00      	nop
 8009918:	e000      	b.n	800991c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800991a:	bf00      	nop
			}
		}
	}

	return res;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009926:	b480      	push	{r7}
 8009928:	b087      	sub	sp, #28
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800992e:	f04f 33ff 	mov.w	r3, #4294967295
 8009932:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d031      	beq.n	80099a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	617b      	str	r3, [r7, #20]
 8009942:	e002      	b.n	800994a <get_ldnumber+0x24>
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	3301      	adds	r3, #1
 8009948:	617b      	str	r3, [r7, #20]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	2b20      	cmp	r3, #32
 8009950:	d903      	bls.n	800995a <get_ldnumber+0x34>
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	2b3a      	cmp	r3, #58	@ 0x3a
 8009958:	d1f4      	bne.n	8009944 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009960:	d11c      	bne.n	800999c <get_ldnumber+0x76>
			tp = *path;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	60fa      	str	r2, [r7, #12]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	3b30      	subs	r3, #48	@ 0x30
 8009972:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b09      	cmp	r3, #9
 8009978:	d80e      	bhi.n	8009998 <get_ldnumber+0x72>
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	429a      	cmp	r2, r3
 8009980:	d10a      	bne.n	8009998 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d107      	bne.n	8009998 <get_ldnumber+0x72>
					vol = (int)i;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	3301      	adds	r3, #1
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	e002      	b.n	80099a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800999c:	2300      	movs	r3, #0
 800999e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80099a0:	693b      	ldr	r3, [r7, #16]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	371c      	adds	r7, #28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
	...

080099b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	70da      	strb	r2, [r3, #3]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f04f 32ff 	mov.w	r2, #4294967295
 80099c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff f860 	bl	8008a90 <move_window>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <check_fs+0x2a>
 80099d6:	2304      	movs	r3, #4
 80099d8:	e038      	b.n	8009a4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3330      	adds	r3, #48	@ 0x30
 80099de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe fda2 	bl	800852c <ld_word>
 80099e8:	4603      	mov	r3, r0
 80099ea:	461a      	mov	r2, r3
 80099ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d001      	beq.n	80099f8 <check_fs+0x48>
 80099f4:	2303      	movs	r3, #3
 80099f6:	e029      	b.n	8009a4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099fe:	2be9      	cmp	r3, #233	@ 0xe9
 8009a00:	d009      	beq.n	8009a16 <check_fs+0x66>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a08:	2beb      	cmp	r3, #235	@ 0xeb
 8009a0a:	d11e      	bne.n	8009a4a <check_fs+0x9a>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009a12:	2b90      	cmp	r3, #144	@ 0x90
 8009a14:	d119      	bne.n	8009a4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	3330      	adds	r3, #48	@ 0x30
 8009a1a:	3336      	adds	r3, #54	@ 0x36
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe fd9e 	bl	800855e <ld_dword>
 8009a22:	4603      	mov	r3, r0
 8009a24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009a28:	4a0a      	ldr	r2, [pc, #40]	@ (8009a54 <check_fs+0xa4>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d101      	bne.n	8009a32 <check_fs+0x82>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	e00c      	b.n	8009a4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3330      	adds	r3, #48	@ 0x30
 8009a36:	3352      	adds	r3, #82	@ 0x52
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fd90 	bl	800855e <ld_dword>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	4a05      	ldr	r2, [pc, #20]	@ (8009a58 <check_fs+0xa8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d101      	bne.n	8009a4a <check_fs+0x9a>
 8009a46:	2300      	movs	r3, #0
 8009a48:	e000      	b.n	8009a4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009a4a:	2302      	movs	r3, #2
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	00544146 	.word	0x00544146
 8009a58:	33544146 	.word	0x33544146

08009a5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b096      	sub	sp, #88	@ 0x58
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	4613      	mov	r3, r2
 8009a68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7ff ff58 	bl	8009926 <get_ldnumber>
 8009a76:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da01      	bge.n	8009a82 <find_volume+0x26>
 8009a7e:	230b      	movs	r3, #11
 8009a80:	e22d      	b.n	8009ede <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009a82:	4aa1      	ldr	r2, [pc, #644]	@ (8009d08 <find_volume+0x2ac>)
 8009a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <find_volume+0x3a>
 8009a92:	230c      	movs	r3, #12
 8009a94:	e223      	b.n	8009ede <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	f023 0301 	bic.w	r3, r3, #1
 8009aa2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01a      	beq.n	8009ae2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	785b      	ldrb	r3, [r3, #1]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe fc9b 	bl	80083ec <disk_status>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009abc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10c      	bne.n	8009ae2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d007      	beq.n	8009ade <find_volume+0x82>
 8009ace:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ad2:	f003 0304 	and.w	r3, r3, #4
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009ada:	230a      	movs	r3, #10
 8009adc:	e1ff      	b.n	8009ede <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e1fd      	b.n	8009ede <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af2:	785b      	ldrb	r3, [r3, #1]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fe fc93 	bl	8008420 <disk_initialize>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009b00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e1e6      	b.n	8009ede <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d007      	beq.n	8009b26 <find_volume+0xca>
 8009b16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b1a:	f003 0304 	and.w	r3, r3, #4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d001      	beq.n	8009b26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009b22:	230a      	movs	r3, #10
 8009b24:	e1db      	b.n	8009ede <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009b2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b2c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b2e:	f7ff ff3f 	bl	80099b0 <check_fs>
 8009b32:	4603      	mov	r3, r0
 8009b34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009b38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d149      	bne.n	8009bd4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b40:	2300      	movs	r3, #0
 8009b42:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b44:	e01e      	b.n	8009b84 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b4e:	011b      	lsls	r3, r3, #4
 8009b50:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009b54:	4413      	add	r3, r2
 8009b56:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d006      	beq.n	8009b70 <find_volume+0x114>
 8009b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b64:	3308      	adds	r3, #8
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fcf9 	bl	800855e <ld_dword>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	e000      	b.n	8009b72 <find_volume+0x116>
 8009b70:	2200      	movs	r2, #0
 8009b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	3358      	adds	r3, #88	@ 0x58
 8009b78:	443b      	add	r3, r7
 8009b7a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b80:	3301      	adds	r3, #1
 8009b82:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d9dd      	bls.n	8009b46 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <find_volume+0x13e>
 8009b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b96:	3b01      	subs	r3, #1
 8009b98:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	3358      	adds	r3, #88	@ 0x58
 8009ba0:	443b      	add	r3, r7
 8009ba2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ba6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <find_volume+0x15e>
 8009bae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bb0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009bb2:	f7ff fefd 	bl	80099b0 <check_fs>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	e000      	b.n	8009bbc <find_volume+0x160>
 8009bba:	2303      	movs	r3, #3
 8009bbc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009bc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d905      	bls.n	8009bd4 <find_volume+0x178>
 8009bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bca:	3301      	adds	r3, #1
 8009bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d9e2      	bls.n	8009b9a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009bd8:	2b04      	cmp	r3, #4
 8009bda:	d101      	bne.n	8009be0 <find_volume+0x184>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e17e      	b.n	8009ede <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009be0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d901      	bls.n	8009bec <find_volume+0x190>
 8009be8:	230d      	movs	r3, #13
 8009bea:	e178      	b.n	8009ede <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bee:	3330      	adds	r3, #48	@ 0x30
 8009bf0:	330b      	adds	r3, #11
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe fc9a 	bl	800852c <ld_word>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bfe:	d001      	beq.n	8009c04 <find_volume+0x1a8>
 8009c00:	230d      	movs	r3, #13
 8009c02:	e16c      	b.n	8009ede <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c06:	3330      	adds	r3, #48	@ 0x30
 8009c08:	3316      	adds	r3, #22
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe fc8e 	bl	800852c <ld_word>
 8009c10:	4603      	mov	r3, r0
 8009c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <find_volume+0x1cc>
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1c:	3330      	adds	r3, #48	@ 0x30
 8009c1e:	3324      	adds	r3, #36	@ 0x24
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe fc9c 	bl	800855e <ld_dword>
 8009c26:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c2c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c30:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3a:	789b      	ldrb	r3, [r3, #2]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d005      	beq.n	8009c4c <find_volume+0x1f0>
 8009c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c42:	789b      	ldrb	r3, [r3, #2]
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d001      	beq.n	8009c4c <find_volume+0x1f0>
 8009c48:	230d      	movs	r3, #13
 8009c4a:	e148      	b.n	8009ede <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4e:	789b      	ldrb	r3, [r3, #2]
 8009c50:	461a      	mov	r2, r3
 8009c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c54:	fb02 f303 	mul.w	r3, r2, r3
 8009c58:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c60:	461a      	mov	r2, r3
 8009c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c68:	895b      	ldrh	r3, [r3, #10]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d008      	beq.n	8009c80 <find_volume+0x224>
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c70:	895b      	ldrh	r3, [r3, #10]
 8009c72:	461a      	mov	r2, r3
 8009c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c76:	895b      	ldrh	r3, [r3, #10]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <find_volume+0x228>
 8009c80:	230d      	movs	r3, #13
 8009c82:	e12c      	b.n	8009ede <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c86:	3330      	adds	r3, #48	@ 0x30
 8009c88:	3311      	adds	r3, #17
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fc4e 	bl	800852c <ld_word>
 8009c90:	4603      	mov	r3, r0
 8009c92:	461a      	mov	r2, r3
 8009c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9a:	891b      	ldrh	r3, [r3, #8]
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <find_volume+0x24e>
 8009ca6:	230d      	movs	r3, #13
 8009ca8:	e119      	b.n	8009ede <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cac:	3330      	adds	r3, #48	@ 0x30
 8009cae:	3313      	adds	r3, #19
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe fc3b 	bl	800852c <ld_word>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d106      	bne.n	8009cce <find_volume+0x272>
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc2:	3330      	adds	r3, #48	@ 0x30
 8009cc4:	3320      	adds	r3, #32
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fc49 	bl	800855e <ld_dword>
 8009ccc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd0:	3330      	adds	r3, #48	@ 0x30
 8009cd2:	330e      	adds	r3, #14
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe fc29 	bl	800852c <ld_word>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009cde:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <find_volume+0x28c>
 8009ce4:	230d      	movs	r3, #13
 8009ce6:	e0fa      	b.n	8009ede <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009ce8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cec:	4413      	add	r3, r2
 8009cee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009cf0:	8912      	ldrh	r2, [r2, #8]
 8009cf2:	0912      	lsrs	r2, r2, #4
 8009cf4:	b292      	uxth	r2, r2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d204      	bcs.n	8009d0c <find_volume+0x2b0>
 8009d02:	230d      	movs	r3, #13
 8009d04:	e0eb      	b.n	8009ede <find_volume+0x482>
 8009d06:	bf00      	nop
 8009d08:	20000f88 	.word	0x20000f88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d14:	8952      	ldrh	r2, [r2, #10]
 8009d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d1a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <find_volume+0x2ca>
 8009d22:	230d      	movs	r3, #13
 8009d24:	e0db      	b.n	8009ede <find_volume+0x482>
		fmt = FS_FAT32;
 8009d26:	2303      	movs	r3, #3
 8009d28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d802      	bhi.n	8009d3c <find_volume+0x2e0>
 8009d36:	2302      	movs	r3, #2
 8009d38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d802      	bhi.n	8009d4c <find_volume+0x2f0>
 8009d46:	2301      	movs	r3, #1
 8009d48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4e:	1c9a      	adds	r2, r3, #2
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d58:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009d5a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d5e:	441a      	add	r2, r3
 8009d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d62:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009d64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d68:	441a      	add	r2, r3
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009d6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d11e      	bne.n	8009db4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d78:	3330      	adds	r3, #48	@ 0x30
 8009d7a:	332a      	adds	r3, #42	@ 0x2a
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fe fbd5 	bl	800852c <ld_word>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <find_volume+0x330>
 8009d88:	230d      	movs	r3, #13
 8009d8a:	e0a8      	b.n	8009ede <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8e:	891b      	ldrh	r3, [r3, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <find_volume+0x33c>
 8009d94:	230d      	movs	r3, #13
 8009d96:	e0a2      	b.n	8009ede <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9a:	3330      	adds	r3, #48	@ 0x30
 8009d9c:	332c      	adds	r3, #44	@ 0x2c
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fbdd 	bl	800855e <ld_dword>
 8009da4:	4602      	mov	r2, r0
 8009da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009db2:	e01f      	b.n	8009df4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db6:	891b      	ldrh	r3, [r3, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <find_volume+0x364>
 8009dbc:	230d      	movs	r3, #13
 8009dbe:	e08e      	b.n	8009ede <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc2:	6a1a      	ldr	r2, [r3, #32]
 8009dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dc6:	441a      	add	r2, r3
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dca:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d103      	bne.n	8009ddc <find_volume+0x380>
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd6:	695b      	ldr	r3, [r3, #20]
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	e00a      	b.n	8009df2 <find_volume+0x396>
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dde:	695a      	ldr	r2, [r3, #20]
 8009de0:	4613      	mov	r3, r2
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	4413      	add	r3, r2
 8009de6:	085a      	lsrs	r2, r3, #1
 8009de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009df2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df6:	699a      	ldr	r2, [r3, #24]
 8009df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dfa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009dfe:	0a5b      	lsrs	r3, r3, #9
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d201      	bcs.n	8009e08 <find_volume+0x3ac>
 8009e04:	230d      	movs	r3, #13
 8009e06:	e06a      	b.n	8009ede <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	611a      	str	r2, [r3, #16]
 8009e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e12:	691a      	ldr	r2, [r3, #16]
 8009e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e16:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1a:	2280      	movs	r2, #128	@ 0x80
 8009e1c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009e1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d149      	bne.n	8009eba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e28:	3330      	adds	r3, #48	@ 0x30
 8009e2a:	3330      	adds	r3, #48	@ 0x30
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fe fb7d 	bl	800852c <ld_word>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d140      	bne.n	8009eba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e40:	f7fe fe26 	bl	8008a90 <move_window>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d137      	bne.n	8009eba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e52:	3330      	adds	r3, #48	@ 0x30
 8009e54:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe fb67 	bl	800852c <ld_word>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	461a      	mov	r2, r3
 8009e62:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d127      	bne.n	8009eba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	3330      	adds	r3, #48	@ 0x30
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe fb75 	bl	800855e <ld_dword>
 8009e74:	4603      	mov	r3, r0
 8009e76:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee8 <find_volume+0x48c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d11e      	bne.n	8009eba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7e:	3330      	adds	r3, #48	@ 0x30
 8009e80:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fe fb6a 	bl	800855e <ld_dword>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4a17      	ldr	r2, [pc, #92]	@ (8009eec <find_volume+0x490>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d113      	bne.n	8009eba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e94:	3330      	adds	r3, #48	@ 0x30
 8009e96:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe fb5f 	bl	800855e <ld_dword>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea8:	3330      	adds	r3, #48	@ 0x30
 8009eaa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fb55 	bl	800855e <ld_dword>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ebc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009ec0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef0 <find_volume+0x494>)
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	4b09      	ldr	r3, [pc, #36]	@ (8009ef0 <find_volume+0x494>)
 8009ecc:	801a      	strh	r2, [r3, #0]
 8009ece:	4b08      	ldr	r3, [pc, #32]	@ (8009ef0 <find_volume+0x494>)
 8009ed0:	881a      	ldrh	r2, [r3, #0]
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ed8:	f7fe fd72 	bl	80089c0 <clear_lock>
#endif
	return FR_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3758      	adds	r7, #88	@ 0x58
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	41615252 	.word	0x41615252
 8009eec:	61417272 	.word	0x61417272
 8009ef0:	20000f8c 	.word	0x20000f8c

08009ef4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009efe:	2309      	movs	r3, #9
 8009f00:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d01c      	beq.n	8009f42 <validate+0x4e>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d018      	beq.n	8009f42 <validate+0x4e>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d013      	beq.n	8009f42 <validate+0x4e>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	889a      	ldrh	r2, [r3, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	88db      	ldrh	r3, [r3, #6]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d10c      	bne.n	8009f42 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fa5c 	bl	80083ec <disk_status>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <validate+0x4e>
			res = FR_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d102      	bne.n	8009f4e <validate+0x5a>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	e000      	b.n	8009f50 <validate+0x5c>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	6013      	str	r3, [r2, #0]
	return res;
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009f72:	f107 0310 	add.w	r3, r7, #16
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fcd5 	bl	8009926 <get_ldnumber>
 8009f7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	da01      	bge.n	8009f88 <f_mount+0x28>
 8009f84:	230b      	movs	r3, #11
 8009f86:	e02b      	b.n	8009fe0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009f88:	4a17      	ldr	r2, [pc, #92]	@ (8009fe8 <f_mount+0x88>)
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009f98:	69b8      	ldr	r0, [r7, #24]
 8009f9a:	f7fe fd11 	bl	80089c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	490d      	ldr	r1, [pc, #52]	@ (8009fe8 <f_mount+0x88>)
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <f_mount+0x66>
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d001      	beq.n	8009fca <f_mount+0x6a>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e00a      	b.n	8009fe0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009fca:	f107 010c 	add.w	r1, r7, #12
 8009fce:	f107 0308 	add.w	r3, r7, #8
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff fd41 	bl	8009a5c <find_volume>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3720      	adds	r7, #32
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20000f88 	.word	0x20000f88

08009fec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b098      	sub	sp, #96	@ 0x60
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <f_open+0x18>
 800a000:	2309      	movs	r3, #9
 800a002:	e1a9      	b.n	800a358 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a00a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a00c:	79fa      	ldrb	r2, [r7, #7]
 800a00e:	f107 0110 	add.w	r1, r7, #16
 800a012:	f107 0308 	add.w	r3, r7, #8
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff fd20 	bl	8009a5c <find_volume>
 800a01c:	4603      	mov	r3, r0
 800a01e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a022:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a026:	2b00      	cmp	r3, #0
 800a028:	f040 818d 	bne.w	800a346 <f_open+0x35a>
		dj.obj.fs = fs;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	f107 0314 	add.w	r3, r7, #20
 800a036:	4611      	mov	r1, r2
 800a038:	4618      	mov	r0, r3
 800a03a:	f7ff fc03 	bl	8009844 <follow_path>
 800a03e:	4603      	mov	r3, r0
 800a040:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a044:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d118      	bne.n	800a07e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a04c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a050:	b25b      	sxtb	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	da03      	bge.n	800a05e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a056:	2306      	movs	r3, #6
 800a058:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a05c:	e00f      	b.n	800a07e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	2b01      	cmp	r3, #1
 800a062:	bf8c      	ite	hi
 800a064:	2301      	movhi	r3, #1
 800a066:	2300      	movls	r3, #0
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	461a      	mov	r2, r3
 800a06c:	f107 0314 	add.w	r3, r7, #20
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fb5c 	bl	8008730 <chk_lock>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	f003 031c 	and.w	r3, r3, #28
 800a084:	2b00      	cmp	r3, #0
 800a086:	d07f      	beq.n	800a188 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a088:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d017      	beq.n	800a0c0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a090:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a094:	2b04      	cmp	r3, #4
 800a096:	d10e      	bne.n	800a0b6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a098:	f7fe fba6 	bl	80087e8 <enq_lock>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <f_open+0xc4>
 800a0a2:	f107 0314 	add.w	r3, r7, #20
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fae7 	bl	800967a <dir_register>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	e000      	b.n	800a0b2 <f_open+0xc6>
 800a0b0:	2312      	movs	r3, #18
 800a0b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	f043 0308 	orr.w	r3, r3, #8
 800a0bc:	71fb      	strb	r3, [r7, #7]
 800a0be:	e010      	b.n	800a0e2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a0c0:	7ebb      	ldrb	r3, [r7, #26]
 800a0c2:	f003 0311 	and.w	r3, r3, #17
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <f_open+0xe6>
					res = FR_DENIED;
 800a0ca:	2307      	movs	r3, #7
 800a0cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a0d0:	e007      	b.n	800a0e2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <f_open+0xf6>
 800a0dc:	2308      	movs	r3, #8
 800a0de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a0e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d168      	bne.n	800a1bc <f_open+0x1d0>
 800a0ea:	79fb      	ldrb	r3, [r7, #7]
 800a0ec:	f003 0308 	and.w	r3, r3, #8
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d063      	beq.n	800a1bc <f_open+0x1d0>
				dw = GET_FATTIME();
 800a0f4:	f7fd fc3e 	bl	8007974 <get_fattime>
 800a0f8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0fc:	330e      	adds	r3, #14
 800a0fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe fa6a 	bl	80085da <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a108:	3316      	adds	r3, #22
 800a10a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe fa64 	bl	80085da <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a114:	330b      	adds	r3, #11
 800a116:	2220      	movs	r2, #32
 800a118:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a11e:	4611      	mov	r1, r2
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff f9b9 	bl	8009498 <ld_clust>
 800a126:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a12c:	2200      	movs	r2, #0
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff f9d1 	bl	80094d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a136:	331c      	adds	r3, #28
 800a138:	2100      	movs	r1, #0
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe fa4d 	bl	80085da <st_dword>
					fs->wflag = 1;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	2201      	movs	r2, #1
 800a144:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d037      	beq.n	800a1bc <f_open+0x1d0>
						dw = fs->winsect;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a150:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a152:	f107 0314 	add.w	r3, r7, #20
 800a156:	2200      	movs	r2, #0
 800a158:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe fee4 	bl	8008f28 <remove_chain>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a166:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d126      	bne.n	800a1bc <f_open+0x1d0>
							res = move_window(fs, dw);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a172:	4618      	mov	r0, r3
 800a174:	f7fe fc8c 	bl	8008a90 <move_window>
 800a178:	4603      	mov	r3, r0
 800a17a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a182:	3a01      	subs	r2, #1
 800a184:	60da      	str	r2, [r3, #12]
 800a186:	e019      	b.n	800a1bc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a188:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d115      	bne.n	800a1bc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a190:	7ebb      	ldrb	r3, [r7, #26]
 800a192:	f003 0310 	and.w	r3, r3, #16
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a19a:	2304      	movs	r3, #4
 800a19c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a1a0:	e00c      	b.n	800a1bc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a1a2:	79fb      	ldrb	r3, [r7, #7]
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d007      	beq.n	800a1bc <f_open+0x1d0>
 800a1ac:	7ebb      	ldrb	r3, [r7, #26]
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <f_open+0x1d0>
						res = FR_DENIED;
 800a1b6:	2307      	movs	r3, #7
 800a1b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a1bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d126      	bne.n	800a212 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	f003 0308 	and.w	r3, r3, #8
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
 800a1d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a1de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	bf8c      	ite	hi
 800a1ea:	2301      	movhi	r3, #1
 800a1ec:	2300      	movls	r3, #0
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	f107 0314 	add.w	r3, r7, #20
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe fb17 	bl	800882c <inc_lock>
 800a1fe:	4602      	mov	r2, r0
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <f_open+0x226>
 800a20c:	2302      	movs	r3, #2
 800a20e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a212:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a216:	2b00      	cmp	r3, #0
 800a218:	f040 8095 	bne.w	800a346 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a220:	4611      	mov	r1, r2
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff f938 	bl	8009498 <ld_clust>
 800a228:	4602      	mov	r2, r0
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a230:	331c      	adds	r3, #28
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe f993 	bl	800855e <ld_dword>
 800a238:	4602      	mov	r2, r0
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	88da      	ldrh	r2, [r3, #6]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	79fa      	ldrb	r2, [r7, #7]
 800a256:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3330      	adds	r3, #48	@ 0x30
 800a26e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a272:	2100      	movs	r1, #0
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe f9fd 	bl	8008674 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	f003 0320 	and.w	r3, r3, #32
 800a280:	2b00      	cmp	r3, #0
 800a282:	d060      	beq.n	800a346 <f_open+0x35a>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d05c      	beq.n	800a346 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	895b      	ldrh	r3, [r3, #10]
 800a298:	025b      	lsls	r3, r3, #9
 800a29a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2a8:	e016      	b.n	800a2d8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe fca9 	bl	8008c06 <get_fat>
 800a2b4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a2b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d802      	bhi.n	800a2c2 <f_open+0x2d6>
 800a2bc:	2302      	movs	r3, #2
 800a2be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a2c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c8:	d102      	bne.n	800a2d0 <f_open+0x2e4>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d103      	bne.n	800a2e8 <f_open+0x2fc>
 800a2e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d8e0      	bhi.n	800a2aa <f_open+0x2be>
				}
				fp->clust = clst;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a2ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d127      	bne.n	800a346 <f_open+0x35a>
 800a2f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d022      	beq.n	800a346 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe fc5f 	bl	8008bc8 <clust2sect>
 800a30a:	6478      	str	r0, [r7, #68]	@ 0x44
 800a30c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d103      	bne.n	800a31a <f_open+0x32e>
						res = FR_INT_ERR;
 800a312:	2302      	movs	r3, #2
 800a314:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a318:	e015      	b.n	800a346 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a31a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a31c:	0a5a      	lsrs	r2, r3, #9
 800a31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a320:	441a      	add	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	7858      	ldrb	r0, [r3, #1]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a1a      	ldr	r2, [r3, #32]
 800a334:	2301      	movs	r3, #1
 800a336:	f7fe f89b 	bl	8008470 <disk_read>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <f_open+0x35a>
 800a340:	2301      	movs	r3, #1
 800a342:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a346:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <f_open+0x368>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a354:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3760      	adds	r7, #96	@ 0x60
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08e      	sub	sp, #56	@ 0x38
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f107 0214 	add.w	r2, r7, #20
 800a37e:	4611      	mov	r1, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff fdb7 	bl	8009ef4 <validate>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a38c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a390:	2b00      	cmp	r3, #0
 800a392:	d107      	bne.n	800a3a4 <f_read+0x44>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	7d5b      	ldrb	r3, [r3, #21]
 800a398:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a39c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <f_read+0x4a>
 800a3a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a3a8:	e115      	b.n	800a5d6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	7d1b      	ldrb	r3, [r3, #20]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <f_read+0x5a>
 800a3b6:	2307      	movs	r3, #7
 800a3b8:	e10d      	b.n	800a5d6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	f240 80fe 	bls.w	800a5cc <f_read+0x26c>
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a3d4:	e0fa      	b.n	800a5cc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f040 80c6 	bne.w	800a570 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	0a5b      	lsrs	r3, r3, #9
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	8952      	ldrh	r2, [r2, #10]
 800a3ee:	3a01      	subs	r2, #1
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d12f      	bne.n	800a45a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d103      	bne.n	800a40a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	633b      	str	r3, [r7, #48]	@ 0x30
 800a408:	e013      	b.n	800a432 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d007      	beq.n	800a422 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	4619      	mov	r1, r3
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7fe fe82 	bl	8009122 <clmt_clust>
 800a41e:	6338      	str	r0, [r7, #48]	@ 0x30
 800a420:	e007      	b.n	800a432 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	69db      	ldr	r3, [r3, #28]
 800a428:	4619      	mov	r1, r3
 800a42a:	4610      	mov	r0, r2
 800a42c:	f7fe fbeb 	bl	8008c06 <get_fat>
 800a430:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	2b01      	cmp	r3, #1
 800a436:	d804      	bhi.n	800a442 <f_read+0xe2>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2202      	movs	r2, #2
 800a43c:	755a      	strb	r2, [r3, #21]
 800a43e:	2302      	movs	r3, #2
 800a440:	e0c9      	b.n	800a5d6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a448:	d104      	bne.n	800a454 <f_read+0xf4>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2201      	movs	r2, #1
 800a44e:	755a      	strb	r2, [r3, #21]
 800a450:	2301      	movs	r3, #1
 800a452:	e0c0      	b.n	800a5d6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a458:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	4619      	mov	r1, r3
 800a462:	4610      	mov	r0, r2
 800a464:	f7fe fbb0 	bl	8008bc8 <clust2sect>
 800a468:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d104      	bne.n	800a47a <f_read+0x11a>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2202      	movs	r2, #2
 800a474:	755a      	strb	r2, [r3, #21]
 800a476:	2302      	movs	r3, #2
 800a478:	e0ad      	b.n	800a5d6 <f_read+0x276>
			sect += csect;
 800a47a:	69ba      	ldr	r2, [r7, #24]
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	4413      	add	r3, r2
 800a480:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	0a5b      	lsrs	r3, r3, #9
 800a486:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d039      	beq.n	800a502 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a48e:	69fa      	ldr	r2, [r7, #28]
 800a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a492:	4413      	add	r3, r2
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	8952      	ldrh	r2, [r2, #10]
 800a498:	4293      	cmp	r3, r2
 800a49a:	d905      	bls.n	800a4a8 <f_read+0x148>
					cc = fs->csize - csect;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	895b      	ldrh	r3, [r3, #10]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	7858      	ldrb	r0, [r3, #1]
 800a4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ae:	69ba      	ldr	r2, [r7, #24]
 800a4b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4b2:	f7fd ffdd 	bl	8008470 <disk_read>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d004      	beq.n	800a4c6 <f_read+0x166>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	755a      	strb	r2, [r3, #21]
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e087      	b.n	800a5d6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ca:	b25b      	sxtb	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	da14      	bge.n	800a4fa <f_read+0x19a>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6a1a      	ldr	r2, [r3, #32]
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d90d      	bls.n	800a4fa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a1a      	ldr	r2, [r3, #32]
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	025b      	lsls	r3, r3, #9
 800a4e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4ea:	18d0      	adds	r0, r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3330      	adds	r3, #48	@ 0x30
 800a4f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	f7fe f89c 	bl	8008632 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fc:	025b      	lsls	r3, r3, #9
 800a4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a500:	e050      	b.n	800a5a4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d02e      	beq.n	800a56a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	7d1b      	ldrb	r3, [r3, #20]
 800a510:	b25b      	sxtb	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	da18      	bge.n	800a548 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	7858      	ldrb	r0, [r3, #1]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6a1a      	ldr	r2, [r3, #32]
 800a524:	2301      	movs	r3, #1
 800a526:	f7fd ffc3 	bl	80084b0 <disk_write>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d004      	beq.n	800a53a <f_read+0x1da>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2201      	movs	r2, #1
 800a534:	755a      	strb	r2, [r3, #21]
 800a536:	2301      	movs	r3, #1
 800a538:	e04d      	b.n	800a5d6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	7d1b      	ldrb	r3, [r3, #20]
 800a53e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a542:	b2da      	uxtb	r2, r3
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	7858      	ldrb	r0, [r3, #1]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a552:	2301      	movs	r3, #1
 800a554:	69ba      	ldr	r2, [r7, #24]
 800a556:	f7fd ff8b 	bl	8008470 <disk_read>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d004      	beq.n	800a56a <f_read+0x20a>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2201      	movs	r2, #1
 800a564:	755a      	strb	r2, [r3, #21]
 800a566:	2301      	movs	r3, #1
 800a568:	e035      	b.n	800a5d6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a578:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a57e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	429a      	cmp	r2, r3
 800a584:	d901      	bls.n	800a58a <f_read+0x22a>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a598:	4413      	add	r3, r2
 800a59a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a59c:	4619      	mov	r1, r3
 800a59e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a5a0:	f7fe f847 	bl	8008632 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a5a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a8:	4413      	add	r3, r2
 800a5aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	699a      	ldr	r2, [r3, #24]
 800a5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b2:	441a      	add	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	619a      	str	r2, [r3, #24]
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5be:	441a      	add	r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f47f af01 	bne.w	800a3d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3738      	adds	r7, #56	@ 0x38
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b08c      	sub	sp, #48	@ 0x30
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	60f8      	str	r0, [r7, #12]
 800a5e6:	60b9      	str	r1, [r7, #8]
 800a5e8:	607a      	str	r2, [r7, #4]
 800a5ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f107 0210 	add.w	r2, r7, #16
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff fc78 	bl	8009ef4 <validate>
 800a604:	4603      	mov	r3, r0
 800a606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a60a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d107      	bne.n	800a622 <f_write+0x44>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	7d5b      	ldrb	r3, [r3, #21]
 800a616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a61a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <f_write+0x4a>
 800a622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a626:	e14b      	b.n	800a8c0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	7d1b      	ldrb	r3, [r3, #20]
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <f_write+0x5a>
 800a634:	2307      	movs	r3, #7
 800a636:	e143      	b.n	800a8c0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	699a      	ldr	r2, [r3, #24]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	441a      	add	r2, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	429a      	cmp	r2, r3
 800a646:	f080 812d 	bcs.w	800a8a4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	43db      	mvns	r3, r3
 800a650:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a652:	e127      	b.n	800a8a4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f040 80e3 	bne.w	800a828 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	0a5b      	lsrs	r3, r3, #9
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	8952      	ldrh	r2, [r2, #10]
 800a66c:	3a01      	subs	r2, #1
 800a66e:	4013      	ands	r3, r2
 800a670:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d143      	bne.n	800a700 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	699b      	ldr	r3, [r3, #24]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10c      	bne.n	800a69a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d11a      	bne.n	800a6c2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2100      	movs	r1, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe fcae 	bl	8008ff2 <create_chain>
 800a696:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a698:	e013      	b.n	800a6c2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d007      	beq.n	800a6b2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f7fe fd3a 	bl	8009122 <clmt_clust>
 800a6ae:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a6b0:	e007      	b.n	800a6c2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	69db      	ldr	r3, [r3, #28]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	f7fe fc99 	bl	8008ff2 <create_chain>
 800a6c0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 80f2 	beq.w	800a8ae <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d104      	bne.n	800a6da <f_write+0xfc>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	755a      	strb	r2, [r3, #21]
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	e0f2      	b.n	800a8c0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e0:	d104      	bne.n	800a6ec <f_write+0x10e>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	755a      	strb	r2, [r3, #21]
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e0e9      	b.n	800a8c0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6f0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d102      	bne.n	800a700 <f_write+0x122>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6fe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	7d1b      	ldrb	r3, [r3, #20]
 800a704:	b25b      	sxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	da18      	bge.n	800a73c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	7858      	ldrb	r0, [r3, #1]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6a1a      	ldr	r2, [r3, #32]
 800a718:	2301      	movs	r3, #1
 800a71a:	f7fd fec9 	bl	80084b0 <disk_write>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d004      	beq.n	800a72e <f_write+0x150>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2201      	movs	r2, #1
 800a728:	755a      	strb	r2, [r3, #21]
 800a72a:	2301      	movs	r3, #1
 800a72c:	e0c8      	b.n	800a8c0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	7d1b      	ldrb	r3, [r3, #20]
 800a732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a736:	b2da      	uxtb	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	4619      	mov	r1, r3
 800a744:	4610      	mov	r0, r2
 800a746:	f7fe fa3f 	bl	8008bc8 <clust2sect>
 800a74a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d104      	bne.n	800a75c <f_write+0x17e>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2202      	movs	r2, #2
 800a756:	755a      	strb	r2, [r3, #21]
 800a758:	2302      	movs	r3, #2
 800a75a:	e0b1      	b.n	800a8c0 <f_write+0x2e2>
			sect += csect;
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	4413      	add	r3, r2
 800a762:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	0a5b      	lsrs	r3, r3, #9
 800a768:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d03c      	beq.n	800a7ea <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	4413      	add	r3, r2
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	8952      	ldrh	r2, [r2, #10]
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d905      	bls.n	800a78a <f_write+0x1ac>
					cc = fs->csize - csect;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	895b      	ldrh	r3, [r3, #10]
 800a782:	461a      	mov	r2, r3
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	7858      	ldrb	r0, [r3, #1]
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	69f9      	ldr	r1, [r7, #28]
 800a794:	f7fd fe8c 	bl	80084b0 <disk_write>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d004      	beq.n	800a7a8 <f_write+0x1ca>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	755a      	strb	r2, [r3, #21]
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e08b      	b.n	800a8c0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a1a      	ldr	r2, [r3, #32]
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	6a3a      	ldr	r2, [r7, #32]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d915      	bls.n	800a7e2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6a1a      	ldr	r2, [r3, #32]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	025b      	lsls	r3, r3, #9
 800a7c6:	69fa      	ldr	r2, [r7, #28]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	f7fd ff2f 	bl	8008632 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	7d1b      	ldrb	r3, [r3, #20]
 800a7d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	025b      	lsls	r3, r3, #9
 800a7e6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a7e8:	e03f      	b.n	800a86a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d016      	beq.n	800a822 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	699a      	ldr	r2, [r3, #24]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d210      	bcs.n	800a822 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	7858      	ldrb	r0, [r3, #1]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a80a:	2301      	movs	r3, #1
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	f7fd fe2f 	bl	8008470 <disk_read>
 800a812:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a814:	2b00      	cmp	r3, #0
 800a816:	d004      	beq.n	800a822 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2201      	movs	r2, #1
 800a81c:	755a      	strb	r2, [r3, #21]
 800a81e:	2301      	movs	r3, #1
 800a820:	e04e      	b.n	800a8c0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a830:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a834:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d901      	bls.n	800a842 <f_write+0x264>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a850:	4413      	add	r3, r2
 800a852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a854:	69f9      	ldr	r1, [r7, #28]
 800a856:	4618      	mov	r0, r3
 800a858:	f7fd feeb 	bl	8008632 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	7d1b      	ldrb	r3, [r3, #20]
 800a860:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a864:	b2da      	uxtb	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a86a:	69fa      	ldr	r2, [r7, #28]
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	4413      	add	r3, r2
 800a870:	61fb      	str	r3, [r7, #28]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	699a      	ldr	r2, [r3, #24]
 800a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a878:	441a      	add	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	619a      	str	r2, [r3, #24]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	68da      	ldr	r2, [r3, #12]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	429a      	cmp	r2, r3
 800a888:	bf38      	it	cc
 800a88a:	461a      	movcc	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	60da      	str	r2, [r3, #12]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	441a      	add	r2, r3
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f47f aed4 	bne.w	800a654 <f_write+0x76>
 800a8ac:	e000      	b.n	800a8b0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a8ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	7d1b      	ldrb	r3, [r3, #20]
 800a8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3730      	adds	r7, #48	@ 0x30
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f107 0208 	add.w	r2, r7, #8
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff fb0b 	bl	8009ef4 <validate>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d168      	bne.n	800a9ba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	7d1b      	ldrb	r3, [r3, #20]
 800a8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d062      	beq.n	800a9ba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7d1b      	ldrb	r3, [r3, #20]
 800a8f8:	b25b      	sxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	da15      	bge.n	800a92a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	7858      	ldrb	r0, [r3, #1]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a1a      	ldr	r2, [r3, #32]
 800a90c:	2301      	movs	r3, #1
 800a90e:	f7fd fdcf 	bl	80084b0 <disk_write>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <f_sync+0x54>
 800a918:	2301      	movs	r3, #1
 800a91a:	e04f      	b.n	800a9bc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	7d1b      	ldrb	r3, [r3, #20]
 800a920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a924:	b2da      	uxtb	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a92a:	f7fd f823 	bl	8007974 <get_fattime>
 800a92e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a936:	4619      	mov	r1, r3
 800a938:	4610      	mov	r0, r2
 800a93a:	f7fe f8a9 	bl	8008a90 <move_window>
 800a93e:	4603      	mov	r3, r0
 800a940:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d138      	bne.n	800a9ba <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	330b      	adds	r3, #11
 800a952:	781a      	ldrb	r2, [r3, #0]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	330b      	adds	r3, #11
 800a958:	f042 0220 	orr.w	r2, r2, #32
 800a95c:	b2d2      	uxtb	r2, r2
 800a95e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6818      	ldr	r0, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	461a      	mov	r2, r3
 800a96a:	68f9      	ldr	r1, [r7, #12]
 800a96c:	f7fe fdb3 	bl	80094d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f103 021c 	add.w	r2, r3, #28
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f7fd fe2c 	bl	80085da <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3316      	adds	r3, #22
 800a986:	6939      	ldr	r1, [r7, #16]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fd fe26 	bl	80085da <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	3312      	adds	r3, #18
 800a992:	2100      	movs	r1, #0
 800a994:	4618      	mov	r0, r3
 800a996:	f7fd fe05 	bl	80085a4 <st_word>
					fs->wflag = 1;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2201      	movs	r2, #1
 800a99e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fe f8a2 	bl	8008aec <sync_fs>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	7d1b      	ldrb	r3, [r3, #20]
 800a9b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7ff ff7b 	bl	800a8c8 <f_sync>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d118      	bne.n	800aa0e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f107 0208 	add.w	r2, r7, #8
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff fa85 	bl	8009ef4 <validate>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10c      	bne.n	800aa0e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fd ffa5 	bl	8008948 <dec_lock>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aa02:	7bfb      	ldrb	r3, [r7, #15]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d102      	bne.n	800aa0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b092      	sub	sp, #72	@ 0x48
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800aa24:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800aa28:	f107 030c 	add.w	r3, r7, #12
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff f814 	bl	8009a5c <find_volume>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800aa3a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f040 8099 	bne.w	800ab76 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800aa44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800aa4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4c:	691a      	ldr	r2, [r3, #16]
 800aa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	3b02      	subs	r3, #2
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d804      	bhi.n	800aa62 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800aa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5a:	691a      	ldr	r2, [r3, #16]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	e089      	b.n	800ab76 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800aa66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d128      	bne.n	800aac0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800aa6e:	2302      	movs	r3, #2
 800aa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa74:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800aa76:	f107 0314 	add.w	r3, r7, #20
 800aa7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fe f8c2 	bl	8008c06 <get_fat>
 800aa82:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800aa84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8a:	d103      	bne.n	800aa94 <f_getfree+0x7c>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aa92:	e063      	b.n	800ab5c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800aa94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d103      	bne.n	800aaa2 <f_getfree+0x8a>
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aaa0:	e05c      	b.n	800ab5c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800aaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d102      	bne.n	800aaae <f_getfree+0x96>
 800aaa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaaa:	3301      	adds	r3, #1
 800aaac:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800aaae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab0:	3301      	adds	r3, #1
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d3db      	bcc.n	800aa76 <f_getfree+0x5e>
 800aabe:	e04d      	b.n	800ab5c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800aac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	637b      	str	r3, [r7, #52]	@ 0x34
 800aad0:	2300      	movs	r3, #0
 800aad2:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800aad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d113      	bne.n	800ab02 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800aada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800aae2:	4619      	mov	r1, r3
 800aae4:	f7fd ffd4 	bl	8008a90 <move_window>
 800aae8:	4603      	mov	r3, r0
 800aaea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800aaee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d131      	bne.n	800ab5a <f_getfree+0x142>
							p = fs->win;
 800aaf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf8:	3330      	adds	r3, #48	@ 0x30
 800aafa:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800aafc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab00:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ab02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d10f      	bne.n	800ab2a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ab0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab0c:	f7fd fd0e 	bl	800852c <ld_word>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d102      	bne.n	800ab1c <f_getfree+0x104>
 800ab16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab18:	3301      	adds	r3, #1
 800ab1a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1e:	3302      	adds	r3, #2
 800ab20:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab24:	3b02      	subs	r3, #2
 800ab26:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab28:	e010      	b.n	800ab4c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ab2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab2c:	f7fd fd17 	bl	800855e <ld_dword>
 800ab30:	4603      	mov	r3, r0
 800ab32:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d102      	bne.n	800ab40 <f_getfree+0x128>
 800ab3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ab40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab42:	3304      	adds	r3, #4
 800ab44:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab48:	3b04      	subs	r3, #4
 800ab4a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ab4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1bd      	bne.n	800aad4 <f_getfree+0xbc>
 800ab58:	e000      	b.n	800ab5c <f_getfree+0x144>
							if (res != FR_OK) break;
 800ab5a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab60:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ab62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab66:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ab68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6a:	791a      	ldrb	r2, [r3, #4]
 800ab6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6e:	f042 0201 	orr.w	r2, r2, #1
 800ab72:	b2d2      	uxtb	r2, r2
 800ab74:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ab76:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3748      	adds	r7, #72	@ 0x48
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b09e      	sub	sp, #120	@ 0x78
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ab8e:	f107 010c 	add.w	r1, r7, #12
 800ab92:	1d3b      	adds	r3, r7, #4
 800ab94:	2202      	movs	r2, #2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe ff60 	bl	8009a5c <find_volume>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800aba6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f040 808e 	bne.w	800accc <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800abb6:	4611      	mov	r1, r2
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fe fe43 	bl	8009844 <follow_path>
 800abbe:	4603      	mov	r3, r0
 800abc0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800abc4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d108      	bne.n	800abde <f_unlink+0x5c>
 800abcc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800abd0:	2102      	movs	r1, #2
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fd fdac 	bl	8008730 <chk_lock>
 800abd8:	4603      	mov	r3, r0
 800abda:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800abde:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d172      	bne.n	800accc <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800abe6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800abea:	b25b      	sxtb	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	da03      	bge.n	800abf8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800abf0:	2306      	movs	r3, #6
 800abf2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800abf6:	e008      	b.n	800ac0a <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800abf8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800abfc:	f003 0301 	and.w	r3, r3, #1
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ac04:	2307      	movs	r3, #7
 800ac06:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800ac0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d134      	bne.n	800ac7c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ac16:	4611      	mov	r1, r2
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe fc3d 	bl	8009498 <ld_clust>
 800ac1e:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ac20:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800ac24:	f003 0310 	and.w	r3, r3, #16
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d027      	beq.n	800ac7c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ac30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac32:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ac34:	f107 0310 	add.w	r3, r7, #16
 800ac38:	2100      	movs	r1, #0
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe faa5 	bl	800918a <dir_sdi>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800ac46:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d116      	bne.n	800ac7c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ac4e:	f107 0310 	add.w	r3, r7, #16
 800ac52:	2100      	movs	r1, #0
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fe fc5e 	bl	8009516 <dir_read>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ac60:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <f_unlink+0xec>
 800ac68:	2307      	movs	r3, #7
 800ac6a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ac6e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ac72:	2b04      	cmp	r3, #4
 800ac74:	d102      	bne.n	800ac7c <f_unlink+0xfa>
 800ac76:	2300      	movs	r3, #0
 800ac78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800ac7c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d123      	bne.n	800accc <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ac84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fe fd28 	bl	80096de <dir_remove>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ac94:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10c      	bne.n	800acb6 <f_unlink+0x134>
 800ac9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d009      	beq.n	800acb6 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800aca2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800aca6:	2200      	movs	r2, #0
 800aca8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fe f93c 	bl	8008f28 <remove_chain>
 800acb0:	4603      	mov	r3, r0
 800acb2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800acb6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d106      	bne.n	800accc <f_unlink+0x14a>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fd ff13 	bl	8008aec <sync_fs>
 800acc6:	4603      	mov	r3, r0
 800acc8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800accc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3778      	adds	r7, #120	@ 0x78
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800acd8:	b590      	push	{r4, r7, lr}
 800acda:	b0a5      	sub	sp, #148	@ 0x94
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800ace2:	463b      	mov	r3, r7
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fe fe1e 	bl	8009926 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800acea:	f107 0120 	add.w	r1, r7, #32
 800acee:	1d3b      	adds	r3, r7, #4
 800acf0:	2202      	movs	r2, #2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe feb2 	bl	8009a5c <find_volume>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800acfe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f040 80db 	bne.w	800aebe <f_rename+0x1e6>
		djo.obj.fs = fs;
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe fd95 	bl	8009844 <follow_path>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800ad20:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d108      	bne.n	800ad3a <f_rename+0x62>
 800ad28:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ad2c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <f_rename+0x62>
 800ad34:	2306      	movs	r3, #6
 800ad36:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800ad3a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d108      	bne.n	800ad54 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800ad42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ad46:	2102      	movs	r1, #2
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fd fcf1 	bl	8008730 <chk_lock>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800ad54:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f040 80b0 	bne.w	800aebe <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800ad5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad60:	f103 010b 	add.w	r1, r3, #11
 800ad64:	f107 0308 	add.w	r3, r7, #8
 800ad68:	2215      	movs	r2, #21
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fd fc61 	bl	8008632 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800ad70:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800ad74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad78:	2230      	movs	r2, #48	@ 0x30
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fd fc59 	bl	8008632 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad86:	4611      	mov	r1, r2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fe fd5b 	bl	8009844 <follow_path>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800ad94:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10c      	bne.n	800adb6 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800ad9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d105      	bne.n	800adb0 <f_rename+0xd8>
 800ada4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ada6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d101      	bne.n	800adb0 <f_rename+0xd8>
 800adac:	2304      	movs	r3, #4
 800adae:	e000      	b.n	800adb2 <f_rename+0xda>
 800adb0:	2308      	movs	r3, #8
 800adb2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800adb6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800adba:	2b04      	cmp	r3, #4
 800adbc:	d168      	bne.n	800ae90 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800adbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fc59 	bl	800967a <dir_register>
 800adc8:	4603      	mov	r3, r0
 800adca:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800adce:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800add2:	2b00      	cmp	r3, #0
 800add4:	d15c      	bne.n	800ae90 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800add6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800add8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800addc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ade0:	f103 000d 	add.w	r0, r3, #13
 800ade4:	f107 0308 	add.w	r3, r7, #8
 800ade8:	3302      	adds	r3, #2
 800adea:	2213      	movs	r2, #19
 800adec:	4619      	mov	r1, r3
 800adee:	f7fd fc20 	bl	8008632 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800adf2:	7a3a      	ldrb	r2, [r7, #8]
 800adf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800adf8:	330b      	adds	r3, #11
 800adfa:	f042 0220 	orr.w	r2, r2, #32
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	2201      	movs	r2, #1
 800ae06:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800ae08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae0c:	330b      	adds	r3, #11
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	f003 0310 	and.w	r3, r3, #16
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d03b      	beq.n	800ae90 <f_rename+0x1b8>
 800ae18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d037      	beq.n	800ae90 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800ae20:	6a3c      	ldr	r4, [r7, #32]
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe fb35 	bl	8009498 <ld_clust>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	4619      	mov	r1, r3
 800ae32:	4620      	mov	r0, r4
 800ae34:	f7fd fec8 	bl	8008bc8 <clust2sect>
 800ae38:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800ae3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <f_rename+0x174>
								res = FR_INT_ERR;
 800ae44:	2302      	movs	r3, #2
 800ae46:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800ae4a:	e021      	b.n	800ae90 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fd fe1c 	bl	8008a90 <move_window>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	3330      	adds	r3, #48	@ 0x30
 800ae62:	3320      	adds	r3, #32
 800ae64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800ae68:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10f      	bne.n	800ae90 <f_rename+0x1b8>
 800ae70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae74:	3301      	adds	r3, #1
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae7a:	d109      	bne.n	800ae90 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae80:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fe fb26 	bl	80094d6 <st_clust>
									fs->wflag = 1;
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800ae90:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d112      	bne.n	800aebe <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800ae98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fe fc1e 	bl	80096de <dir_remove>
 800aea2:	4603      	mov	r3, r0
 800aea4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800aea8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <f_rename+0x1e6>
					res = sync_fs(fs);
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fd fe1a 	bl	8008aec <sync_fs>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800aebe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3794      	adds	r7, #148	@ 0x94
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd90      	pop	{r4, r7, pc}

0800aeca <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b088      	sub	sp, #32
 800aece:	af00      	add	r7, sp, #0
 800aed0:	60f8      	str	r0, [r7, #12]
 800aed2:	60b9      	str	r1, [r7, #8]
 800aed4:	607a      	str	r2, [r7, #4]
	int n = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800aede:	e01c      	b.n	800af1a <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800aee0:	f107 0310 	add.w	r3, r7, #16
 800aee4:	f107 0114 	add.w	r1, r7, #20
 800aee8:	2201      	movs	r2, #1
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff fa38 	bl	800a360 <f_read>
		if (rc != 1) break;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d117      	bne.n	800af26 <f_gets+0x5c>
		c = s[0];
 800aef6:	7d3b      	ldrb	r3, [r7, #20]
 800aef8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	2b0d      	cmp	r3, #13
 800aefe:	d00b      	beq.n	800af18 <f_gets+0x4e>
		*p++ = c;
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	61ba      	str	r2, [r7, #24]
 800af06:	7dfa      	ldrb	r2, [r7, #23]
 800af08:	701a      	strb	r2, [r3, #0]
		n++;
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	3301      	adds	r3, #1
 800af0e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	2b0a      	cmp	r3, #10
 800af14:	d009      	beq.n	800af2a <f_gets+0x60>
 800af16:	e000      	b.n	800af1a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800af18:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	69fa      	ldr	r2, [r7, #28]
 800af20:	429a      	cmp	r2, r3
 800af22:	dbdd      	blt.n	800aee0 <f_gets+0x16>
 800af24:	e002      	b.n	800af2c <f_gets+0x62>
		if (rc != 1) break;
 800af26:	bf00      	nop
 800af28:	e000      	b.n	800af2c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800af2a:	bf00      	nop
	}
	*p = 0;
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	2200      	movs	r2, #0
 800af30:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <f_gets+0x72>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	e000      	b.n	800af3e <f_gets+0x74>
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3720      	adds	r7, #32
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	4613      	mov	r3, r2
 800af54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af56:	2301      	movs	r3, #1
 800af58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af5e:	4b1f      	ldr	r3, [pc, #124]	@ (800afdc <FATFS_LinkDriverEx+0x94>)
 800af60:	7a5b      	ldrb	r3, [r3, #9]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b00      	cmp	r3, #0
 800af66:	d131      	bne.n	800afcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af68:	4b1c      	ldr	r3, [pc, #112]	@ (800afdc <FATFS_LinkDriverEx+0x94>)
 800af6a:	7a5b      	ldrb	r3, [r3, #9]
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	461a      	mov	r2, r3
 800af70:	4b1a      	ldr	r3, [pc, #104]	@ (800afdc <FATFS_LinkDriverEx+0x94>)
 800af72:	2100      	movs	r1, #0
 800af74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af76:	4b19      	ldr	r3, [pc, #100]	@ (800afdc <FATFS_LinkDriverEx+0x94>)
 800af78:	7a5b      	ldrb	r3, [r3, #9]
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	4a17      	ldr	r2, [pc, #92]	@ (800afdc <FATFS_LinkDriverEx+0x94>)
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af86:	4b15      	ldr	r3, [pc, #84]	@ (800afdc <FATFS_LinkDriverEx+0x94>)
 800af88:	7a5b      	ldrb	r3, [r3, #9]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	461a      	mov	r2, r3
 800af8e:	4b13      	ldr	r3, [pc, #76]	@ (800afdc <FATFS_LinkDriverEx+0x94>)
 800af90:	4413      	add	r3, r2
 800af92:	79fa      	ldrb	r2, [r7, #7]
 800af94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af96:	4b11      	ldr	r3, [pc, #68]	@ (800afdc <FATFS_LinkDriverEx+0x94>)
 800af98:	7a5b      	ldrb	r3, [r3, #9]
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	1c5a      	adds	r2, r3, #1
 800af9e:	b2d1      	uxtb	r1, r2
 800afa0:	4a0e      	ldr	r2, [pc, #56]	@ (800afdc <FATFS_LinkDriverEx+0x94>)
 800afa2:	7251      	strb	r1, [r2, #9]
 800afa4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800afa6:	7dbb      	ldrb	r3, [r7, #22]
 800afa8:	3330      	adds	r3, #48	@ 0x30
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	3301      	adds	r3, #1
 800afb4:	223a      	movs	r2, #58	@ 0x3a
 800afb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	3302      	adds	r3, #2
 800afbc:	222f      	movs	r2, #47	@ 0x2f
 800afbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	3303      	adds	r3, #3
 800afc4:	2200      	movs	r2, #0
 800afc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	20000fb0 	.word	0x20000fb0

0800afe0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800afea:	2200      	movs	r2, #0
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff ffaa 	bl	800af48 <FATFS_LinkDriverEx>
 800aff4:	4603      	mov	r3, r0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <_strtol_l.isra.0>:
 800b000:	2b24      	cmp	r3, #36	@ 0x24
 800b002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b006:	4686      	mov	lr, r0
 800b008:	4690      	mov	r8, r2
 800b00a:	d801      	bhi.n	800b010 <_strtol_l.isra.0+0x10>
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d106      	bne.n	800b01e <_strtol_l.isra.0+0x1e>
 800b010:	f001 f9b2 	bl	800c378 <__errno>
 800b014:	2316      	movs	r3, #22
 800b016:	6003      	str	r3, [r0, #0]
 800b018:	2000      	movs	r0, #0
 800b01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b01e:	4834      	ldr	r0, [pc, #208]	@ (800b0f0 <_strtol_l.isra.0+0xf0>)
 800b020:	460d      	mov	r5, r1
 800b022:	462a      	mov	r2, r5
 800b024:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b028:	5d06      	ldrb	r6, [r0, r4]
 800b02a:	f016 0608 	ands.w	r6, r6, #8
 800b02e:	d1f8      	bne.n	800b022 <_strtol_l.isra.0+0x22>
 800b030:	2c2d      	cmp	r4, #45	@ 0x2d
 800b032:	d110      	bne.n	800b056 <_strtol_l.isra.0+0x56>
 800b034:	782c      	ldrb	r4, [r5, #0]
 800b036:	2601      	movs	r6, #1
 800b038:	1c95      	adds	r5, r2, #2
 800b03a:	f033 0210 	bics.w	r2, r3, #16
 800b03e:	d115      	bne.n	800b06c <_strtol_l.isra.0+0x6c>
 800b040:	2c30      	cmp	r4, #48	@ 0x30
 800b042:	d10d      	bne.n	800b060 <_strtol_l.isra.0+0x60>
 800b044:	782a      	ldrb	r2, [r5, #0]
 800b046:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b04a:	2a58      	cmp	r2, #88	@ 0x58
 800b04c:	d108      	bne.n	800b060 <_strtol_l.isra.0+0x60>
 800b04e:	786c      	ldrb	r4, [r5, #1]
 800b050:	3502      	adds	r5, #2
 800b052:	2310      	movs	r3, #16
 800b054:	e00a      	b.n	800b06c <_strtol_l.isra.0+0x6c>
 800b056:	2c2b      	cmp	r4, #43	@ 0x2b
 800b058:	bf04      	itt	eq
 800b05a:	782c      	ldrbeq	r4, [r5, #0]
 800b05c:	1c95      	addeq	r5, r2, #2
 800b05e:	e7ec      	b.n	800b03a <_strtol_l.isra.0+0x3a>
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1f6      	bne.n	800b052 <_strtol_l.isra.0+0x52>
 800b064:	2c30      	cmp	r4, #48	@ 0x30
 800b066:	bf14      	ite	ne
 800b068:	230a      	movne	r3, #10
 800b06a:	2308      	moveq	r3, #8
 800b06c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b070:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b074:	2200      	movs	r2, #0
 800b076:	fbbc f9f3 	udiv	r9, ip, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b080:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b084:	2f09      	cmp	r7, #9
 800b086:	d80f      	bhi.n	800b0a8 <_strtol_l.isra.0+0xa8>
 800b088:	463c      	mov	r4, r7
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	dd1b      	ble.n	800b0c6 <_strtol_l.isra.0+0xc6>
 800b08e:	1c57      	adds	r7, r2, #1
 800b090:	d007      	beq.n	800b0a2 <_strtol_l.isra.0+0xa2>
 800b092:	4581      	cmp	r9, r0
 800b094:	d314      	bcc.n	800b0c0 <_strtol_l.isra.0+0xc0>
 800b096:	d101      	bne.n	800b09c <_strtol_l.isra.0+0x9c>
 800b098:	45a2      	cmp	sl, r4
 800b09a:	db11      	blt.n	800b0c0 <_strtol_l.isra.0+0xc0>
 800b09c:	fb00 4003 	mla	r0, r0, r3, r4
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0a6:	e7eb      	b.n	800b080 <_strtol_l.isra.0+0x80>
 800b0a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b0ac:	2f19      	cmp	r7, #25
 800b0ae:	d801      	bhi.n	800b0b4 <_strtol_l.isra.0+0xb4>
 800b0b0:	3c37      	subs	r4, #55	@ 0x37
 800b0b2:	e7ea      	b.n	800b08a <_strtol_l.isra.0+0x8a>
 800b0b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b0b8:	2f19      	cmp	r7, #25
 800b0ba:	d804      	bhi.n	800b0c6 <_strtol_l.isra.0+0xc6>
 800b0bc:	3c57      	subs	r4, #87	@ 0x57
 800b0be:	e7e4      	b.n	800b08a <_strtol_l.isra.0+0x8a>
 800b0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c4:	e7ed      	b.n	800b0a2 <_strtol_l.isra.0+0xa2>
 800b0c6:	1c53      	adds	r3, r2, #1
 800b0c8:	d108      	bne.n	800b0dc <_strtol_l.isra.0+0xdc>
 800b0ca:	2322      	movs	r3, #34	@ 0x22
 800b0cc:	f8ce 3000 	str.w	r3, [lr]
 800b0d0:	4660      	mov	r0, ip
 800b0d2:	f1b8 0f00 	cmp.w	r8, #0
 800b0d6:	d0a0      	beq.n	800b01a <_strtol_l.isra.0+0x1a>
 800b0d8:	1e69      	subs	r1, r5, #1
 800b0da:	e006      	b.n	800b0ea <_strtol_l.isra.0+0xea>
 800b0dc:	b106      	cbz	r6, 800b0e0 <_strtol_l.isra.0+0xe0>
 800b0de:	4240      	negs	r0, r0
 800b0e0:	f1b8 0f00 	cmp.w	r8, #0
 800b0e4:	d099      	beq.n	800b01a <_strtol_l.isra.0+0x1a>
 800b0e6:	2a00      	cmp	r2, #0
 800b0e8:	d1f6      	bne.n	800b0d8 <_strtol_l.isra.0+0xd8>
 800b0ea:	f8c8 1000 	str.w	r1, [r8]
 800b0ee:	e794      	b.n	800b01a <_strtol_l.isra.0+0x1a>
 800b0f0:	08011151 	.word	0x08011151

0800b0f4 <_strtol_r>:
 800b0f4:	f7ff bf84 	b.w	800b000 <_strtol_l.isra.0>

0800b0f8 <strtol>:
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	460a      	mov	r2, r1
 800b0fc:	4601      	mov	r1, r0
 800b0fe:	4802      	ldr	r0, [pc, #8]	@ (800b108 <strtol+0x10>)
 800b100:	6800      	ldr	r0, [r0, #0]
 800b102:	f7ff bf7d 	b.w	800b000 <_strtol_l.isra.0>
 800b106:	bf00      	nop
 800b108:	2000003c 	.word	0x2000003c

0800b10c <__cvt>:
 800b10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b110:	ec57 6b10 	vmov	r6, r7, d0
 800b114:	2f00      	cmp	r7, #0
 800b116:	460c      	mov	r4, r1
 800b118:	4619      	mov	r1, r3
 800b11a:	463b      	mov	r3, r7
 800b11c:	bfbb      	ittet	lt
 800b11e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b122:	461f      	movlt	r7, r3
 800b124:	2300      	movge	r3, #0
 800b126:	232d      	movlt	r3, #45	@ 0x2d
 800b128:	700b      	strb	r3, [r1, #0]
 800b12a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b12c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b130:	4691      	mov	r9, r2
 800b132:	f023 0820 	bic.w	r8, r3, #32
 800b136:	bfbc      	itt	lt
 800b138:	4632      	movlt	r2, r6
 800b13a:	4616      	movlt	r6, r2
 800b13c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b140:	d005      	beq.n	800b14e <__cvt+0x42>
 800b142:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b146:	d100      	bne.n	800b14a <__cvt+0x3e>
 800b148:	3401      	adds	r4, #1
 800b14a:	2102      	movs	r1, #2
 800b14c:	e000      	b.n	800b150 <__cvt+0x44>
 800b14e:	2103      	movs	r1, #3
 800b150:	ab03      	add	r3, sp, #12
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	ab02      	add	r3, sp, #8
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	ec47 6b10 	vmov	d0, r6, r7
 800b15c:	4653      	mov	r3, sl
 800b15e:	4622      	mov	r2, r4
 800b160:	f001 f9e6 	bl	800c530 <_dtoa_r>
 800b164:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b168:	4605      	mov	r5, r0
 800b16a:	d119      	bne.n	800b1a0 <__cvt+0x94>
 800b16c:	f019 0f01 	tst.w	r9, #1
 800b170:	d00e      	beq.n	800b190 <__cvt+0x84>
 800b172:	eb00 0904 	add.w	r9, r0, r4
 800b176:	2200      	movs	r2, #0
 800b178:	2300      	movs	r3, #0
 800b17a:	4630      	mov	r0, r6
 800b17c:	4639      	mov	r1, r7
 800b17e:	f7f5 fcc3 	bl	8000b08 <__aeabi_dcmpeq>
 800b182:	b108      	cbz	r0, 800b188 <__cvt+0x7c>
 800b184:	f8cd 900c 	str.w	r9, [sp, #12]
 800b188:	2230      	movs	r2, #48	@ 0x30
 800b18a:	9b03      	ldr	r3, [sp, #12]
 800b18c:	454b      	cmp	r3, r9
 800b18e:	d31e      	bcc.n	800b1ce <__cvt+0xc2>
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b194:	1b5b      	subs	r3, r3, r5
 800b196:	4628      	mov	r0, r5
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	b004      	add	sp, #16
 800b19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1a4:	eb00 0904 	add.w	r9, r0, r4
 800b1a8:	d1e5      	bne.n	800b176 <__cvt+0x6a>
 800b1aa:	7803      	ldrb	r3, [r0, #0]
 800b1ac:	2b30      	cmp	r3, #48	@ 0x30
 800b1ae:	d10a      	bne.n	800b1c6 <__cvt+0xba>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	f7f5 fca6 	bl	8000b08 <__aeabi_dcmpeq>
 800b1bc:	b918      	cbnz	r0, 800b1c6 <__cvt+0xba>
 800b1be:	f1c4 0401 	rsb	r4, r4, #1
 800b1c2:	f8ca 4000 	str.w	r4, [sl]
 800b1c6:	f8da 3000 	ldr.w	r3, [sl]
 800b1ca:	4499      	add	r9, r3
 800b1cc:	e7d3      	b.n	800b176 <__cvt+0x6a>
 800b1ce:	1c59      	adds	r1, r3, #1
 800b1d0:	9103      	str	r1, [sp, #12]
 800b1d2:	701a      	strb	r2, [r3, #0]
 800b1d4:	e7d9      	b.n	800b18a <__cvt+0x7e>

0800b1d6 <__exponent>:
 800b1d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1d8:	2900      	cmp	r1, #0
 800b1da:	bfba      	itte	lt
 800b1dc:	4249      	neglt	r1, r1
 800b1de:	232d      	movlt	r3, #45	@ 0x2d
 800b1e0:	232b      	movge	r3, #43	@ 0x2b
 800b1e2:	2909      	cmp	r1, #9
 800b1e4:	7002      	strb	r2, [r0, #0]
 800b1e6:	7043      	strb	r3, [r0, #1]
 800b1e8:	dd29      	ble.n	800b23e <__exponent+0x68>
 800b1ea:	f10d 0307 	add.w	r3, sp, #7
 800b1ee:	461d      	mov	r5, r3
 800b1f0:	270a      	movs	r7, #10
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	fbb1 f6f7 	udiv	r6, r1, r7
 800b1f8:	fb07 1416 	mls	r4, r7, r6, r1
 800b1fc:	3430      	adds	r4, #48	@ 0x30
 800b1fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b202:	460c      	mov	r4, r1
 800b204:	2c63      	cmp	r4, #99	@ 0x63
 800b206:	f103 33ff 	add.w	r3, r3, #4294967295
 800b20a:	4631      	mov	r1, r6
 800b20c:	dcf1      	bgt.n	800b1f2 <__exponent+0x1c>
 800b20e:	3130      	adds	r1, #48	@ 0x30
 800b210:	1e94      	subs	r4, r2, #2
 800b212:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b216:	1c41      	adds	r1, r0, #1
 800b218:	4623      	mov	r3, r4
 800b21a:	42ab      	cmp	r3, r5
 800b21c:	d30a      	bcc.n	800b234 <__exponent+0x5e>
 800b21e:	f10d 0309 	add.w	r3, sp, #9
 800b222:	1a9b      	subs	r3, r3, r2
 800b224:	42ac      	cmp	r4, r5
 800b226:	bf88      	it	hi
 800b228:	2300      	movhi	r3, #0
 800b22a:	3302      	adds	r3, #2
 800b22c:	4403      	add	r3, r0
 800b22e:	1a18      	subs	r0, r3, r0
 800b230:	b003      	add	sp, #12
 800b232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b234:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b238:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b23c:	e7ed      	b.n	800b21a <__exponent+0x44>
 800b23e:	2330      	movs	r3, #48	@ 0x30
 800b240:	3130      	adds	r1, #48	@ 0x30
 800b242:	7083      	strb	r3, [r0, #2]
 800b244:	70c1      	strb	r1, [r0, #3]
 800b246:	1d03      	adds	r3, r0, #4
 800b248:	e7f1      	b.n	800b22e <__exponent+0x58>
	...

0800b24c <_printf_float>:
 800b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b250:	b08d      	sub	sp, #52	@ 0x34
 800b252:	460c      	mov	r4, r1
 800b254:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b258:	4616      	mov	r6, r2
 800b25a:	461f      	mov	r7, r3
 800b25c:	4605      	mov	r5, r0
 800b25e:	f001 f841 	bl	800c2e4 <_localeconv_r>
 800b262:	6803      	ldr	r3, [r0, #0]
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	4618      	mov	r0, r3
 800b268:	f7f5 f822 	bl	80002b0 <strlen>
 800b26c:	2300      	movs	r3, #0
 800b26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b270:	f8d8 3000 	ldr.w	r3, [r8]
 800b274:	9005      	str	r0, [sp, #20]
 800b276:	3307      	adds	r3, #7
 800b278:	f023 0307 	bic.w	r3, r3, #7
 800b27c:	f103 0208 	add.w	r2, r3, #8
 800b280:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b284:	f8d4 b000 	ldr.w	fp, [r4]
 800b288:	f8c8 2000 	str.w	r2, [r8]
 800b28c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b290:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b294:	9307      	str	r3, [sp, #28]
 800b296:	f8cd 8018 	str.w	r8, [sp, #24]
 800b29a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b29e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2a2:	4b9c      	ldr	r3, [pc, #624]	@ (800b514 <_printf_float+0x2c8>)
 800b2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a8:	f7f5 fc60 	bl	8000b6c <__aeabi_dcmpun>
 800b2ac:	bb70      	cbnz	r0, 800b30c <_printf_float+0xc0>
 800b2ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2b2:	4b98      	ldr	r3, [pc, #608]	@ (800b514 <_printf_float+0x2c8>)
 800b2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b8:	f7f5 fc3a 	bl	8000b30 <__aeabi_dcmple>
 800b2bc:	bb30      	cbnz	r0, 800b30c <_printf_float+0xc0>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	f7f5 fc29 	bl	8000b1c <__aeabi_dcmplt>
 800b2ca:	b110      	cbz	r0, 800b2d2 <_printf_float+0x86>
 800b2cc:	232d      	movs	r3, #45	@ 0x2d
 800b2ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2d2:	4a91      	ldr	r2, [pc, #580]	@ (800b518 <_printf_float+0x2cc>)
 800b2d4:	4b91      	ldr	r3, [pc, #580]	@ (800b51c <_printf_float+0x2d0>)
 800b2d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b2da:	bf8c      	ite	hi
 800b2dc:	4690      	movhi	r8, r2
 800b2de:	4698      	movls	r8, r3
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	f02b 0304 	bic.w	r3, fp, #4
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	f04f 0900 	mov.w	r9, #0
 800b2ee:	9700      	str	r7, [sp, #0]
 800b2f0:	4633      	mov	r3, r6
 800b2f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 f9d2 	bl	800b6a0 <_printf_common>
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	f040 808d 	bne.w	800b41c <_printf_float+0x1d0>
 800b302:	f04f 30ff 	mov.w	r0, #4294967295
 800b306:	b00d      	add	sp, #52	@ 0x34
 800b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30c:	4642      	mov	r2, r8
 800b30e:	464b      	mov	r3, r9
 800b310:	4640      	mov	r0, r8
 800b312:	4649      	mov	r1, r9
 800b314:	f7f5 fc2a 	bl	8000b6c <__aeabi_dcmpun>
 800b318:	b140      	cbz	r0, 800b32c <_printf_float+0xe0>
 800b31a:	464b      	mov	r3, r9
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	bfbc      	itt	lt
 800b320:	232d      	movlt	r3, #45	@ 0x2d
 800b322:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b326:	4a7e      	ldr	r2, [pc, #504]	@ (800b520 <_printf_float+0x2d4>)
 800b328:	4b7e      	ldr	r3, [pc, #504]	@ (800b524 <_printf_float+0x2d8>)
 800b32a:	e7d4      	b.n	800b2d6 <_printf_float+0x8a>
 800b32c:	6863      	ldr	r3, [r4, #4]
 800b32e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b332:	9206      	str	r2, [sp, #24]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	d13b      	bne.n	800b3b0 <_printf_float+0x164>
 800b338:	2306      	movs	r3, #6
 800b33a:	6063      	str	r3, [r4, #4]
 800b33c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b340:	2300      	movs	r3, #0
 800b342:	6022      	str	r2, [r4, #0]
 800b344:	9303      	str	r3, [sp, #12]
 800b346:	ab0a      	add	r3, sp, #40	@ 0x28
 800b348:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b34c:	ab09      	add	r3, sp, #36	@ 0x24
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	6861      	ldr	r1, [r4, #4]
 800b352:	ec49 8b10 	vmov	d0, r8, r9
 800b356:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7ff fed6 	bl	800b10c <__cvt>
 800b360:	9b06      	ldr	r3, [sp, #24]
 800b362:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b364:	2b47      	cmp	r3, #71	@ 0x47
 800b366:	4680      	mov	r8, r0
 800b368:	d129      	bne.n	800b3be <_printf_float+0x172>
 800b36a:	1cc8      	adds	r0, r1, #3
 800b36c:	db02      	blt.n	800b374 <_printf_float+0x128>
 800b36e:	6863      	ldr	r3, [r4, #4]
 800b370:	4299      	cmp	r1, r3
 800b372:	dd41      	ble.n	800b3f8 <_printf_float+0x1ac>
 800b374:	f1aa 0a02 	sub.w	sl, sl, #2
 800b378:	fa5f fa8a 	uxtb.w	sl, sl
 800b37c:	3901      	subs	r1, #1
 800b37e:	4652      	mov	r2, sl
 800b380:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b384:	9109      	str	r1, [sp, #36]	@ 0x24
 800b386:	f7ff ff26 	bl	800b1d6 <__exponent>
 800b38a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b38c:	1813      	adds	r3, r2, r0
 800b38e:	2a01      	cmp	r2, #1
 800b390:	4681      	mov	r9, r0
 800b392:	6123      	str	r3, [r4, #16]
 800b394:	dc02      	bgt.n	800b39c <_printf_float+0x150>
 800b396:	6822      	ldr	r2, [r4, #0]
 800b398:	07d2      	lsls	r2, r2, #31
 800b39a:	d501      	bpl.n	800b3a0 <_printf_float+0x154>
 800b39c:	3301      	adds	r3, #1
 800b39e:	6123      	str	r3, [r4, #16]
 800b3a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d0a2      	beq.n	800b2ee <_printf_float+0xa2>
 800b3a8:	232d      	movs	r3, #45	@ 0x2d
 800b3aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3ae:	e79e      	b.n	800b2ee <_printf_float+0xa2>
 800b3b0:	9a06      	ldr	r2, [sp, #24]
 800b3b2:	2a47      	cmp	r2, #71	@ 0x47
 800b3b4:	d1c2      	bne.n	800b33c <_printf_float+0xf0>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1c0      	bne.n	800b33c <_printf_float+0xf0>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e7bd      	b.n	800b33a <_printf_float+0xee>
 800b3be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3c2:	d9db      	bls.n	800b37c <_printf_float+0x130>
 800b3c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b3c8:	d118      	bne.n	800b3fc <_printf_float+0x1b0>
 800b3ca:	2900      	cmp	r1, #0
 800b3cc:	6863      	ldr	r3, [r4, #4]
 800b3ce:	dd0b      	ble.n	800b3e8 <_printf_float+0x19c>
 800b3d0:	6121      	str	r1, [r4, #16]
 800b3d2:	b913      	cbnz	r3, 800b3da <_printf_float+0x18e>
 800b3d4:	6822      	ldr	r2, [r4, #0]
 800b3d6:	07d0      	lsls	r0, r2, #31
 800b3d8:	d502      	bpl.n	800b3e0 <_printf_float+0x194>
 800b3da:	3301      	adds	r3, #1
 800b3dc:	440b      	add	r3, r1
 800b3de:	6123      	str	r3, [r4, #16]
 800b3e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b3e2:	f04f 0900 	mov.w	r9, #0
 800b3e6:	e7db      	b.n	800b3a0 <_printf_float+0x154>
 800b3e8:	b913      	cbnz	r3, 800b3f0 <_printf_float+0x1a4>
 800b3ea:	6822      	ldr	r2, [r4, #0]
 800b3ec:	07d2      	lsls	r2, r2, #31
 800b3ee:	d501      	bpl.n	800b3f4 <_printf_float+0x1a8>
 800b3f0:	3302      	adds	r3, #2
 800b3f2:	e7f4      	b.n	800b3de <_printf_float+0x192>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e7f2      	b.n	800b3de <_printf_float+0x192>
 800b3f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3fe:	4299      	cmp	r1, r3
 800b400:	db05      	blt.n	800b40e <_printf_float+0x1c2>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	6121      	str	r1, [r4, #16]
 800b406:	07d8      	lsls	r0, r3, #31
 800b408:	d5ea      	bpl.n	800b3e0 <_printf_float+0x194>
 800b40a:	1c4b      	adds	r3, r1, #1
 800b40c:	e7e7      	b.n	800b3de <_printf_float+0x192>
 800b40e:	2900      	cmp	r1, #0
 800b410:	bfd4      	ite	le
 800b412:	f1c1 0202 	rsble	r2, r1, #2
 800b416:	2201      	movgt	r2, #1
 800b418:	4413      	add	r3, r2
 800b41a:	e7e0      	b.n	800b3de <_printf_float+0x192>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	055a      	lsls	r2, r3, #21
 800b420:	d407      	bmi.n	800b432 <_printf_float+0x1e6>
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	4642      	mov	r2, r8
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	d12b      	bne.n	800b488 <_printf_float+0x23c>
 800b430:	e767      	b.n	800b302 <_printf_float+0xb6>
 800b432:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b436:	f240 80dd 	bls.w	800b5f4 <_printf_float+0x3a8>
 800b43a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b43e:	2200      	movs	r2, #0
 800b440:	2300      	movs	r3, #0
 800b442:	f7f5 fb61 	bl	8000b08 <__aeabi_dcmpeq>
 800b446:	2800      	cmp	r0, #0
 800b448:	d033      	beq.n	800b4b2 <_printf_float+0x266>
 800b44a:	4a37      	ldr	r2, [pc, #220]	@ (800b528 <_printf_float+0x2dc>)
 800b44c:	2301      	movs	r3, #1
 800b44e:	4631      	mov	r1, r6
 800b450:	4628      	mov	r0, r5
 800b452:	47b8      	blx	r7
 800b454:	3001      	adds	r0, #1
 800b456:	f43f af54 	beq.w	800b302 <_printf_float+0xb6>
 800b45a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b45e:	4543      	cmp	r3, r8
 800b460:	db02      	blt.n	800b468 <_printf_float+0x21c>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	07d8      	lsls	r0, r3, #31
 800b466:	d50f      	bpl.n	800b488 <_printf_float+0x23c>
 800b468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b46c:	4631      	mov	r1, r6
 800b46e:	4628      	mov	r0, r5
 800b470:	47b8      	blx	r7
 800b472:	3001      	adds	r0, #1
 800b474:	f43f af45 	beq.w	800b302 <_printf_float+0xb6>
 800b478:	f04f 0900 	mov.w	r9, #0
 800b47c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b480:	f104 0a1a 	add.w	sl, r4, #26
 800b484:	45c8      	cmp	r8, r9
 800b486:	dc09      	bgt.n	800b49c <_printf_float+0x250>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	079b      	lsls	r3, r3, #30
 800b48c:	f100 8103 	bmi.w	800b696 <_printf_float+0x44a>
 800b490:	68e0      	ldr	r0, [r4, #12]
 800b492:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b494:	4298      	cmp	r0, r3
 800b496:	bfb8      	it	lt
 800b498:	4618      	movlt	r0, r3
 800b49a:	e734      	b.n	800b306 <_printf_float+0xba>
 800b49c:	2301      	movs	r3, #1
 800b49e:	4652      	mov	r2, sl
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b8      	blx	r7
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f43f af2b 	beq.w	800b302 <_printf_float+0xb6>
 800b4ac:	f109 0901 	add.w	r9, r9, #1
 800b4b0:	e7e8      	b.n	800b484 <_printf_float+0x238>
 800b4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dc39      	bgt.n	800b52c <_printf_float+0x2e0>
 800b4b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b528 <_printf_float+0x2dc>)
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4628      	mov	r0, r5
 800b4c0:	47b8      	blx	r7
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	f43f af1d 	beq.w	800b302 <_printf_float+0xb6>
 800b4c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b4cc:	ea59 0303 	orrs.w	r3, r9, r3
 800b4d0:	d102      	bne.n	800b4d8 <_printf_float+0x28c>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	07d9      	lsls	r1, r3, #31
 800b4d6:	d5d7      	bpl.n	800b488 <_printf_float+0x23c>
 800b4d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4dc:	4631      	mov	r1, r6
 800b4de:	4628      	mov	r0, r5
 800b4e0:	47b8      	blx	r7
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	f43f af0d 	beq.w	800b302 <_printf_float+0xb6>
 800b4e8:	f04f 0a00 	mov.w	sl, #0
 800b4ec:	f104 0b1a 	add.w	fp, r4, #26
 800b4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f2:	425b      	negs	r3, r3
 800b4f4:	4553      	cmp	r3, sl
 800b4f6:	dc01      	bgt.n	800b4fc <_printf_float+0x2b0>
 800b4f8:	464b      	mov	r3, r9
 800b4fa:	e793      	b.n	800b424 <_printf_float+0x1d8>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	465a      	mov	r2, fp
 800b500:	4631      	mov	r1, r6
 800b502:	4628      	mov	r0, r5
 800b504:	47b8      	blx	r7
 800b506:	3001      	adds	r0, #1
 800b508:	f43f aefb 	beq.w	800b302 <_printf_float+0xb6>
 800b50c:	f10a 0a01 	add.w	sl, sl, #1
 800b510:	e7ee      	b.n	800b4f0 <_printf_float+0x2a4>
 800b512:	bf00      	nop
 800b514:	7fefffff 	.word	0x7fefffff
 800b518:	08011255 	.word	0x08011255
 800b51c:	08011251 	.word	0x08011251
 800b520:	0801125d 	.word	0x0801125d
 800b524:	08011259 	.word	0x08011259
 800b528:	08011261 	.word	0x08011261
 800b52c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b52e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b532:	4553      	cmp	r3, sl
 800b534:	bfa8      	it	ge
 800b536:	4653      	movge	r3, sl
 800b538:	2b00      	cmp	r3, #0
 800b53a:	4699      	mov	r9, r3
 800b53c:	dc36      	bgt.n	800b5ac <_printf_float+0x360>
 800b53e:	f04f 0b00 	mov.w	fp, #0
 800b542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b546:	f104 021a 	add.w	r2, r4, #26
 800b54a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b54c:	9306      	str	r3, [sp, #24]
 800b54e:	eba3 0309 	sub.w	r3, r3, r9
 800b552:	455b      	cmp	r3, fp
 800b554:	dc31      	bgt.n	800b5ba <_printf_float+0x36e>
 800b556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b558:	459a      	cmp	sl, r3
 800b55a:	dc3a      	bgt.n	800b5d2 <_printf_float+0x386>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	07da      	lsls	r2, r3, #31
 800b560:	d437      	bmi.n	800b5d2 <_printf_float+0x386>
 800b562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b564:	ebaa 0903 	sub.w	r9, sl, r3
 800b568:	9b06      	ldr	r3, [sp, #24]
 800b56a:	ebaa 0303 	sub.w	r3, sl, r3
 800b56e:	4599      	cmp	r9, r3
 800b570:	bfa8      	it	ge
 800b572:	4699      	movge	r9, r3
 800b574:	f1b9 0f00 	cmp.w	r9, #0
 800b578:	dc33      	bgt.n	800b5e2 <_printf_float+0x396>
 800b57a:	f04f 0800 	mov.w	r8, #0
 800b57e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b582:	f104 0b1a 	add.w	fp, r4, #26
 800b586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b588:	ebaa 0303 	sub.w	r3, sl, r3
 800b58c:	eba3 0309 	sub.w	r3, r3, r9
 800b590:	4543      	cmp	r3, r8
 800b592:	f77f af79 	ble.w	800b488 <_printf_float+0x23c>
 800b596:	2301      	movs	r3, #1
 800b598:	465a      	mov	r2, fp
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	47b8      	blx	r7
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	f43f aeae 	beq.w	800b302 <_printf_float+0xb6>
 800b5a6:	f108 0801 	add.w	r8, r8, #1
 800b5aa:	e7ec      	b.n	800b586 <_printf_float+0x33a>
 800b5ac:	4642      	mov	r2, r8
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b8      	blx	r7
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d1c2      	bne.n	800b53e <_printf_float+0x2f2>
 800b5b8:	e6a3      	b.n	800b302 <_printf_float+0xb6>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4628      	mov	r0, r5
 800b5c0:	9206      	str	r2, [sp, #24]
 800b5c2:	47b8      	blx	r7
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	f43f ae9c 	beq.w	800b302 <_printf_float+0xb6>
 800b5ca:	9a06      	ldr	r2, [sp, #24]
 800b5cc:	f10b 0b01 	add.w	fp, fp, #1
 800b5d0:	e7bb      	b.n	800b54a <_printf_float+0x2fe>
 800b5d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d1c0      	bne.n	800b562 <_printf_float+0x316>
 800b5e0:	e68f      	b.n	800b302 <_printf_float+0xb6>
 800b5e2:	9a06      	ldr	r2, [sp, #24]
 800b5e4:	464b      	mov	r3, r9
 800b5e6:	4442      	add	r2, r8
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	d1c3      	bne.n	800b57a <_printf_float+0x32e>
 800b5f2:	e686      	b.n	800b302 <_printf_float+0xb6>
 800b5f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5f8:	f1ba 0f01 	cmp.w	sl, #1
 800b5fc:	dc01      	bgt.n	800b602 <_printf_float+0x3b6>
 800b5fe:	07db      	lsls	r3, r3, #31
 800b600:	d536      	bpl.n	800b670 <_printf_float+0x424>
 800b602:	2301      	movs	r3, #1
 800b604:	4642      	mov	r2, r8
 800b606:	4631      	mov	r1, r6
 800b608:	4628      	mov	r0, r5
 800b60a:	47b8      	blx	r7
 800b60c:	3001      	adds	r0, #1
 800b60e:	f43f ae78 	beq.w	800b302 <_printf_float+0xb6>
 800b612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b616:	4631      	mov	r1, r6
 800b618:	4628      	mov	r0, r5
 800b61a:	47b8      	blx	r7
 800b61c:	3001      	adds	r0, #1
 800b61e:	f43f ae70 	beq.w	800b302 <_printf_float+0xb6>
 800b622:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b626:	2200      	movs	r2, #0
 800b628:	2300      	movs	r3, #0
 800b62a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b62e:	f7f5 fa6b 	bl	8000b08 <__aeabi_dcmpeq>
 800b632:	b9c0      	cbnz	r0, 800b666 <_printf_float+0x41a>
 800b634:	4653      	mov	r3, sl
 800b636:	f108 0201 	add.w	r2, r8, #1
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b8      	blx	r7
 800b640:	3001      	adds	r0, #1
 800b642:	d10c      	bne.n	800b65e <_printf_float+0x412>
 800b644:	e65d      	b.n	800b302 <_printf_float+0xb6>
 800b646:	2301      	movs	r3, #1
 800b648:	465a      	mov	r2, fp
 800b64a:	4631      	mov	r1, r6
 800b64c:	4628      	mov	r0, r5
 800b64e:	47b8      	blx	r7
 800b650:	3001      	adds	r0, #1
 800b652:	f43f ae56 	beq.w	800b302 <_printf_float+0xb6>
 800b656:	f108 0801 	add.w	r8, r8, #1
 800b65a:	45d0      	cmp	r8, sl
 800b65c:	dbf3      	blt.n	800b646 <_printf_float+0x3fa>
 800b65e:	464b      	mov	r3, r9
 800b660:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b664:	e6df      	b.n	800b426 <_printf_float+0x1da>
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	f104 0b1a 	add.w	fp, r4, #26
 800b66e:	e7f4      	b.n	800b65a <_printf_float+0x40e>
 800b670:	2301      	movs	r3, #1
 800b672:	4642      	mov	r2, r8
 800b674:	e7e1      	b.n	800b63a <_printf_float+0x3ee>
 800b676:	2301      	movs	r3, #1
 800b678:	464a      	mov	r2, r9
 800b67a:	4631      	mov	r1, r6
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b8      	blx	r7
 800b680:	3001      	adds	r0, #1
 800b682:	f43f ae3e 	beq.w	800b302 <_printf_float+0xb6>
 800b686:	f108 0801 	add.w	r8, r8, #1
 800b68a:	68e3      	ldr	r3, [r4, #12]
 800b68c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b68e:	1a5b      	subs	r3, r3, r1
 800b690:	4543      	cmp	r3, r8
 800b692:	dcf0      	bgt.n	800b676 <_printf_float+0x42a>
 800b694:	e6fc      	b.n	800b490 <_printf_float+0x244>
 800b696:	f04f 0800 	mov.w	r8, #0
 800b69a:	f104 0919 	add.w	r9, r4, #25
 800b69e:	e7f4      	b.n	800b68a <_printf_float+0x43e>

0800b6a0 <_printf_common>:
 800b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	4698      	mov	r8, r3
 800b6a8:	688a      	ldr	r2, [r1, #8]
 800b6aa:	690b      	ldr	r3, [r1, #16]
 800b6ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	bfb8      	it	lt
 800b6b4:	4613      	movlt	r3, r2
 800b6b6:	6033      	str	r3, [r6, #0]
 800b6b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6bc:	4607      	mov	r7, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	b10a      	cbz	r2, 800b6c6 <_printf_common+0x26>
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	6033      	str	r3, [r6, #0]
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	0699      	lsls	r1, r3, #26
 800b6ca:	bf42      	ittt	mi
 800b6cc:	6833      	ldrmi	r3, [r6, #0]
 800b6ce:	3302      	addmi	r3, #2
 800b6d0:	6033      	strmi	r3, [r6, #0]
 800b6d2:	6825      	ldr	r5, [r4, #0]
 800b6d4:	f015 0506 	ands.w	r5, r5, #6
 800b6d8:	d106      	bne.n	800b6e8 <_printf_common+0x48>
 800b6da:	f104 0a19 	add.w	sl, r4, #25
 800b6de:	68e3      	ldr	r3, [r4, #12]
 800b6e0:	6832      	ldr	r2, [r6, #0]
 800b6e2:	1a9b      	subs	r3, r3, r2
 800b6e4:	42ab      	cmp	r3, r5
 800b6e6:	dc26      	bgt.n	800b736 <_printf_common+0x96>
 800b6e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	3b00      	subs	r3, #0
 800b6f0:	bf18      	it	ne
 800b6f2:	2301      	movne	r3, #1
 800b6f4:	0692      	lsls	r2, r2, #26
 800b6f6:	d42b      	bmi.n	800b750 <_printf_common+0xb0>
 800b6f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6fc:	4641      	mov	r1, r8
 800b6fe:	4638      	mov	r0, r7
 800b700:	47c8      	blx	r9
 800b702:	3001      	adds	r0, #1
 800b704:	d01e      	beq.n	800b744 <_printf_common+0xa4>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	6922      	ldr	r2, [r4, #16]
 800b70a:	f003 0306 	and.w	r3, r3, #6
 800b70e:	2b04      	cmp	r3, #4
 800b710:	bf02      	ittt	eq
 800b712:	68e5      	ldreq	r5, [r4, #12]
 800b714:	6833      	ldreq	r3, [r6, #0]
 800b716:	1aed      	subeq	r5, r5, r3
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	bf0c      	ite	eq
 800b71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b720:	2500      	movne	r5, #0
 800b722:	4293      	cmp	r3, r2
 800b724:	bfc4      	itt	gt
 800b726:	1a9b      	subgt	r3, r3, r2
 800b728:	18ed      	addgt	r5, r5, r3
 800b72a:	2600      	movs	r6, #0
 800b72c:	341a      	adds	r4, #26
 800b72e:	42b5      	cmp	r5, r6
 800b730:	d11a      	bne.n	800b768 <_printf_common+0xc8>
 800b732:	2000      	movs	r0, #0
 800b734:	e008      	b.n	800b748 <_printf_common+0xa8>
 800b736:	2301      	movs	r3, #1
 800b738:	4652      	mov	r2, sl
 800b73a:	4641      	mov	r1, r8
 800b73c:	4638      	mov	r0, r7
 800b73e:	47c8      	blx	r9
 800b740:	3001      	adds	r0, #1
 800b742:	d103      	bne.n	800b74c <_printf_common+0xac>
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74c:	3501      	adds	r5, #1
 800b74e:	e7c6      	b.n	800b6de <_printf_common+0x3e>
 800b750:	18e1      	adds	r1, r4, r3
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	2030      	movs	r0, #48	@ 0x30
 800b756:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b75a:	4422      	add	r2, r4
 800b75c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b764:	3302      	adds	r3, #2
 800b766:	e7c7      	b.n	800b6f8 <_printf_common+0x58>
 800b768:	2301      	movs	r3, #1
 800b76a:	4622      	mov	r2, r4
 800b76c:	4641      	mov	r1, r8
 800b76e:	4638      	mov	r0, r7
 800b770:	47c8      	blx	r9
 800b772:	3001      	adds	r0, #1
 800b774:	d0e6      	beq.n	800b744 <_printf_common+0xa4>
 800b776:	3601      	adds	r6, #1
 800b778:	e7d9      	b.n	800b72e <_printf_common+0x8e>
	...

0800b77c <_printf_i>:
 800b77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	7e0f      	ldrb	r7, [r1, #24]
 800b782:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b784:	2f78      	cmp	r7, #120	@ 0x78
 800b786:	4691      	mov	r9, r2
 800b788:	4680      	mov	r8, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	469a      	mov	sl, r3
 800b78e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b792:	d807      	bhi.n	800b7a4 <_printf_i+0x28>
 800b794:	2f62      	cmp	r7, #98	@ 0x62
 800b796:	d80a      	bhi.n	800b7ae <_printf_i+0x32>
 800b798:	2f00      	cmp	r7, #0
 800b79a:	f000 80d1 	beq.w	800b940 <_printf_i+0x1c4>
 800b79e:	2f58      	cmp	r7, #88	@ 0x58
 800b7a0:	f000 80b8 	beq.w	800b914 <_printf_i+0x198>
 800b7a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7ac:	e03a      	b.n	800b824 <_printf_i+0xa8>
 800b7ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7b2:	2b15      	cmp	r3, #21
 800b7b4:	d8f6      	bhi.n	800b7a4 <_printf_i+0x28>
 800b7b6:	a101      	add	r1, pc, #4	@ (adr r1, 800b7bc <_printf_i+0x40>)
 800b7b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7bc:	0800b815 	.word	0x0800b815
 800b7c0:	0800b829 	.word	0x0800b829
 800b7c4:	0800b7a5 	.word	0x0800b7a5
 800b7c8:	0800b7a5 	.word	0x0800b7a5
 800b7cc:	0800b7a5 	.word	0x0800b7a5
 800b7d0:	0800b7a5 	.word	0x0800b7a5
 800b7d4:	0800b829 	.word	0x0800b829
 800b7d8:	0800b7a5 	.word	0x0800b7a5
 800b7dc:	0800b7a5 	.word	0x0800b7a5
 800b7e0:	0800b7a5 	.word	0x0800b7a5
 800b7e4:	0800b7a5 	.word	0x0800b7a5
 800b7e8:	0800b927 	.word	0x0800b927
 800b7ec:	0800b853 	.word	0x0800b853
 800b7f0:	0800b8e1 	.word	0x0800b8e1
 800b7f4:	0800b7a5 	.word	0x0800b7a5
 800b7f8:	0800b7a5 	.word	0x0800b7a5
 800b7fc:	0800b949 	.word	0x0800b949
 800b800:	0800b7a5 	.word	0x0800b7a5
 800b804:	0800b853 	.word	0x0800b853
 800b808:	0800b7a5 	.word	0x0800b7a5
 800b80c:	0800b7a5 	.word	0x0800b7a5
 800b810:	0800b8e9 	.word	0x0800b8e9
 800b814:	6833      	ldr	r3, [r6, #0]
 800b816:	1d1a      	adds	r2, r3, #4
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6032      	str	r2, [r6, #0]
 800b81c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b820:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b824:	2301      	movs	r3, #1
 800b826:	e09c      	b.n	800b962 <_printf_i+0x1e6>
 800b828:	6833      	ldr	r3, [r6, #0]
 800b82a:	6820      	ldr	r0, [r4, #0]
 800b82c:	1d19      	adds	r1, r3, #4
 800b82e:	6031      	str	r1, [r6, #0]
 800b830:	0606      	lsls	r6, r0, #24
 800b832:	d501      	bpl.n	800b838 <_printf_i+0xbc>
 800b834:	681d      	ldr	r5, [r3, #0]
 800b836:	e003      	b.n	800b840 <_printf_i+0xc4>
 800b838:	0645      	lsls	r5, r0, #25
 800b83a:	d5fb      	bpl.n	800b834 <_printf_i+0xb8>
 800b83c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b840:	2d00      	cmp	r5, #0
 800b842:	da03      	bge.n	800b84c <_printf_i+0xd0>
 800b844:	232d      	movs	r3, #45	@ 0x2d
 800b846:	426d      	negs	r5, r5
 800b848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b84c:	4858      	ldr	r0, [pc, #352]	@ (800b9b0 <_printf_i+0x234>)
 800b84e:	230a      	movs	r3, #10
 800b850:	e011      	b.n	800b876 <_printf_i+0xfa>
 800b852:	6821      	ldr	r1, [r4, #0]
 800b854:	6833      	ldr	r3, [r6, #0]
 800b856:	0608      	lsls	r0, r1, #24
 800b858:	f853 5b04 	ldr.w	r5, [r3], #4
 800b85c:	d402      	bmi.n	800b864 <_printf_i+0xe8>
 800b85e:	0649      	lsls	r1, r1, #25
 800b860:	bf48      	it	mi
 800b862:	b2ad      	uxthmi	r5, r5
 800b864:	2f6f      	cmp	r7, #111	@ 0x6f
 800b866:	4852      	ldr	r0, [pc, #328]	@ (800b9b0 <_printf_i+0x234>)
 800b868:	6033      	str	r3, [r6, #0]
 800b86a:	bf14      	ite	ne
 800b86c:	230a      	movne	r3, #10
 800b86e:	2308      	moveq	r3, #8
 800b870:	2100      	movs	r1, #0
 800b872:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b876:	6866      	ldr	r6, [r4, #4]
 800b878:	60a6      	str	r6, [r4, #8]
 800b87a:	2e00      	cmp	r6, #0
 800b87c:	db05      	blt.n	800b88a <_printf_i+0x10e>
 800b87e:	6821      	ldr	r1, [r4, #0]
 800b880:	432e      	orrs	r6, r5
 800b882:	f021 0104 	bic.w	r1, r1, #4
 800b886:	6021      	str	r1, [r4, #0]
 800b888:	d04b      	beq.n	800b922 <_printf_i+0x1a6>
 800b88a:	4616      	mov	r6, r2
 800b88c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b890:	fb03 5711 	mls	r7, r3, r1, r5
 800b894:	5dc7      	ldrb	r7, [r0, r7]
 800b896:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b89a:	462f      	mov	r7, r5
 800b89c:	42bb      	cmp	r3, r7
 800b89e:	460d      	mov	r5, r1
 800b8a0:	d9f4      	bls.n	800b88c <_printf_i+0x110>
 800b8a2:	2b08      	cmp	r3, #8
 800b8a4:	d10b      	bne.n	800b8be <_printf_i+0x142>
 800b8a6:	6823      	ldr	r3, [r4, #0]
 800b8a8:	07df      	lsls	r7, r3, #31
 800b8aa:	d508      	bpl.n	800b8be <_printf_i+0x142>
 800b8ac:	6923      	ldr	r3, [r4, #16]
 800b8ae:	6861      	ldr	r1, [r4, #4]
 800b8b0:	4299      	cmp	r1, r3
 800b8b2:	bfde      	ittt	le
 800b8b4:	2330      	movle	r3, #48	@ 0x30
 800b8b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8be:	1b92      	subs	r2, r2, r6
 800b8c0:	6122      	str	r2, [r4, #16]
 800b8c2:	f8cd a000 	str.w	sl, [sp]
 800b8c6:	464b      	mov	r3, r9
 800b8c8:	aa03      	add	r2, sp, #12
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	f7ff fee7 	bl	800b6a0 <_printf_common>
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	d14a      	bne.n	800b96c <_printf_i+0x1f0>
 800b8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8da:	b004      	add	sp, #16
 800b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	f043 0320 	orr.w	r3, r3, #32
 800b8e6:	6023      	str	r3, [r4, #0]
 800b8e8:	4832      	ldr	r0, [pc, #200]	@ (800b9b4 <_printf_i+0x238>)
 800b8ea:	2778      	movs	r7, #120	@ 0x78
 800b8ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	6831      	ldr	r1, [r6, #0]
 800b8f4:	061f      	lsls	r7, r3, #24
 800b8f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8fa:	d402      	bmi.n	800b902 <_printf_i+0x186>
 800b8fc:	065f      	lsls	r7, r3, #25
 800b8fe:	bf48      	it	mi
 800b900:	b2ad      	uxthmi	r5, r5
 800b902:	6031      	str	r1, [r6, #0]
 800b904:	07d9      	lsls	r1, r3, #31
 800b906:	bf44      	itt	mi
 800b908:	f043 0320 	orrmi.w	r3, r3, #32
 800b90c:	6023      	strmi	r3, [r4, #0]
 800b90e:	b11d      	cbz	r5, 800b918 <_printf_i+0x19c>
 800b910:	2310      	movs	r3, #16
 800b912:	e7ad      	b.n	800b870 <_printf_i+0xf4>
 800b914:	4826      	ldr	r0, [pc, #152]	@ (800b9b0 <_printf_i+0x234>)
 800b916:	e7e9      	b.n	800b8ec <_printf_i+0x170>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	f023 0320 	bic.w	r3, r3, #32
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	e7f6      	b.n	800b910 <_printf_i+0x194>
 800b922:	4616      	mov	r6, r2
 800b924:	e7bd      	b.n	800b8a2 <_printf_i+0x126>
 800b926:	6833      	ldr	r3, [r6, #0]
 800b928:	6825      	ldr	r5, [r4, #0]
 800b92a:	6961      	ldr	r1, [r4, #20]
 800b92c:	1d18      	adds	r0, r3, #4
 800b92e:	6030      	str	r0, [r6, #0]
 800b930:	062e      	lsls	r6, r5, #24
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	d501      	bpl.n	800b93a <_printf_i+0x1be>
 800b936:	6019      	str	r1, [r3, #0]
 800b938:	e002      	b.n	800b940 <_printf_i+0x1c4>
 800b93a:	0668      	lsls	r0, r5, #25
 800b93c:	d5fb      	bpl.n	800b936 <_printf_i+0x1ba>
 800b93e:	8019      	strh	r1, [r3, #0]
 800b940:	2300      	movs	r3, #0
 800b942:	6123      	str	r3, [r4, #16]
 800b944:	4616      	mov	r6, r2
 800b946:	e7bc      	b.n	800b8c2 <_printf_i+0x146>
 800b948:	6833      	ldr	r3, [r6, #0]
 800b94a:	1d1a      	adds	r2, r3, #4
 800b94c:	6032      	str	r2, [r6, #0]
 800b94e:	681e      	ldr	r6, [r3, #0]
 800b950:	6862      	ldr	r2, [r4, #4]
 800b952:	2100      	movs	r1, #0
 800b954:	4630      	mov	r0, r6
 800b956:	f7f4 fc5b 	bl	8000210 <memchr>
 800b95a:	b108      	cbz	r0, 800b960 <_printf_i+0x1e4>
 800b95c:	1b80      	subs	r0, r0, r6
 800b95e:	6060      	str	r0, [r4, #4]
 800b960:	6863      	ldr	r3, [r4, #4]
 800b962:	6123      	str	r3, [r4, #16]
 800b964:	2300      	movs	r3, #0
 800b966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b96a:	e7aa      	b.n	800b8c2 <_printf_i+0x146>
 800b96c:	6923      	ldr	r3, [r4, #16]
 800b96e:	4632      	mov	r2, r6
 800b970:	4649      	mov	r1, r9
 800b972:	4640      	mov	r0, r8
 800b974:	47d0      	blx	sl
 800b976:	3001      	adds	r0, #1
 800b978:	d0ad      	beq.n	800b8d6 <_printf_i+0x15a>
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	079b      	lsls	r3, r3, #30
 800b97e:	d413      	bmi.n	800b9a8 <_printf_i+0x22c>
 800b980:	68e0      	ldr	r0, [r4, #12]
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	4298      	cmp	r0, r3
 800b986:	bfb8      	it	lt
 800b988:	4618      	movlt	r0, r3
 800b98a:	e7a6      	b.n	800b8da <_printf_i+0x15e>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4632      	mov	r2, r6
 800b990:	4649      	mov	r1, r9
 800b992:	4640      	mov	r0, r8
 800b994:	47d0      	blx	sl
 800b996:	3001      	adds	r0, #1
 800b998:	d09d      	beq.n	800b8d6 <_printf_i+0x15a>
 800b99a:	3501      	adds	r5, #1
 800b99c:	68e3      	ldr	r3, [r4, #12]
 800b99e:	9903      	ldr	r1, [sp, #12]
 800b9a0:	1a5b      	subs	r3, r3, r1
 800b9a2:	42ab      	cmp	r3, r5
 800b9a4:	dcf2      	bgt.n	800b98c <_printf_i+0x210>
 800b9a6:	e7eb      	b.n	800b980 <_printf_i+0x204>
 800b9a8:	2500      	movs	r5, #0
 800b9aa:	f104 0619 	add.w	r6, r4, #25
 800b9ae:	e7f5      	b.n	800b99c <_printf_i+0x220>
 800b9b0:	08011263 	.word	0x08011263
 800b9b4:	08011274 	.word	0x08011274

0800b9b8 <_scanf_float>:
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	b087      	sub	sp, #28
 800b9be:	4691      	mov	r9, r2
 800b9c0:	9303      	str	r3, [sp, #12]
 800b9c2:	688b      	ldr	r3, [r1, #8]
 800b9c4:	1e5a      	subs	r2, r3, #1
 800b9c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b9ca:	bf81      	itttt	hi
 800b9cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b9d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b9d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b9d8:	608b      	strhi	r3, [r1, #8]
 800b9da:	680b      	ldr	r3, [r1, #0]
 800b9dc:	460a      	mov	r2, r1
 800b9de:	f04f 0500 	mov.w	r5, #0
 800b9e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b9e6:	f842 3b1c 	str.w	r3, [r2], #28
 800b9ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b9ee:	4680      	mov	r8, r0
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	bf98      	it	ls
 800b9f4:	f04f 0b00 	movls.w	fp, #0
 800b9f8:	9201      	str	r2, [sp, #4]
 800b9fa:	4616      	mov	r6, r2
 800b9fc:	46aa      	mov	sl, r5
 800b9fe:	462f      	mov	r7, r5
 800ba00:	9502      	str	r5, [sp, #8]
 800ba02:	68a2      	ldr	r2, [r4, #8]
 800ba04:	b15a      	cbz	r2, 800ba1e <_scanf_float+0x66>
 800ba06:	f8d9 3000 	ldr.w	r3, [r9]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba0e:	d863      	bhi.n	800bad8 <_scanf_float+0x120>
 800ba10:	2b40      	cmp	r3, #64	@ 0x40
 800ba12:	d83b      	bhi.n	800ba8c <_scanf_float+0xd4>
 800ba14:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ba18:	b2c8      	uxtb	r0, r1
 800ba1a:	280e      	cmp	r0, #14
 800ba1c:	d939      	bls.n	800ba92 <_scanf_float+0xda>
 800ba1e:	b11f      	cbz	r7, 800ba28 <_scanf_float+0x70>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba2c:	f1ba 0f01 	cmp.w	sl, #1
 800ba30:	f200 8114 	bhi.w	800bc5c <_scanf_float+0x2a4>
 800ba34:	9b01      	ldr	r3, [sp, #4]
 800ba36:	429e      	cmp	r6, r3
 800ba38:	f200 8105 	bhi.w	800bc46 <_scanf_float+0x28e>
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	b007      	add	sp, #28
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba44:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ba48:	2a0d      	cmp	r2, #13
 800ba4a:	d8e8      	bhi.n	800ba1e <_scanf_float+0x66>
 800ba4c:	a101      	add	r1, pc, #4	@ (adr r1, 800ba54 <_scanf_float+0x9c>)
 800ba4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba52:	bf00      	nop
 800ba54:	0800bb9d 	.word	0x0800bb9d
 800ba58:	0800ba1f 	.word	0x0800ba1f
 800ba5c:	0800ba1f 	.word	0x0800ba1f
 800ba60:	0800ba1f 	.word	0x0800ba1f
 800ba64:	0800bbf9 	.word	0x0800bbf9
 800ba68:	0800bbd3 	.word	0x0800bbd3
 800ba6c:	0800ba1f 	.word	0x0800ba1f
 800ba70:	0800ba1f 	.word	0x0800ba1f
 800ba74:	0800bbab 	.word	0x0800bbab
 800ba78:	0800ba1f 	.word	0x0800ba1f
 800ba7c:	0800ba1f 	.word	0x0800ba1f
 800ba80:	0800ba1f 	.word	0x0800ba1f
 800ba84:	0800ba1f 	.word	0x0800ba1f
 800ba88:	0800bb67 	.word	0x0800bb67
 800ba8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ba90:	e7da      	b.n	800ba48 <_scanf_float+0x90>
 800ba92:	290e      	cmp	r1, #14
 800ba94:	d8c3      	bhi.n	800ba1e <_scanf_float+0x66>
 800ba96:	a001      	add	r0, pc, #4	@ (adr r0, 800ba9c <_scanf_float+0xe4>)
 800ba98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ba9c:	0800bb57 	.word	0x0800bb57
 800baa0:	0800ba1f 	.word	0x0800ba1f
 800baa4:	0800bb57 	.word	0x0800bb57
 800baa8:	0800bbe7 	.word	0x0800bbe7
 800baac:	0800ba1f 	.word	0x0800ba1f
 800bab0:	0800baf9 	.word	0x0800baf9
 800bab4:	0800bb3d 	.word	0x0800bb3d
 800bab8:	0800bb3d 	.word	0x0800bb3d
 800babc:	0800bb3d 	.word	0x0800bb3d
 800bac0:	0800bb3d 	.word	0x0800bb3d
 800bac4:	0800bb3d 	.word	0x0800bb3d
 800bac8:	0800bb3d 	.word	0x0800bb3d
 800bacc:	0800bb3d 	.word	0x0800bb3d
 800bad0:	0800bb3d 	.word	0x0800bb3d
 800bad4:	0800bb3d 	.word	0x0800bb3d
 800bad8:	2b6e      	cmp	r3, #110	@ 0x6e
 800bada:	d809      	bhi.n	800baf0 <_scanf_float+0x138>
 800badc:	2b60      	cmp	r3, #96	@ 0x60
 800bade:	d8b1      	bhi.n	800ba44 <_scanf_float+0x8c>
 800bae0:	2b54      	cmp	r3, #84	@ 0x54
 800bae2:	d07b      	beq.n	800bbdc <_scanf_float+0x224>
 800bae4:	2b59      	cmp	r3, #89	@ 0x59
 800bae6:	d19a      	bne.n	800ba1e <_scanf_float+0x66>
 800bae8:	2d07      	cmp	r5, #7
 800baea:	d198      	bne.n	800ba1e <_scanf_float+0x66>
 800baec:	2508      	movs	r5, #8
 800baee:	e02f      	b.n	800bb50 <_scanf_float+0x198>
 800baf0:	2b74      	cmp	r3, #116	@ 0x74
 800baf2:	d073      	beq.n	800bbdc <_scanf_float+0x224>
 800baf4:	2b79      	cmp	r3, #121	@ 0x79
 800baf6:	e7f6      	b.n	800bae6 <_scanf_float+0x12e>
 800baf8:	6821      	ldr	r1, [r4, #0]
 800bafa:	05c8      	lsls	r0, r1, #23
 800bafc:	d51e      	bpl.n	800bb3c <_scanf_float+0x184>
 800bafe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bb02:	6021      	str	r1, [r4, #0]
 800bb04:	3701      	adds	r7, #1
 800bb06:	f1bb 0f00 	cmp.w	fp, #0
 800bb0a:	d003      	beq.n	800bb14 <_scanf_float+0x15c>
 800bb0c:	3201      	adds	r2, #1
 800bb0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb12:	60a2      	str	r2, [r4, #8]
 800bb14:	68a3      	ldr	r3, [r4, #8]
 800bb16:	3b01      	subs	r3, #1
 800bb18:	60a3      	str	r3, [r4, #8]
 800bb1a:	6923      	ldr	r3, [r4, #16]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	6123      	str	r3, [r4, #16]
 800bb20:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f8c9 3004 	str.w	r3, [r9, #4]
 800bb2c:	f340 8082 	ble.w	800bc34 <_scanf_float+0x27c>
 800bb30:	f8d9 3000 	ldr.w	r3, [r9]
 800bb34:	3301      	adds	r3, #1
 800bb36:	f8c9 3000 	str.w	r3, [r9]
 800bb3a:	e762      	b.n	800ba02 <_scanf_float+0x4a>
 800bb3c:	eb1a 0105 	adds.w	r1, sl, r5
 800bb40:	f47f af6d 	bne.w	800ba1e <_scanf_float+0x66>
 800bb44:	6822      	ldr	r2, [r4, #0]
 800bb46:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bb4a:	6022      	str	r2, [r4, #0]
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	468a      	mov	sl, r1
 800bb50:	f806 3b01 	strb.w	r3, [r6], #1
 800bb54:	e7de      	b.n	800bb14 <_scanf_float+0x15c>
 800bb56:	6822      	ldr	r2, [r4, #0]
 800bb58:	0610      	lsls	r0, r2, #24
 800bb5a:	f57f af60 	bpl.w	800ba1e <_scanf_float+0x66>
 800bb5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb62:	6022      	str	r2, [r4, #0]
 800bb64:	e7f4      	b.n	800bb50 <_scanf_float+0x198>
 800bb66:	f1ba 0f00 	cmp.w	sl, #0
 800bb6a:	d10c      	bne.n	800bb86 <_scanf_float+0x1ce>
 800bb6c:	b977      	cbnz	r7, 800bb8c <_scanf_float+0x1d4>
 800bb6e:	6822      	ldr	r2, [r4, #0]
 800bb70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bb74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bb78:	d108      	bne.n	800bb8c <_scanf_float+0x1d4>
 800bb7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb7e:	6022      	str	r2, [r4, #0]
 800bb80:	f04f 0a01 	mov.w	sl, #1
 800bb84:	e7e4      	b.n	800bb50 <_scanf_float+0x198>
 800bb86:	f1ba 0f02 	cmp.w	sl, #2
 800bb8a:	d050      	beq.n	800bc2e <_scanf_float+0x276>
 800bb8c:	2d01      	cmp	r5, #1
 800bb8e:	d002      	beq.n	800bb96 <_scanf_float+0x1de>
 800bb90:	2d04      	cmp	r5, #4
 800bb92:	f47f af44 	bne.w	800ba1e <_scanf_float+0x66>
 800bb96:	3501      	adds	r5, #1
 800bb98:	b2ed      	uxtb	r5, r5
 800bb9a:	e7d9      	b.n	800bb50 <_scanf_float+0x198>
 800bb9c:	f1ba 0f01 	cmp.w	sl, #1
 800bba0:	f47f af3d 	bne.w	800ba1e <_scanf_float+0x66>
 800bba4:	f04f 0a02 	mov.w	sl, #2
 800bba8:	e7d2      	b.n	800bb50 <_scanf_float+0x198>
 800bbaa:	b975      	cbnz	r5, 800bbca <_scanf_float+0x212>
 800bbac:	2f00      	cmp	r7, #0
 800bbae:	f47f af37 	bne.w	800ba20 <_scanf_float+0x68>
 800bbb2:	6822      	ldr	r2, [r4, #0]
 800bbb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bbb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bbbc:	f040 8103 	bne.w	800bdc6 <_scanf_float+0x40e>
 800bbc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bbc4:	6022      	str	r2, [r4, #0]
 800bbc6:	2501      	movs	r5, #1
 800bbc8:	e7c2      	b.n	800bb50 <_scanf_float+0x198>
 800bbca:	2d03      	cmp	r5, #3
 800bbcc:	d0e3      	beq.n	800bb96 <_scanf_float+0x1de>
 800bbce:	2d05      	cmp	r5, #5
 800bbd0:	e7df      	b.n	800bb92 <_scanf_float+0x1da>
 800bbd2:	2d02      	cmp	r5, #2
 800bbd4:	f47f af23 	bne.w	800ba1e <_scanf_float+0x66>
 800bbd8:	2503      	movs	r5, #3
 800bbda:	e7b9      	b.n	800bb50 <_scanf_float+0x198>
 800bbdc:	2d06      	cmp	r5, #6
 800bbde:	f47f af1e 	bne.w	800ba1e <_scanf_float+0x66>
 800bbe2:	2507      	movs	r5, #7
 800bbe4:	e7b4      	b.n	800bb50 <_scanf_float+0x198>
 800bbe6:	6822      	ldr	r2, [r4, #0]
 800bbe8:	0591      	lsls	r1, r2, #22
 800bbea:	f57f af18 	bpl.w	800ba1e <_scanf_float+0x66>
 800bbee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bbf2:	6022      	str	r2, [r4, #0]
 800bbf4:	9702      	str	r7, [sp, #8]
 800bbf6:	e7ab      	b.n	800bb50 <_scanf_float+0x198>
 800bbf8:	6822      	ldr	r2, [r4, #0]
 800bbfa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bbfe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bc02:	d005      	beq.n	800bc10 <_scanf_float+0x258>
 800bc04:	0550      	lsls	r0, r2, #21
 800bc06:	f57f af0a 	bpl.w	800ba1e <_scanf_float+0x66>
 800bc0a:	2f00      	cmp	r7, #0
 800bc0c:	f000 80db 	beq.w	800bdc6 <_scanf_float+0x40e>
 800bc10:	0591      	lsls	r1, r2, #22
 800bc12:	bf58      	it	pl
 800bc14:	9902      	ldrpl	r1, [sp, #8]
 800bc16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc1a:	bf58      	it	pl
 800bc1c:	1a79      	subpl	r1, r7, r1
 800bc1e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bc22:	bf58      	it	pl
 800bc24:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bc28:	6022      	str	r2, [r4, #0]
 800bc2a:	2700      	movs	r7, #0
 800bc2c:	e790      	b.n	800bb50 <_scanf_float+0x198>
 800bc2e:	f04f 0a03 	mov.w	sl, #3
 800bc32:	e78d      	b.n	800bb50 <_scanf_float+0x198>
 800bc34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bc38:	4649      	mov	r1, r9
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	4798      	blx	r3
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f43f aedf 	beq.w	800ba02 <_scanf_float+0x4a>
 800bc44:	e6eb      	b.n	800ba1e <_scanf_float+0x66>
 800bc46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc4e:	464a      	mov	r2, r9
 800bc50:	4640      	mov	r0, r8
 800bc52:	4798      	blx	r3
 800bc54:	6923      	ldr	r3, [r4, #16]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	6123      	str	r3, [r4, #16]
 800bc5a:	e6eb      	b.n	800ba34 <_scanf_float+0x7c>
 800bc5c:	1e6b      	subs	r3, r5, #1
 800bc5e:	2b06      	cmp	r3, #6
 800bc60:	d824      	bhi.n	800bcac <_scanf_float+0x2f4>
 800bc62:	2d02      	cmp	r5, #2
 800bc64:	d836      	bhi.n	800bcd4 <_scanf_float+0x31c>
 800bc66:	9b01      	ldr	r3, [sp, #4]
 800bc68:	429e      	cmp	r6, r3
 800bc6a:	f67f aee7 	bls.w	800ba3c <_scanf_float+0x84>
 800bc6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc76:	464a      	mov	r2, r9
 800bc78:	4640      	mov	r0, r8
 800bc7a:	4798      	blx	r3
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	e7f0      	b.n	800bc66 <_scanf_float+0x2ae>
 800bc84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc88:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bc8c:	464a      	mov	r2, r9
 800bc8e:	4640      	mov	r0, r8
 800bc90:	4798      	blx	r3
 800bc92:	6923      	ldr	r3, [r4, #16]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	6123      	str	r3, [r4, #16]
 800bc98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc9c:	fa5f fa8a 	uxtb.w	sl, sl
 800bca0:	f1ba 0f02 	cmp.w	sl, #2
 800bca4:	d1ee      	bne.n	800bc84 <_scanf_float+0x2cc>
 800bca6:	3d03      	subs	r5, #3
 800bca8:	b2ed      	uxtb	r5, r5
 800bcaa:	1b76      	subs	r6, r6, r5
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	05da      	lsls	r2, r3, #23
 800bcb0:	d530      	bpl.n	800bd14 <_scanf_float+0x35c>
 800bcb2:	055b      	lsls	r3, r3, #21
 800bcb4:	d511      	bpl.n	800bcda <_scanf_float+0x322>
 800bcb6:	9b01      	ldr	r3, [sp, #4]
 800bcb8:	429e      	cmp	r6, r3
 800bcba:	f67f aebf 	bls.w	800ba3c <_scanf_float+0x84>
 800bcbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcc6:	464a      	mov	r2, r9
 800bcc8:	4640      	mov	r0, r8
 800bcca:	4798      	blx	r3
 800bccc:	6923      	ldr	r3, [r4, #16]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	6123      	str	r3, [r4, #16]
 800bcd2:	e7f0      	b.n	800bcb6 <_scanf_float+0x2fe>
 800bcd4:	46aa      	mov	sl, r5
 800bcd6:	46b3      	mov	fp, r6
 800bcd8:	e7de      	b.n	800bc98 <_scanf_float+0x2e0>
 800bcda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bcde:	6923      	ldr	r3, [r4, #16]
 800bce0:	2965      	cmp	r1, #101	@ 0x65
 800bce2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bce6:	f106 35ff 	add.w	r5, r6, #4294967295
 800bcea:	6123      	str	r3, [r4, #16]
 800bcec:	d00c      	beq.n	800bd08 <_scanf_float+0x350>
 800bcee:	2945      	cmp	r1, #69	@ 0x45
 800bcf0:	d00a      	beq.n	800bd08 <_scanf_float+0x350>
 800bcf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcf6:	464a      	mov	r2, r9
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	4798      	blx	r3
 800bcfc:	6923      	ldr	r3, [r4, #16]
 800bcfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	1eb5      	subs	r5, r6, #2
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd0c:	464a      	mov	r2, r9
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4798      	blx	r3
 800bd12:	462e      	mov	r6, r5
 800bd14:	6822      	ldr	r2, [r4, #0]
 800bd16:	f012 0210 	ands.w	r2, r2, #16
 800bd1a:	d001      	beq.n	800bd20 <_scanf_float+0x368>
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	e68e      	b.n	800ba3e <_scanf_float+0x86>
 800bd20:	7032      	strb	r2, [r6, #0]
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bd28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd2c:	d125      	bne.n	800bd7a <_scanf_float+0x3c2>
 800bd2e:	9b02      	ldr	r3, [sp, #8]
 800bd30:	429f      	cmp	r7, r3
 800bd32:	d00a      	beq.n	800bd4a <_scanf_float+0x392>
 800bd34:	1bda      	subs	r2, r3, r7
 800bd36:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bd3a:	429e      	cmp	r6, r3
 800bd3c:	bf28      	it	cs
 800bd3e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bd42:	4922      	ldr	r1, [pc, #136]	@ (800bdcc <_scanf_float+0x414>)
 800bd44:	4630      	mov	r0, r6
 800bd46:	f000 fa03 	bl	800c150 <siprintf>
 800bd4a:	9901      	ldr	r1, [sp, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f002 fd6a 	bl	800e828 <_strtod_r>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	6821      	ldr	r1, [r4, #0]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f011 0f02 	tst.w	r1, #2
 800bd5e:	ec57 6b10 	vmov	r6, r7, d0
 800bd62:	f103 0204 	add.w	r2, r3, #4
 800bd66:	d015      	beq.n	800bd94 <_scanf_float+0x3dc>
 800bd68:	9903      	ldr	r1, [sp, #12]
 800bd6a:	600a      	str	r2, [r1, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	e9c3 6700 	strd	r6, r7, [r3]
 800bd72:	68e3      	ldr	r3, [r4, #12]
 800bd74:	3301      	adds	r3, #1
 800bd76:	60e3      	str	r3, [r4, #12]
 800bd78:	e7d0      	b.n	800bd1c <_scanf_float+0x364>
 800bd7a:	9b04      	ldr	r3, [sp, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d0e4      	beq.n	800bd4a <_scanf_float+0x392>
 800bd80:	9905      	ldr	r1, [sp, #20]
 800bd82:	230a      	movs	r3, #10
 800bd84:	3101      	adds	r1, #1
 800bd86:	4640      	mov	r0, r8
 800bd88:	f7ff f9b4 	bl	800b0f4 <_strtol_r>
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	9e05      	ldr	r6, [sp, #20]
 800bd90:	1ac2      	subs	r2, r0, r3
 800bd92:	e7d0      	b.n	800bd36 <_scanf_float+0x37e>
 800bd94:	f011 0f04 	tst.w	r1, #4
 800bd98:	9903      	ldr	r1, [sp, #12]
 800bd9a:	600a      	str	r2, [r1, #0]
 800bd9c:	d1e6      	bne.n	800bd6c <_scanf_float+0x3b4>
 800bd9e:	681d      	ldr	r5, [r3, #0]
 800bda0:	4632      	mov	r2, r6
 800bda2:	463b      	mov	r3, r7
 800bda4:	4630      	mov	r0, r6
 800bda6:	4639      	mov	r1, r7
 800bda8:	f7f4 fee0 	bl	8000b6c <__aeabi_dcmpun>
 800bdac:	b128      	cbz	r0, 800bdba <_scanf_float+0x402>
 800bdae:	4808      	ldr	r0, [pc, #32]	@ (800bdd0 <_scanf_float+0x418>)
 800bdb0:	f000 fb10 	bl	800c3d4 <nanf>
 800bdb4:	ed85 0a00 	vstr	s0, [r5]
 800bdb8:	e7db      	b.n	800bd72 <_scanf_float+0x3ba>
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7f4 ff33 	bl	8000c28 <__aeabi_d2f>
 800bdc2:	6028      	str	r0, [r5, #0]
 800bdc4:	e7d5      	b.n	800bd72 <_scanf_float+0x3ba>
 800bdc6:	2700      	movs	r7, #0
 800bdc8:	e62e      	b.n	800ba28 <_scanf_float+0x70>
 800bdca:	bf00      	nop
 800bdcc:	08011285 	.word	0x08011285
 800bdd0:	08011336 	.word	0x08011336

0800bdd4 <std>:
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	b510      	push	{r4, lr}
 800bdd8:	4604      	mov	r4, r0
 800bdda:	e9c0 3300 	strd	r3, r3, [r0]
 800bdde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bde2:	6083      	str	r3, [r0, #8]
 800bde4:	8181      	strh	r1, [r0, #12]
 800bde6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bde8:	81c2      	strh	r2, [r0, #14]
 800bdea:	6183      	str	r3, [r0, #24]
 800bdec:	4619      	mov	r1, r3
 800bdee:	2208      	movs	r2, #8
 800bdf0:	305c      	adds	r0, #92	@ 0x5c
 800bdf2:	f000 fa12 	bl	800c21a <memset>
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800be2c <std+0x58>)
 800bdf8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bdfa:	4b0d      	ldr	r3, [pc, #52]	@ (800be30 <std+0x5c>)
 800bdfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bdfe:	4b0d      	ldr	r3, [pc, #52]	@ (800be34 <std+0x60>)
 800be00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be02:	4b0d      	ldr	r3, [pc, #52]	@ (800be38 <std+0x64>)
 800be04:	6323      	str	r3, [r4, #48]	@ 0x30
 800be06:	4b0d      	ldr	r3, [pc, #52]	@ (800be3c <std+0x68>)
 800be08:	6224      	str	r4, [r4, #32]
 800be0a:	429c      	cmp	r4, r3
 800be0c:	d006      	beq.n	800be1c <std+0x48>
 800be0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be12:	4294      	cmp	r4, r2
 800be14:	d002      	beq.n	800be1c <std+0x48>
 800be16:	33d0      	adds	r3, #208	@ 0xd0
 800be18:	429c      	cmp	r4, r3
 800be1a:	d105      	bne.n	800be28 <std+0x54>
 800be1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be24:	f000 bad2 	b.w	800c3cc <__retarget_lock_init_recursive>
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	bf00      	nop
 800be2c:	0800c195 	.word	0x0800c195
 800be30:	0800c1b7 	.word	0x0800c1b7
 800be34:	0800c1ef 	.word	0x0800c1ef
 800be38:	0800c213 	.word	0x0800c213
 800be3c:	20000fbc 	.word	0x20000fbc

0800be40 <stdio_exit_handler>:
 800be40:	4a02      	ldr	r2, [pc, #8]	@ (800be4c <stdio_exit_handler+0xc>)
 800be42:	4903      	ldr	r1, [pc, #12]	@ (800be50 <stdio_exit_handler+0x10>)
 800be44:	4803      	ldr	r0, [pc, #12]	@ (800be54 <stdio_exit_handler+0x14>)
 800be46:	f000 b869 	b.w	800bf1c <_fwalk_sglue>
 800be4a:	bf00      	nop
 800be4c:	20000030 	.word	0x20000030
 800be50:	0800ee71 	.word	0x0800ee71
 800be54:	20000040 	.word	0x20000040

0800be58 <cleanup_stdio>:
 800be58:	6841      	ldr	r1, [r0, #4]
 800be5a:	4b0c      	ldr	r3, [pc, #48]	@ (800be8c <cleanup_stdio+0x34>)
 800be5c:	4299      	cmp	r1, r3
 800be5e:	b510      	push	{r4, lr}
 800be60:	4604      	mov	r4, r0
 800be62:	d001      	beq.n	800be68 <cleanup_stdio+0x10>
 800be64:	f003 f804 	bl	800ee70 <_fflush_r>
 800be68:	68a1      	ldr	r1, [r4, #8]
 800be6a:	4b09      	ldr	r3, [pc, #36]	@ (800be90 <cleanup_stdio+0x38>)
 800be6c:	4299      	cmp	r1, r3
 800be6e:	d002      	beq.n	800be76 <cleanup_stdio+0x1e>
 800be70:	4620      	mov	r0, r4
 800be72:	f002 fffd 	bl	800ee70 <_fflush_r>
 800be76:	68e1      	ldr	r1, [r4, #12]
 800be78:	4b06      	ldr	r3, [pc, #24]	@ (800be94 <cleanup_stdio+0x3c>)
 800be7a:	4299      	cmp	r1, r3
 800be7c:	d004      	beq.n	800be88 <cleanup_stdio+0x30>
 800be7e:	4620      	mov	r0, r4
 800be80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be84:	f002 bff4 	b.w	800ee70 <_fflush_r>
 800be88:	bd10      	pop	{r4, pc}
 800be8a:	bf00      	nop
 800be8c:	20000fbc 	.word	0x20000fbc
 800be90:	20001024 	.word	0x20001024
 800be94:	2000108c 	.word	0x2000108c

0800be98 <global_stdio_init.part.0>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bec8 <global_stdio_init.part.0+0x30>)
 800be9c:	4c0b      	ldr	r4, [pc, #44]	@ (800becc <global_stdio_init.part.0+0x34>)
 800be9e:	4a0c      	ldr	r2, [pc, #48]	@ (800bed0 <global_stdio_init.part.0+0x38>)
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	4620      	mov	r0, r4
 800bea4:	2200      	movs	r2, #0
 800bea6:	2104      	movs	r1, #4
 800bea8:	f7ff ff94 	bl	800bdd4 <std>
 800beac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800beb0:	2201      	movs	r2, #1
 800beb2:	2109      	movs	r1, #9
 800beb4:	f7ff ff8e 	bl	800bdd4 <std>
 800beb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bebc:	2202      	movs	r2, #2
 800bebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec2:	2112      	movs	r1, #18
 800bec4:	f7ff bf86 	b.w	800bdd4 <std>
 800bec8:	200010f4 	.word	0x200010f4
 800becc:	20000fbc 	.word	0x20000fbc
 800bed0:	0800be41 	.word	0x0800be41

0800bed4 <__sfp_lock_acquire>:
 800bed4:	4801      	ldr	r0, [pc, #4]	@ (800bedc <__sfp_lock_acquire+0x8>)
 800bed6:	f000 ba7a 	b.w	800c3ce <__retarget_lock_acquire_recursive>
 800beda:	bf00      	nop
 800bedc:	200010fd 	.word	0x200010fd

0800bee0 <__sfp_lock_release>:
 800bee0:	4801      	ldr	r0, [pc, #4]	@ (800bee8 <__sfp_lock_release+0x8>)
 800bee2:	f000 ba75 	b.w	800c3d0 <__retarget_lock_release_recursive>
 800bee6:	bf00      	nop
 800bee8:	200010fd 	.word	0x200010fd

0800beec <__sinit>:
 800beec:	b510      	push	{r4, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	f7ff fff0 	bl	800bed4 <__sfp_lock_acquire>
 800bef4:	6a23      	ldr	r3, [r4, #32]
 800bef6:	b11b      	cbz	r3, 800bf00 <__sinit+0x14>
 800bef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befc:	f7ff bff0 	b.w	800bee0 <__sfp_lock_release>
 800bf00:	4b04      	ldr	r3, [pc, #16]	@ (800bf14 <__sinit+0x28>)
 800bf02:	6223      	str	r3, [r4, #32]
 800bf04:	4b04      	ldr	r3, [pc, #16]	@ (800bf18 <__sinit+0x2c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1f5      	bne.n	800bef8 <__sinit+0xc>
 800bf0c:	f7ff ffc4 	bl	800be98 <global_stdio_init.part.0>
 800bf10:	e7f2      	b.n	800bef8 <__sinit+0xc>
 800bf12:	bf00      	nop
 800bf14:	0800be59 	.word	0x0800be59
 800bf18:	200010f4 	.word	0x200010f4

0800bf1c <_fwalk_sglue>:
 800bf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf20:	4607      	mov	r7, r0
 800bf22:	4688      	mov	r8, r1
 800bf24:	4614      	mov	r4, r2
 800bf26:	2600      	movs	r6, #0
 800bf28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf2c:	f1b9 0901 	subs.w	r9, r9, #1
 800bf30:	d505      	bpl.n	800bf3e <_fwalk_sglue+0x22>
 800bf32:	6824      	ldr	r4, [r4, #0]
 800bf34:	2c00      	cmp	r4, #0
 800bf36:	d1f7      	bne.n	800bf28 <_fwalk_sglue+0xc>
 800bf38:	4630      	mov	r0, r6
 800bf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf3e:	89ab      	ldrh	r3, [r5, #12]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d907      	bls.n	800bf54 <_fwalk_sglue+0x38>
 800bf44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	d003      	beq.n	800bf54 <_fwalk_sglue+0x38>
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	4638      	mov	r0, r7
 800bf50:	47c0      	blx	r8
 800bf52:	4306      	orrs	r6, r0
 800bf54:	3568      	adds	r5, #104	@ 0x68
 800bf56:	e7e9      	b.n	800bf2c <_fwalk_sglue+0x10>

0800bf58 <iprintf>:
 800bf58:	b40f      	push	{r0, r1, r2, r3}
 800bf5a:	b507      	push	{r0, r1, r2, lr}
 800bf5c:	4906      	ldr	r1, [pc, #24]	@ (800bf78 <iprintf+0x20>)
 800bf5e:	ab04      	add	r3, sp, #16
 800bf60:	6808      	ldr	r0, [r1, #0]
 800bf62:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf66:	6881      	ldr	r1, [r0, #8]
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	f002 fde5 	bl	800eb38 <_vfiprintf_r>
 800bf6e:	b003      	add	sp, #12
 800bf70:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf74:	b004      	add	sp, #16
 800bf76:	4770      	bx	lr
 800bf78:	2000003c 	.word	0x2000003c

0800bf7c <setvbuf>:
 800bf7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf80:	461d      	mov	r5, r3
 800bf82:	4b57      	ldr	r3, [pc, #348]	@ (800c0e0 <setvbuf+0x164>)
 800bf84:	681f      	ldr	r7, [r3, #0]
 800bf86:	4604      	mov	r4, r0
 800bf88:	460e      	mov	r6, r1
 800bf8a:	4690      	mov	r8, r2
 800bf8c:	b127      	cbz	r7, 800bf98 <setvbuf+0x1c>
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	b913      	cbnz	r3, 800bf98 <setvbuf+0x1c>
 800bf92:	4638      	mov	r0, r7
 800bf94:	f7ff ffaa 	bl	800beec <__sinit>
 800bf98:	f1b8 0f02 	cmp.w	r8, #2
 800bf9c:	d006      	beq.n	800bfac <setvbuf+0x30>
 800bf9e:	f1b8 0f01 	cmp.w	r8, #1
 800bfa2:	f200 809a 	bhi.w	800c0da <setvbuf+0x15e>
 800bfa6:	2d00      	cmp	r5, #0
 800bfa8:	f2c0 8097 	blt.w	800c0da <setvbuf+0x15e>
 800bfac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	d405      	bmi.n	800bfbe <setvbuf+0x42>
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	059a      	lsls	r2, r3, #22
 800bfb6:	d402      	bmi.n	800bfbe <setvbuf+0x42>
 800bfb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfba:	f000 fa08 	bl	800c3ce <__retarget_lock_acquire_recursive>
 800bfbe:	4621      	mov	r1, r4
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	f002 ff55 	bl	800ee70 <_fflush_r>
 800bfc6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfc8:	b141      	cbz	r1, 800bfdc <setvbuf+0x60>
 800bfca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfce:	4299      	cmp	r1, r3
 800bfd0:	d002      	beq.n	800bfd8 <setvbuf+0x5c>
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	f001 f87c 	bl	800d0d0 <_free_r>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61a3      	str	r3, [r4, #24]
 800bfe0:	6063      	str	r3, [r4, #4]
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	061b      	lsls	r3, r3, #24
 800bfe6:	d503      	bpl.n	800bff0 <setvbuf+0x74>
 800bfe8:	6921      	ldr	r1, [r4, #16]
 800bfea:	4638      	mov	r0, r7
 800bfec:	f001 f870 	bl	800d0d0 <_free_r>
 800bff0:	89a3      	ldrh	r3, [r4, #12]
 800bff2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800bff6:	f023 0303 	bic.w	r3, r3, #3
 800bffa:	f1b8 0f02 	cmp.w	r8, #2
 800bffe:	81a3      	strh	r3, [r4, #12]
 800c000:	d061      	beq.n	800c0c6 <setvbuf+0x14a>
 800c002:	ab01      	add	r3, sp, #4
 800c004:	466a      	mov	r2, sp
 800c006:	4621      	mov	r1, r4
 800c008:	4638      	mov	r0, r7
 800c00a:	f002 ff6b 	bl	800eee4 <__swhatbuf_r>
 800c00e:	89a3      	ldrh	r3, [r4, #12]
 800c010:	4318      	orrs	r0, r3
 800c012:	81a0      	strh	r0, [r4, #12]
 800c014:	bb2d      	cbnz	r5, 800c062 <setvbuf+0xe6>
 800c016:	9d00      	ldr	r5, [sp, #0]
 800c018:	4628      	mov	r0, r5
 800c01a:	f001 f8a3 	bl	800d164 <malloc>
 800c01e:	4606      	mov	r6, r0
 800c020:	2800      	cmp	r0, #0
 800c022:	d152      	bne.n	800c0ca <setvbuf+0x14e>
 800c024:	f8dd 9000 	ldr.w	r9, [sp]
 800c028:	45a9      	cmp	r9, r5
 800c02a:	d140      	bne.n	800c0ae <setvbuf+0x132>
 800c02c:	f04f 35ff 	mov.w	r5, #4294967295
 800c030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c034:	f043 0202 	orr.w	r2, r3, #2
 800c038:	81a2      	strh	r2, [r4, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	60a2      	str	r2, [r4, #8]
 800c03e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800c042:	6022      	str	r2, [r4, #0]
 800c044:	6122      	str	r2, [r4, #16]
 800c046:	2201      	movs	r2, #1
 800c048:	6162      	str	r2, [r4, #20]
 800c04a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c04c:	07d6      	lsls	r6, r2, #31
 800c04e:	d404      	bmi.n	800c05a <setvbuf+0xde>
 800c050:	0598      	lsls	r0, r3, #22
 800c052:	d402      	bmi.n	800c05a <setvbuf+0xde>
 800c054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c056:	f000 f9bb 	bl	800c3d0 <__retarget_lock_release_recursive>
 800c05a:	4628      	mov	r0, r5
 800c05c:	b003      	add	sp, #12
 800c05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c062:	2e00      	cmp	r6, #0
 800c064:	d0d8      	beq.n	800c018 <setvbuf+0x9c>
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	b913      	cbnz	r3, 800c070 <setvbuf+0xf4>
 800c06a:	4638      	mov	r0, r7
 800c06c:	f7ff ff3e 	bl	800beec <__sinit>
 800c070:	f1b8 0f01 	cmp.w	r8, #1
 800c074:	bf08      	it	eq
 800c076:	89a3      	ldrheq	r3, [r4, #12]
 800c078:	6026      	str	r6, [r4, #0]
 800c07a:	bf04      	itt	eq
 800c07c:	f043 0301 	orreq.w	r3, r3, #1
 800c080:	81a3      	strheq	r3, [r4, #12]
 800c082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c086:	f013 0208 	ands.w	r2, r3, #8
 800c08a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800c08e:	d01e      	beq.n	800c0ce <setvbuf+0x152>
 800c090:	07d9      	lsls	r1, r3, #31
 800c092:	bf41      	itttt	mi
 800c094:	2200      	movmi	r2, #0
 800c096:	426d      	negmi	r5, r5
 800c098:	60a2      	strmi	r2, [r4, #8]
 800c09a:	61a5      	strmi	r5, [r4, #24]
 800c09c:	bf58      	it	pl
 800c09e:	60a5      	strpl	r5, [r4, #8]
 800c0a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c0a2:	07d2      	lsls	r2, r2, #31
 800c0a4:	d401      	bmi.n	800c0aa <setvbuf+0x12e>
 800c0a6:	059b      	lsls	r3, r3, #22
 800c0a8:	d513      	bpl.n	800c0d2 <setvbuf+0x156>
 800c0aa:	2500      	movs	r5, #0
 800c0ac:	e7d5      	b.n	800c05a <setvbuf+0xde>
 800c0ae:	4648      	mov	r0, r9
 800c0b0:	f001 f858 	bl	800d164 <malloc>
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d0b8      	beq.n	800c02c <setvbuf+0xb0>
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0c0:	81a3      	strh	r3, [r4, #12]
 800c0c2:	464d      	mov	r5, r9
 800c0c4:	e7cf      	b.n	800c066 <setvbuf+0xea>
 800c0c6:	2500      	movs	r5, #0
 800c0c8:	e7b2      	b.n	800c030 <setvbuf+0xb4>
 800c0ca:	46a9      	mov	r9, r5
 800c0cc:	e7f5      	b.n	800c0ba <setvbuf+0x13e>
 800c0ce:	60a2      	str	r2, [r4, #8]
 800c0d0:	e7e6      	b.n	800c0a0 <setvbuf+0x124>
 800c0d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0d4:	f000 f97c 	bl	800c3d0 <__retarget_lock_release_recursive>
 800c0d8:	e7e7      	b.n	800c0aa <setvbuf+0x12e>
 800c0da:	f04f 35ff 	mov.w	r5, #4294967295
 800c0de:	e7bc      	b.n	800c05a <setvbuf+0xde>
 800c0e0:	2000003c 	.word	0x2000003c

0800c0e4 <sniprintf>:
 800c0e4:	b40c      	push	{r2, r3}
 800c0e6:	b530      	push	{r4, r5, lr}
 800c0e8:	4b18      	ldr	r3, [pc, #96]	@ (800c14c <sniprintf+0x68>)
 800c0ea:	1e0c      	subs	r4, r1, #0
 800c0ec:	681d      	ldr	r5, [r3, #0]
 800c0ee:	b09d      	sub	sp, #116	@ 0x74
 800c0f0:	da08      	bge.n	800c104 <sniprintf+0x20>
 800c0f2:	238b      	movs	r3, #139	@ 0x8b
 800c0f4:	602b      	str	r3, [r5, #0]
 800c0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fa:	b01d      	add	sp, #116	@ 0x74
 800c0fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c100:	b002      	add	sp, #8
 800c102:	4770      	bx	lr
 800c104:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c108:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c10c:	f04f 0300 	mov.w	r3, #0
 800c110:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c112:	bf14      	ite	ne
 800c114:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c118:	4623      	moveq	r3, r4
 800c11a:	9304      	str	r3, [sp, #16]
 800c11c:	9307      	str	r3, [sp, #28]
 800c11e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c122:	9002      	str	r0, [sp, #8]
 800c124:	9006      	str	r0, [sp, #24]
 800c126:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c12a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c12c:	ab21      	add	r3, sp, #132	@ 0x84
 800c12e:	a902      	add	r1, sp, #8
 800c130:	4628      	mov	r0, r5
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	f002 fbda 	bl	800e8ec <_svfiprintf_r>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	bfbc      	itt	lt
 800c13c:	238b      	movlt	r3, #139	@ 0x8b
 800c13e:	602b      	strlt	r3, [r5, #0]
 800c140:	2c00      	cmp	r4, #0
 800c142:	d0da      	beq.n	800c0fa <sniprintf+0x16>
 800c144:	9b02      	ldr	r3, [sp, #8]
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	e7d6      	b.n	800c0fa <sniprintf+0x16>
 800c14c:	2000003c 	.word	0x2000003c

0800c150 <siprintf>:
 800c150:	b40e      	push	{r1, r2, r3}
 800c152:	b510      	push	{r4, lr}
 800c154:	b09d      	sub	sp, #116	@ 0x74
 800c156:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c158:	9002      	str	r0, [sp, #8]
 800c15a:	9006      	str	r0, [sp, #24]
 800c15c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c160:	480a      	ldr	r0, [pc, #40]	@ (800c18c <siprintf+0x3c>)
 800c162:	9107      	str	r1, [sp, #28]
 800c164:	9104      	str	r1, [sp, #16]
 800c166:	490a      	ldr	r1, [pc, #40]	@ (800c190 <siprintf+0x40>)
 800c168:	f853 2b04 	ldr.w	r2, [r3], #4
 800c16c:	9105      	str	r1, [sp, #20]
 800c16e:	2400      	movs	r4, #0
 800c170:	a902      	add	r1, sp, #8
 800c172:	6800      	ldr	r0, [r0, #0]
 800c174:	9301      	str	r3, [sp, #4]
 800c176:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c178:	f002 fbb8 	bl	800e8ec <_svfiprintf_r>
 800c17c:	9b02      	ldr	r3, [sp, #8]
 800c17e:	701c      	strb	r4, [r3, #0]
 800c180:	b01d      	add	sp, #116	@ 0x74
 800c182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c186:	b003      	add	sp, #12
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	2000003c 	.word	0x2000003c
 800c190:	ffff0208 	.word	0xffff0208

0800c194 <__sread>:
 800c194:	b510      	push	{r4, lr}
 800c196:	460c      	mov	r4, r1
 800c198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c19c:	f000 f8c8 	bl	800c330 <_read_r>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	bfab      	itete	ge
 800c1a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c1a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c1a8:	181b      	addge	r3, r3, r0
 800c1aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c1ae:	bfac      	ite	ge
 800c1b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c1b2:	81a3      	strhlt	r3, [r4, #12]
 800c1b4:	bd10      	pop	{r4, pc}

0800c1b6 <__swrite>:
 800c1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ba:	461f      	mov	r7, r3
 800c1bc:	898b      	ldrh	r3, [r1, #12]
 800c1be:	05db      	lsls	r3, r3, #23
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	4616      	mov	r6, r2
 800c1c6:	d505      	bpl.n	800c1d4 <__swrite+0x1e>
 800c1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1cc:	2302      	movs	r3, #2
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f000 f89c 	bl	800c30c <_lseek_r>
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1de:	81a3      	strh	r3, [r4, #12]
 800c1e0:	4632      	mov	r2, r6
 800c1e2:	463b      	mov	r3, r7
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ea:	f000 b8b3 	b.w	800c354 <_write_r>

0800c1ee <__sseek>:
 800c1ee:	b510      	push	{r4, lr}
 800c1f0:	460c      	mov	r4, r1
 800c1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f6:	f000 f889 	bl	800c30c <_lseek_r>
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	bf15      	itete	ne
 800c200:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c202:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c206:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c20a:	81a3      	strheq	r3, [r4, #12]
 800c20c:	bf18      	it	ne
 800c20e:	81a3      	strhne	r3, [r4, #12]
 800c210:	bd10      	pop	{r4, pc}

0800c212 <__sclose>:
 800c212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c216:	f000 b869 	b.w	800c2ec <_close_r>

0800c21a <memset>:
 800c21a:	4402      	add	r2, r0
 800c21c:	4603      	mov	r3, r0
 800c21e:	4293      	cmp	r3, r2
 800c220:	d100      	bne.n	800c224 <memset+0xa>
 800c222:	4770      	bx	lr
 800c224:	f803 1b01 	strb.w	r1, [r3], #1
 800c228:	e7f9      	b.n	800c21e <memset+0x4>
	...

0800c22c <strtok>:
 800c22c:	4b16      	ldr	r3, [pc, #88]	@ (800c288 <strtok+0x5c>)
 800c22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c232:	681f      	ldr	r7, [r3, #0]
 800c234:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c236:	4605      	mov	r5, r0
 800c238:	460e      	mov	r6, r1
 800c23a:	b9ec      	cbnz	r4, 800c278 <strtok+0x4c>
 800c23c:	2050      	movs	r0, #80	@ 0x50
 800c23e:	f000 ff91 	bl	800d164 <malloc>
 800c242:	4602      	mov	r2, r0
 800c244:	6478      	str	r0, [r7, #68]	@ 0x44
 800c246:	b920      	cbnz	r0, 800c252 <strtok+0x26>
 800c248:	4b10      	ldr	r3, [pc, #64]	@ (800c28c <strtok+0x60>)
 800c24a:	4811      	ldr	r0, [pc, #68]	@ (800c290 <strtok+0x64>)
 800c24c:	215b      	movs	r1, #91	@ 0x5b
 800c24e:	f000 f8c7 	bl	800c3e0 <__assert_func>
 800c252:	e9c0 4400 	strd	r4, r4, [r0]
 800c256:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c25a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c25e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c262:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c266:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c26a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c26e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c272:	6184      	str	r4, [r0, #24]
 800c274:	7704      	strb	r4, [r0, #28]
 800c276:	6244      	str	r4, [r0, #36]	@ 0x24
 800c278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c27a:	4631      	mov	r1, r6
 800c27c:	4628      	mov	r0, r5
 800c27e:	2301      	movs	r3, #1
 800c280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c284:	f000 b806 	b.w	800c294 <__strtok_r>
 800c288:	2000003c 	.word	0x2000003c
 800c28c:	0801128a 	.word	0x0801128a
 800c290:	080112a1 	.word	0x080112a1

0800c294 <__strtok_r>:
 800c294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c296:	4604      	mov	r4, r0
 800c298:	b908      	cbnz	r0, 800c29e <__strtok_r+0xa>
 800c29a:	6814      	ldr	r4, [r2, #0]
 800c29c:	b144      	cbz	r4, 800c2b0 <__strtok_r+0x1c>
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c2a4:	460f      	mov	r7, r1
 800c2a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c2aa:	b91e      	cbnz	r6, 800c2b4 <__strtok_r+0x20>
 800c2ac:	b965      	cbnz	r5, 800c2c8 <__strtok_r+0x34>
 800c2ae:	6015      	str	r5, [r2, #0]
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	e005      	b.n	800c2c0 <__strtok_r+0x2c>
 800c2b4:	42b5      	cmp	r5, r6
 800c2b6:	d1f6      	bne.n	800c2a6 <__strtok_r+0x12>
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1f0      	bne.n	800c29e <__strtok_r+0xa>
 800c2bc:	6014      	str	r4, [r2, #0]
 800c2be:	7003      	strb	r3, [r0, #0]
 800c2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c2:	461c      	mov	r4, r3
 800c2c4:	e00c      	b.n	800c2e0 <__strtok_r+0x4c>
 800c2c6:	b91d      	cbnz	r5, 800c2d0 <__strtok_r+0x3c>
 800c2c8:	4627      	mov	r7, r4
 800c2ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2ce:	460e      	mov	r6, r1
 800c2d0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c2d4:	42ab      	cmp	r3, r5
 800c2d6:	d1f6      	bne.n	800c2c6 <__strtok_r+0x32>
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0f2      	beq.n	800c2c2 <__strtok_r+0x2e>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	703b      	strb	r3, [r7, #0]
 800c2e0:	6014      	str	r4, [r2, #0]
 800c2e2:	e7ed      	b.n	800c2c0 <__strtok_r+0x2c>

0800c2e4 <_localeconv_r>:
 800c2e4:	4800      	ldr	r0, [pc, #0]	@ (800c2e8 <_localeconv_r+0x4>)
 800c2e6:	4770      	bx	lr
 800c2e8:	2000017c 	.word	0x2000017c

0800c2ec <_close_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4d06      	ldr	r5, [pc, #24]	@ (800c308 <_close_r+0x1c>)
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	4608      	mov	r0, r1
 800c2f6:	602b      	str	r3, [r5, #0]
 800c2f8:	f7f7 fbb0 	bl	8003a5c <_close>
 800c2fc:	1c43      	adds	r3, r0, #1
 800c2fe:	d102      	bne.n	800c306 <_close_r+0x1a>
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	b103      	cbz	r3, 800c306 <_close_r+0x1a>
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	200010f8 	.word	0x200010f8

0800c30c <_lseek_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d07      	ldr	r5, [pc, #28]	@ (800c32c <_lseek_r+0x20>)
 800c310:	4604      	mov	r4, r0
 800c312:	4608      	mov	r0, r1
 800c314:	4611      	mov	r1, r2
 800c316:	2200      	movs	r2, #0
 800c318:	602a      	str	r2, [r5, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	f7f7 fbc5 	bl	8003aaa <_lseek>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d102      	bne.n	800c32a <_lseek_r+0x1e>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	b103      	cbz	r3, 800c32a <_lseek_r+0x1e>
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	200010f8 	.word	0x200010f8

0800c330 <_read_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d07      	ldr	r5, [pc, #28]	@ (800c350 <_read_r+0x20>)
 800c334:	4604      	mov	r4, r0
 800c336:	4608      	mov	r0, r1
 800c338:	4611      	mov	r1, r2
 800c33a:	2200      	movs	r2, #0
 800c33c:	602a      	str	r2, [r5, #0]
 800c33e:	461a      	mov	r2, r3
 800c340:	f7f7 fb6f 	bl	8003a22 <_read>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d102      	bne.n	800c34e <_read_r+0x1e>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	b103      	cbz	r3, 800c34e <_read_r+0x1e>
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	200010f8 	.word	0x200010f8

0800c354 <_write_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d07      	ldr	r5, [pc, #28]	@ (800c374 <_write_r+0x20>)
 800c358:	4604      	mov	r4, r0
 800c35a:	4608      	mov	r0, r1
 800c35c:	4611      	mov	r1, r2
 800c35e:	2200      	movs	r2, #0
 800c360:	602a      	str	r2, [r5, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	f7f6 fda4 	bl	8002eb0 <_write>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_write_r+0x1e>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_write_r+0x1e>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	200010f8 	.word	0x200010f8

0800c378 <__errno>:
 800c378:	4b01      	ldr	r3, [pc, #4]	@ (800c380 <__errno+0x8>)
 800c37a:	6818      	ldr	r0, [r3, #0]
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	2000003c 	.word	0x2000003c

0800c384 <__libc_init_array>:
 800c384:	b570      	push	{r4, r5, r6, lr}
 800c386:	4d0d      	ldr	r5, [pc, #52]	@ (800c3bc <__libc_init_array+0x38>)
 800c388:	4c0d      	ldr	r4, [pc, #52]	@ (800c3c0 <__libc_init_array+0x3c>)
 800c38a:	1b64      	subs	r4, r4, r5
 800c38c:	10a4      	asrs	r4, r4, #2
 800c38e:	2600      	movs	r6, #0
 800c390:	42a6      	cmp	r6, r4
 800c392:	d109      	bne.n	800c3a8 <__libc_init_array+0x24>
 800c394:	4d0b      	ldr	r5, [pc, #44]	@ (800c3c4 <__libc_init_array+0x40>)
 800c396:	4c0c      	ldr	r4, [pc, #48]	@ (800c3c8 <__libc_init_array+0x44>)
 800c398:	f003 fafa 	bl	800f990 <_init>
 800c39c:	1b64      	subs	r4, r4, r5
 800c39e:	10a4      	asrs	r4, r4, #2
 800c3a0:	2600      	movs	r6, #0
 800c3a2:	42a6      	cmp	r6, r4
 800c3a4:	d105      	bne.n	800c3b2 <__libc_init_array+0x2e>
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}
 800c3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ac:	4798      	blx	r3
 800c3ae:	3601      	adds	r6, #1
 800c3b0:	e7ee      	b.n	800c390 <__libc_init_array+0xc>
 800c3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3b6:	4798      	blx	r3
 800c3b8:	3601      	adds	r6, #1
 800c3ba:	e7f2      	b.n	800c3a2 <__libc_init_array+0x1e>
 800c3bc:	080115d8 	.word	0x080115d8
 800c3c0:	080115d8 	.word	0x080115d8
 800c3c4:	080115d8 	.word	0x080115d8
 800c3c8:	080115dc 	.word	0x080115dc

0800c3cc <__retarget_lock_init_recursive>:
 800c3cc:	4770      	bx	lr

0800c3ce <__retarget_lock_acquire_recursive>:
 800c3ce:	4770      	bx	lr

0800c3d0 <__retarget_lock_release_recursive>:
 800c3d0:	4770      	bx	lr
	...

0800c3d4 <nanf>:
 800c3d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c3dc <nanf+0x8>
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	7fc00000 	.word	0x7fc00000

0800c3e0 <__assert_func>:
 800c3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3e2:	4614      	mov	r4, r2
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	4b09      	ldr	r3, [pc, #36]	@ (800c40c <__assert_func+0x2c>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	68d8      	ldr	r0, [r3, #12]
 800c3ee:	b14c      	cbz	r4, 800c404 <__assert_func+0x24>
 800c3f0:	4b07      	ldr	r3, [pc, #28]	@ (800c410 <__assert_func+0x30>)
 800c3f2:	9100      	str	r1, [sp, #0]
 800c3f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3f8:	4906      	ldr	r1, [pc, #24]	@ (800c414 <__assert_func+0x34>)
 800c3fa:	462b      	mov	r3, r5
 800c3fc:	f002 fd60 	bl	800eec0 <fiprintf>
 800c400:	f002 feda 	bl	800f1b8 <abort>
 800c404:	4b04      	ldr	r3, [pc, #16]	@ (800c418 <__assert_func+0x38>)
 800c406:	461c      	mov	r4, r3
 800c408:	e7f3      	b.n	800c3f2 <__assert_func+0x12>
 800c40a:	bf00      	nop
 800c40c:	2000003c 	.word	0x2000003c
 800c410:	080112fb 	.word	0x080112fb
 800c414:	08011308 	.word	0x08011308
 800c418:	08011336 	.word	0x08011336

0800c41c <quorem>:
 800c41c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c420:	6903      	ldr	r3, [r0, #16]
 800c422:	690c      	ldr	r4, [r1, #16]
 800c424:	42a3      	cmp	r3, r4
 800c426:	4607      	mov	r7, r0
 800c428:	db7e      	blt.n	800c528 <quorem+0x10c>
 800c42a:	3c01      	subs	r4, #1
 800c42c:	f101 0814 	add.w	r8, r1, #20
 800c430:	00a3      	lsls	r3, r4, #2
 800c432:	f100 0514 	add.w	r5, r0, #20
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c446:	3301      	adds	r3, #1
 800c448:	429a      	cmp	r2, r3
 800c44a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c44e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c452:	d32e      	bcc.n	800c4b2 <quorem+0x96>
 800c454:	f04f 0a00 	mov.w	sl, #0
 800c458:	46c4      	mov	ip, r8
 800c45a:	46ae      	mov	lr, r5
 800c45c:	46d3      	mov	fp, sl
 800c45e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c462:	b298      	uxth	r0, r3
 800c464:	fb06 a000 	mla	r0, r6, r0, sl
 800c468:	0c02      	lsrs	r2, r0, #16
 800c46a:	0c1b      	lsrs	r3, r3, #16
 800c46c:	fb06 2303 	mla	r3, r6, r3, r2
 800c470:	f8de 2000 	ldr.w	r2, [lr]
 800c474:	b280      	uxth	r0, r0
 800c476:	b292      	uxth	r2, r2
 800c478:	1a12      	subs	r2, r2, r0
 800c47a:	445a      	add	r2, fp
 800c47c:	f8de 0000 	ldr.w	r0, [lr]
 800c480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c484:	b29b      	uxth	r3, r3
 800c486:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c48a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c48e:	b292      	uxth	r2, r2
 800c490:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c494:	45e1      	cmp	r9, ip
 800c496:	f84e 2b04 	str.w	r2, [lr], #4
 800c49a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c49e:	d2de      	bcs.n	800c45e <quorem+0x42>
 800c4a0:	9b00      	ldr	r3, [sp, #0]
 800c4a2:	58eb      	ldr	r3, [r5, r3]
 800c4a4:	b92b      	cbnz	r3, 800c4b2 <quorem+0x96>
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	3b04      	subs	r3, #4
 800c4aa:	429d      	cmp	r5, r3
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	d32f      	bcc.n	800c510 <quorem+0xf4>
 800c4b0:	613c      	str	r4, [r7, #16]
 800c4b2:	4638      	mov	r0, r7
 800c4b4:	f001 f9c8 	bl	800d848 <__mcmp>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	db25      	blt.n	800c508 <quorem+0xec>
 800c4bc:	4629      	mov	r1, r5
 800c4be:	2000      	movs	r0, #0
 800c4c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c4c4:	f8d1 c000 	ldr.w	ip, [r1]
 800c4c8:	fa1f fe82 	uxth.w	lr, r2
 800c4cc:	fa1f f38c 	uxth.w	r3, ip
 800c4d0:	eba3 030e 	sub.w	r3, r3, lr
 800c4d4:	4403      	add	r3, r0
 800c4d6:	0c12      	lsrs	r2, r2, #16
 800c4d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c4dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4e6:	45c1      	cmp	r9, r8
 800c4e8:	f841 3b04 	str.w	r3, [r1], #4
 800c4ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c4f0:	d2e6      	bcs.n	800c4c0 <quorem+0xa4>
 800c4f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4fa:	b922      	cbnz	r2, 800c506 <quorem+0xea>
 800c4fc:	3b04      	subs	r3, #4
 800c4fe:	429d      	cmp	r5, r3
 800c500:	461a      	mov	r2, r3
 800c502:	d30b      	bcc.n	800c51c <quorem+0x100>
 800c504:	613c      	str	r4, [r7, #16]
 800c506:	3601      	adds	r6, #1
 800c508:	4630      	mov	r0, r6
 800c50a:	b003      	add	sp, #12
 800c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c510:	6812      	ldr	r2, [r2, #0]
 800c512:	3b04      	subs	r3, #4
 800c514:	2a00      	cmp	r2, #0
 800c516:	d1cb      	bne.n	800c4b0 <quorem+0x94>
 800c518:	3c01      	subs	r4, #1
 800c51a:	e7c6      	b.n	800c4aa <quorem+0x8e>
 800c51c:	6812      	ldr	r2, [r2, #0]
 800c51e:	3b04      	subs	r3, #4
 800c520:	2a00      	cmp	r2, #0
 800c522:	d1ef      	bne.n	800c504 <quorem+0xe8>
 800c524:	3c01      	subs	r4, #1
 800c526:	e7ea      	b.n	800c4fe <quorem+0xe2>
 800c528:	2000      	movs	r0, #0
 800c52a:	e7ee      	b.n	800c50a <quorem+0xee>
 800c52c:	0000      	movs	r0, r0
	...

0800c530 <_dtoa_r>:
 800c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c534:	69c7      	ldr	r7, [r0, #28]
 800c536:	b097      	sub	sp, #92	@ 0x5c
 800c538:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c53c:	ec55 4b10 	vmov	r4, r5, d0
 800c540:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c542:	9107      	str	r1, [sp, #28]
 800c544:	4681      	mov	r9, r0
 800c546:	920c      	str	r2, [sp, #48]	@ 0x30
 800c548:	9311      	str	r3, [sp, #68]	@ 0x44
 800c54a:	b97f      	cbnz	r7, 800c56c <_dtoa_r+0x3c>
 800c54c:	2010      	movs	r0, #16
 800c54e:	f000 fe09 	bl	800d164 <malloc>
 800c552:	4602      	mov	r2, r0
 800c554:	f8c9 001c 	str.w	r0, [r9, #28]
 800c558:	b920      	cbnz	r0, 800c564 <_dtoa_r+0x34>
 800c55a:	4ba9      	ldr	r3, [pc, #676]	@ (800c800 <_dtoa_r+0x2d0>)
 800c55c:	21ef      	movs	r1, #239	@ 0xef
 800c55e:	48a9      	ldr	r0, [pc, #676]	@ (800c804 <_dtoa_r+0x2d4>)
 800c560:	f7ff ff3e 	bl	800c3e0 <__assert_func>
 800c564:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c568:	6007      	str	r7, [r0, #0]
 800c56a:	60c7      	str	r7, [r0, #12]
 800c56c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c570:	6819      	ldr	r1, [r3, #0]
 800c572:	b159      	cbz	r1, 800c58c <_dtoa_r+0x5c>
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	604a      	str	r2, [r1, #4]
 800c578:	2301      	movs	r3, #1
 800c57a:	4093      	lsls	r3, r2
 800c57c:	608b      	str	r3, [r1, #8]
 800c57e:	4648      	mov	r0, r9
 800c580:	f000 fee6 	bl	800d350 <_Bfree>
 800c584:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
 800c58c:	1e2b      	subs	r3, r5, #0
 800c58e:	bfb9      	ittee	lt
 800c590:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c594:	9305      	strlt	r3, [sp, #20]
 800c596:	2300      	movge	r3, #0
 800c598:	6033      	strge	r3, [r6, #0]
 800c59a:	9f05      	ldr	r7, [sp, #20]
 800c59c:	4b9a      	ldr	r3, [pc, #616]	@ (800c808 <_dtoa_r+0x2d8>)
 800c59e:	bfbc      	itt	lt
 800c5a0:	2201      	movlt	r2, #1
 800c5a2:	6032      	strlt	r2, [r6, #0]
 800c5a4:	43bb      	bics	r3, r7
 800c5a6:	d112      	bne.n	800c5ce <_dtoa_r+0x9e>
 800c5a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c5aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c5ae:	6013      	str	r3, [r2, #0]
 800c5b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c5b4:	4323      	orrs	r3, r4
 800c5b6:	f000 855a 	beq.w	800d06e <_dtoa_r+0xb3e>
 800c5ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c81c <_dtoa_r+0x2ec>
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f000 855c 	beq.w	800d07e <_dtoa_r+0xb4e>
 800c5c6:	f10a 0303 	add.w	r3, sl, #3
 800c5ca:	f000 bd56 	b.w	800d07a <_dtoa_r+0xb4a>
 800c5ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	ec51 0b17 	vmov	r0, r1, d7
 800c5d8:	2300      	movs	r3, #0
 800c5da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c5de:	f7f4 fa93 	bl	8000b08 <__aeabi_dcmpeq>
 800c5e2:	4680      	mov	r8, r0
 800c5e4:	b158      	cbz	r0, 800c5fe <_dtoa_r+0xce>
 800c5e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5ee:	b113      	cbz	r3, 800c5f6 <_dtoa_r+0xc6>
 800c5f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c5f2:	4b86      	ldr	r3, [pc, #536]	@ (800c80c <_dtoa_r+0x2dc>)
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c820 <_dtoa_r+0x2f0>
 800c5fa:	f000 bd40 	b.w	800d07e <_dtoa_r+0xb4e>
 800c5fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c602:	aa14      	add	r2, sp, #80	@ 0x50
 800c604:	a915      	add	r1, sp, #84	@ 0x54
 800c606:	4648      	mov	r0, r9
 800c608:	f001 fa3e 	bl	800da88 <__d2b>
 800c60c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c610:	9002      	str	r0, [sp, #8]
 800c612:	2e00      	cmp	r6, #0
 800c614:	d078      	beq.n	800c708 <_dtoa_r+0x1d8>
 800c616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c618:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c61c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c624:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c628:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c62c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c630:	4619      	mov	r1, r3
 800c632:	2200      	movs	r2, #0
 800c634:	4b76      	ldr	r3, [pc, #472]	@ (800c810 <_dtoa_r+0x2e0>)
 800c636:	f7f3 fe47 	bl	80002c8 <__aeabi_dsub>
 800c63a:	a36b      	add	r3, pc, #428	@ (adr r3, 800c7e8 <_dtoa_r+0x2b8>)
 800c63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c640:	f7f3 fffa 	bl	8000638 <__aeabi_dmul>
 800c644:	a36a      	add	r3, pc, #424	@ (adr r3, 800c7f0 <_dtoa_r+0x2c0>)
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	f7f3 fe3f 	bl	80002cc <__adddf3>
 800c64e:	4604      	mov	r4, r0
 800c650:	4630      	mov	r0, r6
 800c652:	460d      	mov	r5, r1
 800c654:	f7f3 ff86 	bl	8000564 <__aeabi_i2d>
 800c658:	a367      	add	r3, pc, #412	@ (adr r3, 800c7f8 <_dtoa_r+0x2c8>)
 800c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65e:	f7f3 ffeb 	bl	8000638 <__aeabi_dmul>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	4620      	mov	r0, r4
 800c668:	4629      	mov	r1, r5
 800c66a:	f7f3 fe2f 	bl	80002cc <__adddf3>
 800c66e:	4604      	mov	r4, r0
 800c670:	460d      	mov	r5, r1
 800c672:	f7f4 fa91 	bl	8000b98 <__aeabi_d2iz>
 800c676:	2200      	movs	r2, #0
 800c678:	4607      	mov	r7, r0
 800c67a:	2300      	movs	r3, #0
 800c67c:	4620      	mov	r0, r4
 800c67e:	4629      	mov	r1, r5
 800c680:	f7f4 fa4c 	bl	8000b1c <__aeabi_dcmplt>
 800c684:	b140      	cbz	r0, 800c698 <_dtoa_r+0x168>
 800c686:	4638      	mov	r0, r7
 800c688:	f7f3 ff6c 	bl	8000564 <__aeabi_i2d>
 800c68c:	4622      	mov	r2, r4
 800c68e:	462b      	mov	r3, r5
 800c690:	f7f4 fa3a 	bl	8000b08 <__aeabi_dcmpeq>
 800c694:	b900      	cbnz	r0, 800c698 <_dtoa_r+0x168>
 800c696:	3f01      	subs	r7, #1
 800c698:	2f16      	cmp	r7, #22
 800c69a:	d852      	bhi.n	800c742 <_dtoa_r+0x212>
 800c69c:	4b5d      	ldr	r3, [pc, #372]	@ (800c814 <_dtoa_r+0x2e4>)
 800c69e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c6aa:	f7f4 fa37 	bl	8000b1c <__aeabi_dcmplt>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d049      	beq.n	800c746 <_dtoa_r+0x216>
 800c6b2:	3f01      	subs	r7, #1
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c6b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c6ba:	1b9b      	subs	r3, r3, r6
 800c6bc:	1e5a      	subs	r2, r3, #1
 800c6be:	bf45      	ittet	mi
 800c6c0:	f1c3 0301 	rsbmi	r3, r3, #1
 800c6c4:	9300      	strmi	r3, [sp, #0]
 800c6c6:	2300      	movpl	r3, #0
 800c6c8:	2300      	movmi	r3, #0
 800c6ca:	9206      	str	r2, [sp, #24]
 800c6cc:	bf54      	ite	pl
 800c6ce:	9300      	strpl	r3, [sp, #0]
 800c6d0:	9306      	strmi	r3, [sp, #24]
 800c6d2:	2f00      	cmp	r7, #0
 800c6d4:	db39      	blt.n	800c74a <_dtoa_r+0x21a>
 800c6d6:	9b06      	ldr	r3, [sp, #24]
 800c6d8:	970d      	str	r7, [sp, #52]	@ 0x34
 800c6da:	443b      	add	r3, r7
 800c6dc:	9306      	str	r3, [sp, #24]
 800c6de:	2300      	movs	r3, #0
 800c6e0:	9308      	str	r3, [sp, #32]
 800c6e2:	9b07      	ldr	r3, [sp, #28]
 800c6e4:	2b09      	cmp	r3, #9
 800c6e6:	d863      	bhi.n	800c7b0 <_dtoa_r+0x280>
 800c6e8:	2b05      	cmp	r3, #5
 800c6ea:	bfc4      	itt	gt
 800c6ec:	3b04      	subgt	r3, #4
 800c6ee:	9307      	strgt	r3, [sp, #28]
 800c6f0:	9b07      	ldr	r3, [sp, #28]
 800c6f2:	f1a3 0302 	sub.w	r3, r3, #2
 800c6f6:	bfcc      	ite	gt
 800c6f8:	2400      	movgt	r4, #0
 800c6fa:	2401      	movle	r4, #1
 800c6fc:	2b03      	cmp	r3, #3
 800c6fe:	d863      	bhi.n	800c7c8 <_dtoa_r+0x298>
 800c700:	e8df f003 	tbb	[pc, r3]
 800c704:	2b375452 	.word	0x2b375452
 800c708:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c70c:	441e      	add	r6, r3
 800c70e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c712:	2b20      	cmp	r3, #32
 800c714:	bfc1      	itttt	gt
 800c716:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c71a:	409f      	lslgt	r7, r3
 800c71c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c720:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c724:	bfd6      	itet	le
 800c726:	f1c3 0320 	rsble	r3, r3, #32
 800c72a:	ea47 0003 	orrgt.w	r0, r7, r3
 800c72e:	fa04 f003 	lslle.w	r0, r4, r3
 800c732:	f7f3 ff07 	bl	8000544 <__aeabi_ui2d>
 800c736:	2201      	movs	r2, #1
 800c738:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c73c:	3e01      	subs	r6, #1
 800c73e:	9212      	str	r2, [sp, #72]	@ 0x48
 800c740:	e776      	b.n	800c630 <_dtoa_r+0x100>
 800c742:	2301      	movs	r3, #1
 800c744:	e7b7      	b.n	800c6b6 <_dtoa_r+0x186>
 800c746:	9010      	str	r0, [sp, #64]	@ 0x40
 800c748:	e7b6      	b.n	800c6b8 <_dtoa_r+0x188>
 800c74a:	9b00      	ldr	r3, [sp, #0]
 800c74c:	1bdb      	subs	r3, r3, r7
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	427b      	negs	r3, r7
 800c752:	9308      	str	r3, [sp, #32]
 800c754:	2300      	movs	r3, #0
 800c756:	930d      	str	r3, [sp, #52]	@ 0x34
 800c758:	e7c3      	b.n	800c6e2 <_dtoa_r+0x1b2>
 800c75a:	2301      	movs	r3, #1
 800c75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c75e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c760:	eb07 0b03 	add.w	fp, r7, r3
 800c764:	f10b 0301 	add.w	r3, fp, #1
 800c768:	2b01      	cmp	r3, #1
 800c76a:	9303      	str	r3, [sp, #12]
 800c76c:	bfb8      	it	lt
 800c76e:	2301      	movlt	r3, #1
 800c770:	e006      	b.n	800c780 <_dtoa_r+0x250>
 800c772:	2301      	movs	r3, #1
 800c774:	9309      	str	r3, [sp, #36]	@ 0x24
 800c776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dd28      	ble.n	800c7ce <_dtoa_r+0x29e>
 800c77c:	469b      	mov	fp, r3
 800c77e:	9303      	str	r3, [sp, #12]
 800c780:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c784:	2100      	movs	r1, #0
 800c786:	2204      	movs	r2, #4
 800c788:	f102 0514 	add.w	r5, r2, #20
 800c78c:	429d      	cmp	r5, r3
 800c78e:	d926      	bls.n	800c7de <_dtoa_r+0x2ae>
 800c790:	6041      	str	r1, [r0, #4]
 800c792:	4648      	mov	r0, r9
 800c794:	f000 fd9c 	bl	800d2d0 <_Balloc>
 800c798:	4682      	mov	sl, r0
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d142      	bne.n	800c824 <_dtoa_r+0x2f4>
 800c79e:	4b1e      	ldr	r3, [pc, #120]	@ (800c818 <_dtoa_r+0x2e8>)
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	f240 11af 	movw	r1, #431	@ 0x1af
 800c7a6:	e6da      	b.n	800c55e <_dtoa_r+0x2e>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e7e3      	b.n	800c774 <_dtoa_r+0x244>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	e7d5      	b.n	800c75c <_dtoa_r+0x22c>
 800c7b0:	2401      	movs	r4, #1
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	9307      	str	r3, [sp, #28]
 800c7b6:	9409      	str	r4, [sp, #36]	@ 0x24
 800c7b8:	f04f 3bff 	mov.w	fp, #4294967295
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f8cd b00c 	str.w	fp, [sp, #12]
 800c7c2:	2312      	movs	r3, #18
 800c7c4:	920c      	str	r2, [sp, #48]	@ 0x30
 800c7c6:	e7db      	b.n	800c780 <_dtoa_r+0x250>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7cc:	e7f4      	b.n	800c7b8 <_dtoa_r+0x288>
 800c7ce:	f04f 0b01 	mov.w	fp, #1
 800c7d2:	f8cd b00c 	str.w	fp, [sp, #12]
 800c7d6:	465b      	mov	r3, fp
 800c7d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c7dc:	e7d0      	b.n	800c780 <_dtoa_r+0x250>
 800c7de:	3101      	adds	r1, #1
 800c7e0:	0052      	lsls	r2, r2, #1
 800c7e2:	e7d1      	b.n	800c788 <_dtoa_r+0x258>
 800c7e4:	f3af 8000 	nop.w
 800c7e8:	636f4361 	.word	0x636f4361
 800c7ec:	3fd287a7 	.word	0x3fd287a7
 800c7f0:	8b60c8b3 	.word	0x8b60c8b3
 800c7f4:	3fc68a28 	.word	0x3fc68a28
 800c7f8:	509f79fb 	.word	0x509f79fb
 800c7fc:	3fd34413 	.word	0x3fd34413
 800c800:	0801128a 	.word	0x0801128a
 800c804:	08011344 	.word	0x08011344
 800c808:	7ff00000 	.word	0x7ff00000
 800c80c:	08011262 	.word	0x08011262
 800c810:	3ff80000 	.word	0x3ff80000
 800c814:	080114b8 	.word	0x080114b8
 800c818:	0801139c 	.word	0x0801139c
 800c81c:	08011340 	.word	0x08011340
 800c820:	08011261 	.word	0x08011261
 800c824:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c828:	6018      	str	r0, [r3, #0]
 800c82a:	9b03      	ldr	r3, [sp, #12]
 800c82c:	2b0e      	cmp	r3, #14
 800c82e:	f200 80a1 	bhi.w	800c974 <_dtoa_r+0x444>
 800c832:	2c00      	cmp	r4, #0
 800c834:	f000 809e 	beq.w	800c974 <_dtoa_r+0x444>
 800c838:	2f00      	cmp	r7, #0
 800c83a:	dd33      	ble.n	800c8a4 <_dtoa_r+0x374>
 800c83c:	4b9c      	ldr	r3, [pc, #624]	@ (800cab0 <_dtoa_r+0x580>)
 800c83e:	f007 020f 	and.w	r2, r7, #15
 800c842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c846:	ed93 7b00 	vldr	d7, [r3]
 800c84a:	05f8      	lsls	r0, r7, #23
 800c84c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c850:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c854:	d516      	bpl.n	800c884 <_dtoa_r+0x354>
 800c856:	4b97      	ldr	r3, [pc, #604]	@ (800cab4 <_dtoa_r+0x584>)
 800c858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c85c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c860:	f7f4 f814 	bl	800088c <__aeabi_ddiv>
 800c864:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c868:	f004 040f 	and.w	r4, r4, #15
 800c86c:	2603      	movs	r6, #3
 800c86e:	4d91      	ldr	r5, [pc, #580]	@ (800cab4 <_dtoa_r+0x584>)
 800c870:	b954      	cbnz	r4, 800c888 <_dtoa_r+0x358>
 800c872:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c87a:	f7f4 f807 	bl	800088c <__aeabi_ddiv>
 800c87e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c882:	e028      	b.n	800c8d6 <_dtoa_r+0x3a6>
 800c884:	2602      	movs	r6, #2
 800c886:	e7f2      	b.n	800c86e <_dtoa_r+0x33e>
 800c888:	07e1      	lsls	r1, r4, #31
 800c88a:	d508      	bpl.n	800c89e <_dtoa_r+0x36e>
 800c88c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c890:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c894:	f7f3 fed0 	bl	8000638 <__aeabi_dmul>
 800c898:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c89c:	3601      	adds	r6, #1
 800c89e:	1064      	asrs	r4, r4, #1
 800c8a0:	3508      	adds	r5, #8
 800c8a2:	e7e5      	b.n	800c870 <_dtoa_r+0x340>
 800c8a4:	f000 80af 	beq.w	800ca06 <_dtoa_r+0x4d6>
 800c8a8:	427c      	negs	r4, r7
 800c8aa:	4b81      	ldr	r3, [pc, #516]	@ (800cab0 <_dtoa_r+0x580>)
 800c8ac:	4d81      	ldr	r5, [pc, #516]	@ (800cab4 <_dtoa_r+0x584>)
 800c8ae:	f004 020f 	and.w	r2, r4, #15
 800c8b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c8be:	f7f3 febb 	bl	8000638 <__aeabi_dmul>
 800c8c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8c6:	1124      	asrs	r4, r4, #4
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	2602      	movs	r6, #2
 800c8cc:	2c00      	cmp	r4, #0
 800c8ce:	f040 808f 	bne.w	800c9f0 <_dtoa_r+0x4c0>
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1d3      	bne.n	800c87e <_dtoa_r+0x34e>
 800c8d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c8d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 8094 	beq.w	800ca0a <_dtoa_r+0x4da>
 800c8e2:	4b75      	ldr	r3, [pc, #468]	@ (800cab8 <_dtoa_r+0x588>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	f7f4 f917 	bl	8000b1c <__aeabi_dcmplt>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f000 808b 	beq.w	800ca0a <_dtoa_r+0x4da>
 800c8f4:	9b03      	ldr	r3, [sp, #12]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f000 8087 	beq.w	800ca0a <_dtoa_r+0x4da>
 800c8fc:	f1bb 0f00 	cmp.w	fp, #0
 800c900:	dd34      	ble.n	800c96c <_dtoa_r+0x43c>
 800c902:	4620      	mov	r0, r4
 800c904:	4b6d      	ldr	r3, [pc, #436]	@ (800cabc <_dtoa_r+0x58c>)
 800c906:	2200      	movs	r2, #0
 800c908:	4629      	mov	r1, r5
 800c90a:	f7f3 fe95 	bl	8000638 <__aeabi_dmul>
 800c90e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c912:	f107 38ff 	add.w	r8, r7, #4294967295
 800c916:	3601      	adds	r6, #1
 800c918:	465c      	mov	r4, fp
 800c91a:	4630      	mov	r0, r6
 800c91c:	f7f3 fe22 	bl	8000564 <__aeabi_i2d>
 800c920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c924:	f7f3 fe88 	bl	8000638 <__aeabi_dmul>
 800c928:	4b65      	ldr	r3, [pc, #404]	@ (800cac0 <_dtoa_r+0x590>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	f7f3 fcce 	bl	80002cc <__adddf3>
 800c930:	4605      	mov	r5, r0
 800c932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c936:	2c00      	cmp	r4, #0
 800c938:	d16a      	bne.n	800ca10 <_dtoa_r+0x4e0>
 800c93a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c93e:	4b61      	ldr	r3, [pc, #388]	@ (800cac4 <_dtoa_r+0x594>)
 800c940:	2200      	movs	r2, #0
 800c942:	f7f3 fcc1 	bl	80002c8 <__aeabi_dsub>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c94e:	462a      	mov	r2, r5
 800c950:	4633      	mov	r3, r6
 800c952:	f7f4 f901 	bl	8000b58 <__aeabi_dcmpgt>
 800c956:	2800      	cmp	r0, #0
 800c958:	f040 8298 	bne.w	800ce8c <_dtoa_r+0x95c>
 800c95c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c960:	462a      	mov	r2, r5
 800c962:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c966:	f7f4 f8d9 	bl	8000b1c <__aeabi_dcmplt>
 800c96a:	bb38      	cbnz	r0, 800c9bc <_dtoa_r+0x48c>
 800c96c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c970:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c974:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c976:	2b00      	cmp	r3, #0
 800c978:	f2c0 8157 	blt.w	800cc2a <_dtoa_r+0x6fa>
 800c97c:	2f0e      	cmp	r7, #14
 800c97e:	f300 8154 	bgt.w	800cc2a <_dtoa_r+0x6fa>
 800c982:	4b4b      	ldr	r3, [pc, #300]	@ (800cab0 <_dtoa_r+0x580>)
 800c984:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c988:	ed93 7b00 	vldr	d7, [r3]
 800c98c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c98e:	2b00      	cmp	r3, #0
 800c990:	ed8d 7b00 	vstr	d7, [sp]
 800c994:	f280 80e5 	bge.w	800cb62 <_dtoa_r+0x632>
 800c998:	9b03      	ldr	r3, [sp, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f300 80e1 	bgt.w	800cb62 <_dtoa_r+0x632>
 800c9a0:	d10c      	bne.n	800c9bc <_dtoa_r+0x48c>
 800c9a2:	4b48      	ldr	r3, [pc, #288]	@ (800cac4 <_dtoa_r+0x594>)
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	ec51 0b17 	vmov	r0, r1, d7
 800c9aa:	f7f3 fe45 	bl	8000638 <__aeabi_dmul>
 800c9ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9b2:	f7f4 f8c7 	bl	8000b44 <__aeabi_dcmpge>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	f000 8266 	beq.w	800ce88 <_dtoa_r+0x958>
 800c9bc:	2400      	movs	r4, #0
 800c9be:	4625      	mov	r5, r4
 800c9c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c9c2:	4656      	mov	r6, sl
 800c9c4:	ea6f 0803 	mvn.w	r8, r3
 800c9c8:	2700      	movs	r7, #0
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4648      	mov	r0, r9
 800c9ce:	f000 fcbf 	bl	800d350 <_Bfree>
 800c9d2:	2d00      	cmp	r5, #0
 800c9d4:	f000 80bd 	beq.w	800cb52 <_dtoa_r+0x622>
 800c9d8:	b12f      	cbz	r7, 800c9e6 <_dtoa_r+0x4b6>
 800c9da:	42af      	cmp	r7, r5
 800c9dc:	d003      	beq.n	800c9e6 <_dtoa_r+0x4b6>
 800c9de:	4639      	mov	r1, r7
 800c9e0:	4648      	mov	r0, r9
 800c9e2:	f000 fcb5 	bl	800d350 <_Bfree>
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	4648      	mov	r0, r9
 800c9ea:	f000 fcb1 	bl	800d350 <_Bfree>
 800c9ee:	e0b0      	b.n	800cb52 <_dtoa_r+0x622>
 800c9f0:	07e2      	lsls	r2, r4, #31
 800c9f2:	d505      	bpl.n	800ca00 <_dtoa_r+0x4d0>
 800c9f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9f8:	f7f3 fe1e 	bl	8000638 <__aeabi_dmul>
 800c9fc:	3601      	adds	r6, #1
 800c9fe:	2301      	movs	r3, #1
 800ca00:	1064      	asrs	r4, r4, #1
 800ca02:	3508      	adds	r5, #8
 800ca04:	e762      	b.n	800c8cc <_dtoa_r+0x39c>
 800ca06:	2602      	movs	r6, #2
 800ca08:	e765      	b.n	800c8d6 <_dtoa_r+0x3a6>
 800ca0a:	9c03      	ldr	r4, [sp, #12]
 800ca0c:	46b8      	mov	r8, r7
 800ca0e:	e784      	b.n	800c91a <_dtoa_r+0x3ea>
 800ca10:	4b27      	ldr	r3, [pc, #156]	@ (800cab0 <_dtoa_r+0x580>)
 800ca12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca1c:	4454      	add	r4, sl
 800ca1e:	2900      	cmp	r1, #0
 800ca20:	d054      	beq.n	800cacc <_dtoa_r+0x59c>
 800ca22:	4929      	ldr	r1, [pc, #164]	@ (800cac8 <_dtoa_r+0x598>)
 800ca24:	2000      	movs	r0, #0
 800ca26:	f7f3 ff31 	bl	800088c <__aeabi_ddiv>
 800ca2a:	4633      	mov	r3, r6
 800ca2c:	462a      	mov	r2, r5
 800ca2e:	f7f3 fc4b 	bl	80002c8 <__aeabi_dsub>
 800ca32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca36:	4656      	mov	r6, sl
 800ca38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca3c:	f7f4 f8ac 	bl	8000b98 <__aeabi_d2iz>
 800ca40:	4605      	mov	r5, r0
 800ca42:	f7f3 fd8f 	bl	8000564 <__aeabi_i2d>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca4e:	f7f3 fc3b 	bl	80002c8 <__aeabi_dsub>
 800ca52:	3530      	adds	r5, #48	@ 0x30
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca5c:	f806 5b01 	strb.w	r5, [r6], #1
 800ca60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca64:	f7f4 f85a 	bl	8000b1c <__aeabi_dcmplt>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d172      	bne.n	800cb52 <_dtoa_r+0x622>
 800ca6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca70:	4911      	ldr	r1, [pc, #68]	@ (800cab8 <_dtoa_r+0x588>)
 800ca72:	2000      	movs	r0, #0
 800ca74:	f7f3 fc28 	bl	80002c8 <__aeabi_dsub>
 800ca78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca7c:	f7f4 f84e 	bl	8000b1c <__aeabi_dcmplt>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	f040 80b4 	bne.w	800cbee <_dtoa_r+0x6be>
 800ca86:	42a6      	cmp	r6, r4
 800ca88:	f43f af70 	beq.w	800c96c <_dtoa_r+0x43c>
 800ca8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ca90:	4b0a      	ldr	r3, [pc, #40]	@ (800cabc <_dtoa_r+0x58c>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	f7f3 fdd0 	bl	8000638 <__aeabi_dmul>
 800ca98:	4b08      	ldr	r3, [pc, #32]	@ (800cabc <_dtoa_r+0x58c>)
 800ca9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca9e:	2200      	movs	r2, #0
 800caa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caa4:	f7f3 fdc8 	bl	8000638 <__aeabi_dmul>
 800caa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caac:	e7c4      	b.n	800ca38 <_dtoa_r+0x508>
 800caae:	bf00      	nop
 800cab0:	080114b8 	.word	0x080114b8
 800cab4:	08011490 	.word	0x08011490
 800cab8:	3ff00000 	.word	0x3ff00000
 800cabc:	40240000 	.word	0x40240000
 800cac0:	401c0000 	.word	0x401c0000
 800cac4:	40140000 	.word	0x40140000
 800cac8:	3fe00000 	.word	0x3fe00000
 800cacc:	4631      	mov	r1, r6
 800cace:	4628      	mov	r0, r5
 800cad0:	f7f3 fdb2 	bl	8000638 <__aeabi_dmul>
 800cad4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cad8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cada:	4656      	mov	r6, sl
 800cadc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cae0:	f7f4 f85a 	bl	8000b98 <__aeabi_d2iz>
 800cae4:	4605      	mov	r5, r0
 800cae6:	f7f3 fd3d 	bl	8000564 <__aeabi_i2d>
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caf2:	f7f3 fbe9 	bl	80002c8 <__aeabi_dsub>
 800caf6:	3530      	adds	r5, #48	@ 0x30
 800caf8:	f806 5b01 	strb.w	r5, [r6], #1
 800cafc:	4602      	mov	r2, r0
 800cafe:	460b      	mov	r3, r1
 800cb00:	42a6      	cmp	r6, r4
 800cb02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb06:	f04f 0200 	mov.w	r2, #0
 800cb0a:	d124      	bne.n	800cb56 <_dtoa_r+0x626>
 800cb0c:	4baf      	ldr	r3, [pc, #700]	@ (800cdcc <_dtoa_r+0x89c>)
 800cb0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cb12:	f7f3 fbdb 	bl	80002cc <__adddf3>
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb1e:	f7f4 f81b 	bl	8000b58 <__aeabi_dcmpgt>
 800cb22:	2800      	cmp	r0, #0
 800cb24:	d163      	bne.n	800cbee <_dtoa_r+0x6be>
 800cb26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb2a:	49a8      	ldr	r1, [pc, #672]	@ (800cdcc <_dtoa_r+0x89c>)
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	f7f3 fbcb 	bl	80002c8 <__aeabi_dsub>
 800cb32:	4602      	mov	r2, r0
 800cb34:	460b      	mov	r3, r1
 800cb36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb3a:	f7f3 ffef 	bl	8000b1c <__aeabi_dcmplt>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	f43f af14 	beq.w	800c96c <_dtoa_r+0x43c>
 800cb44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cb46:	1e73      	subs	r3, r6, #1
 800cb48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb4e:	2b30      	cmp	r3, #48	@ 0x30
 800cb50:	d0f8      	beq.n	800cb44 <_dtoa_r+0x614>
 800cb52:	4647      	mov	r7, r8
 800cb54:	e03b      	b.n	800cbce <_dtoa_r+0x69e>
 800cb56:	4b9e      	ldr	r3, [pc, #632]	@ (800cdd0 <_dtoa_r+0x8a0>)
 800cb58:	f7f3 fd6e 	bl	8000638 <__aeabi_dmul>
 800cb5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb60:	e7bc      	b.n	800cadc <_dtoa_r+0x5ac>
 800cb62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cb66:	4656      	mov	r6, sl
 800cb68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f7f3 fe8c 	bl	800088c <__aeabi_ddiv>
 800cb74:	f7f4 f810 	bl	8000b98 <__aeabi_d2iz>
 800cb78:	4680      	mov	r8, r0
 800cb7a:	f7f3 fcf3 	bl	8000564 <__aeabi_i2d>
 800cb7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb82:	f7f3 fd59 	bl	8000638 <__aeabi_dmul>
 800cb86:	4602      	mov	r2, r0
 800cb88:	460b      	mov	r3, r1
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cb92:	f7f3 fb99 	bl	80002c8 <__aeabi_dsub>
 800cb96:	f806 4b01 	strb.w	r4, [r6], #1
 800cb9a:	9d03      	ldr	r5, [sp, #12]
 800cb9c:	eba6 040a 	sub.w	r4, r6, sl
 800cba0:	42a5      	cmp	r5, r4
 800cba2:	4602      	mov	r2, r0
 800cba4:	460b      	mov	r3, r1
 800cba6:	d133      	bne.n	800cc10 <_dtoa_r+0x6e0>
 800cba8:	f7f3 fb90 	bl	80002cc <__adddf3>
 800cbac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	f7f3 ffd0 	bl	8000b58 <__aeabi_dcmpgt>
 800cbb8:	b9c0      	cbnz	r0, 800cbec <_dtoa_r+0x6bc>
 800cbba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	f7f3 ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 800cbc6:	b110      	cbz	r0, 800cbce <_dtoa_r+0x69e>
 800cbc8:	f018 0f01 	tst.w	r8, #1
 800cbcc:	d10e      	bne.n	800cbec <_dtoa_r+0x6bc>
 800cbce:	9902      	ldr	r1, [sp, #8]
 800cbd0:	4648      	mov	r0, r9
 800cbd2:	f000 fbbd 	bl	800d350 <_Bfree>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	7033      	strb	r3, [r6, #0]
 800cbda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cbdc:	3701      	adds	r7, #1
 800cbde:	601f      	str	r7, [r3, #0]
 800cbe0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 824b 	beq.w	800d07e <_dtoa_r+0xb4e>
 800cbe8:	601e      	str	r6, [r3, #0]
 800cbea:	e248      	b.n	800d07e <_dtoa_r+0xb4e>
 800cbec:	46b8      	mov	r8, r7
 800cbee:	4633      	mov	r3, r6
 800cbf0:	461e      	mov	r6, r3
 800cbf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbf6:	2a39      	cmp	r2, #57	@ 0x39
 800cbf8:	d106      	bne.n	800cc08 <_dtoa_r+0x6d8>
 800cbfa:	459a      	cmp	sl, r3
 800cbfc:	d1f8      	bne.n	800cbf0 <_dtoa_r+0x6c0>
 800cbfe:	2230      	movs	r2, #48	@ 0x30
 800cc00:	f108 0801 	add.w	r8, r8, #1
 800cc04:	f88a 2000 	strb.w	r2, [sl]
 800cc08:	781a      	ldrb	r2, [r3, #0]
 800cc0a:	3201      	adds	r2, #1
 800cc0c:	701a      	strb	r2, [r3, #0]
 800cc0e:	e7a0      	b.n	800cb52 <_dtoa_r+0x622>
 800cc10:	4b6f      	ldr	r3, [pc, #444]	@ (800cdd0 <_dtoa_r+0x8a0>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	f7f3 fd10 	bl	8000638 <__aeabi_dmul>
 800cc18:	2200      	movs	r2, #0
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	460d      	mov	r5, r1
 800cc20:	f7f3 ff72 	bl	8000b08 <__aeabi_dcmpeq>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d09f      	beq.n	800cb68 <_dtoa_r+0x638>
 800cc28:	e7d1      	b.n	800cbce <_dtoa_r+0x69e>
 800cc2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc2c:	2a00      	cmp	r2, #0
 800cc2e:	f000 80ea 	beq.w	800ce06 <_dtoa_r+0x8d6>
 800cc32:	9a07      	ldr	r2, [sp, #28]
 800cc34:	2a01      	cmp	r2, #1
 800cc36:	f300 80cd 	bgt.w	800cdd4 <_dtoa_r+0x8a4>
 800cc3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	f000 80c1 	beq.w	800cdc4 <_dtoa_r+0x894>
 800cc42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cc46:	9c08      	ldr	r4, [sp, #32]
 800cc48:	9e00      	ldr	r6, [sp, #0]
 800cc4a:	9a00      	ldr	r2, [sp, #0]
 800cc4c:	441a      	add	r2, r3
 800cc4e:	9200      	str	r2, [sp, #0]
 800cc50:	9a06      	ldr	r2, [sp, #24]
 800cc52:	2101      	movs	r1, #1
 800cc54:	441a      	add	r2, r3
 800cc56:	4648      	mov	r0, r9
 800cc58:	9206      	str	r2, [sp, #24]
 800cc5a:	f000 fc77 	bl	800d54c <__i2b>
 800cc5e:	4605      	mov	r5, r0
 800cc60:	b166      	cbz	r6, 800cc7c <_dtoa_r+0x74c>
 800cc62:	9b06      	ldr	r3, [sp, #24]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dd09      	ble.n	800cc7c <_dtoa_r+0x74c>
 800cc68:	42b3      	cmp	r3, r6
 800cc6a:	9a00      	ldr	r2, [sp, #0]
 800cc6c:	bfa8      	it	ge
 800cc6e:	4633      	movge	r3, r6
 800cc70:	1ad2      	subs	r2, r2, r3
 800cc72:	9200      	str	r2, [sp, #0]
 800cc74:	9a06      	ldr	r2, [sp, #24]
 800cc76:	1af6      	subs	r6, r6, r3
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	9306      	str	r3, [sp, #24]
 800cc7c:	9b08      	ldr	r3, [sp, #32]
 800cc7e:	b30b      	cbz	r3, 800ccc4 <_dtoa_r+0x794>
 800cc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 80c6 	beq.w	800ce14 <_dtoa_r+0x8e4>
 800cc88:	2c00      	cmp	r4, #0
 800cc8a:	f000 80c0 	beq.w	800ce0e <_dtoa_r+0x8de>
 800cc8e:	4629      	mov	r1, r5
 800cc90:	4622      	mov	r2, r4
 800cc92:	4648      	mov	r0, r9
 800cc94:	f000 fd12 	bl	800d6bc <__pow5mult>
 800cc98:	9a02      	ldr	r2, [sp, #8]
 800cc9a:	4601      	mov	r1, r0
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	4648      	mov	r0, r9
 800cca0:	f000 fc6a 	bl	800d578 <__multiply>
 800cca4:	9902      	ldr	r1, [sp, #8]
 800cca6:	4680      	mov	r8, r0
 800cca8:	4648      	mov	r0, r9
 800ccaa:	f000 fb51 	bl	800d350 <_Bfree>
 800ccae:	9b08      	ldr	r3, [sp, #32]
 800ccb0:	1b1b      	subs	r3, r3, r4
 800ccb2:	9308      	str	r3, [sp, #32]
 800ccb4:	f000 80b1 	beq.w	800ce1a <_dtoa_r+0x8ea>
 800ccb8:	9a08      	ldr	r2, [sp, #32]
 800ccba:	4641      	mov	r1, r8
 800ccbc:	4648      	mov	r0, r9
 800ccbe:	f000 fcfd 	bl	800d6bc <__pow5mult>
 800ccc2:	9002      	str	r0, [sp, #8]
 800ccc4:	2101      	movs	r1, #1
 800ccc6:	4648      	mov	r0, r9
 800ccc8:	f000 fc40 	bl	800d54c <__i2b>
 800cccc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ccce:	4604      	mov	r4, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 81d8 	beq.w	800d086 <_dtoa_r+0xb56>
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	4601      	mov	r1, r0
 800ccda:	4648      	mov	r0, r9
 800ccdc:	f000 fcee 	bl	800d6bc <__pow5mult>
 800cce0:	9b07      	ldr	r3, [sp, #28]
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	4604      	mov	r4, r0
 800cce6:	f300 809f 	bgt.w	800ce28 <_dtoa_r+0x8f8>
 800ccea:	9b04      	ldr	r3, [sp, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f040 8097 	bne.w	800ce20 <_dtoa_r+0x8f0>
 800ccf2:	9b05      	ldr	r3, [sp, #20]
 800ccf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f040 8093 	bne.w	800ce24 <_dtoa_r+0x8f4>
 800ccfe:	9b05      	ldr	r3, [sp, #20]
 800cd00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd04:	0d1b      	lsrs	r3, r3, #20
 800cd06:	051b      	lsls	r3, r3, #20
 800cd08:	b133      	cbz	r3, 800cd18 <_dtoa_r+0x7e8>
 800cd0a:	9b00      	ldr	r3, [sp, #0]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	9b06      	ldr	r3, [sp, #24]
 800cd12:	3301      	adds	r3, #1
 800cd14:	9306      	str	r3, [sp, #24]
 800cd16:	2301      	movs	r3, #1
 800cd18:	9308      	str	r3, [sp, #32]
 800cd1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f000 81b8 	beq.w	800d092 <_dtoa_r+0xb62>
 800cd22:	6923      	ldr	r3, [r4, #16]
 800cd24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd28:	6918      	ldr	r0, [r3, #16]
 800cd2a:	f000 fbc3 	bl	800d4b4 <__hi0bits>
 800cd2e:	f1c0 0020 	rsb	r0, r0, #32
 800cd32:	9b06      	ldr	r3, [sp, #24]
 800cd34:	4418      	add	r0, r3
 800cd36:	f010 001f 	ands.w	r0, r0, #31
 800cd3a:	f000 8082 	beq.w	800ce42 <_dtoa_r+0x912>
 800cd3e:	f1c0 0320 	rsb	r3, r0, #32
 800cd42:	2b04      	cmp	r3, #4
 800cd44:	dd73      	ble.n	800ce2e <_dtoa_r+0x8fe>
 800cd46:	9b00      	ldr	r3, [sp, #0]
 800cd48:	f1c0 001c 	rsb	r0, r0, #28
 800cd4c:	4403      	add	r3, r0
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	9b06      	ldr	r3, [sp, #24]
 800cd52:	4403      	add	r3, r0
 800cd54:	4406      	add	r6, r0
 800cd56:	9306      	str	r3, [sp, #24]
 800cd58:	9b00      	ldr	r3, [sp, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	dd05      	ble.n	800cd6a <_dtoa_r+0x83a>
 800cd5e:	9902      	ldr	r1, [sp, #8]
 800cd60:	461a      	mov	r2, r3
 800cd62:	4648      	mov	r0, r9
 800cd64:	f000 fd04 	bl	800d770 <__lshift>
 800cd68:	9002      	str	r0, [sp, #8]
 800cd6a:	9b06      	ldr	r3, [sp, #24]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	dd05      	ble.n	800cd7c <_dtoa_r+0x84c>
 800cd70:	4621      	mov	r1, r4
 800cd72:	461a      	mov	r2, r3
 800cd74:	4648      	mov	r0, r9
 800cd76:	f000 fcfb 	bl	800d770 <__lshift>
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d061      	beq.n	800ce46 <_dtoa_r+0x916>
 800cd82:	9802      	ldr	r0, [sp, #8]
 800cd84:	4621      	mov	r1, r4
 800cd86:	f000 fd5f 	bl	800d848 <__mcmp>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	da5b      	bge.n	800ce46 <_dtoa_r+0x916>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	9902      	ldr	r1, [sp, #8]
 800cd92:	220a      	movs	r2, #10
 800cd94:	4648      	mov	r0, r9
 800cd96:	f000 fafd 	bl	800d394 <__multadd>
 800cd9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9c:	9002      	str	r0, [sp, #8]
 800cd9e:	f107 38ff 	add.w	r8, r7, #4294967295
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 8177 	beq.w	800d096 <_dtoa_r+0xb66>
 800cda8:	4629      	mov	r1, r5
 800cdaa:	2300      	movs	r3, #0
 800cdac:	220a      	movs	r2, #10
 800cdae:	4648      	mov	r0, r9
 800cdb0:	f000 faf0 	bl	800d394 <__multadd>
 800cdb4:	f1bb 0f00 	cmp.w	fp, #0
 800cdb8:	4605      	mov	r5, r0
 800cdba:	dc6f      	bgt.n	800ce9c <_dtoa_r+0x96c>
 800cdbc:	9b07      	ldr	r3, [sp, #28]
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	dc49      	bgt.n	800ce56 <_dtoa_r+0x926>
 800cdc2:	e06b      	b.n	800ce9c <_dtoa_r+0x96c>
 800cdc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cdc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cdca:	e73c      	b.n	800cc46 <_dtoa_r+0x716>
 800cdcc:	3fe00000 	.word	0x3fe00000
 800cdd0:	40240000 	.word	0x40240000
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	1e5c      	subs	r4, r3, #1
 800cdd8:	9b08      	ldr	r3, [sp, #32]
 800cdda:	42a3      	cmp	r3, r4
 800cddc:	db09      	blt.n	800cdf2 <_dtoa_r+0x8c2>
 800cdde:	1b1c      	subs	r4, r3, r4
 800cde0:	9b03      	ldr	r3, [sp, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f6bf af30 	bge.w	800cc48 <_dtoa_r+0x718>
 800cde8:	9b00      	ldr	r3, [sp, #0]
 800cdea:	9a03      	ldr	r2, [sp, #12]
 800cdec:	1a9e      	subs	r6, r3, r2
 800cdee:	2300      	movs	r3, #0
 800cdf0:	e72b      	b.n	800cc4a <_dtoa_r+0x71a>
 800cdf2:	9b08      	ldr	r3, [sp, #32]
 800cdf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cdf6:	9408      	str	r4, [sp, #32]
 800cdf8:	1ae3      	subs	r3, r4, r3
 800cdfa:	441a      	add	r2, r3
 800cdfc:	9e00      	ldr	r6, [sp, #0]
 800cdfe:	9b03      	ldr	r3, [sp, #12]
 800ce00:	920d      	str	r2, [sp, #52]	@ 0x34
 800ce02:	2400      	movs	r4, #0
 800ce04:	e721      	b.n	800cc4a <_dtoa_r+0x71a>
 800ce06:	9c08      	ldr	r4, [sp, #32]
 800ce08:	9e00      	ldr	r6, [sp, #0]
 800ce0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ce0c:	e728      	b.n	800cc60 <_dtoa_r+0x730>
 800ce0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ce12:	e751      	b.n	800ccb8 <_dtoa_r+0x788>
 800ce14:	9a08      	ldr	r2, [sp, #32]
 800ce16:	9902      	ldr	r1, [sp, #8]
 800ce18:	e750      	b.n	800ccbc <_dtoa_r+0x78c>
 800ce1a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ce1e:	e751      	b.n	800ccc4 <_dtoa_r+0x794>
 800ce20:	2300      	movs	r3, #0
 800ce22:	e779      	b.n	800cd18 <_dtoa_r+0x7e8>
 800ce24:	9b04      	ldr	r3, [sp, #16]
 800ce26:	e777      	b.n	800cd18 <_dtoa_r+0x7e8>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	9308      	str	r3, [sp, #32]
 800ce2c:	e779      	b.n	800cd22 <_dtoa_r+0x7f2>
 800ce2e:	d093      	beq.n	800cd58 <_dtoa_r+0x828>
 800ce30:	9a00      	ldr	r2, [sp, #0]
 800ce32:	331c      	adds	r3, #28
 800ce34:	441a      	add	r2, r3
 800ce36:	9200      	str	r2, [sp, #0]
 800ce38:	9a06      	ldr	r2, [sp, #24]
 800ce3a:	441a      	add	r2, r3
 800ce3c:	441e      	add	r6, r3
 800ce3e:	9206      	str	r2, [sp, #24]
 800ce40:	e78a      	b.n	800cd58 <_dtoa_r+0x828>
 800ce42:	4603      	mov	r3, r0
 800ce44:	e7f4      	b.n	800ce30 <_dtoa_r+0x900>
 800ce46:	9b03      	ldr	r3, [sp, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	46b8      	mov	r8, r7
 800ce4c:	dc20      	bgt.n	800ce90 <_dtoa_r+0x960>
 800ce4e:	469b      	mov	fp, r3
 800ce50:	9b07      	ldr	r3, [sp, #28]
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	dd1e      	ble.n	800ce94 <_dtoa_r+0x964>
 800ce56:	f1bb 0f00 	cmp.w	fp, #0
 800ce5a:	f47f adb1 	bne.w	800c9c0 <_dtoa_r+0x490>
 800ce5e:	4621      	mov	r1, r4
 800ce60:	465b      	mov	r3, fp
 800ce62:	2205      	movs	r2, #5
 800ce64:	4648      	mov	r0, r9
 800ce66:	f000 fa95 	bl	800d394 <__multadd>
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	9802      	ldr	r0, [sp, #8]
 800ce70:	f000 fcea 	bl	800d848 <__mcmp>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	f77f ada3 	ble.w	800c9c0 <_dtoa_r+0x490>
 800ce7a:	4656      	mov	r6, sl
 800ce7c:	2331      	movs	r3, #49	@ 0x31
 800ce7e:	f806 3b01 	strb.w	r3, [r6], #1
 800ce82:	f108 0801 	add.w	r8, r8, #1
 800ce86:	e59f      	b.n	800c9c8 <_dtoa_r+0x498>
 800ce88:	9c03      	ldr	r4, [sp, #12]
 800ce8a:	46b8      	mov	r8, r7
 800ce8c:	4625      	mov	r5, r4
 800ce8e:	e7f4      	b.n	800ce7a <_dtoa_r+0x94a>
 800ce90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ce94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f000 8101 	beq.w	800d09e <_dtoa_r+0xb6e>
 800ce9c:	2e00      	cmp	r6, #0
 800ce9e:	dd05      	ble.n	800ceac <_dtoa_r+0x97c>
 800cea0:	4629      	mov	r1, r5
 800cea2:	4632      	mov	r2, r6
 800cea4:	4648      	mov	r0, r9
 800cea6:	f000 fc63 	bl	800d770 <__lshift>
 800ceaa:	4605      	mov	r5, r0
 800ceac:	9b08      	ldr	r3, [sp, #32]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d05c      	beq.n	800cf6c <_dtoa_r+0xa3c>
 800ceb2:	6869      	ldr	r1, [r5, #4]
 800ceb4:	4648      	mov	r0, r9
 800ceb6:	f000 fa0b 	bl	800d2d0 <_Balloc>
 800ceba:	4606      	mov	r6, r0
 800cebc:	b928      	cbnz	r0, 800ceca <_dtoa_r+0x99a>
 800cebe:	4b82      	ldr	r3, [pc, #520]	@ (800d0c8 <_dtoa_r+0xb98>)
 800cec0:	4602      	mov	r2, r0
 800cec2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cec6:	f7ff bb4a 	b.w	800c55e <_dtoa_r+0x2e>
 800ceca:	692a      	ldr	r2, [r5, #16]
 800cecc:	3202      	adds	r2, #2
 800cece:	0092      	lsls	r2, r2, #2
 800ced0:	f105 010c 	add.w	r1, r5, #12
 800ced4:	300c      	adds	r0, #12
 800ced6:	f002 f959 	bl	800f18c <memcpy>
 800ceda:	2201      	movs	r2, #1
 800cedc:	4631      	mov	r1, r6
 800cede:	4648      	mov	r0, r9
 800cee0:	f000 fc46 	bl	800d770 <__lshift>
 800cee4:	f10a 0301 	add.w	r3, sl, #1
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	eb0a 030b 	add.w	r3, sl, fp
 800ceee:	9308      	str	r3, [sp, #32]
 800cef0:	9b04      	ldr	r3, [sp, #16]
 800cef2:	f003 0301 	and.w	r3, r3, #1
 800cef6:	462f      	mov	r7, r5
 800cef8:	9306      	str	r3, [sp, #24]
 800cefa:	4605      	mov	r5, r0
 800cefc:	9b00      	ldr	r3, [sp, #0]
 800cefe:	9802      	ldr	r0, [sp, #8]
 800cf00:	4621      	mov	r1, r4
 800cf02:	f103 3bff 	add.w	fp, r3, #4294967295
 800cf06:	f7ff fa89 	bl	800c41c <quorem>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	3330      	adds	r3, #48	@ 0x30
 800cf0e:	9003      	str	r0, [sp, #12]
 800cf10:	4639      	mov	r1, r7
 800cf12:	9802      	ldr	r0, [sp, #8]
 800cf14:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf16:	f000 fc97 	bl	800d848 <__mcmp>
 800cf1a:	462a      	mov	r2, r5
 800cf1c:	9004      	str	r0, [sp, #16]
 800cf1e:	4621      	mov	r1, r4
 800cf20:	4648      	mov	r0, r9
 800cf22:	f000 fcad 	bl	800d880 <__mdiff>
 800cf26:	68c2      	ldr	r2, [r0, #12]
 800cf28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf2a:	4606      	mov	r6, r0
 800cf2c:	bb02      	cbnz	r2, 800cf70 <_dtoa_r+0xa40>
 800cf2e:	4601      	mov	r1, r0
 800cf30:	9802      	ldr	r0, [sp, #8]
 800cf32:	f000 fc89 	bl	800d848 <__mcmp>
 800cf36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf38:	4602      	mov	r2, r0
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4648      	mov	r0, r9
 800cf3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf40:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf42:	f000 fa05 	bl	800d350 <_Bfree>
 800cf46:	9b07      	ldr	r3, [sp, #28]
 800cf48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cf4a:	9e00      	ldr	r6, [sp, #0]
 800cf4c:	ea42 0103 	orr.w	r1, r2, r3
 800cf50:	9b06      	ldr	r3, [sp, #24]
 800cf52:	4319      	orrs	r1, r3
 800cf54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf56:	d10d      	bne.n	800cf74 <_dtoa_r+0xa44>
 800cf58:	2b39      	cmp	r3, #57	@ 0x39
 800cf5a:	d027      	beq.n	800cfac <_dtoa_r+0xa7c>
 800cf5c:	9a04      	ldr	r2, [sp, #16]
 800cf5e:	2a00      	cmp	r2, #0
 800cf60:	dd01      	ble.n	800cf66 <_dtoa_r+0xa36>
 800cf62:	9b03      	ldr	r3, [sp, #12]
 800cf64:	3331      	adds	r3, #49	@ 0x31
 800cf66:	f88b 3000 	strb.w	r3, [fp]
 800cf6a:	e52e      	b.n	800c9ca <_dtoa_r+0x49a>
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	e7b9      	b.n	800cee4 <_dtoa_r+0x9b4>
 800cf70:	2201      	movs	r2, #1
 800cf72:	e7e2      	b.n	800cf3a <_dtoa_r+0xa0a>
 800cf74:	9904      	ldr	r1, [sp, #16]
 800cf76:	2900      	cmp	r1, #0
 800cf78:	db04      	blt.n	800cf84 <_dtoa_r+0xa54>
 800cf7a:	9807      	ldr	r0, [sp, #28]
 800cf7c:	4301      	orrs	r1, r0
 800cf7e:	9806      	ldr	r0, [sp, #24]
 800cf80:	4301      	orrs	r1, r0
 800cf82:	d120      	bne.n	800cfc6 <_dtoa_r+0xa96>
 800cf84:	2a00      	cmp	r2, #0
 800cf86:	ddee      	ble.n	800cf66 <_dtoa_r+0xa36>
 800cf88:	9902      	ldr	r1, [sp, #8]
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	4648      	mov	r0, r9
 800cf90:	f000 fbee 	bl	800d770 <__lshift>
 800cf94:	4621      	mov	r1, r4
 800cf96:	9002      	str	r0, [sp, #8]
 800cf98:	f000 fc56 	bl	800d848 <__mcmp>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	9b00      	ldr	r3, [sp, #0]
 800cfa0:	dc02      	bgt.n	800cfa8 <_dtoa_r+0xa78>
 800cfa2:	d1e0      	bne.n	800cf66 <_dtoa_r+0xa36>
 800cfa4:	07da      	lsls	r2, r3, #31
 800cfa6:	d5de      	bpl.n	800cf66 <_dtoa_r+0xa36>
 800cfa8:	2b39      	cmp	r3, #57	@ 0x39
 800cfaa:	d1da      	bne.n	800cf62 <_dtoa_r+0xa32>
 800cfac:	2339      	movs	r3, #57	@ 0x39
 800cfae:	f88b 3000 	strb.w	r3, [fp]
 800cfb2:	4633      	mov	r3, r6
 800cfb4:	461e      	mov	r6, r3
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cfbc:	2a39      	cmp	r2, #57	@ 0x39
 800cfbe:	d04e      	beq.n	800d05e <_dtoa_r+0xb2e>
 800cfc0:	3201      	adds	r2, #1
 800cfc2:	701a      	strb	r2, [r3, #0]
 800cfc4:	e501      	b.n	800c9ca <_dtoa_r+0x49a>
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	dd03      	ble.n	800cfd2 <_dtoa_r+0xaa2>
 800cfca:	2b39      	cmp	r3, #57	@ 0x39
 800cfcc:	d0ee      	beq.n	800cfac <_dtoa_r+0xa7c>
 800cfce:	3301      	adds	r3, #1
 800cfd0:	e7c9      	b.n	800cf66 <_dtoa_r+0xa36>
 800cfd2:	9a00      	ldr	r2, [sp, #0]
 800cfd4:	9908      	ldr	r1, [sp, #32]
 800cfd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cfda:	428a      	cmp	r2, r1
 800cfdc:	d028      	beq.n	800d030 <_dtoa_r+0xb00>
 800cfde:	9902      	ldr	r1, [sp, #8]
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	220a      	movs	r2, #10
 800cfe4:	4648      	mov	r0, r9
 800cfe6:	f000 f9d5 	bl	800d394 <__multadd>
 800cfea:	42af      	cmp	r7, r5
 800cfec:	9002      	str	r0, [sp, #8]
 800cfee:	f04f 0300 	mov.w	r3, #0
 800cff2:	f04f 020a 	mov.w	r2, #10
 800cff6:	4639      	mov	r1, r7
 800cff8:	4648      	mov	r0, r9
 800cffa:	d107      	bne.n	800d00c <_dtoa_r+0xadc>
 800cffc:	f000 f9ca 	bl	800d394 <__multadd>
 800d000:	4607      	mov	r7, r0
 800d002:	4605      	mov	r5, r0
 800d004:	9b00      	ldr	r3, [sp, #0]
 800d006:	3301      	adds	r3, #1
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	e777      	b.n	800cefc <_dtoa_r+0x9cc>
 800d00c:	f000 f9c2 	bl	800d394 <__multadd>
 800d010:	4629      	mov	r1, r5
 800d012:	4607      	mov	r7, r0
 800d014:	2300      	movs	r3, #0
 800d016:	220a      	movs	r2, #10
 800d018:	4648      	mov	r0, r9
 800d01a:	f000 f9bb 	bl	800d394 <__multadd>
 800d01e:	4605      	mov	r5, r0
 800d020:	e7f0      	b.n	800d004 <_dtoa_r+0xad4>
 800d022:	f1bb 0f00 	cmp.w	fp, #0
 800d026:	bfcc      	ite	gt
 800d028:	465e      	movgt	r6, fp
 800d02a:	2601      	movle	r6, #1
 800d02c:	4456      	add	r6, sl
 800d02e:	2700      	movs	r7, #0
 800d030:	9902      	ldr	r1, [sp, #8]
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	2201      	movs	r2, #1
 800d036:	4648      	mov	r0, r9
 800d038:	f000 fb9a 	bl	800d770 <__lshift>
 800d03c:	4621      	mov	r1, r4
 800d03e:	9002      	str	r0, [sp, #8]
 800d040:	f000 fc02 	bl	800d848 <__mcmp>
 800d044:	2800      	cmp	r0, #0
 800d046:	dcb4      	bgt.n	800cfb2 <_dtoa_r+0xa82>
 800d048:	d102      	bne.n	800d050 <_dtoa_r+0xb20>
 800d04a:	9b00      	ldr	r3, [sp, #0]
 800d04c:	07db      	lsls	r3, r3, #31
 800d04e:	d4b0      	bmi.n	800cfb2 <_dtoa_r+0xa82>
 800d050:	4633      	mov	r3, r6
 800d052:	461e      	mov	r6, r3
 800d054:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d058:	2a30      	cmp	r2, #48	@ 0x30
 800d05a:	d0fa      	beq.n	800d052 <_dtoa_r+0xb22>
 800d05c:	e4b5      	b.n	800c9ca <_dtoa_r+0x49a>
 800d05e:	459a      	cmp	sl, r3
 800d060:	d1a8      	bne.n	800cfb4 <_dtoa_r+0xa84>
 800d062:	2331      	movs	r3, #49	@ 0x31
 800d064:	f108 0801 	add.w	r8, r8, #1
 800d068:	f88a 3000 	strb.w	r3, [sl]
 800d06c:	e4ad      	b.n	800c9ca <_dtoa_r+0x49a>
 800d06e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d070:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d0cc <_dtoa_r+0xb9c>
 800d074:	b11b      	cbz	r3, 800d07e <_dtoa_r+0xb4e>
 800d076:	f10a 0308 	add.w	r3, sl, #8
 800d07a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d07c:	6013      	str	r3, [r2, #0]
 800d07e:	4650      	mov	r0, sl
 800d080:	b017      	add	sp, #92	@ 0x5c
 800d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d086:	9b07      	ldr	r3, [sp, #28]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	f77f ae2e 	ble.w	800ccea <_dtoa_r+0x7ba>
 800d08e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d090:	9308      	str	r3, [sp, #32]
 800d092:	2001      	movs	r0, #1
 800d094:	e64d      	b.n	800cd32 <_dtoa_r+0x802>
 800d096:	f1bb 0f00 	cmp.w	fp, #0
 800d09a:	f77f aed9 	ble.w	800ce50 <_dtoa_r+0x920>
 800d09e:	4656      	mov	r6, sl
 800d0a0:	9802      	ldr	r0, [sp, #8]
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	f7ff f9ba 	bl	800c41c <quorem>
 800d0a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d0ac:	f806 3b01 	strb.w	r3, [r6], #1
 800d0b0:	eba6 020a 	sub.w	r2, r6, sl
 800d0b4:	4593      	cmp	fp, r2
 800d0b6:	ddb4      	ble.n	800d022 <_dtoa_r+0xaf2>
 800d0b8:	9902      	ldr	r1, [sp, #8]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	220a      	movs	r2, #10
 800d0be:	4648      	mov	r0, r9
 800d0c0:	f000 f968 	bl	800d394 <__multadd>
 800d0c4:	9002      	str	r0, [sp, #8]
 800d0c6:	e7eb      	b.n	800d0a0 <_dtoa_r+0xb70>
 800d0c8:	0801139c 	.word	0x0801139c
 800d0cc:	08011337 	.word	0x08011337

0800d0d0 <_free_r>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	4605      	mov	r5, r0
 800d0d4:	2900      	cmp	r1, #0
 800d0d6:	d041      	beq.n	800d15c <_free_r+0x8c>
 800d0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0dc:	1f0c      	subs	r4, r1, #4
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	bfb8      	it	lt
 800d0e2:	18e4      	addlt	r4, r4, r3
 800d0e4:	f000 f8e8 	bl	800d2b8 <__malloc_lock>
 800d0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d160 <_free_r+0x90>)
 800d0ea:	6813      	ldr	r3, [r2, #0]
 800d0ec:	b933      	cbnz	r3, 800d0fc <_free_r+0x2c>
 800d0ee:	6063      	str	r3, [r4, #4]
 800d0f0:	6014      	str	r4, [r2, #0]
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0f8:	f000 b8e4 	b.w	800d2c4 <__malloc_unlock>
 800d0fc:	42a3      	cmp	r3, r4
 800d0fe:	d908      	bls.n	800d112 <_free_r+0x42>
 800d100:	6820      	ldr	r0, [r4, #0]
 800d102:	1821      	adds	r1, r4, r0
 800d104:	428b      	cmp	r3, r1
 800d106:	bf01      	itttt	eq
 800d108:	6819      	ldreq	r1, [r3, #0]
 800d10a:	685b      	ldreq	r3, [r3, #4]
 800d10c:	1809      	addeq	r1, r1, r0
 800d10e:	6021      	streq	r1, [r4, #0]
 800d110:	e7ed      	b.n	800d0ee <_free_r+0x1e>
 800d112:	461a      	mov	r2, r3
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	b10b      	cbz	r3, 800d11c <_free_r+0x4c>
 800d118:	42a3      	cmp	r3, r4
 800d11a:	d9fa      	bls.n	800d112 <_free_r+0x42>
 800d11c:	6811      	ldr	r1, [r2, #0]
 800d11e:	1850      	adds	r0, r2, r1
 800d120:	42a0      	cmp	r0, r4
 800d122:	d10b      	bne.n	800d13c <_free_r+0x6c>
 800d124:	6820      	ldr	r0, [r4, #0]
 800d126:	4401      	add	r1, r0
 800d128:	1850      	adds	r0, r2, r1
 800d12a:	4283      	cmp	r3, r0
 800d12c:	6011      	str	r1, [r2, #0]
 800d12e:	d1e0      	bne.n	800d0f2 <_free_r+0x22>
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	6053      	str	r3, [r2, #4]
 800d136:	4408      	add	r0, r1
 800d138:	6010      	str	r0, [r2, #0]
 800d13a:	e7da      	b.n	800d0f2 <_free_r+0x22>
 800d13c:	d902      	bls.n	800d144 <_free_r+0x74>
 800d13e:	230c      	movs	r3, #12
 800d140:	602b      	str	r3, [r5, #0]
 800d142:	e7d6      	b.n	800d0f2 <_free_r+0x22>
 800d144:	6820      	ldr	r0, [r4, #0]
 800d146:	1821      	adds	r1, r4, r0
 800d148:	428b      	cmp	r3, r1
 800d14a:	bf04      	itt	eq
 800d14c:	6819      	ldreq	r1, [r3, #0]
 800d14e:	685b      	ldreq	r3, [r3, #4]
 800d150:	6063      	str	r3, [r4, #4]
 800d152:	bf04      	itt	eq
 800d154:	1809      	addeq	r1, r1, r0
 800d156:	6021      	streq	r1, [r4, #0]
 800d158:	6054      	str	r4, [r2, #4]
 800d15a:	e7ca      	b.n	800d0f2 <_free_r+0x22>
 800d15c:	bd38      	pop	{r3, r4, r5, pc}
 800d15e:	bf00      	nop
 800d160:	20001104 	.word	0x20001104

0800d164 <malloc>:
 800d164:	4b02      	ldr	r3, [pc, #8]	@ (800d170 <malloc+0xc>)
 800d166:	4601      	mov	r1, r0
 800d168:	6818      	ldr	r0, [r3, #0]
 800d16a:	f000 b825 	b.w	800d1b8 <_malloc_r>
 800d16e:	bf00      	nop
 800d170:	2000003c 	.word	0x2000003c

0800d174 <sbrk_aligned>:
 800d174:	b570      	push	{r4, r5, r6, lr}
 800d176:	4e0f      	ldr	r6, [pc, #60]	@ (800d1b4 <sbrk_aligned+0x40>)
 800d178:	460c      	mov	r4, r1
 800d17a:	6831      	ldr	r1, [r6, #0]
 800d17c:	4605      	mov	r5, r0
 800d17e:	b911      	cbnz	r1, 800d186 <sbrk_aligned+0x12>
 800d180:	f001 fff4 	bl	800f16c <_sbrk_r>
 800d184:	6030      	str	r0, [r6, #0]
 800d186:	4621      	mov	r1, r4
 800d188:	4628      	mov	r0, r5
 800d18a:	f001 ffef 	bl	800f16c <_sbrk_r>
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	d103      	bne.n	800d19a <sbrk_aligned+0x26>
 800d192:	f04f 34ff 	mov.w	r4, #4294967295
 800d196:	4620      	mov	r0, r4
 800d198:	bd70      	pop	{r4, r5, r6, pc}
 800d19a:	1cc4      	adds	r4, r0, #3
 800d19c:	f024 0403 	bic.w	r4, r4, #3
 800d1a0:	42a0      	cmp	r0, r4
 800d1a2:	d0f8      	beq.n	800d196 <sbrk_aligned+0x22>
 800d1a4:	1a21      	subs	r1, r4, r0
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	f001 ffe0 	bl	800f16c <_sbrk_r>
 800d1ac:	3001      	adds	r0, #1
 800d1ae:	d1f2      	bne.n	800d196 <sbrk_aligned+0x22>
 800d1b0:	e7ef      	b.n	800d192 <sbrk_aligned+0x1e>
 800d1b2:	bf00      	nop
 800d1b4:	20001100 	.word	0x20001100

0800d1b8 <_malloc_r>:
 800d1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1bc:	1ccd      	adds	r5, r1, #3
 800d1be:	f025 0503 	bic.w	r5, r5, #3
 800d1c2:	3508      	adds	r5, #8
 800d1c4:	2d0c      	cmp	r5, #12
 800d1c6:	bf38      	it	cc
 800d1c8:	250c      	movcc	r5, #12
 800d1ca:	2d00      	cmp	r5, #0
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	db01      	blt.n	800d1d4 <_malloc_r+0x1c>
 800d1d0:	42a9      	cmp	r1, r5
 800d1d2:	d904      	bls.n	800d1de <_malloc_r+0x26>
 800d1d4:	230c      	movs	r3, #12
 800d1d6:	6033      	str	r3, [r6, #0]
 800d1d8:	2000      	movs	r0, #0
 800d1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d2b4 <_malloc_r+0xfc>
 800d1e2:	f000 f869 	bl	800d2b8 <__malloc_lock>
 800d1e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d1ea:	461c      	mov	r4, r3
 800d1ec:	bb44      	cbnz	r4, 800d240 <_malloc_r+0x88>
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	f7ff ffbf 	bl	800d174 <sbrk_aligned>
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	d158      	bne.n	800d2ae <_malloc_r+0xf6>
 800d1fc:	f8d8 4000 	ldr.w	r4, [r8]
 800d200:	4627      	mov	r7, r4
 800d202:	2f00      	cmp	r7, #0
 800d204:	d143      	bne.n	800d28e <_malloc_r+0xd6>
 800d206:	2c00      	cmp	r4, #0
 800d208:	d04b      	beq.n	800d2a2 <_malloc_r+0xea>
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	4639      	mov	r1, r7
 800d20e:	4630      	mov	r0, r6
 800d210:	eb04 0903 	add.w	r9, r4, r3
 800d214:	f001 ffaa 	bl	800f16c <_sbrk_r>
 800d218:	4581      	cmp	r9, r0
 800d21a:	d142      	bne.n	800d2a2 <_malloc_r+0xea>
 800d21c:	6821      	ldr	r1, [r4, #0]
 800d21e:	1a6d      	subs	r5, r5, r1
 800d220:	4629      	mov	r1, r5
 800d222:	4630      	mov	r0, r6
 800d224:	f7ff ffa6 	bl	800d174 <sbrk_aligned>
 800d228:	3001      	adds	r0, #1
 800d22a:	d03a      	beq.n	800d2a2 <_malloc_r+0xea>
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	442b      	add	r3, r5
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	f8d8 3000 	ldr.w	r3, [r8]
 800d236:	685a      	ldr	r2, [r3, #4]
 800d238:	bb62      	cbnz	r2, 800d294 <_malloc_r+0xdc>
 800d23a:	f8c8 7000 	str.w	r7, [r8]
 800d23e:	e00f      	b.n	800d260 <_malloc_r+0xa8>
 800d240:	6822      	ldr	r2, [r4, #0]
 800d242:	1b52      	subs	r2, r2, r5
 800d244:	d420      	bmi.n	800d288 <_malloc_r+0xd0>
 800d246:	2a0b      	cmp	r2, #11
 800d248:	d917      	bls.n	800d27a <_malloc_r+0xc2>
 800d24a:	1961      	adds	r1, r4, r5
 800d24c:	42a3      	cmp	r3, r4
 800d24e:	6025      	str	r5, [r4, #0]
 800d250:	bf18      	it	ne
 800d252:	6059      	strne	r1, [r3, #4]
 800d254:	6863      	ldr	r3, [r4, #4]
 800d256:	bf08      	it	eq
 800d258:	f8c8 1000 	streq.w	r1, [r8]
 800d25c:	5162      	str	r2, [r4, r5]
 800d25e:	604b      	str	r3, [r1, #4]
 800d260:	4630      	mov	r0, r6
 800d262:	f000 f82f 	bl	800d2c4 <__malloc_unlock>
 800d266:	f104 000b 	add.w	r0, r4, #11
 800d26a:	1d23      	adds	r3, r4, #4
 800d26c:	f020 0007 	bic.w	r0, r0, #7
 800d270:	1ac2      	subs	r2, r0, r3
 800d272:	bf1c      	itt	ne
 800d274:	1a1b      	subne	r3, r3, r0
 800d276:	50a3      	strne	r3, [r4, r2]
 800d278:	e7af      	b.n	800d1da <_malloc_r+0x22>
 800d27a:	6862      	ldr	r2, [r4, #4]
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	bf0c      	ite	eq
 800d280:	f8c8 2000 	streq.w	r2, [r8]
 800d284:	605a      	strne	r2, [r3, #4]
 800d286:	e7eb      	b.n	800d260 <_malloc_r+0xa8>
 800d288:	4623      	mov	r3, r4
 800d28a:	6864      	ldr	r4, [r4, #4]
 800d28c:	e7ae      	b.n	800d1ec <_malloc_r+0x34>
 800d28e:	463c      	mov	r4, r7
 800d290:	687f      	ldr	r7, [r7, #4]
 800d292:	e7b6      	b.n	800d202 <_malloc_r+0x4a>
 800d294:	461a      	mov	r2, r3
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	42a3      	cmp	r3, r4
 800d29a:	d1fb      	bne.n	800d294 <_malloc_r+0xdc>
 800d29c:	2300      	movs	r3, #0
 800d29e:	6053      	str	r3, [r2, #4]
 800d2a0:	e7de      	b.n	800d260 <_malloc_r+0xa8>
 800d2a2:	230c      	movs	r3, #12
 800d2a4:	6033      	str	r3, [r6, #0]
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f000 f80c 	bl	800d2c4 <__malloc_unlock>
 800d2ac:	e794      	b.n	800d1d8 <_malloc_r+0x20>
 800d2ae:	6005      	str	r5, [r0, #0]
 800d2b0:	e7d6      	b.n	800d260 <_malloc_r+0xa8>
 800d2b2:	bf00      	nop
 800d2b4:	20001104 	.word	0x20001104

0800d2b8 <__malloc_lock>:
 800d2b8:	4801      	ldr	r0, [pc, #4]	@ (800d2c0 <__malloc_lock+0x8>)
 800d2ba:	f7ff b888 	b.w	800c3ce <__retarget_lock_acquire_recursive>
 800d2be:	bf00      	nop
 800d2c0:	200010fc 	.word	0x200010fc

0800d2c4 <__malloc_unlock>:
 800d2c4:	4801      	ldr	r0, [pc, #4]	@ (800d2cc <__malloc_unlock+0x8>)
 800d2c6:	f7ff b883 	b.w	800c3d0 <__retarget_lock_release_recursive>
 800d2ca:	bf00      	nop
 800d2cc:	200010fc 	.word	0x200010fc

0800d2d0 <_Balloc>:
 800d2d0:	b570      	push	{r4, r5, r6, lr}
 800d2d2:	69c6      	ldr	r6, [r0, #28]
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	460d      	mov	r5, r1
 800d2d8:	b976      	cbnz	r6, 800d2f8 <_Balloc+0x28>
 800d2da:	2010      	movs	r0, #16
 800d2dc:	f7ff ff42 	bl	800d164 <malloc>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	61e0      	str	r0, [r4, #28]
 800d2e4:	b920      	cbnz	r0, 800d2f0 <_Balloc+0x20>
 800d2e6:	4b18      	ldr	r3, [pc, #96]	@ (800d348 <_Balloc+0x78>)
 800d2e8:	4818      	ldr	r0, [pc, #96]	@ (800d34c <_Balloc+0x7c>)
 800d2ea:	216b      	movs	r1, #107	@ 0x6b
 800d2ec:	f7ff f878 	bl	800c3e0 <__assert_func>
 800d2f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2f4:	6006      	str	r6, [r0, #0]
 800d2f6:	60c6      	str	r6, [r0, #12]
 800d2f8:	69e6      	ldr	r6, [r4, #28]
 800d2fa:	68f3      	ldr	r3, [r6, #12]
 800d2fc:	b183      	cbz	r3, 800d320 <_Balloc+0x50>
 800d2fe:	69e3      	ldr	r3, [r4, #28]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d306:	b9b8      	cbnz	r0, 800d338 <_Balloc+0x68>
 800d308:	2101      	movs	r1, #1
 800d30a:	fa01 f605 	lsl.w	r6, r1, r5
 800d30e:	1d72      	adds	r2, r6, #5
 800d310:	0092      	lsls	r2, r2, #2
 800d312:	4620      	mov	r0, r4
 800d314:	f001 ff57 	bl	800f1c6 <_calloc_r>
 800d318:	b160      	cbz	r0, 800d334 <_Balloc+0x64>
 800d31a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d31e:	e00e      	b.n	800d33e <_Balloc+0x6e>
 800d320:	2221      	movs	r2, #33	@ 0x21
 800d322:	2104      	movs	r1, #4
 800d324:	4620      	mov	r0, r4
 800d326:	f001 ff4e 	bl	800f1c6 <_calloc_r>
 800d32a:	69e3      	ldr	r3, [r4, #28]
 800d32c:	60f0      	str	r0, [r6, #12]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1e4      	bne.n	800d2fe <_Balloc+0x2e>
 800d334:	2000      	movs	r0, #0
 800d336:	bd70      	pop	{r4, r5, r6, pc}
 800d338:	6802      	ldr	r2, [r0, #0]
 800d33a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d33e:	2300      	movs	r3, #0
 800d340:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d344:	e7f7      	b.n	800d336 <_Balloc+0x66>
 800d346:	bf00      	nop
 800d348:	0801128a 	.word	0x0801128a
 800d34c:	080113ad 	.word	0x080113ad

0800d350 <_Bfree>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	69c6      	ldr	r6, [r0, #28]
 800d354:	4605      	mov	r5, r0
 800d356:	460c      	mov	r4, r1
 800d358:	b976      	cbnz	r6, 800d378 <_Bfree+0x28>
 800d35a:	2010      	movs	r0, #16
 800d35c:	f7ff ff02 	bl	800d164 <malloc>
 800d360:	4602      	mov	r2, r0
 800d362:	61e8      	str	r0, [r5, #28]
 800d364:	b920      	cbnz	r0, 800d370 <_Bfree+0x20>
 800d366:	4b09      	ldr	r3, [pc, #36]	@ (800d38c <_Bfree+0x3c>)
 800d368:	4809      	ldr	r0, [pc, #36]	@ (800d390 <_Bfree+0x40>)
 800d36a:	218f      	movs	r1, #143	@ 0x8f
 800d36c:	f7ff f838 	bl	800c3e0 <__assert_func>
 800d370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d374:	6006      	str	r6, [r0, #0]
 800d376:	60c6      	str	r6, [r0, #12]
 800d378:	b13c      	cbz	r4, 800d38a <_Bfree+0x3a>
 800d37a:	69eb      	ldr	r3, [r5, #28]
 800d37c:	6862      	ldr	r2, [r4, #4]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d384:	6021      	str	r1, [r4, #0]
 800d386:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	0801128a 	.word	0x0801128a
 800d390:	080113ad 	.word	0x080113ad

0800d394 <__multadd>:
 800d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d398:	690d      	ldr	r5, [r1, #16]
 800d39a:	4607      	mov	r7, r0
 800d39c:	460c      	mov	r4, r1
 800d39e:	461e      	mov	r6, r3
 800d3a0:	f101 0c14 	add.w	ip, r1, #20
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	f8dc 3000 	ldr.w	r3, [ip]
 800d3aa:	b299      	uxth	r1, r3
 800d3ac:	fb02 6101 	mla	r1, r2, r1, r6
 800d3b0:	0c1e      	lsrs	r6, r3, #16
 800d3b2:	0c0b      	lsrs	r3, r1, #16
 800d3b4:	fb02 3306 	mla	r3, r2, r6, r3
 800d3b8:	b289      	uxth	r1, r1
 800d3ba:	3001      	adds	r0, #1
 800d3bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3c0:	4285      	cmp	r5, r0
 800d3c2:	f84c 1b04 	str.w	r1, [ip], #4
 800d3c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3ca:	dcec      	bgt.n	800d3a6 <__multadd+0x12>
 800d3cc:	b30e      	cbz	r6, 800d412 <__multadd+0x7e>
 800d3ce:	68a3      	ldr	r3, [r4, #8]
 800d3d0:	42ab      	cmp	r3, r5
 800d3d2:	dc19      	bgt.n	800d408 <__multadd+0x74>
 800d3d4:	6861      	ldr	r1, [r4, #4]
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	3101      	adds	r1, #1
 800d3da:	f7ff ff79 	bl	800d2d0 <_Balloc>
 800d3de:	4680      	mov	r8, r0
 800d3e0:	b928      	cbnz	r0, 800d3ee <__multadd+0x5a>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d418 <__multadd+0x84>)
 800d3e6:	480d      	ldr	r0, [pc, #52]	@ (800d41c <__multadd+0x88>)
 800d3e8:	21ba      	movs	r1, #186	@ 0xba
 800d3ea:	f7fe fff9 	bl	800c3e0 <__assert_func>
 800d3ee:	6922      	ldr	r2, [r4, #16]
 800d3f0:	3202      	adds	r2, #2
 800d3f2:	f104 010c 	add.w	r1, r4, #12
 800d3f6:	0092      	lsls	r2, r2, #2
 800d3f8:	300c      	adds	r0, #12
 800d3fa:	f001 fec7 	bl	800f18c <memcpy>
 800d3fe:	4621      	mov	r1, r4
 800d400:	4638      	mov	r0, r7
 800d402:	f7ff ffa5 	bl	800d350 <_Bfree>
 800d406:	4644      	mov	r4, r8
 800d408:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d40c:	3501      	adds	r5, #1
 800d40e:	615e      	str	r6, [r3, #20]
 800d410:	6125      	str	r5, [r4, #16]
 800d412:	4620      	mov	r0, r4
 800d414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d418:	0801139c 	.word	0x0801139c
 800d41c:	080113ad 	.word	0x080113ad

0800d420 <__s2b>:
 800d420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d424:	460c      	mov	r4, r1
 800d426:	4615      	mov	r5, r2
 800d428:	461f      	mov	r7, r3
 800d42a:	2209      	movs	r2, #9
 800d42c:	3308      	adds	r3, #8
 800d42e:	4606      	mov	r6, r0
 800d430:	fb93 f3f2 	sdiv	r3, r3, r2
 800d434:	2100      	movs	r1, #0
 800d436:	2201      	movs	r2, #1
 800d438:	429a      	cmp	r2, r3
 800d43a:	db09      	blt.n	800d450 <__s2b+0x30>
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7ff ff47 	bl	800d2d0 <_Balloc>
 800d442:	b940      	cbnz	r0, 800d456 <__s2b+0x36>
 800d444:	4602      	mov	r2, r0
 800d446:	4b19      	ldr	r3, [pc, #100]	@ (800d4ac <__s2b+0x8c>)
 800d448:	4819      	ldr	r0, [pc, #100]	@ (800d4b0 <__s2b+0x90>)
 800d44a:	21d3      	movs	r1, #211	@ 0xd3
 800d44c:	f7fe ffc8 	bl	800c3e0 <__assert_func>
 800d450:	0052      	lsls	r2, r2, #1
 800d452:	3101      	adds	r1, #1
 800d454:	e7f0      	b.n	800d438 <__s2b+0x18>
 800d456:	9b08      	ldr	r3, [sp, #32]
 800d458:	6143      	str	r3, [r0, #20]
 800d45a:	2d09      	cmp	r5, #9
 800d45c:	f04f 0301 	mov.w	r3, #1
 800d460:	6103      	str	r3, [r0, #16]
 800d462:	dd16      	ble.n	800d492 <__s2b+0x72>
 800d464:	f104 0909 	add.w	r9, r4, #9
 800d468:	46c8      	mov	r8, r9
 800d46a:	442c      	add	r4, r5
 800d46c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d470:	4601      	mov	r1, r0
 800d472:	3b30      	subs	r3, #48	@ 0x30
 800d474:	220a      	movs	r2, #10
 800d476:	4630      	mov	r0, r6
 800d478:	f7ff ff8c 	bl	800d394 <__multadd>
 800d47c:	45a0      	cmp	r8, r4
 800d47e:	d1f5      	bne.n	800d46c <__s2b+0x4c>
 800d480:	f1a5 0408 	sub.w	r4, r5, #8
 800d484:	444c      	add	r4, r9
 800d486:	1b2d      	subs	r5, r5, r4
 800d488:	1963      	adds	r3, r4, r5
 800d48a:	42bb      	cmp	r3, r7
 800d48c:	db04      	blt.n	800d498 <__s2b+0x78>
 800d48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d492:	340a      	adds	r4, #10
 800d494:	2509      	movs	r5, #9
 800d496:	e7f6      	b.n	800d486 <__s2b+0x66>
 800d498:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d49c:	4601      	mov	r1, r0
 800d49e:	3b30      	subs	r3, #48	@ 0x30
 800d4a0:	220a      	movs	r2, #10
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f7ff ff76 	bl	800d394 <__multadd>
 800d4a8:	e7ee      	b.n	800d488 <__s2b+0x68>
 800d4aa:	bf00      	nop
 800d4ac:	0801139c 	.word	0x0801139c
 800d4b0:	080113ad 	.word	0x080113ad

0800d4b4 <__hi0bits>:
 800d4b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	bf36      	itet	cc
 800d4bc:	0403      	lslcc	r3, r0, #16
 800d4be:	2000      	movcs	r0, #0
 800d4c0:	2010      	movcc	r0, #16
 800d4c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d4c6:	bf3c      	itt	cc
 800d4c8:	021b      	lslcc	r3, r3, #8
 800d4ca:	3008      	addcc	r0, #8
 800d4cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4d0:	bf3c      	itt	cc
 800d4d2:	011b      	lslcc	r3, r3, #4
 800d4d4:	3004      	addcc	r0, #4
 800d4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4da:	bf3c      	itt	cc
 800d4dc:	009b      	lslcc	r3, r3, #2
 800d4de:	3002      	addcc	r0, #2
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	db05      	blt.n	800d4f0 <__hi0bits+0x3c>
 800d4e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d4e8:	f100 0001 	add.w	r0, r0, #1
 800d4ec:	bf08      	it	eq
 800d4ee:	2020      	moveq	r0, #32
 800d4f0:	4770      	bx	lr

0800d4f2 <__lo0bits>:
 800d4f2:	6803      	ldr	r3, [r0, #0]
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	f013 0007 	ands.w	r0, r3, #7
 800d4fa:	d00b      	beq.n	800d514 <__lo0bits+0x22>
 800d4fc:	07d9      	lsls	r1, r3, #31
 800d4fe:	d421      	bmi.n	800d544 <__lo0bits+0x52>
 800d500:	0798      	lsls	r0, r3, #30
 800d502:	bf49      	itett	mi
 800d504:	085b      	lsrmi	r3, r3, #1
 800d506:	089b      	lsrpl	r3, r3, #2
 800d508:	2001      	movmi	r0, #1
 800d50a:	6013      	strmi	r3, [r2, #0]
 800d50c:	bf5c      	itt	pl
 800d50e:	6013      	strpl	r3, [r2, #0]
 800d510:	2002      	movpl	r0, #2
 800d512:	4770      	bx	lr
 800d514:	b299      	uxth	r1, r3
 800d516:	b909      	cbnz	r1, 800d51c <__lo0bits+0x2a>
 800d518:	0c1b      	lsrs	r3, r3, #16
 800d51a:	2010      	movs	r0, #16
 800d51c:	b2d9      	uxtb	r1, r3
 800d51e:	b909      	cbnz	r1, 800d524 <__lo0bits+0x32>
 800d520:	3008      	adds	r0, #8
 800d522:	0a1b      	lsrs	r3, r3, #8
 800d524:	0719      	lsls	r1, r3, #28
 800d526:	bf04      	itt	eq
 800d528:	091b      	lsreq	r3, r3, #4
 800d52a:	3004      	addeq	r0, #4
 800d52c:	0799      	lsls	r1, r3, #30
 800d52e:	bf04      	itt	eq
 800d530:	089b      	lsreq	r3, r3, #2
 800d532:	3002      	addeq	r0, #2
 800d534:	07d9      	lsls	r1, r3, #31
 800d536:	d403      	bmi.n	800d540 <__lo0bits+0x4e>
 800d538:	085b      	lsrs	r3, r3, #1
 800d53a:	f100 0001 	add.w	r0, r0, #1
 800d53e:	d003      	beq.n	800d548 <__lo0bits+0x56>
 800d540:	6013      	str	r3, [r2, #0]
 800d542:	4770      	bx	lr
 800d544:	2000      	movs	r0, #0
 800d546:	4770      	bx	lr
 800d548:	2020      	movs	r0, #32
 800d54a:	4770      	bx	lr

0800d54c <__i2b>:
 800d54c:	b510      	push	{r4, lr}
 800d54e:	460c      	mov	r4, r1
 800d550:	2101      	movs	r1, #1
 800d552:	f7ff febd 	bl	800d2d0 <_Balloc>
 800d556:	4602      	mov	r2, r0
 800d558:	b928      	cbnz	r0, 800d566 <__i2b+0x1a>
 800d55a:	4b05      	ldr	r3, [pc, #20]	@ (800d570 <__i2b+0x24>)
 800d55c:	4805      	ldr	r0, [pc, #20]	@ (800d574 <__i2b+0x28>)
 800d55e:	f240 1145 	movw	r1, #325	@ 0x145
 800d562:	f7fe ff3d 	bl	800c3e0 <__assert_func>
 800d566:	2301      	movs	r3, #1
 800d568:	6144      	str	r4, [r0, #20]
 800d56a:	6103      	str	r3, [r0, #16]
 800d56c:	bd10      	pop	{r4, pc}
 800d56e:	bf00      	nop
 800d570:	0801139c 	.word	0x0801139c
 800d574:	080113ad 	.word	0x080113ad

0800d578 <__multiply>:
 800d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	4617      	mov	r7, r2
 800d57e:	690a      	ldr	r2, [r1, #16]
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	429a      	cmp	r2, r3
 800d584:	bfa8      	it	ge
 800d586:	463b      	movge	r3, r7
 800d588:	4689      	mov	r9, r1
 800d58a:	bfa4      	itt	ge
 800d58c:	460f      	movge	r7, r1
 800d58e:	4699      	movge	r9, r3
 800d590:	693d      	ldr	r5, [r7, #16]
 800d592:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	eb05 060a 	add.w	r6, r5, sl
 800d59e:	42b3      	cmp	r3, r6
 800d5a0:	b085      	sub	sp, #20
 800d5a2:	bfb8      	it	lt
 800d5a4:	3101      	addlt	r1, #1
 800d5a6:	f7ff fe93 	bl	800d2d0 <_Balloc>
 800d5aa:	b930      	cbnz	r0, 800d5ba <__multiply+0x42>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	4b41      	ldr	r3, [pc, #260]	@ (800d6b4 <__multiply+0x13c>)
 800d5b0:	4841      	ldr	r0, [pc, #260]	@ (800d6b8 <__multiply+0x140>)
 800d5b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d5b6:	f7fe ff13 	bl	800c3e0 <__assert_func>
 800d5ba:	f100 0414 	add.w	r4, r0, #20
 800d5be:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d5c2:	4623      	mov	r3, r4
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	4573      	cmp	r3, lr
 800d5c8:	d320      	bcc.n	800d60c <__multiply+0x94>
 800d5ca:	f107 0814 	add.w	r8, r7, #20
 800d5ce:	f109 0114 	add.w	r1, r9, #20
 800d5d2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d5d6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d5da:	9302      	str	r3, [sp, #8]
 800d5dc:	1beb      	subs	r3, r5, r7
 800d5de:	3b15      	subs	r3, #21
 800d5e0:	f023 0303 	bic.w	r3, r3, #3
 800d5e4:	3304      	adds	r3, #4
 800d5e6:	3715      	adds	r7, #21
 800d5e8:	42bd      	cmp	r5, r7
 800d5ea:	bf38      	it	cc
 800d5ec:	2304      	movcc	r3, #4
 800d5ee:	9301      	str	r3, [sp, #4]
 800d5f0:	9b02      	ldr	r3, [sp, #8]
 800d5f2:	9103      	str	r1, [sp, #12]
 800d5f4:	428b      	cmp	r3, r1
 800d5f6:	d80c      	bhi.n	800d612 <__multiply+0x9a>
 800d5f8:	2e00      	cmp	r6, #0
 800d5fa:	dd03      	ble.n	800d604 <__multiply+0x8c>
 800d5fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d600:	2b00      	cmp	r3, #0
 800d602:	d055      	beq.n	800d6b0 <__multiply+0x138>
 800d604:	6106      	str	r6, [r0, #16]
 800d606:	b005      	add	sp, #20
 800d608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60c:	f843 2b04 	str.w	r2, [r3], #4
 800d610:	e7d9      	b.n	800d5c6 <__multiply+0x4e>
 800d612:	f8b1 a000 	ldrh.w	sl, [r1]
 800d616:	f1ba 0f00 	cmp.w	sl, #0
 800d61a:	d01f      	beq.n	800d65c <__multiply+0xe4>
 800d61c:	46c4      	mov	ip, r8
 800d61e:	46a1      	mov	r9, r4
 800d620:	2700      	movs	r7, #0
 800d622:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d626:	f8d9 3000 	ldr.w	r3, [r9]
 800d62a:	fa1f fb82 	uxth.w	fp, r2
 800d62e:	b29b      	uxth	r3, r3
 800d630:	fb0a 330b 	mla	r3, sl, fp, r3
 800d634:	443b      	add	r3, r7
 800d636:	f8d9 7000 	ldr.w	r7, [r9]
 800d63a:	0c12      	lsrs	r2, r2, #16
 800d63c:	0c3f      	lsrs	r7, r7, #16
 800d63e:	fb0a 7202 	mla	r2, sl, r2, r7
 800d642:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d646:	b29b      	uxth	r3, r3
 800d648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d64c:	4565      	cmp	r5, ip
 800d64e:	f849 3b04 	str.w	r3, [r9], #4
 800d652:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d656:	d8e4      	bhi.n	800d622 <__multiply+0xaa>
 800d658:	9b01      	ldr	r3, [sp, #4]
 800d65a:	50e7      	str	r7, [r4, r3]
 800d65c:	9b03      	ldr	r3, [sp, #12]
 800d65e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d662:	3104      	adds	r1, #4
 800d664:	f1b9 0f00 	cmp.w	r9, #0
 800d668:	d020      	beq.n	800d6ac <__multiply+0x134>
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	4647      	mov	r7, r8
 800d66e:	46a4      	mov	ip, r4
 800d670:	f04f 0a00 	mov.w	sl, #0
 800d674:	f8b7 b000 	ldrh.w	fp, [r7]
 800d678:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d67c:	fb09 220b 	mla	r2, r9, fp, r2
 800d680:	4452      	add	r2, sl
 800d682:	b29b      	uxth	r3, r3
 800d684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d688:	f84c 3b04 	str.w	r3, [ip], #4
 800d68c:	f857 3b04 	ldr.w	r3, [r7], #4
 800d690:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d694:	f8bc 3000 	ldrh.w	r3, [ip]
 800d698:	fb09 330a 	mla	r3, r9, sl, r3
 800d69c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d6a0:	42bd      	cmp	r5, r7
 800d6a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6a6:	d8e5      	bhi.n	800d674 <__multiply+0xfc>
 800d6a8:	9a01      	ldr	r2, [sp, #4]
 800d6aa:	50a3      	str	r3, [r4, r2]
 800d6ac:	3404      	adds	r4, #4
 800d6ae:	e79f      	b.n	800d5f0 <__multiply+0x78>
 800d6b0:	3e01      	subs	r6, #1
 800d6b2:	e7a1      	b.n	800d5f8 <__multiply+0x80>
 800d6b4:	0801139c 	.word	0x0801139c
 800d6b8:	080113ad 	.word	0x080113ad

0800d6bc <__pow5mult>:
 800d6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6c0:	4615      	mov	r5, r2
 800d6c2:	f012 0203 	ands.w	r2, r2, #3
 800d6c6:	4607      	mov	r7, r0
 800d6c8:	460e      	mov	r6, r1
 800d6ca:	d007      	beq.n	800d6dc <__pow5mult+0x20>
 800d6cc:	4c25      	ldr	r4, [pc, #148]	@ (800d764 <__pow5mult+0xa8>)
 800d6ce:	3a01      	subs	r2, #1
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6d6:	f7ff fe5d 	bl	800d394 <__multadd>
 800d6da:	4606      	mov	r6, r0
 800d6dc:	10ad      	asrs	r5, r5, #2
 800d6de:	d03d      	beq.n	800d75c <__pow5mult+0xa0>
 800d6e0:	69fc      	ldr	r4, [r7, #28]
 800d6e2:	b97c      	cbnz	r4, 800d704 <__pow5mult+0x48>
 800d6e4:	2010      	movs	r0, #16
 800d6e6:	f7ff fd3d 	bl	800d164 <malloc>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	61f8      	str	r0, [r7, #28]
 800d6ee:	b928      	cbnz	r0, 800d6fc <__pow5mult+0x40>
 800d6f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d768 <__pow5mult+0xac>)
 800d6f2:	481e      	ldr	r0, [pc, #120]	@ (800d76c <__pow5mult+0xb0>)
 800d6f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d6f8:	f7fe fe72 	bl	800c3e0 <__assert_func>
 800d6fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d700:	6004      	str	r4, [r0, #0]
 800d702:	60c4      	str	r4, [r0, #12]
 800d704:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d70c:	b94c      	cbnz	r4, 800d722 <__pow5mult+0x66>
 800d70e:	f240 2171 	movw	r1, #625	@ 0x271
 800d712:	4638      	mov	r0, r7
 800d714:	f7ff ff1a 	bl	800d54c <__i2b>
 800d718:	2300      	movs	r3, #0
 800d71a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d71e:	4604      	mov	r4, r0
 800d720:	6003      	str	r3, [r0, #0]
 800d722:	f04f 0900 	mov.w	r9, #0
 800d726:	07eb      	lsls	r3, r5, #31
 800d728:	d50a      	bpl.n	800d740 <__pow5mult+0x84>
 800d72a:	4631      	mov	r1, r6
 800d72c:	4622      	mov	r2, r4
 800d72e:	4638      	mov	r0, r7
 800d730:	f7ff ff22 	bl	800d578 <__multiply>
 800d734:	4631      	mov	r1, r6
 800d736:	4680      	mov	r8, r0
 800d738:	4638      	mov	r0, r7
 800d73a:	f7ff fe09 	bl	800d350 <_Bfree>
 800d73e:	4646      	mov	r6, r8
 800d740:	106d      	asrs	r5, r5, #1
 800d742:	d00b      	beq.n	800d75c <__pow5mult+0xa0>
 800d744:	6820      	ldr	r0, [r4, #0]
 800d746:	b938      	cbnz	r0, 800d758 <__pow5mult+0x9c>
 800d748:	4622      	mov	r2, r4
 800d74a:	4621      	mov	r1, r4
 800d74c:	4638      	mov	r0, r7
 800d74e:	f7ff ff13 	bl	800d578 <__multiply>
 800d752:	6020      	str	r0, [r4, #0]
 800d754:	f8c0 9000 	str.w	r9, [r0]
 800d758:	4604      	mov	r4, r0
 800d75a:	e7e4      	b.n	800d726 <__pow5mult+0x6a>
 800d75c:	4630      	mov	r0, r6
 800d75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d762:	bf00      	nop
 800d764:	08011484 	.word	0x08011484
 800d768:	0801128a 	.word	0x0801128a
 800d76c:	080113ad 	.word	0x080113ad

0800d770 <__lshift>:
 800d770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d774:	460c      	mov	r4, r1
 800d776:	6849      	ldr	r1, [r1, #4]
 800d778:	6923      	ldr	r3, [r4, #16]
 800d77a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d77e:	68a3      	ldr	r3, [r4, #8]
 800d780:	4607      	mov	r7, r0
 800d782:	4691      	mov	r9, r2
 800d784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d788:	f108 0601 	add.w	r6, r8, #1
 800d78c:	42b3      	cmp	r3, r6
 800d78e:	db0b      	blt.n	800d7a8 <__lshift+0x38>
 800d790:	4638      	mov	r0, r7
 800d792:	f7ff fd9d 	bl	800d2d0 <_Balloc>
 800d796:	4605      	mov	r5, r0
 800d798:	b948      	cbnz	r0, 800d7ae <__lshift+0x3e>
 800d79a:	4602      	mov	r2, r0
 800d79c:	4b28      	ldr	r3, [pc, #160]	@ (800d840 <__lshift+0xd0>)
 800d79e:	4829      	ldr	r0, [pc, #164]	@ (800d844 <__lshift+0xd4>)
 800d7a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d7a4:	f7fe fe1c 	bl	800c3e0 <__assert_func>
 800d7a8:	3101      	adds	r1, #1
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	e7ee      	b.n	800d78c <__lshift+0x1c>
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f100 0114 	add.w	r1, r0, #20
 800d7b4:	f100 0210 	add.w	r2, r0, #16
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	4553      	cmp	r3, sl
 800d7bc:	db33      	blt.n	800d826 <__lshift+0xb6>
 800d7be:	6920      	ldr	r0, [r4, #16]
 800d7c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7c4:	f104 0314 	add.w	r3, r4, #20
 800d7c8:	f019 091f 	ands.w	r9, r9, #31
 800d7cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d7d4:	d02b      	beq.n	800d82e <__lshift+0xbe>
 800d7d6:	f1c9 0e20 	rsb	lr, r9, #32
 800d7da:	468a      	mov	sl, r1
 800d7dc:	2200      	movs	r2, #0
 800d7de:	6818      	ldr	r0, [r3, #0]
 800d7e0:	fa00 f009 	lsl.w	r0, r0, r9
 800d7e4:	4310      	orrs	r0, r2
 800d7e6:	f84a 0b04 	str.w	r0, [sl], #4
 800d7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ee:	459c      	cmp	ip, r3
 800d7f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7f4:	d8f3      	bhi.n	800d7de <__lshift+0x6e>
 800d7f6:	ebac 0304 	sub.w	r3, ip, r4
 800d7fa:	3b15      	subs	r3, #21
 800d7fc:	f023 0303 	bic.w	r3, r3, #3
 800d800:	3304      	adds	r3, #4
 800d802:	f104 0015 	add.w	r0, r4, #21
 800d806:	4560      	cmp	r0, ip
 800d808:	bf88      	it	hi
 800d80a:	2304      	movhi	r3, #4
 800d80c:	50ca      	str	r2, [r1, r3]
 800d80e:	b10a      	cbz	r2, 800d814 <__lshift+0xa4>
 800d810:	f108 0602 	add.w	r6, r8, #2
 800d814:	3e01      	subs	r6, #1
 800d816:	4638      	mov	r0, r7
 800d818:	612e      	str	r6, [r5, #16]
 800d81a:	4621      	mov	r1, r4
 800d81c:	f7ff fd98 	bl	800d350 <_Bfree>
 800d820:	4628      	mov	r0, r5
 800d822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d826:	f842 0f04 	str.w	r0, [r2, #4]!
 800d82a:	3301      	adds	r3, #1
 800d82c:	e7c5      	b.n	800d7ba <__lshift+0x4a>
 800d82e:	3904      	subs	r1, #4
 800d830:	f853 2b04 	ldr.w	r2, [r3], #4
 800d834:	f841 2f04 	str.w	r2, [r1, #4]!
 800d838:	459c      	cmp	ip, r3
 800d83a:	d8f9      	bhi.n	800d830 <__lshift+0xc0>
 800d83c:	e7ea      	b.n	800d814 <__lshift+0xa4>
 800d83e:	bf00      	nop
 800d840:	0801139c 	.word	0x0801139c
 800d844:	080113ad 	.word	0x080113ad

0800d848 <__mcmp>:
 800d848:	690a      	ldr	r2, [r1, #16]
 800d84a:	4603      	mov	r3, r0
 800d84c:	6900      	ldr	r0, [r0, #16]
 800d84e:	1a80      	subs	r0, r0, r2
 800d850:	b530      	push	{r4, r5, lr}
 800d852:	d10e      	bne.n	800d872 <__mcmp+0x2a>
 800d854:	3314      	adds	r3, #20
 800d856:	3114      	adds	r1, #20
 800d858:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d85c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d860:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d864:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d868:	4295      	cmp	r5, r2
 800d86a:	d003      	beq.n	800d874 <__mcmp+0x2c>
 800d86c:	d205      	bcs.n	800d87a <__mcmp+0x32>
 800d86e:	f04f 30ff 	mov.w	r0, #4294967295
 800d872:	bd30      	pop	{r4, r5, pc}
 800d874:	42a3      	cmp	r3, r4
 800d876:	d3f3      	bcc.n	800d860 <__mcmp+0x18>
 800d878:	e7fb      	b.n	800d872 <__mcmp+0x2a>
 800d87a:	2001      	movs	r0, #1
 800d87c:	e7f9      	b.n	800d872 <__mcmp+0x2a>
	...

0800d880 <__mdiff>:
 800d880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	4689      	mov	r9, r1
 800d886:	4606      	mov	r6, r0
 800d888:	4611      	mov	r1, r2
 800d88a:	4648      	mov	r0, r9
 800d88c:	4614      	mov	r4, r2
 800d88e:	f7ff ffdb 	bl	800d848 <__mcmp>
 800d892:	1e05      	subs	r5, r0, #0
 800d894:	d112      	bne.n	800d8bc <__mdiff+0x3c>
 800d896:	4629      	mov	r1, r5
 800d898:	4630      	mov	r0, r6
 800d89a:	f7ff fd19 	bl	800d2d0 <_Balloc>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	b928      	cbnz	r0, 800d8ae <__mdiff+0x2e>
 800d8a2:	4b3f      	ldr	r3, [pc, #252]	@ (800d9a0 <__mdiff+0x120>)
 800d8a4:	f240 2137 	movw	r1, #567	@ 0x237
 800d8a8:	483e      	ldr	r0, [pc, #248]	@ (800d9a4 <__mdiff+0x124>)
 800d8aa:	f7fe fd99 	bl	800c3e0 <__assert_func>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	b003      	add	sp, #12
 800d8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8bc:	bfbc      	itt	lt
 800d8be:	464b      	movlt	r3, r9
 800d8c0:	46a1      	movlt	r9, r4
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d8c8:	bfba      	itte	lt
 800d8ca:	461c      	movlt	r4, r3
 800d8cc:	2501      	movlt	r5, #1
 800d8ce:	2500      	movge	r5, #0
 800d8d0:	f7ff fcfe 	bl	800d2d0 <_Balloc>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	b918      	cbnz	r0, 800d8e0 <__mdiff+0x60>
 800d8d8:	4b31      	ldr	r3, [pc, #196]	@ (800d9a0 <__mdiff+0x120>)
 800d8da:	f240 2145 	movw	r1, #581	@ 0x245
 800d8de:	e7e3      	b.n	800d8a8 <__mdiff+0x28>
 800d8e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d8e4:	6926      	ldr	r6, [r4, #16]
 800d8e6:	60c5      	str	r5, [r0, #12]
 800d8e8:	f109 0310 	add.w	r3, r9, #16
 800d8ec:	f109 0514 	add.w	r5, r9, #20
 800d8f0:	f104 0e14 	add.w	lr, r4, #20
 800d8f4:	f100 0b14 	add.w	fp, r0, #20
 800d8f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d8fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d900:	9301      	str	r3, [sp, #4]
 800d902:	46d9      	mov	r9, fp
 800d904:	f04f 0c00 	mov.w	ip, #0
 800d908:	9b01      	ldr	r3, [sp, #4]
 800d90a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d90e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d912:	9301      	str	r3, [sp, #4]
 800d914:	fa1f f38a 	uxth.w	r3, sl
 800d918:	4619      	mov	r1, r3
 800d91a:	b283      	uxth	r3, r0
 800d91c:	1acb      	subs	r3, r1, r3
 800d91e:	0c00      	lsrs	r0, r0, #16
 800d920:	4463      	add	r3, ip
 800d922:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d926:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d930:	4576      	cmp	r6, lr
 800d932:	f849 3b04 	str.w	r3, [r9], #4
 800d936:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d93a:	d8e5      	bhi.n	800d908 <__mdiff+0x88>
 800d93c:	1b33      	subs	r3, r6, r4
 800d93e:	3b15      	subs	r3, #21
 800d940:	f023 0303 	bic.w	r3, r3, #3
 800d944:	3415      	adds	r4, #21
 800d946:	3304      	adds	r3, #4
 800d948:	42a6      	cmp	r6, r4
 800d94a:	bf38      	it	cc
 800d94c:	2304      	movcc	r3, #4
 800d94e:	441d      	add	r5, r3
 800d950:	445b      	add	r3, fp
 800d952:	461e      	mov	r6, r3
 800d954:	462c      	mov	r4, r5
 800d956:	4544      	cmp	r4, r8
 800d958:	d30e      	bcc.n	800d978 <__mdiff+0xf8>
 800d95a:	f108 0103 	add.w	r1, r8, #3
 800d95e:	1b49      	subs	r1, r1, r5
 800d960:	f021 0103 	bic.w	r1, r1, #3
 800d964:	3d03      	subs	r5, #3
 800d966:	45a8      	cmp	r8, r5
 800d968:	bf38      	it	cc
 800d96a:	2100      	movcc	r1, #0
 800d96c:	440b      	add	r3, r1
 800d96e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d972:	b191      	cbz	r1, 800d99a <__mdiff+0x11a>
 800d974:	6117      	str	r7, [r2, #16]
 800d976:	e79d      	b.n	800d8b4 <__mdiff+0x34>
 800d978:	f854 1b04 	ldr.w	r1, [r4], #4
 800d97c:	46e6      	mov	lr, ip
 800d97e:	0c08      	lsrs	r0, r1, #16
 800d980:	fa1c fc81 	uxtah	ip, ip, r1
 800d984:	4471      	add	r1, lr
 800d986:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d98a:	b289      	uxth	r1, r1
 800d98c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d990:	f846 1b04 	str.w	r1, [r6], #4
 800d994:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d998:	e7dd      	b.n	800d956 <__mdiff+0xd6>
 800d99a:	3f01      	subs	r7, #1
 800d99c:	e7e7      	b.n	800d96e <__mdiff+0xee>
 800d99e:	bf00      	nop
 800d9a0:	0801139c 	.word	0x0801139c
 800d9a4:	080113ad 	.word	0x080113ad

0800d9a8 <__ulp>:
 800d9a8:	b082      	sub	sp, #8
 800d9aa:	ed8d 0b00 	vstr	d0, [sp]
 800d9ae:	9a01      	ldr	r2, [sp, #4]
 800d9b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d9f0 <__ulp+0x48>)
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	dc08      	bgt.n	800d9ce <__ulp+0x26>
 800d9bc:	425b      	negs	r3, r3
 800d9be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d9c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d9c6:	da04      	bge.n	800d9d2 <__ulp+0x2a>
 800d9c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d9cc:	4113      	asrs	r3, r2
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	e008      	b.n	800d9e4 <__ulp+0x3c>
 800d9d2:	f1a2 0314 	sub.w	r3, r2, #20
 800d9d6:	2b1e      	cmp	r3, #30
 800d9d8:	bfda      	itte	le
 800d9da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d9de:	40da      	lsrle	r2, r3
 800d9e0:	2201      	movgt	r2, #1
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4610      	mov	r0, r2
 800d9e8:	ec41 0b10 	vmov	d0, r0, r1
 800d9ec:	b002      	add	sp, #8
 800d9ee:	4770      	bx	lr
 800d9f0:	7ff00000 	.word	0x7ff00000

0800d9f4 <__b2d>:
 800d9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f8:	6906      	ldr	r6, [r0, #16]
 800d9fa:	f100 0814 	add.w	r8, r0, #20
 800d9fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800da02:	1f37      	subs	r7, r6, #4
 800da04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800da08:	4610      	mov	r0, r2
 800da0a:	f7ff fd53 	bl	800d4b4 <__hi0bits>
 800da0e:	f1c0 0320 	rsb	r3, r0, #32
 800da12:	280a      	cmp	r0, #10
 800da14:	600b      	str	r3, [r1, #0]
 800da16:	491b      	ldr	r1, [pc, #108]	@ (800da84 <__b2d+0x90>)
 800da18:	dc15      	bgt.n	800da46 <__b2d+0x52>
 800da1a:	f1c0 0c0b 	rsb	ip, r0, #11
 800da1e:	fa22 f30c 	lsr.w	r3, r2, ip
 800da22:	45b8      	cmp	r8, r7
 800da24:	ea43 0501 	orr.w	r5, r3, r1
 800da28:	bf34      	ite	cc
 800da2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800da2e:	2300      	movcs	r3, #0
 800da30:	3015      	adds	r0, #21
 800da32:	fa02 f000 	lsl.w	r0, r2, r0
 800da36:	fa23 f30c 	lsr.w	r3, r3, ip
 800da3a:	4303      	orrs	r3, r0
 800da3c:	461c      	mov	r4, r3
 800da3e:	ec45 4b10 	vmov	d0, r4, r5
 800da42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da46:	45b8      	cmp	r8, r7
 800da48:	bf3a      	itte	cc
 800da4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800da4e:	f1a6 0708 	subcc.w	r7, r6, #8
 800da52:	2300      	movcs	r3, #0
 800da54:	380b      	subs	r0, #11
 800da56:	d012      	beq.n	800da7e <__b2d+0x8a>
 800da58:	f1c0 0120 	rsb	r1, r0, #32
 800da5c:	fa23 f401 	lsr.w	r4, r3, r1
 800da60:	4082      	lsls	r2, r0
 800da62:	4322      	orrs	r2, r4
 800da64:	4547      	cmp	r7, r8
 800da66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800da6a:	bf8c      	ite	hi
 800da6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800da70:	2200      	movls	r2, #0
 800da72:	4083      	lsls	r3, r0
 800da74:	40ca      	lsrs	r2, r1
 800da76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800da7a:	4313      	orrs	r3, r2
 800da7c:	e7de      	b.n	800da3c <__b2d+0x48>
 800da7e:	ea42 0501 	orr.w	r5, r2, r1
 800da82:	e7db      	b.n	800da3c <__b2d+0x48>
 800da84:	3ff00000 	.word	0x3ff00000

0800da88 <__d2b>:
 800da88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da8c:	460f      	mov	r7, r1
 800da8e:	2101      	movs	r1, #1
 800da90:	ec59 8b10 	vmov	r8, r9, d0
 800da94:	4616      	mov	r6, r2
 800da96:	f7ff fc1b 	bl	800d2d0 <_Balloc>
 800da9a:	4604      	mov	r4, r0
 800da9c:	b930      	cbnz	r0, 800daac <__d2b+0x24>
 800da9e:	4602      	mov	r2, r0
 800daa0:	4b23      	ldr	r3, [pc, #140]	@ (800db30 <__d2b+0xa8>)
 800daa2:	4824      	ldr	r0, [pc, #144]	@ (800db34 <__d2b+0xac>)
 800daa4:	f240 310f 	movw	r1, #783	@ 0x30f
 800daa8:	f7fe fc9a 	bl	800c3e0 <__assert_func>
 800daac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dab4:	b10d      	cbz	r5, 800daba <__d2b+0x32>
 800dab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800daba:	9301      	str	r3, [sp, #4]
 800dabc:	f1b8 0300 	subs.w	r3, r8, #0
 800dac0:	d023      	beq.n	800db0a <__d2b+0x82>
 800dac2:	4668      	mov	r0, sp
 800dac4:	9300      	str	r3, [sp, #0]
 800dac6:	f7ff fd14 	bl	800d4f2 <__lo0bits>
 800daca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dace:	b1d0      	cbz	r0, 800db06 <__d2b+0x7e>
 800dad0:	f1c0 0320 	rsb	r3, r0, #32
 800dad4:	fa02 f303 	lsl.w	r3, r2, r3
 800dad8:	430b      	orrs	r3, r1
 800dada:	40c2      	lsrs	r2, r0
 800dadc:	6163      	str	r3, [r4, #20]
 800dade:	9201      	str	r2, [sp, #4]
 800dae0:	9b01      	ldr	r3, [sp, #4]
 800dae2:	61a3      	str	r3, [r4, #24]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	bf0c      	ite	eq
 800dae8:	2201      	moveq	r2, #1
 800daea:	2202      	movne	r2, #2
 800daec:	6122      	str	r2, [r4, #16]
 800daee:	b1a5      	cbz	r5, 800db1a <__d2b+0x92>
 800daf0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800daf4:	4405      	add	r5, r0
 800daf6:	603d      	str	r5, [r7, #0]
 800daf8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dafc:	6030      	str	r0, [r6, #0]
 800dafe:	4620      	mov	r0, r4
 800db00:	b003      	add	sp, #12
 800db02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db06:	6161      	str	r1, [r4, #20]
 800db08:	e7ea      	b.n	800dae0 <__d2b+0x58>
 800db0a:	a801      	add	r0, sp, #4
 800db0c:	f7ff fcf1 	bl	800d4f2 <__lo0bits>
 800db10:	9b01      	ldr	r3, [sp, #4]
 800db12:	6163      	str	r3, [r4, #20]
 800db14:	3020      	adds	r0, #32
 800db16:	2201      	movs	r2, #1
 800db18:	e7e8      	b.n	800daec <__d2b+0x64>
 800db1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800db22:	6038      	str	r0, [r7, #0]
 800db24:	6918      	ldr	r0, [r3, #16]
 800db26:	f7ff fcc5 	bl	800d4b4 <__hi0bits>
 800db2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db2e:	e7e5      	b.n	800dafc <__d2b+0x74>
 800db30:	0801139c 	.word	0x0801139c
 800db34:	080113ad 	.word	0x080113ad

0800db38 <__ratio>:
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	b085      	sub	sp, #20
 800db3e:	e9cd 1000 	strd	r1, r0, [sp]
 800db42:	a902      	add	r1, sp, #8
 800db44:	f7ff ff56 	bl	800d9f4 <__b2d>
 800db48:	9800      	ldr	r0, [sp, #0]
 800db4a:	a903      	add	r1, sp, #12
 800db4c:	ec55 4b10 	vmov	r4, r5, d0
 800db50:	f7ff ff50 	bl	800d9f4 <__b2d>
 800db54:	9b01      	ldr	r3, [sp, #4]
 800db56:	6919      	ldr	r1, [r3, #16]
 800db58:	9b00      	ldr	r3, [sp, #0]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	1ac9      	subs	r1, r1, r3
 800db5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800db62:	1a9b      	subs	r3, r3, r2
 800db64:	ec5b ab10 	vmov	sl, fp, d0
 800db68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	bfce      	itee	gt
 800db70:	462a      	movgt	r2, r5
 800db72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800db76:	465a      	movle	r2, fp
 800db78:	462f      	mov	r7, r5
 800db7a:	46d9      	mov	r9, fp
 800db7c:	bfcc      	ite	gt
 800db7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800db82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800db86:	464b      	mov	r3, r9
 800db88:	4652      	mov	r2, sl
 800db8a:	4620      	mov	r0, r4
 800db8c:	4639      	mov	r1, r7
 800db8e:	f7f2 fe7d 	bl	800088c <__aeabi_ddiv>
 800db92:	ec41 0b10 	vmov	d0, r0, r1
 800db96:	b005      	add	sp, #20
 800db98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db9c <__copybits>:
 800db9c:	3901      	subs	r1, #1
 800db9e:	b570      	push	{r4, r5, r6, lr}
 800dba0:	1149      	asrs	r1, r1, #5
 800dba2:	6914      	ldr	r4, [r2, #16]
 800dba4:	3101      	adds	r1, #1
 800dba6:	f102 0314 	add.w	r3, r2, #20
 800dbaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dbae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dbb2:	1f05      	subs	r5, r0, #4
 800dbb4:	42a3      	cmp	r3, r4
 800dbb6:	d30c      	bcc.n	800dbd2 <__copybits+0x36>
 800dbb8:	1aa3      	subs	r3, r4, r2
 800dbba:	3b11      	subs	r3, #17
 800dbbc:	f023 0303 	bic.w	r3, r3, #3
 800dbc0:	3211      	adds	r2, #17
 800dbc2:	42a2      	cmp	r2, r4
 800dbc4:	bf88      	it	hi
 800dbc6:	2300      	movhi	r3, #0
 800dbc8:	4418      	add	r0, r3
 800dbca:	2300      	movs	r3, #0
 800dbcc:	4288      	cmp	r0, r1
 800dbce:	d305      	bcc.n	800dbdc <__copybits+0x40>
 800dbd0:	bd70      	pop	{r4, r5, r6, pc}
 800dbd2:	f853 6b04 	ldr.w	r6, [r3], #4
 800dbd6:	f845 6f04 	str.w	r6, [r5, #4]!
 800dbda:	e7eb      	b.n	800dbb4 <__copybits+0x18>
 800dbdc:	f840 3b04 	str.w	r3, [r0], #4
 800dbe0:	e7f4      	b.n	800dbcc <__copybits+0x30>

0800dbe2 <__any_on>:
 800dbe2:	f100 0214 	add.w	r2, r0, #20
 800dbe6:	6900      	ldr	r0, [r0, #16]
 800dbe8:	114b      	asrs	r3, r1, #5
 800dbea:	4298      	cmp	r0, r3
 800dbec:	b510      	push	{r4, lr}
 800dbee:	db11      	blt.n	800dc14 <__any_on+0x32>
 800dbf0:	dd0a      	ble.n	800dc08 <__any_on+0x26>
 800dbf2:	f011 011f 	ands.w	r1, r1, #31
 800dbf6:	d007      	beq.n	800dc08 <__any_on+0x26>
 800dbf8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dbfc:	fa24 f001 	lsr.w	r0, r4, r1
 800dc00:	fa00 f101 	lsl.w	r1, r0, r1
 800dc04:	428c      	cmp	r4, r1
 800dc06:	d10b      	bne.n	800dc20 <__any_on+0x3e>
 800dc08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d803      	bhi.n	800dc18 <__any_on+0x36>
 800dc10:	2000      	movs	r0, #0
 800dc12:	bd10      	pop	{r4, pc}
 800dc14:	4603      	mov	r3, r0
 800dc16:	e7f7      	b.n	800dc08 <__any_on+0x26>
 800dc18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc1c:	2900      	cmp	r1, #0
 800dc1e:	d0f5      	beq.n	800dc0c <__any_on+0x2a>
 800dc20:	2001      	movs	r0, #1
 800dc22:	e7f6      	b.n	800dc12 <__any_on+0x30>

0800dc24 <sulp>:
 800dc24:	b570      	push	{r4, r5, r6, lr}
 800dc26:	4604      	mov	r4, r0
 800dc28:	460d      	mov	r5, r1
 800dc2a:	ec45 4b10 	vmov	d0, r4, r5
 800dc2e:	4616      	mov	r6, r2
 800dc30:	f7ff feba 	bl	800d9a8 <__ulp>
 800dc34:	ec51 0b10 	vmov	r0, r1, d0
 800dc38:	b17e      	cbz	r6, 800dc5a <sulp+0x36>
 800dc3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dc3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	dd09      	ble.n	800dc5a <sulp+0x36>
 800dc46:	051b      	lsls	r3, r3, #20
 800dc48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dc4c:	2400      	movs	r4, #0
 800dc4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dc52:	4622      	mov	r2, r4
 800dc54:	462b      	mov	r3, r5
 800dc56:	f7f2 fcef 	bl	8000638 <__aeabi_dmul>
 800dc5a:	ec41 0b10 	vmov	d0, r0, r1
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}

0800dc60 <_strtod_l>:
 800dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc64:	b09f      	sub	sp, #124	@ 0x7c
 800dc66:	460c      	mov	r4, r1
 800dc68:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800dc6e:	9005      	str	r0, [sp, #20]
 800dc70:	f04f 0a00 	mov.w	sl, #0
 800dc74:	f04f 0b00 	mov.w	fp, #0
 800dc78:	460a      	mov	r2, r1
 800dc7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc7c:	7811      	ldrb	r1, [r2, #0]
 800dc7e:	292b      	cmp	r1, #43	@ 0x2b
 800dc80:	d04a      	beq.n	800dd18 <_strtod_l+0xb8>
 800dc82:	d838      	bhi.n	800dcf6 <_strtod_l+0x96>
 800dc84:	290d      	cmp	r1, #13
 800dc86:	d832      	bhi.n	800dcee <_strtod_l+0x8e>
 800dc88:	2908      	cmp	r1, #8
 800dc8a:	d832      	bhi.n	800dcf2 <_strtod_l+0x92>
 800dc8c:	2900      	cmp	r1, #0
 800dc8e:	d03b      	beq.n	800dd08 <_strtod_l+0xa8>
 800dc90:	2200      	movs	r2, #0
 800dc92:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dc96:	782a      	ldrb	r2, [r5, #0]
 800dc98:	2a30      	cmp	r2, #48	@ 0x30
 800dc9a:	f040 80b2 	bne.w	800de02 <_strtod_l+0x1a2>
 800dc9e:	786a      	ldrb	r2, [r5, #1]
 800dca0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dca4:	2a58      	cmp	r2, #88	@ 0x58
 800dca6:	d16e      	bne.n	800dd86 <_strtod_l+0x126>
 800dca8:	9302      	str	r3, [sp, #8]
 800dcaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	ab1a      	add	r3, sp, #104	@ 0x68
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	4a8f      	ldr	r2, [pc, #572]	@ (800def0 <_strtod_l+0x290>)
 800dcb4:	9805      	ldr	r0, [sp, #20]
 800dcb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dcb8:	a919      	add	r1, sp, #100	@ 0x64
 800dcba:	f001 faff 	bl	800f2bc <__gethex>
 800dcbe:	f010 060f 	ands.w	r6, r0, #15
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	d005      	beq.n	800dcd2 <_strtod_l+0x72>
 800dcc6:	2e06      	cmp	r6, #6
 800dcc8:	d128      	bne.n	800dd1c <_strtod_l+0xbc>
 800dcca:	3501      	adds	r5, #1
 800dccc:	2300      	movs	r3, #0
 800dcce:	9519      	str	r5, [sp, #100]	@ 0x64
 800dcd0:	930e      	str	r3, [sp, #56]	@ 0x38
 800dcd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f040 858e 	bne.w	800e7f6 <_strtod_l+0xb96>
 800dcda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcdc:	b1cb      	cbz	r3, 800dd12 <_strtod_l+0xb2>
 800dcde:	4652      	mov	r2, sl
 800dce0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dce4:	ec43 2b10 	vmov	d0, r2, r3
 800dce8:	b01f      	add	sp, #124	@ 0x7c
 800dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcee:	2920      	cmp	r1, #32
 800dcf0:	d1ce      	bne.n	800dc90 <_strtod_l+0x30>
 800dcf2:	3201      	adds	r2, #1
 800dcf4:	e7c1      	b.n	800dc7a <_strtod_l+0x1a>
 800dcf6:	292d      	cmp	r1, #45	@ 0x2d
 800dcf8:	d1ca      	bne.n	800dc90 <_strtod_l+0x30>
 800dcfa:	2101      	movs	r1, #1
 800dcfc:	910e      	str	r1, [sp, #56]	@ 0x38
 800dcfe:	1c51      	adds	r1, r2, #1
 800dd00:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd02:	7852      	ldrb	r2, [r2, #1]
 800dd04:	2a00      	cmp	r2, #0
 800dd06:	d1c5      	bne.n	800dc94 <_strtod_l+0x34>
 800dd08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f040 8570 	bne.w	800e7f2 <_strtod_l+0xb92>
 800dd12:	4652      	mov	r2, sl
 800dd14:	465b      	mov	r3, fp
 800dd16:	e7e5      	b.n	800dce4 <_strtod_l+0x84>
 800dd18:	2100      	movs	r1, #0
 800dd1a:	e7ef      	b.n	800dcfc <_strtod_l+0x9c>
 800dd1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dd1e:	b13a      	cbz	r2, 800dd30 <_strtod_l+0xd0>
 800dd20:	2135      	movs	r1, #53	@ 0x35
 800dd22:	a81c      	add	r0, sp, #112	@ 0x70
 800dd24:	f7ff ff3a 	bl	800db9c <__copybits>
 800dd28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd2a:	9805      	ldr	r0, [sp, #20]
 800dd2c:	f7ff fb10 	bl	800d350 <_Bfree>
 800dd30:	3e01      	subs	r6, #1
 800dd32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dd34:	2e04      	cmp	r6, #4
 800dd36:	d806      	bhi.n	800dd46 <_strtod_l+0xe6>
 800dd38:	e8df f006 	tbb	[pc, r6]
 800dd3c:	201d0314 	.word	0x201d0314
 800dd40:	14          	.byte	0x14
 800dd41:	00          	.byte	0x00
 800dd42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800dd46:	05e1      	lsls	r1, r4, #23
 800dd48:	bf48      	it	mi
 800dd4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dd4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd52:	0d1b      	lsrs	r3, r3, #20
 800dd54:	051b      	lsls	r3, r3, #20
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1bb      	bne.n	800dcd2 <_strtod_l+0x72>
 800dd5a:	f7fe fb0d 	bl	800c378 <__errno>
 800dd5e:	2322      	movs	r3, #34	@ 0x22
 800dd60:	6003      	str	r3, [r0, #0]
 800dd62:	e7b6      	b.n	800dcd2 <_strtod_l+0x72>
 800dd64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dd68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dd6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dd70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dd74:	e7e7      	b.n	800dd46 <_strtod_l+0xe6>
 800dd76:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800def8 <_strtod_l+0x298>
 800dd7a:	e7e4      	b.n	800dd46 <_strtod_l+0xe6>
 800dd7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dd80:	f04f 3aff 	mov.w	sl, #4294967295
 800dd84:	e7df      	b.n	800dd46 <_strtod_l+0xe6>
 800dd86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd88:	1c5a      	adds	r2, r3, #1
 800dd8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd8c:	785b      	ldrb	r3, [r3, #1]
 800dd8e:	2b30      	cmp	r3, #48	@ 0x30
 800dd90:	d0f9      	beq.n	800dd86 <_strtod_l+0x126>
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d09d      	beq.n	800dcd2 <_strtod_l+0x72>
 800dd96:	2301      	movs	r3, #1
 800dd98:	2700      	movs	r7, #0
 800dd9a:	9308      	str	r3, [sp, #32]
 800dd9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd9e:	930c      	str	r3, [sp, #48]	@ 0x30
 800dda0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800dda2:	46b9      	mov	r9, r7
 800dda4:	220a      	movs	r2, #10
 800dda6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dda8:	7805      	ldrb	r5, [r0, #0]
 800ddaa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ddae:	b2d9      	uxtb	r1, r3
 800ddb0:	2909      	cmp	r1, #9
 800ddb2:	d928      	bls.n	800de06 <_strtod_l+0x1a6>
 800ddb4:	494f      	ldr	r1, [pc, #316]	@ (800def4 <_strtod_l+0x294>)
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f001 f9a4 	bl	800f104 <strncmp>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d032      	beq.n	800de26 <_strtod_l+0x1c6>
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	462a      	mov	r2, r5
 800ddc4:	900a      	str	r0, [sp, #40]	@ 0x28
 800ddc6:	464d      	mov	r5, r9
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2a65      	cmp	r2, #101	@ 0x65
 800ddcc:	d001      	beq.n	800ddd2 <_strtod_l+0x172>
 800ddce:	2a45      	cmp	r2, #69	@ 0x45
 800ddd0:	d114      	bne.n	800ddfc <_strtod_l+0x19c>
 800ddd2:	b91d      	cbnz	r5, 800dddc <_strtod_l+0x17c>
 800ddd4:	9a08      	ldr	r2, [sp, #32]
 800ddd6:	4302      	orrs	r2, r0
 800ddd8:	d096      	beq.n	800dd08 <_strtod_l+0xa8>
 800ddda:	2500      	movs	r5, #0
 800dddc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ddde:	1c62      	adds	r2, r4, #1
 800dde0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dde2:	7862      	ldrb	r2, [r4, #1]
 800dde4:	2a2b      	cmp	r2, #43	@ 0x2b
 800dde6:	d07a      	beq.n	800dede <_strtod_l+0x27e>
 800dde8:	2a2d      	cmp	r2, #45	@ 0x2d
 800ddea:	d07e      	beq.n	800deea <_strtod_l+0x28a>
 800ddec:	f04f 0c00 	mov.w	ip, #0
 800ddf0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ddf4:	2909      	cmp	r1, #9
 800ddf6:	f240 8085 	bls.w	800df04 <_strtod_l+0x2a4>
 800ddfa:	9419      	str	r4, [sp, #100]	@ 0x64
 800ddfc:	f04f 0800 	mov.w	r8, #0
 800de00:	e0a5      	b.n	800df4e <_strtod_l+0x2ee>
 800de02:	2300      	movs	r3, #0
 800de04:	e7c8      	b.n	800dd98 <_strtod_l+0x138>
 800de06:	f1b9 0f08 	cmp.w	r9, #8
 800de0a:	bfd8      	it	le
 800de0c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800de0e:	f100 0001 	add.w	r0, r0, #1
 800de12:	bfda      	itte	le
 800de14:	fb02 3301 	mlale	r3, r2, r1, r3
 800de18:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800de1a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800de1e:	f109 0901 	add.w	r9, r9, #1
 800de22:	9019      	str	r0, [sp, #100]	@ 0x64
 800de24:	e7bf      	b.n	800dda6 <_strtod_l+0x146>
 800de26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de28:	1c5a      	adds	r2, r3, #1
 800de2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800de2c:	785a      	ldrb	r2, [r3, #1]
 800de2e:	f1b9 0f00 	cmp.w	r9, #0
 800de32:	d03b      	beq.n	800deac <_strtod_l+0x24c>
 800de34:	900a      	str	r0, [sp, #40]	@ 0x28
 800de36:	464d      	mov	r5, r9
 800de38:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800de3c:	2b09      	cmp	r3, #9
 800de3e:	d912      	bls.n	800de66 <_strtod_l+0x206>
 800de40:	2301      	movs	r3, #1
 800de42:	e7c2      	b.n	800ddca <_strtod_l+0x16a>
 800de44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de46:	1c5a      	adds	r2, r3, #1
 800de48:	9219      	str	r2, [sp, #100]	@ 0x64
 800de4a:	785a      	ldrb	r2, [r3, #1]
 800de4c:	3001      	adds	r0, #1
 800de4e:	2a30      	cmp	r2, #48	@ 0x30
 800de50:	d0f8      	beq.n	800de44 <_strtod_l+0x1e4>
 800de52:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800de56:	2b08      	cmp	r3, #8
 800de58:	f200 84d2 	bhi.w	800e800 <_strtod_l+0xba0>
 800de5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de5e:	900a      	str	r0, [sp, #40]	@ 0x28
 800de60:	2000      	movs	r0, #0
 800de62:	930c      	str	r3, [sp, #48]	@ 0x30
 800de64:	4605      	mov	r5, r0
 800de66:	3a30      	subs	r2, #48	@ 0x30
 800de68:	f100 0301 	add.w	r3, r0, #1
 800de6c:	d018      	beq.n	800dea0 <_strtod_l+0x240>
 800de6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de70:	4419      	add	r1, r3
 800de72:	910a      	str	r1, [sp, #40]	@ 0x28
 800de74:	462e      	mov	r6, r5
 800de76:	f04f 0e0a 	mov.w	lr, #10
 800de7a:	1c71      	adds	r1, r6, #1
 800de7c:	eba1 0c05 	sub.w	ip, r1, r5
 800de80:	4563      	cmp	r3, ip
 800de82:	dc15      	bgt.n	800deb0 <_strtod_l+0x250>
 800de84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800de88:	182b      	adds	r3, r5, r0
 800de8a:	2b08      	cmp	r3, #8
 800de8c:	f105 0501 	add.w	r5, r5, #1
 800de90:	4405      	add	r5, r0
 800de92:	dc1a      	bgt.n	800deca <_strtod_l+0x26a>
 800de94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de96:	230a      	movs	r3, #10
 800de98:	fb03 2301 	mla	r3, r3, r1, r2
 800de9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de9e:	2300      	movs	r3, #0
 800dea0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dea2:	1c51      	adds	r1, r2, #1
 800dea4:	9119      	str	r1, [sp, #100]	@ 0x64
 800dea6:	7852      	ldrb	r2, [r2, #1]
 800dea8:	4618      	mov	r0, r3
 800deaa:	e7c5      	b.n	800de38 <_strtod_l+0x1d8>
 800deac:	4648      	mov	r0, r9
 800deae:	e7ce      	b.n	800de4e <_strtod_l+0x1ee>
 800deb0:	2e08      	cmp	r6, #8
 800deb2:	dc05      	bgt.n	800dec0 <_strtod_l+0x260>
 800deb4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800deb6:	fb0e f606 	mul.w	r6, lr, r6
 800deba:	960b      	str	r6, [sp, #44]	@ 0x2c
 800debc:	460e      	mov	r6, r1
 800debe:	e7dc      	b.n	800de7a <_strtod_l+0x21a>
 800dec0:	2910      	cmp	r1, #16
 800dec2:	bfd8      	it	le
 800dec4:	fb0e f707 	mulle.w	r7, lr, r7
 800dec8:	e7f8      	b.n	800debc <_strtod_l+0x25c>
 800deca:	2b0f      	cmp	r3, #15
 800decc:	bfdc      	itt	le
 800dece:	230a      	movle	r3, #10
 800ded0:	fb03 2707 	mlale	r7, r3, r7, r2
 800ded4:	e7e3      	b.n	800de9e <_strtod_l+0x23e>
 800ded6:	2300      	movs	r3, #0
 800ded8:	930a      	str	r3, [sp, #40]	@ 0x28
 800deda:	2301      	movs	r3, #1
 800dedc:	e77a      	b.n	800ddd4 <_strtod_l+0x174>
 800dede:	f04f 0c00 	mov.w	ip, #0
 800dee2:	1ca2      	adds	r2, r4, #2
 800dee4:	9219      	str	r2, [sp, #100]	@ 0x64
 800dee6:	78a2      	ldrb	r2, [r4, #2]
 800dee8:	e782      	b.n	800ddf0 <_strtod_l+0x190>
 800deea:	f04f 0c01 	mov.w	ip, #1
 800deee:	e7f8      	b.n	800dee2 <_strtod_l+0x282>
 800def0:	08011594 	.word	0x08011594
 800def4:	08011406 	.word	0x08011406
 800def8:	7ff00000 	.word	0x7ff00000
 800defc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800defe:	1c51      	adds	r1, r2, #1
 800df00:	9119      	str	r1, [sp, #100]	@ 0x64
 800df02:	7852      	ldrb	r2, [r2, #1]
 800df04:	2a30      	cmp	r2, #48	@ 0x30
 800df06:	d0f9      	beq.n	800defc <_strtod_l+0x29c>
 800df08:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800df0c:	2908      	cmp	r1, #8
 800df0e:	f63f af75 	bhi.w	800ddfc <_strtod_l+0x19c>
 800df12:	3a30      	subs	r2, #48	@ 0x30
 800df14:	9209      	str	r2, [sp, #36]	@ 0x24
 800df16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df18:	920f      	str	r2, [sp, #60]	@ 0x3c
 800df1a:	f04f 080a 	mov.w	r8, #10
 800df1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df20:	1c56      	adds	r6, r2, #1
 800df22:	9619      	str	r6, [sp, #100]	@ 0x64
 800df24:	7852      	ldrb	r2, [r2, #1]
 800df26:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800df2a:	f1be 0f09 	cmp.w	lr, #9
 800df2e:	d939      	bls.n	800dfa4 <_strtod_l+0x344>
 800df30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800df32:	1a76      	subs	r6, r6, r1
 800df34:	2e08      	cmp	r6, #8
 800df36:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800df3a:	dc03      	bgt.n	800df44 <_strtod_l+0x2e4>
 800df3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df3e:	4588      	cmp	r8, r1
 800df40:	bfa8      	it	ge
 800df42:	4688      	movge	r8, r1
 800df44:	f1bc 0f00 	cmp.w	ip, #0
 800df48:	d001      	beq.n	800df4e <_strtod_l+0x2ee>
 800df4a:	f1c8 0800 	rsb	r8, r8, #0
 800df4e:	2d00      	cmp	r5, #0
 800df50:	d14e      	bne.n	800dff0 <_strtod_l+0x390>
 800df52:	9908      	ldr	r1, [sp, #32]
 800df54:	4308      	orrs	r0, r1
 800df56:	f47f aebc 	bne.w	800dcd2 <_strtod_l+0x72>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f47f aed4 	bne.w	800dd08 <_strtod_l+0xa8>
 800df60:	2a69      	cmp	r2, #105	@ 0x69
 800df62:	d028      	beq.n	800dfb6 <_strtod_l+0x356>
 800df64:	dc25      	bgt.n	800dfb2 <_strtod_l+0x352>
 800df66:	2a49      	cmp	r2, #73	@ 0x49
 800df68:	d025      	beq.n	800dfb6 <_strtod_l+0x356>
 800df6a:	2a4e      	cmp	r2, #78	@ 0x4e
 800df6c:	f47f aecc 	bne.w	800dd08 <_strtod_l+0xa8>
 800df70:	499a      	ldr	r1, [pc, #616]	@ (800e1dc <_strtod_l+0x57c>)
 800df72:	a819      	add	r0, sp, #100	@ 0x64
 800df74:	f001 fbc4 	bl	800f700 <__match>
 800df78:	2800      	cmp	r0, #0
 800df7a:	f43f aec5 	beq.w	800dd08 <_strtod_l+0xa8>
 800df7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	2b28      	cmp	r3, #40	@ 0x28
 800df84:	d12e      	bne.n	800dfe4 <_strtod_l+0x384>
 800df86:	4996      	ldr	r1, [pc, #600]	@ (800e1e0 <_strtod_l+0x580>)
 800df88:	aa1c      	add	r2, sp, #112	@ 0x70
 800df8a:	a819      	add	r0, sp, #100	@ 0x64
 800df8c:	f001 fbcc 	bl	800f728 <__hexnan>
 800df90:	2805      	cmp	r0, #5
 800df92:	d127      	bne.n	800dfe4 <_strtod_l+0x384>
 800df94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800df96:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800df9a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800df9e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dfa2:	e696      	b.n	800dcd2 <_strtod_l+0x72>
 800dfa4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfa6:	fb08 2101 	mla	r1, r8, r1, r2
 800dfaa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dfae:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfb0:	e7b5      	b.n	800df1e <_strtod_l+0x2be>
 800dfb2:	2a6e      	cmp	r2, #110	@ 0x6e
 800dfb4:	e7da      	b.n	800df6c <_strtod_l+0x30c>
 800dfb6:	498b      	ldr	r1, [pc, #556]	@ (800e1e4 <_strtod_l+0x584>)
 800dfb8:	a819      	add	r0, sp, #100	@ 0x64
 800dfba:	f001 fba1 	bl	800f700 <__match>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	f43f aea2 	beq.w	800dd08 <_strtod_l+0xa8>
 800dfc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dfc6:	4988      	ldr	r1, [pc, #544]	@ (800e1e8 <_strtod_l+0x588>)
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	a819      	add	r0, sp, #100	@ 0x64
 800dfcc:	9319      	str	r3, [sp, #100]	@ 0x64
 800dfce:	f001 fb97 	bl	800f700 <__match>
 800dfd2:	b910      	cbnz	r0, 800dfda <_strtod_l+0x37a>
 800dfd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	9319      	str	r3, [sp, #100]	@ 0x64
 800dfda:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e1f8 <_strtod_l+0x598>
 800dfde:	f04f 0a00 	mov.w	sl, #0
 800dfe2:	e676      	b.n	800dcd2 <_strtod_l+0x72>
 800dfe4:	4881      	ldr	r0, [pc, #516]	@ (800e1ec <_strtod_l+0x58c>)
 800dfe6:	f001 f8df 	bl	800f1a8 <nan>
 800dfea:	ec5b ab10 	vmov	sl, fp, d0
 800dfee:	e670      	b.n	800dcd2 <_strtod_l+0x72>
 800dff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dff2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dff4:	eba8 0303 	sub.w	r3, r8, r3
 800dff8:	f1b9 0f00 	cmp.w	r9, #0
 800dffc:	bf08      	it	eq
 800dffe:	46a9      	moveq	r9, r5
 800e000:	2d10      	cmp	r5, #16
 800e002:	9309      	str	r3, [sp, #36]	@ 0x24
 800e004:	462c      	mov	r4, r5
 800e006:	bfa8      	it	ge
 800e008:	2410      	movge	r4, #16
 800e00a:	f7f2 fa9b 	bl	8000544 <__aeabi_ui2d>
 800e00e:	2d09      	cmp	r5, #9
 800e010:	4682      	mov	sl, r0
 800e012:	468b      	mov	fp, r1
 800e014:	dc13      	bgt.n	800e03e <_strtod_l+0x3de>
 800e016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f43f ae5a 	beq.w	800dcd2 <_strtod_l+0x72>
 800e01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e020:	dd78      	ble.n	800e114 <_strtod_l+0x4b4>
 800e022:	2b16      	cmp	r3, #22
 800e024:	dc5f      	bgt.n	800e0e6 <_strtod_l+0x486>
 800e026:	4972      	ldr	r1, [pc, #456]	@ (800e1f0 <_strtod_l+0x590>)
 800e028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e02c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e030:	4652      	mov	r2, sl
 800e032:	465b      	mov	r3, fp
 800e034:	f7f2 fb00 	bl	8000638 <__aeabi_dmul>
 800e038:	4682      	mov	sl, r0
 800e03a:	468b      	mov	fp, r1
 800e03c:	e649      	b.n	800dcd2 <_strtod_l+0x72>
 800e03e:	4b6c      	ldr	r3, [pc, #432]	@ (800e1f0 <_strtod_l+0x590>)
 800e040:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e044:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e048:	f7f2 faf6 	bl	8000638 <__aeabi_dmul>
 800e04c:	4682      	mov	sl, r0
 800e04e:	4638      	mov	r0, r7
 800e050:	468b      	mov	fp, r1
 800e052:	f7f2 fa77 	bl	8000544 <__aeabi_ui2d>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	4650      	mov	r0, sl
 800e05c:	4659      	mov	r1, fp
 800e05e:	f7f2 f935 	bl	80002cc <__adddf3>
 800e062:	2d0f      	cmp	r5, #15
 800e064:	4682      	mov	sl, r0
 800e066:	468b      	mov	fp, r1
 800e068:	ddd5      	ble.n	800e016 <_strtod_l+0x3b6>
 800e06a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e06c:	1b2c      	subs	r4, r5, r4
 800e06e:	441c      	add	r4, r3
 800e070:	2c00      	cmp	r4, #0
 800e072:	f340 8093 	ble.w	800e19c <_strtod_l+0x53c>
 800e076:	f014 030f 	ands.w	r3, r4, #15
 800e07a:	d00a      	beq.n	800e092 <_strtod_l+0x432>
 800e07c:	495c      	ldr	r1, [pc, #368]	@ (800e1f0 <_strtod_l+0x590>)
 800e07e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e082:	4652      	mov	r2, sl
 800e084:	465b      	mov	r3, fp
 800e086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e08a:	f7f2 fad5 	bl	8000638 <__aeabi_dmul>
 800e08e:	4682      	mov	sl, r0
 800e090:	468b      	mov	fp, r1
 800e092:	f034 040f 	bics.w	r4, r4, #15
 800e096:	d073      	beq.n	800e180 <_strtod_l+0x520>
 800e098:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e09c:	dd49      	ble.n	800e132 <_strtod_l+0x4d2>
 800e09e:	2400      	movs	r4, #0
 800e0a0:	46a0      	mov	r8, r4
 800e0a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e0a4:	46a1      	mov	r9, r4
 800e0a6:	9a05      	ldr	r2, [sp, #20]
 800e0a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e1f8 <_strtod_l+0x598>
 800e0ac:	2322      	movs	r3, #34	@ 0x22
 800e0ae:	6013      	str	r3, [r2, #0]
 800e0b0:	f04f 0a00 	mov.w	sl, #0
 800e0b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f43f ae0b 	beq.w	800dcd2 <_strtod_l+0x72>
 800e0bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0be:	9805      	ldr	r0, [sp, #20]
 800e0c0:	f7ff f946 	bl	800d350 <_Bfree>
 800e0c4:	9805      	ldr	r0, [sp, #20]
 800e0c6:	4649      	mov	r1, r9
 800e0c8:	f7ff f942 	bl	800d350 <_Bfree>
 800e0cc:	9805      	ldr	r0, [sp, #20]
 800e0ce:	4641      	mov	r1, r8
 800e0d0:	f7ff f93e 	bl	800d350 <_Bfree>
 800e0d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e0d6:	9805      	ldr	r0, [sp, #20]
 800e0d8:	f7ff f93a 	bl	800d350 <_Bfree>
 800e0dc:	9805      	ldr	r0, [sp, #20]
 800e0de:	4621      	mov	r1, r4
 800e0e0:	f7ff f936 	bl	800d350 <_Bfree>
 800e0e4:	e5f5      	b.n	800dcd2 <_strtod_l+0x72>
 800e0e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	dbbc      	blt.n	800e06a <_strtod_l+0x40a>
 800e0f0:	4c3f      	ldr	r4, [pc, #252]	@ (800e1f0 <_strtod_l+0x590>)
 800e0f2:	f1c5 050f 	rsb	r5, r5, #15
 800e0f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e0fa:	4652      	mov	r2, sl
 800e0fc:	465b      	mov	r3, fp
 800e0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e102:	f7f2 fa99 	bl	8000638 <__aeabi_dmul>
 800e106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e108:	1b5d      	subs	r5, r3, r5
 800e10a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e10e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e112:	e78f      	b.n	800e034 <_strtod_l+0x3d4>
 800e114:	3316      	adds	r3, #22
 800e116:	dba8      	blt.n	800e06a <_strtod_l+0x40a>
 800e118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e11a:	eba3 0808 	sub.w	r8, r3, r8
 800e11e:	4b34      	ldr	r3, [pc, #208]	@ (800e1f0 <_strtod_l+0x590>)
 800e120:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e124:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e128:	4650      	mov	r0, sl
 800e12a:	4659      	mov	r1, fp
 800e12c:	f7f2 fbae 	bl	800088c <__aeabi_ddiv>
 800e130:	e782      	b.n	800e038 <_strtod_l+0x3d8>
 800e132:	2300      	movs	r3, #0
 800e134:	4f2f      	ldr	r7, [pc, #188]	@ (800e1f4 <_strtod_l+0x594>)
 800e136:	1124      	asrs	r4, r4, #4
 800e138:	4650      	mov	r0, sl
 800e13a:	4659      	mov	r1, fp
 800e13c:	461e      	mov	r6, r3
 800e13e:	2c01      	cmp	r4, #1
 800e140:	dc21      	bgt.n	800e186 <_strtod_l+0x526>
 800e142:	b10b      	cbz	r3, 800e148 <_strtod_l+0x4e8>
 800e144:	4682      	mov	sl, r0
 800e146:	468b      	mov	fp, r1
 800e148:	492a      	ldr	r1, [pc, #168]	@ (800e1f4 <_strtod_l+0x594>)
 800e14a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e14e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e152:	4652      	mov	r2, sl
 800e154:	465b      	mov	r3, fp
 800e156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e15a:	f7f2 fa6d 	bl	8000638 <__aeabi_dmul>
 800e15e:	4b26      	ldr	r3, [pc, #152]	@ (800e1f8 <_strtod_l+0x598>)
 800e160:	460a      	mov	r2, r1
 800e162:	400b      	ands	r3, r1
 800e164:	4925      	ldr	r1, [pc, #148]	@ (800e1fc <_strtod_l+0x59c>)
 800e166:	428b      	cmp	r3, r1
 800e168:	4682      	mov	sl, r0
 800e16a:	d898      	bhi.n	800e09e <_strtod_l+0x43e>
 800e16c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e170:	428b      	cmp	r3, r1
 800e172:	bf86      	itte	hi
 800e174:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e200 <_strtod_l+0x5a0>
 800e178:	f04f 3aff 	movhi.w	sl, #4294967295
 800e17c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e180:	2300      	movs	r3, #0
 800e182:	9308      	str	r3, [sp, #32]
 800e184:	e076      	b.n	800e274 <_strtod_l+0x614>
 800e186:	07e2      	lsls	r2, r4, #31
 800e188:	d504      	bpl.n	800e194 <_strtod_l+0x534>
 800e18a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e18e:	f7f2 fa53 	bl	8000638 <__aeabi_dmul>
 800e192:	2301      	movs	r3, #1
 800e194:	3601      	adds	r6, #1
 800e196:	1064      	asrs	r4, r4, #1
 800e198:	3708      	adds	r7, #8
 800e19a:	e7d0      	b.n	800e13e <_strtod_l+0x4de>
 800e19c:	d0f0      	beq.n	800e180 <_strtod_l+0x520>
 800e19e:	4264      	negs	r4, r4
 800e1a0:	f014 020f 	ands.w	r2, r4, #15
 800e1a4:	d00a      	beq.n	800e1bc <_strtod_l+0x55c>
 800e1a6:	4b12      	ldr	r3, [pc, #72]	@ (800e1f0 <_strtod_l+0x590>)
 800e1a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	4659      	mov	r1, fp
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	f7f2 fb6a 	bl	800088c <__aeabi_ddiv>
 800e1b8:	4682      	mov	sl, r0
 800e1ba:	468b      	mov	fp, r1
 800e1bc:	1124      	asrs	r4, r4, #4
 800e1be:	d0df      	beq.n	800e180 <_strtod_l+0x520>
 800e1c0:	2c1f      	cmp	r4, #31
 800e1c2:	dd1f      	ble.n	800e204 <_strtod_l+0x5a4>
 800e1c4:	2400      	movs	r4, #0
 800e1c6:	46a0      	mov	r8, r4
 800e1c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1ca:	46a1      	mov	r9, r4
 800e1cc:	9a05      	ldr	r2, [sp, #20]
 800e1ce:	2322      	movs	r3, #34	@ 0x22
 800e1d0:	f04f 0a00 	mov.w	sl, #0
 800e1d4:	f04f 0b00 	mov.w	fp, #0
 800e1d8:	6013      	str	r3, [r2, #0]
 800e1da:	e76b      	b.n	800e0b4 <_strtod_l+0x454>
 800e1dc:	0801125e 	.word	0x0801125e
 800e1e0:	08011580 	.word	0x08011580
 800e1e4:	08011256 	.word	0x08011256
 800e1e8:	0801133a 	.word	0x0801133a
 800e1ec:	08011336 	.word	0x08011336
 800e1f0:	080114b8 	.word	0x080114b8
 800e1f4:	08011490 	.word	0x08011490
 800e1f8:	7ff00000 	.word	0x7ff00000
 800e1fc:	7ca00000 	.word	0x7ca00000
 800e200:	7fefffff 	.word	0x7fefffff
 800e204:	f014 0310 	ands.w	r3, r4, #16
 800e208:	bf18      	it	ne
 800e20a:	236a      	movne	r3, #106	@ 0x6a
 800e20c:	4ea9      	ldr	r6, [pc, #676]	@ (800e4b4 <_strtod_l+0x854>)
 800e20e:	9308      	str	r3, [sp, #32]
 800e210:	4650      	mov	r0, sl
 800e212:	4659      	mov	r1, fp
 800e214:	2300      	movs	r3, #0
 800e216:	07e7      	lsls	r7, r4, #31
 800e218:	d504      	bpl.n	800e224 <_strtod_l+0x5c4>
 800e21a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e21e:	f7f2 fa0b 	bl	8000638 <__aeabi_dmul>
 800e222:	2301      	movs	r3, #1
 800e224:	1064      	asrs	r4, r4, #1
 800e226:	f106 0608 	add.w	r6, r6, #8
 800e22a:	d1f4      	bne.n	800e216 <_strtod_l+0x5b6>
 800e22c:	b10b      	cbz	r3, 800e232 <_strtod_l+0x5d2>
 800e22e:	4682      	mov	sl, r0
 800e230:	468b      	mov	fp, r1
 800e232:	9b08      	ldr	r3, [sp, #32]
 800e234:	b1b3      	cbz	r3, 800e264 <_strtod_l+0x604>
 800e236:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e23a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e23e:	2b00      	cmp	r3, #0
 800e240:	4659      	mov	r1, fp
 800e242:	dd0f      	ble.n	800e264 <_strtod_l+0x604>
 800e244:	2b1f      	cmp	r3, #31
 800e246:	dd56      	ble.n	800e2f6 <_strtod_l+0x696>
 800e248:	2b34      	cmp	r3, #52	@ 0x34
 800e24a:	bfde      	ittt	le
 800e24c:	f04f 33ff 	movle.w	r3, #4294967295
 800e250:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e254:	4093      	lslle	r3, r2
 800e256:	f04f 0a00 	mov.w	sl, #0
 800e25a:	bfcc      	ite	gt
 800e25c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e260:	ea03 0b01 	andle.w	fp, r3, r1
 800e264:	2200      	movs	r2, #0
 800e266:	2300      	movs	r3, #0
 800e268:	4650      	mov	r0, sl
 800e26a:	4659      	mov	r1, fp
 800e26c:	f7f2 fc4c 	bl	8000b08 <__aeabi_dcmpeq>
 800e270:	2800      	cmp	r0, #0
 800e272:	d1a7      	bne.n	800e1c4 <_strtod_l+0x564>
 800e274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e27a:	9805      	ldr	r0, [sp, #20]
 800e27c:	462b      	mov	r3, r5
 800e27e:	464a      	mov	r2, r9
 800e280:	f7ff f8ce 	bl	800d420 <__s2b>
 800e284:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e286:	2800      	cmp	r0, #0
 800e288:	f43f af09 	beq.w	800e09e <_strtod_l+0x43e>
 800e28c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e28e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e290:	2a00      	cmp	r2, #0
 800e292:	eba3 0308 	sub.w	r3, r3, r8
 800e296:	bfa8      	it	ge
 800e298:	2300      	movge	r3, #0
 800e29a:	9312      	str	r3, [sp, #72]	@ 0x48
 800e29c:	2400      	movs	r4, #0
 800e29e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e2a2:	9316      	str	r3, [sp, #88]	@ 0x58
 800e2a4:	46a0      	mov	r8, r4
 800e2a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2a8:	9805      	ldr	r0, [sp, #20]
 800e2aa:	6859      	ldr	r1, [r3, #4]
 800e2ac:	f7ff f810 	bl	800d2d0 <_Balloc>
 800e2b0:	4681      	mov	r9, r0
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	f43f aef7 	beq.w	800e0a6 <_strtod_l+0x446>
 800e2b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2ba:	691a      	ldr	r2, [r3, #16]
 800e2bc:	3202      	adds	r2, #2
 800e2be:	f103 010c 	add.w	r1, r3, #12
 800e2c2:	0092      	lsls	r2, r2, #2
 800e2c4:	300c      	adds	r0, #12
 800e2c6:	f000 ff61 	bl	800f18c <memcpy>
 800e2ca:	ec4b ab10 	vmov	d0, sl, fp
 800e2ce:	9805      	ldr	r0, [sp, #20]
 800e2d0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e2d2:	a91b      	add	r1, sp, #108	@ 0x6c
 800e2d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e2d8:	f7ff fbd6 	bl	800da88 <__d2b>
 800e2dc:	901a      	str	r0, [sp, #104]	@ 0x68
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	f43f aee1 	beq.w	800e0a6 <_strtod_l+0x446>
 800e2e4:	9805      	ldr	r0, [sp, #20]
 800e2e6:	2101      	movs	r1, #1
 800e2e8:	f7ff f930 	bl	800d54c <__i2b>
 800e2ec:	4680      	mov	r8, r0
 800e2ee:	b948      	cbnz	r0, 800e304 <_strtod_l+0x6a4>
 800e2f0:	f04f 0800 	mov.w	r8, #0
 800e2f4:	e6d7      	b.n	800e0a6 <_strtod_l+0x446>
 800e2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e2fe:	ea03 0a0a 	and.w	sl, r3, sl
 800e302:	e7af      	b.n	800e264 <_strtod_l+0x604>
 800e304:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e306:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e308:	2d00      	cmp	r5, #0
 800e30a:	bfab      	itete	ge
 800e30c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e30e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e310:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e312:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e314:	bfac      	ite	ge
 800e316:	18ef      	addge	r7, r5, r3
 800e318:	1b5e      	sublt	r6, r3, r5
 800e31a:	9b08      	ldr	r3, [sp, #32]
 800e31c:	1aed      	subs	r5, r5, r3
 800e31e:	4415      	add	r5, r2
 800e320:	4b65      	ldr	r3, [pc, #404]	@ (800e4b8 <_strtod_l+0x858>)
 800e322:	3d01      	subs	r5, #1
 800e324:	429d      	cmp	r5, r3
 800e326:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e32a:	da50      	bge.n	800e3ce <_strtod_l+0x76e>
 800e32c:	1b5b      	subs	r3, r3, r5
 800e32e:	2b1f      	cmp	r3, #31
 800e330:	eba2 0203 	sub.w	r2, r2, r3
 800e334:	f04f 0101 	mov.w	r1, #1
 800e338:	dc3d      	bgt.n	800e3b6 <_strtod_l+0x756>
 800e33a:	fa01 f303 	lsl.w	r3, r1, r3
 800e33e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e340:	2300      	movs	r3, #0
 800e342:	9310      	str	r3, [sp, #64]	@ 0x40
 800e344:	18bd      	adds	r5, r7, r2
 800e346:	9b08      	ldr	r3, [sp, #32]
 800e348:	42af      	cmp	r7, r5
 800e34a:	4416      	add	r6, r2
 800e34c:	441e      	add	r6, r3
 800e34e:	463b      	mov	r3, r7
 800e350:	bfa8      	it	ge
 800e352:	462b      	movge	r3, r5
 800e354:	42b3      	cmp	r3, r6
 800e356:	bfa8      	it	ge
 800e358:	4633      	movge	r3, r6
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	bfc2      	ittt	gt
 800e35e:	1aed      	subgt	r5, r5, r3
 800e360:	1af6      	subgt	r6, r6, r3
 800e362:	1aff      	subgt	r7, r7, r3
 800e364:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e366:	2b00      	cmp	r3, #0
 800e368:	dd16      	ble.n	800e398 <_strtod_l+0x738>
 800e36a:	4641      	mov	r1, r8
 800e36c:	9805      	ldr	r0, [sp, #20]
 800e36e:	461a      	mov	r2, r3
 800e370:	f7ff f9a4 	bl	800d6bc <__pow5mult>
 800e374:	4680      	mov	r8, r0
 800e376:	2800      	cmp	r0, #0
 800e378:	d0ba      	beq.n	800e2f0 <_strtod_l+0x690>
 800e37a:	4601      	mov	r1, r0
 800e37c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e37e:	9805      	ldr	r0, [sp, #20]
 800e380:	f7ff f8fa 	bl	800d578 <__multiply>
 800e384:	900a      	str	r0, [sp, #40]	@ 0x28
 800e386:	2800      	cmp	r0, #0
 800e388:	f43f ae8d 	beq.w	800e0a6 <_strtod_l+0x446>
 800e38c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e38e:	9805      	ldr	r0, [sp, #20]
 800e390:	f7fe ffde 	bl	800d350 <_Bfree>
 800e394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e396:	931a      	str	r3, [sp, #104]	@ 0x68
 800e398:	2d00      	cmp	r5, #0
 800e39a:	dc1d      	bgt.n	800e3d8 <_strtod_l+0x778>
 800e39c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	dd23      	ble.n	800e3ea <_strtod_l+0x78a>
 800e3a2:	4649      	mov	r1, r9
 800e3a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e3a6:	9805      	ldr	r0, [sp, #20]
 800e3a8:	f7ff f988 	bl	800d6bc <__pow5mult>
 800e3ac:	4681      	mov	r9, r0
 800e3ae:	b9e0      	cbnz	r0, 800e3ea <_strtod_l+0x78a>
 800e3b0:	f04f 0900 	mov.w	r9, #0
 800e3b4:	e677      	b.n	800e0a6 <_strtod_l+0x446>
 800e3b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e3ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e3be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e3c2:	35e2      	adds	r5, #226	@ 0xe2
 800e3c4:	fa01 f305 	lsl.w	r3, r1, r5
 800e3c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e3cc:	e7ba      	b.n	800e344 <_strtod_l+0x6e4>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e3d6:	e7b5      	b.n	800e344 <_strtod_l+0x6e4>
 800e3d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e3da:	9805      	ldr	r0, [sp, #20]
 800e3dc:	462a      	mov	r2, r5
 800e3de:	f7ff f9c7 	bl	800d770 <__lshift>
 800e3e2:	901a      	str	r0, [sp, #104]	@ 0x68
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d1d9      	bne.n	800e39c <_strtod_l+0x73c>
 800e3e8:	e65d      	b.n	800e0a6 <_strtod_l+0x446>
 800e3ea:	2e00      	cmp	r6, #0
 800e3ec:	dd07      	ble.n	800e3fe <_strtod_l+0x79e>
 800e3ee:	4649      	mov	r1, r9
 800e3f0:	9805      	ldr	r0, [sp, #20]
 800e3f2:	4632      	mov	r2, r6
 800e3f4:	f7ff f9bc 	bl	800d770 <__lshift>
 800e3f8:	4681      	mov	r9, r0
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d0d8      	beq.n	800e3b0 <_strtod_l+0x750>
 800e3fe:	2f00      	cmp	r7, #0
 800e400:	dd08      	ble.n	800e414 <_strtod_l+0x7b4>
 800e402:	4641      	mov	r1, r8
 800e404:	9805      	ldr	r0, [sp, #20]
 800e406:	463a      	mov	r2, r7
 800e408:	f7ff f9b2 	bl	800d770 <__lshift>
 800e40c:	4680      	mov	r8, r0
 800e40e:	2800      	cmp	r0, #0
 800e410:	f43f ae49 	beq.w	800e0a6 <_strtod_l+0x446>
 800e414:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e416:	9805      	ldr	r0, [sp, #20]
 800e418:	464a      	mov	r2, r9
 800e41a:	f7ff fa31 	bl	800d880 <__mdiff>
 800e41e:	4604      	mov	r4, r0
 800e420:	2800      	cmp	r0, #0
 800e422:	f43f ae40 	beq.w	800e0a6 <_strtod_l+0x446>
 800e426:	68c3      	ldr	r3, [r0, #12]
 800e428:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e42a:	2300      	movs	r3, #0
 800e42c:	60c3      	str	r3, [r0, #12]
 800e42e:	4641      	mov	r1, r8
 800e430:	f7ff fa0a 	bl	800d848 <__mcmp>
 800e434:	2800      	cmp	r0, #0
 800e436:	da45      	bge.n	800e4c4 <_strtod_l+0x864>
 800e438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e43a:	ea53 030a 	orrs.w	r3, r3, sl
 800e43e:	d16b      	bne.n	800e518 <_strtod_l+0x8b8>
 800e440:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e444:	2b00      	cmp	r3, #0
 800e446:	d167      	bne.n	800e518 <_strtod_l+0x8b8>
 800e448:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e44c:	0d1b      	lsrs	r3, r3, #20
 800e44e:	051b      	lsls	r3, r3, #20
 800e450:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e454:	d960      	bls.n	800e518 <_strtod_l+0x8b8>
 800e456:	6963      	ldr	r3, [r4, #20]
 800e458:	b913      	cbnz	r3, 800e460 <_strtod_l+0x800>
 800e45a:	6923      	ldr	r3, [r4, #16]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	dd5b      	ble.n	800e518 <_strtod_l+0x8b8>
 800e460:	4621      	mov	r1, r4
 800e462:	2201      	movs	r2, #1
 800e464:	9805      	ldr	r0, [sp, #20]
 800e466:	f7ff f983 	bl	800d770 <__lshift>
 800e46a:	4641      	mov	r1, r8
 800e46c:	4604      	mov	r4, r0
 800e46e:	f7ff f9eb 	bl	800d848 <__mcmp>
 800e472:	2800      	cmp	r0, #0
 800e474:	dd50      	ble.n	800e518 <_strtod_l+0x8b8>
 800e476:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e47a:	9a08      	ldr	r2, [sp, #32]
 800e47c:	0d1b      	lsrs	r3, r3, #20
 800e47e:	051b      	lsls	r3, r3, #20
 800e480:	2a00      	cmp	r2, #0
 800e482:	d06a      	beq.n	800e55a <_strtod_l+0x8fa>
 800e484:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e488:	d867      	bhi.n	800e55a <_strtod_l+0x8fa>
 800e48a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e48e:	f67f ae9d 	bls.w	800e1cc <_strtod_l+0x56c>
 800e492:	4b0a      	ldr	r3, [pc, #40]	@ (800e4bc <_strtod_l+0x85c>)
 800e494:	4650      	mov	r0, sl
 800e496:	4659      	mov	r1, fp
 800e498:	2200      	movs	r2, #0
 800e49a:	f7f2 f8cd 	bl	8000638 <__aeabi_dmul>
 800e49e:	4b08      	ldr	r3, [pc, #32]	@ (800e4c0 <_strtod_l+0x860>)
 800e4a0:	400b      	ands	r3, r1
 800e4a2:	4682      	mov	sl, r0
 800e4a4:	468b      	mov	fp, r1
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	f47f ae08 	bne.w	800e0bc <_strtod_l+0x45c>
 800e4ac:	9a05      	ldr	r2, [sp, #20]
 800e4ae:	2322      	movs	r3, #34	@ 0x22
 800e4b0:	6013      	str	r3, [r2, #0]
 800e4b2:	e603      	b.n	800e0bc <_strtod_l+0x45c>
 800e4b4:	080115a8 	.word	0x080115a8
 800e4b8:	fffffc02 	.word	0xfffffc02
 800e4bc:	39500000 	.word	0x39500000
 800e4c0:	7ff00000 	.word	0x7ff00000
 800e4c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e4c8:	d165      	bne.n	800e596 <_strtod_l+0x936>
 800e4ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e4cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4d0:	b35a      	cbz	r2, 800e52a <_strtod_l+0x8ca>
 800e4d2:	4a9f      	ldr	r2, [pc, #636]	@ (800e750 <_strtod_l+0xaf0>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d12b      	bne.n	800e530 <_strtod_l+0x8d0>
 800e4d8:	9b08      	ldr	r3, [sp, #32]
 800e4da:	4651      	mov	r1, sl
 800e4dc:	b303      	cbz	r3, 800e520 <_strtod_l+0x8c0>
 800e4de:	4b9d      	ldr	r3, [pc, #628]	@ (800e754 <_strtod_l+0xaf4>)
 800e4e0:	465a      	mov	r2, fp
 800e4e2:	4013      	ands	r3, r2
 800e4e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ec:	d81b      	bhi.n	800e526 <_strtod_l+0x8c6>
 800e4ee:	0d1b      	lsrs	r3, r3, #20
 800e4f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e4f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f8:	4299      	cmp	r1, r3
 800e4fa:	d119      	bne.n	800e530 <_strtod_l+0x8d0>
 800e4fc:	4b96      	ldr	r3, [pc, #600]	@ (800e758 <_strtod_l+0xaf8>)
 800e4fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e500:	429a      	cmp	r2, r3
 800e502:	d102      	bne.n	800e50a <_strtod_l+0x8aa>
 800e504:	3101      	adds	r1, #1
 800e506:	f43f adce 	beq.w	800e0a6 <_strtod_l+0x446>
 800e50a:	4b92      	ldr	r3, [pc, #584]	@ (800e754 <_strtod_l+0xaf4>)
 800e50c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e50e:	401a      	ands	r2, r3
 800e510:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e514:	f04f 0a00 	mov.w	sl, #0
 800e518:	9b08      	ldr	r3, [sp, #32]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1b9      	bne.n	800e492 <_strtod_l+0x832>
 800e51e:	e5cd      	b.n	800e0bc <_strtod_l+0x45c>
 800e520:	f04f 33ff 	mov.w	r3, #4294967295
 800e524:	e7e8      	b.n	800e4f8 <_strtod_l+0x898>
 800e526:	4613      	mov	r3, r2
 800e528:	e7e6      	b.n	800e4f8 <_strtod_l+0x898>
 800e52a:	ea53 030a 	orrs.w	r3, r3, sl
 800e52e:	d0a2      	beq.n	800e476 <_strtod_l+0x816>
 800e530:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e532:	b1db      	cbz	r3, 800e56c <_strtod_l+0x90c>
 800e534:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e536:	4213      	tst	r3, r2
 800e538:	d0ee      	beq.n	800e518 <_strtod_l+0x8b8>
 800e53a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e53c:	9a08      	ldr	r2, [sp, #32]
 800e53e:	4650      	mov	r0, sl
 800e540:	4659      	mov	r1, fp
 800e542:	b1bb      	cbz	r3, 800e574 <_strtod_l+0x914>
 800e544:	f7ff fb6e 	bl	800dc24 <sulp>
 800e548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e54c:	ec53 2b10 	vmov	r2, r3, d0
 800e550:	f7f1 febc 	bl	80002cc <__adddf3>
 800e554:	4682      	mov	sl, r0
 800e556:	468b      	mov	fp, r1
 800e558:	e7de      	b.n	800e518 <_strtod_l+0x8b8>
 800e55a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e55e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e562:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e566:	f04f 3aff 	mov.w	sl, #4294967295
 800e56a:	e7d5      	b.n	800e518 <_strtod_l+0x8b8>
 800e56c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e56e:	ea13 0f0a 	tst.w	r3, sl
 800e572:	e7e1      	b.n	800e538 <_strtod_l+0x8d8>
 800e574:	f7ff fb56 	bl	800dc24 <sulp>
 800e578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e57c:	ec53 2b10 	vmov	r2, r3, d0
 800e580:	f7f1 fea2 	bl	80002c8 <__aeabi_dsub>
 800e584:	2200      	movs	r2, #0
 800e586:	2300      	movs	r3, #0
 800e588:	4682      	mov	sl, r0
 800e58a:	468b      	mov	fp, r1
 800e58c:	f7f2 fabc 	bl	8000b08 <__aeabi_dcmpeq>
 800e590:	2800      	cmp	r0, #0
 800e592:	d0c1      	beq.n	800e518 <_strtod_l+0x8b8>
 800e594:	e61a      	b.n	800e1cc <_strtod_l+0x56c>
 800e596:	4641      	mov	r1, r8
 800e598:	4620      	mov	r0, r4
 800e59a:	f7ff facd 	bl	800db38 <__ratio>
 800e59e:	ec57 6b10 	vmov	r6, r7, d0
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	4639      	mov	r1, r7
 800e5ac:	f7f2 fac0 	bl	8000b30 <__aeabi_dcmple>
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d06f      	beq.n	800e694 <_strtod_l+0xa34>
 800e5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d17a      	bne.n	800e6b0 <_strtod_l+0xa50>
 800e5ba:	f1ba 0f00 	cmp.w	sl, #0
 800e5be:	d158      	bne.n	800e672 <_strtod_l+0xa12>
 800e5c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d15a      	bne.n	800e680 <_strtod_l+0xa20>
 800e5ca:	4b64      	ldr	r3, [pc, #400]	@ (800e75c <_strtod_l+0xafc>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	4639      	mov	r1, r7
 800e5d2:	f7f2 faa3 	bl	8000b1c <__aeabi_dcmplt>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	d159      	bne.n	800e68e <_strtod_l+0xa2e>
 800e5da:	4630      	mov	r0, r6
 800e5dc:	4639      	mov	r1, r7
 800e5de:	4b60      	ldr	r3, [pc, #384]	@ (800e760 <_strtod_l+0xb00>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f7f2 f829 	bl	8000638 <__aeabi_dmul>
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	460f      	mov	r7, r1
 800e5ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e5ee:	9606      	str	r6, [sp, #24]
 800e5f0:	9307      	str	r3, [sp, #28]
 800e5f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5f6:	4d57      	ldr	r5, [pc, #348]	@ (800e754 <_strtod_l+0xaf4>)
 800e5f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5fe:	401d      	ands	r5, r3
 800e600:	4b58      	ldr	r3, [pc, #352]	@ (800e764 <_strtod_l+0xb04>)
 800e602:	429d      	cmp	r5, r3
 800e604:	f040 80b2 	bne.w	800e76c <_strtod_l+0xb0c>
 800e608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e60a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e60e:	ec4b ab10 	vmov	d0, sl, fp
 800e612:	f7ff f9c9 	bl	800d9a8 <__ulp>
 800e616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e61a:	ec51 0b10 	vmov	r0, r1, d0
 800e61e:	f7f2 f80b 	bl	8000638 <__aeabi_dmul>
 800e622:	4652      	mov	r2, sl
 800e624:	465b      	mov	r3, fp
 800e626:	f7f1 fe51 	bl	80002cc <__adddf3>
 800e62a:	460b      	mov	r3, r1
 800e62c:	4949      	ldr	r1, [pc, #292]	@ (800e754 <_strtod_l+0xaf4>)
 800e62e:	4a4e      	ldr	r2, [pc, #312]	@ (800e768 <_strtod_l+0xb08>)
 800e630:	4019      	ands	r1, r3
 800e632:	4291      	cmp	r1, r2
 800e634:	4682      	mov	sl, r0
 800e636:	d942      	bls.n	800e6be <_strtod_l+0xa5e>
 800e638:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e63a:	4b47      	ldr	r3, [pc, #284]	@ (800e758 <_strtod_l+0xaf8>)
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d103      	bne.n	800e648 <_strtod_l+0x9e8>
 800e640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e642:	3301      	adds	r3, #1
 800e644:	f43f ad2f 	beq.w	800e0a6 <_strtod_l+0x446>
 800e648:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e758 <_strtod_l+0xaf8>
 800e64c:	f04f 3aff 	mov.w	sl, #4294967295
 800e650:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e652:	9805      	ldr	r0, [sp, #20]
 800e654:	f7fe fe7c 	bl	800d350 <_Bfree>
 800e658:	9805      	ldr	r0, [sp, #20]
 800e65a:	4649      	mov	r1, r9
 800e65c:	f7fe fe78 	bl	800d350 <_Bfree>
 800e660:	9805      	ldr	r0, [sp, #20]
 800e662:	4641      	mov	r1, r8
 800e664:	f7fe fe74 	bl	800d350 <_Bfree>
 800e668:	9805      	ldr	r0, [sp, #20]
 800e66a:	4621      	mov	r1, r4
 800e66c:	f7fe fe70 	bl	800d350 <_Bfree>
 800e670:	e619      	b.n	800e2a6 <_strtod_l+0x646>
 800e672:	f1ba 0f01 	cmp.w	sl, #1
 800e676:	d103      	bne.n	800e680 <_strtod_l+0xa20>
 800e678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f43f ada6 	beq.w	800e1cc <_strtod_l+0x56c>
 800e680:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e730 <_strtod_l+0xad0>
 800e684:	4f35      	ldr	r7, [pc, #212]	@ (800e75c <_strtod_l+0xafc>)
 800e686:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e68a:	2600      	movs	r6, #0
 800e68c:	e7b1      	b.n	800e5f2 <_strtod_l+0x992>
 800e68e:	4f34      	ldr	r7, [pc, #208]	@ (800e760 <_strtod_l+0xb00>)
 800e690:	2600      	movs	r6, #0
 800e692:	e7aa      	b.n	800e5ea <_strtod_l+0x98a>
 800e694:	4b32      	ldr	r3, [pc, #200]	@ (800e760 <_strtod_l+0xb00>)
 800e696:	4630      	mov	r0, r6
 800e698:	4639      	mov	r1, r7
 800e69a:	2200      	movs	r2, #0
 800e69c:	f7f1 ffcc 	bl	8000638 <__aeabi_dmul>
 800e6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	460f      	mov	r7, r1
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d09f      	beq.n	800e5ea <_strtod_l+0x98a>
 800e6aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e6ae:	e7a0      	b.n	800e5f2 <_strtod_l+0x992>
 800e6b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e738 <_strtod_l+0xad8>
 800e6b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e6b8:	ec57 6b17 	vmov	r6, r7, d7
 800e6bc:	e799      	b.n	800e5f2 <_strtod_l+0x992>
 800e6be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e6c2:	9b08      	ldr	r3, [sp, #32]
 800e6c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d1c1      	bne.n	800e650 <_strtod_l+0x9f0>
 800e6cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e6d0:	0d1b      	lsrs	r3, r3, #20
 800e6d2:	051b      	lsls	r3, r3, #20
 800e6d4:	429d      	cmp	r5, r3
 800e6d6:	d1bb      	bne.n	800e650 <_strtod_l+0x9f0>
 800e6d8:	4630      	mov	r0, r6
 800e6da:	4639      	mov	r1, r7
 800e6dc:	f7f2 fb5c 	bl	8000d98 <__aeabi_d2lz>
 800e6e0:	f7f1 ff7c 	bl	80005dc <__aeabi_l2d>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	f7f1 fdec 	bl	80002c8 <__aeabi_dsub>
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e6f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e6fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6fe:	ea46 060a 	orr.w	r6, r6, sl
 800e702:	431e      	orrs	r6, r3
 800e704:	d06f      	beq.n	800e7e6 <_strtod_l+0xb86>
 800e706:	a30e      	add	r3, pc, #56	@ (adr r3, 800e740 <_strtod_l+0xae0>)
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	f7f2 fa06 	bl	8000b1c <__aeabi_dcmplt>
 800e710:	2800      	cmp	r0, #0
 800e712:	f47f acd3 	bne.w	800e0bc <_strtod_l+0x45c>
 800e716:	a30c      	add	r3, pc, #48	@ (adr r3, 800e748 <_strtod_l+0xae8>)
 800e718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e720:	f7f2 fa1a 	bl	8000b58 <__aeabi_dcmpgt>
 800e724:	2800      	cmp	r0, #0
 800e726:	d093      	beq.n	800e650 <_strtod_l+0x9f0>
 800e728:	e4c8      	b.n	800e0bc <_strtod_l+0x45c>
 800e72a:	bf00      	nop
 800e72c:	f3af 8000 	nop.w
 800e730:	00000000 	.word	0x00000000
 800e734:	bff00000 	.word	0xbff00000
 800e738:	00000000 	.word	0x00000000
 800e73c:	3ff00000 	.word	0x3ff00000
 800e740:	94a03595 	.word	0x94a03595
 800e744:	3fdfffff 	.word	0x3fdfffff
 800e748:	35afe535 	.word	0x35afe535
 800e74c:	3fe00000 	.word	0x3fe00000
 800e750:	000fffff 	.word	0x000fffff
 800e754:	7ff00000 	.word	0x7ff00000
 800e758:	7fefffff 	.word	0x7fefffff
 800e75c:	3ff00000 	.word	0x3ff00000
 800e760:	3fe00000 	.word	0x3fe00000
 800e764:	7fe00000 	.word	0x7fe00000
 800e768:	7c9fffff 	.word	0x7c9fffff
 800e76c:	9b08      	ldr	r3, [sp, #32]
 800e76e:	b323      	cbz	r3, 800e7ba <_strtod_l+0xb5a>
 800e770:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e774:	d821      	bhi.n	800e7ba <_strtod_l+0xb5a>
 800e776:	a328      	add	r3, pc, #160	@ (adr r3, 800e818 <_strtod_l+0xbb8>)
 800e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77c:	4630      	mov	r0, r6
 800e77e:	4639      	mov	r1, r7
 800e780:	f7f2 f9d6 	bl	8000b30 <__aeabi_dcmple>
 800e784:	b1a0      	cbz	r0, 800e7b0 <_strtod_l+0xb50>
 800e786:	4639      	mov	r1, r7
 800e788:	4630      	mov	r0, r6
 800e78a:	f7f2 fa2d 	bl	8000be8 <__aeabi_d2uiz>
 800e78e:	2801      	cmp	r0, #1
 800e790:	bf38      	it	cc
 800e792:	2001      	movcc	r0, #1
 800e794:	f7f1 fed6 	bl	8000544 <__aeabi_ui2d>
 800e798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e79a:	4606      	mov	r6, r0
 800e79c:	460f      	mov	r7, r1
 800e79e:	b9fb      	cbnz	r3, 800e7e0 <_strtod_l+0xb80>
 800e7a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e7a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e7a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e7a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e7ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e7b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e7b6:	1b5b      	subs	r3, r3, r5
 800e7b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e7ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e7be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e7c2:	f7ff f8f1 	bl	800d9a8 <__ulp>
 800e7c6:	4650      	mov	r0, sl
 800e7c8:	ec53 2b10 	vmov	r2, r3, d0
 800e7cc:	4659      	mov	r1, fp
 800e7ce:	f7f1 ff33 	bl	8000638 <__aeabi_dmul>
 800e7d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e7d6:	f7f1 fd79 	bl	80002cc <__adddf3>
 800e7da:	4682      	mov	sl, r0
 800e7dc:	468b      	mov	fp, r1
 800e7de:	e770      	b.n	800e6c2 <_strtod_l+0xa62>
 800e7e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e7e4:	e7e0      	b.n	800e7a8 <_strtod_l+0xb48>
 800e7e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e820 <_strtod_l+0xbc0>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	f7f2 f996 	bl	8000b1c <__aeabi_dcmplt>
 800e7f0:	e798      	b.n	800e724 <_strtod_l+0xac4>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e7f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e7f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7fa:	6013      	str	r3, [r2, #0]
 800e7fc:	f7ff ba6d 	b.w	800dcda <_strtod_l+0x7a>
 800e800:	2a65      	cmp	r2, #101	@ 0x65
 800e802:	f43f ab68 	beq.w	800ded6 <_strtod_l+0x276>
 800e806:	2a45      	cmp	r2, #69	@ 0x45
 800e808:	f43f ab65 	beq.w	800ded6 <_strtod_l+0x276>
 800e80c:	2301      	movs	r3, #1
 800e80e:	f7ff bba0 	b.w	800df52 <_strtod_l+0x2f2>
 800e812:	bf00      	nop
 800e814:	f3af 8000 	nop.w
 800e818:	ffc00000 	.word	0xffc00000
 800e81c:	41dfffff 	.word	0x41dfffff
 800e820:	94a03595 	.word	0x94a03595
 800e824:	3fcfffff 	.word	0x3fcfffff

0800e828 <_strtod_r>:
 800e828:	4b01      	ldr	r3, [pc, #4]	@ (800e830 <_strtod_r+0x8>)
 800e82a:	f7ff ba19 	b.w	800dc60 <_strtod_l>
 800e82e:	bf00      	nop
 800e830:	2000008c 	.word	0x2000008c

0800e834 <__ssputs_r>:
 800e834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e838:	688e      	ldr	r6, [r1, #8]
 800e83a:	461f      	mov	r7, r3
 800e83c:	42be      	cmp	r6, r7
 800e83e:	680b      	ldr	r3, [r1, #0]
 800e840:	4682      	mov	sl, r0
 800e842:	460c      	mov	r4, r1
 800e844:	4690      	mov	r8, r2
 800e846:	d82d      	bhi.n	800e8a4 <__ssputs_r+0x70>
 800e848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e84c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e850:	d026      	beq.n	800e8a0 <__ssputs_r+0x6c>
 800e852:	6965      	ldr	r5, [r4, #20]
 800e854:	6909      	ldr	r1, [r1, #16]
 800e856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e85a:	eba3 0901 	sub.w	r9, r3, r1
 800e85e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e862:	1c7b      	adds	r3, r7, #1
 800e864:	444b      	add	r3, r9
 800e866:	106d      	asrs	r5, r5, #1
 800e868:	429d      	cmp	r5, r3
 800e86a:	bf38      	it	cc
 800e86c:	461d      	movcc	r5, r3
 800e86e:	0553      	lsls	r3, r2, #21
 800e870:	d527      	bpl.n	800e8c2 <__ssputs_r+0x8e>
 800e872:	4629      	mov	r1, r5
 800e874:	f7fe fca0 	bl	800d1b8 <_malloc_r>
 800e878:	4606      	mov	r6, r0
 800e87a:	b360      	cbz	r0, 800e8d6 <__ssputs_r+0xa2>
 800e87c:	6921      	ldr	r1, [r4, #16]
 800e87e:	464a      	mov	r2, r9
 800e880:	f000 fc84 	bl	800f18c <memcpy>
 800e884:	89a3      	ldrh	r3, [r4, #12]
 800e886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e88a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e88e:	81a3      	strh	r3, [r4, #12]
 800e890:	6126      	str	r6, [r4, #16]
 800e892:	6165      	str	r5, [r4, #20]
 800e894:	444e      	add	r6, r9
 800e896:	eba5 0509 	sub.w	r5, r5, r9
 800e89a:	6026      	str	r6, [r4, #0]
 800e89c:	60a5      	str	r5, [r4, #8]
 800e89e:	463e      	mov	r6, r7
 800e8a0:	42be      	cmp	r6, r7
 800e8a2:	d900      	bls.n	800e8a6 <__ssputs_r+0x72>
 800e8a4:	463e      	mov	r6, r7
 800e8a6:	6820      	ldr	r0, [r4, #0]
 800e8a8:	4632      	mov	r2, r6
 800e8aa:	4641      	mov	r1, r8
 800e8ac:	f000 fc10 	bl	800f0d0 <memmove>
 800e8b0:	68a3      	ldr	r3, [r4, #8]
 800e8b2:	1b9b      	subs	r3, r3, r6
 800e8b4:	60a3      	str	r3, [r4, #8]
 800e8b6:	6823      	ldr	r3, [r4, #0]
 800e8b8:	4433      	add	r3, r6
 800e8ba:	6023      	str	r3, [r4, #0]
 800e8bc:	2000      	movs	r0, #0
 800e8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8c2:	462a      	mov	r2, r5
 800e8c4:	f000 ffdd 	bl	800f882 <_realloc_r>
 800e8c8:	4606      	mov	r6, r0
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	d1e0      	bne.n	800e890 <__ssputs_r+0x5c>
 800e8ce:	6921      	ldr	r1, [r4, #16]
 800e8d0:	4650      	mov	r0, sl
 800e8d2:	f7fe fbfd 	bl	800d0d0 <_free_r>
 800e8d6:	230c      	movs	r3, #12
 800e8d8:	f8ca 3000 	str.w	r3, [sl]
 800e8dc:	89a3      	ldrh	r3, [r4, #12]
 800e8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8e2:	81a3      	strh	r3, [r4, #12]
 800e8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e8:	e7e9      	b.n	800e8be <__ssputs_r+0x8a>
	...

0800e8ec <_svfiprintf_r>:
 800e8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f0:	4698      	mov	r8, r3
 800e8f2:	898b      	ldrh	r3, [r1, #12]
 800e8f4:	061b      	lsls	r3, r3, #24
 800e8f6:	b09d      	sub	sp, #116	@ 0x74
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	460d      	mov	r5, r1
 800e8fc:	4614      	mov	r4, r2
 800e8fe:	d510      	bpl.n	800e922 <_svfiprintf_r+0x36>
 800e900:	690b      	ldr	r3, [r1, #16]
 800e902:	b973      	cbnz	r3, 800e922 <_svfiprintf_r+0x36>
 800e904:	2140      	movs	r1, #64	@ 0x40
 800e906:	f7fe fc57 	bl	800d1b8 <_malloc_r>
 800e90a:	6028      	str	r0, [r5, #0]
 800e90c:	6128      	str	r0, [r5, #16]
 800e90e:	b930      	cbnz	r0, 800e91e <_svfiprintf_r+0x32>
 800e910:	230c      	movs	r3, #12
 800e912:	603b      	str	r3, [r7, #0]
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	b01d      	add	sp, #116	@ 0x74
 800e91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	2340      	movs	r3, #64	@ 0x40
 800e920:	616b      	str	r3, [r5, #20]
 800e922:	2300      	movs	r3, #0
 800e924:	9309      	str	r3, [sp, #36]	@ 0x24
 800e926:	2320      	movs	r3, #32
 800e928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e92c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e930:	2330      	movs	r3, #48	@ 0x30
 800e932:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ead0 <_svfiprintf_r+0x1e4>
 800e936:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e93a:	f04f 0901 	mov.w	r9, #1
 800e93e:	4623      	mov	r3, r4
 800e940:	469a      	mov	sl, r3
 800e942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e946:	b10a      	cbz	r2, 800e94c <_svfiprintf_r+0x60>
 800e948:	2a25      	cmp	r2, #37	@ 0x25
 800e94a:	d1f9      	bne.n	800e940 <_svfiprintf_r+0x54>
 800e94c:	ebba 0b04 	subs.w	fp, sl, r4
 800e950:	d00b      	beq.n	800e96a <_svfiprintf_r+0x7e>
 800e952:	465b      	mov	r3, fp
 800e954:	4622      	mov	r2, r4
 800e956:	4629      	mov	r1, r5
 800e958:	4638      	mov	r0, r7
 800e95a:	f7ff ff6b 	bl	800e834 <__ssputs_r>
 800e95e:	3001      	adds	r0, #1
 800e960:	f000 80a7 	beq.w	800eab2 <_svfiprintf_r+0x1c6>
 800e964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e966:	445a      	add	r2, fp
 800e968:	9209      	str	r2, [sp, #36]	@ 0x24
 800e96a:	f89a 3000 	ldrb.w	r3, [sl]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f000 809f 	beq.w	800eab2 <_svfiprintf_r+0x1c6>
 800e974:	2300      	movs	r3, #0
 800e976:	f04f 32ff 	mov.w	r2, #4294967295
 800e97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e97e:	f10a 0a01 	add.w	sl, sl, #1
 800e982:	9304      	str	r3, [sp, #16]
 800e984:	9307      	str	r3, [sp, #28]
 800e986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e98a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e98c:	4654      	mov	r4, sl
 800e98e:	2205      	movs	r2, #5
 800e990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e994:	484e      	ldr	r0, [pc, #312]	@ (800ead0 <_svfiprintf_r+0x1e4>)
 800e996:	f7f1 fc3b 	bl	8000210 <memchr>
 800e99a:	9a04      	ldr	r2, [sp, #16]
 800e99c:	b9d8      	cbnz	r0, 800e9d6 <_svfiprintf_r+0xea>
 800e99e:	06d0      	lsls	r0, r2, #27
 800e9a0:	bf44      	itt	mi
 800e9a2:	2320      	movmi	r3, #32
 800e9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9a8:	0711      	lsls	r1, r2, #28
 800e9aa:	bf44      	itt	mi
 800e9ac:	232b      	movmi	r3, #43	@ 0x2b
 800e9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9b8:	d015      	beq.n	800e9e6 <_svfiprintf_r+0xfa>
 800e9ba:	9a07      	ldr	r2, [sp, #28]
 800e9bc:	4654      	mov	r4, sl
 800e9be:	2000      	movs	r0, #0
 800e9c0:	f04f 0c0a 	mov.w	ip, #10
 800e9c4:	4621      	mov	r1, r4
 800e9c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9ca:	3b30      	subs	r3, #48	@ 0x30
 800e9cc:	2b09      	cmp	r3, #9
 800e9ce:	d94b      	bls.n	800ea68 <_svfiprintf_r+0x17c>
 800e9d0:	b1b0      	cbz	r0, 800ea00 <_svfiprintf_r+0x114>
 800e9d2:	9207      	str	r2, [sp, #28]
 800e9d4:	e014      	b.n	800ea00 <_svfiprintf_r+0x114>
 800e9d6:	eba0 0308 	sub.w	r3, r0, r8
 800e9da:	fa09 f303 	lsl.w	r3, r9, r3
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	9304      	str	r3, [sp, #16]
 800e9e2:	46a2      	mov	sl, r4
 800e9e4:	e7d2      	b.n	800e98c <_svfiprintf_r+0xa0>
 800e9e6:	9b03      	ldr	r3, [sp, #12]
 800e9e8:	1d19      	adds	r1, r3, #4
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	9103      	str	r1, [sp, #12]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	bfbb      	ittet	lt
 800e9f2:	425b      	neglt	r3, r3
 800e9f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e9f8:	9307      	strge	r3, [sp, #28]
 800e9fa:	9307      	strlt	r3, [sp, #28]
 800e9fc:	bfb8      	it	lt
 800e9fe:	9204      	strlt	r2, [sp, #16]
 800ea00:	7823      	ldrb	r3, [r4, #0]
 800ea02:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea04:	d10a      	bne.n	800ea1c <_svfiprintf_r+0x130>
 800ea06:	7863      	ldrb	r3, [r4, #1]
 800ea08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea0a:	d132      	bne.n	800ea72 <_svfiprintf_r+0x186>
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	1d1a      	adds	r2, r3, #4
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	9203      	str	r2, [sp, #12]
 800ea14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea18:	3402      	adds	r4, #2
 800ea1a:	9305      	str	r3, [sp, #20]
 800ea1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eae0 <_svfiprintf_r+0x1f4>
 800ea20:	7821      	ldrb	r1, [r4, #0]
 800ea22:	2203      	movs	r2, #3
 800ea24:	4650      	mov	r0, sl
 800ea26:	f7f1 fbf3 	bl	8000210 <memchr>
 800ea2a:	b138      	cbz	r0, 800ea3c <_svfiprintf_r+0x150>
 800ea2c:	9b04      	ldr	r3, [sp, #16]
 800ea2e:	eba0 000a 	sub.w	r0, r0, sl
 800ea32:	2240      	movs	r2, #64	@ 0x40
 800ea34:	4082      	lsls	r2, r0
 800ea36:	4313      	orrs	r3, r2
 800ea38:	3401      	adds	r4, #1
 800ea3a:	9304      	str	r3, [sp, #16]
 800ea3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea40:	4824      	ldr	r0, [pc, #144]	@ (800ead4 <_svfiprintf_r+0x1e8>)
 800ea42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea46:	2206      	movs	r2, #6
 800ea48:	f7f1 fbe2 	bl	8000210 <memchr>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d036      	beq.n	800eabe <_svfiprintf_r+0x1d2>
 800ea50:	4b21      	ldr	r3, [pc, #132]	@ (800ead8 <_svfiprintf_r+0x1ec>)
 800ea52:	bb1b      	cbnz	r3, 800ea9c <_svfiprintf_r+0x1b0>
 800ea54:	9b03      	ldr	r3, [sp, #12]
 800ea56:	3307      	adds	r3, #7
 800ea58:	f023 0307 	bic.w	r3, r3, #7
 800ea5c:	3308      	adds	r3, #8
 800ea5e:	9303      	str	r3, [sp, #12]
 800ea60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea62:	4433      	add	r3, r6
 800ea64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea66:	e76a      	b.n	800e93e <_svfiprintf_r+0x52>
 800ea68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea6c:	460c      	mov	r4, r1
 800ea6e:	2001      	movs	r0, #1
 800ea70:	e7a8      	b.n	800e9c4 <_svfiprintf_r+0xd8>
 800ea72:	2300      	movs	r3, #0
 800ea74:	3401      	adds	r4, #1
 800ea76:	9305      	str	r3, [sp, #20]
 800ea78:	4619      	mov	r1, r3
 800ea7a:	f04f 0c0a 	mov.w	ip, #10
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea84:	3a30      	subs	r2, #48	@ 0x30
 800ea86:	2a09      	cmp	r2, #9
 800ea88:	d903      	bls.n	800ea92 <_svfiprintf_r+0x1a6>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d0c6      	beq.n	800ea1c <_svfiprintf_r+0x130>
 800ea8e:	9105      	str	r1, [sp, #20]
 800ea90:	e7c4      	b.n	800ea1c <_svfiprintf_r+0x130>
 800ea92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea96:	4604      	mov	r4, r0
 800ea98:	2301      	movs	r3, #1
 800ea9a:	e7f0      	b.n	800ea7e <_svfiprintf_r+0x192>
 800ea9c:	ab03      	add	r3, sp, #12
 800ea9e:	9300      	str	r3, [sp, #0]
 800eaa0:	462a      	mov	r2, r5
 800eaa2:	4b0e      	ldr	r3, [pc, #56]	@ (800eadc <_svfiprintf_r+0x1f0>)
 800eaa4:	a904      	add	r1, sp, #16
 800eaa6:	4638      	mov	r0, r7
 800eaa8:	f7fc fbd0 	bl	800b24c <_printf_float>
 800eaac:	1c42      	adds	r2, r0, #1
 800eaae:	4606      	mov	r6, r0
 800eab0:	d1d6      	bne.n	800ea60 <_svfiprintf_r+0x174>
 800eab2:	89ab      	ldrh	r3, [r5, #12]
 800eab4:	065b      	lsls	r3, r3, #25
 800eab6:	f53f af2d 	bmi.w	800e914 <_svfiprintf_r+0x28>
 800eaba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eabc:	e72c      	b.n	800e918 <_svfiprintf_r+0x2c>
 800eabe:	ab03      	add	r3, sp, #12
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	462a      	mov	r2, r5
 800eac4:	4b05      	ldr	r3, [pc, #20]	@ (800eadc <_svfiprintf_r+0x1f0>)
 800eac6:	a904      	add	r1, sp, #16
 800eac8:	4638      	mov	r0, r7
 800eaca:	f7fc fe57 	bl	800b77c <_printf_i>
 800eace:	e7ed      	b.n	800eaac <_svfiprintf_r+0x1c0>
 800ead0:	08011408 	.word	0x08011408
 800ead4:	08011412 	.word	0x08011412
 800ead8:	0800b24d 	.word	0x0800b24d
 800eadc:	0800e835 	.word	0x0800e835
 800eae0:	0801140e 	.word	0x0801140e

0800eae4 <__sfputc_r>:
 800eae4:	6893      	ldr	r3, [r2, #8]
 800eae6:	3b01      	subs	r3, #1
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	b410      	push	{r4}
 800eaec:	6093      	str	r3, [r2, #8]
 800eaee:	da08      	bge.n	800eb02 <__sfputc_r+0x1e>
 800eaf0:	6994      	ldr	r4, [r2, #24]
 800eaf2:	42a3      	cmp	r3, r4
 800eaf4:	db01      	blt.n	800eafa <__sfputc_r+0x16>
 800eaf6:	290a      	cmp	r1, #10
 800eaf8:	d103      	bne.n	800eb02 <__sfputc_r+0x1e>
 800eafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eafe:	f000 ba53 	b.w	800efa8 <__swbuf_r>
 800eb02:	6813      	ldr	r3, [r2, #0]
 800eb04:	1c58      	adds	r0, r3, #1
 800eb06:	6010      	str	r0, [r2, #0]
 800eb08:	7019      	strb	r1, [r3, #0]
 800eb0a:	4608      	mov	r0, r1
 800eb0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb10:	4770      	bx	lr

0800eb12 <__sfputs_r>:
 800eb12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb14:	4606      	mov	r6, r0
 800eb16:	460f      	mov	r7, r1
 800eb18:	4614      	mov	r4, r2
 800eb1a:	18d5      	adds	r5, r2, r3
 800eb1c:	42ac      	cmp	r4, r5
 800eb1e:	d101      	bne.n	800eb24 <__sfputs_r+0x12>
 800eb20:	2000      	movs	r0, #0
 800eb22:	e007      	b.n	800eb34 <__sfputs_r+0x22>
 800eb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb28:	463a      	mov	r2, r7
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	f7ff ffda 	bl	800eae4 <__sfputc_r>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d1f3      	bne.n	800eb1c <__sfputs_r+0xa>
 800eb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb38 <_vfiprintf_r>:
 800eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3c:	460d      	mov	r5, r1
 800eb3e:	b09d      	sub	sp, #116	@ 0x74
 800eb40:	4614      	mov	r4, r2
 800eb42:	4698      	mov	r8, r3
 800eb44:	4606      	mov	r6, r0
 800eb46:	b118      	cbz	r0, 800eb50 <_vfiprintf_r+0x18>
 800eb48:	6a03      	ldr	r3, [r0, #32]
 800eb4a:	b90b      	cbnz	r3, 800eb50 <_vfiprintf_r+0x18>
 800eb4c:	f7fd f9ce 	bl	800beec <__sinit>
 800eb50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb52:	07d9      	lsls	r1, r3, #31
 800eb54:	d405      	bmi.n	800eb62 <_vfiprintf_r+0x2a>
 800eb56:	89ab      	ldrh	r3, [r5, #12]
 800eb58:	059a      	lsls	r2, r3, #22
 800eb5a:	d402      	bmi.n	800eb62 <_vfiprintf_r+0x2a>
 800eb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb5e:	f7fd fc36 	bl	800c3ce <__retarget_lock_acquire_recursive>
 800eb62:	89ab      	ldrh	r3, [r5, #12]
 800eb64:	071b      	lsls	r3, r3, #28
 800eb66:	d501      	bpl.n	800eb6c <_vfiprintf_r+0x34>
 800eb68:	692b      	ldr	r3, [r5, #16]
 800eb6a:	b99b      	cbnz	r3, 800eb94 <_vfiprintf_r+0x5c>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	4630      	mov	r0, r6
 800eb70:	f000 fa58 	bl	800f024 <__swsetup_r>
 800eb74:	b170      	cbz	r0, 800eb94 <_vfiprintf_r+0x5c>
 800eb76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb78:	07dc      	lsls	r4, r3, #31
 800eb7a:	d504      	bpl.n	800eb86 <_vfiprintf_r+0x4e>
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb80:	b01d      	add	sp, #116	@ 0x74
 800eb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb86:	89ab      	ldrh	r3, [r5, #12]
 800eb88:	0598      	lsls	r0, r3, #22
 800eb8a:	d4f7      	bmi.n	800eb7c <_vfiprintf_r+0x44>
 800eb8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb8e:	f7fd fc1f 	bl	800c3d0 <__retarget_lock_release_recursive>
 800eb92:	e7f3      	b.n	800eb7c <_vfiprintf_r+0x44>
 800eb94:	2300      	movs	r3, #0
 800eb96:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb98:	2320      	movs	r3, #32
 800eb9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800eba2:	2330      	movs	r3, #48	@ 0x30
 800eba4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ed54 <_vfiprintf_r+0x21c>
 800eba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ebac:	f04f 0901 	mov.w	r9, #1
 800ebb0:	4623      	mov	r3, r4
 800ebb2:	469a      	mov	sl, r3
 800ebb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebb8:	b10a      	cbz	r2, 800ebbe <_vfiprintf_r+0x86>
 800ebba:	2a25      	cmp	r2, #37	@ 0x25
 800ebbc:	d1f9      	bne.n	800ebb2 <_vfiprintf_r+0x7a>
 800ebbe:	ebba 0b04 	subs.w	fp, sl, r4
 800ebc2:	d00b      	beq.n	800ebdc <_vfiprintf_r+0xa4>
 800ebc4:	465b      	mov	r3, fp
 800ebc6:	4622      	mov	r2, r4
 800ebc8:	4629      	mov	r1, r5
 800ebca:	4630      	mov	r0, r6
 800ebcc:	f7ff ffa1 	bl	800eb12 <__sfputs_r>
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	f000 80a7 	beq.w	800ed24 <_vfiprintf_r+0x1ec>
 800ebd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebd8:	445a      	add	r2, fp
 800ebda:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebdc:	f89a 3000 	ldrb.w	r3, [sl]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 809f 	beq.w	800ed24 <_vfiprintf_r+0x1ec>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebf0:	f10a 0a01 	add.w	sl, sl, #1
 800ebf4:	9304      	str	r3, [sp, #16]
 800ebf6:	9307      	str	r3, [sp, #28]
 800ebf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ebfc:	931a      	str	r3, [sp, #104]	@ 0x68
 800ebfe:	4654      	mov	r4, sl
 800ec00:	2205      	movs	r2, #5
 800ec02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec06:	4853      	ldr	r0, [pc, #332]	@ (800ed54 <_vfiprintf_r+0x21c>)
 800ec08:	f7f1 fb02 	bl	8000210 <memchr>
 800ec0c:	9a04      	ldr	r2, [sp, #16]
 800ec0e:	b9d8      	cbnz	r0, 800ec48 <_vfiprintf_r+0x110>
 800ec10:	06d1      	lsls	r1, r2, #27
 800ec12:	bf44      	itt	mi
 800ec14:	2320      	movmi	r3, #32
 800ec16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec1a:	0713      	lsls	r3, r2, #28
 800ec1c:	bf44      	itt	mi
 800ec1e:	232b      	movmi	r3, #43	@ 0x2b
 800ec20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec24:	f89a 3000 	ldrb.w	r3, [sl]
 800ec28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec2a:	d015      	beq.n	800ec58 <_vfiprintf_r+0x120>
 800ec2c:	9a07      	ldr	r2, [sp, #28]
 800ec2e:	4654      	mov	r4, sl
 800ec30:	2000      	movs	r0, #0
 800ec32:	f04f 0c0a 	mov.w	ip, #10
 800ec36:	4621      	mov	r1, r4
 800ec38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec3c:	3b30      	subs	r3, #48	@ 0x30
 800ec3e:	2b09      	cmp	r3, #9
 800ec40:	d94b      	bls.n	800ecda <_vfiprintf_r+0x1a2>
 800ec42:	b1b0      	cbz	r0, 800ec72 <_vfiprintf_r+0x13a>
 800ec44:	9207      	str	r2, [sp, #28]
 800ec46:	e014      	b.n	800ec72 <_vfiprintf_r+0x13a>
 800ec48:	eba0 0308 	sub.w	r3, r0, r8
 800ec4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ec50:	4313      	orrs	r3, r2
 800ec52:	9304      	str	r3, [sp, #16]
 800ec54:	46a2      	mov	sl, r4
 800ec56:	e7d2      	b.n	800ebfe <_vfiprintf_r+0xc6>
 800ec58:	9b03      	ldr	r3, [sp, #12]
 800ec5a:	1d19      	adds	r1, r3, #4
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	9103      	str	r1, [sp, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	bfbb      	ittet	lt
 800ec64:	425b      	neglt	r3, r3
 800ec66:	f042 0202 	orrlt.w	r2, r2, #2
 800ec6a:	9307      	strge	r3, [sp, #28]
 800ec6c:	9307      	strlt	r3, [sp, #28]
 800ec6e:	bfb8      	it	lt
 800ec70:	9204      	strlt	r2, [sp, #16]
 800ec72:	7823      	ldrb	r3, [r4, #0]
 800ec74:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec76:	d10a      	bne.n	800ec8e <_vfiprintf_r+0x156>
 800ec78:	7863      	ldrb	r3, [r4, #1]
 800ec7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec7c:	d132      	bne.n	800ece4 <_vfiprintf_r+0x1ac>
 800ec7e:	9b03      	ldr	r3, [sp, #12]
 800ec80:	1d1a      	adds	r2, r3, #4
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	9203      	str	r2, [sp, #12]
 800ec86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec8a:	3402      	adds	r4, #2
 800ec8c:	9305      	str	r3, [sp, #20]
 800ec8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ed64 <_vfiprintf_r+0x22c>
 800ec92:	7821      	ldrb	r1, [r4, #0]
 800ec94:	2203      	movs	r2, #3
 800ec96:	4650      	mov	r0, sl
 800ec98:	f7f1 faba 	bl	8000210 <memchr>
 800ec9c:	b138      	cbz	r0, 800ecae <_vfiprintf_r+0x176>
 800ec9e:	9b04      	ldr	r3, [sp, #16]
 800eca0:	eba0 000a 	sub.w	r0, r0, sl
 800eca4:	2240      	movs	r2, #64	@ 0x40
 800eca6:	4082      	lsls	r2, r0
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	3401      	adds	r4, #1
 800ecac:	9304      	str	r3, [sp, #16]
 800ecae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb2:	4829      	ldr	r0, [pc, #164]	@ (800ed58 <_vfiprintf_r+0x220>)
 800ecb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ecb8:	2206      	movs	r2, #6
 800ecba:	f7f1 faa9 	bl	8000210 <memchr>
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d03f      	beq.n	800ed42 <_vfiprintf_r+0x20a>
 800ecc2:	4b26      	ldr	r3, [pc, #152]	@ (800ed5c <_vfiprintf_r+0x224>)
 800ecc4:	bb1b      	cbnz	r3, 800ed0e <_vfiprintf_r+0x1d6>
 800ecc6:	9b03      	ldr	r3, [sp, #12]
 800ecc8:	3307      	adds	r3, #7
 800ecca:	f023 0307 	bic.w	r3, r3, #7
 800ecce:	3308      	adds	r3, #8
 800ecd0:	9303      	str	r3, [sp, #12]
 800ecd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecd4:	443b      	add	r3, r7
 800ecd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecd8:	e76a      	b.n	800ebb0 <_vfiprintf_r+0x78>
 800ecda:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecde:	460c      	mov	r4, r1
 800ece0:	2001      	movs	r0, #1
 800ece2:	e7a8      	b.n	800ec36 <_vfiprintf_r+0xfe>
 800ece4:	2300      	movs	r3, #0
 800ece6:	3401      	adds	r4, #1
 800ece8:	9305      	str	r3, [sp, #20]
 800ecea:	4619      	mov	r1, r3
 800ecec:	f04f 0c0a 	mov.w	ip, #10
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecf6:	3a30      	subs	r2, #48	@ 0x30
 800ecf8:	2a09      	cmp	r2, #9
 800ecfa:	d903      	bls.n	800ed04 <_vfiprintf_r+0x1cc>
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d0c6      	beq.n	800ec8e <_vfiprintf_r+0x156>
 800ed00:	9105      	str	r1, [sp, #20]
 800ed02:	e7c4      	b.n	800ec8e <_vfiprintf_r+0x156>
 800ed04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed08:	4604      	mov	r4, r0
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e7f0      	b.n	800ecf0 <_vfiprintf_r+0x1b8>
 800ed0e:	ab03      	add	r3, sp, #12
 800ed10:	9300      	str	r3, [sp, #0]
 800ed12:	462a      	mov	r2, r5
 800ed14:	4b12      	ldr	r3, [pc, #72]	@ (800ed60 <_vfiprintf_r+0x228>)
 800ed16:	a904      	add	r1, sp, #16
 800ed18:	4630      	mov	r0, r6
 800ed1a:	f7fc fa97 	bl	800b24c <_printf_float>
 800ed1e:	4607      	mov	r7, r0
 800ed20:	1c78      	adds	r0, r7, #1
 800ed22:	d1d6      	bne.n	800ecd2 <_vfiprintf_r+0x19a>
 800ed24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed26:	07d9      	lsls	r1, r3, #31
 800ed28:	d405      	bmi.n	800ed36 <_vfiprintf_r+0x1fe>
 800ed2a:	89ab      	ldrh	r3, [r5, #12]
 800ed2c:	059a      	lsls	r2, r3, #22
 800ed2e:	d402      	bmi.n	800ed36 <_vfiprintf_r+0x1fe>
 800ed30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed32:	f7fd fb4d 	bl	800c3d0 <__retarget_lock_release_recursive>
 800ed36:	89ab      	ldrh	r3, [r5, #12]
 800ed38:	065b      	lsls	r3, r3, #25
 800ed3a:	f53f af1f 	bmi.w	800eb7c <_vfiprintf_r+0x44>
 800ed3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed40:	e71e      	b.n	800eb80 <_vfiprintf_r+0x48>
 800ed42:	ab03      	add	r3, sp, #12
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	462a      	mov	r2, r5
 800ed48:	4b05      	ldr	r3, [pc, #20]	@ (800ed60 <_vfiprintf_r+0x228>)
 800ed4a:	a904      	add	r1, sp, #16
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	f7fc fd15 	bl	800b77c <_printf_i>
 800ed52:	e7e4      	b.n	800ed1e <_vfiprintf_r+0x1e6>
 800ed54:	08011408 	.word	0x08011408
 800ed58:	08011412 	.word	0x08011412
 800ed5c:	0800b24d 	.word	0x0800b24d
 800ed60:	0800eb13 	.word	0x0800eb13
 800ed64:	0801140e 	.word	0x0801140e

0800ed68 <__sflush_r>:
 800ed68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed70:	0716      	lsls	r6, r2, #28
 800ed72:	4605      	mov	r5, r0
 800ed74:	460c      	mov	r4, r1
 800ed76:	d454      	bmi.n	800ee22 <__sflush_r+0xba>
 800ed78:	684b      	ldr	r3, [r1, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	dc02      	bgt.n	800ed84 <__sflush_r+0x1c>
 800ed7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	dd48      	ble.n	800ee16 <__sflush_r+0xae>
 800ed84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed86:	2e00      	cmp	r6, #0
 800ed88:	d045      	beq.n	800ee16 <__sflush_r+0xae>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed90:	682f      	ldr	r7, [r5, #0]
 800ed92:	6a21      	ldr	r1, [r4, #32]
 800ed94:	602b      	str	r3, [r5, #0]
 800ed96:	d030      	beq.n	800edfa <__sflush_r+0x92>
 800ed98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed9a:	89a3      	ldrh	r3, [r4, #12]
 800ed9c:	0759      	lsls	r1, r3, #29
 800ed9e:	d505      	bpl.n	800edac <__sflush_r+0x44>
 800eda0:	6863      	ldr	r3, [r4, #4]
 800eda2:	1ad2      	subs	r2, r2, r3
 800eda4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eda6:	b10b      	cbz	r3, 800edac <__sflush_r+0x44>
 800eda8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800edaa:	1ad2      	subs	r2, r2, r3
 800edac:	2300      	movs	r3, #0
 800edae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edb0:	6a21      	ldr	r1, [r4, #32]
 800edb2:	4628      	mov	r0, r5
 800edb4:	47b0      	blx	r6
 800edb6:	1c43      	adds	r3, r0, #1
 800edb8:	89a3      	ldrh	r3, [r4, #12]
 800edba:	d106      	bne.n	800edca <__sflush_r+0x62>
 800edbc:	6829      	ldr	r1, [r5, #0]
 800edbe:	291d      	cmp	r1, #29
 800edc0:	d82b      	bhi.n	800ee1a <__sflush_r+0xb2>
 800edc2:	4a2a      	ldr	r2, [pc, #168]	@ (800ee6c <__sflush_r+0x104>)
 800edc4:	40ca      	lsrs	r2, r1
 800edc6:	07d6      	lsls	r6, r2, #31
 800edc8:	d527      	bpl.n	800ee1a <__sflush_r+0xb2>
 800edca:	2200      	movs	r2, #0
 800edcc:	6062      	str	r2, [r4, #4]
 800edce:	04d9      	lsls	r1, r3, #19
 800edd0:	6922      	ldr	r2, [r4, #16]
 800edd2:	6022      	str	r2, [r4, #0]
 800edd4:	d504      	bpl.n	800ede0 <__sflush_r+0x78>
 800edd6:	1c42      	adds	r2, r0, #1
 800edd8:	d101      	bne.n	800edde <__sflush_r+0x76>
 800edda:	682b      	ldr	r3, [r5, #0]
 800eddc:	b903      	cbnz	r3, 800ede0 <__sflush_r+0x78>
 800edde:	6560      	str	r0, [r4, #84]	@ 0x54
 800ede0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ede2:	602f      	str	r7, [r5, #0]
 800ede4:	b1b9      	cbz	r1, 800ee16 <__sflush_r+0xae>
 800ede6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edea:	4299      	cmp	r1, r3
 800edec:	d002      	beq.n	800edf4 <__sflush_r+0x8c>
 800edee:	4628      	mov	r0, r5
 800edf0:	f7fe f96e 	bl	800d0d0 <_free_r>
 800edf4:	2300      	movs	r3, #0
 800edf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800edf8:	e00d      	b.n	800ee16 <__sflush_r+0xae>
 800edfa:	2301      	movs	r3, #1
 800edfc:	4628      	mov	r0, r5
 800edfe:	47b0      	blx	r6
 800ee00:	4602      	mov	r2, r0
 800ee02:	1c50      	adds	r0, r2, #1
 800ee04:	d1c9      	bne.n	800ed9a <__sflush_r+0x32>
 800ee06:	682b      	ldr	r3, [r5, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d0c6      	beq.n	800ed9a <__sflush_r+0x32>
 800ee0c:	2b1d      	cmp	r3, #29
 800ee0e:	d001      	beq.n	800ee14 <__sflush_r+0xac>
 800ee10:	2b16      	cmp	r3, #22
 800ee12:	d11e      	bne.n	800ee52 <__sflush_r+0xea>
 800ee14:	602f      	str	r7, [r5, #0]
 800ee16:	2000      	movs	r0, #0
 800ee18:	e022      	b.n	800ee60 <__sflush_r+0xf8>
 800ee1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee1e:	b21b      	sxth	r3, r3
 800ee20:	e01b      	b.n	800ee5a <__sflush_r+0xf2>
 800ee22:	690f      	ldr	r7, [r1, #16]
 800ee24:	2f00      	cmp	r7, #0
 800ee26:	d0f6      	beq.n	800ee16 <__sflush_r+0xae>
 800ee28:	0793      	lsls	r3, r2, #30
 800ee2a:	680e      	ldr	r6, [r1, #0]
 800ee2c:	bf08      	it	eq
 800ee2e:	694b      	ldreq	r3, [r1, #20]
 800ee30:	600f      	str	r7, [r1, #0]
 800ee32:	bf18      	it	ne
 800ee34:	2300      	movne	r3, #0
 800ee36:	eba6 0807 	sub.w	r8, r6, r7
 800ee3a:	608b      	str	r3, [r1, #8]
 800ee3c:	f1b8 0f00 	cmp.w	r8, #0
 800ee40:	dde9      	ble.n	800ee16 <__sflush_r+0xae>
 800ee42:	6a21      	ldr	r1, [r4, #32]
 800ee44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee46:	4643      	mov	r3, r8
 800ee48:	463a      	mov	r2, r7
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	47b0      	blx	r6
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	dc08      	bgt.n	800ee64 <__sflush_r+0xfc>
 800ee52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee5a:	81a3      	strh	r3, [r4, #12]
 800ee5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee64:	4407      	add	r7, r0
 800ee66:	eba8 0800 	sub.w	r8, r8, r0
 800ee6a:	e7e7      	b.n	800ee3c <__sflush_r+0xd4>
 800ee6c:	20400001 	.word	0x20400001

0800ee70 <_fflush_r>:
 800ee70:	b538      	push	{r3, r4, r5, lr}
 800ee72:	690b      	ldr	r3, [r1, #16]
 800ee74:	4605      	mov	r5, r0
 800ee76:	460c      	mov	r4, r1
 800ee78:	b913      	cbnz	r3, 800ee80 <_fflush_r+0x10>
 800ee7a:	2500      	movs	r5, #0
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	bd38      	pop	{r3, r4, r5, pc}
 800ee80:	b118      	cbz	r0, 800ee8a <_fflush_r+0x1a>
 800ee82:	6a03      	ldr	r3, [r0, #32]
 800ee84:	b90b      	cbnz	r3, 800ee8a <_fflush_r+0x1a>
 800ee86:	f7fd f831 	bl	800beec <__sinit>
 800ee8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d0f3      	beq.n	800ee7a <_fflush_r+0xa>
 800ee92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee94:	07d0      	lsls	r0, r2, #31
 800ee96:	d404      	bmi.n	800eea2 <_fflush_r+0x32>
 800ee98:	0599      	lsls	r1, r3, #22
 800ee9a:	d402      	bmi.n	800eea2 <_fflush_r+0x32>
 800ee9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee9e:	f7fd fa96 	bl	800c3ce <__retarget_lock_acquire_recursive>
 800eea2:	4628      	mov	r0, r5
 800eea4:	4621      	mov	r1, r4
 800eea6:	f7ff ff5f 	bl	800ed68 <__sflush_r>
 800eeaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eeac:	07da      	lsls	r2, r3, #31
 800eeae:	4605      	mov	r5, r0
 800eeb0:	d4e4      	bmi.n	800ee7c <_fflush_r+0xc>
 800eeb2:	89a3      	ldrh	r3, [r4, #12]
 800eeb4:	059b      	lsls	r3, r3, #22
 800eeb6:	d4e1      	bmi.n	800ee7c <_fflush_r+0xc>
 800eeb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeba:	f7fd fa89 	bl	800c3d0 <__retarget_lock_release_recursive>
 800eebe:	e7dd      	b.n	800ee7c <_fflush_r+0xc>

0800eec0 <fiprintf>:
 800eec0:	b40e      	push	{r1, r2, r3}
 800eec2:	b503      	push	{r0, r1, lr}
 800eec4:	4601      	mov	r1, r0
 800eec6:	ab03      	add	r3, sp, #12
 800eec8:	4805      	ldr	r0, [pc, #20]	@ (800eee0 <fiprintf+0x20>)
 800eeca:	f853 2b04 	ldr.w	r2, [r3], #4
 800eece:	6800      	ldr	r0, [r0, #0]
 800eed0:	9301      	str	r3, [sp, #4]
 800eed2:	f7ff fe31 	bl	800eb38 <_vfiprintf_r>
 800eed6:	b002      	add	sp, #8
 800eed8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eedc:	b003      	add	sp, #12
 800eede:	4770      	bx	lr
 800eee0:	2000003c 	.word	0x2000003c

0800eee4 <__swhatbuf_r>:
 800eee4:	b570      	push	{r4, r5, r6, lr}
 800eee6:	460c      	mov	r4, r1
 800eee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeec:	2900      	cmp	r1, #0
 800eeee:	b096      	sub	sp, #88	@ 0x58
 800eef0:	4615      	mov	r5, r2
 800eef2:	461e      	mov	r6, r3
 800eef4:	da0d      	bge.n	800ef12 <__swhatbuf_r+0x2e>
 800eef6:	89a3      	ldrh	r3, [r4, #12]
 800eef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eefc:	f04f 0100 	mov.w	r1, #0
 800ef00:	bf14      	ite	ne
 800ef02:	2340      	movne	r3, #64	@ 0x40
 800ef04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef08:	2000      	movs	r0, #0
 800ef0a:	6031      	str	r1, [r6, #0]
 800ef0c:	602b      	str	r3, [r5, #0]
 800ef0e:	b016      	add	sp, #88	@ 0x58
 800ef10:	bd70      	pop	{r4, r5, r6, pc}
 800ef12:	466a      	mov	r2, sp
 800ef14:	f000 f908 	bl	800f128 <_fstat_r>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	dbec      	blt.n	800eef6 <__swhatbuf_r+0x12>
 800ef1c:	9901      	ldr	r1, [sp, #4]
 800ef1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ef22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ef26:	4259      	negs	r1, r3
 800ef28:	4159      	adcs	r1, r3
 800ef2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef2e:	e7eb      	b.n	800ef08 <__swhatbuf_r+0x24>

0800ef30 <__smakebuf_r>:
 800ef30:	898b      	ldrh	r3, [r1, #12]
 800ef32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef34:	079d      	lsls	r5, r3, #30
 800ef36:	4606      	mov	r6, r0
 800ef38:	460c      	mov	r4, r1
 800ef3a:	d507      	bpl.n	800ef4c <__smakebuf_r+0x1c>
 800ef3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ef40:	6023      	str	r3, [r4, #0]
 800ef42:	6123      	str	r3, [r4, #16]
 800ef44:	2301      	movs	r3, #1
 800ef46:	6163      	str	r3, [r4, #20]
 800ef48:	b003      	add	sp, #12
 800ef4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef4c:	ab01      	add	r3, sp, #4
 800ef4e:	466a      	mov	r2, sp
 800ef50:	f7ff ffc8 	bl	800eee4 <__swhatbuf_r>
 800ef54:	9f00      	ldr	r7, [sp, #0]
 800ef56:	4605      	mov	r5, r0
 800ef58:	4639      	mov	r1, r7
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f7fe f92c 	bl	800d1b8 <_malloc_r>
 800ef60:	b948      	cbnz	r0, 800ef76 <__smakebuf_r+0x46>
 800ef62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef66:	059a      	lsls	r2, r3, #22
 800ef68:	d4ee      	bmi.n	800ef48 <__smakebuf_r+0x18>
 800ef6a:	f023 0303 	bic.w	r3, r3, #3
 800ef6e:	f043 0302 	orr.w	r3, r3, #2
 800ef72:	81a3      	strh	r3, [r4, #12]
 800ef74:	e7e2      	b.n	800ef3c <__smakebuf_r+0xc>
 800ef76:	89a3      	ldrh	r3, [r4, #12]
 800ef78:	6020      	str	r0, [r4, #0]
 800ef7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef7e:	81a3      	strh	r3, [r4, #12]
 800ef80:	9b01      	ldr	r3, [sp, #4]
 800ef82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ef86:	b15b      	cbz	r3, 800efa0 <__smakebuf_r+0x70>
 800ef88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f000 f8dd 	bl	800f14c <_isatty_r>
 800ef92:	b128      	cbz	r0, 800efa0 <__smakebuf_r+0x70>
 800ef94:	89a3      	ldrh	r3, [r4, #12]
 800ef96:	f023 0303 	bic.w	r3, r3, #3
 800ef9a:	f043 0301 	orr.w	r3, r3, #1
 800ef9e:	81a3      	strh	r3, [r4, #12]
 800efa0:	89a3      	ldrh	r3, [r4, #12]
 800efa2:	431d      	orrs	r5, r3
 800efa4:	81a5      	strh	r5, [r4, #12]
 800efa6:	e7cf      	b.n	800ef48 <__smakebuf_r+0x18>

0800efa8 <__swbuf_r>:
 800efa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efaa:	460e      	mov	r6, r1
 800efac:	4614      	mov	r4, r2
 800efae:	4605      	mov	r5, r0
 800efb0:	b118      	cbz	r0, 800efba <__swbuf_r+0x12>
 800efb2:	6a03      	ldr	r3, [r0, #32]
 800efb4:	b90b      	cbnz	r3, 800efba <__swbuf_r+0x12>
 800efb6:	f7fc ff99 	bl	800beec <__sinit>
 800efba:	69a3      	ldr	r3, [r4, #24]
 800efbc:	60a3      	str	r3, [r4, #8]
 800efbe:	89a3      	ldrh	r3, [r4, #12]
 800efc0:	071a      	lsls	r2, r3, #28
 800efc2:	d501      	bpl.n	800efc8 <__swbuf_r+0x20>
 800efc4:	6923      	ldr	r3, [r4, #16]
 800efc6:	b943      	cbnz	r3, 800efda <__swbuf_r+0x32>
 800efc8:	4621      	mov	r1, r4
 800efca:	4628      	mov	r0, r5
 800efcc:	f000 f82a 	bl	800f024 <__swsetup_r>
 800efd0:	b118      	cbz	r0, 800efda <__swbuf_r+0x32>
 800efd2:	f04f 37ff 	mov.w	r7, #4294967295
 800efd6:	4638      	mov	r0, r7
 800efd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efda:	6823      	ldr	r3, [r4, #0]
 800efdc:	6922      	ldr	r2, [r4, #16]
 800efde:	1a98      	subs	r0, r3, r2
 800efe0:	6963      	ldr	r3, [r4, #20]
 800efe2:	b2f6      	uxtb	r6, r6
 800efe4:	4283      	cmp	r3, r0
 800efe6:	4637      	mov	r7, r6
 800efe8:	dc05      	bgt.n	800eff6 <__swbuf_r+0x4e>
 800efea:	4621      	mov	r1, r4
 800efec:	4628      	mov	r0, r5
 800efee:	f7ff ff3f 	bl	800ee70 <_fflush_r>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d1ed      	bne.n	800efd2 <__swbuf_r+0x2a>
 800eff6:	68a3      	ldr	r3, [r4, #8]
 800eff8:	3b01      	subs	r3, #1
 800effa:	60a3      	str	r3, [r4, #8]
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	6022      	str	r2, [r4, #0]
 800f002:	701e      	strb	r6, [r3, #0]
 800f004:	6962      	ldr	r2, [r4, #20]
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	429a      	cmp	r2, r3
 800f00a:	d004      	beq.n	800f016 <__swbuf_r+0x6e>
 800f00c:	89a3      	ldrh	r3, [r4, #12]
 800f00e:	07db      	lsls	r3, r3, #31
 800f010:	d5e1      	bpl.n	800efd6 <__swbuf_r+0x2e>
 800f012:	2e0a      	cmp	r6, #10
 800f014:	d1df      	bne.n	800efd6 <__swbuf_r+0x2e>
 800f016:	4621      	mov	r1, r4
 800f018:	4628      	mov	r0, r5
 800f01a:	f7ff ff29 	bl	800ee70 <_fflush_r>
 800f01e:	2800      	cmp	r0, #0
 800f020:	d0d9      	beq.n	800efd6 <__swbuf_r+0x2e>
 800f022:	e7d6      	b.n	800efd2 <__swbuf_r+0x2a>

0800f024 <__swsetup_r>:
 800f024:	b538      	push	{r3, r4, r5, lr}
 800f026:	4b29      	ldr	r3, [pc, #164]	@ (800f0cc <__swsetup_r+0xa8>)
 800f028:	4605      	mov	r5, r0
 800f02a:	6818      	ldr	r0, [r3, #0]
 800f02c:	460c      	mov	r4, r1
 800f02e:	b118      	cbz	r0, 800f038 <__swsetup_r+0x14>
 800f030:	6a03      	ldr	r3, [r0, #32]
 800f032:	b90b      	cbnz	r3, 800f038 <__swsetup_r+0x14>
 800f034:	f7fc ff5a 	bl	800beec <__sinit>
 800f038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f03c:	0719      	lsls	r1, r3, #28
 800f03e:	d422      	bmi.n	800f086 <__swsetup_r+0x62>
 800f040:	06da      	lsls	r2, r3, #27
 800f042:	d407      	bmi.n	800f054 <__swsetup_r+0x30>
 800f044:	2209      	movs	r2, #9
 800f046:	602a      	str	r2, [r5, #0]
 800f048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f04c:	81a3      	strh	r3, [r4, #12]
 800f04e:	f04f 30ff 	mov.w	r0, #4294967295
 800f052:	e033      	b.n	800f0bc <__swsetup_r+0x98>
 800f054:	0758      	lsls	r0, r3, #29
 800f056:	d512      	bpl.n	800f07e <__swsetup_r+0x5a>
 800f058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f05a:	b141      	cbz	r1, 800f06e <__swsetup_r+0x4a>
 800f05c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f060:	4299      	cmp	r1, r3
 800f062:	d002      	beq.n	800f06a <__swsetup_r+0x46>
 800f064:	4628      	mov	r0, r5
 800f066:	f7fe f833 	bl	800d0d0 <_free_r>
 800f06a:	2300      	movs	r3, #0
 800f06c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f06e:	89a3      	ldrh	r3, [r4, #12]
 800f070:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f074:	81a3      	strh	r3, [r4, #12]
 800f076:	2300      	movs	r3, #0
 800f078:	6063      	str	r3, [r4, #4]
 800f07a:	6923      	ldr	r3, [r4, #16]
 800f07c:	6023      	str	r3, [r4, #0]
 800f07e:	89a3      	ldrh	r3, [r4, #12]
 800f080:	f043 0308 	orr.w	r3, r3, #8
 800f084:	81a3      	strh	r3, [r4, #12]
 800f086:	6923      	ldr	r3, [r4, #16]
 800f088:	b94b      	cbnz	r3, 800f09e <__swsetup_r+0x7a>
 800f08a:	89a3      	ldrh	r3, [r4, #12]
 800f08c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f094:	d003      	beq.n	800f09e <__swsetup_r+0x7a>
 800f096:	4621      	mov	r1, r4
 800f098:	4628      	mov	r0, r5
 800f09a:	f7ff ff49 	bl	800ef30 <__smakebuf_r>
 800f09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0a2:	f013 0201 	ands.w	r2, r3, #1
 800f0a6:	d00a      	beq.n	800f0be <__swsetup_r+0x9a>
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	60a2      	str	r2, [r4, #8]
 800f0ac:	6962      	ldr	r2, [r4, #20]
 800f0ae:	4252      	negs	r2, r2
 800f0b0:	61a2      	str	r2, [r4, #24]
 800f0b2:	6922      	ldr	r2, [r4, #16]
 800f0b4:	b942      	cbnz	r2, 800f0c8 <__swsetup_r+0xa4>
 800f0b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0ba:	d1c5      	bne.n	800f048 <__swsetup_r+0x24>
 800f0bc:	bd38      	pop	{r3, r4, r5, pc}
 800f0be:	0799      	lsls	r1, r3, #30
 800f0c0:	bf58      	it	pl
 800f0c2:	6962      	ldrpl	r2, [r4, #20]
 800f0c4:	60a2      	str	r2, [r4, #8]
 800f0c6:	e7f4      	b.n	800f0b2 <__swsetup_r+0x8e>
 800f0c8:	2000      	movs	r0, #0
 800f0ca:	e7f7      	b.n	800f0bc <__swsetup_r+0x98>
 800f0cc:	2000003c 	.word	0x2000003c

0800f0d0 <memmove>:
 800f0d0:	4288      	cmp	r0, r1
 800f0d2:	b510      	push	{r4, lr}
 800f0d4:	eb01 0402 	add.w	r4, r1, r2
 800f0d8:	d902      	bls.n	800f0e0 <memmove+0x10>
 800f0da:	4284      	cmp	r4, r0
 800f0dc:	4623      	mov	r3, r4
 800f0de:	d807      	bhi.n	800f0f0 <memmove+0x20>
 800f0e0:	1e43      	subs	r3, r0, #1
 800f0e2:	42a1      	cmp	r1, r4
 800f0e4:	d008      	beq.n	800f0f8 <memmove+0x28>
 800f0e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0ee:	e7f8      	b.n	800f0e2 <memmove+0x12>
 800f0f0:	4402      	add	r2, r0
 800f0f2:	4601      	mov	r1, r0
 800f0f4:	428a      	cmp	r2, r1
 800f0f6:	d100      	bne.n	800f0fa <memmove+0x2a>
 800f0f8:	bd10      	pop	{r4, pc}
 800f0fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f102:	e7f7      	b.n	800f0f4 <memmove+0x24>

0800f104 <strncmp>:
 800f104:	b510      	push	{r4, lr}
 800f106:	b16a      	cbz	r2, 800f124 <strncmp+0x20>
 800f108:	3901      	subs	r1, #1
 800f10a:	1884      	adds	r4, r0, r2
 800f10c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f110:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f114:	429a      	cmp	r2, r3
 800f116:	d103      	bne.n	800f120 <strncmp+0x1c>
 800f118:	42a0      	cmp	r0, r4
 800f11a:	d001      	beq.n	800f120 <strncmp+0x1c>
 800f11c:	2a00      	cmp	r2, #0
 800f11e:	d1f5      	bne.n	800f10c <strncmp+0x8>
 800f120:	1ad0      	subs	r0, r2, r3
 800f122:	bd10      	pop	{r4, pc}
 800f124:	4610      	mov	r0, r2
 800f126:	e7fc      	b.n	800f122 <strncmp+0x1e>

0800f128 <_fstat_r>:
 800f128:	b538      	push	{r3, r4, r5, lr}
 800f12a:	4d07      	ldr	r5, [pc, #28]	@ (800f148 <_fstat_r+0x20>)
 800f12c:	2300      	movs	r3, #0
 800f12e:	4604      	mov	r4, r0
 800f130:	4608      	mov	r0, r1
 800f132:	4611      	mov	r1, r2
 800f134:	602b      	str	r3, [r5, #0]
 800f136:	f7f4 fc9d 	bl	8003a74 <_fstat>
 800f13a:	1c43      	adds	r3, r0, #1
 800f13c:	d102      	bne.n	800f144 <_fstat_r+0x1c>
 800f13e:	682b      	ldr	r3, [r5, #0]
 800f140:	b103      	cbz	r3, 800f144 <_fstat_r+0x1c>
 800f142:	6023      	str	r3, [r4, #0]
 800f144:	bd38      	pop	{r3, r4, r5, pc}
 800f146:	bf00      	nop
 800f148:	200010f8 	.word	0x200010f8

0800f14c <_isatty_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	4d06      	ldr	r5, [pc, #24]	@ (800f168 <_isatty_r+0x1c>)
 800f150:	2300      	movs	r3, #0
 800f152:	4604      	mov	r4, r0
 800f154:	4608      	mov	r0, r1
 800f156:	602b      	str	r3, [r5, #0]
 800f158:	f7f4 fc9c 	bl	8003a94 <_isatty>
 800f15c:	1c43      	adds	r3, r0, #1
 800f15e:	d102      	bne.n	800f166 <_isatty_r+0x1a>
 800f160:	682b      	ldr	r3, [r5, #0]
 800f162:	b103      	cbz	r3, 800f166 <_isatty_r+0x1a>
 800f164:	6023      	str	r3, [r4, #0]
 800f166:	bd38      	pop	{r3, r4, r5, pc}
 800f168:	200010f8 	.word	0x200010f8

0800f16c <_sbrk_r>:
 800f16c:	b538      	push	{r3, r4, r5, lr}
 800f16e:	4d06      	ldr	r5, [pc, #24]	@ (800f188 <_sbrk_r+0x1c>)
 800f170:	2300      	movs	r3, #0
 800f172:	4604      	mov	r4, r0
 800f174:	4608      	mov	r0, r1
 800f176:	602b      	str	r3, [r5, #0]
 800f178:	f7f4 fca4 	bl	8003ac4 <_sbrk>
 800f17c:	1c43      	adds	r3, r0, #1
 800f17e:	d102      	bne.n	800f186 <_sbrk_r+0x1a>
 800f180:	682b      	ldr	r3, [r5, #0]
 800f182:	b103      	cbz	r3, 800f186 <_sbrk_r+0x1a>
 800f184:	6023      	str	r3, [r4, #0]
 800f186:	bd38      	pop	{r3, r4, r5, pc}
 800f188:	200010f8 	.word	0x200010f8

0800f18c <memcpy>:
 800f18c:	440a      	add	r2, r1
 800f18e:	4291      	cmp	r1, r2
 800f190:	f100 33ff 	add.w	r3, r0, #4294967295
 800f194:	d100      	bne.n	800f198 <memcpy+0xc>
 800f196:	4770      	bx	lr
 800f198:	b510      	push	{r4, lr}
 800f19a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f19e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1a2:	4291      	cmp	r1, r2
 800f1a4:	d1f9      	bne.n	800f19a <memcpy+0xe>
 800f1a6:	bd10      	pop	{r4, pc}

0800f1a8 <nan>:
 800f1a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f1b0 <nan+0x8>
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	00000000 	.word	0x00000000
 800f1b4:	7ff80000 	.word	0x7ff80000

0800f1b8 <abort>:
 800f1b8:	b508      	push	{r3, lr}
 800f1ba:	2006      	movs	r0, #6
 800f1bc:	f000 fbc4 	bl	800f948 <raise>
 800f1c0:	2001      	movs	r0, #1
 800f1c2:	f7f4 fc23 	bl	8003a0c <_exit>

0800f1c6 <_calloc_r>:
 800f1c6:	b570      	push	{r4, r5, r6, lr}
 800f1c8:	fba1 5402 	umull	r5, r4, r1, r2
 800f1cc:	b934      	cbnz	r4, 800f1dc <_calloc_r+0x16>
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	f7fd fff2 	bl	800d1b8 <_malloc_r>
 800f1d4:	4606      	mov	r6, r0
 800f1d6:	b928      	cbnz	r0, 800f1e4 <_calloc_r+0x1e>
 800f1d8:	4630      	mov	r0, r6
 800f1da:	bd70      	pop	{r4, r5, r6, pc}
 800f1dc:	220c      	movs	r2, #12
 800f1de:	6002      	str	r2, [r0, #0]
 800f1e0:	2600      	movs	r6, #0
 800f1e2:	e7f9      	b.n	800f1d8 <_calloc_r+0x12>
 800f1e4:	462a      	mov	r2, r5
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	f7fd f817 	bl	800c21a <memset>
 800f1ec:	e7f4      	b.n	800f1d8 <_calloc_r+0x12>

0800f1ee <rshift>:
 800f1ee:	6903      	ldr	r3, [r0, #16]
 800f1f0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f1f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1f8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f1fc:	f100 0414 	add.w	r4, r0, #20
 800f200:	dd45      	ble.n	800f28e <rshift+0xa0>
 800f202:	f011 011f 	ands.w	r1, r1, #31
 800f206:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f20a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f20e:	d10c      	bne.n	800f22a <rshift+0x3c>
 800f210:	f100 0710 	add.w	r7, r0, #16
 800f214:	4629      	mov	r1, r5
 800f216:	42b1      	cmp	r1, r6
 800f218:	d334      	bcc.n	800f284 <rshift+0x96>
 800f21a:	1a9b      	subs	r3, r3, r2
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	1eea      	subs	r2, r5, #3
 800f220:	4296      	cmp	r6, r2
 800f222:	bf38      	it	cc
 800f224:	2300      	movcc	r3, #0
 800f226:	4423      	add	r3, r4
 800f228:	e015      	b.n	800f256 <rshift+0x68>
 800f22a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f22e:	f1c1 0820 	rsb	r8, r1, #32
 800f232:	40cf      	lsrs	r7, r1
 800f234:	f105 0e04 	add.w	lr, r5, #4
 800f238:	46a1      	mov	r9, r4
 800f23a:	4576      	cmp	r6, lr
 800f23c:	46f4      	mov	ip, lr
 800f23e:	d815      	bhi.n	800f26c <rshift+0x7e>
 800f240:	1a9a      	subs	r2, r3, r2
 800f242:	0092      	lsls	r2, r2, #2
 800f244:	3a04      	subs	r2, #4
 800f246:	3501      	adds	r5, #1
 800f248:	42ae      	cmp	r6, r5
 800f24a:	bf38      	it	cc
 800f24c:	2200      	movcc	r2, #0
 800f24e:	18a3      	adds	r3, r4, r2
 800f250:	50a7      	str	r7, [r4, r2]
 800f252:	b107      	cbz	r7, 800f256 <rshift+0x68>
 800f254:	3304      	adds	r3, #4
 800f256:	1b1a      	subs	r2, r3, r4
 800f258:	42a3      	cmp	r3, r4
 800f25a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f25e:	bf08      	it	eq
 800f260:	2300      	moveq	r3, #0
 800f262:	6102      	str	r2, [r0, #16]
 800f264:	bf08      	it	eq
 800f266:	6143      	streq	r3, [r0, #20]
 800f268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f26c:	f8dc c000 	ldr.w	ip, [ip]
 800f270:	fa0c fc08 	lsl.w	ip, ip, r8
 800f274:	ea4c 0707 	orr.w	r7, ip, r7
 800f278:	f849 7b04 	str.w	r7, [r9], #4
 800f27c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f280:	40cf      	lsrs	r7, r1
 800f282:	e7da      	b.n	800f23a <rshift+0x4c>
 800f284:	f851 cb04 	ldr.w	ip, [r1], #4
 800f288:	f847 cf04 	str.w	ip, [r7, #4]!
 800f28c:	e7c3      	b.n	800f216 <rshift+0x28>
 800f28e:	4623      	mov	r3, r4
 800f290:	e7e1      	b.n	800f256 <rshift+0x68>

0800f292 <__hexdig_fun>:
 800f292:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f296:	2b09      	cmp	r3, #9
 800f298:	d802      	bhi.n	800f2a0 <__hexdig_fun+0xe>
 800f29a:	3820      	subs	r0, #32
 800f29c:	b2c0      	uxtb	r0, r0
 800f29e:	4770      	bx	lr
 800f2a0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f2a4:	2b05      	cmp	r3, #5
 800f2a6:	d801      	bhi.n	800f2ac <__hexdig_fun+0x1a>
 800f2a8:	3847      	subs	r0, #71	@ 0x47
 800f2aa:	e7f7      	b.n	800f29c <__hexdig_fun+0xa>
 800f2ac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f2b0:	2b05      	cmp	r3, #5
 800f2b2:	d801      	bhi.n	800f2b8 <__hexdig_fun+0x26>
 800f2b4:	3827      	subs	r0, #39	@ 0x27
 800f2b6:	e7f1      	b.n	800f29c <__hexdig_fun+0xa>
 800f2b8:	2000      	movs	r0, #0
 800f2ba:	4770      	bx	lr

0800f2bc <__gethex>:
 800f2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c0:	b085      	sub	sp, #20
 800f2c2:	468a      	mov	sl, r1
 800f2c4:	9302      	str	r3, [sp, #8]
 800f2c6:	680b      	ldr	r3, [r1, #0]
 800f2c8:	9001      	str	r0, [sp, #4]
 800f2ca:	4690      	mov	r8, r2
 800f2cc:	1c9c      	adds	r4, r3, #2
 800f2ce:	46a1      	mov	r9, r4
 800f2d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f2d4:	2830      	cmp	r0, #48	@ 0x30
 800f2d6:	d0fa      	beq.n	800f2ce <__gethex+0x12>
 800f2d8:	eba9 0303 	sub.w	r3, r9, r3
 800f2dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800f2e0:	f7ff ffd7 	bl	800f292 <__hexdig_fun>
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d168      	bne.n	800f3bc <__gethex+0x100>
 800f2ea:	49a0      	ldr	r1, [pc, #640]	@ (800f56c <__gethex+0x2b0>)
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	4648      	mov	r0, r9
 800f2f0:	f7ff ff08 	bl	800f104 <strncmp>
 800f2f4:	4607      	mov	r7, r0
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d167      	bne.n	800f3ca <__gethex+0x10e>
 800f2fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f2fe:	4626      	mov	r6, r4
 800f300:	f7ff ffc7 	bl	800f292 <__hexdig_fun>
 800f304:	2800      	cmp	r0, #0
 800f306:	d062      	beq.n	800f3ce <__gethex+0x112>
 800f308:	4623      	mov	r3, r4
 800f30a:	7818      	ldrb	r0, [r3, #0]
 800f30c:	2830      	cmp	r0, #48	@ 0x30
 800f30e:	4699      	mov	r9, r3
 800f310:	f103 0301 	add.w	r3, r3, #1
 800f314:	d0f9      	beq.n	800f30a <__gethex+0x4e>
 800f316:	f7ff ffbc 	bl	800f292 <__hexdig_fun>
 800f31a:	fab0 f580 	clz	r5, r0
 800f31e:	096d      	lsrs	r5, r5, #5
 800f320:	f04f 0b01 	mov.w	fp, #1
 800f324:	464a      	mov	r2, r9
 800f326:	4616      	mov	r6, r2
 800f328:	3201      	adds	r2, #1
 800f32a:	7830      	ldrb	r0, [r6, #0]
 800f32c:	f7ff ffb1 	bl	800f292 <__hexdig_fun>
 800f330:	2800      	cmp	r0, #0
 800f332:	d1f8      	bne.n	800f326 <__gethex+0x6a>
 800f334:	498d      	ldr	r1, [pc, #564]	@ (800f56c <__gethex+0x2b0>)
 800f336:	2201      	movs	r2, #1
 800f338:	4630      	mov	r0, r6
 800f33a:	f7ff fee3 	bl	800f104 <strncmp>
 800f33e:	2800      	cmp	r0, #0
 800f340:	d13f      	bne.n	800f3c2 <__gethex+0x106>
 800f342:	b944      	cbnz	r4, 800f356 <__gethex+0x9a>
 800f344:	1c74      	adds	r4, r6, #1
 800f346:	4622      	mov	r2, r4
 800f348:	4616      	mov	r6, r2
 800f34a:	3201      	adds	r2, #1
 800f34c:	7830      	ldrb	r0, [r6, #0]
 800f34e:	f7ff ffa0 	bl	800f292 <__hexdig_fun>
 800f352:	2800      	cmp	r0, #0
 800f354:	d1f8      	bne.n	800f348 <__gethex+0x8c>
 800f356:	1ba4      	subs	r4, r4, r6
 800f358:	00a7      	lsls	r7, r4, #2
 800f35a:	7833      	ldrb	r3, [r6, #0]
 800f35c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f360:	2b50      	cmp	r3, #80	@ 0x50
 800f362:	d13e      	bne.n	800f3e2 <__gethex+0x126>
 800f364:	7873      	ldrb	r3, [r6, #1]
 800f366:	2b2b      	cmp	r3, #43	@ 0x2b
 800f368:	d033      	beq.n	800f3d2 <__gethex+0x116>
 800f36a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f36c:	d034      	beq.n	800f3d8 <__gethex+0x11c>
 800f36e:	1c71      	adds	r1, r6, #1
 800f370:	2400      	movs	r4, #0
 800f372:	7808      	ldrb	r0, [r1, #0]
 800f374:	f7ff ff8d 	bl	800f292 <__hexdig_fun>
 800f378:	1e43      	subs	r3, r0, #1
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b18      	cmp	r3, #24
 800f37e:	d830      	bhi.n	800f3e2 <__gethex+0x126>
 800f380:	f1a0 0210 	sub.w	r2, r0, #16
 800f384:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f388:	f7ff ff83 	bl	800f292 <__hexdig_fun>
 800f38c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f390:	fa5f fc8c 	uxtb.w	ip, ip
 800f394:	f1bc 0f18 	cmp.w	ip, #24
 800f398:	f04f 030a 	mov.w	r3, #10
 800f39c:	d91e      	bls.n	800f3dc <__gethex+0x120>
 800f39e:	b104      	cbz	r4, 800f3a2 <__gethex+0xe6>
 800f3a0:	4252      	negs	r2, r2
 800f3a2:	4417      	add	r7, r2
 800f3a4:	f8ca 1000 	str.w	r1, [sl]
 800f3a8:	b1ed      	cbz	r5, 800f3e6 <__gethex+0x12a>
 800f3aa:	f1bb 0f00 	cmp.w	fp, #0
 800f3ae:	bf0c      	ite	eq
 800f3b0:	2506      	moveq	r5, #6
 800f3b2:	2500      	movne	r5, #0
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	b005      	add	sp, #20
 800f3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3bc:	2500      	movs	r5, #0
 800f3be:	462c      	mov	r4, r5
 800f3c0:	e7b0      	b.n	800f324 <__gethex+0x68>
 800f3c2:	2c00      	cmp	r4, #0
 800f3c4:	d1c7      	bne.n	800f356 <__gethex+0x9a>
 800f3c6:	4627      	mov	r7, r4
 800f3c8:	e7c7      	b.n	800f35a <__gethex+0x9e>
 800f3ca:	464e      	mov	r6, r9
 800f3cc:	462f      	mov	r7, r5
 800f3ce:	2501      	movs	r5, #1
 800f3d0:	e7c3      	b.n	800f35a <__gethex+0x9e>
 800f3d2:	2400      	movs	r4, #0
 800f3d4:	1cb1      	adds	r1, r6, #2
 800f3d6:	e7cc      	b.n	800f372 <__gethex+0xb6>
 800f3d8:	2401      	movs	r4, #1
 800f3da:	e7fb      	b.n	800f3d4 <__gethex+0x118>
 800f3dc:	fb03 0002 	mla	r0, r3, r2, r0
 800f3e0:	e7ce      	b.n	800f380 <__gethex+0xc4>
 800f3e2:	4631      	mov	r1, r6
 800f3e4:	e7de      	b.n	800f3a4 <__gethex+0xe8>
 800f3e6:	eba6 0309 	sub.w	r3, r6, r9
 800f3ea:	3b01      	subs	r3, #1
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	2b07      	cmp	r3, #7
 800f3f0:	dc0a      	bgt.n	800f408 <__gethex+0x14c>
 800f3f2:	9801      	ldr	r0, [sp, #4]
 800f3f4:	f7fd ff6c 	bl	800d2d0 <_Balloc>
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	b940      	cbnz	r0, 800f40e <__gethex+0x152>
 800f3fc:	4b5c      	ldr	r3, [pc, #368]	@ (800f570 <__gethex+0x2b4>)
 800f3fe:	4602      	mov	r2, r0
 800f400:	21e4      	movs	r1, #228	@ 0xe4
 800f402:	485c      	ldr	r0, [pc, #368]	@ (800f574 <__gethex+0x2b8>)
 800f404:	f7fc ffec 	bl	800c3e0 <__assert_func>
 800f408:	3101      	adds	r1, #1
 800f40a:	105b      	asrs	r3, r3, #1
 800f40c:	e7ef      	b.n	800f3ee <__gethex+0x132>
 800f40e:	f100 0a14 	add.w	sl, r0, #20
 800f412:	2300      	movs	r3, #0
 800f414:	4655      	mov	r5, sl
 800f416:	469b      	mov	fp, r3
 800f418:	45b1      	cmp	r9, r6
 800f41a:	d337      	bcc.n	800f48c <__gethex+0x1d0>
 800f41c:	f845 bb04 	str.w	fp, [r5], #4
 800f420:	eba5 050a 	sub.w	r5, r5, sl
 800f424:	10ad      	asrs	r5, r5, #2
 800f426:	6125      	str	r5, [r4, #16]
 800f428:	4658      	mov	r0, fp
 800f42a:	f7fe f843 	bl	800d4b4 <__hi0bits>
 800f42e:	016d      	lsls	r5, r5, #5
 800f430:	f8d8 6000 	ldr.w	r6, [r8]
 800f434:	1a2d      	subs	r5, r5, r0
 800f436:	42b5      	cmp	r5, r6
 800f438:	dd54      	ble.n	800f4e4 <__gethex+0x228>
 800f43a:	1bad      	subs	r5, r5, r6
 800f43c:	4629      	mov	r1, r5
 800f43e:	4620      	mov	r0, r4
 800f440:	f7fe fbcf 	bl	800dbe2 <__any_on>
 800f444:	4681      	mov	r9, r0
 800f446:	b178      	cbz	r0, 800f468 <__gethex+0x1ac>
 800f448:	1e6b      	subs	r3, r5, #1
 800f44a:	1159      	asrs	r1, r3, #5
 800f44c:	f003 021f 	and.w	r2, r3, #31
 800f450:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f454:	f04f 0901 	mov.w	r9, #1
 800f458:	fa09 f202 	lsl.w	r2, r9, r2
 800f45c:	420a      	tst	r2, r1
 800f45e:	d003      	beq.n	800f468 <__gethex+0x1ac>
 800f460:	454b      	cmp	r3, r9
 800f462:	dc36      	bgt.n	800f4d2 <__gethex+0x216>
 800f464:	f04f 0902 	mov.w	r9, #2
 800f468:	4629      	mov	r1, r5
 800f46a:	4620      	mov	r0, r4
 800f46c:	f7ff febf 	bl	800f1ee <rshift>
 800f470:	442f      	add	r7, r5
 800f472:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f476:	42bb      	cmp	r3, r7
 800f478:	da42      	bge.n	800f500 <__gethex+0x244>
 800f47a:	9801      	ldr	r0, [sp, #4]
 800f47c:	4621      	mov	r1, r4
 800f47e:	f7fd ff67 	bl	800d350 <_Bfree>
 800f482:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f484:	2300      	movs	r3, #0
 800f486:	6013      	str	r3, [r2, #0]
 800f488:	25a3      	movs	r5, #163	@ 0xa3
 800f48a:	e793      	b.n	800f3b4 <__gethex+0xf8>
 800f48c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f490:	2a2e      	cmp	r2, #46	@ 0x2e
 800f492:	d012      	beq.n	800f4ba <__gethex+0x1fe>
 800f494:	2b20      	cmp	r3, #32
 800f496:	d104      	bne.n	800f4a2 <__gethex+0x1e6>
 800f498:	f845 bb04 	str.w	fp, [r5], #4
 800f49c:	f04f 0b00 	mov.w	fp, #0
 800f4a0:	465b      	mov	r3, fp
 800f4a2:	7830      	ldrb	r0, [r6, #0]
 800f4a4:	9303      	str	r3, [sp, #12]
 800f4a6:	f7ff fef4 	bl	800f292 <__hexdig_fun>
 800f4aa:	9b03      	ldr	r3, [sp, #12]
 800f4ac:	f000 000f 	and.w	r0, r0, #15
 800f4b0:	4098      	lsls	r0, r3
 800f4b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	e7ae      	b.n	800f418 <__gethex+0x15c>
 800f4ba:	45b1      	cmp	r9, r6
 800f4bc:	d8ea      	bhi.n	800f494 <__gethex+0x1d8>
 800f4be:	492b      	ldr	r1, [pc, #172]	@ (800f56c <__gethex+0x2b0>)
 800f4c0:	9303      	str	r3, [sp, #12]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	f7ff fe1d 	bl	800f104 <strncmp>
 800f4ca:	9b03      	ldr	r3, [sp, #12]
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d1e1      	bne.n	800f494 <__gethex+0x1d8>
 800f4d0:	e7a2      	b.n	800f418 <__gethex+0x15c>
 800f4d2:	1ea9      	subs	r1, r5, #2
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f7fe fb84 	bl	800dbe2 <__any_on>
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d0c2      	beq.n	800f464 <__gethex+0x1a8>
 800f4de:	f04f 0903 	mov.w	r9, #3
 800f4e2:	e7c1      	b.n	800f468 <__gethex+0x1ac>
 800f4e4:	da09      	bge.n	800f4fa <__gethex+0x23e>
 800f4e6:	1b75      	subs	r5, r6, r5
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	9801      	ldr	r0, [sp, #4]
 800f4ec:	462a      	mov	r2, r5
 800f4ee:	f7fe f93f 	bl	800d770 <__lshift>
 800f4f2:	1b7f      	subs	r7, r7, r5
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	f100 0a14 	add.w	sl, r0, #20
 800f4fa:	f04f 0900 	mov.w	r9, #0
 800f4fe:	e7b8      	b.n	800f472 <__gethex+0x1b6>
 800f500:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f504:	42bd      	cmp	r5, r7
 800f506:	dd6f      	ble.n	800f5e8 <__gethex+0x32c>
 800f508:	1bed      	subs	r5, r5, r7
 800f50a:	42ae      	cmp	r6, r5
 800f50c:	dc34      	bgt.n	800f578 <__gethex+0x2bc>
 800f50e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f512:	2b02      	cmp	r3, #2
 800f514:	d022      	beq.n	800f55c <__gethex+0x2a0>
 800f516:	2b03      	cmp	r3, #3
 800f518:	d024      	beq.n	800f564 <__gethex+0x2a8>
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d115      	bne.n	800f54a <__gethex+0x28e>
 800f51e:	42ae      	cmp	r6, r5
 800f520:	d113      	bne.n	800f54a <__gethex+0x28e>
 800f522:	2e01      	cmp	r6, #1
 800f524:	d10b      	bne.n	800f53e <__gethex+0x282>
 800f526:	9a02      	ldr	r2, [sp, #8]
 800f528:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f52c:	6013      	str	r3, [r2, #0]
 800f52e:	2301      	movs	r3, #1
 800f530:	6123      	str	r3, [r4, #16]
 800f532:	f8ca 3000 	str.w	r3, [sl]
 800f536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f538:	2562      	movs	r5, #98	@ 0x62
 800f53a:	601c      	str	r4, [r3, #0]
 800f53c:	e73a      	b.n	800f3b4 <__gethex+0xf8>
 800f53e:	1e71      	subs	r1, r6, #1
 800f540:	4620      	mov	r0, r4
 800f542:	f7fe fb4e 	bl	800dbe2 <__any_on>
 800f546:	2800      	cmp	r0, #0
 800f548:	d1ed      	bne.n	800f526 <__gethex+0x26a>
 800f54a:	9801      	ldr	r0, [sp, #4]
 800f54c:	4621      	mov	r1, r4
 800f54e:	f7fd feff 	bl	800d350 <_Bfree>
 800f552:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f554:	2300      	movs	r3, #0
 800f556:	6013      	str	r3, [r2, #0]
 800f558:	2550      	movs	r5, #80	@ 0x50
 800f55a:	e72b      	b.n	800f3b4 <__gethex+0xf8>
 800f55c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1f3      	bne.n	800f54a <__gethex+0x28e>
 800f562:	e7e0      	b.n	800f526 <__gethex+0x26a>
 800f564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f566:	2b00      	cmp	r3, #0
 800f568:	d1dd      	bne.n	800f526 <__gethex+0x26a>
 800f56a:	e7ee      	b.n	800f54a <__gethex+0x28e>
 800f56c:	08011406 	.word	0x08011406
 800f570:	0801139c 	.word	0x0801139c
 800f574:	08011421 	.word	0x08011421
 800f578:	1e6f      	subs	r7, r5, #1
 800f57a:	f1b9 0f00 	cmp.w	r9, #0
 800f57e:	d130      	bne.n	800f5e2 <__gethex+0x326>
 800f580:	b127      	cbz	r7, 800f58c <__gethex+0x2d0>
 800f582:	4639      	mov	r1, r7
 800f584:	4620      	mov	r0, r4
 800f586:	f7fe fb2c 	bl	800dbe2 <__any_on>
 800f58a:	4681      	mov	r9, r0
 800f58c:	117a      	asrs	r2, r7, #5
 800f58e:	2301      	movs	r3, #1
 800f590:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f594:	f007 071f 	and.w	r7, r7, #31
 800f598:	40bb      	lsls	r3, r7
 800f59a:	4213      	tst	r3, r2
 800f59c:	4629      	mov	r1, r5
 800f59e:	4620      	mov	r0, r4
 800f5a0:	bf18      	it	ne
 800f5a2:	f049 0902 	orrne.w	r9, r9, #2
 800f5a6:	f7ff fe22 	bl	800f1ee <rshift>
 800f5aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f5ae:	1b76      	subs	r6, r6, r5
 800f5b0:	2502      	movs	r5, #2
 800f5b2:	f1b9 0f00 	cmp.w	r9, #0
 800f5b6:	d047      	beq.n	800f648 <__gethex+0x38c>
 800f5b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d015      	beq.n	800f5ec <__gethex+0x330>
 800f5c0:	2b03      	cmp	r3, #3
 800f5c2:	d017      	beq.n	800f5f4 <__gethex+0x338>
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d109      	bne.n	800f5dc <__gethex+0x320>
 800f5c8:	f019 0f02 	tst.w	r9, #2
 800f5cc:	d006      	beq.n	800f5dc <__gethex+0x320>
 800f5ce:	f8da 3000 	ldr.w	r3, [sl]
 800f5d2:	ea49 0903 	orr.w	r9, r9, r3
 800f5d6:	f019 0f01 	tst.w	r9, #1
 800f5da:	d10e      	bne.n	800f5fa <__gethex+0x33e>
 800f5dc:	f045 0510 	orr.w	r5, r5, #16
 800f5e0:	e032      	b.n	800f648 <__gethex+0x38c>
 800f5e2:	f04f 0901 	mov.w	r9, #1
 800f5e6:	e7d1      	b.n	800f58c <__gethex+0x2d0>
 800f5e8:	2501      	movs	r5, #1
 800f5ea:	e7e2      	b.n	800f5b2 <__gethex+0x2f6>
 800f5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5ee:	f1c3 0301 	rsb	r3, r3, #1
 800f5f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d0f0      	beq.n	800f5dc <__gethex+0x320>
 800f5fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f5fe:	f104 0314 	add.w	r3, r4, #20
 800f602:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f606:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f60a:	f04f 0c00 	mov.w	ip, #0
 800f60e:	4618      	mov	r0, r3
 800f610:	f853 2b04 	ldr.w	r2, [r3], #4
 800f614:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f618:	d01b      	beq.n	800f652 <__gethex+0x396>
 800f61a:	3201      	adds	r2, #1
 800f61c:	6002      	str	r2, [r0, #0]
 800f61e:	2d02      	cmp	r5, #2
 800f620:	f104 0314 	add.w	r3, r4, #20
 800f624:	d13c      	bne.n	800f6a0 <__gethex+0x3e4>
 800f626:	f8d8 2000 	ldr.w	r2, [r8]
 800f62a:	3a01      	subs	r2, #1
 800f62c:	42b2      	cmp	r2, r6
 800f62e:	d109      	bne.n	800f644 <__gethex+0x388>
 800f630:	1171      	asrs	r1, r6, #5
 800f632:	2201      	movs	r2, #1
 800f634:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f638:	f006 061f 	and.w	r6, r6, #31
 800f63c:	fa02 f606 	lsl.w	r6, r2, r6
 800f640:	421e      	tst	r6, r3
 800f642:	d13a      	bne.n	800f6ba <__gethex+0x3fe>
 800f644:	f045 0520 	orr.w	r5, r5, #32
 800f648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f64a:	601c      	str	r4, [r3, #0]
 800f64c:	9b02      	ldr	r3, [sp, #8]
 800f64e:	601f      	str	r7, [r3, #0]
 800f650:	e6b0      	b.n	800f3b4 <__gethex+0xf8>
 800f652:	4299      	cmp	r1, r3
 800f654:	f843 cc04 	str.w	ip, [r3, #-4]
 800f658:	d8d9      	bhi.n	800f60e <__gethex+0x352>
 800f65a:	68a3      	ldr	r3, [r4, #8]
 800f65c:	459b      	cmp	fp, r3
 800f65e:	db17      	blt.n	800f690 <__gethex+0x3d4>
 800f660:	6861      	ldr	r1, [r4, #4]
 800f662:	9801      	ldr	r0, [sp, #4]
 800f664:	3101      	adds	r1, #1
 800f666:	f7fd fe33 	bl	800d2d0 <_Balloc>
 800f66a:	4681      	mov	r9, r0
 800f66c:	b918      	cbnz	r0, 800f676 <__gethex+0x3ba>
 800f66e:	4b1a      	ldr	r3, [pc, #104]	@ (800f6d8 <__gethex+0x41c>)
 800f670:	4602      	mov	r2, r0
 800f672:	2184      	movs	r1, #132	@ 0x84
 800f674:	e6c5      	b.n	800f402 <__gethex+0x146>
 800f676:	6922      	ldr	r2, [r4, #16]
 800f678:	3202      	adds	r2, #2
 800f67a:	f104 010c 	add.w	r1, r4, #12
 800f67e:	0092      	lsls	r2, r2, #2
 800f680:	300c      	adds	r0, #12
 800f682:	f7ff fd83 	bl	800f18c <memcpy>
 800f686:	4621      	mov	r1, r4
 800f688:	9801      	ldr	r0, [sp, #4]
 800f68a:	f7fd fe61 	bl	800d350 <_Bfree>
 800f68e:	464c      	mov	r4, r9
 800f690:	6923      	ldr	r3, [r4, #16]
 800f692:	1c5a      	adds	r2, r3, #1
 800f694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f698:	6122      	str	r2, [r4, #16]
 800f69a:	2201      	movs	r2, #1
 800f69c:	615a      	str	r2, [r3, #20]
 800f69e:	e7be      	b.n	800f61e <__gethex+0x362>
 800f6a0:	6922      	ldr	r2, [r4, #16]
 800f6a2:	455a      	cmp	r2, fp
 800f6a4:	dd0b      	ble.n	800f6be <__gethex+0x402>
 800f6a6:	2101      	movs	r1, #1
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f7ff fda0 	bl	800f1ee <rshift>
 800f6ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6b2:	3701      	adds	r7, #1
 800f6b4:	42bb      	cmp	r3, r7
 800f6b6:	f6ff aee0 	blt.w	800f47a <__gethex+0x1be>
 800f6ba:	2501      	movs	r5, #1
 800f6bc:	e7c2      	b.n	800f644 <__gethex+0x388>
 800f6be:	f016 061f 	ands.w	r6, r6, #31
 800f6c2:	d0fa      	beq.n	800f6ba <__gethex+0x3fe>
 800f6c4:	4453      	add	r3, sl
 800f6c6:	f1c6 0620 	rsb	r6, r6, #32
 800f6ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f6ce:	f7fd fef1 	bl	800d4b4 <__hi0bits>
 800f6d2:	42b0      	cmp	r0, r6
 800f6d4:	dbe7      	blt.n	800f6a6 <__gethex+0x3ea>
 800f6d6:	e7f0      	b.n	800f6ba <__gethex+0x3fe>
 800f6d8:	0801139c 	.word	0x0801139c

0800f6dc <L_shift>:
 800f6dc:	f1c2 0208 	rsb	r2, r2, #8
 800f6e0:	0092      	lsls	r2, r2, #2
 800f6e2:	b570      	push	{r4, r5, r6, lr}
 800f6e4:	f1c2 0620 	rsb	r6, r2, #32
 800f6e8:	6843      	ldr	r3, [r0, #4]
 800f6ea:	6804      	ldr	r4, [r0, #0]
 800f6ec:	fa03 f506 	lsl.w	r5, r3, r6
 800f6f0:	432c      	orrs	r4, r5
 800f6f2:	40d3      	lsrs	r3, r2
 800f6f4:	6004      	str	r4, [r0, #0]
 800f6f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f6fa:	4288      	cmp	r0, r1
 800f6fc:	d3f4      	bcc.n	800f6e8 <L_shift+0xc>
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}

0800f700 <__match>:
 800f700:	b530      	push	{r4, r5, lr}
 800f702:	6803      	ldr	r3, [r0, #0]
 800f704:	3301      	adds	r3, #1
 800f706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f70a:	b914      	cbnz	r4, 800f712 <__match+0x12>
 800f70c:	6003      	str	r3, [r0, #0]
 800f70e:	2001      	movs	r0, #1
 800f710:	bd30      	pop	{r4, r5, pc}
 800f712:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f716:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f71a:	2d19      	cmp	r5, #25
 800f71c:	bf98      	it	ls
 800f71e:	3220      	addls	r2, #32
 800f720:	42a2      	cmp	r2, r4
 800f722:	d0f0      	beq.n	800f706 <__match+0x6>
 800f724:	2000      	movs	r0, #0
 800f726:	e7f3      	b.n	800f710 <__match+0x10>

0800f728 <__hexnan>:
 800f728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f72c:	680b      	ldr	r3, [r1, #0]
 800f72e:	6801      	ldr	r1, [r0, #0]
 800f730:	115e      	asrs	r6, r3, #5
 800f732:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f736:	f013 031f 	ands.w	r3, r3, #31
 800f73a:	b087      	sub	sp, #28
 800f73c:	bf18      	it	ne
 800f73e:	3604      	addne	r6, #4
 800f740:	2500      	movs	r5, #0
 800f742:	1f37      	subs	r7, r6, #4
 800f744:	4682      	mov	sl, r0
 800f746:	4690      	mov	r8, r2
 800f748:	9301      	str	r3, [sp, #4]
 800f74a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f74e:	46b9      	mov	r9, r7
 800f750:	463c      	mov	r4, r7
 800f752:	9502      	str	r5, [sp, #8]
 800f754:	46ab      	mov	fp, r5
 800f756:	784a      	ldrb	r2, [r1, #1]
 800f758:	1c4b      	adds	r3, r1, #1
 800f75a:	9303      	str	r3, [sp, #12]
 800f75c:	b342      	cbz	r2, 800f7b0 <__hexnan+0x88>
 800f75e:	4610      	mov	r0, r2
 800f760:	9105      	str	r1, [sp, #20]
 800f762:	9204      	str	r2, [sp, #16]
 800f764:	f7ff fd95 	bl	800f292 <__hexdig_fun>
 800f768:	2800      	cmp	r0, #0
 800f76a:	d151      	bne.n	800f810 <__hexnan+0xe8>
 800f76c:	9a04      	ldr	r2, [sp, #16]
 800f76e:	9905      	ldr	r1, [sp, #20]
 800f770:	2a20      	cmp	r2, #32
 800f772:	d818      	bhi.n	800f7a6 <__hexnan+0x7e>
 800f774:	9b02      	ldr	r3, [sp, #8]
 800f776:	459b      	cmp	fp, r3
 800f778:	dd13      	ble.n	800f7a2 <__hexnan+0x7a>
 800f77a:	454c      	cmp	r4, r9
 800f77c:	d206      	bcs.n	800f78c <__hexnan+0x64>
 800f77e:	2d07      	cmp	r5, #7
 800f780:	dc04      	bgt.n	800f78c <__hexnan+0x64>
 800f782:	462a      	mov	r2, r5
 800f784:	4649      	mov	r1, r9
 800f786:	4620      	mov	r0, r4
 800f788:	f7ff ffa8 	bl	800f6dc <L_shift>
 800f78c:	4544      	cmp	r4, r8
 800f78e:	d952      	bls.n	800f836 <__hexnan+0x10e>
 800f790:	2300      	movs	r3, #0
 800f792:	f1a4 0904 	sub.w	r9, r4, #4
 800f796:	f844 3c04 	str.w	r3, [r4, #-4]
 800f79a:	f8cd b008 	str.w	fp, [sp, #8]
 800f79e:	464c      	mov	r4, r9
 800f7a0:	461d      	mov	r5, r3
 800f7a2:	9903      	ldr	r1, [sp, #12]
 800f7a4:	e7d7      	b.n	800f756 <__hexnan+0x2e>
 800f7a6:	2a29      	cmp	r2, #41	@ 0x29
 800f7a8:	d157      	bne.n	800f85a <__hexnan+0x132>
 800f7aa:	3102      	adds	r1, #2
 800f7ac:	f8ca 1000 	str.w	r1, [sl]
 800f7b0:	f1bb 0f00 	cmp.w	fp, #0
 800f7b4:	d051      	beq.n	800f85a <__hexnan+0x132>
 800f7b6:	454c      	cmp	r4, r9
 800f7b8:	d206      	bcs.n	800f7c8 <__hexnan+0xa0>
 800f7ba:	2d07      	cmp	r5, #7
 800f7bc:	dc04      	bgt.n	800f7c8 <__hexnan+0xa0>
 800f7be:	462a      	mov	r2, r5
 800f7c0:	4649      	mov	r1, r9
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f7ff ff8a 	bl	800f6dc <L_shift>
 800f7c8:	4544      	cmp	r4, r8
 800f7ca:	d936      	bls.n	800f83a <__hexnan+0x112>
 800f7cc:	f1a8 0204 	sub.w	r2, r8, #4
 800f7d0:	4623      	mov	r3, r4
 800f7d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f7d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f7da:	429f      	cmp	r7, r3
 800f7dc:	d2f9      	bcs.n	800f7d2 <__hexnan+0xaa>
 800f7de:	1b3b      	subs	r3, r7, r4
 800f7e0:	f023 0303 	bic.w	r3, r3, #3
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	3401      	adds	r4, #1
 800f7e8:	3e03      	subs	r6, #3
 800f7ea:	42b4      	cmp	r4, r6
 800f7ec:	bf88      	it	hi
 800f7ee:	2304      	movhi	r3, #4
 800f7f0:	4443      	add	r3, r8
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f843 2b04 	str.w	r2, [r3], #4
 800f7f8:	429f      	cmp	r7, r3
 800f7fa:	d2fb      	bcs.n	800f7f4 <__hexnan+0xcc>
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	b91b      	cbnz	r3, 800f808 <__hexnan+0xe0>
 800f800:	4547      	cmp	r7, r8
 800f802:	d128      	bne.n	800f856 <__hexnan+0x12e>
 800f804:	2301      	movs	r3, #1
 800f806:	603b      	str	r3, [r7, #0]
 800f808:	2005      	movs	r0, #5
 800f80a:	b007      	add	sp, #28
 800f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f810:	3501      	adds	r5, #1
 800f812:	2d08      	cmp	r5, #8
 800f814:	f10b 0b01 	add.w	fp, fp, #1
 800f818:	dd06      	ble.n	800f828 <__hexnan+0x100>
 800f81a:	4544      	cmp	r4, r8
 800f81c:	d9c1      	bls.n	800f7a2 <__hexnan+0x7a>
 800f81e:	2300      	movs	r3, #0
 800f820:	f844 3c04 	str.w	r3, [r4, #-4]
 800f824:	2501      	movs	r5, #1
 800f826:	3c04      	subs	r4, #4
 800f828:	6822      	ldr	r2, [r4, #0]
 800f82a:	f000 000f 	and.w	r0, r0, #15
 800f82e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f832:	6020      	str	r0, [r4, #0]
 800f834:	e7b5      	b.n	800f7a2 <__hexnan+0x7a>
 800f836:	2508      	movs	r5, #8
 800f838:	e7b3      	b.n	800f7a2 <__hexnan+0x7a>
 800f83a:	9b01      	ldr	r3, [sp, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d0dd      	beq.n	800f7fc <__hexnan+0xd4>
 800f840:	f1c3 0320 	rsb	r3, r3, #32
 800f844:	f04f 32ff 	mov.w	r2, #4294967295
 800f848:	40da      	lsrs	r2, r3
 800f84a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f84e:	4013      	ands	r3, r2
 800f850:	f846 3c04 	str.w	r3, [r6, #-4]
 800f854:	e7d2      	b.n	800f7fc <__hexnan+0xd4>
 800f856:	3f04      	subs	r7, #4
 800f858:	e7d0      	b.n	800f7fc <__hexnan+0xd4>
 800f85a:	2004      	movs	r0, #4
 800f85c:	e7d5      	b.n	800f80a <__hexnan+0xe2>

0800f85e <__ascii_mbtowc>:
 800f85e:	b082      	sub	sp, #8
 800f860:	b901      	cbnz	r1, 800f864 <__ascii_mbtowc+0x6>
 800f862:	a901      	add	r1, sp, #4
 800f864:	b142      	cbz	r2, 800f878 <__ascii_mbtowc+0x1a>
 800f866:	b14b      	cbz	r3, 800f87c <__ascii_mbtowc+0x1e>
 800f868:	7813      	ldrb	r3, [r2, #0]
 800f86a:	600b      	str	r3, [r1, #0]
 800f86c:	7812      	ldrb	r2, [r2, #0]
 800f86e:	1e10      	subs	r0, r2, #0
 800f870:	bf18      	it	ne
 800f872:	2001      	movne	r0, #1
 800f874:	b002      	add	sp, #8
 800f876:	4770      	bx	lr
 800f878:	4610      	mov	r0, r2
 800f87a:	e7fb      	b.n	800f874 <__ascii_mbtowc+0x16>
 800f87c:	f06f 0001 	mvn.w	r0, #1
 800f880:	e7f8      	b.n	800f874 <__ascii_mbtowc+0x16>

0800f882 <_realloc_r>:
 800f882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f886:	4607      	mov	r7, r0
 800f888:	4614      	mov	r4, r2
 800f88a:	460d      	mov	r5, r1
 800f88c:	b921      	cbnz	r1, 800f898 <_realloc_r+0x16>
 800f88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f892:	4611      	mov	r1, r2
 800f894:	f7fd bc90 	b.w	800d1b8 <_malloc_r>
 800f898:	b92a      	cbnz	r2, 800f8a6 <_realloc_r+0x24>
 800f89a:	f7fd fc19 	bl	800d0d0 <_free_r>
 800f89e:	4625      	mov	r5, r4
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a6:	f000 f86b 	bl	800f980 <_malloc_usable_size_r>
 800f8aa:	4284      	cmp	r4, r0
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	d802      	bhi.n	800f8b6 <_realloc_r+0x34>
 800f8b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8b4:	d8f4      	bhi.n	800f8a0 <_realloc_r+0x1e>
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	4638      	mov	r0, r7
 800f8ba:	f7fd fc7d 	bl	800d1b8 <_malloc_r>
 800f8be:	4680      	mov	r8, r0
 800f8c0:	b908      	cbnz	r0, 800f8c6 <_realloc_r+0x44>
 800f8c2:	4645      	mov	r5, r8
 800f8c4:	e7ec      	b.n	800f8a0 <_realloc_r+0x1e>
 800f8c6:	42b4      	cmp	r4, r6
 800f8c8:	4622      	mov	r2, r4
 800f8ca:	4629      	mov	r1, r5
 800f8cc:	bf28      	it	cs
 800f8ce:	4632      	movcs	r2, r6
 800f8d0:	f7ff fc5c 	bl	800f18c <memcpy>
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	4638      	mov	r0, r7
 800f8d8:	f7fd fbfa 	bl	800d0d0 <_free_r>
 800f8dc:	e7f1      	b.n	800f8c2 <_realloc_r+0x40>

0800f8de <__ascii_wctomb>:
 800f8de:	4603      	mov	r3, r0
 800f8e0:	4608      	mov	r0, r1
 800f8e2:	b141      	cbz	r1, 800f8f6 <__ascii_wctomb+0x18>
 800f8e4:	2aff      	cmp	r2, #255	@ 0xff
 800f8e6:	d904      	bls.n	800f8f2 <__ascii_wctomb+0x14>
 800f8e8:	228a      	movs	r2, #138	@ 0x8a
 800f8ea:	601a      	str	r2, [r3, #0]
 800f8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f0:	4770      	bx	lr
 800f8f2:	700a      	strb	r2, [r1, #0]
 800f8f4:	2001      	movs	r0, #1
 800f8f6:	4770      	bx	lr

0800f8f8 <_raise_r>:
 800f8f8:	291f      	cmp	r1, #31
 800f8fa:	b538      	push	{r3, r4, r5, lr}
 800f8fc:	4605      	mov	r5, r0
 800f8fe:	460c      	mov	r4, r1
 800f900:	d904      	bls.n	800f90c <_raise_r+0x14>
 800f902:	2316      	movs	r3, #22
 800f904:	6003      	str	r3, [r0, #0]
 800f906:	f04f 30ff 	mov.w	r0, #4294967295
 800f90a:	bd38      	pop	{r3, r4, r5, pc}
 800f90c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f90e:	b112      	cbz	r2, 800f916 <_raise_r+0x1e>
 800f910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f914:	b94b      	cbnz	r3, 800f92a <_raise_r+0x32>
 800f916:	4628      	mov	r0, r5
 800f918:	f000 f830 	bl	800f97c <_getpid_r>
 800f91c:	4622      	mov	r2, r4
 800f91e:	4601      	mov	r1, r0
 800f920:	4628      	mov	r0, r5
 800f922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f926:	f000 b817 	b.w	800f958 <_kill_r>
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d00a      	beq.n	800f944 <_raise_r+0x4c>
 800f92e:	1c59      	adds	r1, r3, #1
 800f930:	d103      	bne.n	800f93a <_raise_r+0x42>
 800f932:	2316      	movs	r3, #22
 800f934:	6003      	str	r3, [r0, #0]
 800f936:	2001      	movs	r0, #1
 800f938:	e7e7      	b.n	800f90a <_raise_r+0x12>
 800f93a:	2100      	movs	r1, #0
 800f93c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f940:	4620      	mov	r0, r4
 800f942:	4798      	blx	r3
 800f944:	2000      	movs	r0, #0
 800f946:	e7e0      	b.n	800f90a <_raise_r+0x12>

0800f948 <raise>:
 800f948:	4b02      	ldr	r3, [pc, #8]	@ (800f954 <raise+0xc>)
 800f94a:	4601      	mov	r1, r0
 800f94c:	6818      	ldr	r0, [r3, #0]
 800f94e:	f7ff bfd3 	b.w	800f8f8 <_raise_r>
 800f952:	bf00      	nop
 800f954:	2000003c 	.word	0x2000003c

0800f958 <_kill_r>:
 800f958:	b538      	push	{r3, r4, r5, lr}
 800f95a:	4d07      	ldr	r5, [pc, #28]	@ (800f978 <_kill_r+0x20>)
 800f95c:	2300      	movs	r3, #0
 800f95e:	4604      	mov	r4, r0
 800f960:	4608      	mov	r0, r1
 800f962:	4611      	mov	r1, r2
 800f964:	602b      	str	r3, [r5, #0]
 800f966:	f7f4 f841 	bl	80039ec <_kill>
 800f96a:	1c43      	adds	r3, r0, #1
 800f96c:	d102      	bne.n	800f974 <_kill_r+0x1c>
 800f96e:	682b      	ldr	r3, [r5, #0]
 800f970:	b103      	cbz	r3, 800f974 <_kill_r+0x1c>
 800f972:	6023      	str	r3, [r4, #0]
 800f974:	bd38      	pop	{r3, r4, r5, pc}
 800f976:	bf00      	nop
 800f978:	200010f8 	.word	0x200010f8

0800f97c <_getpid_r>:
 800f97c:	f7f4 b82e 	b.w	80039dc <_getpid>

0800f980 <_malloc_usable_size_r>:
 800f980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f984:	1f18      	subs	r0, r3, #4
 800f986:	2b00      	cmp	r3, #0
 800f988:	bfbc      	itt	lt
 800f98a:	580b      	ldrlt	r3, [r1, r0]
 800f98c:	18c0      	addlt	r0, r0, r3
 800f98e:	4770      	bx	lr

0800f990 <_init>:
 800f990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f992:	bf00      	nop
 800f994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f996:	bc08      	pop	{r3}
 800f998:	469e      	mov	lr, r3
 800f99a:	4770      	bx	lr

0800f99c <_fini>:
 800f99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99e:	bf00      	nop
 800f9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9a2:	bc08      	pop	{r3}
 800f9a4:	469e      	mov	lr, r3
 800f9a6:	4770      	bx	lr
