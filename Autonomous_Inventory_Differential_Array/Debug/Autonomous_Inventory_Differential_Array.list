
Autonomous_Inventory_Differential_Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d8  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  08009618  08009618  0000a618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a194  0800a194  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a194  0800a194  0000b194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a19c  0800a19c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a19c  0800a19c  0000b19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1a0  0800a1a0  0000b1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a1a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  200001d4  0800a378  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800a378  0000c7ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1fc  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e3  00000000  00000000  000193f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0001bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097c  00000000  00000000  0001ca78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d11  00000000  00000000  0001d3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126cc  00000000  00000000  00036105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ddf0  00000000  00000000  000487d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d65c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c00  00000000  00000000  000d6604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  000db204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08009600 	.word	0x08009600

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08009600 	.word	0x08009600

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_fmul>:
 8000190:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000194:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000198:	bf1e      	ittt	ne
 800019a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800019e:	ea92 0f0c 	teqne	r2, ip
 80001a2:	ea93 0f0c 	teqne	r3, ip
 80001a6:	d06f      	beq.n	8000288 <__aeabi_fmul+0xf8>
 80001a8:	441a      	add	r2, r3
 80001aa:	ea80 0c01 	eor.w	ip, r0, r1
 80001ae:	0240      	lsls	r0, r0, #9
 80001b0:	bf18      	it	ne
 80001b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001b6:	d01e      	beq.n	80001f6 <__aeabi_fmul+0x66>
 80001b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001c4:	fba0 3101 	umull	r3, r1, r0, r1
 80001c8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001cc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001d0:	bf3e      	ittt	cc
 80001d2:	0049      	lslcc	r1, r1, #1
 80001d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d8:	005b      	lslcc	r3, r3, #1
 80001da:	ea40 0001 	orr.w	r0, r0, r1
 80001de:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001e2:	2afd      	cmp	r2, #253	@ 0xfd
 80001e4:	d81d      	bhi.n	8000222 <__aeabi_fmul+0x92>
 80001e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ee:	bf08      	it	eq
 80001f0:	f020 0001 	biceq.w	r0, r0, #1
 80001f4:	4770      	bx	lr
 80001f6:	f090 0f00 	teq	r0, #0
 80001fa:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001fe:	bf08      	it	eq
 8000200:	0249      	lsleq	r1, r1, #9
 8000202:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000206:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800020a:	3a7f      	subs	r2, #127	@ 0x7f
 800020c:	bfc2      	ittt	gt
 800020e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000212:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000216:	4770      	bxgt	lr
 8000218:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800021c:	f04f 0300 	mov.w	r3, #0
 8000220:	3a01      	subs	r2, #1
 8000222:	dc5d      	bgt.n	80002e0 <__aeabi_fmul+0x150>
 8000224:	f112 0f19 	cmn.w	r2, #25
 8000228:	bfdc      	itt	le
 800022a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800022e:	4770      	bxle	lr
 8000230:	f1c2 0200 	rsb	r2, r2, #0
 8000234:	0041      	lsls	r1, r0, #1
 8000236:	fa21 f102 	lsr.w	r1, r1, r2
 800023a:	f1c2 0220 	rsb	r2, r2, #32
 800023e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000242:	ea5f 0031 	movs.w	r0, r1, rrx
 8000246:	f140 0000 	adc.w	r0, r0, #0
 800024a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800024e:	bf08      	it	eq
 8000250:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000254:	4770      	bx	lr
 8000256:	f092 0f00 	teq	r2, #0
 800025a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800025e:	bf02      	ittt	eq
 8000260:	0040      	lsleq	r0, r0, #1
 8000262:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000266:	3a01      	subeq	r2, #1
 8000268:	d0f9      	beq.n	800025e <__aeabi_fmul+0xce>
 800026a:	ea40 000c 	orr.w	r0, r0, ip
 800026e:	f093 0f00 	teq	r3, #0
 8000272:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000276:	bf02      	ittt	eq
 8000278:	0049      	lsleq	r1, r1, #1
 800027a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800027e:	3b01      	subeq	r3, #1
 8000280:	d0f9      	beq.n	8000276 <__aeabi_fmul+0xe6>
 8000282:	ea41 010c 	orr.w	r1, r1, ip
 8000286:	e78f      	b.n	80001a8 <__aeabi_fmul+0x18>
 8000288:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800028c:	ea92 0f0c 	teq	r2, ip
 8000290:	bf18      	it	ne
 8000292:	ea93 0f0c 	teqne	r3, ip
 8000296:	d00a      	beq.n	80002ae <__aeabi_fmul+0x11e>
 8000298:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800029c:	bf18      	it	ne
 800029e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80002a2:	d1d8      	bne.n	8000256 <__aeabi_fmul+0xc6>
 80002a4:	ea80 0001 	eor.w	r0, r0, r1
 80002a8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f090 0f00 	teq	r0, #0
 80002b2:	bf17      	itett	ne
 80002b4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002b8:	4608      	moveq	r0, r1
 80002ba:	f091 0f00 	teqne	r1, #0
 80002be:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002c2:	d014      	beq.n	80002ee <__aeabi_fmul+0x15e>
 80002c4:	ea92 0f0c 	teq	r2, ip
 80002c8:	d101      	bne.n	80002ce <__aeabi_fmul+0x13e>
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	d10f      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002ce:	ea93 0f0c 	teq	r3, ip
 80002d2:	d103      	bne.n	80002dc <__aeabi_fmul+0x14c>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	bf18      	it	ne
 80002d8:	4608      	movne	r0, r1
 80002da:	d108      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002dc:	ea80 0001 	eor.w	r0, r0, r1
 80002e0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002e4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ec:	4770      	bx	lr
 80002ee:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002f2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_drsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002fc:	e002      	b.n	8000304 <__adddf3>
 80002fe:	bf00      	nop

08000300 <__aeabi_dsub>:
 8000300:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000304 <__adddf3>:
 8000304:	b530      	push	{r4, r5, lr}
 8000306:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800030a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030e:	ea94 0f05 	teq	r4, r5
 8000312:	bf08      	it	eq
 8000314:	ea90 0f02 	teqeq	r0, r2
 8000318:	bf1f      	itttt	ne
 800031a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000322:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000326:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800032a:	f000 80e2 	beq.w	80004f2 <__adddf3+0x1ee>
 800032e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000332:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000336:	bfb8      	it	lt
 8000338:	426d      	neglt	r5, r5
 800033a:	dd0c      	ble.n	8000356 <__adddf3+0x52>
 800033c:	442c      	add	r4, r5
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	ea82 0000 	eor.w	r0, r2, r0
 800034a:	ea83 0101 	eor.w	r1, r3, r1
 800034e:	ea80 0202 	eor.w	r2, r0, r2
 8000352:	ea81 0303 	eor.w	r3, r1, r3
 8000356:	2d36      	cmp	r5, #54	@ 0x36
 8000358:	bf88      	it	hi
 800035a:	bd30      	pophi	{r4, r5, pc}
 800035c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000360:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000364:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000368:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x70>
 800036e:	4240      	negs	r0, r0
 8000370:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000374:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000378:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800037c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x84>
 8000382:	4252      	negs	r2, r2
 8000384:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000388:	ea94 0f05 	teq	r4, r5
 800038c:	f000 80a7 	beq.w	80004de <__adddf3+0x1da>
 8000390:	f1a4 0401 	sub.w	r4, r4, #1
 8000394:	f1d5 0e20 	rsbs	lr, r5, #32
 8000398:	db0d      	blt.n	80003b6 <__adddf3+0xb2>
 800039a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039e:	fa22 f205 	lsr.w	r2, r2, r5
 80003a2:	1880      	adds	r0, r0, r2
 80003a4:	f141 0100 	adc.w	r1, r1, #0
 80003a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003ac:	1880      	adds	r0, r0, r2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	4159      	adcs	r1, r3
 80003b4:	e00e      	b.n	80003d4 <__adddf3+0xd0>
 80003b6:	f1a5 0520 	sub.w	r5, r5, #32
 80003ba:	f10e 0e20 	add.w	lr, lr, #32
 80003be:	2a01      	cmp	r2, #1
 80003c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c4:	bf28      	it	cs
 80003c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ca:	fa43 f305 	asr.w	r3, r3, r5
 80003ce:	18c0      	adds	r0, r0, r3
 80003d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d8:	d507      	bpl.n	80003ea <__adddf3+0xe6>
 80003da:	f04f 0e00 	mov.w	lr, #0
 80003de:	f1dc 0c00 	rsbs	ip, ip, #0
 80003e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ea:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ee:	d31b      	bcc.n	8000428 <__adddf3+0x124>
 80003f0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003f4:	d30c      	bcc.n	8000410 <__adddf3+0x10c>
 80003f6:	0849      	lsrs	r1, r1, #1
 80003f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000400:	f104 0401 	add.w	r4, r4, #1
 8000404:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000408:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800040c:	f080 809a 	bcs.w	8000544 <__adddf3+0x240>
 8000410:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000414:	bf08      	it	eq
 8000416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800041a:	f150 0000 	adcs.w	r0, r0, #0
 800041e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000422:	ea41 0105 	orr.w	r1, r1, r5
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800042c:	4140      	adcs	r0, r0
 800042e:	eb41 0101 	adc.w	r1, r1, r1
 8000432:	3c01      	subs	r4, #1
 8000434:	bf28      	it	cs
 8000436:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800043a:	d2e9      	bcs.n	8000410 <__adddf3+0x10c>
 800043c:	f091 0f00 	teq	r1, #0
 8000440:	bf04      	itt	eq
 8000442:	4601      	moveq	r1, r0
 8000444:	2000      	moveq	r0, #0
 8000446:	fab1 f381 	clz	r3, r1
 800044a:	bf08      	it	eq
 800044c:	3320      	addeq	r3, #32
 800044e:	f1a3 030b 	sub.w	r3, r3, #11
 8000452:	f1b3 0220 	subs.w	r2, r3, #32
 8000456:	da0c      	bge.n	8000472 <__adddf3+0x16e>
 8000458:	320c      	adds	r2, #12
 800045a:	dd08      	ble.n	800046e <__adddf3+0x16a>
 800045c:	f102 0c14 	add.w	ip, r2, #20
 8000460:	f1c2 020c 	rsb	r2, r2, #12
 8000464:	fa01 f00c 	lsl.w	r0, r1, ip
 8000468:	fa21 f102 	lsr.w	r1, r1, r2
 800046c:	e00c      	b.n	8000488 <__adddf3+0x184>
 800046e:	f102 0214 	add.w	r2, r2, #20
 8000472:	bfd8      	it	le
 8000474:	f1c2 0c20 	rsble	ip, r2, #32
 8000478:	fa01 f102 	lsl.w	r1, r1, r2
 800047c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000480:	bfdc      	itt	le
 8000482:	ea41 010c 	orrle.w	r1, r1, ip
 8000486:	4090      	lslle	r0, r2
 8000488:	1ae4      	subs	r4, r4, r3
 800048a:	bfa2      	ittt	ge
 800048c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000490:	4329      	orrge	r1, r5
 8000492:	bd30      	popge	{r4, r5, pc}
 8000494:	ea6f 0404 	mvn.w	r4, r4
 8000498:	3c1f      	subs	r4, #31
 800049a:	da1c      	bge.n	80004d6 <__adddf3+0x1d2>
 800049c:	340c      	adds	r4, #12
 800049e:	dc0e      	bgt.n	80004be <__adddf3+0x1ba>
 80004a0:	f104 0414 	add.w	r4, r4, #20
 80004a4:	f1c4 0220 	rsb	r2, r4, #32
 80004a8:	fa20 f004 	lsr.w	r0, r0, r4
 80004ac:	fa01 f302 	lsl.w	r3, r1, r2
 80004b0:	ea40 0003 	orr.w	r0, r0, r3
 80004b4:	fa21 f304 	lsr.w	r3, r1, r4
 80004b8:	ea45 0103 	orr.w	r1, r5, r3
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f1c4 040c 	rsb	r4, r4, #12
 80004c2:	f1c4 0220 	rsb	r2, r4, #32
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 f304 	lsl.w	r3, r1, r4
 80004ce:	ea40 0003 	orr.w	r0, r0, r3
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	fa21 f004 	lsr.w	r0, r1, r4
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	f094 0f00 	teq	r4, #0
 80004e2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004e6:	bf06      	itte	eq
 80004e8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ec:	3401      	addeq	r4, #1
 80004ee:	3d01      	subne	r5, #1
 80004f0:	e74e      	b.n	8000390 <__adddf3+0x8c>
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf18      	it	ne
 80004f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004fc:	d029      	beq.n	8000552 <__adddf3+0x24e>
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	d005      	beq.n	8000516 <__adddf3+0x212>
 800050a:	ea54 0c00 	orrs.w	ip, r4, r0
 800050e:	bf04      	itt	eq
 8000510:	4619      	moveq	r1, r3
 8000512:	4610      	moveq	r0, r2
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	ea91 0f03 	teq	r1, r3
 800051a:	bf1e      	ittt	ne
 800051c:	2100      	movne	r1, #0
 800051e:	2000      	movne	r0, #0
 8000520:	bd30      	popne	{r4, r5, pc}
 8000522:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000526:	d105      	bne.n	8000534 <__adddf3+0x230>
 8000528:	0040      	lsls	r0, r0, #1
 800052a:	4149      	adcs	r1, r1
 800052c:	bf28      	it	cs
 800052e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000532:	bd30      	pop	{r4, r5, pc}
 8000534:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000538:	bf3c      	itt	cc
 800053a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800053e:	bd30      	popcc	{r4, r5, pc}
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000548:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800054c:	f04f 0000 	mov.w	r0, #0
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000556:	bf1a      	itte	ne
 8000558:	4619      	movne	r1, r3
 800055a:	4610      	movne	r0, r2
 800055c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000560:	bf1c      	itt	ne
 8000562:	460b      	movne	r3, r1
 8000564:	4602      	movne	r2, r0
 8000566:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800056a:	bf06      	itte	eq
 800056c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000570:	ea91 0f03 	teqeq	r1, r3
 8000574:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	bf00      	nop

0800057c <__aeabi_ui2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000590:	f04f 0500 	mov.w	r5, #0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e750      	b.n	800043c <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_i2d>:
 800059c:	f090 0f00 	teq	r0, #0
 80005a0:	bf04      	itt	eq
 80005a2:	2100      	moveq	r1, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005b4:	bf48      	it	mi
 80005b6:	4240      	negmi	r0, r0
 80005b8:	f04f 0100 	mov.w	r1, #0
 80005bc:	e73e      	b.n	800043c <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_f2d>:
 80005c0:	0042      	lsls	r2, r0, #1
 80005c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ce:	bf1f      	itttt	ne
 80005d0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005d4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005dc:	4770      	bxne	lr
 80005de:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005e2:	bf08      	it	eq
 80005e4:	4770      	bxeq	lr
 80005e6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ea:	bf04      	itt	eq
 80005ec:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005f0:	4770      	bxeq	lr
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000600:	e71c      	b.n	800043c <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_ul2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	e00a      	b.n	800062a <__aeabi_l2d+0x16>

08000614 <__aeabi_l2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000622:	d502      	bpl.n	800062a <__aeabi_l2d+0x16>
 8000624:	4240      	negs	r0, r0
 8000626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800062e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000636:	f43f aed8 	beq.w	80003ea <__adddf3+0xe6>
 800063a:	f04f 0203 	mov.w	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	fa00 fc03 	lsl.w	ip, r0, r3
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000662:	ea40 000e 	orr.w	r0, r0, lr
 8000666:	fa21 f102 	lsr.w	r1, r1, r2
 800066a:	4414      	add	r4, r2
 800066c:	e6bd      	b.n	80003ea <__adddf3+0xe6>
 800066e:	bf00      	nop

08000670 <__aeabi_dmul>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000676:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800067a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067e:	bf1d      	ittte	ne
 8000680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000684:	ea94 0f0c 	teqne	r4, ip
 8000688:	ea95 0f0c 	teqne	r5, ip
 800068c:	f000 f8de 	bleq	800084c <__aeabi_dmul+0x1dc>
 8000690:	442c      	add	r4, r5
 8000692:	ea81 0603 	eor.w	r6, r1, r3
 8000696:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a2:	bf18      	it	ne
 80006a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006b0:	d038      	beq.n	8000724 <__aeabi_dmul+0xb4>
 80006b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c6:	f04f 0600 	mov.w	r6, #0
 80006ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ce:	f09c 0f00 	teq	ip, #0
 80006d2:	bf18      	it	ne
 80006d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006e4:	d204      	bcs.n	80006f0 <__aeabi_dmul+0x80>
 80006e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ea:	416d      	adcs	r5, r5
 80006ec:	eb46 0606 	adc.w	r6, r6, r6
 80006f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000700:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000704:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000708:	bf88      	it	hi
 800070a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800070e:	d81e      	bhi.n	800074e <__aeabi_dmul+0xde>
 8000710:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000714:	bf08      	it	eq
 8000716:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071a:	f150 0000 	adcs.w	r0, r0, #0
 800071e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000728:	ea46 0101 	orr.w	r1, r6, r1
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000738:	bfc2      	ittt	gt
 800073a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000742:	bd70      	popgt	{r4, r5, r6, pc}
 8000744:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000748:	f04f 0e00 	mov.w	lr, #0
 800074c:	3c01      	subs	r4, #1
 800074e:	f300 80ab 	bgt.w	80008a8 <__aeabi_dmul+0x238>
 8000752:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000756:	bfde      	ittt	le
 8000758:	2000      	movle	r0, #0
 800075a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800075e:	bd70      	pople	{r4, r5, r6, pc}
 8000760:	f1c4 0400 	rsb	r4, r4, #0
 8000764:	3c20      	subs	r4, #32
 8000766:	da35      	bge.n	80007d4 <__aeabi_dmul+0x164>
 8000768:	340c      	adds	r4, #12
 800076a:	dc1b      	bgt.n	80007a4 <__aeabi_dmul+0x134>
 800076c:	f104 0414 	add.w	r4, r4, #20
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f305 	lsl.w	r3, r0, r5
 8000778:	fa20 f004 	lsr.w	r0, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	fa21 f604 	lsr.w	r6, r1, r4
 8000794:	eb42 0106 	adc.w	r1, r2, r6
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 040c 	rsb	r4, r4, #12
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f304 	lsl.w	r3, r0, r4
 80007b0:	fa20 f005 	lsr.w	r0, r0, r5
 80007b4:	fa01 f204 	lsl.w	r2, r1, r4
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c4:	f141 0100 	adc.w	r1, r1, #0
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f1c4 0520 	rsb	r5, r4, #32
 80007d8:	fa00 f205 	lsl.w	r2, r0, r5
 80007dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e0:	fa20 f304 	lsr.w	r3, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea43 0302 	orr.w	r3, r3, r2
 80007ec:	fa21 f004 	lsr.w	r0, r1, r4
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	fa21 f204 	lsr.w	r2, r1, r4
 80007f8:	ea20 0002 	bic.w	r0, r0, r2
 80007fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f094 0f00 	teq	r4, #0
 8000810:	d10f      	bne.n	8000832 <__aeabi_dmul+0x1c2>
 8000812:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000816:	0040      	lsls	r0, r0, #1
 8000818:	eb41 0101 	adc.w	r1, r1, r1
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	bf08      	it	eq
 8000822:	3c01      	subeq	r4, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1a6>
 8000826:	ea41 0106 	orr.w	r1, r1, r6
 800082a:	f095 0f00 	teq	r5, #0
 800082e:	bf18      	it	ne
 8000830:	4770      	bxne	lr
 8000832:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	eb43 0303 	adc.w	r3, r3, r3
 800083c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000840:	bf08      	it	eq
 8000842:	3d01      	subeq	r5, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1c6>
 8000846:	ea43 0306 	orr.w	r3, r3, r6
 800084a:	4770      	bx	lr
 800084c:	ea94 0f0c 	teq	r4, ip
 8000850:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000854:	bf18      	it	ne
 8000856:	ea95 0f0c 	teqne	r5, ip
 800085a:	d00c      	beq.n	8000876 <__aeabi_dmul+0x206>
 800085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000866:	d1d1      	bne.n	800080c <__aeabi_dmul+0x19c>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087a:	bf06      	itte	eq
 800087c:	4610      	moveq	r0, r2
 800087e:	4619      	moveq	r1, r3
 8000880:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000884:	d019      	beq.n	80008ba <__aeabi_dmul+0x24a>
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	d102      	bne.n	8000892 <__aeabi_dmul+0x222>
 800088c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000890:	d113      	bne.n	80008ba <__aeabi_dmul+0x24a>
 8000892:	ea95 0f0c 	teq	r5, ip
 8000896:	d105      	bne.n	80008a4 <__aeabi_dmul+0x234>
 8000898:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800089c:	bf1c      	itt	ne
 800089e:	4610      	movne	r0, r2
 80008a0:	4619      	movne	r1, r3
 80008a2:	d10a      	bne.n	80008ba <__aeabi_dmul+0x24a>
 80008a4:	ea81 0103 	eor.w	r1, r1, r3
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
 80008ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008c2:	bd70      	pop	{r4, r5, r6, pc}

080008c4 <__aeabi_ddiv>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d2:	bf1d      	ittte	ne
 80008d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d8:	ea94 0f0c 	teqne	r4, ip
 80008dc:	ea95 0f0c 	teqne	r5, ip
 80008e0:	f000 f8a7 	bleq	8000a32 <__aeabi_ddiv+0x16e>
 80008e4:	eba4 0405 	sub.w	r4, r4, r5
 80008e8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f4:	f000 8088 	beq.w	8000a08 <__aeabi_ddiv+0x144>
 80008f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008fc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000900:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000908:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800090c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000910:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000914:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000918:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800091c:	429d      	cmp	r5, r3
 800091e:	bf08      	it	eq
 8000920:	4296      	cmpeq	r6, r2
 8000922:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000926:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800092a:	d202      	bcs.n	8000932 <__aeabi_ddiv+0x6e>
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	1ab6      	subs	r6, r6, r2
 8000934:	eb65 0503 	sbc.w	r5, r5, r3
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000942:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 000c 	orrcs.w	r0, r0, ip
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a4:	d018      	beq.n	80009d8 <__aeabi_ddiv+0x114>
 80009a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c2:	d1c0      	bne.n	8000946 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c8:	d10b      	bne.n	80009e2 <__aeabi_ddiv+0x11e>
 80009ca:	ea41 0100 	orr.w	r1, r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009d6:	e7b6      	b.n	8000946 <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009dc:	bf04      	itt	eq
 80009de:	4301      	orreq	r1, r0
 80009e0:	2000      	moveq	r0, #0
 80009e2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009e6:	bf88      	it	hi
 80009e8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ec:	f63f aeaf 	bhi.w	800074e <__aeabi_dmul+0xde>
 80009f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f4:	bf04      	itt	eq
 80009f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fe:	f150 0000 	adcs.w	r0, r0, #0
 8000a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a14:	bfc2      	ittt	gt
 8000a16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a20:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a24:	f04f 0e00 	mov.w	lr, #0
 8000a28:	3c01      	subs	r4, #1
 8000a2a:	e690      	b.n	800074e <__aeabi_dmul+0xde>
 8000a2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a30:	e68d      	b.n	800074e <__aeabi_dmul+0xde>
 8000a32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a36:	ea94 0f0c 	teq	r4, ip
 8000a3a:	bf08      	it	eq
 8000a3c:	ea95 0f0c 	teqeq	r5, ip
 8000a40:	f43f af3b 	beq.w	80008ba <__aeabi_dmul+0x24a>
 8000a44:	ea94 0f0c 	teq	r4, ip
 8000a48:	d10a      	bne.n	8000a60 <__aeabi_ddiv+0x19c>
 8000a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4e:	f47f af34 	bne.w	80008ba <__aeabi_dmul+0x24a>
 8000a52:	ea95 0f0c 	teq	r5, ip
 8000a56:	f47f af25 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e72c      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a60:	ea95 0f0c 	teq	r5, ip
 8000a64:	d106      	bne.n	8000a74 <__aeabi_ddiv+0x1b0>
 8000a66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6a:	f43f aefd 	beq.w	8000868 <__aeabi_dmul+0x1f8>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e722      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	f47f aec5 	bne.w	800080c <__aeabi_dmul+0x19c>
 8000a82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a86:	f47f af0d 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8e:	f47f aeeb 	bne.w	8000868 <__aeabi_dmul+0x1f8>
 8000a92:	e712      	b.n	80008ba <__aeabi_dmul+0x24a>

08000a94 <__gedf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295
 8000a98:	e006      	b.n	8000aa8 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__ledf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpdf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000abe:	d01b      	beq.n	8000af8 <__cmpdf2+0x54>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ac6:	bf0c      	ite	eq
 8000ac8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000acc:	ea91 0f03 	teqne	r1, r3
 8000ad0:	bf02      	ittt	eq
 8000ad2:	ea90 0f02 	teqeq	r0, r2
 8000ad6:	2000      	moveq	r0, #0
 8000ad8:	4770      	bxeq	lr
 8000ada:	f110 0f00 	cmn.w	r0, #0
 8000ade:	ea91 0f03 	teq	r1, r3
 8000ae2:	bf58      	it	pl
 8000ae4:	4299      	cmppl	r1, r3
 8000ae6:	bf08      	it	eq
 8000ae8:	4290      	cmpeq	r0, r2
 8000aea:	bf2c      	ite	cs
 8000aec:	17d8      	asrcs	r0, r3, #31
 8000aee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000af2:	f040 0001 	orr.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__cmpdf2+0x64>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d107      	bne.n	8000b18 <__cmpdf2+0x74>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d1d6      	bne.n	8000ac0 <__cmpdf2+0x1c>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d0d3      	beq.n	8000ac0 <__cmpdf2+0x1c>
 8000b18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_cdrcmple>:
 8000b20:	4684      	mov	ip, r0
 8000b22:	4610      	mov	r0, r2
 8000b24:	4662      	mov	r2, ip
 8000b26:	468c      	mov	ip, r1
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	e000      	b.n	8000b30 <__aeabi_cdcmpeq>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_cdcmpeq>:
 8000b30:	b501      	push	{r0, lr}
 8000b32:	f7ff ffb7 	bl	8000aa4 <__cmpdf2>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	bf48      	it	mi
 8000b3a:	f110 0f00 	cmnmi.w	r0, #0
 8000b3e:	bd01      	pop	{r0, pc}

08000b40 <__aeabi_dcmpeq>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff fff4 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b48:	bf0c      	ite	eq
 8000b4a:	2001      	moveq	r0, #1
 8000b4c:	2000      	movne	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmplt>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffea 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b5c:	bf34      	ite	cc
 8000b5e:	2001      	movcc	r0, #1
 8000b60:	2000      	movcs	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmple>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffe0 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpge>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffce 	bl	8000b20 <__aeabi_cdrcmple>
 8000b84:	bf94      	ite	ls
 8000b86:	2001      	movls	r0, #1
 8000b88:	2000      	movhi	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpgt>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffc4 	bl	8000b20 <__aeabi_cdrcmple>
 8000b98:	bf34      	ite	cc
 8000b9a:	2001      	movcc	r0, #1
 8000b9c:	2000      	movcs	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpun>:
 8000ba4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_dcmpun+0x10>
 8000bae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bb2:	d10a      	bne.n	8000bca <__aeabi_dcmpun+0x26>
 8000bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	d102      	bne.n	8000bc4 <__aeabi_dcmpun+0x20>
 8000bbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bc2:	d102      	bne.n	8000bca <__aeabi_dcmpun+0x26>
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0001 	mov.w	r0, #1
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2iz>:
 8000bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d215      	bcs.n	8000c06 <__aeabi_d2iz+0x36>
 8000bda:	d511      	bpl.n	8000c00 <__aeabi_d2iz+0x30>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d912      	bls.n	8000c0c <__aeabi_d2iz+0x3c>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d105      	bne.n	8000c18 <__aeabi_d2iz+0x48>
 8000c0c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	bf08      	it	eq
 8000c12:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_d2uiz>:
 8000c20:	004a      	lsls	r2, r1, #1
 8000c22:	d211      	bcs.n	8000c48 <__aeabi_d2uiz+0x28>
 8000c24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c28:	d211      	bcs.n	8000c4e <__aeabi_d2uiz+0x2e>
 8000c2a:	d50d      	bpl.n	8000c48 <__aeabi_d2uiz+0x28>
 8000c2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c34:	d40e      	bmi.n	8000c54 <__aeabi_d2uiz+0x34>
 8000c36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c42:	fa23 f002 	lsr.w	r0, r3, r2
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d102      	bne.n	8000c5a <__aeabi_d2uiz+0x3a>
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	4770      	bx	lr
 8000c5a:	f04f 0000 	mov.w	r0, #0
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_d2f>:
 8000c60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c68:	bf24      	itt	cs
 8000c6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c72:	d90d      	bls.n	8000c90 <__aeabi_d2f+0x30>
 8000c74:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c80:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c94:	d121      	bne.n	8000cda <__aeabi_d2f+0x7a>
 8000c96:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c9a:	bfbc      	itt	lt
 8000c9c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ca0:	4770      	bxlt	lr
 8000ca2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ca6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000caa:	f1c2 0218 	rsb	r2, r2, #24
 8000cae:	f1c2 0c20 	rsb	ip, r2, #32
 8000cb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000cba:	bf18      	it	ne
 8000cbc:	f040 0001 	orrne.w	r0, r0, #1
 8000cc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ccc:	ea40 000c 	orr.w	r0, r0, ip
 8000cd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd8:	e7cc      	b.n	8000c74 <__aeabi_d2f+0x14>
 8000cda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cde:	d107      	bne.n	8000cf0 <__aeabi_d2f+0x90>
 8000ce0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ce4:	bf1e      	ittt	ne
 8000ce6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cea:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cee:	4770      	bxne	lr
 8000cf0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cf4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <__aeabi_frsub>:
 8000d00:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	e002      	b.n	8000d0c <__addsf3>
 8000d06:	bf00      	nop

08000d08 <__aeabi_fsub>:
 8000d08:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000d0c <__addsf3>:
 8000d0c:	0042      	lsls	r2, r0, #1
 8000d0e:	bf1f      	itttt	ne
 8000d10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d14:	ea92 0f03 	teqne	r2, r3
 8000d18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d20:	d06a      	beq.n	8000df8 <__addsf3+0xec>
 8000d22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d2a:	bfc1      	itttt	gt
 8000d2c:	18d2      	addgt	r2, r2, r3
 8000d2e:	4041      	eorgt	r1, r0
 8000d30:	4048      	eorgt	r0, r1
 8000d32:	4041      	eorgt	r1, r0
 8000d34:	bfb8      	it	lt
 8000d36:	425b      	neglt	r3, r3
 8000d38:	2b19      	cmp	r3, #25
 8000d3a:	bf88      	it	hi
 8000d3c:	4770      	bxhi	lr
 8000d3e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d42:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d46:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d4a:	bf18      	it	ne
 8000d4c:	4240      	negne	r0, r0
 8000d4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d52:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d56:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d5a:	bf18      	it	ne
 8000d5c:	4249      	negne	r1, r1
 8000d5e:	ea92 0f03 	teq	r2, r3
 8000d62:	d03f      	beq.n	8000de4 <__addsf3+0xd8>
 8000d64:	f1a2 0201 	sub.w	r2, r2, #1
 8000d68:	fa41 fc03 	asr.w	ip, r1, r3
 8000d6c:	eb10 000c 	adds.w	r0, r0, ip
 8000d70:	f1c3 0320 	rsb	r3, r3, #32
 8000d74:	fa01 f103 	lsl.w	r1, r1, r3
 8000d78:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__addsf3+0x78>
 8000d7e:	4249      	negs	r1, r1
 8000d80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d84:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d88:	d313      	bcc.n	8000db2 <__addsf3+0xa6>
 8000d8a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d8e:	d306      	bcc.n	8000d9e <__addsf3+0x92>
 8000d90:	0840      	lsrs	r0, r0, #1
 8000d92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d96:	f102 0201 	add.w	r2, r2, #1
 8000d9a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d9c:	d251      	bcs.n	8000e42 <__addsf3+0x136>
 8000d9e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	ea40 0003 	orr.w	r0, r0, r3
 8000db0:	4770      	bx	lr
 8000db2:	0049      	lsls	r1, r1, #1
 8000db4:	eb40 0000 	adc.w	r0, r0, r0
 8000db8:	3a01      	subs	r2, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000dc0:	d2ed      	bcs.n	8000d9e <__addsf3+0x92>
 8000dc2:	fab0 fc80 	clz	ip, r0
 8000dc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000dca:	ebb2 020c 	subs.w	r2, r2, ip
 8000dce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dd2:	bfaa      	itet	ge
 8000dd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dd8:	4252      	neglt	r2, r2
 8000dda:	4318      	orrge	r0, r3
 8000ddc:	bfbc      	itt	lt
 8000dde:	40d0      	lsrlt	r0, r2
 8000de0:	4318      	orrlt	r0, r3
 8000de2:	4770      	bx	lr
 8000de4:	f092 0f00 	teq	r2, #0
 8000de8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dec:	bf06      	itte	eq
 8000dee:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000df2:	3201      	addeq	r2, #1
 8000df4:	3b01      	subne	r3, #1
 8000df6:	e7b5      	b.n	8000d64 <__addsf3+0x58>
 8000df8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e00:	bf18      	it	ne
 8000e02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e06:	d021      	beq.n	8000e4c <__addsf3+0x140>
 8000e08:	ea92 0f03 	teq	r2, r3
 8000e0c:	d004      	beq.n	8000e18 <__addsf3+0x10c>
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	bf08      	it	eq
 8000e14:	4608      	moveq	r0, r1
 8000e16:	4770      	bx	lr
 8000e18:	ea90 0f01 	teq	r0, r1
 8000e1c:	bf1c      	itt	ne
 8000e1e:	2000      	movne	r0, #0
 8000e20:	4770      	bxne	lr
 8000e22:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000e26:	d104      	bne.n	8000e32 <__addsf3+0x126>
 8000e28:	0040      	lsls	r0, r0, #1
 8000e2a:	bf28      	it	cs
 8000e2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e30:	4770      	bx	lr
 8000e32:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e36:	bf3c      	itt	cc
 8000e38:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e3c:	4770      	bxcc	lr
 8000e3e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e42:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e4a:	4770      	bx	lr
 8000e4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e50:	bf16      	itet	ne
 8000e52:	4608      	movne	r0, r1
 8000e54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e58:	4601      	movne	r1, r0
 8000e5a:	0242      	lsls	r2, r0, #9
 8000e5c:	bf06      	itte	eq
 8000e5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e62:	ea90 0f01 	teqeq	r0, r1
 8000e66:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_ui2f>:
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e004      	b.n	8000e7c <__aeabi_i2f+0x8>
 8000e72:	bf00      	nop

08000e74 <__aeabi_i2f>:
 8000e74:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e78:	bf48      	it	mi
 8000e7a:	4240      	negmi	r0, r0
 8000e7c:	ea5f 0c00 	movs.w	ip, r0
 8000e80:	bf08      	it	eq
 8000e82:	4770      	bxeq	lr
 8000e84:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e88:	4601      	mov	r1, r0
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	e01c      	b.n	8000eca <__aeabi_l2f+0x2a>

08000e90 <__aeabi_ul2f>:
 8000e90:	ea50 0201 	orrs.w	r2, r0, r1
 8000e94:	bf08      	it	eq
 8000e96:	4770      	bxeq	lr
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e00a      	b.n	8000eb4 <__aeabi_l2f+0x14>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_l2f>:
 8000ea0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ea4:	bf08      	it	eq
 8000ea6:	4770      	bxeq	lr
 8000ea8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000eac:	d502      	bpl.n	8000eb4 <__aeabi_l2f+0x14>
 8000eae:	4240      	negs	r0, r0
 8000eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eb4:	ea5f 0c01 	movs.w	ip, r1
 8000eb8:	bf02      	ittt	eq
 8000eba:	4684      	moveq	ip, r0
 8000ebc:	4601      	moveq	r1, r0
 8000ebe:	2000      	moveq	r0, #0
 8000ec0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ec4:	bf08      	it	eq
 8000ec6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ece:	fabc f28c 	clz	r2, ip
 8000ed2:	3a08      	subs	r2, #8
 8000ed4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ed8:	db10      	blt.n	8000efc <__aeabi_l2f+0x5c>
 8000eda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ede:	4463      	add	r3, ip
 8000ee0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ee4:	f1c2 0220 	rsb	r2, r2, #32
 8000ee8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eec:	fa20 f202 	lsr.w	r2, r0, r2
 8000ef0:	eb43 0002 	adc.w	r0, r3, r2
 8000ef4:	bf08      	it	eq
 8000ef6:	f020 0001 	biceq.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	f102 0220 	add.w	r2, r2, #32
 8000f00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f04:	f1c2 0220 	rsb	r2, r2, #32
 8000f08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000f10:	eb43 0002 	adc.w	r0, r3, r2
 8000f14:	bf08      	it	eq
 8000f16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_f2iz>:
 8000f1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f24:	d30f      	bcc.n	8000f46 <__aeabi_f2iz+0x2a>
 8000f26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f2e:	d90d      	bls.n	8000f4c <__aeabi_f2iz+0x30>
 8000f30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f40:	bf18      	it	ne
 8000f42:	4240      	negne	r0, r0
 8000f44:	4770      	bx	lr
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	4770      	bx	lr
 8000f4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f50:	d101      	bne.n	8000f56 <__aeabi_f2iz+0x3a>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	d105      	bne.n	8000f62 <__aeabi_f2iz+0x46>
 8000f56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f5a:	bf08      	it	eq
 8000f5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f60:	4770      	bx	lr
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	4770      	bx	lr

08000f68 <__aeabi_f2uiz>:
 8000f68:	0042      	lsls	r2, r0, #1
 8000f6a:	d20e      	bcs.n	8000f8a <__aeabi_f2uiz+0x22>
 8000f6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f70:	d30b      	bcc.n	8000f8a <__aeabi_f2uiz+0x22>
 8000f72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f7a:	d409      	bmi.n	8000f90 <__aeabi_f2uiz+0x28>
 8000f7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f84:	fa23 f002 	lsr.w	r0, r3, r2
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr
 8000f90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f94:	d101      	bne.n	8000f9a <__aeabi_f2uiz+0x32>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d102      	bne.n	8000fa0 <__aeabi_f2uiz+0x38>
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9e:	4770      	bx	lr
 8000fa0:	f04f 0000 	mov.w	r0, #0
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_ldivmod>:
 8000fa8:	b97b      	cbnz	r3, 8000fca <__aeabi_ldivmod+0x22>
 8000faa:	b972      	cbnz	r2, 8000fca <__aeabi_ldivmod+0x22>
 8000fac:	2900      	cmp	r1, #0
 8000fae:	bfbe      	ittt	lt
 8000fb0:	2000      	movlt	r0, #0
 8000fb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000fb6:	e006      	blt.n	8000fc6 <__aeabi_ldivmod+0x1e>
 8000fb8:	bf08      	it	eq
 8000fba:	2800      	cmpeq	r0, #0
 8000fbc:	bf1c      	itt	ne
 8000fbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000fc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000fc6:	f000 b9e9 	b.w	800139c <__aeabi_idiv0>
 8000fca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fd2:	2900      	cmp	r1, #0
 8000fd4:	db09      	blt.n	8000fea <__aeabi_ldivmod+0x42>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db1a      	blt.n	8001010 <__aeabi_ldivmod+0x68>
 8000fda:	f000 f883 	bl	80010e4 <__udivmoddi4>
 8000fde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fe6:	b004      	add	sp, #16
 8000fe8:	4770      	bx	lr
 8000fea:	4240      	negs	r0, r0
 8000fec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db1b      	blt.n	800102c <__aeabi_ldivmod+0x84>
 8000ff4:	f000 f876 	bl	80010e4 <__udivmoddi4>
 8000ff8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001000:	b004      	add	sp, #16
 8001002:	4240      	negs	r0, r0
 8001004:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001008:	4252      	negs	r2, r2
 800100a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800100e:	4770      	bx	lr
 8001010:	4252      	negs	r2, r2
 8001012:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001016:	f000 f865 	bl	80010e4 <__udivmoddi4>
 800101a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800101e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001022:	b004      	add	sp, #16
 8001024:	4240      	negs	r0, r0
 8001026:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800102a:	4770      	bx	lr
 800102c:	4252      	negs	r2, r2
 800102e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001032:	f000 f857 	bl	80010e4 <__udivmoddi4>
 8001036:	f8dd e004 	ldr.w	lr, [sp, #4]
 800103a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800103e:	b004      	add	sp, #16
 8001040:	4252      	negs	r2, r2
 8001042:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001046:	4770      	bx	lr

08001048 <__aeabi_uldivmod>:
 8001048:	b953      	cbnz	r3, 8001060 <__aeabi_uldivmod+0x18>
 800104a:	b94a      	cbnz	r2, 8001060 <__aeabi_uldivmod+0x18>
 800104c:	2900      	cmp	r1, #0
 800104e:	bf08      	it	eq
 8001050:	2800      	cmpeq	r0, #0
 8001052:	bf1c      	itt	ne
 8001054:	f04f 31ff 	movne.w	r1, #4294967295
 8001058:	f04f 30ff 	movne.w	r0, #4294967295
 800105c:	f000 b99e 	b.w	800139c <__aeabi_idiv0>
 8001060:	f1ad 0c08 	sub.w	ip, sp, #8
 8001064:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001068:	f000 f83c 	bl	80010e4 <__udivmoddi4>
 800106c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001074:	b004      	add	sp, #16
 8001076:	4770      	bx	lr

08001078 <__aeabi_d2lz>:
 8001078:	b538      	push	{r3, r4, r5, lr}
 800107a:	2200      	movs	r2, #0
 800107c:	2300      	movs	r3, #0
 800107e:	4604      	mov	r4, r0
 8001080:	460d      	mov	r5, r1
 8001082:	f7ff fd67 	bl	8000b54 <__aeabi_dcmplt>
 8001086:	b928      	cbnz	r0, 8001094 <__aeabi_d2lz+0x1c>
 8001088:	4620      	mov	r0, r4
 800108a:	4629      	mov	r1, r5
 800108c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001090:	f000 b80a 	b.w	80010a8 <__aeabi_d2ulz>
 8001094:	4620      	mov	r0, r4
 8001096:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800109a:	f000 f805 	bl	80010a8 <__aeabi_d2ulz>
 800109e:	4240      	negs	r0, r0
 80010a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a4:	bd38      	pop	{r3, r4, r5, pc}
 80010a6:	bf00      	nop

080010a8 <__aeabi_d2ulz>:
 80010a8:	b5d0      	push	{r4, r6, r7, lr}
 80010aa:	2200      	movs	r2, #0
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <__aeabi_d2ulz+0x34>)
 80010ae:	4606      	mov	r6, r0
 80010b0:	460f      	mov	r7, r1
 80010b2:	f7ff fadd 	bl	8000670 <__aeabi_dmul>
 80010b6:	f7ff fdb3 	bl	8000c20 <__aeabi_d2uiz>
 80010ba:	4604      	mov	r4, r0
 80010bc:	f7ff fa5e 	bl	800057c <__aeabi_ui2d>
 80010c0:	2200      	movs	r2, #0
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <__aeabi_d2ulz+0x38>)
 80010c4:	f7ff fad4 	bl	8000670 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4630      	mov	r0, r6
 80010ce:	4639      	mov	r1, r7
 80010d0:	f7ff f916 	bl	8000300 <__aeabi_dsub>
 80010d4:	f7ff fda4 	bl	8000c20 <__aeabi_d2uiz>
 80010d8:	4621      	mov	r1, r4
 80010da:	bdd0      	pop	{r4, r6, r7, pc}
 80010dc:	3df00000 	.word	0x3df00000
 80010e0:	41f00000 	.word	0x41f00000

080010e4 <__udivmoddi4>:
 80010e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e8:	9d08      	ldr	r5, [sp, #32]
 80010ea:	460c      	mov	r4, r1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d14e      	bne.n	800118e <__udivmoddi4+0xaa>
 80010f0:	4694      	mov	ip, r2
 80010f2:	458c      	cmp	ip, r1
 80010f4:	4686      	mov	lr, r0
 80010f6:	fab2 f282 	clz	r2, r2
 80010fa:	d962      	bls.n	80011c2 <__udivmoddi4+0xde>
 80010fc:	b14a      	cbz	r2, 8001112 <__udivmoddi4+0x2e>
 80010fe:	f1c2 0320 	rsb	r3, r2, #32
 8001102:	4091      	lsls	r1, r2
 8001104:	fa20 f303 	lsr.w	r3, r0, r3
 8001108:	fa0c fc02 	lsl.w	ip, ip, r2
 800110c:	4319      	orrs	r1, r3
 800110e:	fa00 fe02 	lsl.w	lr, r0, r2
 8001112:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001116:	fbb1 f4f7 	udiv	r4, r1, r7
 800111a:	fb07 1114 	mls	r1, r7, r4, r1
 800111e:	fa1f f68c 	uxth.w	r6, ip
 8001122:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001126:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800112a:	fb04 f106 	mul.w	r1, r4, r6
 800112e:	4299      	cmp	r1, r3
 8001130:	d90a      	bls.n	8001148 <__udivmoddi4+0x64>
 8001132:	eb1c 0303 	adds.w	r3, ip, r3
 8001136:	f104 30ff 	add.w	r0, r4, #4294967295
 800113a:	f080 8110 	bcs.w	800135e <__udivmoddi4+0x27a>
 800113e:	4299      	cmp	r1, r3
 8001140:	f240 810d 	bls.w	800135e <__udivmoddi4+0x27a>
 8001144:	3c02      	subs	r4, #2
 8001146:	4463      	add	r3, ip
 8001148:	1a59      	subs	r1, r3, r1
 800114a:	fbb1 f0f7 	udiv	r0, r1, r7
 800114e:	fb07 1110 	mls	r1, r7, r0, r1
 8001152:	fb00 f606 	mul.w	r6, r0, r6
 8001156:	fa1f f38e 	uxth.w	r3, lr
 800115a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800115e:	429e      	cmp	r6, r3
 8001160:	d90a      	bls.n	8001178 <__udivmoddi4+0x94>
 8001162:	eb1c 0303 	adds.w	r3, ip, r3
 8001166:	f100 31ff 	add.w	r1, r0, #4294967295
 800116a:	f080 80fa 	bcs.w	8001362 <__udivmoddi4+0x27e>
 800116e:	429e      	cmp	r6, r3
 8001170:	f240 80f7 	bls.w	8001362 <__udivmoddi4+0x27e>
 8001174:	4463      	add	r3, ip
 8001176:	3802      	subs	r0, #2
 8001178:	2100      	movs	r1, #0
 800117a:	1b9b      	subs	r3, r3, r6
 800117c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001180:	b11d      	cbz	r5, 800118a <__udivmoddi4+0xa6>
 8001182:	40d3      	lsrs	r3, r2
 8001184:	2200      	movs	r2, #0
 8001186:	e9c5 3200 	strd	r3, r2, [r5]
 800118a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118e:	428b      	cmp	r3, r1
 8001190:	d905      	bls.n	800119e <__udivmoddi4+0xba>
 8001192:	b10d      	cbz	r5, 8001198 <__udivmoddi4+0xb4>
 8001194:	e9c5 0100 	strd	r0, r1, [r5]
 8001198:	2100      	movs	r1, #0
 800119a:	4608      	mov	r0, r1
 800119c:	e7f5      	b.n	800118a <__udivmoddi4+0xa6>
 800119e:	fab3 f183 	clz	r1, r3
 80011a2:	2900      	cmp	r1, #0
 80011a4:	d146      	bne.n	8001234 <__udivmoddi4+0x150>
 80011a6:	42a3      	cmp	r3, r4
 80011a8:	d302      	bcc.n	80011b0 <__udivmoddi4+0xcc>
 80011aa:	4290      	cmp	r0, r2
 80011ac:	f0c0 80ee 	bcc.w	800138c <__udivmoddi4+0x2a8>
 80011b0:	1a86      	subs	r6, r0, r2
 80011b2:	eb64 0303 	sbc.w	r3, r4, r3
 80011b6:	2001      	movs	r0, #1
 80011b8:	2d00      	cmp	r5, #0
 80011ba:	d0e6      	beq.n	800118a <__udivmoddi4+0xa6>
 80011bc:	e9c5 6300 	strd	r6, r3, [r5]
 80011c0:	e7e3      	b.n	800118a <__udivmoddi4+0xa6>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	f040 808f 	bne.w	80012e6 <__udivmoddi4+0x202>
 80011c8:	eba1 040c 	sub.w	r4, r1, ip
 80011cc:	2101      	movs	r1, #1
 80011ce:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011d2:	fa1f f78c 	uxth.w	r7, ip
 80011d6:	fbb4 f6f8 	udiv	r6, r4, r8
 80011da:	fb08 4416 	mls	r4, r8, r6, r4
 80011de:	fb07 f006 	mul.w	r0, r7, r6
 80011e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011ea:	4298      	cmp	r0, r3
 80011ec:	d908      	bls.n	8001200 <__udivmoddi4+0x11c>
 80011ee:	eb1c 0303 	adds.w	r3, ip, r3
 80011f2:	f106 34ff 	add.w	r4, r6, #4294967295
 80011f6:	d202      	bcs.n	80011fe <__udivmoddi4+0x11a>
 80011f8:	4298      	cmp	r0, r3
 80011fa:	f200 80cb 	bhi.w	8001394 <__udivmoddi4+0x2b0>
 80011fe:	4626      	mov	r6, r4
 8001200:	1a1c      	subs	r4, r3, r0
 8001202:	fbb4 f0f8 	udiv	r0, r4, r8
 8001206:	fb08 4410 	mls	r4, r8, r0, r4
 800120a:	fb00 f707 	mul.w	r7, r0, r7
 800120e:	fa1f f38e 	uxth.w	r3, lr
 8001212:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001216:	429f      	cmp	r7, r3
 8001218:	d908      	bls.n	800122c <__udivmoddi4+0x148>
 800121a:	eb1c 0303 	adds.w	r3, ip, r3
 800121e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001222:	d202      	bcs.n	800122a <__udivmoddi4+0x146>
 8001224:	429f      	cmp	r7, r3
 8001226:	f200 80ae 	bhi.w	8001386 <__udivmoddi4+0x2a2>
 800122a:	4620      	mov	r0, r4
 800122c:	1bdb      	subs	r3, r3, r7
 800122e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001232:	e7a5      	b.n	8001180 <__udivmoddi4+0x9c>
 8001234:	f1c1 0720 	rsb	r7, r1, #32
 8001238:	408b      	lsls	r3, r1
 800123a:	fa22 fc07 	lsr.w	ip, r2, r7
 800123e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001242:	fa24 f607 	lsr.w	r6, r4, r7
 8001246:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800124a:	fbb6 f8f9 	udiv	r8, r6, r9
 800124e:	fa1f fe8c 	uxth.w	lr, ip
 8001252:	fb09 6618 	mls	r6, r9, r8, r6
 8001256:	fa20 f307 	lsr.w	r3, r0, r7
 800125a:	408c      	lsls	r4, r1
 800125c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001260:	fb08 f00e 	mul.w	r0, r8, lr
 8001264:	431c      	orrs	r4, r3
 8001266:	0c23      	lsrs	r3, r4, #16
 8001268:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800126c:	4298      	cmp	r0, r3
 800126e:	fa02 f201 	lsl.w	r2, r2, r1
 8001272:	d90a      	bls.n	800128a <__udivmoddi4+0x1a6>
 8001274:	eb1c 0303 	adds.w	r3, ip, r3
 8001278:	f108 36ff 	add.w	r6, r8, #4294967295
 800127c:	f080 8081 	bcs.w	8001382 <__udivmoddi4+0x29e>
 8001280:	4298      	cmp	r0, r3
 8001282:	d97e      	bls.n	8001382 <__udivmoddi4+0x29e>
 8001284:	f1a8 0802 	sub.w	r8, r8, #2
 8001288:	4463      	add	r3, ip
 800128a:	1a1e      	subs	r6, r3, r0
 800128c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001290:	fb09 6613 	mls	r6, r9, r3, r6
 8001294:	fb03 fe0e 	mul.w	lr, r3, lr
 8001298:	b2a4      	uxth	r4, r4
 800129a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800129e:	45a6      	cmp	lr, r4
 80012a0:	d908      	bls.n	80012b4 <__udivmoddi4+0x1d0>
 80012a2:	eb1c 0404 	adds.w	r4, ip, r4
 80012a6:	f103 30ff 	add.w	r0, r3, #4294967295
 80012aa:	d266      	bcs.n	800137a <__udivmoddi4+0x296>
 80012ac:	45a6      	cmp	lr, r4
 80012ae:	d964      	bls.n	800137a <__udivmoddi4+0x296>
 80012b0:	3b02      	subs	r3, #2
 80012b2:	4464      	add	r4, ip
 80012b4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012b8:	fba0 8302 	umull	r8, r3, r0, r2
 80012bc:	eba4 040e 	sub.w	r4, r4, lr
 80012c0:	429c      	cmp	r4, r3
 80012c2:	46c6      	mov	lr, r8
 80012c4:	461e      	mov	r6, r3
 80012c6:	d350      	bcc.n	800136a <__udivmoddi4+0x286>
 80012c8:	d04d      	beq.n	8001366 <__udivmoddi4+0x282>
 80012ca:	b155      	cbz	r5, 80012e2 <__udivmoddi4+0x1fe>
 80012cc:	ebba 030e 	subs.w	r3, sl, lr
 80012d0:	eb64 0406 	sbc.w	r4, r4, r6
 80012d4:	fa04 f707 	lsl.w	r7, r4, r7
 80012d8:	40cb      	lsrs	r3, r1
 80012da:	431f      	orrs	r7, r3
 80012dc:	40cc      	lsrs	r4, r1
 80012de:	e9c5 7400 	strd	r7, r4, [r5]
 80012e2:	2100      	movs	r1, #0
 80012e4:	e751      	b.n	800118a <__udivmoddi4+0xa6>
 80012e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ea:	f1c2 0320 	rsb	r3, r2, #32
 80012ee:	40d9      	lsrs	r1, r3
 80012f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012f4:	fa20 f303 	lsr.w	r3, r0, r3
 80012f8:	fa00 fe02 	lsl.w	lr, r0, r2
 80012fc:	fbb1 f0f8 	udiv	r0, r1, r8
 8001300:	fb08 1110 	mls	r1, r8, r0, r1
 8001304:	4094      	lsls	r4, r2
 8001306:	431c      	orrs	r4, r3
 8001308:	fa1f f78c 	uxth.w	r7, ip
 800130c:	0c23      	lsrs	r3, r4, #16
 800130e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001312:	fb00 f107 	mul.w	r1, r0, r7
 8001316:	4299      	cmp	r1, r3
 8001318:	d908      	bls.n	800132c <__udivmoddi4+0x248>
 800131a:	eb1c 0303 	adds.w	r3, ip, r3
 800131e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001322:	d22c      	bcs.n	800137e <__udivmoddi4+0x29a>
 8001324:	4299      	cmp	r1, r3
 8001326:	d92a      	bls.n	800137e <__udivmoddi4+0x29a>
 8001328:	3802      	subs	r0, #2
 800132a:	4463      	add	r3, ip
 800132c:	1a5b      	subs	r3, r3, r1
 800132e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001332:	fb08 3311 	mls	r3, r8, r1, r3
 8001336:	b2a4      	uxth	r4, r4
 8001338:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800133c:	fb01 f307 	mul.w	r3, r1, r7
 8001340:	42a3      	cmp	r3, r4
 8001342:	d908      	bls.n	8001356 <__udivmoddi4+0x272>
 8001344:	eb1c 0404 	adds.w	r4, ip, r4
 8001348:	f101 36ff 	add.w	r6, r1, #4294967295
 800134c:	d213      	bcs.n	8001376 <__udivmoddi4+0x292>
 800134e:	42a3      	cmp	r3, r4
 8001350:	d911      	bls.n	8001376 <__udivmoddi4+0x292>
 8001352:	3902      	subs	r1, #2
 8001354:	4464      	add	r4, ip
 8001356:	1ae4      	subs	r4, r4, r3
 8001358:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800135c:	e73b      	b.n	80011d6 <__udivmoddi4+0xf2>
 800135e:	4604      	mov	r4, r0
 8001360:	e6f2      	b.n	8001148 <__udivmoddi4+0x64>
 8001362:	4608      	mov	r0, r1
 8001364:	e708      	b.n	8001178 <__udivmoddi4+0x94>
 8001366:	45c2      	cmp	sl, r8
 8001368:	d2af      	bcs.n	80012ca <__udivmoddi4+0x1e6>
 800136a:	ebb8 0e02 	subs.w	lr, r8, r2
 800136e:	eb63 060c 	sbc.w	r6, r3, ip
 8001372:	3801      	subs	r0, #1
 8001374:	e7a9      	b.n	80012ca <__udivmoddi4+0x1e6>
 8001376:	4631      	mov	r1, r6
 8001378:	e7ed      	b.n	8001356 <__udivmoddi4+0x272>
 800137a:	4603      	mov	r3, r0
 800137c:	e79a      	b.n	80012b4 <__udivmoddi4+0x1d0>
 800137e:	4630      	mov	r0, r6
 8001380:	e7d4      	b.n	800132c <__udivmoddi4+0x248>
 8001382:	46b0      	mov	r8, r6
 8001384:	e781      	b.n	800128a <__udivmoddi4+0x1a6>
 8001386:	4463      	add	r3, ip
 8001388:	3802      	subs	r0, #2
 800138a:	e74f      	b.n	800122c <__udivmoddi4+0x148>
 800138c:	4606      	mov	r6, r0
 800138e:	4623      	mov	r3, r4
 8001390:	4608      	mov	r0, r1
 8001392:	e711      	b.n	80011b8 <__udivmoddi4+0xd4>
 8001394:	3e02      	subs	r6, #2
 8001396:	4463      	add	r3, ip
 8001398:	e732      	b.n	8001200 <__udivmoddi4+0x11c>
 800139a:	bf00      	nop

0800139c <__aeabi_idiv0>:
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <getTare>:
#define SELECT_PIN GPIO_PIN_2
#define RESET_PIN GPIO_PIN_1
#define BUTTON_PORT GPIOB


uint32_t getTare(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	printf("Remove all weight from the drawer(5 seconds)\n\r");
 80013a6:	4815      	ldr	r0, [pc, #84]	@ (80013fc <getTare+0x5c>)
 80013a8:	f004 fb6e 	bl	8005a88 <iprintf>
	HAL_Delay(5000);
 80013ac:	f241 3088 	movw	r0, #5000	@ 0x1388
 80013b0:	f001 fb78 	bl	8002aa4 <HAL_Delay>
	printf("Gathering initial Tare of Load Cell...\n\r");
 80013b4:	4812      	ldr	r0, [pc, #72]	@ (8001400 <getTare+0x60>)
 80013b6:	f004 fb67 	bl	8005a88 <iprintf>
	int weight_temp = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 1; i <= 4; i++){
 80013be:	2301      	movs	r3, #1
 80013c0:	807b      	strh	r3, [r7, #2]
 80013c2:	e00e      	b.n	80013e2 <getTare+0x42>
			weight_temp = (int)weighRaw();
 80013c4:	f001 f843 	bl	800244e <weighRaw>
 80013c8:	6078      	str	r0, [r7, #4]
			printf("Tare attempt %d: %d\n\r", i, weight_temp);
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4619      	mov	r1, r3
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <getTare+0x64>)
 80013d2:	f004 fb59 	bl	8005a88 <iprintf>
			HAL_Delay(10);
 80013d6:	200a      	movs	r0, #10
 80013d8:	f001 fb64 	bl	8002aa4 <HAL_Delay>
	for(uint16_t i = 1; i <= 4; i++){
 80013dc:	887b      	ldrh	r3, [r7, #2]
 80013de:	3301      	adds	r3, #1
 80013e0:	807b      	strh	r3, [r7, #2]
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d9ed      	bls.n	80013c4 <getTare+0x24>
		}
	printf("Tare Set: %d\n\r", weight_temp);
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4807      	ldr	r0, [pc, #28]	@ (8001408 <getTare+0x68>)
 80013ec:	f004 fb4c 	bl	8005a88 <iprintf>
	return weight_temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	08009618 	.word	0x08009618
 8001400:	08009648 	.word	0x08009648
 8001404:	08009674 	.word	0x08009674
 8001408:	0800968c 	.word	0x0800968c

0800140c <Calibrate>:

void Calibrate(){
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af02      	add	r7, sp, #8
	printf("Beginning with Row: 1 Drawer: 1\n\r");
 8001412:	48a1      	ldr	r0, [pc, #644]	@ (8001698 <Calibrate+0x28c>)
 8001414:	f004 fb38 	bl	8005a88 <iprintf>

	uint32_t tare = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	633b      	str	r3, [r7, #48]	@ 0x30
	float knownHX711 = 1;
 800141c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int thresh = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28

	for(int i = 1; i <= 4; i++){
 8001426:	2301      	movs	r3, #1
 8001428:	647b      	str	r3, [r7, #68]	@ 0x44
 800142a:	e12c      	b.n	8001686 <Calibrate+0x27a>
		printf("Row %d", i);
 800142c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800142e:	489b      	ldr	r0, [pc, #620]	@ (800169c <Calibrate+0x290>)
 8001430:	f004 fb2a 	bl	8005a88 <iprintf>

		uint16_t A_mast = MuxCombos[i-1].A;
 8001434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001436:	1e5a      	subs	r2, r3, #1
 8001438:	4999      	ldr	r1, [pc, #612]	@ (80016a0 <Calibrate+0x294>)
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	440b      	add	r3, r1
 8001442:	3302      	adds	r3, #2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	84fb      	strh	r3, [r7, #38]	@ 0x26
		uint16_t B_mast = MuxCombos[i-1].B;
 8001448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	4994      	ldr	r1, [pc, #592]	@ (80016a0 <Calibrate+0x294>)
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	440b      	add	r3, r1
 8001456:	3301      	adds	r3, #1
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t C_mast = MuxCombos[i-1].C;
 800145c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800145e:	1e5a      	subs	r2, r3, #1
 8001460:	498f      	ldr	r1, [pc, #572]	@ (80016a0 <Calibrate+0x294>)
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	440b      	add	r3, r1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	847b      	strh	r3, [r7, #34]	@ 0x22

		muxSET(A_mast, B_mast, C_mast, 1);
 800146e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001470:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001472:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8001474:	2301      	movs	r3, #1
 8001476:	f000 fe59 	bl	800212c <muxSET>

		setRelay(i);
 800147a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fe9c 	bl	80021bc <setRelay>

		if(i == 1){
 8001484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001486:	2b01      	cmp	r3, #1
 8001488:	d17d      	bne.n	8001586 <Calibrate+0x17a>
			for(int j = 1; j <= 4; j++){
 800148a:	2301      	movs	r3, #1
 800148c:	643b      	str	r3, [r7, #64]	@ 0x40
 800148e:	e076      	b.n	800157e <Calibrate+0x172>

				uint16_t A_slave = MuxCombos[j-1].A;
 8001490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001492:	1e5a      	subs	r2, r3, #1
 8001494:	4982      	ldr	r1, [pc, #520]	@ (80016a0 <Calibrate+0x294>)
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	440b      	add	r3, r1
 800149e:	3302      	adds	r3, #2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	81fb      	strh	r3, [r7, #14]
				uint16_t B_slave = MuxCombos[j-1].B;
 80014a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	497d      	ldr	r1, [pc, #500]	@ (80016a0 <Calibrate+0x294>)
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	3301      	adds	r3, #1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	81bb      	strh	r3, [r7, #12]
				uint16_t C_slave = MuxCombos[j-1].C;
 80014b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ba:	1e5a      	subs	r2, r3, #1
 80014bc:	4978      	ldr	r1, [pc, #480]	@ (80016a0 <Calibrate+0x294>)
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	817b      	strh	r3, [r7, #10]

				muxSET(A_slave, B_slave, C_slave, 0);
 80014ca:	897a      	ldrh	r2, [r7, #10]
 80014cc:	89b9      	ldrh	r1, [r7, #12]
 80014ce:	89f8      	ldrh	r0, [r7, #14]
 80014d0:	2300      	movs	r3, #0
 80014d2:	f000 fe2b 	bl	800212c <muxSET>

				printf("Drawer %d", j);
 80014d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80014d8:	4872      	ldr	r0, [pc, #456]	@ (80016a4 <Calibrate+0x298>)
 80014da:	f004 fad5 	bl	8005a88 <iprintf>
				tare = getTare();
 80014de:	f7ff ff5f 	bl	80013a0 <getTare>
 80014e2:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button once when ready to calibrate\n\r");
 80014e4:	4870      	ldr	r0, [pc, #448]	@ (80016a8 <Calibrate+0x29c>)
 80014e6:	f004 facf 	bl	8005a88 <iprintf>

				//single press confirmation here

				singlePress(BUTTON_PORT, SELECT_PIN);
 80014ea:	2104      	movs	r1, #4
 80014ec:	486f      	ldr	r0, [pc, #444]	@ (80016ac <Calibrate+0x2a0>)
 80014ee:	f000 fe03 	bl	80020f8 <singlePress>

				knownHX711 = weighRawTare(tare);
 80014f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80014f4:	f000 ffe5 	bl	80024c2 <weighRawTare>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fcba 	bl	8000e74 <__aeabi_i2f>
 8001500:	4603      	mov	r3, r0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
				printf("Read weight: %f", knownHX711);
 8001504:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001506:	f7ff f85b 	bl	80005c0 <__aeabi_f2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4868      	ldr	r0, [pc, #416]	@ (80016b0 <Calibrate+0x2a4>)
 8001510:	f004 faba 	bl	8005a88 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001514:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001516:	f7ff fd27 	bl	8000f68 <__aeabi_f2uiz>
 800151a:	4603      	mov	r3, r0
 800151c:	4618      	mov	r0, r3
 800151e:	f001 f811 	bl	8002544 <getCalFactor>
 8001522:	6078      	str	r0, [r7, #4]

				for(int p = 0; p < 4; p++){
 8001524:	2300      	movs	r3, #0
 8001526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001528:	e00f      	b.n	800154a <Calibrate+0x13e>
					int weight = weigh(tare, calFactor);
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800152e:	f000 ff3f 	bl	80023b0 <weigh>
 8001532:	6038      	str	r0, [r7, #0]
					printf("Weight: %d", weight);
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	485f      	ldr	r0, [pc, #380]	@ (80016b4 <Calibrate+0x2a8>)
 8001538:	f004 faa6 	bl	8005a88 <iprintf>
					HAL_Delay(400);
 800153c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001540:	f001 fab0 	bl	8002aa4 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001546:	3301      	adds	r3, #1
 8001548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800154a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800154c:	2b03      	cmp	r3, #3
 800154e:	ddec      	ble.n	800152a <Calibrate+0x11e>
				}

				thresh = refillDrawer(tare, calFactor);
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001554:	f000 f8f6 	bl	8001744 <refillDrawer>
 8001558:	62b8      	str	r0, [r7, #40]	@ 0x28

				saveDrawerConfig(i, j, calFactor, tare, thresh);
 800155a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800155c:	b29c      	uxth	r4, r3
 800155e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001560:	b29d      	uxth	r5, r3
 8001562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001564:	f7ff fc86 	bl	8000e74 <__aeabi_i2f>
 8001568:	4603      	mov	r3, r0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4629      	mov	r1, r5
 8001572:	4620      	mov	r0, r4
 8001574:	f000 fb26 	bl	8001bc4 <saveDrawerConfig>
			for(int j = 1; j <= 4; j++){
 8001578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800157a:	3301      	adds	r3, #1
 800157c:	643b      	str	r3, [r7, #64]	@ 0x40
 800157e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001580:	2b04      	cmp	r3, #4
 8001582:	dd85      	ble.n	8001490 <Calibrate+0x84>
 8001584:	e07c      	b.n	8001680 <Calibrate+0x274>
			}
		}
		else{
			for(int k = 1; k <= 7; k++){
 8001586:	2301      	movs	r3, #1
 8001588:	63bb      	str	r3, [r7, #56]	@ 0x38
 800158a:	e076      	b.n	800167a <Calibrate+0x26e>

				uint16_t A_slave = MuxCombos[k-1].A;
 800158c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	4943      	ldr	r1, [pc, #268]	@ (80016a0 <Calibrate+0x294>)
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	440b      	add	r3, r1
 800159a:	3302      	adds	r3, #2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	843b      	strh	r3, [r7, #32]
				uint16_t B_slave = MuxCombos[k-1].B;
 80015a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a2:	1e5a      	subs	r2, r3, #1
 80015a4:	493e      	ldr	r1, [pc, #248]	@ (80016a0 <Calibrate+0x294>)
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	3301      	adds	r3, #1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	83fb      	strh	r3, [r7, #30]
				uint16_t C_slave = MuxCombos[k-1].C;
 80015b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015b6:	1e5a      	subs	r2, r3, #1
 80015b8:	4939      	ldr	r1, [pc, #228]	@ (80016a0 <Calibrate+0x294>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	83bb      	strh	r3, [r7, #28]

				muxSET(A_slave, B_slave, C_slave, 0);
 80015c6:	8bba      	ldrh	r2, [r7, #28]
 80015c8:	8bf9      	ldrh	r1, [r7, #30]
 80015ca:	8c38      	ldrh	r0, [r7, #32]
 80015cc:	2300      	movs	r3, #0
 80015ce:	f000 fdad 	bl	800212c <muxSET>

				printf("Drawer %d", k);
 80015d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80015d4:	4833      	ldr	r0, [pc, #204]	@ (80016a4 <Calibrate+0x298>)
 80015d6:	f004 fa57 	bl	8005a88 <iprintf>
				tare = getTare();
 80015da:	f7ff fee1 	bl	80013a0 <getTare>
 80015de:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button once when ready to calibrate\n\r");
 80015e0:	4831      	ldr	r0, [pc, #196]	@ (80016a8 <Calibrate+0x29c>)
 80015e2:	f004 fa51 	bl	8005a88 <iprintf>

				//single press confirmation here
				singlePress(BUTTON_PORT, SELECT_PIN);
 80015e6:	2104      	movs	r1, #4
 80015e8:	4830      	ldr	r0, [pc, #192]	@ (80016ac <Calibrate+0x2a0>)
 80015ea:	f000 fd85 	bl	80020f8 <singlePress>

				knownHX711 = weighRawTare(tare);
 80015ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80015f0:	f000 ff67 	bl	80024c2 <weighRawTare>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fc3c 	bl	8000e74 <__aeabi_i2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				printf("Read weight: %f", knownHX711);
 8001600:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001602:	f7fe ffdd 	bl	80005c0 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4829      	ldr	r0, [pc, #164]	@ (80016b0 <Calibrate+0x2a4>)
 800160c:	f004 fa3c 	bl	8005a88 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001610:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001612:	f7ff fca9 	bl	8000f68 <__aeabi_f2uiz>
 8001616:	4603      	mov	r3, r0
 8001618:	4618      	mov	r0, r3
 800161a:	f000 ff93 	bl	8002544 <getCalFactor>
 800161e:	61b8      	str	r0, [r7, #24]

				for(int p = 0; p < 4; p++){
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
 8001624:	e00f      	b.n	8001646 <Calibrate+0x23a>
					int weight = weigh(tare, calFactor);
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800162a:	f000 fec1 	bl	80023b0 <weigh>
 800162e:	6138      	str	r0, [r7, #16]
					printf("Weight: %d", weight);
 8001630:	6939      	ldr	r1, [r7, #16]
 8001632:	4820      	ldr	r0, [pc, #128]	@ (80016b4 <Calibrate+0x2a8>)
 8001634:	f004 fa28 	bl	8005a88 <iprintf>
					HAL_Delay(400);
 8001638:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800163c:	f001 fa32 	bl	8002aa4 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001642:	3301      	adds	r3, #1
 8001644:	637b      	str	r3, [r7, #52]	@ 0x34
 8001646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001648:	2b03      	cmp	r3, #3
 800164a:	ddec      	ble.n	8001626 <Calibrate+0x21a>
				}

				int thresh = refillDrawer(tare, calFactor);
 800164c:	69b9      	ldr	r1, [r7, #24]
 800164e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001650:	f000 f878 	bl	8001744 <refillDrawer>
 8001654:	6178      	str	r0, [r7, #20]

				saveDrawerConfig(i, k, calFactor, tare, thresh);
 8001656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001658:	b29c      	uxth	r4, r3
 800165a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800165c:	b29d      	uxth	r5, r3
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff fc08 	bl	8000e74 <__aeabi_i2f>
 8001664:	4603      	mov	r3, r0
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4629      	mov	r1, r5
 800166e:	4620      	mov	r0, r4
 8001670:	f000 faa8 	bl	8001bc4 <saveDrawerConfig>
			for(int k = 1; k <= 7; k++){
 8001674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001676:	3301      	adds	r3, #1
 8001678:	63bb      	str	r3, [r7, #56]	@ 0x38
 800167a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800167c:	2b07      	cmp	r3, #7
 800167e:	dd85      	ble.n	800158c <Calibrate+0x180>
	for(int i = 1; i <= 4; i++){
 8001680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001682:	3301      	adds	r3, #1
 8001684:	647b      	str	r3, [r7, #68]	@ 0x44
 8001686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001688:	2b04      	cmp	r3, #4
 800168a:	f77f aecf 	ble.w	800142c <Calibrate+0x20>

			}
		}
	}
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	3748      	adds	r7, #72	@ 0x48
 8001694:	46bd      	mov	sp, r7
 8001696:	bdb0      	pop	{r4, r5, r7, pc}
 8001698:	0800969c 	.word	0x0800969c
 800169c:	080096c0 	.word	0x080096c0
 80016a0:	08009cd0 	.word	0x08009cd0
 80016a4:	080096c8 	.word	0x080096c8
 80016a8:	080096d4 	.word	0x080096d4
 80016ac:	40020400 	.word	0x40020400
 80016b0:	08009730 	.word	0x08009730
 80016b4:	08009740 	.word	0x08009740

080016b8 <getThresh>:

uint32_t DP_Threshold = 2000; // 2 second threshold
uint32_t press_time = 0;  // Timestamp of the first press
uint8_t press_count = 0;  // A Flag that's used for indicating a second press

int getThresh(uint32_t tare, float calFactor){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
	float avg = 0;
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < 4; i++){
 80016cc:	2300      	movs	r3, #0
 80016ce:	827b      	strh	r3, [r7, #18]
 80016d0:	e00c      	b.n	80016ec <getThresh+0x34>
		uint16_t weight = weigh(tare, calFactor);
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fe6b 	bl	80023b0 <weigh>
 80016da:	4603      	mov	r3, r0
 80016dc:	817b      	strh	r3, [r7, #10]
		sum += weight;
 80016de:	897b      	ldrh	r3, [r7, #10]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	4413      	add	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < 4; i++){
 80016e6:	8a7b      	ldrh	r3, [r7, #18]
 80016e8:	3301      	adds	r3, #1
 80016ea:	827b      	strh	r3, [r7, #18]
 80016ec:	8a7b      	ldrh	r3, [r7, #18]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d9ef      	bls.n	80016d2 <getThresh+0x1a>
	}

	avg = sum / 4.0;
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7fe ff42 	bl	800057c <__aeabi_ui2d>
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <getThresh+0x88>)
 80016fe:	f7ff f8e1 	bl	80008c4 <__aeabi_ddiv>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff faa9 	bl	8000c60 <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	60fb      	str	r3, [r7, #12]

	return (avg * 0.1); //returns 10% of the normalized weight as the threshold
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7fe ff54 	bl	80005c0 <__aeabi_f2d>
 8001718:	a307      	add	r3, pc, #28	@ (adr r3, 8001738 <getThresh+0x80>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ffa7 	bl	8000670 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa51 	bl	8000bd0 <__aeabi_d2iz>
 800172e:	4603      	mov	r3, r0

}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	9999999a 	.word	0x9999999a
 800173c:	3fb99999 	.word	0x3fb99999
 8001740:	40100000 	.word	0x40100000

08001744 <refillDrawer>:



int refillDrawer(uint32_t tare, float calFactor){
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	printf("Please refill the current drawer\n\rPress the button twice when ready\n\r");
 800174e:	480b      	ldr	r0, [pc, #44]	@ (800177c <refillDrawer+0x38>)
 8001750:	f004 f99a 	bl	8005a88 <iprintf>

	//function to wait for a double press then a confirmation press
	doublePress(GROUP, PIN);
 8001754:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001758:	4809      	ldr	r0, [pc, #36]	@ (8001780 <refillDrawer+0x3c>)
 800175a:	f000 fc8d 	bl	8002078 <doublePress>

	int thresh = getThresh(tare, calFactor);
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ffa9 	bl	80016b8 <getThresh>
 8001766:	60f8      	str	r0, [r7, #12]
	printf("Threshold set to %d", thresh);
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	4806      	ldr	r0, [pc, #24]	@ (8001784 <refillDrawer+0x40>)
 800176c:	f004 f98c 	bl	8005a88 <iprintf>
	return thresh;
 8001770:	68fb      	ldr	r3, [r7, #12]


}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	0800974c 	.word	0x0800974c
 8001780:	40020000 	.word	0x40020000
 8001784:	08009794 	.word	0x08009794

08001788 <main_function>:
#define DT_PIN GPIO_PIN_8
#define DT_PORT GPIOA
#define SCK_PIN GPIO_PIN_5
#define SCK_PORT GPIOB

void main_function(){
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b09b      	sub	sp, #108	@ 0x6c
 800178c:	af02      	add	r7, sp, #8


	struct drawerInfo drawerInst;
	uint32_t tare = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	64bb      	str	r3, [r7, #72]	@ 0x48
	float calFactor = 1;
 8001792:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001796:	647b      	str	r3, [r7, #68]	@ 0x44
	int thresh;

	uint32_t sum;
	uint16_t normalizedWeight;

	for(uint16_t i = 1; i <= 4; i++){
 8001798:	2301      	movs	r3, #1
 800179a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800179e:	e14d      	b.n	8001a3c <main_function+0x2b4>
			printf("Row %d", i);
 80017a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80017a4:	4619      	mov	r1, r3
 80017a6:	48aa      	ldr	r0, [pc, #680]	@ (8001a50 <main_function+0x2c8>)
 80017a8:	f004 f96e 	bl	8005a88 <iprintf>

			uint16_t A_mast = MuxCombos[i-1].A;
 80017ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	49a8      	ldr	r1, [pc, #672]	@ (8001a54 <main_function+0x2cc>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	3302      	adds	r3, #2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			uint16_t B_mast = MuxCombos[i-1].B;
 80017c4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	49a2      	ldr	r1, [pc, #648]	@ (8001a54 <main_function+0x2cc>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	3301      	adds	r3, #1
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t C_mast = MuxCombos[i-1].C;
 80017dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	499c      	ldr	r1, [pc, #624]	@ (8001a54 <main_function+0x2cc>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e

			muxSET(A_mast, B_mast, C_mast, 1);
 80017f0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80017f2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80017f6:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 80017fa:	2301      	movs	r3, #1
 80017fc:	f000 fc96 	bl	800212c <muxSET>

			setRelay(i);
 8001800:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001804:	b2db      	uxtb	r3, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fcd8 	bl	80021bc <setRelay>

			if(i == 1){
 800180c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001810:	2b01      	cmp	r3, #1
 8001812:	f040 8089 	bne.w	8001928 <main_function+0x1a0>
				for(uint16_t j = 1; j <= 4; j++){
 8001816:	2301      	movs	r3, #1
 8001818:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800181c:	e07e      	b.n	800191c <main_function+0x194>

					sum = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[j-1].A;
 8001826:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	4989      	ldr	r1, [pc, #548]	@ (8001a54 <main_function+0x2cc>)
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	440b      	add	r3, r1
 8001836:	3302      	adds	r3, #2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	857b      	strh	r3, [r7, #42]	@ 0x2a
					uint16_t B_slave = MuxCombos[j-1].B;
 800183c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	4984      	ldr	r1, [pc, #528]	@ (8001a54 <main_function+0x2cc>)
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	440b      	add	r3, r1
 800184c:	3301      	adds	r3, #1
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	853b      	strh	r3, [r7, #40]	@ 0x28
					uint16_t C_slave = MuxCombos[j-1].C;
 8001852:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	497e      	ldr	r1, [pc, #504]	@ (8001a54 <main_function+0x2cc>)
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	440b      	add	r3, r1
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	84fb      	strh	r3, [r7, #38]	@ 0x26

					muxSET(A_slave, B_slave, C_slave, 0);
 8001866:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001868:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800186a:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 800186c:	2300      	movs	r3, #0
 800186e:	f000 fc5d 	bl	800212c <muxSET>

					printf("Drawer %d", j);
 8001872:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001876:	4619      	mov	r1, r3
 8001878:	4877      	ldr	r0, [pc, #476]	@ (8001a58 <main_function+0x2d0>)
 800187a:	f004 f905 	bl	8005a88 <iprintf>

					drawerInst = getFileInfo(i, j);
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8001886:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fb0a 	bl	8001ea4 <getFileInfo>

					tare = drawerInst.Tare;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fb3e 	bl	8000f1c <__aeabi_f2iz>
 80018a0:	4603      	mov	r3, r0
 80018a2:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80018a8:	e00f      	b.n	80018ca <main_function+0x142>

						int weight = weigh(tare, calFactor);
 80018aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80018ac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80018ae:	f000 fd7f 	bl	80023b0 <weigh>
 80018b2:	6238      	str	r0, [r7, #32]
						sum += weight;
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80018b8:	4413      	add	r3, r2
 80018ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 80018bc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80018c0:	f001 f8f0 	bl	8002aa4 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 80018c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c6:	3301      	adds	r3, #1
 80018c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80018ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	ddec      	ble.n	80018aa <main_function+0x122>
					}

					normalizedWeight = sum / 4;
 80018d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 80018d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d8:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 80018dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80018de:	429a      	cmp	r2, r3
 80018e0:	db17      	blt.n	8001912 <main_function+0x18a>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 80018e2:	485e      	ldr	r0, [pc, #376]	@ (8001a5c <main_function+0x2d4>)
 80018e4:	f004 f8d0 	bl	8005a88 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 80018e8:	485d      	ldr	r0, [pc, #372]	@ (8001a60 <main_function+0x2d8>)
 80018ea:	f004 f8cd 	bl	8005a88 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 80018ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80018f0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80018f2:	f7ff ff27 	bl	8001744 <refillDrawer>
 80018f6:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, j, calFactor, tare, thresh);
 80018f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018fa:	f7ff fabb 	bl	8000e74 <__aeabi_i2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8001904:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800190c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800190e:	f000 f9a9 	bl	8001c64 <updateDrawerConfig>
				for(uint16_t j = 1; j <= 4; j++){
 8001912:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001916:	3301      	adds	r3, #1
 8001918:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800191c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001920:	2b04      	cmp	r3, #4
 8001922:	f67f af7c 	bls.w	800181e <main_function+0x96>
 8001926:	e084      	b.n	8001a32 <main_function+0x2aa>


				}
			}
			else{
				for(int k = 1; k <= 7; k++){
 8001928:	2301      	movs	r3, #1
 800192a:	653b      	str	r3, [r7, #80]	@ 0x50
 800192c:	e07d      	b.n	8001a2a <main_function+0x2a2>

					sum = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[k-1].A;
 8001936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	4946      	ldr	r1, [pc, #280]	@ (8001a54 <main_function+0x2cc>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	440b      	add	r3, r1
 8001944:	3302      	adds	r3, #2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	877b      	strh	r3, [r7, #58]	@ 0x3a
					uint16_t B_slave = MuxCombos[k-1].B;
 800194a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800194c:	1e5a      	subs	r2, r3, #1
 800194e:	4941      	ldr	r1, [pc, #260]	@ (8001a54 <main_function+0x2cc>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	440b      	add	r3, r1
 8001958:	3301      	adds	r3, #1
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	873b      	strh	r3, [r7, #56]	@ 0x38
					uint16_t C_slave = MuxCombos[k-1].C;
 800195e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	493c      	ldr	r1, [pc, #240]	@ (8001a54 <main_function+0x2cc>)
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	440b      	add	r3, r1
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	86fb      	strh	r3, [r7, #54]	@ 0x36

					muxSET(A_slave, B_slave, C_slave, 0);
 8001970:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001972:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8001974:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8001976:	2300      	movs	r3, #0
 8001978:	f000 fbd8 	bl	800212c <muxSET>

					printf("Drawer %d", k);
 800197c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800197e:	4836      	ldr	r0, [pc, #216]	@ (8001a58 <main_function+0x2d0>)
 8001980:	f004 f882 	bl	8005a88 <iprintf>

					drawerInst = getFileInfo(i, k);
 8001984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001986:	b29a      	uxth	r2, r3
 8001988:	463b      	mov	r3, r7
 800198a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fa88 	bl	8001ea4 <getFileInfo>
 8001994:	f107 0410 	add.w	r4, r7, #16
 8001998:	463b      	mov	r3, r7
 800199a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

					tare = drawerInst.Tare;
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fab6 	bl	8000f1c <__aeabi_f2iz>
 80019b0:	4603      	mov	r3, r0
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 80019b4:	2300      	movs	r3, #0
 80019b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019b8:	e00f      	b.n	80019da <main_function+0x252>

						int weight = weigh(tare, calFactor);
 80019ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80019bc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80019be:	f000 fcf7 	bl	80023b0 <weigh>
 80019c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
						sum += weight;
 80019c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80019c8:	4413      	add	r3, r2
 80019ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 80019cc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80019d0:	f001 f868 	bl	8002aa4 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 80019d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019d6:	3301      	adds	r3, #1
 80019d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019dc:	2b03      	cmp	r3, #3
 80019de:	ddec      	ble.n	80019ba <main_function+0x232>
					}

					normalizedWeight = sum / 4;
 80019e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 80019e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e8:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 80019ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80019ee:	429a      	cmp	r2, r3
 80019f0:	db18      	blt.n	8001a24 <main_function+0x29c>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 80019f2:	481a      	ldr	r0, [pc, #104]	@ (8001a5c <main_function+0x2d4>)
 80019f4:	f004 f848 	bl	8005a88 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 80019f8:	4819      	ldr	r0, [pc, #100]	@ (8001a60 <main_function+0x2d8>)
 80019fa:	f004 f845 	bl	8005a88 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 80019fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001a00:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001a02:	f7ff fe9f 	bl	8001744 <refillDrawer>
 8001a06:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, k, calFactor, tare, thresh);
 8001a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a0a:	b29c      	uxth	r4, r3
 8001a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a0e:	f7ff fa31 	bl	8000e74 <__aeabi_i2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a1e:	4621      	mov	r1, r4
 8001a20:	f000 f920 	bl	8001c64 <updateDrawerConfig>
				for(int k = 1; k <= 7; k++){
 8001a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a26:	3301      	adds	r3, #1
 8001a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a2c:	2b07      	cmp	r3, #7
 8001a2e:	f77f af7e 	ble.w	800192e <main_function+0x1a6>
	for(uint16_t i = 1; i <= 4; i++){
 8001a32:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001a36:	3301      	adds	r3, #1
 8001a38:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8001a3c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	f67f aead 	bls.w	80017a0 <main_function+0x18>

				}
			}
	}

}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	3764      	adds	r7, #100	@ 0x64
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}
 8001a50:	080097a8 	.word	0x080097a8
 8001a54:	08009cd0 	.word	0x08009cd0
 8001a58:	080097b0 	.word	0x080097b0
 8001a5c:	080097bc 	.word	0x080097bc
 8001a60:	080097f8 	.word	0x080097f8

08001a64 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <MX_GPIO_Init+0x90>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <MX_GPIO_Init+0x90>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_GPIO_Init+0x90>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_GPIO_Init+0x90>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <MX_GPIO_Init+0x90>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <MX_GPIO_Init+0x90>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2120      	movs	r1, #32
 8001aae:	4812      	ldr	r0, [pc, #72]	@ (8001af8 <MX_GPIO_Init+0x94>)
 8001ab0:	f001 faa5 	bl	8002ffe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ab4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <MX_GPIO_Init+0x98>)
 8001aca:	f001 f8f1 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4804      	ldr	r0, [pc, #16]	@ (8001af8 <MX_GPIO_Init+0x94>)
 8001ae6:	f001 f8e3 	bl	8002cb0 <HAL_GPIO_Init>

}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020000 	.word	0x40020000

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b04:	f000 ff5f 	bl	80029c6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b08:	f000 f80e 	bl	8001b28 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0c:	f7ff ffaa 	bl	8001a64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b10:	f000 fe5e 	bl	80027d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001b14:	f000 fec4 	bl	80028a0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Calibrate();
 8001b18:	f7ff fc78 	bl	800140c <Calibrate>
  main_function();
 8001b1c:	f7ff fe34 	bl	8001788 <main_function>
 8001b20:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b092      	sub	sp, #72	@ 0x48
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2234      	movs	r2, #52	@ 0x34
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fa75 	bl	8006026 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <SystemClock_Config+0x8c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001b52:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <SystemClock_Config+0x8c>)
 8001b54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b58:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001b66:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 fa5b 	bl	8003030 <HAL_RCC_OscConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001b80:	f000 f81a 	bl	8001bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b84:	230f      	movs	r3, #15
 8001b86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 fd77 	bl	8003690 <HAL_RCC_ClockConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ba8:	f000 f806 	bl	8001bb8 <Error_Handler>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3748      	adds	r7, #72	@ 0x48
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i
}
 8001bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <Error_Handler+0x8>

08001bc4 <saveDrawerConfig>:
const char temp_filename[FILENAME_SIZE] = "temp.txt";

char buffer[MAX_FILELINE];
char previousLine[MAX_FILELINE];

void saveDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, float thresh){
 8001bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc8:	b08c      	sub	sp, #48	@ 0x30
 8001bca:	af08      	add	r7, sp, #32
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	81fb      	strh	r3, [r7, #14]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	81bb      	strh	r3, [r7, #12]


	drawerConfig = fopen(filename, "w");
 8001bd8:	491c      	ldr	r1, [pc, #112]	@ (8001c4c <saveDrawerConfig+0x88>)
 8001bda:	481d      	ldr	r0, [pc, #116]	@ (8001c50 <saveDrawerConfig+0x8c>)
 8001bdc:	f003 fed4 	bl	8005988 <fopen>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c54 <saveDrawerConfig+0x90>)
 8001be4:	6013      	str	r3, [r2, #0]
	if (drawerConfig == NULL){
 8001be6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <saveDrawerConfig+0x90>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <saveDrawerConfig+0x32>
		printf("Could not open file\n\r");
 8001bee:	481a      	ldr	r0, [pc, #104]	@ (8001c58 <saveDrawerConfig+0x94>)
 8001bf0:	f003 ff4a 	bl	8005a88 <iprintf>
 8001bf4:	e020      	b.n	8001c38 <saveDrawerConfig+0x74>
	}
	else{
		snprintf(buffer, sizeof(buffer),"Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%f", row, drawer, calFactor, Tare, thresh);
 8001bf6:	f8b7 800e 	ldrh.w	r8, [r7, #14]
 8001bfa:	89be      	ldrh	r6, [r7, #12]
 8001bfc:	68b8      	ldr	r0, [r7, #8]
 8001bfe:	f7fe fcdf 	bl	80005c0 <__aeabi_f2d>
 8001c02:	4604      	mov	r4, r0
 8001c04:	460d      	mov	r5, r1
 8001c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c08:	f7fe fcda 	bl	80005c0 <__aeabi_f2d>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	9304      	str	r3, [sp, #16]
 8001c18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001c1c:	9600      	str	r6, [sp, #0]
 8001c1e:	4643      	mov	r3, r8
 8001c20:	4a0e      	ldr	r2, [pc, #56]	@ (8001c5c <saveDrawerConfig+0x98>)
 8001c22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c26:	480e      	ldr	r0, [pc, #56]	@ (8001c60 <saveDrawerConfig+0x9c>)
 8001c28:	f004 f83a 	bl	8005ca0 <sniprintf>
		fputs(buffer, drawerConfig);
 8001c2c:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <saveDrawerConfig+0x90>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	480b      	ldr	r0, [pc, #44]	@ (8001c60 <saveDrawerConfig+0x9c>)
 8001c34:	f003 ff00 	bl	8005a38 <fputs>
	}

	fclose(drawerConfig);
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <saveDrawerConfig+0x90>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fc15 	bl	800546c <fclose>

}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c4c:	08009828 	.word	0x08009828
 8001c50:	080098d0 	.word	0x080098d0
 8001c54:	200001f0 	.word	0x200001f0
 8001c58:	0800982c 	.word	0x0800982c
 8001c5c:	08009844 	.word	0x08009844
 8001c60:	200001f8 	.word	0x200001f8

08001c64 <updateDrawerConfig>:

void updateDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, float thresh){ //will need to add ID marker and compare if they are the same, if not then change both locations
 8001c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c68:	b08e      	sub	sp, #56	@ 0x38
 8001c6a:	af08      	add	r7, sp, #32
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	4603      	mov	r3, r0
 8001c72:	81fb      	strh	r3, [r7, #14]
 8001c74:	460b      	mov	r3, r1
 8001c76:	81bb      	strh	r3, [r7, #12]

	drawerConfig = fopen(filename, "r");
 8001c78:	493a      	ldr	r1, [pc, #232]	@ (8001d64 <updateDrawerConfig+0x100>)
 8001c7a:	483b      	ldr	r0, [pc, #236]	@ (8001d68 <updateDrawerConfig+0x104>)
 8001c7c:	f003 fe84 	bl	8005988 <fopen>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a3a      	ldr	r2, [pc, #232]	@ (8001d6c <updateDrawerConfig+0x108>)
 8001c84:	6013      	str	r3, [r2, #0]
	temp = fopen(temp_filename, "w");
 8001c86:	493a      	ldr	r1, [pc, #232]	@ (8001d70 <updateDrawerConfig+0x10c>)
 8001c88:	483a      	ldr	r0, [pc, #232]	@ (8001d74 <updateDrawerConfig+0x110>)
 8001c8a:	f003 fe7d 	bl	8005988 <fopen>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a39      	ldr	r2, [pc, #228]	@ (8001d78 <updateDrawerConfig+0x114>)
 8001c92:	6013      	str	r3, [r2, #0]

	bool keep_reading = true;
 8001c94:	2301      	movs	r3, #1
 8001c96:	75fb      	strb	r3, [r7, #23]
	uint16_t lineMarker = getLineMarker(row, drawer);
 8001c98:	89ba      	ldrh	r2, [r7, #12]
 8001c9a:	89fb      	ldrh	r3, [r7, #14]
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f894 	bl	8001dcc <getLineMarker>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	827b      	strh	r3, [r7, #18]
	uint16_t currentLine = 1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	82bb      	strh	r3, [r7, #20]
	do{

		fgets(buffer, MAX_FILELINE, drawerConfig);
 8001cac:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <updateDrawerConfig+0x108>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cb6:	4831      	ldr	r0, [pc, #196]	@ (8001d7c <updateDrawerConfig+0x118>)
 8001cb8:	f003 fd12 	bl	80056e0 <fgets>

		if(feof(drawerConfig)) keep_reading = false;
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <updateDrawerConfig+0x108>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fbdb 	bl	800547c <feof>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <updateDrawerConfig+0x6e>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]
 8001cd0:	e02b      	b.n	8001d2a <updateDrawerConfig+0xc6>
		else if(currentLine == lineMarker){ //ID matching would go here, check if IDs match, if not then save previous line, update line, then search for original location of ID and replace that line
 8001cd2:	8aba      	ldrh	r2, [r7, #20]
 8001cd4:	8a7b      	ldrh	r3, [r7, #18]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d121      	bne.n	8001d1e <updateDrawerConfig+0xba>
			snprintf(buffer, sizeof(buffer), "Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%f", row, drawer, calFactor, Tare, thresh);
 8001cda:	f8b7 800e 	ldrh.w	r8, [r7, #14]
 8001cde:	89be      	ldrh	r6, [r7, #12]
 8001ce0:	68b8      	ldr	r0, [r7, #8]
 8001ce2:	f7fe fc6d 	bl	80005c0 <__aeabi_f2d>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	460d      	mov	r5, r1
 8001cea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cec:	f7fe fc68 	bl	80005c0 <__aeabi_f2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	9304      	str	r3, [sp, #16]
 8001cfc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001d00:	9600      	str	r6, [sp, #0]
 8001d02:	4643      	mov	r3, r8
 8001d04:	4a1e      	ldr	r2, [pc, #120]	@ (8001d80 <updateDrawerConfig+0x11c>)
 8001d06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d0a:	481c      	ldr	r0, [pc, #112]	@ (8001d7c <updateDrawerConfig+0x118>)
 8001d0c:	f003 ffc8 	bl	8005ca0 <sniprintf>
			fputs(buffer, temp);
 8001d10:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <updateDrawerConfig+0x114>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4819      	ldr	r0, [pc, #100]	@ (8001d7c <updateDrawerConfig+0x118>)
 8001d18:	f003 fe8e 	bl	8005a38 <fputs>
 8001d1c:	e005      	b.n	8001d2a <updateDrawerConfig+0xc6>
		}
		else fputs(buffer, temp);
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <updateDrawerConfig+0x114>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	4815      	ldr	r0, [pc, #84]	@ (8001d7c <updateDrawerConfig+0x118>)
 8001d26:	f003 fe87 	bl	8005a38 <fputs>

		currentLine++;
 8001d2a:	8abb      	ldrh	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	82bb      	strh	r3, [r7, #20]

	}while(keep_reading);
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ba      	bne.n	8001cac <updateDrawerConfig+0x48>

	fclose(drawerConfig);
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <updateDrawerConfig+0x108>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fb96 	bl	800546c <fclose>
	fclose(temp);
 8001d40:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <updateDrawerConfig+0x114>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fb91 	bl	800546c <fclose>

	remove(filename);
 8001d4a:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <updateDrawerConfig+0x104>)
 8001d4c:	f003 ff98 	bl	8005c80 <remove>
	rename(temp_filename, filename);
 8001d50:	4905      	ldr	r1, [pc, #20]	@ (8001d68 <updateDrawerConfig+0x104>)
 8001d52:	4808      	ldr	r0, [pc, #32]	@ (8001d74 <updateDrawerConfig+0x110>)
 8001d54:	f003 ff9c 	bl	8005c90 <rename>


}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d62:	bf00      	nop
 8001d64:	08009878 	.word	0x08009878
 8001d68:	080098d0 	.word	0x080098d0
 8001d6c:	200001f0 	.word	0x200001f0
 8001d70:	08009828 	.word	0x08009828
 8001d74:	08009ad0 	.word	0x08009ad0
 8001d78:	200001f4 	.word	0x200001f4
 8001d7c:	200001f8 	.word	0x200001f8
 8001d80:	08009844 	.word	0x08009844

08001d84 <getData>:

uint32_t getData(char* token){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i <= 1; i++){
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	81fb      	strh	r3, [r7, #14]
 8001d90:	e011      	b.n	8001db6 <getData+0x32>
		char* temp_token = strtok(token, ":");
 8001d92:	490d      	ldr	r1, [pc, #52]	@ (8001dc8 <getData+0x44>)
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f004 f94f 	bl	8006038 <strtok>
 8001d9a:	60b8      	str	r0, [r7, #8]
		if(i == 1){
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d106      	bne.n	8001db0 <getData+0x2c>

			return strtol(temp_token, NULL, 10);
 8001da2:	220a      	movs	r2, #10
 8001da4:	2100      	movs	r1, #0
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f002 fc94 	bl	80046d4 <strtol>
 8001dac:	4603      	mov	r3, r0
 8001dae:	e006      	b.n	8001dbe <getData+0x3a>
	for(uint16_t i = 0; i <= 1; i++){
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	3301      	adds	r3, #1
 8001db4:	81fb      	strh	r3, [r7, #14]
 8001db6:	89fb      	ldrh	r3, [r7, #14]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d9ea      	bls.n	8001d92 <getData+0xe>
		}
	}
	return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	0800987c 	.word	0x0800987c

08001dcc <getLineMarker>:

uint16_t getLineMarker(uint16_t row, uint16_t drawer){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	80fb      	strh	r3, [r7, #6]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	80bb      	strh	r3, [r7, #4]
	drawerConfig = fopen(filename, "r");
 8001ddc:	492a      	ldr	r1, [pc, #168]	@ (8001e88 <getLineMarker+0xbc>)
 8001dde:	482b      	ldr	r0, [pc, #172]	@ (8001e8c <getLineMarker+0xc0>)
 8001de0:	f003 fdd2 	bl	8005988 <fopen>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a2a      	ldr	r2, [pc, #168]	@ (8001e90 <getLineMarker+0xc4>)
 8001de8:	6013      	str	r3, [r2, #0]
	uint16_t fileIndex = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (drawerConfig == NULL){
 8001dee:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <getLineMarker+0xc4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d133      	bne.n	8001e5e <getLineMarker+0x92>
		printf("Could not open file\n\r");
 8001df6:	4827      	ldr	r0, [pc, #156]	@ (8001e94 <getLineMarker+0xc8>)
 8001df8:	f003 fe46 	bl	8005a88 <iprintf>
 8001dfc:	e03a      	b.n	8001e74 <getLineMarker+0xa8>
	}
	else{

		while(fgets(buffer, MAX_FILELINE, drawerConfig)){

			char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
 8001dfe:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <getLineMarker+0xc4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e08:	4823      	ldr	r0, [pc, #140]	@ (8001e98 <getLineMarker+0xcc>)
 8001e0a:	f003 fc69 	bl	80056e0 <fgets>
 8001e0e:	6138      	str	r0, [r7, #16]
			char* token = strtok(fileLine, ";");
 8001e10:	4922      	ldr	r1, [pc, #136]	@ (8001e9c <getLineMarker+0xd0>)
 8001e12:	6938      	ldr	r0, [r7, #16]
 8001e14:	f004 f910 	bl	8006038 <strtok>
 8001e18:	60f8      	str	r0, [r7, #12]

				for(uint16_t i = 0; i <= 1 ; i++){
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	82bb      	strh	r3, [r7, #20]
 8001e1e:	e00a      	b.n	8001e36 <getLineMarker+0x6a>
					array[i] = getData(token);
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff ffaf 	bl	8001d84 <getData>
 8001e26:	4602      	mov	r2, r0
 8001e28:	8abb      	ldrh	r3, [r7, #20]
 8001e2a:	b2d1      	uxtb	r1, r2
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea0 <getLineMarker+0xd4>)
 8001e2e:	54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i <= 1 ; i++){
 8001e30:	8abb      	ldrh	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	82bb      	strh	r3, [r7, #20]
 8001e36:	8abb      	ldrh	r3, [r7, #20]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d9f1      	bls.n	8001e20 <getLineMarker+0x54>
				}

			if(row == array[0] && drawer == array[1]){
 8001e3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <getLineMarker+0xd4>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d107      	bne.n	8001e58 <getLineMarker+0x8c>
 8001e48:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <getLineMarker+0xd4>)
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	88bb      	ldrh	r3, [r7, #4]
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <getLineMarker+0x8c>
					return fileIndex;
 8001e54:	8afb      	ldrh	r3, [r7, #22]
 8001e56:	e013      	b.n	8001e80 <getLineMarker+0xb4>
			}
			else{
				fileIndex++;
 8001e58:	8afb      	ldrh	r3, [r7, #22]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	82fb      	strh	r3, [r7, #22]
		while(fgets(buffer, MAX_FILELINE, drawerConfig)){
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <getLineMarker+0xc4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e68:	480b      	ldr	r0, [pc, #44]	@ (8001e98 <getLineMarker+0xcc>)
 8001e6a:	f003 fc39 	bl	80056e0 <fgets>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1c4      	bne.n	8001dfe <getLineMarker+0x32>

			}
		}
	}
	fclose(drawerConfig);
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <getLineMarker+0xc4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 faf7 	bl	800546c <fclose>
	return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	08009878 	.word	0x08009878
 8001e8c:	080098d0 	.word	0x080098d0
 8001e90:	200001f0 	.word	0x200001f0
 8001e94:	0800982c 	.word	0x0800982c
 8001e98:	200001f8 	.word	0x200001f8
 8001e9c:	08009880 	.word	0x08009880
 8001ea0:	200005f8 	.word	0x200005f8

08001ea4 <getFileInfo>:

struct drawerInfo getFileInfo(uint16_t row, uint16_t drawer){ //add ID parameter here later
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b08b      	sub	sp, #44	@ 0x2c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	803b      	strh	r3, [r7, #0]

	struct drawerInfo drawerInst = { 0 };
 8001eb4:	f107 0308 	add.w	r3, r7, #8
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
	static unsigned int array[5];

	uint16_t lineMarker = getLineMarker(row, drawer);
 8001ec2:	883a      	ldrh	r2, [r7, #0]
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff7f 	bl	8001dcc <getLineMarker>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	837b      	strh	r3, [r7, #26]
	uint16_t fileIndex = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	84fb      	strh	r3, [r7, #38]	@ 0x26

	drawerConfig = fopen(filename, "r");
 8001ed6:	4942      	ldr	r1, [pc, #264]	@ (8001fe0 <getFileInfo+0x13c>)
 8001ed8:	4842      	ldr	r0, [pc, #264]	@ (8001fe4 <getFileInfo+0x140>)
 8001eda:	f003 fd55 	bl	8005988 <fopen>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a41      	ldr	r2, [pc, #260]	@ (8001fe8 <getFileInfo+0x144>)
 8001ee2:	6013      	str	r3, [r2, #0]
	if (drawerConfig == NULL) {
 8001ee4:	4b40      	ldr	r3, [pc, #256]	@ (8001fe8 <getFileInfo+0x144>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d15a      	bne.n	8001fa2 <getFileInfo+0xfe>
	        printf("Could not open file\n\r");
 8001eec:	483f      	ldr	r0, [pc, #252]	@ (8001fec <getFileInfo+0x148>)
 8001eee:	f003 fdcb 	bl	8005a88 <iprintf>
	        return drawerInst; // Error case
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	461c      	mov	r4, r3
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f00:	e069      	b.n	8001fd6 <getFileInfo+0x132>
	}
	else {
		while (fgets(buffer, MAX_FILELINE, drawerConfig)) {
				fgets(buffer, MAX_FILELINE, drawerConfig);
 8001f02:	4b39      	ldr	r3, [pc, #228]	@ (8001fe8 <getFileInfo+0x144>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f0c:	4838      	ldr	r0, [pc, #224]	@ (8001ff0 <getFileInfo+0x14c>)
 8001f0e:	f003 fbe7 	bl	80056e0 <fgets>

				if (fileIndex == lineMarker) {
 8001f12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001f14:	8b7b      	ldrh	r3, [r7, #26]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d140      	bne.n	8001f9c <getFileInfo+0xf8>
						char* token = strtok(buffer, ";");
 8001f1a:	4936      	ldr	r1, [pc, #216]	@ (8001ff4 <getFileInfo+0x150>)
 8001f1c:	4834      	ldr	r0, [pc, #208]	@ (8001ff0 <getFileInfo+0x14c>)
 8001f1e:	f004 f88b 	bl	8006038 <strtok>
 8001f22:	6238      	str	r0, [r7, #32]
						unsigned int index = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]

						while (token != NULL) {
 8001f28:	e00f      	b.n	8001f4a <getFileInfo+0xa6>
								array[index] = getData(token);
 8001f2a:	6a38      	ldr	r0, [r7, #32]
 8001f2c:	f7ff ff2a 	bl	8001d84 <getData>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4931      	ldr	r1, [pc, #196]	@ (8001ff8 <getFileInfo+0x154>)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								token = strtok(NULL, ";");
 8001f3a:	492e      	ldr	r1, [pc, #184]	@ (8001ff4 <getFileInfo+0x150>)
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f004 f87b 	bl	8006038 <strtok>
 8001f42:	6238      	str	r0, [r7, #32]
								index++;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
						while (token != NULL) {
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ec      	bne.n	8001f2a <getFileInfo+0x86>
						}
						fclose(drawerConfig);
 8001f50:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <getFileInfo+0x144>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fa89 	bl	800546c <fclose>

						drawerInst.row = array[0];
 8001f5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <getFileInfo+0x154>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	813b      	strh	r3, [r7, #8]
						drawerInst.drawer = array[1];
 8001f62:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <getFileInfo+0x154>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	817b      	strh	r3, [r7, #10]
						drawerInst.calFactor = array[2];
 8001f6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ff8 <getFileInfo+0x154>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe ff7c 	bl	8000e6c <__aeabi_ui2f>
 8001f74:	4603      	mov	r3, r0
 8001f76:	60fb      	str	r3, [r7, #12]
						drawerInst.Tare = array[3];
 8001f78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff8 <getFileInfo+0x154>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	613b      	str	r3, [r7, #16]
						drawerInst.thresh = array[4];
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <getFileInfo+0x154>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe ff72 	bl	8000e6c <__aeabi_ui2f>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	617b      	str	r3, [r7, #20]

						return drawerInst;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	461c      	mov	r4, r3
 8001f90:	f107 0308 	add.w	r3, r7, #8
 8001f94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f9a:	e01c      	b.n	8001fd6 <getFileInfo+0x132>
				}
				fileIndex++;
 8001f9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		while (fgets(buffer, MAX_FILELINE, drawerConfig)) {
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <getFileInfo+0x144>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fac:	4810      	ldr	r0, [pc, #64]	@ (8001ff0 <getFileInfo+0x14c>)
 8001fae:	f003 fb97 	bl	80056e0 <fgets>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1a4      	bne.n	8001f02 <getFileInfo+0x5e>
		}
	}

	fclose(drawerConfig);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <getFileInfo+0x144>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fa55 	bl	800546c <fclose>
	printf("An error occurred during info extraction.");
 8001fc2:	480e      	ldr	r0, [pc, #56]	@ (8001ffc <getFileInfo+0x158>)
 8001fc4:	f003 fd60 	bl	8005a88 <iprintf>
	return drawerInst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	461c      	mov	r4, r3
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	372c      	adds	r7, #44	@ 0x2c
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	08009878 	.word	0x08009878
 8001fe4:	080098d0 	.word	0x080098d0
 8001fe8:	200001f0 	.word	0x200001f0
 8001fec:	0800982c 	.word	0x0800982c
 8001ff0:	200001f8 	.word	0x200001f8
 8001ff4:	08009880 	.word	0x08009880
 8001ff8:	200005fc 	.word	0x200005fc
 8001ffc:	08009884 	.word	0x08009884

08002000 <_write>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

//Code to enable printf statements
int _write(int file, char *data, int len) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	b29a      	uxth	r2, r3
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	4804      	ldr	r0, [pc, #16]	@ (8002028 <_write+0x28>)
 8002018:	f002 f878 	bl	800410c <HAL_UART_Transmit>
    return len;
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000654 	.word	0x20000654

0800202c <__io_getchar>:

//Code to enable scanf statements
GETCHAR_PROTOTYPE
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <__io_getchar+0x48>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <__io_getchar+0x48>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800204c:	1df9      	adds	r1, r7, #7
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	2201      	movs	r2, #1
 8002054:	4807      	ldr	r0, [pc, #28]	@ (8002074 <__io_getchar+0x48>)
 8002056:	f002 f8dc 	bl	8004212 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800205a:	1df9      	adds	r1, r7, #7
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	2201      	movs	r2, #1
 8002062:	4804      	ldr	r0, [pc, #16]	@ (8002074 <__io_getchar+0x48>)
 8002064:	f002 f852 	bl	800410c <HAL_UART_Transmit>
  return ch;
 8002068:	79fb      	ldrb	r3, [r7, #7]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000654 	.word	0x20000654

08002078 <doublePress>:

void doublePress(GPIO_TypeDef* port,uint16_t pin){
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState last_state = GPIO_PIN_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	74fb      	strb	r3, [r7, #19]
  GPIO_PinState button_state;

  uint32_t DP_Threshold = 2000; // 2 second threshold
 8002088:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800208c:	60fb      	str	r3, [r7, #12]
  uint32_t press_time = 0;         // Timestamp of the first press
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint8_t press_count = 0;  // A Flag that's used for indicating a second press
 8002092:	2300      	movs	r3, #0
 8002094:	72fb      	strb	r3, [r7, #11]

	while(true){
		button_state = HAL_GPIO_ReadPin( port, pin);
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 ff98 	bl	8002fd0 <HAL_GPIO_ReadPin>
 80020a0:	4603      	mov	r3, r0
 80020a2:	72bb      	strb	r3, [r7, #10]

		if (button_state != last_state) { // Button state changed
 80020a4:	7aba      	ldrb	r2, [r7, #10]
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d0f4      	beq.n	8002096 <doublePress+0x1e>
			HAL_Delay(50); // Debounce delay
 80020ac:	2032      	movs	r0, #50	@ 0x32
 80020ae:	f000 fcf9 	bl	8002aa4 <HAL_Delay>

			if (button_state == GPIO_PIN_SET) { // Button pressed
 80020b2:	7abb      	ldrb	r3, [r7, #10]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d108      	bne.n	80020ca <doublePress+0x52>
				if (press_count == 0) {

				}
					// Reads First press
					printf("Button press\n");
 80020b8:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <doublePress+0x78>)
 80020ba:	f003 fd4d 	bl	8005b58 <puts>
					press_time = HAL_GetTick(); // saves the time of the first press
 80020be:	f000 fce7 	bl	8002a90 <HAL_GetTick>
 80020c2:	6178      	str	r0, [r7, #20]
					press_count = 1;    // proof of first button press
 80020c4:	2301      	movs	r3, #1
 80020c6:	72fb      	strb	r3, [r7, #11]
 80020c8:	e7e5      	b.n	8002096 <doublePress+0x1e>

				}
					else if ((HAL_GetTick() - press_time) <= DP_Threshold){	// if the press_count = 1 and the button is pressed again, it is a double press
 80020ca:	f000 fce1 	bl	8002a90 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d3dd      	bcc.n	8002096 <doublePress+0x1e>
						printf("Double press\n");
 80020da:	4806      	ldr	r0, [pc, #24]	@ (80020f4 <doublePress+0x7c>)
 80020dc:	f003 fd3c 	bl	8005b58 <puts>
						press_count = 0; // Reset state
 80020e0:	2300      	movs	r3, #0
 80020e2:	72fb      	strb	r3, [r7, #11]
						break;
 80020e4:	bf00      	nop
				}
			}
	}
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	080098b0 	.word	0x080098b0
 80020f4:	080098c0 	.word	0x080098c0

080020f8 <singlePress>:


void singlePress(GPIO_TypeDef* port,uint16_t pin){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState button_state;

	while(true){
		button_state = HAL_GPIO_ReadPin(port, pin);
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 ff61 	bl	8002fd0 <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	73fb      	strb	r3, [r7, #15]
		if (button_state == GPIO_PIN_SET) { // Button pressed
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d1f5      	bne.n	8002104 <singlePress+0xc>

			printf("Button press\n");
 8002118:	4803      	ldr	r0, [pc, #12]	@ (8002128 <singlePress+0x30>)
 800211a:	f003 fd1d 	bl	8005b58 <puts>
			break;
 800211e:	bf00      	nop
		}
	}
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	080098b0 	.word	0x080098b0

0800212c <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4604      	mov	r4, r0
 8002134:	4608      	mov	r0, r1
 8002136:	4611      	mov	r1, r2
 8002138:	461a      	mov	r2, r3
 800213a:	4623      	mov	r3, r4
 800213c:	80fb      	strh	r3, [r7, #6]
 800213e:	4603      	mov	r3, r0
 8002140:	80bb      	strh	r3, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	807b      	strh	r3, [r7, #2]
 8002146:	4613      	mov	r3, r2
 8002148:	707b      	strb	r3, [r7, #1]
  if(control){
 800214a:	787b      	ldrb	r3, [r7, #1]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d016      	beq.n	800217e <muxSET+0x52>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, A);
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800215a:	4815      	ldr	r0, [pc, #84]	@ (80021b0 <muxSET+0x84>)
 800215c:	f000 ff4f 	bl	8002ffe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, B);
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	2140      	movs	r1, #64	@ 0x40
 8002168:	4812      	ldr	r0, [pc, #72]	@ (80021b4 <muxSET+0x88>)
 800216a:	f000 ff48 	bl	8002ffe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, C);
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	4810      	ldr	r0, [pc, #64]	@ (80021b8 <muxSET+0x8c>)
 8002178:	f000 ff41 	bl	8002ffe <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, A);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, B);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, C);
  }
}
 800217c:	e014      	b.n	80021a8 <muxSET+0x7c>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, A);
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	2180      	movs	r1, #128	@ 0x80
 8002186:	480a      	ldr	r0, [pc, #40]	@ (80021b0 <muxSET+0x84>)
 8002188:	f000 ff39 	bl	8002ffe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, B);
 800218c:	88bb      	ldrh	r3, [r7, #4]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	2140      	movs	r1, #64	@ 0x40
 8002194:	4806      	ldr	r0, [pc, #24]	@ (80021b0 <muxSET+0x84>)
 8002196:	f000 ff32 	bl	8002ffe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, C);
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	2120      	movs	r1, #32
 80021a2:	4803      	ldr	r0, [pc, #12]	@ (80021b0 <muxSET+0x84>)
 80021a4:	f000 ff2b 	bl	8002ffe <HAL_GPIO_WritePin>
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800

080021bc <setRelay>:
#include <manager_io.h>
#include <manager_mux.h>
#include <manager_weight.h>


void setRelay(uint8_t rowNum){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]

	switch (rowNum){
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d86e      	bhi.n	80022ac <setRelay+0xf0>
 80021ce:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <setRelay+0x18>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	08002217 	.word	0x08002217
 80021dc:	08002249 	.word	0x08002249
 80021e0:	0800227b 	.word	0x0800227b
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021ea:	4832      	ldr	r0, [pc, #200]	@ (80022b4 <setRelay+0xf8>)
 80021ec:	f000 ff07 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021f6:	482f      	ldr	r0, [pc, #188]	@ (80022b4 <setRelay+0xf8>)
 80021f8:	f000 ff01 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002202:	482d      	ldr	r0, [pc, #180]	@ (80022b8 <setRelay+0xfc>)
 8002204:	f000 fefb 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800220e:	482a      	ldr	r0, [pc, #168]	@ (80022b8 <setRelay+0xfc>)
 8002210:	f000 fef5 	bl	8002ffe <HAL_GPIO_WritePin>
			break;
 8002214:	e04b      	b.n	80022ae <setRelay+0xf2>

		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800221c:	4825      	ldr	r0, [pc, #148]	@ (80022b4 <setRelay+0xf8>)
 800221e:	f000 feee 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002228:	4822      	ldr	r0, [pc, #136]	@ (80022b4 <setRelay+0xf8>)
 800222a:	f000 fee8 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002234:	4820      	ldr	r0, [pc, #128]	@ (80022b8 <setRelay+0xfc>)
 8002236:	f000 fee2 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002240:	481d      	ldr	r0, [pc, #116]	@ (80022b8 <setRelay+0xfc>)
 8002242:	f000 fedc 	bl	8002ffe <HAL_GPIO_WritePin>
			break;
 8002246:	e032      	b.n	80022ae <setRelay+0xf2>

		case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800224e:	4819      	ldr	r0, [pc, #100]	@ (80022b4 <setRelay+0xf8>)
 8002250:	f000 fed5 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800225a:	4816      	ldr	r0, [pc, #88]	@ (80022b4 <setRelay+0xf8>)
 800225c:	f000 fecf 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8002260:	2201      	movs	r2, #1
 8002262:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002266:	4814      	ldr	r0, [pc, #80]	@ (80022b8 <setRelay+0xfc>)
 8002268:	f000 fec9 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002272:	4811      	ldr	r0, [pc, #68]	@ (80022b8 <setRelay+0xfc>)
 8002274:	f000 fec3 	bl	8002ffe <HAL_GPIO_WritePin>
			break;
 8002278:	e019      	b.n	80022ae <setRelay+0xf2>

		case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002280:	480c      	ldr	r0, [pc, #48]	@ (80022b4 <setRelay+0xf8>)
 8002282:	f000 febc 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800228c:	4809      	ldr	r0, [pc, #36]	@ (80022b4 <setRelay+0xf8>)
 800228e:	f000 feb6 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002298:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <setRelay+0xfc>)
 800229a:	f000 feb0 	bl	8002ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022a4:	4804      	ldr	r0, [pc, #16]	@ (80022b8 <setRelay+0xfc>)
 80022a6:	f000 feaa 	bl	8002ffe <HAL_GPIO_WritePin>
			break;
 80022aa:	e000      	b.n	80022ae <setRelay+0xf2>

		default:
			return;
 80022ac:	bf00      	nop
	}
}
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40020400 	.word	0x40020400

080022bc <microDelay>:
#define DT_PORT GPIOA
#define SCK_PIN GPIO_PIN_5
#define SCK_PORT GPIOB

void microDelay(uint16_t delay)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <microDelay+0x2c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 80022ce:	bf00      	nop
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <microDelay+0x2c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d3f9      	bcc.n	80022d0 <microDelay+0x14>
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000614 	.word	0x20000614

080022ec <getHX711>:

int32_t getHX711(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 80022f6:	f000 fbcb 	bl	8002a90 <HAL_GetTick>
 80022fa:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 80022fc:	e008      	b.n	8002310 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 80022fe:	f000 fbc7 	bl	8002a90 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2bc8      	cmp	r3, #200	@ 0xc8
 800230a:	d901      	bls.n	8002310 <getHX711+0x24>
      return 0;
 800230c:	2300      	movs	r3, #0
 800230e:	e047      	b.n	80023a0 <getHX711+0xb4>
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8002310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002314:	4824      	ldr	r0, [pc, #144]	@ (80023a8 <getHX711+0xbc>)
 8002316:	f000 fe5b 	bl	8002fd0 <HAL_GPIO_ReadPin>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d0ee      	beq.n	80022fe <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8002320:	2300      	movs	r3, #0
 8002322:	72fb      	strb	r3, [r7, #11]
 8002324:	e023      	b.n	800236e <getHX711+0x82>
  {
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8002326:	2201      	movs	r2, #1
 8002328:	2120      	movs	r1, #32
 800232a:	4820      	ldr	r0, [pc, #128]	@ (80023ac <getHX711+0xc0>)
 800232c:	f000 fe67 	bl	8002ffe <HAL_GPIO_WritePin>
    microDelay(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff ffc3 	bl	80022bc <microDelay>
    data = data << 1;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	2120      	movs	r1, #32
 8002340:	481a      	ldr	r0, [pc, #104]	@ (80023ac <getHX711+0xc0>)
 8002342:	f000 fe5c 	bl	8002ffe <HAL_GPIO_WritePin>
    microDelay(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff ffb8 	bl	80022bc <microDelay>
    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 800234c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002350:	4815      	ldr	r0, [pc, #84]	@ (80023a8 <getHX711+0xbc>)
 8002352:	f000 fe3d 	bl	8002fd0 <HAL_GPIO_ReadPin>
 8002356:	4603      	mov	r3, r0
 8002358:	2b01      	cmp	r3, #1
 800235a:	d102      	bne.n	8002362 <getHX711+0x76>
      data ++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3301      	adds	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 8002362:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3301      	adds	r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	72fb      	strb	r3, [r7, #11]
 800236e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002372:	2b17      	cmp	r3, #23
 8002374:	ddd7      	ble.n	8002326 <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 800237c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 800237e:	2201      	movs	r2, #1
 8002380:	2120      	movs	r1, #32
 8002382:	480a      	ldr	r0, [pc, #40]	@ (80023ac <getHX711+0xc0>)
 8002384:	f000 fe3b 	bl	8002ffe <HAL_GPIO_WritePin>
  microDelay(1);
 8002388:	2001      	movs	r0, #1
 800238a:	f7ff ff97 	bl	80022bc <microDelay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	2120      	movs	r1, #32
 8002392:	4806      	ldr	r0, [pc, #24]	@ (80023ac <getHX711+0xc0>)
 8002394:	f000 fe33 	bl	8002ffe <HAL_GPIO_WritePin>
  microDelay(1);
 8002398:	2001      	movs	r0, #1
 800239a:	f7ff ff8f 	bl	80022bc <microDelay>
  return data;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40020000 	.word	0x40020000
 80023ac:	40020400 	.word	0x40020400

080023b0 <weigh>:

int weigh(uint32_t tare, float calFactor)
{
 80023b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  int64_t  total = 0;
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 80023c8:	2332      	movs	r3, #50	@ 0x32
 80023ca:	613b      	str	r3, [r7, #16]

  int milligram = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  int32_t average = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	82fb      	strh	r3, [r7, #22]
 80023d8:	e010      	b.n	80023fc <weigh+0x4c>
  {
      total += getHX711();
 80023da:	f7ff ff87 	bl	80022ec <getHX711>
 80023de:	4603      	mov	r3, r0
 80023e0:	17da      	asrs	r2, r3, #31
 80023e2:	461c      	mov	r4, r3
 80023e4:	4615      	mov	r5, r2
 80023e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ea:	eb12 0804 	adds.w	r8, r2, r4
 80023ee:	eb43 0905 	adc.w	r9, r3, r5
 80023f2:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 80023f6:	8afb      	ldrh	r3, [r7, #22]
 80023f8:	3301      	adds	r3, #1
 80023fa:	82fb      	strh	r3, [r7, #22]
 80023fc:	8afb      	ldrh	r3, [r7, #22]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	dcea      	bgt.n	80023da <weigh+0x2a>
  }
  average = (int32_t)(total / samples);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	17da      	asrs	r2, r3, #31
 8002408:	469a      	mov	sl, r3
 800240a:	4693      	mov	fp, r2
 800240c:	4652      	mov	r2, sl
 800240e:	465b      	mov	r3, fp
 8002410:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002414:	f7fe fdc8 	bl	8000fa8 <__aeabi_ldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4613      	mov	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  milligram = (int)(average - tare)*calFactor;
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fd24 	bl	8000e74 <__aeabi_i2f>
 800242c:	4603      	mov	r3, r0
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fd fead 	bl	8000190 <__aeabi_fmul>
 8002436:	4603      	mov	r3, r0
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fd6f 	bl	8000f1c <__aeabi_f2iz>
 800243e:	4603      	mov	r3, r0
 8002440:	60fb      	str	r3, [r7, #12]
  return milligram;
 8002442:	68fb      	ldr	r3, [r7, #12]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800244e <weighRaw>:

int32_t weighRaw()
{
 800244e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
  int64_t  total = 0;
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  samples = 50;
 8002462:	2332      	movs	r3, #50	@ 0x32
 8002464:	60bb      	str	r3, [r7, #8]
  int32_t average = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]

  for(uint16_t i=0 ; i<samples ; i++)
 800246a:	2300      	movs	r3, #0
 800246c:	81fb      	strh	r3, [r7, #14]
 800246e:	e010      	b.n	8002492 <weighRaw+0x44>
  {
      total += getHX711();
 8002470:	f7ff ff3c 	bl	80022ec <getHX711>
 8002474:	4603      	mov	r3, r0
 8002476:	17da      	asrs	r2, r3, #31
 8002478:	461c      	mov	r4, r3
 800247a:	4615      	mov	r5, r2
 800247c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002480:	eb12 0804 	adds.w	r8, r2, r4
 8002484:	eb43 0905 	adc.w	r9, r3, r5
 8002488:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 800248c:	89fb      	ldrh	r3, [r7, #14]
 800248e:	3301      	adds	r3, #1
 8002490:	81fb      	strh	r3, [r7, #14]
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	dcea      	bgt.n	8002470 <weighRaw+0x22>
  }
  average = (int32_t)(total / samples);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	17da      	asrs	r2, r3, #31
 800249e:	469a      	mov	sl, r3
 80024a0:	4693      	mov	fp, r2
 80024a2:	4652      	mov	r2, sl
 80024a4:	465b      	mov	r3, fp
 80024a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024aa:	f7fe fd7d 	bl	8000fa8 <__aeabi_ldivmod>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4613      	mov	r3, r2
 80024b4:	607b      	str	r3, [r7, #4]
  return average;
 80024b6:	687b      	ldr	r3, [r7, #4]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080024c2 <weighRawTare>:

int32_t weighRawTare(uint32_t tare)
{
 80024c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  int64_t  total = 0;
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 80024d8:	2332      	movs	r3, #50	@ 0x32
 80024da:	613b      	str	r3, [r7, #16]
  int32_t average = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
  int32_t avgTare = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	82fb      	strh	r3, [r7, #22]
 80024e8:	e010      	b.n	800250c <weighRawTare+0x4a>
  {
      total += getHX711();
 80024ea:	f7ff feff 	bl	80022ec <getHX711>
 80024ee:	4603      	mov	r3, r0
 80024f0:	17da      	asrs	r2, r3, #31
 80024f2:	461c      	mov	r4, r3
 80024f4:	4615      	mov	r5, r2
 80024f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024fa:	eb12 0804 	adds.w	r8, r2, r4
 80024fe:	eb43 0905 	adc.w	r9, r3, r5
 8002502:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8002506:	8afb      	ldrh	r3, [r7, #22]
 8002508:	3301      	adds	r3, #1
 800250a:	82fb      	strh	r3, [r7, #22]
 800250c:	8afb      	ldrh	r3, [r7, #22]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	429a      	cmp	r2, r3
 8002512:	dcea      	bgt.n	80024ea <weighRawTare+0x28>
  }
  average = (int32_t)(total / samples);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	17da      	asrs	r2, r3, #31
 8002518:	469a      	mov	sl, r3
 800251a:	4693      	mov	fp, r2
 800251c:	4652      	mov	r2, sl
 800251e:	465b      	mov	r3, fp
 8002520:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002524:	f7fe fd40 	bl	8000fa8 <__aeabi_ldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  avgTare = average - tare;
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	60bb      	str	r3, [r7, #8]
  return avgTare;
 8002538:	68bb      	ldr	r3, [r7, #8]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002544 <getCalFactor>:

float getCalFactor(uint32_t knownHX711){
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	float cal = 20000 / knownHX711;
 800254c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fc88 	bl	8000e6c <__aeabi_ui2f>
 800255c:	4603      	mov	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]
	return cal;
 8002560:	68fb      	ldr	r3, [r7, #12]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002572:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <HAL_MspInit+0x58>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	4a13      	ldr	r2, [pc, #76]	@ (80025c4 <HAL_MspInit+0x58>)
 8002578:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800257c:	6253      	str	r3, [r2, #36]	@ 0x24
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_MspInit+0x58>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <HAL_MspInit+0x58>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_MspInit+0x58>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_MspInit+0x58>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <HAL_MspInit+0x58>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <HAL_MspInit+0x58>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6253      	str	r3, [r2, #36]	@ 0x24
 80025ae:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_MspInit+0x58>)
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40023800 	.word	0x40023800

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <NMI_Handler+0x4>

080025d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <HardFault_Handler+0x4>

080025d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <MemManage_Handler+0x4>

080025e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <BusFault_Handler+0x4>

080025e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <UsageFault_Handler+0x4>

080025f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002618:	f000 fa28 	bl	8002a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return 1;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <_kill>:

int _kill(int pid, int sig)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002638:	f003 fdd8 	bl	80061ec <__errno>
 800263c:	4603      	mov	r3, r0
 800263e:	2216      	movs	r2, #22
 8002640:	601a      	str	r2, [r3, #0]
  return -1;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_exit>:

void _exit (int status)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002656:	f04f 31ff 	mov.w	r1, #4294967295
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ffe7 	bl	800262e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <_exit+0x12>

08002664 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e00a      	b.n	800268c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002676:	f7ff fcd9 	bl	800202c <__io_getchar>
 800267a:	4601      	mov	r1, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	60ba      	str	r2, [r7, #8]
 8002682:	b2ca      	uxtb	r2, r1
 8002684:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	dbf0      	blt.n	8002676 <_read+0x12>
  }

  return len;
 8002694:	687b      	ldr	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_close>:
  }
  return len;
}

int _close(int file)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026c4:	605a      	str	r2, [r3, #4]
  return 0;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <_isatty>:

int _isatty(int file)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <_open>:

int _open(char *path, int flags, ...)
{
 80026fe:	b40e      	push	{r1, r2, r3}
 8002700:	b480      	push	{r7}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	b003      	add	sp, #12
 8002716:	4770      	bx	lr

08002718 <_unlink>:
  errno = ECHILD;
  return -1;
}

int _unlink(char *name)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
 8002720:	f003 fd64 	bl	80061ec <__errno>
 8002724:	4603      	mov	r3, r0
 8002726:	2202      	movs	r2, #2
 8002728:	601a      	str	r2, [r3, #0]
  return -1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_link>:
  st->st_mode = S_IFCHR;
  return 0;
}

int _link(char *old, char *new)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
 8002740:	f003 fd54 	bl	80061ec <__errno>
 8002744:	4603      	mov	r3, r0
 8002746:	221f      	movs	r2, #31
 8002748:	601a      	str	r2, [r3, #0]
  return -1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002760:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <_sbrk+0x5c>)
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <_sbrk+0x60>)
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <_sbrk+0x64>)
 8002776:	4a12      	ldr	r2, [pc, #72]	@ (80027c0 <_sbrk+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002788:	f003 fd30 	bl	80061ec <__errno>
 800278c:	4603      	mov	r3, r0
 800278e:	220c      	movs	r2, #12
 8002790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e009      	b.n	80027ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002798:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <_sbrk+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20014000 	.word	0x20014000
 80027b8:	00000400 	.word	0x00000400
 80027bc:	20000610 	.word	0x20000610
 80027c0:	200007f0 	.word	0x200007f0

080027c4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d6:	f107 0308 	add.w	r3, r7, #8
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e4:	463b      	mov	r3, r7
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <MX_TIM2_Init+0x94>)
 80027ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <MX_TIM2_Init+0x94>)
 80027f6:	2207      	movs	r2, #7
 80027f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <MX_TIM2_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002800:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <MX_TIM2_Init+0x94>)
 8002802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002806:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002808:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <MX_TIM2_Init+0x94>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <MX_TIM2_Init+0x94>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002814:	4813      	ldr	r0, [pc, #76]	@ (8002864 <MX_TIM2_Init+0x94>)
 8002816:	f001 f9bf 	bl	8003b98 <HAL_TIM_Base_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002820:	f7ff f9ca 	bl	8001bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002828:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	4619      	mov	r1, r3
 8002830:	480c      	ldr	r0, [pc, #48]	@ (8002864 <MX_TIM2_Init+0x94>)
 8002832:	f001 f9f0 	bl	8003c16 <HAL_TIM_ConfigClockSource>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800283c:	f7ff f9bc 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002848:	463b      	mov	r3, r7
 800284a:	4619      	mov	r1, r3
 800284c:	4805      	ldr	r0, [pc, #20]	@ (8002864 <MX_TIM2_Init+0x94>)
 800284e:	f001 fbaf 	bl	8003fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002858:	f7ff f9ae 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800285c:	bf00      	nop
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000614 	.word	0x20000614

08002868 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002878:	d10b      	bne.n	8002892 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287a:	4b08      	ldr	r3, [pc, #32]	@ (800289c <HAL_TIM_Base_MspInit+0x34>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	4a07      	ldr	r2, [pc, #28]	@ (800289c <HAL_TIM_Base_MspInit+0x34>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6253      	str	r3, [r2, #36]	@ 0x24
 8002886:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_TIM_Base_MspInit+0x34>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40023800 	.word	0x40023800

080028a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <MX_USART2_UART_Init+0x50>)
 80028a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028d6:	4805      	ldr	r0, [pc, #20]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028d8:	f001 fbc8 	bl	800406c <HAL_UART_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028e2:	f7ff f969 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000654 	.word	0x20000654
 80028f0:	40004400 	.word	0x40004400

080028f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	@ 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <HAL_UART_MspInit+0x7c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d127      	bne.n	8002966 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002916:	4b17      	ldr	r3, [pc, #92]	@ (8002974 <HAL_UART_MspInit+0x80>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	4a16      	ldr	r2, [pc, #88]	@ (8002974 <HAL_UART_MspInit+0x80>)
 800291c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002920:	6253      	str	r3, [r2, #36]	@ 0x24
 8002922:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <HAL_UART_MspInit+0x80>)
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <HAL_UART_MspInit+0x80>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a10      	ldr	r2, [pc, #64]	@ (8002974 <HAL_UART_MspInit+0x80>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <HAL_UART_MspInit+0x80>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002946:	230c      	movs	r3, #12
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002952:	2303      	movs	r3, #3
 8002954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002956:	2307      	movs	r3, #7
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4805      	ldr	r0, [pc, #20]	@ (8002978 <HAL_UART_MspInit+0x84>)
 8002962:	f000 f9a5 	bl	8002cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002966:	bf00      	nop
 8002968:	3728      	adds	r7, #40	@ 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40004400 	.word	0x40004400
 8002974:	40023800 	.word	0x40023800
 8002978:	40020000 	.word	0x40020000

0800297c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800297c:	f7ff ff22 	bl	80027c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002980:	480b      	ldr	r0, [pc, #44]	@ (80029b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002982:	490c      	ldr	r1, [pc, #48]	@ (80029b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002984:	4a0c      	ldr	r2, [pc, #48]	@ (80029b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a09      	ldr	r2, [pc, #36]	@ (80029bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002998:	4c09      	ldr	r4, [pc, #36]	@ (80029c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029a6:	f003 fc27 	bl	80061f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029aa:	f7ff f8a9 	bl	8001b00 <main>
  bx lr
 80029ae:	4770      	bx	lr
  ldr r0, =_sdata
 80029b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80029b8:	0800a1a4 	.word	0x0800a1a4
  ldr r2, =_sbss
 80029bc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80029c0:	200007ec 	.word	0x200007ec

080029c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029c4:	e7fe      	b.n	80029c4 <ADC1_IRQHandler>

080029c6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d0:	2003      	movs	r0, #3
 80029d2:	f000 f939 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029d6:	200f      	movs	r0, #15
 80029d8:	f000 f80e 	bl	80029f8 <HAL_InitTick>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	71fb      	strb	r3, [r7, #7]
 80029e6:	e001      	b.n	80029ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029e8:	f7ff fdc0 	bl	800256c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029ec:	79fb      	ldrb	r3, [r7, #7]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a04:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <HAL_InitTick+0x68>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d022      	beq.n	8002a52 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a0c:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <HAL_InitTick+0x6c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <HAL_InitTick+0x68>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f938 	bl	8002c96 <HAL_SYSTICK_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	d809      	bhi.n	8002a46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a32:	2200      	movs	r2, #0
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3a:	f000 f910 	bl	8002c5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <HAL_InitTick+0x70>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e007      	b.n	8002a56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	e004      	b.n	8002a56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e001      	b.n	8002a56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000008 	.word	0x20000008
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000004 	.word	0x20000004

08002a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a70:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_IncTick+0x1c>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_IncTick+0x20>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4413      	add	r3, r2
 8002a7a:	4a03      	ldr	r2, [pc, #12]	@ (8002a88 <HAL_IncTick+0x1c>)
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2000069c 	.word	0x2000069c
 8002a8c:	20000008 	.word	0x20000008

08002a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return uwTick;
 8002a94:	4b02      	ldr	r3, [pc, #8]	@ (8002aa0 <HAL_GetTick+0x10>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	2000069c 	.word	0x2000069c

08002aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff fff0 	bl	8002a90 <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d004      	beq.n	8002ac8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <HAL_Delay+0x40>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ac8:	bf00      	nop
 8002aca:	f7ff ffe1 	bl	8002a90 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d8f7      	bhi.n	8002aca <HAL_Delay+0x26>
  {
  }
}
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	@ (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	@ (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	@ 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
         );
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	@ 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c14:	d301      	bcc.n	8002c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00f      	b.n	8002c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <SysTick_Config+0x40>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c22:	210f      	movs	r1, #15
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f7ff ff90 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <SysTick_Config+0x40>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c32:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <SysTick_Config+0x40>)
 8002c34:	2207      	movs	r2, #7
 8002c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff49 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c70:	f7ff ff5e 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7ff ff90 	bl	8002ba0 <NVIC_EncodePriority>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff5f 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ffb0 	bl	8002c04 <SysTick_Config>
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cc6:	e160      	b.n	8002f8a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8152 	beq.w	8002f84 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d005      	beq.n	8002cf8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d130      	bne.n	8002d5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	2203      	movs	r2, #3
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002d2e:	2201      	movs	r2, #1
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 0201 	and.w	r2, r3, #1
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d017      	beq.n	8002d96 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d123      	bne.n	8002dea <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	08da      	lsrs	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3208      	adds	r2, #8
 8002daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	08da      	lsrs	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3208      	adds	r2, #8
 8002de4:	6939      	ldr	r1, [r7, #16]
 8002de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0203 	and.w	r2, r3, #3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80ac 	beq.w	8002f84 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa8 <HAL_GPIO_Init+0x2f8>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa8 <HAL_GPIO_Init+0x2f8>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6213      	str	r3, [r2, #32]
 8002e38:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa8 <HAL_GPIO_Init+0x2f8>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e44:	4a59      	ldr	r2, [pc, #356]	@ (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a51      	ldr	r2, [pc, #324]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d025      	beq.n	8002ebc <HAL_GPIO_Init+0x20c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a50      	ldr	r2, [pc, #320]	@ (8002fb4 <HAL_GPIO_Init+0x304>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d01f      	beq.n	8002eb8 <HAL_GPIO_Init+0x208>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb8 <HAL_GPIO_Init+0x308>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d019      	beq.n	8002eb4 <HAL_GPIO_Init+0x204>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a4e      	ldr	r2, [pc, #312]	@ (8002fbc <HAL_GPIO_Init+0x30c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_GPIO_Init+0x200>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc0 <HAL_GPIO_Init+0x310>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00d      	beq.n	8002eac <HAL_GPIO_Init+0x1fc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a4c      	ldr	r2, [pc, #304]	@ (8002fc4 <HAL_GPIO_Init+0x314>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <HAL_GPIO_Init+0x1f8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc8 <HAL_GPIO_Init+0x318>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_GPIO_Init+0x1f4>
 8002ea0:	2306      	movs	r3, #6
 8002ea2:	e00c      	b.n	8002ebe <HAL_GPIO_Init+0x20e>
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	e00a      	b.n	8002ebe <HAL_GPIO_Init+0x20e>
 8002ea8:	2305      	movs	r3, #5
 8002eaa:	e008      	b.n	8002ebe <HAL_GPIO_Init+0x20e>
 8002eac:	2304      	movs	r3, #4
 8002eae:	e006      	b.n	8002ebe <HAL_GPIO_Init+0x20e>
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e004      	b.n	8002ebe <HAL_GPIO_Init+0x20e>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e002      	b.n	8002ebe <HAL_GPIO_Init+0x20e>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_GPIO_Init+0x20e>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	f002 0203 	and.w	r2, r2, #3
 8002ec4:	0092      	lsls	r2, r2, #2
 8002ec6:	4093      	lsls	r3, r2
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ece:	4937      	ldr	r1, [pc, #220]	@ (8002fac <HAL_GPIO_Init+0x2fc>)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002edc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fcc <HAL_GPIO_Init+0x31c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f00:	4a32      	ldr	r2, [pc, #200]	@ (8002fcc <HAL_GPIO_Init+0x31c>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f06:	4b31      	ldr	r3, [pc, #196]	@ (8002fcc <HAL_GPIO_Init+0x31c>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f2a:	4a28      	ldr	r2, [pc, #160]	@ (8002fcc <HAL_GPIO_Init+0x31c>)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f30:	4b26      	ldr	r3, [pc, #152]	@ (8002fcc <HAL_GPIO_Init+0x31c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f54:	4a1d      	ldr	r2, [pc, #116]	@ (8002fcc <HAL_GPIO_Init+0x31c>)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fcc <HAL_GPIO_Init+0x31c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f7e:	4a13      	ldr	r2, [pc, #76]	@ (8002fcc <HAL_GPIO_Init+0x31c>)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3301      	adds	r3, #1
 8002f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f47f ae97 	bne.w	8002cc8 <HAL_GPIO_Init+0x18>
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40010400 	.word	0x40010400

08002fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
 8002fec:	e001      	b.n	8002ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	807b      	strh	r3, [r7, #2]
 800300a:	4613      	mov	r3, r2
 800300c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800300e:	787b      	ldrb	r3, [r7, #1]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003014:	887a      	ldrh	r2, [r7, #2]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800301a:	e003      	b.n	8003024 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	041a      	lsls	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	619a      	str	r2, [r3, #24]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
	...

08003030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e31d      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003042:	4b94      	ldr	r3, [pc, #592]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304c:	4b91      	ldr	r3, [pc, #580]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003054:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d07b      	beq.n	800315a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d006      	beq.n	8003076 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d10f      	bne.n	800308e <HAL_RCC_OscConfig+0x5e>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003074:	d10b      	bne.n	800308e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003076:	4b87      	ldr	r3, [pc, #540]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d06a      	beq.n	8003158 <HAL_RCC_OscConfig+0x128>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d166      	bne.n	8003158 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e2f7      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d106      	bne.n	80030a4 <HAL_RCC_OscConfig+0x74>
 8003096:	4b7f      	ldr	r3, [pc, #508]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a7e      	ldr	r2, [pc, #504]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e02d      	b.n	8003100 <HAL_RCC_OscConfig+0xd0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x96>
 80030ac:	4b79      	ldr	r3, [pc, #484]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a78      	ldr	r2, [pc, #480]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b76      	ldr	r3, [pc, #472]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a75      	ldr	r2, [pc, #468]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e01c      	b.n	8003100 <HAL_RCC_OscConfig+0xd0>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0xb8>
 80030ce:	4b71      	ldr	r3, [pc, #452]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a70      	ldr	r2, [pc, #448]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6e      	ldr	r3, [pc, #440]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6d      	ldr	r2, [pc, #436]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xd0>
 80030e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a69      	ldr	r2, [pc, #420]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b67      	ldr	r3, [pc, #412]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a66      	ldr	r2, [pc, #408]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff fcc2 	bl	8002a90 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7ff fcbe 	bl	8002a90 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e2ad      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003122:	4b5c      	ldr	r3, [pc, #368]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xe0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff fcae 	bl	8002a90 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7ff fcaa 	bl	8002a90 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	@ 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e299      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800314a:	4b52      	ldr	r3, [pc, #328]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x108>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d05a      	beq.n	800321c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d005      	beq.n	8003178 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d119      	bne.n	80031a6 <HAL_RCC_OscConfig+0x176>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d116      	bne.n	80031a6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003178:	4b46      	ldr	r3, [pc, #280]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_OscConfig+0x160>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d001      	beq.n	8003190 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e276      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b40      	ldr	r3, [pc, #256]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	493d      	ldr	r1, [pc, #244]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a4:	e03a      	b.n	800321c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d020      	beq.n	80031f0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003298 <HAL_RCC_OscConfig+0x268>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7ff fc6c 	bl	8002a90 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031bc:	f7ff fc68 	bl	8002a90 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e257      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ce:	4b31      	ldr	r3, [pc, #196]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b2e      	ldr	r3, [pc, #184]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	492a      	ldr	r1, [pc, #168]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
 80031ee:	e015      	b.n	800321c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f0:	4b29      	ldr	r3, [pc, #164]	@ (8003298 <HAL_RCC_OscConfig+0x268>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7ff fc4b 	bl	8002a90 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031fe:	f7ff fc47 	bl	8002a90 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e236      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003210:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80b8 	beq.w	800339a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d170      	bne.n	8003312 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003230:	4b18      	ldr	r3, [pc, #96]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_OscConfig+0x218>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e21a      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1a      	ldr	r2, [r3, #32]
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003254:	429a      	cmp	r2, r3
 8003256:	d921      	bls.n	800329c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fc3b 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e208      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800326c:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4906      	ldr	r1, [pc, #24]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800327e:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	061b      	lsls	r3, r3, #24
 800328c:	4901      	ldr	r1, [pc, #4]	@ (8003294 <HAL_RCC_OscConfig+0x264>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
 8003292:	e020      	b.n	80032d6 <HAL_RCC_OscConfig+0x2a6>
 8003294:	40023800 	.word	0x40023800
 8003298:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329c:	4b99      	ldr	r3, [pc, #612]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4996      	ldr	r1, [pc, #600]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ae:	4b95      	ldr	r3, [pc, #596]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	4991      	ldr	r1, [pc, #580]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fc06 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e1d3      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	0b5b      	lsrs	r3, r3, #13
 80032dc:	3301      	adds	r3, #1
 80032de:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80032e6:	4a87      	ldr	r2, [pc, #540]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80032e8:	6892      	ldr	r2, [r2, #8]
 80032ea:	0912      	lsrs	r2, r2, #4
 80032ec:	f002 020f 	and.w	r2, r2, #15
 80032f0:	4985      	ldr	r1, [pc, #532]	@ (8003508 <HAL_RCC_OscConfig+0x4d8>)
 80032f2:	5c8a      	ldrb	r2, [r1, r2]
 80032f4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80032f6:	4a85      	ldr	r2, [pc, #532]	@ (800350c <HAL_RCC_OscConfig+0x4dc>)
 80032f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032fa:	4b85      	ldr	r3, [pc, #532]	@ (8003510 <HAL_RCC_OscConfig+0x4e0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fb7a 	bl	80029f8 <HAL_InitTick>
 8003304:	4603      	mov	r3, r0
 8003306:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d045      	beq.n	800339a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	e1b5      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d029      	beq.n	800336e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800331a:	4b7e      	ldr	r3, [pc, #504]	@ (8003514 <HAL_RCC_OscConfig+0x4e4>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff fbb6 	bl	8002a90 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003328:	f7ff fbb2 	bl	8002a90 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1a1      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800333a:	4b72      	ldr	r3, [pc, #456]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003346:	4b6f      	ldr	r3, [pc, #444]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	496c      	ldr	r1, [pc, #432]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003358:	4b6a      	ldr	r3, [pc, #424]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	4967      	ldr	r1, [pc, #412]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800336e:	4b69      	ldr	r3, [pc, #420]	@ (8003514 <HAL_RCC_OscConfig+0x4e4>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7ff fb8c 	bl	8002a90 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800337c:	f7ff fb88 	bl	8002a90 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e177      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800338e:	4b5d      	ldr	r3, [pc, #372]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d030      	beq.n	8003408 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003518 <HAL_RCC_OscConfig+0x4e8>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7ff fb6c 	bl	8002a90 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033bc:	f7ff fb68 	bl	8002a90 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e157      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x38c>
 80033da:	e015      	b.n	8003408 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003518 <HAL_RCC_OscConfig+0x4e8>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7ff fb55 	bl	8002a90 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ea:	f7ff fb51 	bl	8002a90 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e140      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033fc:	4b41      	ldr	r3, [pc, #260]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80033fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80b5 	beq.w	8003580 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b3a      	ldr	r3, [pc, #232]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10d      	bne.n	8003442 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b37      	ldr	r3, [pc, #220]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	4a36      	ldr	r2, [pc, #216]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003430:	6253      	str	r3, [r2, #36]	@ 0x24
 8003432:	4b34      	ldr	r3, [pc, #208]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b36      	ldr	r3, [pc, #216]	@ (800351c <HAL_RCC_OscConfig+0x4ec>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b33      	ldr	r3, [pc, #204]	@ (800351c <HAL_RCC_OscConfig+0x4ec>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a32      	ldr	r2, [pc, #200]	@ (800351c <HAL_RCC_OscConfig+0x4ec>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7ff fb19 	bl	8002a90 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7ff fb15 	bl	8002a90 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b64      	cmp	r3, #100	@ 0x64
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e104      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b29      	ldr	r3, [pc, #164]	@ (800351c <HAL_RCC_OscConfig+0x4ec>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x466>
 8003488:	4b1e      	ldr	r3, [pc, #120]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 800348a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348c:	4a1d      	ldr	r2, [pc, #116]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 800348e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003492:	6353      	str	r3, [r2, #52]	@ 0x34
 8003494:	e02d      	b.n	80034f2 <HAL_RCC_OscConfig+0x4c2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x488>
 800349e:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a2:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034a8:	6353      	str	r3, [r2, #52]	@ 0x34
 80034aa:	4b16      	ldr	r3, [pc, #88]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ae:	4a15      	ldr	r2, [pc, #84]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80034b6:	e01c      	b.n	80034f2 <HAL_RCC_OscConfig+0x4c2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d10c      	bne.n	80034da <HAL_RCC_OscConfig+0x4aa>
 80034c0:	4b10      	ldr	r3, [pc, #64]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034ca:	6353      	str	r3, [r2, #52]	@ 0x34
 80034cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d6:	6353      	str	r3, [r2, #52]	@ 0x34
 80034d8:	e00b      	b.n	80034f2 <HAL_RCC_OscConfig+0x4c2>
 80034da:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034de:	4a09      	ldr	r2, [pc, #36]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80034e6:	4b07      	ldr	r3, [pc, #28]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ea:	4a06      	ldr	r2, [pc, #24]	@ (8003504 <HAL_RCC_OscConfig+0x4d4>)
 80034ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034f0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d024      	beq.n	8003544 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fa:	f7ff fac9 	bl	8002a90 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003500:	e019      	b.n	8003536 <HAL_RCC_OscConfig+0x506>
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	08009cf4 	.word	0x08009cf4
 800350c:	20000000 	.word	0x20000000
 8003510:	20000004 	.word	0x20000004
 8003514:	42470020 	.word	0x42470020
 8003518:	42470680 	.word	0x42470680
 800351c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7ff fab6 	bl	8002a90 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0a3      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003536:	4b54      	ldr	r3, [pc, #336]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 8003538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <HAL_RCC_OscConfig+0x4f0>
 8003542:	e014      	b.n	800356e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003544:	f7ff faa4 	bl	8002a90 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800354a:	e00a      	b.n	8003562 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7ff faa0 	bl	8002a90 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e08d      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003562:	4b49      	ldr	r3, [pc, #292]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 8003564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ee      	bne.n	800354c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003574:	4b44      	ldr	r3, [pc, #272]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	4a43      	ldr	r2, [pc, #268]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800357e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d079      	beq.n	800367c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d056      	beq.n	800363c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	2b02      	cmp	r3, #2
 8003594:	d13b      	bne.n	800360e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b3d      	ldr	r3, [pc, #244]	@ (800368c <HAL_RCC_OscConfig+0x65c>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7ff fa78 	bl	8002a90 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a4:	f7ff fa74 	bl	8002a90 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e063      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035b6:	4b34      	ldr	r3, [pc, #208]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c2:	4b31      	ldr	r3, [pc, #196]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d2:	4319      	orrs	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	430b      	orrs	r3, r1
 80035da:	492b      	ldr	r1, [pc, #172]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e0:	4b2a      	ldr	r3, [pc, #168]	@ (800368c <HAL_RCC_OscConfig+0x65c>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7ff fa53 	bl	8002a90 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ee:	f7ff fa4f 	bl	8002a90 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e03e      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003600:	4b21      	ldr	r3, [pc, #132]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x5be>
 800360c:	e036      	b.n	800367c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360e:	4b1f      	ldr	r3, [pc, #124]	@ (800368c <HAL_RCC_OscConfig+0x65c>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7ff fa3c 	bl	8002a90 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361c:	f7ff fa38 	bl	8002a90 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e027      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800362e:	4b16      	ldr	r3, [pc, #88]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x5ec>
 800363a:	e01f      	b.n	800367c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e01a      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003648:	4b0f      	ldr	r3, [pc, #60]	@ (8003688 <HAL_RCC_OscConfig+0x658>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	429a      	cmp	r2, r3
 800365a:	d10d      	bne.n	8003678 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d106      	bne.n	8003678 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	42470060 	.word	0x42470060

08003690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e11a      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b8f      	ldr	r3, [pc, #572]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d919      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d105      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x34>
 80036b8:	4b8a      	ldr	r3, [pc, #552]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a89      	ldr	r2, [pc, #548]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b87      	ldr	r3, [pc, #540]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 0201 	bic.w	r2, r3, #1
 80036cc:	4985      	ldr	r1, [pc, #532]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d4:	4b83      	ldr	r3, [pc, #524]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0f9      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f2:	4b7d      	ldr	r3, [pc, #500]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	497a      	ldr	r1, [pc, #488]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 808e 	beq.w	800382e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800371a:	4b73      	ldr	r3, [pc, #460]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d121      	bne.n	800376a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0d7      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003732:	4b6d      	ldr	r3, [pc, #436]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d115      	bne.n	800376a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0cb      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800374a:	4b67      	ldr	r3, [pc, #412]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0bf      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800375a:	4b63      	ldr	r3, [pc, #396]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0b7      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b5f      	ldr	r3, [pc, #380]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	495c      	ldr	r1, [pc, #368]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 8003778:	4313      	orrs	r3, r2
 800377a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377c:	f7ff f988 	bl	8002a90 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d112      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7ff f980 	bl	8002a90 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e09b      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037a2:	4b51      	ldr	r3, [pc, #324]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d1ee      	bne.n	800378c <HAL_RCC_ClockConfig+0xfc>
 80037ae:	e03e      	b.n	800382e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d112      	bne.n	80037de <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ba:	f7ff f969 	bl	8002a90 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e084      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d0:	4b45      	ldr	r3, [pc, #276]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d1ee      	bne.n	80037ba <HAL_RCC_ClockConfig+0x12a>
 80037dc:	e027      	b.n	800382e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d11d      	bne.n	8003822 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7ff f952 	bl	8002a90 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e06d      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037fe:	4b3a      	ldr	r3, [pc, #232]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b04      	cmp	r3, #4
 8003808:	d1ee      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x158>
 800380a:	e010      	b.n	800382e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7ff f940 	bl	8002a90 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e05b      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003822:	4b31      	ldr	r3, [pc, #196]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1ee      	bne.n	800380c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800382e:	4b2d      	ldr	r3, [pc, #180]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d219      	bcs.n	8003870 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <HAL_RCC_ClockConfig+0x1be>
 8003842:	4b28      	ldr	r3, [pc, #160]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a27      	ldr	r2, [pc, #156]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 8003848:	f043 0304 	orr.w	r3, r3, #4
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b25      	ldr	r3, [pc, #148]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0201 	bic.w	r2, r3, #1
 8003856:	4923      	ldr	r1, [pc, #140]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b21      	ldr	r3, [pc, #132]	@ (80038e4 <HAL_RCC_ClockConfig+0x254>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e034      	b.n	80038da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387c:	4b1a      	ldr	r3, [pc, #104]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4917      	ldr	r1, [pc, #92]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800389a:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	490f      	ldr	r1, [pc, #60]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ae:	f000 f823 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b0c      	ldr	r3, [pc, #48]	@ (80038e8 <HAL_RCC_ClockConfig+0x258>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	490b      	ldr	r1, [pc, #44]	@ (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80038c0:	5ccb      	ldrb	r3, [r1, r3]
 80038c2:	fa22 f303 	lsr.w	r3, r2, r3
 80038c6:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80038c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ca:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <HAL_RCC_ClockConfig+0x264>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f892 	bl	80029f8 <HAL_InitTick>
 80038d4:	4603      	mov	r3, r0
 80038d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80038d8:	7afb      	ldrb	r3, [r7, #11]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023c00 	.word	0x40023c00
 80038e8:	40023800 	.word	0x40023800
 80038ec:	08009cf4 	.word	0x08009cf4
 80038f0:	20000000 	.word	0x20000000
 80038f4:	20000004 	.word	0x20000004

080038f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038fc:	b08e      	sub	sp, #56	@ 0x38
 80038fe:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003900:	4b58      	ldr	r3, [pc, #352]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d00d      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x34>
 8003910:	2b0c      	cmp	r3, #12
 8003912:	f200 8092 	bhi.w	8003a3a <HAL_RCC_GetSysClockFreq+0x142>
 8003916:	2b04      	cmp	r3, #4
 8003918:	d002      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x28>
 800391a:	2b08      	cmp	r3, #8
 800391c:	d003      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x2e>
 800391e:	e08c      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b51      	ldr	r3, [pc, #324]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x170>)
 8003922:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003924:	e097      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003926:	4b51      	ldr	r3, [pc, #324]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x174>)
 8003928:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800392a:	e094      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800392c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392e:	0c9b      	lsrs	r3, r3, #18
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	4b4e      	ldr	r3, [pc, #312]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x178>)
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800393a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393c:	0d9b      	lsrs	r3, r3, #22
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	3301      	adds	r3, #1
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003946:	4b47      	ldr	r3, [pc, #284]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d021      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	2200      	movs	r2, #0
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	61fa      	str	r2, [r7, #28]
 800395a:	4b44      	ldr	r3, [pc, #272]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x174>)
 800395c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003960:	464a      	mov	r2, r9
 8003962:	fb03 f202 	mul.w	r2, r3, r2
 8003966:	2300      	movs	r3, #0
 8003968:	4644      	mov	r4, r8
 800396a:	fb04 f303 	mul.w	r3, r4, r3
 800396e:	4413      	add	r3, r2
 8003970:	4a3e      	ldr	r2, [pc, #248]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x174>)
 8003972:	4644      	mov	r4, r8
 8003974:	fba4 0102 	umull	r0, r1, r4, r2
 8003978:	440b      	add	r3, r1
 800397a:	4619      	mov	r1, r3
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	2200      	movs	r2, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	617a      	str	r2, [r7, #20]
 8003984:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003988:	f7fd fb5e 	bl	8001048 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4613      	mov	r3, r2
 8003992:	637b      	str	r3, [r7, #52]	@ 0x34
 8003994:	e04e      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	2200      	movs	r2, #0
 800399a:	469a      	mov	sl, r3
 800399c:	4693      	mov	fp, r2
 800399e:	4652      	mov	r2, sl
 80039a0:	465b      	mov	r3, fp
 80039a2:	f04f 0000 	mov.w	r0, #0
 80039a6:	f04f 0100 	mov.w	r1, #0
 80039aa:	0159      	lsls	r1, r3, #5
 80039ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b0:	0150      	lsls	r0, r2, #5
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	ebb2 080a 	subs.w	r8, r2, sl
 80039ba:	eb63 090b 	sbc.w	r9, r3, fp
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039d2:	ebb2 0408 	subs.w	r4, r2, r8
 80039d6:	eb63 0509 	sbc.w	r5, r3, r9
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	00eb      	lsls	r3, r5, #3
 80039e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039e8:	00e2      	lsls	r2, r4, #3
 80039ea:	4614      	mov	r4, r2
 80039ec:	461d      	mov	r5, r3
 80039ee:	eb14 030a 	adds.w	r3, r4, sl
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	eb45 030b 	adc.w	r3, r5, fp
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a06:	4629      	mov	r1, r5
 8003a08:	028b      	lsls	r3, r1, #10
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	4604      	mov	r4, r0
 8003a10:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003a14:	4601      	mov	r1, r0
 8003a16:	028a      	lsls	r2, r1, #10
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	2200      	movs	r2, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	60fa      	str	r2, [r7, #12]
 8003a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a28:	f7fd fb0e 	bl	8001048 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8003a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a36:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003a38:	e00d      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	0b5b      	lsrs	r3, r3, #13
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3738      	adds	r7, #56	@ 0x38
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	016e3600 	.word	0x016e3600
 8003a70:	08009ce8 	.word	0x08009ce8

08003a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a78:	4b02      	ldr	r3, [pc, #8]	@ (8003a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20000000 	.word	0x20000000

08003a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a8c:	f7ff fff2 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	@ (8003aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	08009d04 	.word	0x08009d04

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ab4:	f7ff ffde 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0adb      	lsrs	r3, r3, #11
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4903      	ldr	r1, [pc, #12]	@ (8003ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	08009d04 	.word	0x08009d04

08003ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ae4:	4b29      	ldr	r3, [pc, #164]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d12c      	bne.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003af0:	4b26      	ldr	r3, [pc, #152]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003afc:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e016      	b.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	6253      	str	r3, [r2, #36]	@ 0x24
 8003b14:	4b1d      	ldr	r3, [pc, #116]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003b28:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2a:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	4a17      	ldr	r2, [pc, #92]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b34:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003b3c:	d105      	bne.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b44:	d101      	bne.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003b46:	2301      	movs	r3, #1
 8003b48:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003b50:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0f      	ldr	r2, [pc, #60]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 0201 	bic.w	r2, r3, #1
 8003b64:	490b      	ldr	r1, [pc, #44]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b6c:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40007000 	.word	0x40007000
 8003b94:	40023c00 	.word	0x40023c00

08003b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e031      	b.n	8003c0e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fe fe52 	bl	8002868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	f000 f8e4 	bl	8003da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_TIM_ConfigClockSource+0x1c>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0b4      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x186>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c58:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c6a:	d03e      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0xd4>
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c70:	f200 8087 	bhi.w	8003d82 <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c78:	f000 8086 	beq.w	8003d88 <HAL_TIM_ConfigClockSource+0x172>
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c80:	d87f      	bhi.n	8003d82 <HAL_TIM_ConfigClockSource+0x16c>
 8003c82:	2b70      	cmp	r3, #112	@ 0x70
 8003c84:	d01a      	beq.n	8003cbc <HAL_TIM_ConfigClockSource+0xa6>
 8003c86:	2b70      	cmp	r3, #112	@ 0x70
 8003c88:	d87b      	bhi.n	8003d82 <HAL_TIM_ConfigClockSource+0x16c>
 8003c8a:	2b60      	cmp	r3, #96	@ 0x60
 8003c8c:	d050      	beq.n	8003d30 <HAL_TIM_ConfigClockSource+0x11a>
 8003c8e:	2b60      	cmp	r3, #96	@ 0x60
 8003c90:	d877      	bhi.n	8003d82 <HAL_TIM_ConfigClockSource+0x16c>
 8003c92:	2b50      	cmp	r3, #80	@ 0x50
 8003c94:	d03c      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0xfa>
 8003c96:	2b50      	cmp	r3, #80	@ 0x50
 8003c98:	d873      	bhi.n	8003d82 <HAL_TIM_ConfigClockSource+0x16c>
 8003c9a:	2b40      	cmp	r3, #64	@ 0x40
 8003c9c:	d058      	beq.n	8003d50 <HAL_TIM_ConfigClockSource+0x13a>
 8003c9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ca0:	d86f      	bhi.n	8003d82 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca2:	2b30      	cmp	r3, #48	@ 0x30
 8003ca4:	d064      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0x15a>
 8003ca6:	2b30      	cmp	r3, #48	@ 0x30
 8003ca8:	d86b      	bhi.n	8003d82 <HAL_TIM_ConfigClockSource+0x16c>
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d060      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0x15a>
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d867      	bhi.n	8003d82 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d05c      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0x15a>
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d05a      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0x15a>
 8003cba:	e062      	b.n	8003d82 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ccc:	f000 f951 	bl	8003f72 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	609a      	str	r2, [r3, #8]
      break;
 8003ce8:	e04f      	b.n	8003d8a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cfa:	f000 f93a 	bl	8003f72 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d0c:	609a      	str	r2, [r3, #8]
      break;
 8003d0e:	e03c      	b.n	8003d8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f000 f8b1 	bl	8003e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2150      	movs	r1, #80	@ 0x50
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 f908 	bl	8003f3e <TIM_ITRx_SetConfig>
      break;
 8003d2e:	e02c      	b.n	8003d8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f000 f8cf 	bl	8003ee0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2160      	movs	r1, #96	@ 0x60
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 f8f8 	bl	8003f3e <TIM_ITRx_SetConfig>
      break;
 8003d4e:	e01c      	b.n	8003d8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f000 f891 	bl	8003e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2140      	movs	r1, #64	@ 0x40
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f8e8 	bl	8003f3e <TIM_ITRx_SetConfig>
      break;
 8003d6e:	e00c      	b.n	8003d8a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f000 f8df 	bl	8003f3e <TIM_ITRx_SetConfig>
      break;
 8003d80:	e003      	b.n	8003d8a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
      break;
 8003d86:	e000      	b.n	8003d8a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dba:	d00f      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8003e6c <TIM_Base_SetConfig+0xc8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8003e70 <TIM_Base_SetConfig+0xcc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a29      	ldr	r2, [pc, #164]	@ (8003e74 <TIM_Base_SetConfig+0xd0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a28      	ldr	r2, [pc, #160]	@ (8003e78 <TIM_Base_SetConfig+0xd4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d108      	bne.n	8003dee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df4:	d017      	beq.n	8003e26 <TIM_Base_SetConfig+0x82>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e6c <TIM_Base_SetConfig+0xc8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <TIM_Base_SetConfig+0x82>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a1b      	ldr	r2, [pc, #108]	@ (8003e70 <TIM_Base_SetConfig+0xcc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00f      	beq.n	8003e26 <TIM_Base_SetConfig+0x82>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1a      	ldr	r2, [pc, #104]	@ (8003e74 <TIM_Base_SetConfig+0xd0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_Base_SetConfig+0x82>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a19      	ldr	r2, [pc, #100]	@ (8003e78 <TIM_Base_SetConfig+0xd4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_Base_SetConfig+0x82>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a18      	ldr	r2, [pc, #96]	@ (8003e7c <TIM_Base_SetConfig+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_Base_SetConfig+0x82>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a17      	ldr	r2, [pc, #92]	@ (8003e80 <TIM_Base_SetConfig+0xdc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	615a      	str	r2, [r3, #20]
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40000c00 	.word	0x40000c00
 8003e78:	40010800 	.word	0x40010800
 8003e7c:	40010c00 	.word	0x40010c00
 8003e80:	40011000 	.word	0x40011000

08003e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f023 0201 	bic.w	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f023 030a 	bic.w	r3, r3, #10
 8003ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f023 0210 	bic.w	r2, r3, #16
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	031b      	lsls	r3, r3, #12
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	621a      	str	r2, [r3, #32]
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr

08003f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b085      	sub	sp, #20
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f043 0307 	orr.w	r3, r3, #7
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	609a      	str	r2, [r3, #8]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b087      	sub	sp, #28
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	021a      	lsls	r2, r3, #8
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	609a      	str	r2, [r3, #8]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e046      	b.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400a:	d00e      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a13      	ldr	r2, [pc, #76]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a12      	ldr	r2, [pc, #72]	@ (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a10      	ldr	r2, [pc, #64]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d10c      	bne.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	4313      	orrs	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40010800 	.word	0x40010800

0800406c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e042      	b.n	8004104 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fe fc2e 	bl	80028f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	@ 0x24
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f9af 	bl	8004414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	@ 0x28
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b20      	cmp	r3, #32
 800412a:	d16d      	bne.n	8004208 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_UART_Transmit+0x2c>
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e066      	b.n	800420a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2221      	movs	r2, #33	@ 0x21
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800414a:	f7fe fca1 	bl	8002a90 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004164:	d108      	bne.n	8004178 <HAL_UART_Transmit+0x6c>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e003      	b.n	8004180 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004180:	e02a      	b.n	80041d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2200      	movs	r2, #0
 800418a:	2180      	movs	r1, #128	@ 0x80
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f8d2 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e036      	b.n	800420a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	3302      	adds	r3, #2
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	e007      	b.n	80041ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	3301      	adds	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1cf      	bne.n	8004182 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2140      	movs	r1, #64	@ 0x40
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f8a2 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e006      	b.n	800420a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b08a      	sub	sp, #40	@ 0x28
 8004216:	af02      	add	r7, sp, #8
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b20      	cmp	r3, #32
 8004230:	d17c      	bne.n	800432c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_UART_Receive+0x2c>
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e075      	b.n	800432e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2222      	movs	r2, #34	@ 0x22
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004256:	f7fe fc1b 	bl	8002a90 <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004270:	d108      	bne.n	8004284 <HAL_UART_Receive+0x72>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800428c:	e043      	b.n	8004316 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	2120      	movs	r1, #32
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f84c 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e042      	b.n	800432e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10c      	bne.n	80042c8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	3302      	adds	r3, #2
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	e01f      	b.n	8004308 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d0:	d007      	beq.n	80042e2 <HAL_UART_Receive+0xd0>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <HAL_UART_Receive+0xde>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e008      	b.n	8004302 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3301      	adds	r3, #1
 8004306:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1b6      	bne.n	800428e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e000      	b.n	800432e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
  }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b090      	sub	sp, #64	@ 0x40
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004346:	e050      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d04c      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <UART_WaitOnFlagUntilTimeout+0x30>
 8004356:	f7fe fb9b 	bl	8002a90 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004362:	429a      	cmp	r2, r3
 8004364:	d241      	bcs.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800437c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004386:	637a      	str	r2, [r7, #52]	@ 0x34
 8004388:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800438c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e5      	bne.n	8004366 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	613b      	str	r3, [r7, #16]
   return(result);
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3314      	adds	r3, #20
 80043b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043ba:	623a      	str	r2, [r7, #32]
 80043bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	69f9      	ldr	r1, [r7, #28]
 80043c0:	6a3a      	ldr	r2, [r7, #32]
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e5      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e00f      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4013      	ands	r3, r2
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	429a      	cmp	r2, r3
 8004406:	d09f      	beq.n	8004348 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3740      	adds	r7, #64	@ 0x40
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4313      	orrs	r3, r2
 8004448:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004454:	f023 030c 	bic.w	r3, r3, #12
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	430b      	orrs	r3, r1
 8004460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a55      	ldr	r2, [pc, #340]	@ (80045d4 <UART_SetConfig+0x1c0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d103      	bne.n	800448a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004482:	f7ff fb15 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	e002      	b.n	8004490 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800448a:	f7ff fafd 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 800448e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004498:	d14c      	bne.n	8004534 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	009a      	lsls	r2, r3, #2
 80044a4:	441a      	add	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	4a49      	ldr	r2, [pc, #292]	@ (80045d8 <UART_SetConfig+0x1c4>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	0119      	lsls	r1, r3, #4
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	009a      	lsls	r2, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044d0:	4b41      	ldr	r3, [pc, #260]	@ (80045d8 <UART_SetConfig+0x1c4>)
 80044d2:	fba3 0302 	umull	r0, r3, r3, r2
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	2064      	movs	r0, #100	@ 0x64
 80044da:	fb00 f303 	mul.w	r3, r0, r3
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	3332      	adds	r3, #50	@ 0x32
 80044e4:	4a3c      	ldr	r2, [pc, #240]	@ (80045d8 <UART_SetConfig+0x1c4>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044f2:	4419      	add	r1, r3
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009a      	lsls	r2, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fbb2 f2f3 	udiv	r2, r2, r3
 800450a:	4b33      	ldr	r3, [pc, #204]	@ (80045d8 <UART_SetConfig+0x1c4>)
 800450c:	fba3 0302 	umull	r0, r3, r3, r2
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	2064      	movs	r0, #100	@ 0x64
 8004514:	fb00 f303 	mul.w	r3, r0, r3
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	3332      	adds	r3, #50	@ 0x32
 800451e:	4a2e      	ldr	r2, [pc, #184]	@ (80045d8 <UART_SetConfig+0x1c4>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	f003 0207 	and.w	r2, r3, #7
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	440a      	add	r2, r1
 8004530:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004532:	e04a      	b.n	80045ca <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009a      	lsls	r2, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	fbb2 f3f3 	udiv	r3, r2, r3
 800454a:	4a23      	ldr	r2, [pc, #140]	@ (80045d8 <UART_SetConfig+0x1c4>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	0119      	lsls	r1, r3, #4
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009a      	lsls	r2, r3, #2
 800455e:	441a      	add	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	fbb2 f2f3 	udiv	r2, r2, r3
 800456a:	4b1b      	ldr	r3, [pc, #108]	@ (80045d8 <UART_SetConfig+0x1c4>)
 800456c:	fba3 0302 	umull	r0, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2064      	movs	r0, #100	@ 0x64
 8004574:	fb00 f303 	mul.w	r3, r0, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	3332      	adds	r3, #50	@ 0x32
 800457e:	4a16      	ldr	r2, [pc, #88]	@ (80045d8 <UART_SetConfig+0x1c4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800458a:	4419      	add	r1, r3
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009a      	lsls	r2, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a2:	4b0d      	ldr	r3, [pc, #52]	@ (80045d8 <UART_SetConfig+0x1c4>)
 80045a4:	fba3 0302 	umull	r0, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	2064      	movs	r0, #100	@ 0x64
 80045ac:	fb00 f303 	mul.w	r3, r0, r3
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	3332      	adds	r3, #50	@ 0x32
 80045b6:	4a08      	ldr	r2, [pc, #32]	@ (80045d8 <UART_SetConfig+0x1c4>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	f003 020f 	and.w	r2, r3, #15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	440a      	add	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40013800 	.word	0x40013800
 80045d8:	51eb851f 	.word	0x51eb851f

080045dc <_strtol_l.constprop.0>:
 80045dc:	2b24      	cmp	r3, #36	@ 0x24
 80045de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e2:	4686      	mov	lr, r0
 80045e4:	4690      	mov	r8, r2
 80045e6:	d801      	bhi.n	80045ec <_strtol_l.constprop.0+0x10>
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d106      	bne.n	80045fa <_strtol_l.constprop.0+0x1e>
 80045ec:	f001 fdfe 	bl	80061ec <__errno>
 80045f0:	2316      	movs	r3, #22
 80045f2:	6003      	str	r3, [r0, #0]
 80045f4:	2000      	movs	r0, #0
 80045f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fa:	460d      	mov	r5, r1
 80045fc:	4833      	ldr	r0, [pc, #204]	@ (80046cc <_strtol_l.constprop.0+0xf0>)
 80045fe:	462a      	mov	r2, r5
 8004600:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004604:	5d06      	ldrb	r6, [r0, r4]
 8004606:	f016 0608 	ands.w	r6, r6, #8
 800460a:	d1f8      	bne.n	80045fe <_strtol_l.constprop.0+0x22>
 800460c:	2c2d      	cmp	r4, #45	@ 0x2d
 800460e:	d12d      	bne.n	800466c <_strtol_l.constprop.0+0x90>
 8004610:	2601      	movs	r6, #1
 8004612:	782c      	ldrb	r4, [r5, #0]
 8004614:	1c95      	adds	r5, r2, #2
 8004616:	f033 0210 	bics.w	r2, r3, #16
 800461a:	d109      	bne.n	8004630 <_strtol_l.constprop.0+0x54>
 800461c:	2c30      	cmp	r4, #48	@ 0x30
 800461e:	d12a      	bne.n	8004676 <_strtol_l.constprop.0+0x9a>
 8004620:	782a      	ldrb	r2, [r5, #0]
 8004622:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004626:	2a58      	cmp	r2, #88	@ 0x58
 8004628:	d125      	bne.n	8004676 <_strtol_l.constprop.0+0x9a>
 800462a:	2310      	movs	r3, #16
 800462c:	786c      	ldrb	r4, [r5, #1]
 800462e:	3502      	adds	r5, #2
 8004630:	2200      	movs	r2, #0
 8004632:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004636:	f10c 3cff 	add.w	ip, ip, #4294967295
 800463a:	fbbc f9f3 	udiv	r9, ip, r3
 800463e:	4610      	mov	r0, r2
 8004640:	fb03 ca19 	mls	sl, r3, r9, ip
 8004644:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004648:	2f09      	cmp	r7, #9
 800464a:	d81b      	bhi.n	8004684 <_strtol_l.constprop.0+0xa8>
 800464c:	463c      	mov	r4, r7
 800464e:	42a3      	cmp	r3, r4
 8004650:	dd27      	ble.n	80046a2 <_strtol_l.constprop.0+0xc6>
 8004652:	1c57      	adds	r7, r2, #1
 8004654:	d007      	beq.n	8004666 <_strtol_l.constprop.0+0x8a>
 8004656:	4581      	cmp	r9, r0
 8004658:	d320      	bcc.n	800469c <_strtol_l.constprop.0+0xc0>
 800465a:	d101      	bne.n	8004660 <_strtol_l.constprop.0+0x84>
 800465c:	45a2      	cmp	sl, r4
 800465e:	db1d      	blt.n	800469c <_strtol_l.constprop.0+0xc0>
 8004660:	2201      	movs	r2, #1
 8004662:	fb00 4003 	mla	r0, r0, r3, r4
 8004666:	f815 4b01 	ldrb.w	r4, [r5], #1
 800466a:	e7eb      	b.n	8004644 <_strtol_l.constprop.0+0x68>
 800466c:	2c2b      	cmp	r4, #43	@ 0x2b
 800466e:	bf04      	itt	eq
 8004670:	782c      	ldrbeq	r4, [r5, #0]
 8004672:	1c95      	addeq	r5, r2, #2
 8004674:	e7cf      	b.n	8004616 <_strtol_l.constprop.0+0x3a>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1da      	bne.n	8004630 <_strtol_l.constprop.0+0x54>
 800467a:	2c30      	cmp	r4, #48	@ 0x30
 800467c:	bf0c      	ite	eq
 800467e:	2308      	moveq	r3, #8
 8004680:	230a      	movne	r3, #10
 8004682:	e7d5      	b.n	8004630 <_strtol_l.constprop.0+0x54>
 8004684:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004688:	2f19      	cmp	r7, #25
 800468a:	d801      	bhi.n	8004690 <_strtol_l.constprop.0+0xb4>
 800468c:	3c37      	subs	r4, #55	@ 0x37
 800468e:	e7de      	b.n	800464e <_strtol_l.constprop.0+0x72>
 8004690:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004694:	2f19      	cmp	r7, #25
 8004696:	d804      	bhi.n	80046a2 <_strtol_l.constprop.0+0xc6>
 8004698:	3c57      	subs	r4, #87	@ 0x57
 800469a:	e7d8      	b.n	800464e <_strtol_l.constprop.0+0x72>
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	e7e1      	b.n	8004666 <_strtol_l.constprop.0+0x8a>
 80046a2:	1c53      	adds	r3, r2, #1
 80046a4:	d108      	bne.n	80046b8 <_strtol_l.constprop.0+0xdc>
 80046a6:	2322      	movs	r3, #34	@ 0x22
 80046a8:	4660      	mov	r0, ip
 80046aa:	f8ce 3000 	str.w	r3, [lr]
 80046ae:	f1b8 0f00 	cmp.w	r8, #0
 80046b2:	d0a0      	beq.n	80045f6 <_strtol_l.constprop.0+0x1a>
 80046b4:	1e69      	subs	r1, r5, #1
 80046b6:	e006      	b.n	80046c6 <_strtol_l.constprop.0+0xea>
 80046b8:	b106      	cbz	r6, 80046bc <_strtol_l.constprop.0+0xe0>
 80046ba:	4240      	negs	r0, r0
 80046bc:	f1b8 0f00 	cmp.w	r8, #0
 80046c0:	d099      	beq.n	80045f6 <_strtol_l.constprop.0+0x1a>
 80046c2:	2a00      	cmp	r2, #0
 80046c4:	d1f6      	bne.n	80046b4 <_strtol_l.constprop.0+0xd8>
 80046c6:	f8c8 1000 	str.w	r1, [r8]
 80046ca:	e794      	b.n	80045f6 <_strtol_l.constprop.0+0x1a>
 80046cc:	08009d0d 	.word	0x08009d0d

080046d0 <_strtol_r>:
 80046d0:	f7ff bf84 	b.w	80045dc <_strtol_l.constprop.0>

080046d4 <strtol>:
 80046d4:	4613      	mov	r3, r2
 80046d6:	460a      	mov	r2, r1
 80046d8:	4601      	mov	r1, r0
 80046da:	4802      	ldr	r0, [pc, #8]	@ (80046e4 <strtol+0x10>)
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f7ff bf7d 	b.w	80045dc <_strtol_l.constprop.0>
 80046e2:	bf00      	nop
 80046e4:	20000018 	.word	0x20000018

080046e8 <__cvt>:
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ee:	461d      	mov	r5, r3
 80046f0:	bfbb      	ittet	lt
 80046f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80046f6:	461d      	movlt	r5, r3
 80046f8:	2300      	movge	r3, #0
 80046fa:	232d      	movlt	r3, #45	@ 0x2d
 80046fc:	b088      	sub	sp, #32
 80046fe:	4614      	mov	r4, r2
 8004700:	bfb8      	it	lt
 8004702:	4614      	movlt	r4, r2
 8004704:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004706:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004708:	7013      	strb	r3, [r2, #0]
 800470a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800470c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004710:	f023 0820 	bic.w	r8, r3, #32
 8004714:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004718:	d005      	beq.n	8004726 <__cvt+0x3e>
 800471a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800471e:	d100      	bne.n	8004722 <__cvt+0x3a>
 8004720:	3601      	adds	r6, #1
 8004722:	2302      	movs	r3, #2
 8004724:	e000      	b.n	8004728 <__cvt+0x40>
 8004726:	2303      	movs	r3, #3
 8004728:	aa07      	add	r2, sp, #28
 800472a:	9204      	str	r2, [sp, #16]
 800472c:	aa06      	add	r2, sp, #24
 800472e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004732:	e9cd 3600 	strd	r3, r6, [sp]
 8004736:	4622      	mov	r2, r4
 8004738:	462b      	mov	r3, r5
 800473a:	f001 fe4d 	bl	80063d8 <_dtoa_r>
 800473e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004742:	4607      	mov	r7, r0
 8004744:	d119      	bne.n	800477a <__cvt+0x92>
 8004746:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004748:	07db      	lsls	r3, r3, #31
 800474a:	d50e      	bpl.n	800476a <__cvt+0x82>
 800474c:	eb00 0906 	add.w	r9, r0, r6
 8004750:	2200      	movs	r2, #0
 8004752:	2300      	movs	r3, #0
 8004754:	4620      	mov	r0, r4
 8004756:	4629      	mov	r1, r5
 8004758:	f7fc f9f2 	bl	8000b40 <__aeabi_dcmpeq>
 800475c:	b108      	cbz	r0, 8004762 <__cvt+0x7a>
 800475e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004762:	2230      	movs	r2, #48	@ 0x30
 8004764:	9b07      	ldr	r3, [sp, #28]
 8004766:	454b      	cmp	r3, r9
 8004768:	d31e      	bcc.n	80047a8 <__cvt+0xc0>
 800476a:	4638      	mov	r0, r7
 800476c:	9b07      	ldr	r3, [sp, #28]
 800476e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004770:	1bdb      	subs	r3, r3, r7
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	b008      	add	sp, #32
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800477e:	eb00 0906 	add.w	r9, r0, r6
 8004782:	d1e5      	bne.n	8004750 <__cvt+0x68>
 8004784:	7803      	ldrb	r3, [r0, #0]
 8004786:	2b30      	cmp	r3, #48	@ 0x30
 8004788:	d10a      	bne.n	80047a0 <__cvt+0xb8>
 800478a:	2200      	movs	r2, #0
 800478c:	2300      	movs	r3, #0
 800478e:	4620      	mov	r0, r4
 8004790:	4629      	mov	r1, r5
 8004792:	f7fc f9d5 	bl	8000b40 <__aeabi_dcmpeq>
 8004796:	b918      	cbnz	r0, 80047a0 <__cvt+0xb8>
 8004798:	f1c6 0601 	rsb	r6, r6, #1
 800479c:	f8ca 6000 	str.w	r6, [sl]
 80047a0:	f8da 3000 	ldr.w	r3, [sl]
 80047a4:	4499      	add	r9, r3
 80047a6:	e7d3      	b.n	8004750 <__cvt+0x68>
 80047a8:	1c59      	adds	r1, r3, #1
 80047aa:	9107      	str	r1, [sp, #28]
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e7d9      	b.n	8004764 <__cvt+0x7c>

080047b0 <__exponent>:
 80047b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047b2:	2900      	cmp	r1, #0
 80047b4:	bfb6      	itet	lt
 80047b6:	232d      	movlt	r3, #45	@ 0x2d
 80047b8:	232b      	movge	r3, #43	@ 0x2b
 80047ba:	4249      	neglt	r1, r1
 80047bc:	2909      	cmp	r1, #9
 80047be:	7002      	strb	r2, [r0, #0]
 80047c0:	7043      	strb	r3, [r0, #1]
 80047c2:	dd29      	ble.n	8004818 <__exponent+0x68>
 80047c4:	f10d 0307 	add.w	r3, sp, #7
 80047c8:	461d      	mov	r5, r3
 80047ca:	270a      	movs	r7, #10
 80047cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80047d0:	461a      	mov	r2, r3
 80047d2:	fb07 1416 	mls	r4, r7, r6, r1
 80047d6:	3430      	adds	r4, #48	@ 0x30
 80047d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80047dc:	460c      	mov	r4, r1
 80047de:	2c63      	cmp	r4, #99	@ 0x63
 80047e0:	4631      	mov	r1, r6
 80047e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80047e6:	dcf1      	bgt.n	80047cc <__exponent+0x1c>
 80047e8:	3130      	adds	r1, #48	@ 0x30
 80047ea:	1e94      	subs	r4, r2, #2
 80047ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047f0:	4623      	mov	r3, r4
 80047f2:	1c41      	adds	r1, r0, #1
 80047f4:	42ab      	cmp	r3, r5
 80047f6:	d30a      	bcc.n	800480e <__exponent+0x5e>
 80047f8:	f10d 0309 	add.w	r3, sp, #9
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	42ac      	cmp	r4, r5
 8004800:	bf88      	it	hi
 8004802:	2300      	movhi	r3, #0
 8004804:	3302      	adds	r3, #2
 8004806:	4403      	add	r3, r0
 8004808:	1a18      	subs	r0, r3, r0
 800480a:	b003      	add	sp, #12
 800480c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004812:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004816:	e7ed      	b.n	80047f4 <__exponent+0x44>
 8004818:	2330      	movs	r3, #48	@ 0x30
 800481a:	3130      	adds	r1, #48	@ 0x30
 800481c:	7083      	strb	r3, [r0, #2]
 800481e:	70c1      	strb	r1, [r0, #3]
 8004820:	1d03      	adds	r3, r0, #4
 8004822:	e7f1      	b.n	8004808 <__exponent+0x58>

08004824 <_printf_float>:
 8004824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004828:	b091      	sub	sp, #68	@ 0x44
 800482a:	460c      	mov	r4, r1
 800482c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004830:	4616      	mov	r6, r2
 8004832:	461f      	mov	r7, r3
 8004834:	4605      	mov	r5, r0
 8004836:	f001 fc5b 	bl	80060f0 <_localeconv_r>
 800483a:	6803      	ldr	r3, [r0, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	9308      	str	r3, [sp, #32]
 8004840:	f7fb fc9e 	bl	8000180 <strlen>
 8004844:	2300      	movs	r3, #0
 8004846:	930e      	str	r3, [sp, #56]	@ 0x38
 8004848:	f8d8 3000 	ldr.w	r3, [r8]
 800484c:	9009      	str	r0, [sp, #36]	@ 0x24
 800484e:	3307      	adds	r3, #7
 8004850:	f023 0307 	bic.w	r3, r3, #7
 8004854:	f103 0208 	add.w	r2, r3, #8
 8004858:	f894 a018 	ldrb.w	sl, [r4, #24]
 800485c:	f8d4 b000 	ldr.w	fp, [r4]
 8004860:	f8c8 2000 	str.w	r2, [r8]
 8004864:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004868:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800486c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800486e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004872:	f04f 32ff 	mov.w	r2, #4294967295
 8004876:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800487a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800487e:	4b9c      	ldr	r3, [pc, #624]	@ (8004af0 <_printf_float+0x2cc>)
 8004880:	f7fc f990 	bl	8000ba4 <__aeabi_dcmpun>
 8004884:	bb70      	cbnz	r0, 80048e4 <_printf_float+0xc0>
 8004886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800488a:	f04f 32ff 	mov.w	r2, #4294967295
 800488e:	4b98      	ldr	r3, [pc, #608]	@ (8004af0 <_printf_float+0x2cc>)
 8004890:	f7fc f96a 	bl	8000b68 <__aeabi_dcmple>
 8004894:	bb30      	cbnz	r0, 80048e4 <_printf_float+0xc0>
 8004896:	2200      	movs	r2, #0
 8004898:	2300      	movs	r3, #0
 800489a:	4640      	mov	r0, r8
 800489c:	4649      	mov	r1, r9
 800489e:	f7fc f959 	bl	8000b54 <__aeabi_dcmplt>
 80048a2:	b110      	cbz	r0, 80048aa <_printf_float+0x86>
 80048a4:	232d      	movs	r3, #45	@ 0x2d
 80048a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048aa:	4a92      	ldr	r2, [pc, #584]	@ (8004af4 <_printf_float+0x2d0>)
 80048ac:	4b92      	ldr	r3, [pc, #584]	@ (8004af8 <_printf_float+0x2d4>)
 80048ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80048b2:	bf94      	ite	ls
 80048b4:	4690      	movls	r8, r2
 80048b6:	4698      	movhi	r8, r3
 80048b8:	2303      	movs	r3, #3
 80048ba:	f04f 0900 	mov.w	r9, #0
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	f02b 0304 	bic.w	r3, fp, #4
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	4633      	mov	r3, r6
 80048c8:	4621      	mov	r1, r4
 80048ca:	4628      	mov	r0, r5
 80048cc:	9700      	str	r7, [sp, #0]
 80048ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 80048d0:	f000 f9d4 	bl	8004c7c <_printf_common>
 80048d4:	3001      	adds	r0, #1
 80048d6:	f040 8090 	bne.w	80049fa <_printf_float+0x1d6>
 80048da:	f04f 30ff 	mov.w	r0, #4294967295
 80048de:	b011      	add	sp, #68	@ 0x44
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e4:	4642      	mov	r2, r8
 80048e6:	464b      	mov	r3, r9
 80048e8:	4640      	mov	r0, r8
 80048ea:	4649      	mov	r1, r9
 80048ec:	f7fc f95a 	bl	8000ba4 <__aeabi_dcmpun>
 80048f0:	b148      	cbz	r0, 8004906 <_printf_float+0xe2>
 80048f2:	464b      	mov	r3, r9
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bfb8      	it	lt
 80048f8:	232d      	movlt	r3, #45	@ 0x2d
 80048fa:	4a80      	ldr	r2, [pc, #512]	@ (8004afc <_printf_float+0x2d8>)
 80048fc:	bfb8      	it	lt
 80048fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004902:	4b7f      	ldr	r3, [pc, #508]	@ (8004b00 <_printf_float+0x2dc>)
 8004904:	e7d3      	b.n	80048ae <_printf_float+0x8a>
 8004906:	6863      	ldr	r3, [r4, #4]
 8004908:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	d13f      	bne.n	8004990 <_printf_float+0x16c>
 8004910:	2306      	movs	r3, #6
 8004912:	6063      	str	r3, [r4, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	9206      	str	r2, [sp, #24]
 800491e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004920:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004924:	aa0d      	add	r2, sp, #52	@ 0x34
 8004926:	9203      	str	r2, [sp, #12]
 8004928:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800492c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	4642      	mov	r2, r8
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	4628      	mov	r0, r5
 8004938:	464b      	mov	r3, r9
 800493a:	910a      	str	r1, [sp, #40]	@ 0x28
 800493c:	f7ff fed4 	bl	80046e8 <__cvt>
 8004940:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004942:	4680      	mov	r8, r0
 8004944:	2947      	cmp	r1, #71	@ 0x47
 8004946:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004948:	d128      	bne.n	800499c <_printf_float+0x178>
 800494a:	1cc8      	adds	r0, r1, #3
 800494c:	db02      	blt.n	8004954 <_printf_float+0x130>
 800494e:	6863      	ldr	r3, [r4, #4]
 8004950:	4299      	cmp	r1, r3
 8004952:	dd40      	ble.n	80049d6 <_printf_float+0x1b2>
 8004954:	f1aa 0a02 	sub.w	sl, sl, #2
 8004958:	fa5f fa8a 	uxtb.w	sl, sl
 800495c:	4652      	mov	r2, sl
 800495e:	3901      	subs	r1, #1
 8004960:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004964:	910d      	str	r1, [sp, #52]	@ 0x34
 8004966:	f7ff ff23 	bl	80047b0 <__exponent>
 800496a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800496c:	4681      	mov	r9, r0
 800496e:	1813      	adds	r3, r2, r0
 8004970:	2a01      	cmp	r2, #1
 8004972:	6123      	str	r3, [r4, #16]
 8004974:	dc02      	bgt.n	800497c <_printf_float+0x158>
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	07d2      	lsls	r2, r2, #31
 800497a:	d501      	bpl.n	8004980 <_printf_float+0x15c>
 800497c:	3301      	adds	r3, #1
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004984:	2b00      	cmp	r3, #0
 8004986:	d09e      	beq.n	80048c6 <_printf_float+0xa2>
 8004988:	232d      	movs	r3, #45	@ 0x2d
 800498a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800498e:	e79a      	b.n	80048c6 <_printf_float+0xa2>
 8004990:	2947      	cmp	r1, #71	@ 0x47
 8004992:	d1bf      	bne.n	8004914 <_printf_float+0xf0>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1bd      	bne.n	8004914 <_printf_float+0xf0>
 8004998:	2301      	movs	r3, #1
 800499a:	e7ba      	b.n	8004912 <_printf_float+0xee>
 800499c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049a0:	d9dc      	bls.n	800495c <_printf_float+0x138>
 80049a2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80049a6:	d118      	bne.n	80049da <_printf_float+0x1b6>
 80049a8:	2900      	cmp	r1, #0
 80049aa:	6863      	ldr	r3, [r4, #4]
 80049ac:	dd0b      	ble.n	80049c6 <_printf_float+0x1a2>
 80049ae:	6121      	str	r1, [r4, #16]
 80049b0:	b913      	cbnz	r3, 80049b8 <_printf_float+0x194>
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	07d0      	lsls	r0, r2, #31
 80049b6:	d502      	bpl.n	80049be <_printf_float+0x19a>
 80049b8:	3301      	adds	r3, #1
 80049ba:	440b      	add	r3, r1
 80049bc:	6123      	str	r3, [r4, #16]
 80049be:	f04f 0900 	mov.w	r9, #0
 80049c2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80049c4:	e7dc      	b.n	8004980 <_printf_float+0x15c>
 80049c6:	b913      	cbnz	r3, 80049ce <_printf_float+0x1aa>
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	07d2      	lsls	r2, r2, #31
 80049cc:	d501      	bpl.n	80049d2 <_printf_float+0x1ae>
 80049ce:	3302      	adds	r3, #2
 80049d0:	e7f4      	b.n	80049bc <_printf_float+0x198>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e7f2      	b.n	80049bc <_printf_float+0x198>
 80049d6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80049da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049dc:	4299      	cmp	r1, r3
 80049de:	db05      	blt.n	80049ec <_printf_float+0x1c8>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	6121      	str	r1, [r4, #16]
 80049e4:	07d8      	lsls	r0, r3, #31
 80049e6:	d5ea      	bpl.n	80049be <_printf_float+0x19a>
 80049e8:	1c4b      	adds	r3, r1, #1
 80049ea:	e7e7      	b.n	80049bc <_printf_float+0x198>
 80049ec:	2900      	cmp	r1, #0
 80049ee:	bfcc      	ite	gt
 80049f0:	2201      	movgt	r2, #1
 80049f2:	f1c1 0202 	rsble	r2, r1, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	e7e0      	b.n	80049bc <_printf_float+0x198>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	055a      	lsls	r2, r3, #21
 80049fe:	d407      	bmi.n	8004a10 <_printf_float+0x1ec>
 8004a00:	6923      	ldr	r3, [r4, #16]
 8004a02:	4642      	mov	r2, r8
 8004a04:	4631      	mov	r1, r6
 8004a06:	4628      	mov	r0, r5
 8004a08:	47b8      	blx	r7
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d12b      	bne.n	8004a66 <_printf_float+0x242>
 8004a0e:	e764      	b.n	80048da <_printf_float+0xb6>
 8004a10:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a14:	f240 80dc 	bls.w	8004bd0 <_printf_float+0x3ac>
 8004a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f7fc f88e 	bl	8000b40 <__aeabi_dcmpeq>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d033      	beq.n	8004a90 <_printf_float+0x26c>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <_printf_float+0x2e0>)
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f af51 	beq.w	80048da <_printf_float+0xb6>
 8004a38:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004a3c:	4543      	cmp	r3, r8
 8004a3e:	db02      	blt.n	8004a46 <_printf_float+0x222>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	07d8      	lsls	r0, r3, #31
 8004a44:	d50f      	bpl.n	8004a66 <_printf_float+0x242>
 8004a46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b8      	blx	r7
 8004a50:	3001      	adds	r0, #1
 8004a52:	f43f af42 	beq.w	80048da <_printf_float+0xb6>
 8004a56:	f04f 0900 	mov.w	r9, #0
 8004a5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a5e:	f104 0a1a 	add.w	sl, r4, #26
 8004a62:	45c8      	cmp	r8, r9
 8004a64:	dc09      	bgt.n	8004a7a <_printf_float+0x256>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	079b      	lsls	r3, r3, #30
 8004a6a:	f100 8102 	bmi.w	8004c72 <_printf_float+0x44e>
 8004a6e:	68e0      	ldr	r0, [r4, #12]
 8004a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a72:	4298      	cmp	r0, r3
 8004a74:	bfb8      	it	lt
 8004a76:	4618      	movlt	r0, r3
 8004a78:	e731      	b.n	80048de <_printf_float+0xba>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4652      	mov	r2, sl
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4628      	mov	r0, r5
 8004a82:	47b8      	blx	r7
 8004a84:	3001      	adds	r0, #1
 8004a86:	f43f af28 	beq.w	80048da <_printf_float+0xb6>
 8004a8a:	f109 0901 	add.w	r9, r9, #1
 8004a8e:	e7e8      	b.n	8004a62 <_printf_float+0x23e>
 8004a90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dc38      	bgt.n	8004b08 <_printf_float+0x2e4>
 8004a96:	2301      	movs	r3, #1
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <_printf_float+0x2e0>)
 8004a9e:	47b8      	blx	r7
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f43f af1a 	beq.w	80048da <_printf_float+0xb6>
 8004aa6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004aaa:	ea59 0303 	orrs.w	r3, r9, r3
 8004aae:	d102      	bne.n	8004ab6 <_printf_float+0x292>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	07d9      	lsls	r1, r3, #31
 8004ab4:	d5d7      	bpl.n	8004a66 <_printf_float+0x242>
 8004ab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f af0a 	beq.w	80048da <_printf_float+0xb6>
 8004ac6:	f04f 0a00 	mov.w	sl, #0
 8004aca:	f104 0b1a 	add.w	fp, r4, #26
 8004ace:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ad0:	425b      	negs	r3, r3
 8004ad2:	4553      	cmp	r3, sl
 8004ad4:	dc01      	bgt.n	8004ada <_printf_float+0x2b6>
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	e793      	b.n	8004a02 <_printf_float+0x1de>
 8004ada:	2301      	movs	r3, #1
 8004adc:	465a      	mov	r2, fp
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b8      	blx	r7
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	f43f aef8 	beq.w	80048da <_printf_float+0xb6>
 8004aea:	f10a 0a01 	add.w	sl, sl, #1
 8004aee:	e7ee      	b.n	8004ace <_printf_float+0x2aa>
 8004af0:	7fefffff 	.word	0x7fefffff
 8004af4:	08009e0d 	.word	0x08009e0d
 8004af8:	08009e11 	.word	0x08009e11
 8004afc:	08009e15 	.word	0x08009e15
 8004b00:	08009e19 	.word	0x08009e19
 8004b04:	08009e1d 	.word	0x08009e1d
 8004b08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b0a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004b0e:	4553      	cmp	r3, sl
 8004b10:	bfa8      	it	ge
 8004b12:	4653      	movge	r3, sl
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	4699      	mov	r9, r3
 8004b18:	dc36      	bgt.n	8004b88 <_printf_float+0x364>
 8004b1a:	f04f 0b00 	mov.w	fp, #0
 8004b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b22:	f104 021a 	add.w	r2, r4, #26
 8004b26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b2a:	eba3 0309 	sub.w	r3, r3, r9
 8004b2e:	455b      	cmp	r3, fp
 8004b30:	dc31      	bgt.n	8004b96 <_printf_float+0x372>
 8004b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b34:	459a      	cmp	sl, r3
 8004b36:	dc3a      	bgt.n	8004bae <_printf_float+0x38a>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	07da      	lsls	r2, r3, #31
 8004b3c:	d437      	bmi.n	8004bae <_printf_float+0x38a>
 8004b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b40:	ebaa 0903 	sub.w	r9, sl, r3
 8004b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b46:	ebaa 0303 	sub.w	r3, sl, r3
 8004b4a:	4599      	cmp	r9, r3
 8004b4c:	bfa8      	it	ge
 8004b4e:	4699      	movge	r9, r3
 8004b50:	f1b9 0f00 	cmp.w	r9, #0
 8004b54:	dc33      	bgt.n	8004bbe <_printf_float+0x39a>
 8004b56:	f04f 0800 	mov.w	r8, #0
 8004b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b5e:	f104 0b1a 	add.w	fp, r4, #26
 8004b62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b64:	ebaa 0303 	sub.w	r3, sl, r3
 8004b68:	eba3 0309 	sub.w	r3, r3, r9
 8004b6c:	4543      	cmp	r3, r8
 8004b6e:	f77f af7a 	ble.w	8004a66 <_printf_float+0x242>
 8004b72:	2301      	movs	r3, #1
 8004b74:	465a      	mov	r2, fp
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f aeac 	beq.w	80048da <_printf_float+0xb6>
 8004b82:	f108 0801 	add.w	r8, r8, #1
 8004b86:	e7ec      	b.n	8004b62 <_printf_float+0x33e>
 8004b88:	4642      	mov	r2, r8
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	47b8      	blx	r7
 8004b90:	3001      	adds	r0, #1
 8004b92:	d1c2      	bne.n	8004b1a <_printf_float+0x2f6>
 8004b94:	e6a1      	b.n	80048da <_printf_float+0xb6>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004b9e:	47b8      	blx	r7
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	f43f ae9a 	beq.w	80048da <_printf_float+0xb6>
 8004ba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ba8:	f10b 0b01 	add.w	fp, fp, #1
 8004bac:	e7bb      	b.n	8004b26 <_printf_float+0x302>
 8004bae:	4631      	mov	r1, r6
 8004bb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	47b8      	blx	r7
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d1c0      	bne.n	8004b3e <_printf_float+0x31a>
 8004bbc:	e68d      	b.n	80048da <_printf_float+0xb6>
 8004bbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	4442      	add	r2, r8
 8004bc8:	47b8      	blx	r7
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d1c3      	bne.n	8004b56 <_printf_float+0x332>
 8004bce:	e684      	b.n	80048da <_printf_float+0xb6>
 8004bd0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004bd4:	f1ba 0f01 	cmp.w	sl, #1
 8004bd8:	dc01      	bgt.n	8004bde <_printf_float+0x3ba>
 8004bda:	07db      	lsls	r3, r3, #31
 8004bdc:	d536      	bpl.n	8004c4c <_printf_float+0x428>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4642      	mov	r2, r8
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b8      	blx	r7
 8004be8:	3001      	adds	r0, #1
 8004bea:	f43f ae76 	beq.w	80048da <_printf_float+0xb6>
 8004bee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	f43f ae6e 	beq.w	80048da <_printf_float+0xb6>
 8004bfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c0a:	f7fb ff99 	bl	8000b40 <__aeabi_dcmpeq>
 8004c0e:	b9c0      	cbnz	r0, 8004c42 <_printf_float+0x41e>
 8004c10:	4653      	mov	r3, sl
 8004c12:	f108 0201 	add.w	r2, r8, #1
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d10c      	bne.n	8004c3a <_printf_float+0x416>
 8004c20:	e65b      	b.n	80048da <_printf_float+0xb6>
 8004c22:	2301      	movs	r3, #1
 8004c24:	465a      	mov	r2, fp
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f ae54 	beq.w	80048da <_printf_float+0xb6>
 8004c32:	f108 0801 	add.w	r8, r8, #1
 8004c36:	45d0      	cmp	r8, sl
 8004c38:	dbf3      	blt.n	8004c22 <_printf_float+0x3fe>
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004c40:	e6e0      	b.n	8004a04 <_printf_float+0x1e0>
 8004c42:	f04f 0800 	mov.w	r8, #0
 8004c46:	f104 0b1a 	add.w	fp, r4, #26
 8004c4a:	e7f4      	b.n	8004c36 <_printf_float+0x412>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4642      	mov	r2, r8
 8004c50:	e7e1      	b.n	8004c16 <_printf_float+0x3f2>
 8004c52:	2301      	movs	r3, #1
 8004c54:	464a      	mov	r2, r9
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f ae3c 	beq.w	80048da <_printf_float+0xb6>
 8004c62:	f108 0801 	add.w	r8, r8, #1
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004c6a:	1a5b      	subs	r3, r3, r1
 8004c6c:	4543      	cmp	r3, r8
 8004c6e:	dcf0      	bgt.n	8004c52 <_printf_float+0x42e>
 8004c70:	e6fd      	b.n	8004a6e <_printf_float+0x24a>
 8004c72:	f04f 0800 	mov.w	r8, #0
 8004c76:	f104 0919 	add.w	r9, r4, #25
 8004c7a:	e7f4      	b.n	8004c66 <_printf_float+0x442>

08004c7c <_printf_common>:
 8004c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c80:	4616      	mov	r6, r2
 8004c82:	4698      	mov	r8, r3
 8004c84:	688a      	ldr	r2, [r1, #8]
 8004c86:	690b      	ldr	r3, [r1, #16]
 8004c88:	4607      	mov	r7, r0
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	bfb8      	it	lt
 8004c8e:	4613      	movlt	r3, r2
 8004c90:	6033      	str	r3, [r6, #0]
 8004c92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c96:	460c      	mov	r4, r1
 8004c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c9c:	b10a      	cbz	r2, 8004ca2 <_printf_common+0x26>
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	6033      	str	r3, [r6, #0]
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	0699      	lsls	r1, r3, #26
 8004ca6:	bf42      	ittt	mi
 8004ca8:	6833      	ldrmi	r3, [r6, #0]
 8004caa:	3302      	addmi	r3, #2
 8004cac:	6033      	strmi	r3, [r6, #0]
 8004cae:	6825      	ldr	r5, [r4, #0]
 8004cb0:	f015 0506 	ands.w	r5, r5, #6
 8004cb4:	d106      	bne.n	8004cc4 <_printf_common+0x48>
 8004cb6:	f104 0a19 	add.w	sl, r4, #25
 8004cba:	68e3      	ldr	r3, [r4, #12]
 8004cbc:	6832      	ldr	r2, [r6, #0]
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	42ab      	cmp	r3, r5
 8004cc2:	dc2b      	bgt.n	8004d1c <_printf_common+0xa0>
 8004cc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cc8:	6822      	ldr	r2, [r4, #0]
 8004cca:	3b00      	subs	r3, #0
 8004ccc:	bf18      	it	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	0692      	lsls	r2, r2, #26
 8004cd2:	d430      	bmi.n	8004d36 <_printf_common+0xba>
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cdc:	47c8      	blx	r9
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d023      	beq.n	8004d2a <_printf_common+0xae>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	6922      	ldr	r2, [r4, #16]
 8004ce6:	f003 0306 	and.w	r3, r3, #6
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	bf14      	ite	ne
 8004cee:	2500      	movne	r5, #0
 8004cf0:	6833      	ldreq	r3, [r6, #0]
 8004cf2:	f04f 0600 	mov.w	r6, #0
 8004cf6:	bf08      	it	eq
 8004cf8:	68e5      	ldreq	r5, [r4, #12]
 8004cfa:	f104 041a 	add.w	r4, r4, #26
 8004cfe:	bf08      	it	eq
 8004d00:	1aed      	subeq	r5, r5, r3
 8004d02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004d06:	bf08      	it	eq
 8004d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	bfc4      	itt	gt
 8004d10:	1a9b      	subgt	r3, r3, r2
 8004d12:	18ed      	addgt	r5, r5, r3
 8004d14:	42b5      	cmp	r5, r6
 8004d16:	d11a      	bne.n	8004d4e <_printf_common+0xd2>
 8004d18:	2000      	movs	r0, #0
 8004d1a:	e008      	b.n	8004d2e <_printf_common+0xb2>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	4652      	mov	r2, sl
 8004d20:	4641      	mov	r1, r8
 8004d22:	4638      	mov	r0, r7
 8004d24:	47c8      	blx	r9
 8004d26:	3001      	adds	r0, #1
 8004d28:	d103      	bne.n	8004d32 <_printf_common+0xb6>
 8004d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d32:	3501      	adds	r5, #1
 8004d34:	e7c1      	b.n	8004cba <_printf_common+0x3e>
 8004d36:	2030      	movs	r0, #48	@ 0x30
 8004d38:	18e1      	adds	r1, r4, r3
 8004d3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d44:	4422      	add	r2, r4
 8004d46:	3302      	adds	r3, #2
 8004d48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d4c:	e7c2      	b.n	8004cd4 <_printf_common+0x58>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4622      	mov	r2, r4
 8004d52:	4641      	mov	r1, r8
 8004d54:	4638      	mov	r0, r7
 8004d56:	47c8      	blx	r9
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d0e6      	beq.n	8004d2a <_printf_common+0xae>
 8004d5c:	3601      	adds	r6, #1
 8004d5e:	e7d9      	b.n	8004d14 <_printf_common+0x98>

08004d60 <_printf_i>:
 8004d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	7e0f      	ldrb	r7, [r1, #24]
 8004d66:	4691      	mov	r9, r2
 8004d68:	2f78      	cmp	r7, #120	@ 0x78
 8004d6a:	4680      	mov	r8, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	469a      	mov	sl, r3
 8004d70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d76:	d807      	bhi.n	8004d88 <_printf_i+0x28>
 8004d78:	2f62      	cmp	r7, #98	@ 0x62
 8004d7a:	d80a      	bhi.n	8004d92 <_printf_i+0x32>
 8004d7c:	2f00      	cmp	r7, #0
 8004d7e:	f000 80d3 	beq.w	8004f28 <_printf_i+0x1c8>
 8004d82:	2f58      	cmp	r7, #88	@ 0x58
 8004d84:	f000 80ba 	beq.w	8004efc <_printf_i+0x19c>
 8004d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d90:	e03a      	b.n	8004e08 <_printf_i+0xa8>
 8004d92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d96:	2b15      	cmp	r3, #21
 8004d98:	d8f6      	bhi.n	8004d88 <_printf_i+0x28>
 8004d9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004da0 <_printf_i+0x40>)
 8004d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da0:	08004df9 	.word	0x08004df9
 8004da4:	08004e0d 	.word	0x08004e0d
 8004da8:	08004d89 	.word	0x08004d89
 8004dac:	08004d89 	.word	0x08004d89
 8004db0:	08004d89 	.word	0x08004d89
 8004db4:	08004d89 	.word	0x08004d89
 8004db8:	08004e0d 	.word	0x08004e0d
 8004dbc:	08004d89 	.word	0x08004d89
 8004dc0:	08004d89 	.word	0x08004d89
 8004dc4:	08004d89 	.word	0x08004d89
 8004dc8:	08004d89 	.word	0x08004d89
 8004dcc:	08004f0f 	.word	0x08004f0f
 8004dd0:	08004e37 	.word	0x08004e37
 8004dd4:	08004ec9 	.word	0x08004ec9
 8004dd8:	08004d89 	.word	0x08004d89
 8004ddc:	08004d89 	.word	0x08004d89
 8004de0:	08004f31 	.word	0x08004f31
 8004de4:	08004d89 	.word	0x08004d89
 8004de8:	08004e37 	.word	0x08004e37
 8004dec:	08004d89 	.word	0x08004d89
 8004df0:	08004d89 	.word	0x08004d89
 8004df4:	08004ed1 	.word	0x08004ed1
 8004df8:	6833      	ldr	r3, [r6, #0]
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6032      	str	r2, [r6, #0]
 8004e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e09e      	b.n	8004f4a <_printf_i+0x1ea>
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	1d19      	adds	r1, r3, #4
 8004e12:	6031      	str	r1, [r6, #0]
 8004e14:	0606      	lsls	r6, r0, #24
 8004e16:	d501      	bpl.n	8004e1c <_printf_i+0xbc>
 8004e18:	681d      	ldr	r5, [r3, #0]
 8004e1a:	e003      	b.n	8004e24 <_printf_i+0xc4>
 8004e1c:	0645      	lsls	r5, r0, #25
 8004e1e:	d5fb      	bpl.n	8004e18 <_printf_i+0xb8>
 8004e20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e24:	2d00      	cmp	r5, #0
 8004e26:	da03      	bge.n	8004e30 <_printf_i+0xd0>
 8004e28:	232d      	movs	r3, #45	@ 0x2d
 8004e2a:	426d      	negs	r5, r5
 8004e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e30:	230a      	movs	r3, #10
 8004e32:	4859      	ldr	r0, [pc, #356]	@ (8004f98 <_printf_i+0x238>)
 8004e34:	e011      	b.n	8004e5a <_printf_i+0xfa>
 8004e36:	6821      	ldr	r1, [r4, #0]
 8004e38:	6833      	ldr	r3, [r6, #0]
 8004e3a:	0608      	lsls	r0, r1, #24
 8004e3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e40:	d402      	bmi.n	8004e48 <_printf_i+0xe8>
 8004e42:	0649      	lsls	r1, r1, #25
 8004e44:	bf48      	it	mi
 8004e46:	b2ad      	uxthmi	r5, r5
 8004e48:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e4a:	6033      	str	r3, [r6, #0]
 8004e4c:	bf14      	ite	ne
 8004e4e:	230a      	movne	r3, #10
 8004e50:	2308      	moveq	r3, #8
 8004e52:	4851      	ldr	r0, [pc, #324]	@ (8004f98 <_printf_i+0x238>)
 8004e54:	2100      	movs	r1, #0
 8004e56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e5a:	6866      	ldr	r6, [r4, #4]
 8004e5c:	2e00      	cmp	r6, #0
 8004e5e:	bfa8      	it	ge
 8004e60:	6821      	ldrge	r1, [r4, #0]
 8004e62:	60a6      	str	r6, [r4, #8]
 8004e64:	bfa4      	itt	ge
 8004e66:	f021 0104 	bicge.w	r1, r1, #4
 8004e6a:	6021      	strge	r1, [r4, #0]
 8004e6c:	b90d      	cbnz	r5, 8004e72 <_printf_i+0x112>
 8004e6e:	2e00      	cmp	r6, #0
 8004e70:	d04b      	beq.n	8004f0a <_printf_i+0x1aa>
 8004e72:	4616      	mov	r6, r2
 8004e74:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e78:	fb03 5711 	mls	r7, r3, r1, r5
 8004e7c:	5dc7      	ldrb	r7, [r0, r7]
 8004e7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e82:	462f      	mov	r7, r5
 8004e84:	42bb      	cmp	r3, r7
 8004e86:	460d      	mov	r5, r1
 8004e88:	d9f4      	bls.n	8004e74 <_printf_i+0x114>
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d10b      	bne.n	8004ea6 <_printf_i+0x146>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	07df      	lsls	r7, r3, #31
 8004e92:	d508      	bpl.n	8004ea6 <_printf_i+0x146>
 8004e94:	6923      	ldr	r3, [r4, #16]
 8004e96:	6861      	ldr	r1, [r4, #4]
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	bfde      	ittt	le
 8004e9c:	2330      	movle	r3, #48	@ 0x30
 8004e9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ea2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ea6:	1b92      	subs	r2, r2, r6
 8004ea8:	6122      	str	r2, [r4, #16]
 8004eaa:	464b      	mov	r3, r9
 8004eac:	4621      	mov	r1, r4
 8004eae:	4640      	mov	r0, r8
 8004eb0:	f8cd a000 	str.w	sl, [sp]
 8004eb4:	aa03      	add	r2, sp, #12
 8004eb6:	f7ff fee1 	bl	8004c7c <_printf_common>
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d14a      	bne.n	8004f54 <_printf_i+0x1f4>
 8004ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec2:	b004      	add	sp, #16
 8004ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	f043 0320 	orr.w	r3, r3, #32
 8004ece:	6023      	str	r3, [r4, #0]
 8004ed0:	2778      	movs	r7, #120	@ 0x78
 8004ed2:	4832      	ldr	r0, [pc, #200]	@ (8004f9c <_printf_i+0x23c>)
 8004ed4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	6831      	ldr	r1, [r6, #0]
 8004edc:	061f      	lsls	r7, r3, #24
 8004ede:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ee2:	d402      	bmi.n	8004eea <_printf_i+0x18a>
 8004ee4:	065f      	lsls	r7, r3, #25
 8004ee6:	bf48      	it	mi
 8004ee8:	b2ad      	uxthmi	r5, r5
 8004eea:	6031      	str	r1, [r6, #0]
 8004eec:	07d9      	lsls	r1, r3, #31
 8004eee:	bf44      	itt	mi
 8004ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef4:	6023      	strmi	r3, [r4, #0]
 8004ef6:	b11d      	cbz	r5, 8004f00 <_printf_i+0x1a0>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	e7ab      	b.n	8004e54 <_printf_i+0xf4>
 8004efc:	4826      	ldr	r0, [pc, #152]	@ (8004f98 <_printf_i+0x238>)
 8004efe:	e7e9      	b.n	8004ed4 <_printf_i+0x174>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	e7f6      	b.n	8004ef8 <_printf_i+0x198>
 8004f0a:	4616      	mov	r6, r2
 8004f0c:	e7bd      	b.n	8004e8a <_printf_i+0x12a>
 8004f0e:	6833      	ldr	r3, [r6, #0]
 8004f10:	6825      	ldr	r5, [r4, #0]
 8004f12:	1d18      	adds	r0, r3, #4
 8004f14:	6961      	ldr	r1, [r4, #20]
 8004f16:	6030      	str	r0, [r6, #0]
 8004f18:	062e      	lsls	r6, r5, #24
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	d501      	bpl.n	8004f22 <_printf_i+0x1c2>
 8004f1e:	6019      	str	r1, [r3, #0]
 8004f20:	e002      	b.n	8004f28 <_printf_i+0x1c8>
 8004f22:	0668      	lsls	r0, r5, #25
 8004f24:	d5fb      	bpl.n	8004f1e <_printf_i+0x1be>
 8004f26:	8019      	strh	r1, [r3, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4616      	mov	r6, r2
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	e7bc      	b.n	8004eaa <_printf_i+0x14a>
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	2100      	movs	r1, #0
 8004f34:	1d1a      	adds	r2, r3, #4
 8004f36:	6032      	str	r2, [r6, #0]
 8004f38:	681e      	ldr	r6, [r3, #0]
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f001 f983 	bl	8006248 <memchr>
 8004f42:	b108      	cbz	r0, 8004f48 <_printf_i+0x1e8>
 8004f44:	1b80      	subs	r0, r0, r6
 8004f46:	6060      	str	r0, [r4, #4]
 8004f48:	6863      	ldr	r3, [r4, #4]
 8004f4a:	6123      	str	r3, [r4, #16]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f52:	e7aa      	b.n	8004eaa <_printf_i+0x14a>
 8004f54:	4632      	mov	r2, r6
 8004f56:	4649      	mov	r1, r9
 8004f58:	4640      	mov	r0, r8
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	47d0      	blx	sl
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d0ad      	beq.n	8004ebe <_printf_i+0x15e>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	079b      	lsls	r3, r3, #30
 8004f66:	d413      	bmi.n	8004f90 <_printf_i+0x230>
 8004f68:	68e0      	ldr	r0, [r4, #12]
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	4298      	cmp	r0, r3
 8004f6e:	bfb8      	it	lt
 8004f70:	4618      	movlt	r0, r3
 8004f72:	e7a6      	b.n	8004ec2 <_printf_i+0x162>
 8004f74:	2301      	movs	r3, #1
 8004f76:	4632      	mov	r2, r6
 8004f78:	4649      	mov	r1, r9
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	47d0      	blx	sl
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d09d      	beq.n	8004ebe <_printf_i+0x15e>
 8004f82:	3501      	adds	r5, #1
 8004f84:	68e3      	ldr	r3, [r4, #12]
 8004f86:	9903      	ldr	r1, [sp, #12]
 8004f88:	1a5b      	subs	r3, r3, r1
 8004f8a:	42ab      	cmp	r3, r5
 8004f8c:	dcf2      	bgt.n	8004f74 <_printf_i+0x214>
 8004f8e:	e7eb      	b.n	8004f68 <_printf_i+0x208>
 8004f90:	2500      	movs	r5, #0
 8004f92:	f104 0619 	add.w	r6, r4, #25
 8004f96:	e7f5      	b.n	8004f84 <_printf_i+0x224>
 8004f98:	08009e1f 	.word	0x08009e1f
 8004f9c:	08009e30 	.word	0x08009e30

08004fa0 <_scanf_float>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	b087      	sub	sp, #28
 8004fa6:	9303      	str	r3, [sp, #12]
 8004fa8:	688b      	ldr	r3, [r1, #8]
 8004faa:	4617      	mov	r7, r2
 8004fac:	1e5a      	subs	r2, r3, #1
 8004fae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004fb2:	bf82      	ittt	hi
 8004fb4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004fb8:	eb03 0b05 	addhi.w	fp, r3, r5
 8004fbc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004fc0:	460a      	mov	r2, r1
 8004fc2:	f04f 0500 	mov.w	r5, #0
 8004fc6:	bf88      	it	hi
 8004fc8:	608b      	strhi	r3, [r1, #8]
 8004fca:	680b      	ldr	r3, [r1, #0]
 8004fcc:	4680      	mov	r8, r0
 8004fce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004fd2:	f842 3b1c 	str.w	r3, [r2], #28
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	bf98      	it	ls
 8004fda:	f04f 0b00 	movls.w	fp, #0
 8004fde:	4616      	mov	r6, r2
 8004fe0:	46aa      	mov	sl, r5
 8004fe2:	46a9      	mov	r9, r5
 8004fe4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fe8:	9201      	str	r2, [sp, #4]
 8004fea:	9502      	str	r5, [sp, #8]
 8004fec:	68a2      	ldr	r2, [r4, #8]
 8004fee:	b152      	cbz	r2, 8005006 <_scanf_float+0x66>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ff6:	d865      	bhi.n	80050c4 <_scanf_float+0x124>
 8004ff8:	2b40      	cmp	r3, #64	@ 0x40
 8004ffa:	d83d      	bhi.n	8005078 <_scanf_float+0xd8>
 8004ffc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005000:	b2c8      	uxtb	r0, r1
 8005002:	280e      	cmp	r0, #14
 8005004:	d93b      	bls.n	800507e <_scanf_float+0xde>
 8005006:	f1b9 0f00 	cmp.w	r9, #0
 800500a:	d003      	beq.n	8005014 <_scanf_float+0x74>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005012:	6023      	str	r3, [r4, #0]
 8005014:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005018:	f1ba 0f01 	cmp.w	sl, #1
 800501c:	f200 8118 	bhi.w	8005250 <_scanf_float+0x2b0>
 8005020:	9b01      	ldr	r3, [sp, #4]
 8005022:	429e      	cmp	r6, r3
 8005024:	f200 8109 	bhi.w	800523a <_scanf_float+0x29a>
 8005028:	2001      	movs	r0, #1
 800502a:	b007      	add	sp, #28
 800502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005030:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005034:	2a0d      	cmp	r2, #13
 8005036:	d8e6      	bhi.n	8005006 <_scanf_float+0x66>
 8005038:	a101      	add	r1, pc, #4	@ (adr r1, 8005040 <_scanf_float+0xa0>)
 800503a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005187 	.word	0x08005187
 8005044:	08005007 	.word	0x08005007
 8005048:	08005007 	.word	0x08005007
 800504c:	08005007 	.word	0x08005007
 8005050:	080051e7 	.word	0x080051e7
 8005054:	080051bf 	.word	0x080051bf
 8005058:	08005007 	.word	0x08005007
 800505c:	08005007 	.word	0x08005007
 8005060:	08005195 	.word	0x08005195
 8005064:	08005007 	.word	0x08005007
 8005068:	08005007 	.word	0x08005007
 800506c:	08005007 	.word	0x08005007
 8005070:	08005007 	.word	0x08005007
 8005074:	0800514d 	.word	0x0800514d
 8005078:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800507c:	e7da      	b.n	8005034 <_scanf_float+0x94>
 800507e:	290e      	cmp	r1, #14
 8005080:	d8c1      	bhi.n	8005006 <_scanf_float+0x66>
 8005082:	a001      	add	r0, pc, #4	@ (adr r0, 8005088 <_scanf_float+0xe8>)
 8005084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005088:	0800513d 	.word	0x0800513d
 800508c:	08005007 	.word	0x08005007
 8005090:	0800513d 	.word	0x0800513d
 8005094:	080051d3 	.word	0x080051d3
 8005098:	08005007 	.word	0x08005007
 800509c:	080050e5 	.word	0x080050e5
 80050a0:	08005123 	.word	0x08005123
 80050a4:	08005123 	.word	0x08005123
 80050a8:	08005123 	.word	0x08005123
 80050ac:	08005123 	.word	0x08005123
 80050b0:	08005123 	.word	0x08005123
 80050b4:	08005123 	.word	0x08005123
 80050b8:	08005123 	.word	0x08005123
 80050bc:	08005123 	.word	0x08005123
 80050c0:	08005123 	.word	0x08005123
 80050c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80050c6:	d809      	bhi.n	80050dc <_scanf_float+0x13c>
 80050c8:	2b60      	cmp	r3, #96	@ 0x60
 80050ca:	d8b1      	bhi.n	8005030 <_scanf_float+0x90>
 80050cc:	2b54      	cmp	r3, #84	@ 0x54
 80050ce:	d07b      	beq.n	80051c8 <_scanf_float+0x228>
 80050d0:	2b59      	cmp	r3, #89	@ 0x59
 80050d2:	d198      	bne.n	8005006 <_scanf_float+0x66>
 80050d4:	2d07      	cmp	r5, #7
 80050d6:	d196      	bne.n	8005006 <_scanf_float+0x66>
 80050d8:	2508      	movs	r5, #8
 80050da:	e02c      	b.n	8005136 <_scanf_float+0x196>
 80050dc:	2b74      	cmp	r3, #116	@ 0x74
 80050de:	d073      	beq.n	80051c8 <_scanf_float+0x228>
 80050e0:	2b79      	cmp	r3, #121	@ 0x79
 80050e2:	e7f6      	b.n	80050d2 <_scanf_float+0x132>
 80050e4:	6821      	ldr	r1, [r4, #0]
 80050e6:	05c8      	lsls	r0, r1, #23
 80050e8:	d51b      	bpl.n	8005122 <_scanf_float+0x182>
 80050ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80050ee:	6021      	str	r1, [r4, #0]
 80050f0:	f109 0901 	add.w	r9, r9, #1
 80050f4:	f1bb 0f00 	cmp.w	fp, #0
 80050f8:	d003      	beq.n	8005102 <_scanf_float+0x162>
 80050fa:	3201      	adds	r2, #1
 80050fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005100:	60a2      	str	r2, [r4, #8]
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	3b01      	subs	r3, #1
 8005106:	60a3      	str	r3, [r4, #8]
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	3301      	adds	r3, #1
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3b01      	subs	r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	f340 8087 	ble.w	8005228 <_scanf_float+0x288>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	3301      	adds	r3, #1
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	e764      	b.n	8004fec <_scanf_float+0x4c>
 8005122:	eb1a 0105 	adds.w	r1, sl, r5
 8005126:	f47f af6e 	bne.w	8005006 <_scanf_float+0x66>
 800512a:	460d      	mov	r5, r1
 800512c:	468a      	mov	sl, r1
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005134:	6022      	str	r2, [r4, #0]
 8005136:	f806 3b01 	strb.w	r3, [r6], #1
 800513a:	e7e2      	b.n	8005102 <_scanf_float+0x162>
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	0610      	lsls	r0, r2, #24
 8005140:	f57f af61 	bpl.w	8005006 <_scanf_float+0x66>
 8005144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005148:	6022      	str	r2, [r4, #0]
 800514a:	e7f4      	b.n	8005136 <_scanf_float+0x196>
 800514c:	f1ba 0f00 	cmp.w	sl, #0
 8005150:	d10e      	bne.n	8005170 <_scanf_float+0x1d0>
 8005152:	f1b9 0f00 	cmp.w	r9, #0
 8005156:	d10e      	bne.n	8005176 <_scanf_float+0x1d6>
 8005158:	6822      	ldr	r2, [r4, #0]
 800515a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800515e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005162:	d108      	bne.n	8005176 <_scanf_float+0x1d6>
 8005164:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005168:	f04f 0a01 	mov.w	sl, #1
 800516c:	6022      	str	r2, [r4, #0]
 800516e:	e7e2      	b.n	8005136 <_scanf_float+0x196>
 8005170:	f1ba 0f02 	cmp.w	sl, #2
 8005174:	d055      	beq.n	8005222 <_scanf_float+0x282>
 8005176:	2d01      	cmp	r5, #1
 8005178:	d002      	beq.n	8005180 <_scanf_float+0x1e0>
 800517a:	2d04      	cmp	r5, #4
 800517c:	f47f af43 	bne.w	8005006 <_scanf_float+0x66>
 8005180:	3501      	adds	r5, #1
 8005182:	b2ed      	uxtb	r5, r5
 8005184:	e7d7      	b.n	8005136 <_scanf_float+0x196>
 8005186:	f1ba 0f01 	cmp.w	sl, #1
 800518a:	f47f af3c 	bne.w	8005006 <_scanf_float+0x66>
 800518e:	f04f 0a02 	mov.w	sl, #2
 8005192:	e7d0      	b.n	8005136 <_scanf_float+0x196>
 8005194:	b97d      	cbnz	r5, 80051b6 <_scanf_float+0x216>
 8005196:	f1b9 0f00 	cmp.w	r9, #0
 800519a:	f47f af37 	bne.w	800500c <_scanf_float+0x6c>
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80051a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80051a8:	f040 8103 	bne.w	80053b2 <_scanf_float+0x412>
 80051ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80051b0:	2501      	movs	r5, #1
 80051b2:	6022      	str	r2, [r4, #0]
 80051b4:	e7bf      	b.n	8005136 <_scanf_float+0x196>
 80051b6:	2d03      	cmp	r5, #3
 80051b8:	d0e2      	beq.n	8005180 <_scanf_float+0x1e0>
 80051ba:	2d05      	cmp	r5, #5
 80051bc:	e7de      	b.n	800517c <_scanf_float+0x1dc>
 80051be:	2d02      	cmp	r5, #2
 80051c0:	f47f af21 	bne.w	8005006 <_scanf_float+0x66>
 80051c4:	2503      	movs	r5, #3
 80051c6:	e7b6      	b.n	8005136 <_scanf_float+0x196>
 80051c8:	2d06      	cmp	r5, #6
 80051ca:	f47f af1c 	bne.w	8005006 <_scanf_float+0x66>
 80051ce:	2507      	movs	r5, #7
 80051d0:	e7b1      	b.n	8005136 <_scanf_float+0x196>
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	0591      	lsls	r1, r2, #22
 80051d6:	f57f af16 	bpl.w	8005006 <_scanf_float+0x66>
 80051da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80051de:	6022      	str	r2, [r4, #0]
 80051e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80051e4:	e7a7      	b.n	8005136 <_scanf_float+0x196>
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80051ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80051f0:	d006      	beq.n	8005200 <_scanf_float+0x260>
 80051f2:	0550      	lsls	r0, r2, #21
 80051f4:	f57f af07 	bpl.w	8005006 <_scanf_float+0x66>
 80051f8:	f1b9 0f00 	cmp.w	r9, #0
 80051fc:	f000 80d9 	beq.w	80053b2 <_scanf_float+0x412>
 8005200:	0591      	lsls	r1, r2, #22
 8005202:	bf58      	it	pl
 8005204:	9902      	ldrpl	r1, [sp, #8]
 8005206:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800520a:	bf58      	it	pl
 800520c:	eba9 0101 	subpl.w	r1, r9, r1
 8005210:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005214:	f04f 0900 	mov.w	r9, #0
 8005218:	bf58      	it	pl
 800521a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800521e:	6022      	str	r2, [r4, #0]
 8005220:	e789      	b.n	8005136 <_scanf_float+0x196>
 8005222:	f04f 0a03 	mov.w	sl, #3
 8005226:	e786      	b.n	8005136 <_scanf_float+0x196>
 8005228:	4639      	mov	r1, r7
 800522a:	4640      	mov	r0, r8
 800522c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005230:	4798      	blx	r3
 8005232:	2800      	cmp	r0, #0
 8005234:	f43f aeda 	beq.w	8004fec <_scanf_float+0x4c>
 8005238:	e6e5      	b.n	8005006 <_scanf_float+0x66>
 800523a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800523e:	463a      	mov	r2, r7
 8005240:	4640      	mov	r0, r8
 8005242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005246:	4798      	blx	r3
 8005248:	6923      	ldr	r3, [r4, #16]
 800524a:	3b01      	subs	r3, #1
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	e6e7      	b.n	8005020 <_scanf_float+0x80>
 8005250:	1e6b      	subs	r3, r5, #1
 8005252:	2b06      	cmp	r3, #6
 8005254:	d824      	bhi.n	80052a0 <_scanf_float+0x300>
 8005256:	2d02      	cmp	r5, #2
 8005258:	d836      	bhi.n	80052c8 <_scanf_float+0x328>
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	429e      	cmp	r6, r3
 800525e:	f67f aee3 	bls.w	8005028 <_scanf_float+0x88>
 8005262:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005266:	463a      	mov	r2, r7
 8005268:	4640      	mov	r0, r8
 800526a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800526e:	4798      	blx	r3
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	3b01      	subs	r3, #1
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	e7f0      	b.n	800525a <_scanf_float+0x2ba>
 8005278:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800527c:	463a      	mov	r2, r7
 800527e:	4640      	mov	r0, r8
 8005280:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005284:	4798      	blx	r3
 8005286:	6923      	ldr	r3, [r4, #16]
 8005288:	3b01      	subs	r3, #1
 800528a:	6123      	str	r3, [r4, #16]
 800528c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005290:	fa5f fa8a 	uxtb.w	sl, sl
 8005294:	f1ba 0f02 	cmp.w	sl, #2
 8005298:	d1ee      	bne.n	8005278 <_scanf_float+0x2d8>
 800529a:	3d03      	subs	r5, #3
 800529c:	b2ed      	uxtb	r5, r5
 800529e:	1b76      	subs	r6, r6, r5
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	05da      	lsls	r2, r3, #23
 80052a4:	d530      	bpl.n	8005308 <_scanf_float+0x368>
 80052a6:	055b      	lsls	r3, r3, #21
 80052a8:	d511      	bpl.n	80052ce <_scanf_float+0x32e>
 80052aa:	9b01      	ldr	r3, [sp, #4]
 80052ac:	429e      	cmp	r6, r3
 80052ae:	f67f aebb 	bls.w	8005028 <_scanf_float+0x88>
 80052b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052b6:	463a      	mov	r2, r7
 80052b8:	4640      	mov	r0, r8
 80052ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052be:	4798      	blx	r3
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	e7f0      	b.n	80052aa <_scanf_float+0x30a>
 80052c8:	46aa      	mov	sl, r5
 80052ca:	46b3      	mov	fp, r6
 80052cc:	e7de      	b.n	800528c <_scanf_float+0x2ec>
 80052ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	2965      	cmp	r1, #101	@ 0x65
 80052d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80052da:	f106 35ff 	add.w	r5, r6, #4294967295
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	d00c      	beq.n	80052fc <_scanf_float+0x35c>
 80052e2:	2945      	cmp	r1, #69	@ 0x45
 80052e4:	d00a      	beq.n	80052fc <_scanf_float+0x35c>
 80052e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052ea:	463a      	mov	r2, r7
 80052ec:	4640      	mov	r0, r8
 80052ee:	4798      	blx	r3
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	1eb5      	subs	r5, r6, #2
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	463a      	mov	r2, r7
 80052fe:	4640      	mov	r0, r8
 8005300:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005304:	4798      	blx	r3
 8005306:	462e      	mov	r6, r5
 8005308:	6822      	ldr	r2, [r4, #0]
 800530a:	f012 0210 	ands.w	r2, r2, #16
 800530e:	d001      	beq.n	8005314 <_scanf_float+0x374>
 8005310:	2000      	movs	r0, #0
 8005312:	e68a      	b.n	800502a <_scanf_float+0x8a>
 8005314:	7032      	strb	r2, [r6, #0]
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005320:	d11c      	bne.n	800535c <_scanf_float+0x3bc>
 8005322:	9b02      	ldr	r3, [sp, #8]
 8005324:	454b      	cmp	r3, r9
 8005326:	eba3 0209 	sub.w	r2, r3, r9
 800532a:	d123      	bne.n	8005374 <_scanf_float+0x3d4>
 800532c:	2200      	movs	r2, #0
 800532e:	4640      	mov	r0, r8
 8005330:	9901      	ldr	r1, [sp, #4]
 8005332:	f003 f9b9 	bl	80086a8 <_strtod_r>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	6825      	ldr	r5, [r4, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f015 0f02 	tst.w	r5, #2
 8005340:	4606      	mov	r6, r0
 8005342:	460f      	mov	r7, r1
 8005344:	f103 0204 	add.w	r2, r3, #4
 8005348:	d01f      	beq.n	800538a <_scanf_float+0x3ea>
 800534a:	9903      	ldr	r1, [sp, #12]
 800534c:	600a      	str	r2, [r1, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	e9c3 6700 	strd	r6, r7, [r3]
 8005354:	68e3      	ldr	r3, [r4, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60e3      	str	r3, [r4, #12]
 800535a:	e7d9      	b.n	8005310 <_scanf_float+0x370>
 800535c:	9b04      	ldr	r3, [sp, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0e4      	beq.n	800532c <_scanf_float+0x38c>
 8005362:	9905      	ldr	r1, [sp, #20]
 8005364:	230a      	movs	r3, #10
 8005366:	4640      	mov	r0, r8
 8005368:	3101      	adds	r1, #1
 800536a:	f7ff f9b1 	bl	80046d0 <_strtol_r>
 800536e:	9b04      	ldr	r3, [sp, #16]
 8005370:	9e05      	ldr	r6, [sp, #20]
 8005372:	1ac2      	subs	r2, r0, r3
 8005374:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005378:	429e      	cmp	r6, r3
 800537a:	bf28      	it	cs
 800537c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005380:	4630      	mov	r0, r6
 8005382:	490d      	ldr	r1, [pc, #52]	@ (80053b8 <_scanf_float+0x418>)
 8005384:	f000 fcc0 	bl	8005d08 <siprintf>
 8005388:	e7d0      	b.n	800532c <_scanf_float+0x38c>
 800538a:	076d      	lsls	r5, r5, #29
 800538c:	d4dd      	bmi.n	800534a <_scanf_float+0x3aa>
 800538e:	9d03      	ldr	r5, [sp, #12]
 8005390:	602a      	str	r2, [r5, #0]
 8005392:	681d      	ldr	r5, [r3, #0]
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	f7fb fc04 	bl	8000ba4 <__aeabi_dcmpun>
 800539c:	b120      	cbz	r0, 80053a8 <_scanf_float+0x408>
 800539e:	4807      	ldr	r0, [pc, #28]	@ (80053bc <_scanf_float+0x41c>)
 80053a0:	f000 ff6e 	bl	8006280 <nanf>
 80053a4:	6028      	str	r0, [r5, #0]
 80053a6:	e7d5      	b.n	8005354 <_scanf_float+0x3b4>
 80053a8:	4630      	mov	r0, r6
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7fb fc58 	bl	8000c60 <__aeabi_d2f>
 80053b0:	e7f8      	b.n	80053a4 <_scanf_float+0x404>
 80053b2:	f04f 0900 	mov.w	r9, #0
 80053b6:	e62d      	b.n	8005014 <_scanf_float+0x74>
 80053b8:	08009e41 	.word	0x08009e41
 80053bc:	08009ef2 	.word	0x08009ef2

080053c0 <_fclose_r>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4605      	mov	r5, r0
 80053c4:	460c      	mov	r4, r1
 80053c6:	b1b1      	cbz	r1, 80053f6 <_fclose_r+0x36>
 80053c8:	b118      	cbz	r0, 80053d2 <_fclose_r+0x12>
 80053ca:	6a03      	ldr	r3, [r0, #32]
 80053cc:	b90b      	cbnz	r3, 80053d2 <_fclose_r+0x12>
 80053ce:	f000 fa6f 	bl	80058b0 <__sinit>
 80053d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053d4:	07de      	lsls	r6, r3, #31
 80053d6:	d405      	bmi.n	80053e4 <_fclose_r+0x24>
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	0598      	lsls	r0, r3, #22
 80053dc:	d402      	bmi.n	80053e4 <_fclose_r+0x24>
 80053de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053e0:	f000 ff30 	bl	8006244 <__retarget_lock_acquire_recursive>
 80053e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e8:	b943      	cbnz	r3, 80053fc <_fclose_r+0x3c>
 80053ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053ec:	07d9      	lsls	r1, r3, #31
 80053ee:	d402      	bmi.n	80053f6 <_fclose_r+0x36>
 80053f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053f2:	f000 ff28 	bl	8006246 <__retarget_lock_release_recursive>
 80053f6:	2600      	movs	r6, #0
 80053f8:	4630      	mov	r0, r6
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	4621      	mov	r1, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f860 	bl	80054c4 <__sflush_r>
 8005404:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005406:	4606      	mov	r6, r0
 8005408:	b133      	cbz	r3, 8005418 <_fclose_r+0x58>
 800540a:	4628      	mov	r0, r5
 800540c:	6a21      	ldr	r1, [r4, #32]
 800540e:	4798      	blx	r3
 8005410:	2800      	cmp	r0, #0
 8005412:	bfb8      	it	lt
 8005414:	f04f 36ff 	movlt.w	r6, #4294967295
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	061a      	lsls	r2, r3, #24
 800541c:	d503      	bpl.n	8005426 <_fclose_r+0x66>
 800541e:	4628      	mov	r0, r5
 8005420:	6921      	ldr	r1, [r4, #16]
 8005422:	f001 fda1 	bl	8006f68 <_free_r>
 8005426:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005428:	b141      	cbz	r1, 800543c <_fclose_r+0x7c>
 800542a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800542e:	4299      	cmp	r1, r3
 8005430:	d002      	beq.n	8005438 <_fclose_r+0x78>
 8005432:	4628      	mov	r0, r5
 8005434:	f001 fd98 	bl	8006f68 <_free_r>
 8005438:	2300      	movs	r3, #0
 800543a:	6363      	str	r3, [r4, #52]	@ 0x34
 800543c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800543e:	b121      	cbz	r1, 800544a <_fclose_r+0x8a>
 8005440:	4628      	mov	r0, r5
 8005442:	f001 fd91 	bl	8006f68 <_free_r>
 8005446:	2300      	movs	r3, #0
 8005448:	64a3      	str	r3, [r4, #72]	@ 0x48
 800544a:	f000 f9d3 	bl	80057f4 <__sfp_lock_acquire>
 800544e:	2300      	movs	r3, #0
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005454:	07db      	lsls	r3, r3, #31
 8005456:	d402      	bmi.n	800545e <_fclose_r+0x9e>
 8005458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800545a:	f000 fef4 	bl	8006246 <__retarget_lock_release_recursive>
 800545e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005460:	f000 feef 	bl	8006242 <__retarget_lock_close_recursive>
 8005464:	f000 f9cc 	bl	8005800 <__sfp_lock_release>
 8005468:	e7c6      	b.n	80053f8 <_fclose_r+0x38>
	...

0800546c <fclose>:
 800546c:	4b02      	ldr	r3, [pc, #8]	@ (8005478 <fclose+0xc>)
 800546e:	4601      	mov	r1, r0
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	f7ff bfa5 	b.w	80053c0 <_fclose_r>
 8005476:	bf00      	nop
 8005478:	20000018 	.word	0x20000018

0800547c <feof>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <feof+0x44>)
 8005480:	4604      	mov	r4, r0
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	b118      	cbz	r0, 800548e <feof+0x12>
 8005486:	6a03      	ldr	r3, [r0, #32]
 8005488:	b90b      	cbnz	r3, 800548e <feof+0x12>
 800548a:	f000 fa11 	bl	80058b0 <__sinit>
 800548e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005490:	07d8      	lsls	r0, r3, #31
 8005492:	d405      	bmi.n	80054a0 <feof+0x24>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	0599      	lsls	r1, r3, #22
 8005498:	d402      	bmi.n	80054a0 <feof+0x24>
 800549a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800549c:	f000 fed2 	bl	8006244 <__retarget_lock_acquire_recursive>
 80054a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054a2:	89a5      	ldrh	r5, [r4, #12]
 80054a4:	07d2      	lsls	r2, r2, #31
 80054a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054aa:	f3c5 1540 	ubfx	r5, r5, #5, #1
 80054ae:	d404      	bmi.n	80054ba <feof+0x3e>
 80054b0:	059b      	lsls	r3, r3, #22
 80054b2:	d402      	bmi.n	80054ba <feof+0x3e>
 80054b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054b6:	f000 fec6 	bl	8006246 <__retarget_lock_release_recursive>
 80054ba:	4628      	mov	r0, r5
 80054bc:	bd38      	pop	{r3, r4, r5, pc}
 80054be:	bf00      	nop
 80054c0:	20000018 	.word	0x20000018

080054c4 <__sflush_r>:
 80054c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	0716      	lsls	r6, r2, #28
 80054cc:	4605      	mov	r5, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	d454      	bmi.n	800557c <__sflush_r+0xb8>
 80054d2:	684b      	ldr	r3, [r1, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	dc02      	bgt.n	80054de <__sflush_r+0x1a>
 80054d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	dd48      	ble.n	8005570 <__sflush_r+0xac>
 80054de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	d045      	beq.n	8005570 <__sflush_r+0xac>
 80054e4:	2300      	movs	r3, #0
 80054e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80054ea:	682f      	ldr	r7, [r5, #0]
 80054ec:	6a21      	ldr	r1, [r4, #32]
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	d030      	beq.n	8005554 <__sflush_r+0x90>
 80054f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	0759      	lsls	r1, r3, #29
 80054f8:	d505      	bpl.n	8005506 <__sflush_r+0x42>
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	1ad2      	subs	r2, r2, r3
 80054fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005500:	b10b      	cbz	r3, 8005506 <__sflush_r+0x42>
 8005502:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005504:	1ad2      	subs	r2, r2, r3
 8005506:	2300      	movs	r3, #0
 8005508:	4628      	mov	r0, r5
 800550a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800550c:	6a21      	ldr	r1, [r4, #32]
 800550e:	47b0      	blx	r6
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	d106      	bne.n	8005524 <__sflush_r+0x60>
 8005516:	6829      	ldr	r1, [r5, #0]
 8005518:	291d      	cmp	r1, #29
 800551a:	d82b      	bhi.n	8005574 <__sflush_r+0xb0>
 800551c:	4a28      	ldr	r2, [pc, #160]	@ (80055c0 <__sflush_r+0xfc>)
 800551e:	410a      	asrs	r2, r1
 8005520:	07d6      	lsls	r6, r2, #31
 8005522:	d427      	bmi.n	8005574 <__sflush_r+0xb0>
 8005524:	2200      	movs	r2, #0
 8005526:	6062      	str	r2, [r4, #4]
 8005528:	6922      	ldr	r2, [r4, #16]
 800552a:	04d9      	lsls	r1, r3, #19
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	d504      	bpl.n	800553a <__sflush_r+0x76>
 8005530:	1c42      	adds	r2, r0, #1
 8005532:	d101      	bne.n	8005538 <__sflush_r+0x74>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b903      	cbnz	r3, 800553a <__sflush_r+0x76>
 8005538:	6560      	str	r0, [r4, #84]	@ 0x54
 800553a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800553c:	602f      	str	r7, [r5, #0]
 800553e:	b1b9      	cbz	r1, 8005570 <__sflush_r+0xac>
 8005540:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005544:	4299      	cmp	r1, r3
 8005546:	d002      	beq.n	800554e <__sflush_r+0x8a>
 8005548:	4628      	mov	r0, r5
 800554a:	f001 fd0d 	bl	8006f68 <_free_r>
 800554e:	2300      	movs	r3, #0
 8005550:	6363      	str	r3, [r4, #52]	@ 0x34
 8005552:	e00d      	b.n	8005570 <__sflush_r+0xac>
 8005554:	2301      	movs	r3, #1
 8005556:	4628      	mov	r0, r5
 8005558:	47b0      	blx	r6
 800555a:	4602      	mov	r2, r0
 800555c:	1c50      	adds	r0, r2, #1
 800555e:	d1c9      	bne.n	80054f4 <__sflush_r+0x30>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0c6      	beq.n	80054f4 <__sflush_r+0x30>
 8005566:	2b1d      	cmp	r3, #29
 8005568:	d001      	beq.n	800556e <__sflush_r+0xaa>
 800556a:	2b16      	cmp	r3, #22
 800556c:	d11d      	bne.n	80055aa <__sflush_r+0xe6>
 800556e:	602f      	str	r7, [r5, #0]
 8005570:	2000      	movs	r0, #0
 8005572:	e021      	b.n	80055b8 <__sflush_r+0xf4>
 8005574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005578:	b21b      	sxth	r3, r3
 800557a:	e01a      	b.n	80055b2 <__sflush_r+0xee>
 800557c:	690f      	ldr	r7, [r1, #16]
 800557e:	2f00      	cmp	r7, #0
 8005580:	d0f6      	beq.n	8005570 <__sflush_r+0xac>
 8005582:	0793      	lsls	r3, r2, #30
 8005584:	bf18      	it	ne
 8005586:	2300      	movne	r3, #0
 8005588:	680e      	ldr	r6, [r1, #0]
 800558a:	bf08      	it	eq
 800558c:	694b      	ldreq	r3, [r1, #20]
 800558e:	1bf6      	subs	r6, r6, r7
 8005590:	600f      	str	r7, [r1, #0]
 8005592:	608b      	str	r3, [r1, #8]
 8005594:	2e00      	cmp	r6, #0
 8005596:	ddeb      	ble.n	8005570 <__sflush_r+0xac>
 8005598:	4633      	mov	r3, r6
 800559a:	463a      	mov	r2, r7
 800559c:	4628      	mov	r0, r5
 800559e:	6a21      	ldr	r1, [r4, #32]
 80055a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80055a4:	47e0      	blx	ip
 80055a6:	2800      	cmp	r0, #0
 80055a8:	dc07      	bgt.n	80055ba <__sflush_r+0xf6>
 80055aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055b2:	f04f 30ff 	mov.w	r0, #4294967295
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ba:	4407      	add	r7, r0
 80055bc:	1a36      	subs	r6, r6, r0
 80055be:	e7e9      	b.n	8005594 <__sflush_r+0xd0>
 80055c0:	dfbffffe 	.word	0xdfbffffe

080055c4 <_fflush_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	690b      	ldr	r3, [r1, #16]
 80055c8:	4605      	mov	r5, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	b913      	cbnz	r3, 80055d4 <_fflush_r+0x10>
 80055ce:	2500      	movs	r5, #0
 80055d0:	4628      	mov	r0, r5
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	b118      	cbz	r0, 80055de <_fflush_r+0x1a>
 80055d6:	6a03      	ldr	r3, [r0, #32]
 80055d8:	b90b      	cbnz	r3, 80055de <_fflush_r+0x1a>
 80055da:	f000 f969 	bl	80058b0 <__sinit>
 80055de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f3      	beq.n	80055ce <_fflush_r+0xa>
 80055e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055e8:	07d0      	lsls	r0, r2, #31
 80055ea:	d404      	bmi.n	80055f6 <_fflush_r+0x32>
 80055ec:	0599      	lsls	r1, r3, #22
 80055ee:	d402      	bmi.n	80055f6 <_fflush_r+0x32>
 80055f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055f2:	f000 fe27 	bl	8006244 <__retarget_lock_acquire_recursive>
 80055f6:	4628      	mov	r0, r5
 80055f8:	4621      	mov	r1, r4
 80055fa:	f7ff ff63 	bl	80054c4 <__sflush_r>
 80055fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005600:	4605      	mov	r5, r0
 8005602:	07da      	lsls	r2, r3, #31
 8005604:	d4e4      	bmi.n	80055d0 <_fflush_r+0xc>
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	059b      	lsls	r3, r3, #22
 800560a:	d4e1      	bmi.n	80055d0 <_fflush_r+0xc>
 800560c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800560e:	f000 fe1a 	bl	8006246 <__retarget_lock_release_recursive>
 8005612:	e7dd      	b.n	80055d0 <_fflush_r+0xc>

08005614 <_fgets_r>:
 8005614:	2a01      	cmp	r2, #1
 8005616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800561a:	4681      	mov	r9, r0
 800561c:	460e      	mov	r6, r1
 800561e:	4615      	mov	r5, r2
 8005620:	461c      	mov	r4, r3
 8005622:	dd21      	ble.n	8005668 <_fgets_r+0x54>
 8005624:	b118      	cbz	r0, 800562e <_fgets_r+0x1a>
 8005626:	6a03      	ldr	r3, [r0, #32]
 8005628:	b90b      	cbnz	r3, 800562e <_fgets_r+0x1a>
 800562a:	f000 f941 	bl	80058b0 <__sinit>
 800562e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005630:	07db      	lsls	r3, r3, #31
 8005632:	d405      	bmi.n	8005640 <_fgets_r+0x2c>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	059f      	lsls	r7, r3, #22
 8005638:	d402      	bmi.n	8005640 <_fgets_r+0x2c>
 800563a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800563c:	f000 fe02 	bl	8006244 <__retarget_lock_acquire_recursive>
 8005640:	4637      	mov	r7, r6
 8005642:	3d01      	subs	r5, #1
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	b99b      	cbnz	r3, 8005670 <_fgets_r+0x5c>
 8005648:	4621      	mov	r1, r4
 800564a:	4648      	mov	r0, r9
 800564c:	f000 fa9a 	bl	8005b84 <__srefill_r>
 8005650:	b168      	cbz	r0, 800566e <_fgets_r+0x5a>
 8005652:	42b7      	cmp	r7, r6
 8005654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005656:	d139      	bne.n	80056cc <_fgets_r+0xb8>
 8005658:	07d8      	lsls	r0, r3, #31
 800565a:	d405      	bmi.n	8005668 <_fgets_r+0x54>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	0599      	lsls	r1, r3, #22
 8005660:	d402      	bmi.n	8005668 <_fgets_r+0x54>
 8005662:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005664:	f000 fdef 	bl	8006246 <__retarget_lock_release_recursive>
 8005668:	2000      	movs	r0, #0
 800566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	42ab      	cmp	r3, r5
 8005672:	bf28      	it	cs
 8005674:	462b      	movcs	r3, r5
 8005676:	f8d4 a000 	ldr.w	sl, [r4]
 800567a:	461a      	mov	r2, r3
 800567c:	210a      	movs	r1, #10
 800567e:	4650      	mov	r0, sl
 8005680:	4698      	mov	r8, r3
 8005682:	f000 fde1 	bl	8006248 <memchr>
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	b188      	cbz	r0, 80056ae <_fgets_r+0x9a>
 800568a:	3001      	adds	r0, #1
 800568c:	eba0 050a 	sub.w	r5, r0, sl
 8005690:	1b5b      	subs	r3, r3, r5
 8005692:	e9c4 0300 	strd	r0, r3, [r4]
 8005696:	462a      	mov	r2, r5
 8005698:	4651      	mov	r1, sl
 800569a:	4638      	mov	r0, r7
 800569c:	f000 fde2 	bl	8006264 <memcpy>
 80056a0:	2300      	movs	r3, #0
 80056a2:	557b      	strb	r3, [r7, r5]
 80056a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056a6:	07da      	lsls	r2, r3, #31
 80056a8:	d513      	bpl.n	80056d2 <_fgets_r+0xbe>
 80056aa:	4630      	mov	r0, r6
 80056ac:	e7dd      	b.n	800566a <_fgets_r+0x56>
 80056ae:	eba3 0308 	sub.w	r3, r3, r8
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	4638      	mov	r0, r7
 80056b8:	4443      	add	r3, r8
 80056ba:	4642      	mov	r2, r8
 80056bc:	4651      	mov	r1, sl
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	f000 fdd0 	bl	8006264 <memcpy>
 80056c4:	ebb5 0508 	subs.w	r5, r5, r8
 80056c8:	4447      	add	r7, r8
 80056ca:	d1bb      	bne.n	8005644 <_fgets_r+0x30>
 80056cc:	2300      	movs	r3, #0
 80056ce:	703b      	strb	r3, [r7, #0]
 80056d0:	e7e8      	b.n	80056a4 <_fgets_r+0x90>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	059b      	lsls	r3, r3, #22
 80056d6:	d4e8      	bmi.n	80056aa <_fgets_r+0x96>
 80056d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056da:	f000 fdb4 	bl	8006246 <__retarget_lock_release_recursive>
 80056de:	e7e4      	b.n	80056aa <_fgets_r+0x96>

080056e0 <fgets>:
 80056e0:	4613      	mov	r3, r2
 80056e2:	460a      	mov	r2, r1
 80056e4:	4601      	mov	r1, r0
 80056e6:	4802      	ldr	r0, [pc, #8]	@ (80056f0 <fgets+0x10>)
 80056e8:	6800      	ldr	r0, [r0, #0]
 80056ea:	f7ff bf93 	b.w	8005614 <_fgets_r>
 80056ee:	bf00      	nop
 80056f0:	20000018 	.word	0x20000018

080056f4 <std>:
 80056f4:	2300      	movs	r3, #0
 80056f6:	b510      	push	{r4, lr}
 80056f8:	4604      	mov	r4, r0
 80056fa:	e9c0 3300 	strd	r3, r3, [r0]
 80056fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005702:	6083      	str	r3, [r0, #8]
 8005704:	8181      	strh	r1, [r0, #12]
 8005706:	6643      	str	r3, [r0, #100]	@ 0x64
 8005708:	81c2      	strh	r2, [r0, #14]
 800570a:	6183      	str	r3, [r0, #24]
 800570c:	4619      	mov	r1, r3
 800570e:	2208      	movs	r2, #8
 8005710:	305c      	adds	r0, #92	@ 0x5c
 8005712:	f000 fc88 	bl	8006026 <memset>
 8005716:	4b0d      	ldr	r3, [pc, #52]	@ (800574c <std+0x58>)
 8005718:	6224      	str	r4, [r4, #32]
 800571a:	6263      	str	r3, [r4, #36]	@ 0x24
 800571c:	4b0c      	ldr	r3, [pc, #48]	@ (8005750 <std+0x5c>)
 800571e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005720:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <std+0x60>)
 8005722:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005724:	4b0c      	ldr	r3, [pc, #48]	@ (8005758 <std+0x64>)
 8005726:	6323      	str	r3, [r4, #48]	@ 0x30
 8005728:	4b0c      	ldr	r3, [pc, #48]	@ (800575c <std+0x68>)
 800572a:	429c      	cmp	r4, r3
 800572c:	d006      	beq.n	800573c <std+0x48>
 800572e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005732:	4294      	cmp	r4, r2
 8005734:	d002      	beq.n	800573c <std+0x48>
 8005736:	33d0      	adds	r3, #208	@ 0xd0
 8005738:	429c      	cmp	r4, r3
 800573a:	d105      	bne.n	8005748 <std+0x54>
 800573c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005744:	f000 bd7c 	b.w	8006240 <__retarget_lock_init_recursive>
 8005748:	bd10      	pop	{r4, pc}
 800574a:	bf00      	nop
 800574c:	08005d49 	.word	0x08005d49
 8005750:	08005d6b 	.word	0x08005d6b
 8005754:	08005da3 	.word	0x08005da3
 8005758:	08005dc7 	.word	0x08005dc7
 800575c:	200006a0 	.word	0x200006a0

08005760 <stdio_exit_handler>:
 8005760:	4a02      	ldr	r2, [pc, #8]	@ (800576c <stdio_exit_handler+0xc>)
 8005762:	4903      	ldr	r1, [pc, #12]	@ (8005770 <stdio_exit_handler+0x10>)
 8005764:	4803      	ldr	r0, [pc, #12]	@ (8005774 <stdio_exit_handler+0x14>)
 8005766:	f000 b971 	b.w	8005a4c <_fwalk_sglue>
 800576a:	bf00      	nop
 800576c:	2000000c 	.word	0x2000000c
 8005770:	080055c5 	.word	0x080055c5
 8005774:	2000001c 	.word	0x2000001c

08005778 <cleanup_stdio>:
 8005778:	6841      	ldr	r1, [r0, #4]
 800577a:	4b0c      	ldr	r3, [pc, #48]	@ (80057ac <cleanup_stdio+0x34>)
 800577c:	b510      	push	{r4, lr}
 800577e:	4299      	cmp	r1, r3
 8005780:	4604      	mov	r4, r0
 8005782:	d001      	beq.n	8005788 <cleanup_stdio+0x10>
 8005784:	f7ff ff1e 	bl	80055c4 <_fflush_r>
 8005788:	68a1      	ldr	r1, [r4, #8]
 800578a:	4b09      	ldr	r3, [pc, #36]	@ (80057b0 <cleanup_stdio+0x38>)
 800578c:	4299      	cmp	r1, r3
 800578e:	d002      	beq.n	8005796 <cleanup_stdio+0x1e>
 8005790:	4620      	mov	r0, r4
 8005792:	f7ff ff17 	bl	80055c4 <_fflush_r>
 8005796:	68e1      	ldr	r1, [r4, #12]
 8005798:	4b06      	ldr	r3, [pc, #24]	@ (80057b4 <cleanup_stdio+0x3c>)
 800579a:	4299      	cmp	r1, r3
 800579c:	d004      	beq.n	80057a8 <cleanup_stdio+0x30>
 800579e:	4620      	mov	r0, r4
 80057a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a4:	f7ff bf0e 	b.w	80055c4 <_fflush_r>
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	bf00      	nop
 80057ac:	200006a0 	.word	0x200006a0
 80057b0:	20000708 	.word	0x20000708
 80057b4:	20000770 	.word	0x20000770

080057b8 <global_stdio_init.part.0>:
 80057b8:	b510      	push	{r4, lr}
 80057ba:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <global_stdio_init.part.0+0x30>)
 80057bc:	4c0b      	ldr	r4, [pc, #44]	@ (80057ec <global_stdio_init.part.0+0x34>)
 80057be:	4a0c      	ldr	r2, [pc, #48]	@ (80057f0 <global_stdio_init.part.0+0x38>)
 80057c0:	4620      	mov	r0, r4
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	2104      	movs	r1, #4
 80057c6:	2200      	movs	r2, #0
 80057c8:	f7ff ff94 	bl	80056f4 <std>
 80057cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057d0:	2201      	movs	r2, #1
 80057d2:	2109      	movs	r1, #9
 80057d4:	f7ff ff8e 	bl	80056f4 <std>
 80057d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057dc:	2202      	movs	r2, #2
 80057de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057e2:	2112      	movs	r1, #18
 80057e4:	f7ff bf86 	b.w	80056f4 <std>
 80057e8:	200007d8 	.word	0x200007d8
 80057ec:	200006a0 	.word	0x200006a0
 80057f0:	08005761 	.word	0x08005761

080057f4 <__sfp_lock_acquire>:
 80057f4:	4801      	ldr	r0, [pc, #4]	@ (80057fc <__sfp_lock_acquire+0x8>)
 80057f6:	f000 bd25 	b.w	8006244 <__retarget_lock_acquire_recursive>
 80057fa:	bf00      	nop
 80057fc:	200007e1 	.word	0x200007e1

08005800 <__sfp_lock_release>:
 8005800:	4801      	ldr	r0, [pc, #4]	@ (8005808 <__sfp_lock_release+0x8>)
 8005802:	f000 bd20 	b.w	8006246 <__retarget_lock_release_recursive>
 8005806:	bf00      	nop
 8005808:	200007e1 	.word	0x200007e1

0800580c <__sfp>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	4607      	mov	r7, r0
 8005810:	f7ff fff0 	bl	80057f4 <__sfp_lock_acquire>
 8005814:	4b23      	ldr	r3, [pc, #140]	@ (80058a4 <__sfp+0x98>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	b90b      	cbnz	r3, 800581e <__sfp+0x12>
 800581a:	f7ff ffcd 	bl	80057b8 <global_stdio_init.part.0>
 800581e:	4e22      	ldr	r6, [pc, #136]	@ (80058a8 <__sfp+0x9c>)
 8005820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005824:	3b01      	subs	r3, #1
 8005826:	d50f      	bpl.n	8005848 <__sfp+0x3c>
 8005828:	6835      	ldr	r5, [r6, #0]
 800582a:	2d00      	cmp	r5, #0
 800582c:	d137      	bne.n	800589e <__sfp+0x92>
 800582e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8005832:	4638      	mov	r0, r7
 8005834:	f001 fc0a 	bl	800704c <_malloc_r>
 8005838:	4604      	mov	r4, r0
 800583a:	bb28      	cbnz	r0, 8005888 <__sfp+0x7c>
 800583c:	6030      	str	r0, [r6, #0]
 800583e:	f7ff ffdf 	bl	8005800 <__sfp_lock_release>
 8005842:	230c      	movs	r3, #12
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	e01b      	b.n	8005880 <__sfp+0x74>
 8005848:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800584c:	b9d5      	cbnz	r5, 8005884 <__sfp+0x78>
 800584e:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <__sfp+0xa0>)
 8005850:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005854:	60e3      	str	r3, [r4, #12]
 8005856:	6665      	str	r5, [r4, #100]	@ 0x64
 8005858:	f000 fcf2 	bl	8006240 <__retarget_lock_init_recursive>
 800585c:	f7ff ffd0 	bl	8005800 <__sfp_lock_release>
 8005860:	2208      	movs	r2, #8
 8005862:	4629      	mov	r1, r5
 8005864:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005868:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800586c:	6025      	str	r5, [r4, #0]
 800586e:	61a5      	str	r5, [r4, #24]
 8005870:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8005874:	f000 fbd7 	bl	8006026 <memset>
 8005878:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800587c:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8005880:	4620      	mov	r0, r4
 8005882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005884:	3468      	adds	r4, #104	@ 0x68
 8005886:	e7cd      	b.n	8005824 <__sfp+0x18>
 8005888:	2304      	movs	r3, #4
 800588a:	6005      	str	r5, [r0, #0]
 800588c:	6043      	str	r3, [r0, #4]
 800588e:	300c      	adds	r0, #12
 8005890:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8005894:	4629      	mov	r1, r5
 8005896:	60a0      	str	r0, [r4, #8]
 8005898:	f000 fbc5 	bl	8006026 <memset>
 800589c:	6034      	str	r4, [r6, #0]
 800589e:	6836      	ldr	r6, [r6, #0]
 80058a0:	e7be      	b.n	8005820 <__sfp+0x14>
 80058a2:	bf00      	nop
 80058a4:	200007d8 	.word	0x200007d8
 80058a8:	2000000c 	.word	0x2000000c
 80058ac:	ffff0001 	.word	0xffff0001

080058b0 <__sinit>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	4604      	mov	r4, r0
 80058b4:	f7ff ff9e 	bl	80057f4 <__sfp_lock_acquire>
 80058b8:	6a23      	ldr	r3, [r4, #32]
 80058ba:	b11b      	cbz	r3, 80058c4 <__sinit+0x14>
 80058bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c0:	f7ff bf9e 	b.w	8005800 <__sfp_lock_release>
 80058c4:	4b04      	ldr	r3, [pc, #16]	@ (80058d8 <__sinit+0x28>)
 80058c6:	6223      	str	r3, [r4, #32]
 80058c8:	4b04      	ldr	r3, [pc, #16]	@ (80058dc <__sinit+0x2c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f5      	bne.n	80058bc <__sinit+0xc>
 80058d0:	f7ff ff72 	bl	80057b8 <global_stdio_init.part.0>
 80058d4:	e7f2      	b.n	80058bc <__sinit+0xc>
 80058d6:	bf00      	nop
 80058d8:	08005779 	.word	0x08005779
 80058dc:	200007d8 	.word	0x200007d8

080058e0 <_fopen_r>:
 80058e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e2:	460f      	mov	r7, r1
 80058e4:	4611      	mov	r1, r2
 80058e6:	aa01      	add	r2, sp, #4
 80058e8:	4606      	mov	r6, r0
 80058ea:	f003 f97b 	bl	8008be4 <__sflags>
 80058ee:	4605      	mov	r5, r0
 80058f0:	b1b0      	cbz	r0, 8005920 <_fopen_r+0x40>
 80058f2:	4630      	mov	r0, r6
 80058f4:	f7ff ff8a 	bl	800580c <__sfp>
 80058f8:	4604      	mov	r4, r0
 80058fa:	b188      	cbz	r0, 8005920 <_fopen_r+0x40>
 80058fc:	4639      	mov	r1, r7
 80058fe:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 8005902:	4630      	mov	r0, r6
 8005904:	9a01      	ldr	r2, [sp, #4]
 8005906:	f000 fc19 	bl	800613c <_open_r>
 800590a:	1e07      	subs	r7, r0, #0
 800590c:	da0c      	bge.n	8005928 <_fopen_r+0x48>
 800590e:	f7ff ff71 	bl	80057f4 <__sfp_lock_acquire>
 8005912:	2300      	movs	r3, #0
 8005914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005916:	81a3      	strh	r3, [r4, #12]
 8005918:	f000 fc93 	bl	8006242 <__retarget_lock_close_recursive>
 800591c:	f7ff ff70 	bl	8005800 <__sfp_lock_release>
 8005920:	2400      	movs	r4, #0
 8005922:	4620      	mov	r0, r4
 8005924:	b003      	add	sp, #12
 8005926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005928:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800592a:	07db      	lsls	r3, r3, #31
 800592c:	d405      	bmi.n	800593a <_fopen_r+0x5a>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	0598      	lsls	r0, r3, #22
 8005932:	d402      	bmi.n	800593a <_fopen_r+0x5a>
 8005934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005936:	f000 fc85 	bl	8006244 <__retarget_lock_acquire_recursive>
 800593a:	4b0f      	ldr	r3, [pc, #60]	@ (8005978 <_fopen_r+0x98>)
 800593c:	b22d      	sxth	r5, r5
 800593e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005940:	4b0e      	ldr	r3, [pc, #56]	@ (800597c <_fopen_r+0x9c>)
 8005942:	05e9      	lsls	r1, r5, #23
 8005944:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005946:	4b0e      	ldr	r3, [pc, #56]	@ (8005980 <_fopen_r+0xa0>)
 8005948:	81e7      	strh	r7, [r4, #14]
 800594a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800594c:	4b0d      	ldr	r3, [pc, #52]	@ (8005984 <_fopen_r+0xa4>)
 800594e:	81a5      	strh	r5, [r4, #12]
 8005950:	6224      	str	r4, [r4, #32]
 8005952:	6323      	str	r3, [r4, #48]	@ 0x30
 8005954:	d505      	bpl.n	8005962 <_fopen_r+0x82>
 8005956:	2302      	movs	r3, #2
 8005958:	2200      	movs	r2, #0
 800595a:	4621      	mov	r1, r4
 800595c:	4630      	mov	r0, r6
 800595e:	f000 f873 	bl	8005a48 <_fseek_r>
 8005962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005964:	07da      	lsls	r2, r3, #31
 8005966:	d4dc      	bmi.n	8005922 <_fopen_r+0x42>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	059b      	lsls	r3, r3, #22
 800596c:	d4d9      	bmi.n	8005922 <_fopen_r+0x42>
 800596e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005970:	f000 fc69 	bl	8006246 <__retarget_lock_release_recursive>
 8005974:	e7d5      	b.n	8005922 <_fopen_r+0x42>
 8005976:	bf00      	nop
 8005978:	08005d49 	.word	0x08005d49
 800597c:	08005d6b 	.word	0x08005d6b
 8005980:	08005da3 	.word	0x08005da3
 8005984:	08005dc7 	.word	0x08005dc7

08005988 <fopen>:
 8005988:	4b02      	ldr	r3, [pc, #8]	@ (8005994 <fopen+0xc>)
 800598a:	460a      	mov	r2, r1
 800598c:	4601      	mov	r1, r0
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	f7ff bfa6 	b.w	80058e0 <_fopen_r>
 8005994:	20000018 	.word	0x20000018

08005998 <_fputs_r>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	460d      	mov	r5, r1
 800599c:	4614      	mov	r4, r2
 800599e:	4606      	mov	r6, r0
 80059a0:	b118      	cbz	r0, 80059aa <_fputs_r+0x12>
 80059a2:	6a03      	ldr	r3, [r0, #32]
 80059a4:	b90b      	cbnz	r3, 80059aa <_fputs_r+0x12>
 80059a6:	f7ff ff83 	bl	80058b0 <__sinit>
 80059aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059ac:	07d9      	lsls	r1, r3, #31
 80059ae:	d405      	bmi.n	80059bc <_fputs_r+0x24>
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	059a      	lsls	r2, r3, #22
 80059b4:	d402      	bmi.n	80059bc <_fputs_r+0x24>
 80059b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059b8:	f000 fc44 	bl	8006244 <__retarget_lock_acquire_recursive>
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	071b      	lsls	r3, r3, #28
 80059c0:	d501      	bpl.n	80059c6 <_fputs_r+0x2e>
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	bb73      	cbnz	r3, 8005a24 <_fputs_r+0x8c>
 80059c6:	4621      	mov	r1, r4
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 fa3f 	bl	8005e4c <__swsetup_r>
 80059ce:	b348      	cbz	r0, 8005a24 <_fputs_r+0x8c>
 80059d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059d2:	07da      	lsls	r2, r3, #31
 80059d4:	d402      	bmi.n	80059dc <_fputs_r+0x44>
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	059b      	lsls	r3, r3, #22
 80059da:	d529      	bpl.n	8005a30 <_fputs_r+0x98>
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295
 80059e0:	e018      	b.n	8005a14 <_fputs_r+0x7c>
 80059e2:	68a3      	ldr	r3, [r4, #8]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	da04      	bge.n	80059f6 <_fputs_r+0x5e>
 80059ec:	69a2      	ldr	r2, [r4, #24]
 80059ee:	4293      	cmp	r3, r2
 80059f0:	db11      	blt.n	8005a16 <_fputs_r+0x7e>
 80059f2:	290a      	cmp	r1, #10
 80059f4:	d00f      	beq.n	8005a16 <_fputs_r+0x7e>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	7019      	strb	r1, [r3, #0]
 80059fe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005a02:	2900      	cmp	r1, #0
 8005a04:	d1ed      	bne.n	80059e2 <_fputs_r+0x4a>
 8005a06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a08:	07d8      	lsls	r0, r3, #31
 8005a0a:	d402      	bmi.n	8005a12 <_fputs_r+0x7a>
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	0599      	lsls	r1, r3, #22
 8005a10:	d50a      	bpl.n	8005a28 <_fputs_r+0x90>
 8005a12:	2000      	movs	r0, #0
 8005a14:	bd70      	pop	{r4, r5, r6, pc}
 8005a16:	4622      	mov	r2, r4
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 f9d8 	bl	8005dce <__swbuf_r>
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d1ed      	bne.n	80059fe <_fputs_r+0x66>
 8005a22:	e7d5      	b.n	80059d0 <_fputs_r+0x38>
 8005a24:	3d01      	subs	r5, #1
 8005a26:	e7ea      	b.n	80059fe <_fputs_r+0x66>
 8005a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a2a:	f000 fc0c 	bl	8006246 <__retarget_lock_release_recursive>
 8005a2e:	e7f0      	b.n	8005a12 <_fputs_r+0x7a>
 8005a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a32:	f000 fc08 	bl	8006246 <__retarget_lock_release_recursive>
 8005a36:	e7d1      	b.n	80059dc <_fputs_r+0x44>

08005a38 <fputs>:
 8005a38:	4b02      	ldr	r3, [pc, #8]	@ (8005a44 <fputs+0xc>)
 8005a3a:	460a      	mov	r2, r1
 8005a3c:	4601      	mov	r1, r0
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	f7ff bfaa 	b.w	8005998 <_fputs_r>
 8005a44:	20000018 	.word	0x20000018

08005a48 <_fseek_r>:
 8005a48:	f000 ba56 	b.w	8005ef8 <_fseeko_r>

08005a4c <_fwalk_sglue>:
 8005a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a50:	4607      	mov	r7, r0
 8005a52:	4688      	mov	r8, r1
 8005a54:	4614      	mov	r4, r2
 8005a56:	2600      	movs	r6, #0
 8005a58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a60:	d505      	bpl.n	8005a6e <_fwalk_sglue+0x22>
 8005a62:	6824      	ldr	r4, [r4, #0]
 8005a64:	2c00      	cmp	r4, #0
 8005a66:	d1f7      	bne.n	8005a58 <_fwalk_sglue+0xc>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6e:	89ab      	ldrh	r3, [r5, #12]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d907      	bls.n	8005a84 <_fwalk_sglue+0x38>
 8005a74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	d003      	beq.n	8005a84 <_fwalk_sglue+0x38>
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c0      	blx	r8
 8005a82:	4306      	orrs	r6, r0
 8005a84:	3568      	adds	r5, #104	@ 0x68
 8005a86:	e7e9      	b.n	8005a5c <_fwalk_sglue+0x10>

08005a88 <iprintf>:
 8005a88:	b40f      	push	{r0, r1, r2, r3}
 8005a8a:	b507      	push	{r0, r1, r2, lr}
 8005a8c:	4906      	ldr	r1, [pc, #24]	@ (8005aa8 <iprintf+0x20>)
 8005a8e:	ab04      	add	r3, sp, #16
 8005a90:	6808      	ldr	r0, [r1, #0]
 8005a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a96:	6881      	ldr	r1, [r0, #8]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	f002 ff8b 	bl	80089b4 <_vfiprintf_r>
 8005a9e:	b003      	add	sp, #12
 8005aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa4:	b004      	add	sp, #16
 8005aa6:	4770      	bx	lr
 8005aa8:	20000018 	.word	0x20000018

08005aac <_puts_r>:
 8005aac:	6a03      	ldr	r3, [r0, #32]
 8005aae:	b570      	push	{r4, r5, r6, lr}
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	460e      	mov	r6, r1
 8005ab4:	6884      	ldr	r4, [r0, #8]
 8005ab6:	b90b      	cbnz	r3, 8005abc <_puts_r+0x10>
 8005ab8:	f7ff fefa 	bl	80058b0 <__sinit>
 8005abc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005abe:	07db      	lsls	r3, r3, #31
 8005ac0:	d405      	bmi.n	8005ace <_puts_r+0x22>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	0598      	lsls	r0, r3, #22
 8005ac6:	d402      	bmi.n	8005ace <_puts_r+0x22>
 8005ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aca:	f000 fbbb 	bl	8006244 <__retarget_lock_acquire_recursive>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	0719      	lsls	r1, r3, #28
 8005ad2:	d502      	bpl.n	8005ada <_puts_r+0x2e>
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d135      	bne.n	8005b46 <_puts_r+0x9a>
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 f9b5 	bl	8005e4c <__swsetup_r>
 8005ae2:	b380      	cbz	r0, 8005b46 <_puts_r+0x9a>
 8005ae4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ae8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005aea:	07da      	lsls	r2, r3, #31
 8005aec:	d405      	bmi.n	8005afa <_puts_r+0x4e>
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	059b      	lsls	r3, r3, #22
 8005af2:	d402      	bmi.n	8005afa <_puts_r+0x4e>
 8005af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005af6:	f000 fba6 	bl	8006246 <__retarget_lock_release_recursive>
 8005afa:	4628      	mov	r0, r5
 8005afc:	bd70      	pop	{r4, r5, r6, pc}
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	da04      	bge.n	8005b0c <_puts_r+0x60>
 8005b02:	69a2      	ldr	r2, [r4, #24]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	dc17      	bgt.n	8005b38 <_puts_r+0x8c>
 8005b08:	290a      	cmp	r1, #10
 8005b0a:	d015      	beq.n	8005b38 <_puts_r+0x8c>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	6022      	str	r2, [r4, #0]
 8005b12:	7019      	strb	r1, [r3, #0]
 8005b14:	68a3      	ldr	r3, [r4, #8]
 8005b16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	60a3      	str	r3, [r4, #8]
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d1ed      	bne.n	8005afe <_puts_r+0x52>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da11      	bge.n	8005b4a <_puts_r+0x9e>
 8005b26:	4622      	mov	r2, r4
 8005b28:	210a      	movs	r1, #10
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f000 f94f 	bl	8005dce <__swbuf_r>
 8005b30:	3001      	adds	r0, #1
 8005b32:	d0d7      	beq.n	8005ae4 <_puts_r+0x38>
 8005b34:	250a      	movs	r5, #10
 8005b36:	e7d7      	b.n	8005ae8 <_puts_r+0x3c>
 8005b38:	4622      	mov	r2, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 f947 	bl	8005dce <__swbuf_r>
 8005b40:	3001      	adds	r0, #1
 8005b42:	d1e7      	bne.n	8005b14 <_puts_r+0x68>
 8005b44:	e7ce      	b.n	8005ae4 <_puts_r+0x38>
 8005b46:	3e01      	subs	r6, #1
 8005b48:	e7e4      	b.n	8005b14 <_puts_r+0x68>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	6022      	str	r2, [r4, #0]
 8005b50:	220a      	movs	r2, #10
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	e7ee      	b.n	8005b34 <_puts_r+0x88>
	...

08005b58 <puts>:
 8005b58:	4b02      	ldr	r3, [pc, #8]	@ (8005b64 <puts+0xc>)
 8005b5a:	4601      	mov	r1, r0
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	f7ff bfa5 	b.w	8005aac <_puts_r>
 8005b62:	bf00      	nop
 8005b64:	20000018 	.word	0x20000018

08005b68 <lflush>:
 8005b68:	898b      	ldrh	r3, [r1, #12]
 8005b6a:	f003 0309 	and.w	r3, r3, #9
 8005b6e:	2b09      	cmp	r3, #9
 8005b70:	d103      	bne.n	8005b7a <lflush+0x12>
 8005b72:	4b03      	ldr	r3, [pc, #12]	@ (8005b80 <lflush+0x18>)
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	f7ff bd25 	b.w	80055c4 <_fflush_r>
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20000018 	.word	0x20000018

08005b84 <__srefill_r>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	460c      	mov	r4, r1
 8005b88:	4605      	mov	r5, r0
 8005b8a:	b118      	cbz	r0, 8005b94 <__srefill_r+0x10>
 8005b8c:	6a03      	ldr	r3, [r0, #32]
 8005b8e:	b90b      	cbnz	r3, 8005b94 <__srefill_r+0x10>
 8005b90:	f7ff fe8e 	bl	80058b0 <__sinit>
 8005b94:	2300      	movs	r3, #0
 8005b96:	6063      	str	r3, [r4, #4]
 8005b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9c:	069e      	lsls	r6, r3, #26
 8005b9e:	d408      	bmi.n	8005bb2 <__srefill_r+0x2e>
 8005ba0:	0758      	lsls	r0, r3, #29
 8005ba2:	d445      	bmi.n	8005c30 <__srefill_r+0xac>
 8005ba4:	06d9      	lsls	r1, r3, #27
 8005ba6:	d407      	bmi.n	8005bb8 <__srefill_r+0x34>
 8005ba8:	2209      	movs	r2, #9
 8005baa:	602a      	str	r2, [r5, #0]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	071a      	lsls	r2, r3, #28
 8005bba:	d50b      	bpl.n	8005bd4 <__srefill_r+0x50>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7ff fd00 	bl	80055c4 <_fflush_r>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d1f4      	bne.n	8005bb2 <__srefill_r+0x2e>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	60a0      	str	r0, [r4, #8]
 8005bcc:	f023 0308 	bic.w	r3, r3, #8
 8005bd0:	81a3      	strh	r3, [r4, #12]
 8005bd2:	61a0      	str	r0, [r4, #24]
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	f043 0304 	orr.w	r3, r3, #4
 8005bda:	81a3      	strh	r3, [r4, #12]
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	b91b      	cbnz	r3, 8005be8 <__srefill_r+0x64>
 8005be0:	4621      	mov	r1, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	f003 f86b 	bl	8008cbe <__smakebuf_r>
 8005be8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8005bec:	07b3      	lsls	r3, r6, #30
 8005bee:	d00f      	beq.n	8005c10 <__srefill_r+0x8c>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c60 <__srefill_r+0xdc>)
 8005bf4:	491b      	ldr	r1, [pc, #108]	@ (8005c64 <__srefill_r+0xe0>)
 8005bf6:	481c      	ldr	r0, [pc, #112]	@ (8005c68 <__srefill_r+0xe4>)
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	f7ff ff27 	bl	8005a4c <_fwalk_sglue>
 8005bfe:	81a6      	strh	r6, [r4, #12]
 8005c00:	f006 0609 	and.w	r6, r6, #9
 8005c04:	2e09      	cmp	r6, #9
 8005c06:	d103      	bne.n	8005c10 <__srefill_r+0x8c>
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f7ff fc5a 	bl	80054c4 <__sflush_r>
 8005c10:	6922      	ldr	r2, [r4, #16]
 8005c12:	4628      	mov	r0, r5
 8005c14:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005c16:	6963      	ldr	r3, [r4, #20]
 8005c18:	6a21      	ldr	r1, [r4, #32]
 8005c1a:	6022      	str	r2, [r4, #0]
 8005c1c:	47b0      	blx	r6
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	6060      	str	r0, [r4, #4]
 8005c22:	dc17      	bgt.n	8005c54 <__srefill_r+0xd0>
 8005c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c28:	d116      	bne.n	8005c58 <__srefill_r+0xd4>
 8005c2a:	f043 0320 	orr.w	r3, r3, #32
 8005c2e:	e7bf      	b.n	8005bb0 <__srefill_r+0x2c>
 8005c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c32:	2900      	cmp	r1, #0
 8005c34:	d0d2      	beq.n	8005bdc <__srefill_r+0x58>
 8005c36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c3a:	4299      	cmp	r1, r3
 8005c3c:	d002      	beq.n	8005c44 <__srefill_r+0xc0>
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f001 f992 	bl	8006f68 <_free_r>
 8005c44:	2300      	movs	r3, #0
 8005c46:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c4a:	6063      	str	r3, [r4, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0c5      	beq.n	8005bdc <__srefill_r+0x58>
 8005c50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	2000      	movs	r0, #0
 8005c56:	e7ae      	b.n	8005bb6 <__srefill_r+0x32>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	6062      	str	r2, [r4, #4]
 8005c5c:	e7a6      	b.n	8005bac <__srefill_r+0x28>
 8005c5e:	bf00      	nop
 8005c60:	2000000c 	.word	0x2000000c
 8005c64:	08005b69 	.word	0x08005b69
 8005c68:	2000001c 	.word	0x2000001c

08005c6c <_remove_r>:
 8005c6c:	b508      	push	{r3, lr}
 8005c6e:	f000 fa9b 	bl	80061a8 <_unlink_r>
 8005c72:	3001      	adds	r0, #1
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	bf18      	it	ne
 8005c7a:	2000      	movne	r0, #0
 8005c7c:	bd08      	pop	{r3, pc}
	...

08005c80 <remove>:
 8005c80:	4b02      	ldr	r3, [pc, #8]	@ (8005c8c <remove+0xc>)
 8005c82:	4601      	mov	r1, r0
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	f7ff bff1 	b.w	8005c6c <_remove_r>
 8005c8a:	bf00      	nop
 8005c8c:	20000018 	.word	0x20000018

08005c90 <rename>:
 8005c90:	4b02      	ldr	r3, [pc, #8]	@ (8005c9c <rename+0xc>)
 8005c92:	460a      	mov	r2, r1
 8005c94:	4601      	mov	r1, r0
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	f000 ba74 	b.w	8006184 <_rename_r>
 8005c9c:	20000018 	.word	0x20000018

08005ca0 <sniprintf>:
 8005ca0:	b40c      	push	{r2, r3}
 8005ca2:	b530      	push	{r4, r5, lr}
 8005ca4:	4b17      	ldr	r3, [pc, #92]	@ (8005d04 <sniprintf+0x64>)
 8005ca6:	1e0c      	subs	r4, r1, #0
 8005ca8:	681d      	ldr	r5, [r3, #0]
 8005caa:	b09d      	sub	sp, #116	@ 0x74
 8005cac:	da08      	bge.n	8005cc0 <sniprintf+0x20>
 8005cae:	238b      	movs	r3, #139	@ 0x8b
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	602b      	str	r3, [r5, #0]
 8005cb6:	b01d      	add	sp, #116	@ 0x74
 8005cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cbc:	b002      	add	sp, #8
 8005cbe:	4770      	bx	lr
 8005cc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005cc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005cc8:	bf0c      	ite	eq
 8005cca:	4623      	moveq	r3, r4
 8005ccc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	9307      	str	r3, [sp, #28]
 8005cd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cd8:	9002      	str	r0, [sp, #8]
 8005cda:	9006      	str	r0, [sp, #24]
 8005cdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	ab21      	add	r3, sp, #132	@ 0x84
 8005ce4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ce6:	a902      	add	r1, sp, #8
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	f002 fd3f 	bl	800876c <_svfiprintf_r>
 8005cee:	1c43      	adds	r3, r0, #1
 8005cf0:	bfbc      	itt	lt
 8005cf2:	238b      	movlt	r3, #139	@ 0x8b
 8005cf4:	602b      	strlt	r3, [r5, #0]
 8005cf6:	2c00      	cmp	r4, #0
 8005cf8:	d0dd      	beq.n	8005cb6 <sniprintf+0x16>
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	9b02      	ldr	r3, [sp, #8]
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	e7d9      	b.n	8005cb6 <sniprintf+0x16>
 8005d02:	bf00      	nop
 8005d04:	20000018 	.word	0x20000018

08005d08 <siprintf>:
 8005d08:	b40e      	push	{r1, r2, r3}
 8005d0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d0e:	b500      	push	{lr}
 8005d10:	b09c      	sub	sp, #112	@ 0x70
 8005d12:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d14:	9002      	str	r0, [sp, #8]
 8005d16:	9006      	str	r0, [sp, #24]
 8005d18:	9107      	str	r1, [sp, #28]
 8005d1a:	9104      	str	r1, [sp, #16]
 8005d1c:	4808      	ldr	r0, [pc, #32]	@ (8005d40 <siprintf+0x38>)
 8005d1e:	4909      	ldr	r1, [pc, #36]	@ (8005d44 <siprintf+0x3c>)
 8005d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d24:	9105      	str	r1, [sp, #20]
 8005d26:	6800      	ldr	r0, [r0, #0]
 8005d28:	a902      	add	r1, sp, #8
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	f002 fd1e 	bl	800876c <_svfiprintf_r>
 8005d30:	2200      	movs	r2, #0
 8005d32:	9b02      	ldr	r3, [sp, #8]
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	b01c      	add	sp, #112	@ 0x70
 8005d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d3c:	b003      	add	sp, #12
 8005d3e:	4770      	bx	lr
 8005d40:	20000018 	.word	0x20000018
 8005d44:	ffff0208 	.word	0xffff0208

08005d48 <__sread>:
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	f000 fa06 	bl	8006160 <_read_r>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	bfab      	itete	ge
 8005d58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d5c:	181b      	addge	r3, r3, r0
 8005d5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d62:	bfac      	ite	ge
 8005d64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d66:	81a3      	strhlt	r3, [r4, #12]
 8005d68:	bd10      	pop	{r4, pc}

08005d6a <__swrite>:
 8005d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6e:	461f      	mov	r7, r3
 8005d70:	898b      	ldrh	r3, [r1, #12]
 8005d72:	4605      	mov	r5, r0
 8005d74:	05db      	lsls	r3, r3, #23
 8005d76:	460c      	mov	r4, r1
 8005d78:	4616      	mov	r6, r2
 8005d7a:	d505      	bpl.n	8005d88 <__swrite+0x1e>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d84:	f000 f9c8 	bl	8006118 <_lseek_r>
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	4632      	mov	r2, r6
 8005d8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	4628      	mov	r0, r5
 8005d94:	463b      	mov	r3, r7
 8005d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9e:	f000 ba13 	b.w	80061c8 <_write_r>

08005da2 <__sseek>:
 8005da2:	b510      	push	{r4, lr}
 8005da4:	460c      	mov	r4, r1
 8005da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005daa:	f000 f9b5 	bl	8006118 <_lseek_r>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	bf15      	itete	ne
 8005db4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005db6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dbe:	81a3      	strheq	r3, [r4, #12]
 8005dc0:	bf18      	it	ne
 8005dc2:	81a3      	strhne	r3, [r4, #12]
 8005dc4:	bd10      	pop	{r4, pc}

08005dc6 <__sclose>:
 8005dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dca:	f000 b995 	b.w	80060f8 <_close_r>

08005dce <__swbuf_r>:
 8005dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd0:	460e      	mov	r6, r1
 8005dd2:	4614      	mov	r4, r2
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	b118      	cbz	r0, 8005de0 <__swbuf_r+0x12>
 8005dd8:	6a03      	ldr	r3, [r0, #32]
 8005dda:	b90b      	cbnz	r3, 8005de0 <__swbuf_r+0x12>
 8005ddc:	f7ff fd68 	bl	80058b0 <__sinit>
 8005de0:	69a3      	ldr	r3, [r4, #24]
 8005de2:	60a3      	str	r3, [r4, #8]
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	071a      	lsls	r2, r3, #28
 8005de8:	d501      	bpl.n	8005dee <__swbuf_r+0x20>
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	b943      	cbnz	r3, 8005e00 <__swbuf_r+0x32>
 8005dee:	4621      	mov	r1, r4
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 f82b 	bl	8005e4c <__swsetup_r>
 8005df6:	b118      	cbz	r0, 8005e00 <__swbuf_r+0x32>
 8005df8:	f04f 37ff 	mov.w	r7, #4294967295
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	6922      	ldr	r2, [r4, #16]
 8005e04:	b2f6      	uxtb	r6, r6
 8005e06:	1a98      	subs	r0, r3, r2
 8005e08:	6963      	ldr	r3, [r4, #20]
 8005e0a:	4637      	mov	r7, r6
 8005e0c:	4283      	cmp	r3, r0
 8005e0e:	dc05      	bgt.n	8005e1c <__swbuf_r+0x4e>
 8005e10:	4621      	mov	r1, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	f7ff fbd6 	bl	80055c4 <_fflush_r>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1ed      	bne.n	8005df8 <__swbuf_r+0x2a>
 8005e1c:	68a3      	ldr	r3, [r4, #8]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	60a3      	str	r3, [r4, #8]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	6022      	str	r2, [r4, #0]
 8005e28:	701e      	strb	r6, [r3, #0]
 8005e2a:	6962      	ldr	r2, [r4, #20]
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d004      	beq.n	8005e3c <__swbuf_r+0x6e>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	07db      	lsls	r3, r3, #31
 8005e36:	d5e1      	bpl.n	8005dfc <__swbuf_r+0x2e>
 8005e38:	2e0a      	cmp	r6, #10
 8005e3a:	d1df      	bne.n	8005dfc <__swbuf_r+0x2e>
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f7ff fbc0 	bl	80055c4 <_fflush_r>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d0d9      	beq.n	8005dfc <__swbuf_r+0x2e>
 8005e48:	e7d6      	b.n	8005df8 <__swbuf_r+0x2a>
	...

08005e4c <__swsetup_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4b29      	ldr	r3, [pc, #164]	@ (8005ef4 <__swsetup_r+0xa8>)
 8005e50:	4605      	mov	r5, r0
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	460c      	mov	r4, r1
 8005e56:	b118      	cbz	r0, 8005e60 <__swsetup_r+0x14>
 8005e58:	6a03      	ldr	r3, [r0, #32]
 8005e5a:	b90b      	cbnz	r3, 8005e60 <__swsetup_r+0x14>
 8005e5c:	f7ff fd28 	bl	80058b0 <__sinit>
 8005e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e64:	0719      	lsls	r1, r3, #28
 8005e66:	d422      	bmi.n	8005eae <__swsetup_r+0x62>
 8005e68:	06da      	lsls	r2, r3, #27
 8005e6a:	d407      	bmi.n	8005e7c <__swsetup_r+0x30>
 8005e6c:	2209      	movs	r2, #9
 8005e6e:	602a      	str	r2, [r5, #0]
 8005e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	81a3      	strh	r3, [r4, #12]
 8005e7a:	e033      	b.n	8005ee4 <__swsetup_r+0x98>
 8005e7c:	0758      	lsls	r0, r3, #29
 8005e7e:	d512      	bpl.n	8005ea6 <__swsetup_r+0x5a>
 8005e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e82:	b141      	cbz	r1, 8005e96 <__swsetup_r+0x4a>
 8005e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e88:	4299      	cmp	r1, r3
 8005e8a:	d002      	beq.n	8005e92 <__swsetup_r+0x46>
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f001 f86b 	bl	8006f68 <_free_r>
 8005e92:	2300      	movs	r3, #0
 8005e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e9c:	81a3      	strh	r3, [r4, #12]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6063      	str	r3, [r4, #4]
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	f043 0308 	orr.w	r3, r3, #8
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	b94b      	cbnz	r3, 8005ec6 <__swsetup_r+0x7a>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ebc:	d003      	beq.n	8005ec6 <__swsetup_r+0x7a>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f002 fefc 	bl	8008cbe <__smakebuf_r>
 8005ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eca:	f013 0201 	ands.w	r2, r3, #1
 8005ece:	d00a      	beq.n	8005ee6 <__swsetup_r+0x9a>
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	60a2      	str	r2, [r4, #8]
 8005ed4:	6962      	ldr	r2, [r4, #20]
 8005ed6:	4252      	negs	r2, r2
 8005ed8:	61a2      	str	r2, [r4, #24]
 8005eda:	6922      	ldr	r2, [r4, #16]
 8005edc:	b942      	cbnz	r2, 8005ef0 <__swsetup_r+0xa4>
 8005ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ee2:	d1c5      	bne.n	8005e70 <__swsetup_r+0x24>
 8005ee4:	bd38      	pop	{r3, r4, r5, pc}
 8005ee6:	0799      	lsls	r1, r3, #30
 8005ee8:	bf58      	it	pl
 8005eea:	6962      	ldrpl	r2, [r4, #20]
 8005eec:	60a2      	str	r2, [r4, #8]
 8005eee:	e7f4      	b.n	8005eda <__swsetup_r+0x8e>
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e7f7      	b.n	8005ee4 <__swsetup_r+0x98>
 8005ef4:	20000018 	.word	0x20000018

08005ef8 <_fseeko_r>:
 8005ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005efc:	460c      	mov	r4, r1
 8005efe:	4690      	mov	r8, r2
 8005f00:	461e      	mov	r6, r3
 8005f02:	4605      	mov	r5, r0
 8005f04:	b118      	cbz	r0, 8005f0e <_fseeko_r+0x16>
 8005f06:	6a03      	ldr	r3, [r0, #32]
 8005f08:	b90b      	cbnz	r3, 8005f0e <_fseeko_r+0x16>
 8005f0a:	f7ff fcd1 	bl	80058b0 <__sinit>
 8005f0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f10:	07d9      	lsls	r1, r3, #31
 8005f12:	d405      	bmi.n	8005f20 <_fseeko_r+0x28>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	059a      	lsls	r2, r3, #22
 8005f18:	d402      	bmi.n	8005f20 <_fseeko_r+0x28>
 8005f1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f1c:	f000 f992 	bl	8006244 <__retarget_lock_acquire_recursive>
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 8005f26:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8005f2a:	d103      	bne.n	8005f34 <_fseeko_r+0x3c>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f7ff fb48 	bl	80055c4 <_fflush_r>
 8005f34:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 8005f38:	f1b9 0f00 	cmp.w	r9, #0
 8005f3c:	d102      	bne.n	8005f44 <_fseeko_r+0x4c>
 8005f3e:	231d      	movs	r3, #29
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	e058      	b.n	8005ff6 <_fseeko_r+0xfe>
 8005f44:	2e01      	cmp	r6, #1
 8005f46:	d03a      	beq.n	8005fbe <_fseeko_r+0xc6>
 8005f48:	f036 0302 	bics.w	r3, r6, #2
 8005f4c:	d162      	bne.n	8006014 <_fseeko_r+0x11c>
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	b91b      	cbnz	r3, 8005f5a <_fseeko_r+0x62>
 8005f52:	4621      	mov	r1, r4
 8005f54:	4628      	mov	r0, r5
 8005f56:	f002 feb2 	bl	8008cbe <__smakebuf_r>
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f7ff fb31 	bl	80055c4 <_fflush_r>
 8005f62:	4607      	mov	r7, r0
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d146      	bne.n	8005ff6 <_fseeko_r+0xfe>
 8005f68:	4633      	mov	r3, r6
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	6a21      	ldr	r1, [r4, #32]
 8005f70:	47c8      	blx	r9
 8005f72:	3001      	adds	r0, #1
 8005f74:	d03f      	beq.n	8005ff6 <_fseeko_r+0xfe>
 8005f76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f78:	b141      	cbz	r1, 8005f8c <_fseeko_r+0x94>
 8005f7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f7e:	4299      	cmp	r1, r3
 8005f80:	d002      	beq.n	8005f88 <_fseeko_r+0x90>
 8005f82:	4628      	mov	r0, r5
 8005f84:	f000 fff0 	bl	8006f68 <_free_r>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	2208      	movs	r2, #8
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	6061      	str	r1, [r4, #4]
 8005f98:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 8005f9c:	81a3      	strh	r3, [r4, #12]
 8005f9e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8005fa2:	f000 f840 	bl	8006026 <memset>
 8005fa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fa8:	07da      	lsls	r2, r3, #31
 8005faa:	d405      	bmi.n	8005fb8 <_fseeko_r+0xc0>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	059b      	lsls	r3, r3, #22
 8005fb0:	d402      	bmi.n	8005fb8 <_fseeko_r+0xc0>
 8005fb2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fb4:	f000 f947 	bl	8006246 <__retarget_lock_release_recursive>
 8005fb8:	4638      	mov	r0, r7
 8005fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f7ff faff 	bl	80055c4 <_fflush_r>
 8005fc6:	89a2      	ldrh	r2, [r4, #12]
 8005fc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fcc:	d00d      	beq.n	8005fea <_fseeko_r+0xf2>
 8005fce:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fd4:	075f      	lsls	r7, r3, #29
 8005fd6:	d514      	bpl.n	8006002 <_fseeko_r+0x10a>
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	1ac0      	subs	r0, r0, r3
 8005fdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fde:	b10b      	cbz	r3, 8005fe4 <_fseeko_r+0xec>
 8005fe0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fe2:	1ac0      	subs	r0, r0, r3
 8005fe4:	2600      	movs	r6, #0
 8005fe6:	4480      	add	r8, r0
 8005fe8:	e7b1      	b.n	8005f4e <_fseeko_r+0x56>
 8005fea:	4633      	mov	r3, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	6a21      	ldr	r1, [r4, #32]
 8005ff0:	47c8      	blx	r9
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d1ec      	bne.n	8005fd0 <_fseeko_r+0xd8>
 8005ff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ff8:	07d8      	lsls	r0, r3, #31
 8005ffa:	d50d      	bpl.n	8006018 <_fseeko_r+0x120>
 8005ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8006000:	e7da      	b.n	8005fb8 <_fseeko_r+0xc0>
 8006002:	071e      	lsls	r6, r3, #28
 8006004:	d5ee      	bpl.n	8005fe4 <_fseeko_r+0xec>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0eb      	beq.n	8005fe4 <_fseeko_r+0xec>
 800600c:	6922      	ldr	r2, [r4, #16]
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	4418      	add	r0, r3
 8006012:	e7e7      	b.n	8005fe4 <_fseeko_r+0xec>
 8006014:	2316      	movs	r3, #22
 8006016:	e793      	b.n	8005f40 <_fseeko_r+0x48>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	0599      	lsls	r1, r3, #22
 800601c:	d4ee      	bmi.n	8005ffc <_fseeko_r+0x104>
 800601e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006020:	f000 f911 	bl	8006246 <__retarget_lock_release_recursive>
 8006024:	e7ea      	b.n	8005ffc <_fseeko_r+0x104>

08006026 <memset>:
 8006026:	4603      	mov	r3, r0
 8006028:	4402      	add	r2, r0
 800602a:	4293      	cmp	r3, r2
 800602c:	d100      	bne.n	8006030 <memset+0xa>
 800602e:	4770      	bx	lr
 8006030:	f803 1b01 	strb.w	r1, [r3], #1
 8006034:	e7f9      	b.n	800602a <memset+0x4>
	...

08006038 <strtok>:
 8006038:	4b16      	ldr	r3, [pc, #88]	@ (8006094 <strtok+0x5c>)
 800603a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603e:	681f      	ldr	r7, [r3, #0]
 8006040:	4605      	mov	r5, r0
 8006042:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006044:	460e      	mov	r6, r1
 8006046:	b9ec      	cbnz	r4, 8006084 <strtok+0x4c>
 8006048:	2050      	movs	r0, #80	@ 0x50
 800604a:	f000 ffd5 	bl	8006ff8 <malloc>
 800604e:	4602      	mov	r2, r0
 8006050:	6478      	str	r0, [r7, #68]	@ 0x44
 8006052:	b920      	cbnz	r0, 800605e <strtok+0x26>
 8006054:	215b      	movs	r1, #91	@ 0x5b
 8006056:	4b10      	ldr	r3, [pc, #64]	@ (8006098 <strtok+0x60>)
 8006058:	4810      	ldr	r0, [pc, #64]	@ (800609c <strtok+0x64>)
 800605a:	f000 f915 	bl	8006288 <__assert_func>
 800605e:	e9c0 4400 	strd	r4, r4, [r0]
 8006062:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006066:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800606a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800606e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006072:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006076:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800607a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800607e:	6184      	str	r4, [r0, #24]
 8006080:	7704      	strb	r4, [r0, #28]
 8006082:	6244      	str	r4, [r0, #36]	@ 0x24
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800608a:	2301      	movs	r3, #1
 800608c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006090:	f000 b806 	b.w	80060a0 <__strtok_r>
 8006094:	20000018 	.word	0x20000018
 8006098:	08009e46 	.word	0x08009e46
 800609c:	08009e5d 	.word	0x08009e5d

080060a0 <__strtok_r>:
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	4604      	mov	r4, r0
 80060a4:	b908      	cbnz	r0, 80060aa <__strtok_r+0xa>
 80060a6:	6814      	ldr	r4, [r2, #0]
 80060a8:	b144      	cbz	r4, 80060bc <__strtok_r+0x1c>
 80060aa:	460f      	mov	r7, r1
 80060ac:	4620      	mov	r0, r4
 80060ae:	f814 5b01 	ldrb.w	r5, [r4], #1
 80060b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80060b6:	b91e      	cbnz	r6, 80060c0 <__strtok_r+0x20>
 80060b8:	b965      	cbnz	r5, 80060d4 <__strtok_r+0x34>
 80060ba:	6015      	str	r5, [r2, #0]
 80060bc:	2000      	movs	r0, #0
 80060be:	e005      	b.n	80060cc <__strtok_r+0x2c>
 80060c0:	42b5      	cmp	r5, r6
 80060c2:	d1f6      	bne.n	80060b2 <__strtok_r+0x12>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f0      	bne.n	80060aa <__strtok_r+0xa>
 80060c8:	6014      	str	r4, [r2, #0]
 80060ca:	7003      	strb	r3, [r0, #0]
 80060cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ce:	461c      	mov	r4, r3
 80060d0:	e00c      	b.n	80060ec <__strtok_r+0x4c>
 80060d2:	b915      	cbnz	r5, 80060da <__strtok_r+0x3a>
 80060d4:	460e      	mov	r6, r1
 80060d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80060de:	42ab      	cmp	r3, r5
 80060e0:	d1f7      	bne.n	80060d2 <__strtok_r+0x32>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f3      	beq.n	80060ce <__strtok_r+0x2e>
 80060e6:	2300      	movs	r3, #0
 80060e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80060ec:	6014      	str	r4, [r2, #0]
 80060ee:	e7ed      	b.n	80060cc <__strtok_r+0x2c>

080060f0 <_localeconv_r>:
 80060f0:	4800      	ldr	r0, [pc, #0]	@ (80060f4 <_localeconv_r+0x4>)
 80060f2:	4770      	bx	lr
 80060f4:	20000158 	.word	0x20000158

080060f8 <_close_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	2300      	movs	r3, #0
 80060fc:	4d05      	ldr	r5, [pc, #20]	@ (8006114 <_close_r+0x1c>)
 80060fe:	4604      	mov	r4, r0
 8006100:	4608      	mov	r0, r1
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	f7fc facb 	bl	800269e <_close>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_close_r+0x1a>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_close_r+0x1a>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	200007dc 	.word	0x200007dc

08006118 <_lseek_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	4611      	mov	r1, r2
 8006120:	2200      	movs	r2, #0
 8006122:	4d05      	ldr	r5, [pc, #20]	@ (8006138 <_lseek_r+0x20>)
 8006124:	602a      	str	r2, [r5, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	f7fc fadd 	bl	80026e6 <_lseek>
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d102      	bne.n	8006136 <_lseek_r+0x1e>
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	b103      	cbz	r3, 8006136 <_lseek_r+0x1e>
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	200007dc 	.word	0x200007dc

0800613c <_open_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	2200      	movs	r2, #0
 8006146:	4d05      	ldr	r5, [pc, #20]	@ (800615c <_open_r+0x20>)
 8006148:	602a      	str	r2, [r5, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	f7fc fad7 	bl	80026fe <_open>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_open_r+0x1e>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	b103      	cbz	r3, 800615a <_open_r+0x1e>
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	200007dc 	.word	0x200007dc

08006160 <_read_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4604      	mov	r4, r0
 8006164:	4608      	mov	r0, r1
 8006166:	4611      	mov	r1, r2
 8006168:	2200      	movs	r2, #0
 800616a:	4d05      	ldr	r5, [pc, #20]	@ (8006180 <_read_r+0x20>)
 800616c:	602a      	str	r2, [r5, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	f7fc fa78 	bl	8002664 <_read>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_read_r+0x1e>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	b103      	cbz	r3, 800617e <_read_r+0x1e>
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	200007dc 	.word	0x200007dc

08006184 <_rename_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4604      	mov	r4, r0
 8006188:	460d      	mov	r5, r1
 800618a:	f002 fe23 	bl	8008dd4 <_link_r>
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	d008      	beq.n	80061a4 <_rename_r+0x20>
 8006192:	4629      	mov	r1, r5
 8006194:	4620      	mov	r0, r4
 8006196:	f000 f807 	bl	80061a8 <_unlink_r>
 800619a:	3001      	adds	r0, #1
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	bf18      	it	ne
 80061a2:	2000      	movne	r0, #0
 80061a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080061a8 <_unlink_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	2300      	movs	r3, #0
 80061ac:	4d05      	ldr	r5, [pc, #20]	@ (80061c4 <_unlink_r+0x1c>)
 80061ae:	4604      	mov	r4, r0
 80061b0:	4608      	mov	r0, r1
 80061b2:	602b      	str	r3, [r5, #0]
 80061b4:	f7fc fab0 	bl	8002718 <_unlink>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d102      	bne.n	80061c2 <_unlink_r+0x1a>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	b103      	cbz	r3, 80061c2 <_unlink_r+0x1a>
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	200007dc 	.word	0x200007dc

080061c8 <_write_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	4611      	mov	r1, r2
 80061d0:	2200      	movs	r2, #0
 80061d2:	4d05      	ldr	r5, [pc, #20]	@ (80061e8 <_write_r+0x20>)
 80061d4:	602a      	str	r2, [r5, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f7fb ff12 	bl	8002000 <_write>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_write_r+0x1e>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_write_r+0x1e>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	200007dc 	.word	0x200007dc

080061ec <__errno>:
 80061ec:	4b01      	ldr	r3, [pc, #4]	@ (80061f4 <__errno+0x8>)
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000018 	.word	0x20000018

080061f8 <__libc_init_array>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	2600      	movs	r6, #0
 80061fc:	4d0c      	ldr	r5, [pc, #48]	@ (8006230 <__libc_init_array+0x38>)
 80061fe:	4c0d      	ldr	r4, [pc, #52]	@ (8006234 <__libc_init_array+0x3c>)
 8006200:	1b64      	subs	r4, r4, r5
 8006202:	10a4      	asrs	r4, r4, #2
 8006204:	42a6      	cmp	r6, r4
 8006206:	d109      	bne.n	800621c <__libc_init_array+0x24>
 8006208:	f003 f9fa 	bl	8009600 <_init>
 800620c:	2600      	movs	r6, #0
 800620e:	4d0a      	ldr	r5, [pc, #40]	@ (8006238 <__libc_init_array+0x40>)
 8006210:	4c0a      	ldr	r4, [pc, #40]	@ (800623c <__libc_init_array+0x44>)
 8006212:	1b64      	subs	r4, r4, r5
 8006214:	10a4      	asrs	r4, r4, #2
 8006216:	42a6      	cmp	r6, r4
 8006218:	d105      	bne.n	8006226 <__libc_init_array+0x2e>
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006220:	4798      	blx	r3
 8006222:	3601      	adds	r6, #1
 8006224:	e7ee      	b.n	8006204 <__libc_init_array+0xc>
 8006226:	f855 3b04 	ldr.w	r3, [r5], #4
 800622a:	4798      	blx	r3
 800622c:	3601      	adds	r6, #1
 800622e:	e7f2      	b.n	8006216 <__libc_init_array+0x1e>
 8006230:	0800a19c 	.word	0x0800a19c
 8006234:	0800a19c 	.word	0x0800a19c
 8006238:	0800a19c 	.word	0x0800a19c
 800623c:	0800a1a0 	.word	0x0800a1a0

08006240 <__retarget_lock_init_recursive>:
 8006240:	4770      	bx	lr

08006242 <__retarget_lock_close_recursive>:
 8006242:	4770      	bx	lr

08006244 <__retarget_lock_acquire_recursive>:
 8006244:	4770      	bx	lr

08006246 <__retarget_lock_release_recursive>:
 8006246:	4770      	bx	lr

08006248 <memchr>:
 8006248:	4603      	mov	r3, r0
 800624a:	b510      	push	{r4, lr}
 800624c:	b2c9      	uxtb	r1, r1
 800624e:	4402      	add	r2, r0
 8006250:	4293      	cmp	r3, r2
 8006252:	4618      	mov	r0, r3
 8006254:	d101      	bne.n	800625a <memchr+0x12>
 8006256:	2000      	movs	r0, #0
 8006258:	e003      	b.n	8006262 <memchr+0x1a>
 800625a:	7804      	ldrb	r4, [r0, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	428c      	cmp	r4, r1
 8006260:	d1f6      	bne.n	8006250 <memchr+0x8>
 8006262:	bd10      	pop	{r4, pc}

08006264 <memcpy>:
 8006264:	440a      	add	r2, r1
 8006266:	4291      	cmp	r1, r2
 8006268:	f100 33ff 	add.w	r3, r0, #4294967295
 800626c:	d100      	bne.n	8006270 <memcpy+0xc>
 800626e:	4770      	bx	lr
 8006270:	b510      	push	{r4, lr}
 8006272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006276:	4291      	cmp	r1, r2
 8006278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800627c:	d1f9      	bne.n	8006272 <memcpy+0xe>
 800627e:	bd10      	pop	{r4, pc}

08006280 <nanf>:
 8006280:	4800      	ldr	r0, [pc, #0]	@ (8006284 <nanf+0x4>)
 8006282:	4770      	bx	lr
 8006284:	7fc00000 	.word	0x7fc00000

08006288 <__assert_func>:
 8006288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800628a:	4614      	mov	r4, r2
 800628c:	461a      	mov	r2, r3
 800628e:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <__assert_func+0x2c>)
 8006290:	4605      	mov	r5, r0
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68d8      	ldr	r0, [r3, #12]
 8006296:	b954      	cbnz	r4, 80062ae <__assert_func+0x26>
 8006298:	4b07      	ldr	r3, [pc, #28]	@ (80062b8 <__assert_func+0x30>)
 800629a:	461c      	mov	r4, r3
 800629c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062a0:	9100      	str	r1, [sp, #0]
 80062a2:	462b      	mov	r3, r5
 80062a4:	4905      	ldr	r1, [pc, #20]	@ (80062bc <__assert_func+0x34>)
 80062a6:	f002 fcd3 	bl	8008c50 <fiprintf>
 80062aa:	f002 fdbb 	bl	8008e24 <abort>
 80062ae:	4b04      	ldr	r3, [pc, #16]	@ (80062c0 <__assert_func+0x38>)
 80062b0:	e7f4      	b.n	800629c <__assert_func+0x14>
 80062b2:	bf00      	nop
 80062b4:	20000018 	.word	0x20000018
 80062b8:	08009ef2 	.word	0x08009ef2
 80062bc:	08009ec4 	.word	0x08009ec4
 80062c0:	08009eb7 	.word	0x08009eb7

080062c4 <quorem>:
 80062c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	6903      	ldr	r3, [r0, #16]
 80062ca:	690c      	ldr	r4, [r1, #16]
 80062cc:	4607      	mov	r7, r0
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	db7e      	blt.n	80063d0 <quorem+0x10c>
 80062d2:	3c01      	subs	r4, #1
 80062d4:	00a3      	lsls	r3, r4, #2
 80062d6:	f100 0514 	add.w	r5, r0, #20
 80062da:	f101 0814 	add.w	r8, r1, #20
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062ee:	3301      	adds	r3, #1
 80062f0:	429a      	cmp	r2, r3
 80062f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80062f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062fa:	d32e      	bcc.n	800635a <quorem+0x96>
 80062fc:	f04f 0a00 	mov.w	sl, #0
 8006300:	46c4      	mov	ip, r8
 8006302:	46ae      	mov	lr, r5
 8006304:	46d3      	mov	fp, sl
 8006306:	f85c 3b04 	ldr.w	r3, [ip], #4
 800630a:	b298      	uxth	r0, r3
 800630c:	fb06 a000 	mla	r0, r6, r0, sl
 8006310:	0c1b      	lsrs	r3, r3, #16
 8006312:	0c02      	lsrs	r2, r0, #16
 8006314:	fb06 2303 	mla	r3, r6, r3, r2
 8006318:	f8de 2000 	ldr.w	r2, [lr]
 800631c:	b280      	uxth	r0, r0
 800631e:	b292      	uxth	r2, r2
 8006320:	1a12      	subs	r2, r2, r0
 8006322:	445a      	add	r2, fp
 8006324:	f8de 0000 	ldr.w	r0, [lr]
 8006328:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800632c:	b29b      	uxth	r3, r3
 800632e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006332:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006336:	b292      	uxth	r2, r2
 8006338:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800633c:	45e1      	cmp	r9, ip
 800633e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006342:	f84e 2b04 	str.w	r2, [lr], #4
 8006346:	d2de      	bcs.n	8006306 <quorem+0x42>
 8006348:	9b00      	ldr	r3, [sp, #0]
 800634a:	58eb      	ldr	r3, [r5, r3]
 800634c:	b92b      	cbnz	r3, 800635a <quorem+0x96>
 800634e:	9b01      	ldr	r3, [sp, #4]
 8006350:	3b04      	subs	r3, #4
 8006352:	429d      	cmp	r5, r3
 8006354:	461a      	mov	r2, r3
 8006356:	d32f      	bcc.n	80063b8 <quorem+0xf4>
 8006358:	613c      	str	r4, [r7, #16]
 800635a:	4638      	mov	r0, r7
 800635c:	f001 f9c4 	bl	80076e8 <__mcmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	db25      	blt.n	80063b0 <quorem+0xec>
 8006364:	4629      	mov	r1, r5
 8006366:	2000      	movs	r0, #0
 8006368:	f858 2b04 	ldr.w	r2, [r8], #4
 800636c:	f8d1 c000 	ldr.w	ip, [r1]
 8006370:	fa1f fe82 	uxth.w	lr, r2
 8006374:	fa1f f38c 	uxth.w	r3, ip
 8006378:	eba3 030e 	sub.w	r3, r3, lr
 800637c:	4403      	add	r3, r0
 800637e:	0c12      	lsrs	r2, r2, #16
 8006380:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006384:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006388:	b29b      	uxth	r3, r3
 800638a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800638e:	45c1      	cmp	r9, r8
 8006390:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006394:	f841 3b04 	str.w	r3, [r1], #4
 8006398:	d2e6      	bcs.n	8006368 <quorem+0xa4>
 800639a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800639e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063a2:	b922      	cbnz	r2, 80063ae <quorem+0xea>
 80063a4:	3b04      	subs	r3, #4
 80063a6:	429d      	cmp	r5, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	d30b      	bcc.n	80063c4 <quorem+0x100>
 80063ac:	613c      	str	r4, [r7, #16]
 80063ae:	3601      	adds	r6, #1
 80063b0:	4630      	mov	r0, r6
 80063b2:	b003      	add	sp, #12
 80063b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	3b04      	subs	r3, #4
 80063bc:	2a00      	cmp	r2, #0
 80063be:	d1cb      	bne.n	8006358 <quorem+0x94>
 80063c0:	3c01      	subs	r4, #1
 80063c2:	e7c6      	b.n	8006352 <quorem+0x8e>
 80063c4:	6812      	ldr	r2, [r2, #0]
 80063c6:	3b04      	subs	r3, #4
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	d1ef      	bne.n	80063ac <quorem+0xe8>
 80063cc:	3c01      	subs	r4, #1
 80063ce:	e7ea      	b.n	80063a6 <quorem+0xe2>
 80063d0:	2000      	movs	r0, #0
 80063d2:	e7ee      	b.n	80063b2 <quorem+0xee>
 80063d4:	0000      	movs	r0, r0
	...

080063d8 <_dtoa_r>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	4614      	mov	r4, r2
 80063de:	461d      	mov	r5, r3
 80063e0:	69c7      	ldr	r7, [r0, #28]
 80063e2:	b097      	sub	sp, #92	@ 0x5c
 80063e4:	4683      	mov	fp, r0
 80063e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80063ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80063ec:	b97f      	cbnz	r7, 800640e <_dtoa_r+0x36>
 80063ee:	2010      	movs	r0, #16
 80063f0:	f000 fe02 	bl	8006ff8 <malloc>
 80063f4:	4602      	mov	r2, r0
 80063f6:	f8cb 001c 	str.w	r0, [fp, #28]
 80063fa:	b920      	cbnz	r0, 8006406 <_dtoa_r+0x2e>
 80063fc:	21ef      	movs	r1, #239	@ 0xef
 80063fe:	4ba8      	ldr	r3, [pc, #672]	@ (80066a0 <_dtoa_r+0x2c8>)
 8006400:	48a8      	ldr	r0, [pc, #672]	@ (80066a4 <_dtoa_r+0x2cc>)
 8006402:	f7ff ff41 	bl	8006288 <__assert_func>
 8006406:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800640a:	6007      	str	r7, [r0, #0]
 800640c:	60c7      	str	r7, [r0, #12]
 800640e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006412:	6819      	ldr	r1, [r3, #0]
 8006414:	b159      	cbz	r1, 800642e <_dtoa_r+0x56>
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	2301      	movs	r3, #1
 800641a:	4093      	lsls	r3, r2
 800641c:	604a      	str	r2, [r1, #4]
 800641e:	608b      	str	r3, [r1, #8]
 8006420:	4658      	mov	r0, fp
 8006422:	f000 fedf 	bl	80071e4 <_Bfree>
 8006426:	2200      	movs	r2, #0
 8006428:	f8db 301c 	ldr.w	r3, [fp, #28]
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	1e2b      	subs	r3, r5, #0
 8006430:	bfaf      	iteee	ge
 8006432:	2300      	movge	r3, #0
 8006434:	2201      	movlt	r2, #1
 8006436:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800643a:	9303      	strlt	r3, [sp, #12]
 800643c:	bfa8      	it	ge
 800643e:	6033      	strge	r3, [r6, #0]
 8006440:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006444:	4b98      	ldr	r3, [pc, #608]	@ (80066a8 <_dtoa_r+0x2d0>)
 8006446:	bfb8      	it	lt
 8006448:	6032      	strlt	r2, [r6, #0]
 800644a:	ea33 0308 	bics.w	r3, r3, r8
 800644e:	d112      	bne.n	8006476 <_dtoa_r+0x9e>
 8006450:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006454:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800645c:	4323      	orrs	r3, r4
 800645e:	f000 8550 	beq.w	8006f02 <_dtoa_r+0xb2a>
 8006462:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006464:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80066ac <_dtoa_r+0x2d4>
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8552 	beq.w	8006f12 <_dtoa_r+0xb3a>
 800646e:	f10a 0303 	add.w	r3, sl, #3
 8006472:	f000 bd4c 	b.w	8006f0e <_dtoa_r+0xb36>
 8006476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800647a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800647e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006482:	2200      	movs	r2, #0
 8006484:	2300      	movs	r3, #0
 8006486:	f7fa fb5b 	bl	8000b40 <__aeabi_dcmpeq>
 800648a:	4607      	mov	r7, r0
 800648c:	b158      	cbz	r0, 80064a6 <_dtoa_r+0xce>
 800648e:	2301      	movs	r3, #1
 8006490:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006496:	b113      	cbz	r3, 800649e <_dtoa_r+0xc6>
 8006498:	4b85      	ldr	r3, [pc, #532]	@ (80066b0 <_dtoa_r+0x2d8>)
 800649a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80066b4 <_dtoa_r+0x2dc>
 80064a2:	f000 bd36 	b.w	8006f12 <_dtoa_r+0xb3a>
 80064a6:	ab14      	add	r3, sp, #80	@ 0x50
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	ab15      	add	r3, sp, #84	@ 0x54
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	4658      	mov	r0, fp
 80064b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80064b4:	f001 fa30 	bl	8007918 <__d2b>
 80064b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80064bc:	4681      	mov	r9, r0
 80064be:	2e00      	cmp	r6, #0
 80064c0:	d077      	beq.n	80065b2 <_dtoa_r+0x1da>
 80064c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80064cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80064da:	4619      	mov	r1, r3
 80064dc:	2200      	movs	r2, #0
 80064de:	4b76      	ldr	r3, [pc, #472]	@ (80066b8 <_dtoa_r+0x2e0>)
 80064e0:	f7f9 ff0e 	bl	8000300 <__aeabi_dsub>
 80064e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006688 <_dtoa_r+0x2b0>)
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f7fa f8c1 	bl	8000670 <__aeabi_dmul>
 80064ee:	a368      	add	r3, pc, #416	@ (adr r3, 8006690 <_dtoa_r+0x2b8>)
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7f9 ff06 	bl	8000304 <__adddf3>
 80064f8:	4604      	mov	r4, r0
 80064fa:	4630      	mov	r0, r6
 80064fc:	460d      	mov	r5, r1
 80064fe:	f7fa f84d 	bl	800059c <__aeabi_i2d>
 8006502:	a365      	add	r3, pc, #404	@ (adr r3, 8006698 <_dtoa_r+0x2c0>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f7fa f8b2 	bl	8000670 <__aeabi_dmul>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4620      	mov	r0, r4
 8006512:	4629      	mov	r1, r5
 8006514:	f7f9 fef6 	bl	8000304 <__adddf3>
 8006518:	4604      	mov	r4, r0
 800651a:	460d      	mov	r5, r1
 800651c:	f7fa fb58 	bl	8000bd0 <__aeabi_d2iz>
 8006520:	2200      	movs	r2, #0
 8006522:	4607      	mov	r7, r0
 8006524:	2300      	movs	r3, #0
 8006526:	4620      	mov	r0, r4
 8006528:	4629      	mov	r1, r5
 800652a:	f7fa fb13 	bl	8000b54 <__aeabi_dcmplt>
 800652e:	b140      	cbz	r0, 8006542 <_dtoa_r+0x16a>
 8006530:	4638      	mov	r0, r7
 8006532:	f7fa f833 	bl	800059c <__aeabi_i2d>
 8006536:	4622      	mov	r2, r4
 8006538:	462b      	mov	r3, r5
 800653a:	f7fa fb01 	bl	8000b40 <__aeabi_dcmpeq>
 800653e:	b900      	cbnz	r0, 8006542 <_dtoa_r+0x16a>
 8006540:	3f01      	subs	r7, #1
 8006542:	2f16      	cmp	r7, #22
 8006544:	d853      	bhi.n	80065ee <_dtoa_r+0x216>
 8006546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800654a:	4b5c      	ldr	r3, [pc, #368]	@ (80066bc <_dtoa_r+0x2e4>)
 800654c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7fa fafe 	bl	8000b54 <__aeabi_dcmplt>
 8006558:	2800      	cmp	r0, #0
 800655a:	d04a      	beq.n	80065f2 <_dtoa_r+0x21a>
 800655c:	2300      	movs	r3, #0
 800655e:	3f01      	subs	r7, #1
 8006560:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006562:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006564:	1b9b      	subs	r3, r3, r6
 8006566:	1e5a      	subs	r2, r3, #1
 8006568:	bf46      	itte	mi
 800656a:	f1c3 0801 	rsbmi	r8, r3, #1
 800656e:	2300      	movmi	r3, #0
 8006570:	f04f 0800 	movpl.w	r8, #0
 8006574:	9209      	str	r2, [sp, #36]	@ 0x24
 8006576:	bf48      	it	mi
 8006578:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800657a:	2f00      	cmp	r7, #0
 800657c:	db3b      	blt.n	80065f6 <_dtoa_r+0x21e>
 800657e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006580:	970e      	str	r7, [sp, #56]	@ 0x38
 8006582:	443b      	add	r3, r7
 8006584:	9309      	str	r3, [sp, #36]	@ 0x24
 8006586:	2300      	movs	r3, #0
 8006588:	930a      	str	r3, [sp, #40]	@ 0x28
 800658a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800658c:	2b09      	cmp	r3, #9
 800658e:	d866      	bhi.n	800665e <_dtoa_r+0x286>
 8006590:	2b05      	cmp	r3, #5
 8006592:	bfc4      	itt	gt
 8006594:	3b04      	subgt	r3, #4
 8006596:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006598:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800659a:	bfc8      	it	gt
 800659c:	2400      	movgt	r4, #0
 800659e:	f1a3 0302 	sub.w	r3, r3, #2
 80065a2:	bfd8      	it	le
 80065a4:	2401      	movle	r4, #1
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d864      	bhi.n	8006674 <_dtoa_r+0x29c>
 80065aa:	e8df f003 	tbb	[pc, r3]
 80065ae:	382b      	.short	0x382b
 80065b0:	5636      	.short	0x5636
 80065b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80065b6:	441e      	add	r6, r3
 80065b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80065bc:	2b20      	cmp	r3, #32
 80065be:	bfc1      	itttt	gt
 80065c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80065c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80065c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80065cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80065d0:	bfd6      	itet	le
 80065d2:	f1c3 0320 	rsble	r3, r3, #32
 80065d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80065da:	fa04 f003 	lslle.w	r0, r4, r3
 80065de:	f7f9 ffcd 	bl	800057c <__aeabi_ui2d>
 80065e2:	2201      	movs	r2, #1
 80065e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80065e8:	3e01      	subs	r6, #1
 80065ea:	9212      	str	r2, [sp, #72]	@ 0x48
 80065ec:	e775      	b.n	80064da <_dtoa_r+0x102>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e7b6      	b.n	8006560 <_dtoa_r+0x188>
 80065f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80065f4:	e7b5      	b.n	8006562 <_dtoa_r+0x18a>
 80065f6:	427b      	negs	r3, r7
 80065f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065fa:	2300      	movs	r3, #0
 80065fc:	eba8 0807 	sub.w	r8, r8, r7
 8006600:	930e      	str	r3, [sp, #56]	@ 0x38
 8006602:	e7c2      	b.n	800658a <_dtoa_r+0x1b2>
 8006604:	2300      	movs	r3, #0
 8006606:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006608:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800660a:	2b00      	cmp	r3, #0
 800660c:	dc35      	bgt.n	800667a <_dtoa_r+0x2a2>
 800660e:	2301      	movs	r3, #1
 8006610:	461a      	mov	r2, r3
 8006612:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006616:	9221      	str	r2, [sp, #132]	@ 0x84
 8006618:	e00b      	b.n	8006632 <_dtoa_r+0x25a>
 800661a:	2301      	movs	r3, #1
 800661c:	e7f3      	b.n	8006606 <_dtoa_r+0x22e>
 800661e:	2300      	movs	r3, #0
 8006620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006622:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006624:	18fb      	adds	r3, r7, r3
 8006626:	9308      	str	r3, [sp, #32]
 8006628:	3301      	adds	r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	9307      	str	r3, [sp, #28]
 800662e:	bfb8      	it	lt
 8006630:	2301      	movlt	r3, #1
 8006632:	2100      	movs	r1, #0
 8006634:	2204      	movs	r2, #4
 8006636:	f8db 001c 	ldr.w	r0, [fp, #28]
 800663a:	f102 0514 	add.w	r5, r2, #20
 800663e:	429d      	cmp	r5, r3
 8006640:	d91f      	bls.n	8006682 <_dtoa_r+0x2aa>
 8006642:	6041      	str	r1, [r0, #4]
 8006644:	4658      	mov	r0, fp
 8006646:	f000 fd8d 	bl	8007164 <_Balloc>
 800664a:	4682      	mov	sl, r0
 800664c:	2800      	cmp	r0, #0
 800664e:	d139      	bne.n	80066c4 <_dtoa_r+0x2ec>
 8006650:	4602      	mov	r2, r0
 8006652:	f240 11af 	movw	r1, #431	@ 0x1af
 8006656:	4b1a      	ldr	r3, [pc, #104]	@ (80066c0 <_dtoa_r+0x2e8>)
 8006658:	e6d2      	b.n	8006400 <_dtoa_r+0x28>
 800665a:	2301      	movs	r3, #1
 800665c:	e7e0      	b.n	8006620 <_dtoa_r+0x248>
 800665e:	2401      	movs	r4, #1
 8006660:	2300      	movs	r3, #0
 8006662:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006664:	9320      	str	r3, [sp, #128]	@ 0x80
 8006666:	f04f 33ff 	mov.w	r3, #4294967295
 800666a:	2200      	movs	r2, #0
 800666c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006670:	2312      	movs	r3, #18
 8006672:	e7d0      	b.n	8006616 <_dtoa_r+0x23e>
 8006674:	2301      	movs	r3, #1
 8006676:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006678:	e7f5      	b.n	8006666 <_dtoa_r+0x28e>
 800667a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800667c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006680:	e7d7      	b.n	8006632 <_dtoa_r+0x25a>
 8006682:	3101      	adds	r1, #1
 8006684:	0052      	lsls	r2, r2, #1
 8006686:	e7d8      	b.n	800663a <_dtoa_r+0x262>
 8006688:	636f4361 	.word	0x636f4361
 800668c:	3fd287a7 	.word	0x3fd287a7
 8006690:	8b60c8b3 	.word	0x8b60c8b3
 8006694:	3fc68a28 	.word	0x3fc68a28
 8006698:	509f79fb 	.word	0x509f79fb
 800669c:	3fd34413 	.word	0x3fd34413
 80066a0:	08009e46 	.word	0x08009e46
 80066a4:	08009f00 	.word	0x08009f00
 80066a8:	7ff00000 	.word	0x7ff00000
 80066ac:	08009efc 	.word	0x08009efc
 80066b0:	08009e1e 	.word	0x08009e1e
 80066b4:	08009e1d 	.word	0x08009e1d
 80066b8:	3ff80000 	.word	0x3ff80000
 80066bc:	08009ff8 	.word	0x08009ff8
 80066c0:	08009f58 	.word	0x08009f58
 80066c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066c8:	6018      	str	r0, [r3, #0]
 80066ca:	9b07      	ldr	r3, [sp, #28]
 80066cc:	2b0e      	cmp	r3, #14
 80066ce:	f200 80a4 	bhi.w	800681a <_dtoa_r+0x442>
 80066d2:	2c00      	cmp	r4, #0
 80066d4:	f000 80a1 	beq.w	800681a <_dtoa_r+0x442>
 80066d8:	2f00      	cmp	r7, #0
 80066da:	dd33      	ble.n	8006744 <_dtoa_r+0x36c>
 80066dc:	4b86      	ldr	r3, [pc, #536]	@ (80068f8 <_dtoa_r+0x520>)
 80066de:	f007 020f 	and.w	r2, r7, #15
 80066e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066e6:	05f8      	lsls	r0, r7, #23
 80066e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80066f4:	d516      	bpl.n	8006724 <_dtoa_r+0x34c>
 80066f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066fa:	4b80      	ldr	r3, [pc, #512]	@ (80068fc <_dtoa_r+0x524>)
 80066fc:	2603      	movs	r6, #3
 80066fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006702:	f7fa f8df 	bl	80008c4 <__aeabi_ddiv>
 8006706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670a:	f004 040f 	and.w	r4, r4, #15
 800670e:	4d7b      	ldr	r5, [pc, #492]	@ (80068fc <_dtoa_r+0x524>)
 8006710:	b954      	cbnz	r4, 8006728 <_dtoa_r+0x350>
 8006712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800671a:	f7fa f8d3 	bl	80008c4 <__aeabi_ddiv>
 800671e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006722:	e028      	b.n	8006776 <_dtoa_r+0x39e>
 8006724:	2602      	movs	r6, #2
 8006726:	e7f2      	b.n	800670e <_dtoa_r+0x336>
 8006728:	07e1      	lsls	r1, r4, #31
 800672a:	d508      	bpl.n	800673e <_dtoa_r+0x366>
 800672c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006730:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006734:	f7f9 ff9c 	bl	8000670 <__aeabi_dmul>
 8006738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800673c:	3601      	adds	r6, #1
 800673e:	1064      	asrs	r4, r4, #1
 8006740:	3508      	adds	r5, #8
 8006742:	e7e5      	b.n	8006710 <_dtoa_r+0x338>
 8006744:	f000 80d2 	beq.w	80068ec <_dtoa_r+0x514>
 8006748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800674c:	427c      	negs	r4, r7
 800674e:	4b6a      	ldr	r3, [pc, #424]	@ (80068f8 <_dtoa_r+0x520>)
 8006750:	f004 020f 	and.w	r2, r4, #15
 8006754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f7f9 ff88 	bl	8000670 <__aeabi_dmul>
 8006760:	2602      	movs	r6, #2
 8006762:	2300      	movs	r3, #0
 8006764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006768:	4d64      	ldr	r5, [pc, #400]	@ (80068fc <_dtoa_r+0x524>)
 800676a:	1124      	asrs	r4, r4, #4
 800676c:	2c00      	cmp	r4, #0
 800676e:	f040 80b2 	bne.w	80068d6 <_dtoa_r+0x4fe>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1d3      	bne.n	800671e <_dtoa_r+0x346>
 8006776:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800677a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80b7 	beq.w	80068f0 <_dtoa_r+0x518>
 8006782:	2200      	movs	r2, #0
 8006784:	4620      	mov	r0, r4
 8006786:	4629      	mov	r1, r5
 8006788:	4b5d      	ldr	r3, [pc, #372]	@ (8006900 <_dtoa_r+0x528>)
 800678a:	f7fa f9e3 	bl	8000b54 <__aeabi_dcmplt>
 800678e:	2800      	cmp	r0, #0
 8006790:	f000 80ae 	beq.w	80068f0 <_dtoa_r+0x518>
 8006794:	9b07      	ldr	r3, [sp, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 80aa 	beq.w	80068f0 <_dtoa_r+0x518>
 800679c:	9b08      	ldr	r3, [sp, #32]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dd37      	ble.n	8006812 <_dtoa_r+0x43a>
 80067a2:	1e7b      	subs	r3, r7, #1
 80067a4:	4620      	mov	r0, r4
 80067a6:	9304      	str	r3, [sp, #16]
 80067a8:	2200      	movs	r2, #0
 80067aa:	4629      	mov	r1, r5
 80067ac:	4b55      	ldr	r3, [pc, #340]	@ (8006904 <_dtoa_r+0x52c>)
 80067ae:	f7f9 ff5f 	bl	8000670 <__aeabi_dmul>
 80067b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b6:	9c08      	ldr	r4, [sp, #32]
 80067b8:	3601      	adds	r6, #1
 80067ba:	4630      	mov	r0, r6
 80067bc:	f7f9 feee 	bl	800059c <__aeabi_i2d>
 80067c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067c4:	f7f9 ff54 	bl	8000670 <__aeabi_dmul>
 80067c8:	2200      	movs	r2, #0
 80067ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006908 <_dtoa_r+0x530>)
 80067cc:	f7f9 fd9a 	bl	8000304 <__adddf3>
 80067d0:	4605      	mov	r5, r0
 80067d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067d6:	2c00      	cmp	r4, #0
 80067d8:	f040 809a 	bne.w	8006910 <_dtoa_r+0x538>
 80067dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067e0:	2200      	movs	r2, #0
 80067e2:	4b4a      	ldr	r3, [pc, #296]	@ (800690c <_dtoa_r+0x534>)
 80067e4:	f7f9 fd8c 	bl	8000300 <__aeabi_dsub>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067f0:	462a      	mov	r2, r5
 80067f2:	4633      	mov	r3, r6
 80067f4:	f7fa f9cc 	bl	8000b90 <__aeabi_dcmpgt>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	f040 828e 	bne.w	8006d1a <_dtoa_r+0x942>
 80067fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006802:	462a      	mov	r2, r5
 8006804:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006808:	f7fa f9a4 	bl	8000b54 <__aeabi_dcmplt>
 800680c:	2800      	cmp	r0, #0
 800680e:	f040 8127 	bne.w	8006a60 <_dtoa_r+0x688>
 8006812:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006816:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800681a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800681c:	2b00      	cmp	r3, #0
 800681e:	f2c0 8163 	blt.w	8006ae8 <_dtoa_r+0x710>
 8006822:	2f0e      	cmp	r7, #14
 8006824:	f300 8160 	bgt.w	8006ae8 <_dtoa_r+0x710>
 8006828:	4b33      	ldr	r3, [pc, #204]	@ (80068f8 <_dtoa_r+0x520>)
 800682a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800682e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006832:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006836:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006838:	2b00      	cmp	r3, #0
 800683a:	da03      	bge.n	8006844 <_dtoa_r+0x46c>
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	f340 8100 	ble.w	8006a44 <_dtoa_r+0x66c>
 8006844:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006848:	4656      	mov	r6, sl
 800684a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7fa f837 	bl	80008c4 <__aeabi_ddiv>
 8006856:	f7fa f9bb 	bl	8000bd0 <__aeabi_d2iz>
 800685a:	4680      	mov	r8, r0
 800685c:	f7f9 fe9e 	bl	800059c <__aeabi_i2d>
 8006860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006864:	f7f9 ff04 	bl	8000670 <__aeabi_dmul>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4620      	mov	r0, r4
 800686e:	4629      	mov	r1, r5
 8006870:	f7f9 fd46 	bl	8000300 <__aeabi_dsub>
 8006874:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006878:	9d07      	ldr	r5, [sp, #28]
 800687a:	f806 4b01 	strb.w	r4, [r6], #1
 800687e:	eba6 040a 	sub.w	r4, r6, sl
 8006882:	42a5      	cmp	r5, r4
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	f040 8116 	bne.w	8006ab8 <_dtoa_r+0x6e0>
 800688c:	f7f9 fd3a 	bl	8000304 <__adddf3>
 8006890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006894:	4604      	mov	r4, r0
 8006896:	460d      	mov	r5, r1
 8006898:	f7fa f97a 	bl	8000b90 <__aeabi_dcmpgt>
 800689c:	2800      	cmp	r0, #0
 800689e:	f040 80f8 	bne.w	8006a92 <_dtoa_r+0x6ba>
 80068a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a6:	4620      	mov	r0, r4
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7fa f949 	bl	8000b40 <__aeabi_dcmpeq>
 80068ae:	b118      	cbz	r0, 80068b8 <_dtoa_r+0x4e0>
 80068b0:	f018 0f01 	tst.w	r8, #1
 80068b4:	f040 80ed 	bne.w	8006a92 <_dtoa_r+0x6ba>
 80068b8:	4649      	mov	r1, r9
 80068ba:	4658      	mov	r0, fp
 80068bc:	f000 fc92 	bl	80071e4 <_Bfree>
 80068c0:	2300      	movs	r3, #0
 80068c2:	7033      	strb	r3, [r6, #0]
 80068c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80068c6:	3701      	adds	r7, #1
 80068c8:	601f      	str	r7, [r3, #0]
 80068ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8320 	beq.w	8006f12 <_dtoa_r+0xb3a>
 80068d2:	601e      	str	r6, [r3, #0]
 80068d4:	e31d      	b.n	8006f12 <_dtoa_r+0xb3a>
 80068d6:	07e2      	lsls	r2, r4, #31
 80068d8:	d505      	bpl.n	80068e6 <_dtoa_r+0x50e>
 80068da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068de:	f7f9 fec7 	bl	8000670 <__aeabi_dmul>
 80068e2:	2301      	movs	r3, #1
 80068e4:	3601      	adds	r6, #1
 80068e6:	1064      	asrs	r4, r4, #1
 80068e8:	3508      	adds	r5, #8
 80068ea:	e73f      	b.n	800676c <_dtoa_r+0x394>
 80068ec:	2602      	movs	r6, #2
 80068ee:	e742      	b.n	8006776 <_dtoa_r+0x39e>
 80068f0:	9c07      	ldr	r4, [sp, #28]
 80068f2:	9704      	str	r7, [sp, #16]
 80068f4:	e761      	b.n	80067ba <_dtoa_r+0x3e2>
 80068f6:	bf00      	nop
 80068f8:	08009ff8 	.word	0x08009ff8
 80068fc:	08009fd0 	.word	0x08009fd0
 8006900:	3ff00000 	.word	0x3ff00000
 8006904:	40240000 	.word	0x40240000
 8006908:	401c0000 	.word	0x401c0000
 800690c:	40140000 	.word	0x40140000
 8006910:	4b70      	ldr	r3, [pc, #448]	@ (8006ad4 <_dtoa_r+0x6fc>)
 8006912:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006914:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006918:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800691c:	4454      	add	r4, sl
 800691e:	2900      	cmp	r1, #0
 8006920:	d045      	beq.n	80069ae <_dtoa_r+0x5d6>
 8006922:	2000      	movs	r0, #0
 8006924:	496c      	ldr	r1, [pc, #432]	@ (8006ad8 <_dtoa_r+0x700>)
 8006926:	f7f9 ffcd 	bl	80008c4 <__aeabi_ddiv>
 800692a:	4633      	mov	r3, r6
 800692c:	462a      	mov	r2, r5
 800692e:	f7f9 fce7 	bl	8000300 <__aeabi_dsub>
 8006932:	4656      	mov	r6, sl
 8006934:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800693c:	f7fa f948 	bl	8000bd0 <__aeabi_d2iz>
 8006940:	4605      	mov	r5, r0
 8006942:	f7f9 fe2b 	bl	800059c <__aeabi_i2d>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800694e:	f7f9 fcd7 	bl	8000300 <__aeabi_dsub>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	3530      	adds	r5, #48	@ 0x30
 8006958:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800695c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006960:	f806 5b01 	strb.w	r5, [r6], #1
 8006964:	f7fa f8f6 	bl	8000b54 <__aeabi_dcmplt>
 8006968:	2800      	cmp	r0, #0
 800696a:	d163      	bne.n	8006a34 <_dtoa_r+0x65c>
 800696c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006970:	2000      	movs	r0, #0
 8006972:	495a      	ldr	r1, [pc, #360]	@ (8006adc <_dtoa_r+0x704>)
 8006974:	f7f9 fcc4 	bl	8000300 <__aeabi_dsub>
 8006978:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800697c:	f7fa f8ea 	bl	8000b54 <__aeabi_dcmplt>
 8006980:	2800      	cmp	r0, #0
 8006982:	f040 8087 	bne.w	8006a94 <_dtoa_r+0x6bc>
 8006986:	42a6      	cmp	r6, r4
 8006988:	f43f af43 	beq.w	8006812 <_dtoa_r+0x43a>
 800698c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006990:	2200      	movs	r2, #0
 8006992:	4b53      	ldr	r3, [pc, #332]	@ (8006ae0 <_dtoa_r+0x708>)
 8006994:	f7f9 fe6c 	bl	8000670 <__aeabi_dmul>
 8006998:	2200      	movs	r2, #0
 800699a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800699e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a2:	4b4f      	ldr	r3, [pc, #316]	@ (8006ae0 <_dtoa_r+0x708>)
 80069a4:	f7f9 fe64 	bl	8000670 <__aeabi_dmul>
 80069a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069ac:	e7c4      	b.n	8006938 <_dtoa_r+0x560>
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	f7f9 fe5d 	bl	8000670 <__aeabi_dmul>
 80069b6:	4656      	mov	r6, sl
 80069b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80069be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069c2:	f7fa f905 	bl	8000bd0 <__aeabi_d2iz>
 80069c6:	4605      	mov	r5, r0
 80069c8:	f7f9 fde8 	bl	800059c <__aeabi_i2d>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d4:	f7f9 fc94 	bl	8000300 <__aeabi_dsub>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	3530      	adds	r5, #48	@ 0x30
 80069de:	f806 5b01 	strb.w	r5, [r6], #1
 80069e2:	42a6      	cmp	r6, r4
 80069e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	d124      	bne.n	8006a38 <_dtoa_r+0x660>
 80069ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069f2:	4b39      	ldr	r3, [pc, #228]	@ (8006ad8 <_dtoa_r+0x700>)
 80069f4:	f7f9 fc86 	bl	8000304 <__adddf3>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a00:	f7fa f8c6 	bl	8000b90 <__aeabi_dcmpgt>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d145      	bne.n	8006a94 <_dtoa_r+0x6bc>
 8006a08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	4932      	ldr	r1, [pc, #200]	@ (8006ad8 <_dtoa_r+0x700>)
 8006a10:	f7f9 fc76 	bl	8000300 <__aeabi_dsub>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a1c:	f7fa f89a 	bl	8000b54 <__aeabi_dcmplt>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f43f aef6 	beq.w	8006812 <_dtoa_r+0x43a>
 8006a26:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006a28:	1e73      	subs	r3, r6, #1
 8006a2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a30:	2b30      	cmp	r3, #48	@ 0x30
 8006a32:	d0f8      	beq.n	8006a26 <_dtoa_r+0x64e>
 8006a34:	9f04      	ldr	r7, [sp, #16]
 8006a36:	e73f      	b.n	80068b8 <_dtoa_r+0x4e0>
 8006a38:	4b29      	ldr	r3, [pc, #164]	@ (8006ae0 <_dtoa_r+0x708>)
 8006a3a:	f7f9 fe19 	bl	8000670 <__aeabi_dmul>
 8006a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a42:	e7bc      	b.n	80069be <_dtoa_r+0x5e6>
 8006a44:	d10c      	bne.n	8006a60 <_dtoa_r+0x688>
 8006a46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4b25      	ldr	r3, [pc, #148]	@ (8006ae4 <_dtoa_r+0x70c>)
 8006a4e:	f7f9 fe0f 	bl	8000670 <__aeabi_dmul>
 8006a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a56:	f7fa f891 	bl	8000b7c <__aeabi_dcmpge>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	f000 815b 	beq.w	8006d16 <_dtoa_r+0x93e>
 8006a60:	2400      	movs	r4, #0
 8006a62:	4625      	mov	r5, r4
 8006a64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a66:	4656      	mov	r6, sl
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	2700      	movs	r7, #0
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4658      	mov	r0, fp
 8006a72:	f000 fbb7 	bl	80071e4 <_Bfree>
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	d0dc      	beq.n	8006a34 <_dtoa_r+0x65c>
 8006a7a:	b12f      	cbz	r7, 8006a88 <_dtoa_r+0x6b0>
 8006a7c:	42af      	cmp	r7, r5
 8006a7e:	d003      	beq.n	8006a88 <_dtoa_r+0x6b0>
 8006a80:	4639      	mov	r1, r7
 8006a82:	4658      	mov	r0, fp
 8006a84:	f000 fbae 	bl	80071e4 <_Bfree>
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4658      	mov	r0, fp
 8006a8c:	f000 fbaa 	bl	80071e4 <_Bfree>
 8006a90:	e7d0      	b.n	8006a34 <_dtoa_r+0x65c>
 8006a92:	9704      	str	r7, [sp, #16]
 8006a94:	4633      	mov	r3, r6
 8006a96:	461e      	mov	r6, r3
 8006a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a9c:	2a39      	cmp	r2, #57	@ 0x39
 8006a9e:	d107      	bne.n	8006ab0 <_dtoa_r+0x6d8>
 8006aa0:	459a      	cmp	sl, r3
 8006aa2:	d1f8      	bne.n	8006a96 <_dtoa_r+0x6be>
 8006aa4:	9a04      	ldr	r2, [sp, #16]
 8006aa6:	3201      	adds	r2, #1
 8006aa8:	9204      	str	r2, [sp, #16]
 8006aaa:	2230      	movs	r2, #48	@ 0x30
 8006aac:	f88a 2000 	strb.w	r2, [sl]
 8006ab0:	781a      	ldrb	r2, [r3, #0]
 8006ab2:	3201      	adds	r2, #1
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	e7bd      	b.n	8006a34 <_dtoa_r+0x65c>
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4b09      	ldr	r3, [pc, #36]	@ (8006ae0 <_dtoa_r+0x708>)
 8006abc:	f7f9 fdd8 	bl	8000670 <__aeabi_dmul>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	f7fa f83a 	bl	8000b40 <__aeabi_dcmpeq>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f43f aebc 	beq.w	800684a <_dtoa_r+0x472>
 8006ad2:	e6f1      	b.n	80068b8 <_dtoa_r+0x4e0>
 8006ad4:	08009ff8 	.word	0x08009ff8
 8006ad8:	3fe00000 	.word	0x3fe00000
 8006adc:	3ff00000 	.word	0x3ff00000
 8006ae0:	40240000 	.word	0x40240000
 8006ae4:	40140000 	.word	0x40140000
 8006ae8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	f000 80db 	beq.w	8006ca6 <_dtoa_r+0x8ce>
 8006af0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006af2:	2a01      	cmp	r2, #1
 8006af4:	f300 80bf 	bgt.w	8006c76 <_dtoa_r+0x89e>
 8006af8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006afa:	2a00      	cmp	r2, #0
 8006afc:	f000 80b7 	beq.w	8006c6e <_dtoa_r+0x896>
 8006b00:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b04:	4646      	mov	r6, r8
 8006b06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	441a      	add	r2, r3
 8006b0e:	4658      	mov	r0, fp
 8006b10:	4498      	add	r8, r3
 8006b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b14:	f000 fc64 	bl	80073e0 <__i2b>
 8006b18:	4605      	mov	r5, r0
 8006b1a:	b15e      	cbz	r6, 8006b34 <_dtoa_r+0x75c>
 8006b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dd08      	ble.n	8006b34 <_dtoa_r+0x75c>
 8006b22:	42b3      	cmp	r3, r6
 8006b24:	bfa8      	it	ge
 8006b26:	4633      	movge	r3, r6
 8006b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b2a:	eba8 0803 	sub.w	r8, r8, r3
 8006b2e:	1af6      	subs	r6, r6, r3
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b36:	b1f3      	cbz	r3, 8006b76 <_dtoa_r+0x79e>
 8006b38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 80b7 	beq.w	8006cae <_dtoa_r+0x8d6>
 8006b40:	b18c      	cbz	r4, 8006b66 <_dtoa_r+0x78e>
 8006b42:	4629      	mov	r1, r5
 8006b44:	4622      	mov	r2, r4
 8006b46:	4658      	mov	r0, fp
 8006b48:	f000 fd08 	bl	800755c <__pow5mult>
 8006b4c:	464a      	mov	r2, r9
 8006b4e:	4601      	mov	r1, r0
 8006b50:	4605      	mov	r5, r0
 8006b52:	4658      	mov	r0, fp
 8006b54:	f000 fc5a 	bl	800740c <__multiply>
 8006b58:	4649      	mov	r1, r9
 8006b5a:	9004      	str	r0, [sp, #16]
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	f000 fb41 	bl	80071e4 <_Bfree>
 8006b62:	9b04      	ldr	r3, [sp, #16]
 8006b64:	4699      	mov	r9, r3
 8006b66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b68:	1b1a      	subs	r2, r3, r4
 8006b6a:	d004      	beq.n	8006b76 <_dtoa_r+0x79e>
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	4658      	mov	r0, fp
 8006b70:	f000 fcf4 	bl	800755c <__pow5mult>
 8006b74:	4681      	mov	r9, r0
 8006b76:	2101      	movs	r1, #1
 8006b78:	4658      	mov	r0, fp
 8006b7a:	f000 fc31 	bl	80073e0 <__i2b>
 8006b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b80:	4604      	mov	r4, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 81c9 	beq.w	8006f1a <_dtoa_r+0xb42>
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	4658      	mov	r0, fp
 8006b8e:	f000 fce5 	bl	800755c <__pow5mult>
 8006b92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b94:	4604      	mov	r4, r0
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	f300 808f 	bgt.w	8006cba <_dtoa_r+0x8e2>
 8006b9c:	9b02      	ldr	r3, [sp, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f040 8087 	bne.w	8006cb2 <_dtoa_r+0x8da>
 8006ba4:	9b03      	ldr	r3, [sp, #12]
 8006ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 8083 	bne.w	8006cb6 <_dtoa_r+0x8de>
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bb6:	0d1b      	lsrs	r3, r3, #20
 8006bb8:	051b      	lsls	r3, r3, #20
 8006bba:	b12b      	cbz	r3, 8006bc8 <_dtoa_r+0x7f0>
 8006bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bbe:	f108 0801 	add.w	r8, r8, #1
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 81aa 	beq.w	8006f26 <_dtoa_r+0xb4e>
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bd8:	6918      	ldr	r0, [r3, #16]
 8006bda:	f000 fbb5 	bl	8007348 <__hi0bits>
 8006bde:	f1c0 0020 	rsb	r0, r0, #32
 8006be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be4:	4418      	add	r0, r3
 8006be6:	f010 001f 	ands.w	r0, r0, #31
 8006bea:	d071      	beq.n	8006cd0 <_dtoa_r+0x8f8>
 8006bec:	f1c0 0320 	rsb	r3, r0, #32
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	dd65      	ble.n	8006cc0 <_dtoa_r+0x8e8>
 8006bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bf6:	f1c0 001c 	rsb	r0, r0, #28
 8006bfa:	4403      	add	r3, r0
 8006bfc:	4480      	add	r8, r0
 8006bfe:	4406      	add	r6, r0
 8006c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c02:	f1b8 0f00 	cmp.w	r8, #0
 8006c06:	dd05      	ble.n	8006c14 <_dtoa_r+0x83c>
 8006c08:	4649      	mov	r1, r9
 8006c0a:	4642      	mov	r2, r8
 8006c0c:	4658      	mov	r0, fp
 8006c0e:	f000 fcff 	bl	8007610 <__lshift>
 8006c12:	4681      	mov	r9, r0
 8006c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dd05      	ble.n	8006c26 <_dtoa_r+0x84e>
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	4658      	mov	r0, fp
 8006c20:	f000 fcf6 	bl	8007610 <__lshift>
 8006c24:	4604      	mov	r4, r0
 8006c26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d053      	beq.n	8006cd4 <_dtoa_r+0x8fc>
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4648      	mov	r0, r9
 8006c30:	f000 fd5a 	bl	80076e8 <__mcmp>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	da4d      	bge.n	8006cd4 <_dtoa_r+0x8fc>
 8006c38:	1e7b      	subs	r3, r7, #1
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	9304      	str	r3, [sp, #16]
 8006c3e:	220a      	movs	r2, #10
 8006c40:	2300      	movs	r3, #0
 8006c42:	4658      	mov	r0, fp
 8006c44:	f000 faf0 	bl	8007228 <__multadd>
 8006c48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c4a:	4681      	mov	r9, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 816c 	beq.w	8006f2a <_dtoa_r+0xb52>
 8006c52:	2300      	movs	r3, #0
 8006c54:	4629      	mov	r1, r5
 8006c56:	220a      	movs	r2, #10
 8006c58:	4658      	mov	r0, fp
 8006c5a:	f000 fae5 	bl	8007228 <__multadd>
 8006c5e:	9b08      	ldr	r3, [sp, #32]
 8006c60:	4605      	mov	r5, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	dc61      	bgt.n	8006d2a <_dtoa_r+0x952>
 8006c66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	dc3b      	bgt.n	8006ce4 <_dtoa_r+0x90c>
 8006c6c:	e05d      	b.n	8006d2a <_dtoa_r+0x952>
 8006c6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c70:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c74:	e746      	b.n	8006b04 <_dtoa_r+0x72c>
 8006c76:	9b07      	ldr	r3, [sp, #28]
 8006c78:	1e5c      	subs	r4, r3, #1
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c7c:	42a3      	cmp	r3, r4
 8006c7e:	bfbf      	itttt	lt
 8006c80:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c82:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006c84:	1ae3      	sublt	r3, r4, r3
 8006c86:	18d2      	addlt	r2, r2, r3
 8006c88:	bfa8      	it	ge
 8006c8a:	1b1c      	subge	r4, r3, r4
 8006c8c:	9b07      	ldr	r3, [sp, #28]
 8006c8e:	bfbe      	ittt	lt
 8006c90:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c92:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006c94:	2400      	movlt	r4, #0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	bfb5      	itete	lt
 8006c9a:	eba8 0603 	sublt.w	r6, r8, r3
 8006c9e:	4646      	movge	r6, r8
 8006ca0:	2300      	movlt	r3, #0
 8006ca2:	9b07      	ldrge	r3, [sp, #28]
 8006ca4:	e730      	b.n	8006b08 <_dtoa_r+0x730>
 8006ca6:	4646      	mov	r6, r8
 8006ca8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006caa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006cac:	e735      	b.n	8006b1a <_dtoa_r+0x742>
 8006cae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cb0:	e75c      	b.n	8006b6c <_dtoa_r+0x794>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e788      	b.n	8006bc8 <_dtoa_r+0x7f0>
 8006cb6:	9b02      	ldr	r3, [sp, #8]
 8006cb8:	e786      	b.n	8006bc8 <_dtoa_r+0x7f0>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cbe:	e788      	b.n	8006bd2 <_dtoa_r+0x7fa>
 8006cc0:	d09f      	beq.n	8006c02 <_dtoa_r+0x82a>
 8006cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc4:	331c      	adds	r3, #28
 8006cc6:	441a      	add	r2, r3
 8006cc8:	4498      	add	r8, r3
 8006cca:	441e      	add	r6, r3
 8006ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cce:	e798      	b.n	8006c02 <_dtoa_r+0x82a>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	e7f6      	b.n	8006cc2 <_dtoa_r+0x8ea>
 8006cd4:	9b07      	ldr	r3, [sp, #28]
 8006cd6:	9704      	str	r7, [sp, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	dc20      	bgt.n	8006d1e <_dtoa_r+0x946>
 8006cdc:	9308      	str	r3, [sp, #32]
 8006cde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	dd1e      	ble.n	8006d22 <_dtoa_r+0x94a>
 8006ce4:	9b08      	ldr	r3, [sp, #32]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f47f aebc 	bne.w	8006a64 <_dtoa_r+0x68c>
 8006cec:	4621      	mov	r1, r4
 8006cee:	2205      	movs	r2, #5
 8006cf0:	4658      	mov	r0, fp
 8006cf2:	f000 fa99 	bl	8007228 <__multadd>
 8006cf6:	4601      	mov	r1, r0
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	4648      	mov	r0, r9
 8006cfc:	f000 fcf4 	bl	80076e8 <__mcmp>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f77f aeaf 	ble.w	8006a64 <_dtoa_r+0x68c>
 8006d06:	2331      	movs	r3, #49	@ 0x31
 8006d08:	4656      	mov	r6, sl
 8006d0a:	f806 3b01 	strb.w	r3, [r6], #1
 8006d0e:	9b04      	ldr	r3, [sp, #16]
 8006d10:	3301      	adds	r3, #1
 8006d12:	9304      	str	r3, [sp, #16]
 8006d14:	e6aa      	b.n	8006a6c <_dtoa_r+0x694>
 8006d16:	9c07      	ldr	r4, [sp, #28]
 8006d18:	9704      	str	r7, [sp, #16]
 8006d1a:	4625      	mov	r5, r4
 8006d1c:	e7f3      	b.n	8006d06 <_dtoa_r+0x92e>
 8006d1e:	9b07      	ldr	r3, [sp, #28]
 8006d20:	9308      	str	r3, [sp, #32]
 8006d22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8104 	beq.w	8006f32 <_dtoa_r+0xb5a>
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	dd05      	ble.n	8006d3a <_dtoa_r+0x962>
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4632      	mov	r2, r6
 8006d32:	4658      	mov	r0, fp
 8006d34:	f000 fc6c 	bl	8007610 <__lshift>
 8006d38:	4605      	mov	r5, r0
 8006d3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d05a      	beq.n	8006df6 <_dtoa_r+0xa1e>
 8006d40:	4658      	mov	r0, fp
 8006d42:	6869      	ldr	r1, [r5, #4]
 8006d44:	f000 fa0e 	bl	8007164 <_Balloc>
 8006d48:	4606      	mov	r6, r0
 8006d4a:	b928      	cbnz	r0, 8006d58 <_dtoa_r+0x980>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d52:	4b83      	ldr	r3, [pc, #524]	@ (8006f60 <_dtoa_r+0xb88>)
 8006d54:	f7ff bb54 	b.w	8006400 <_dtoa_r+0x28>
 8006d58:	692a      	ldr	r2, [r5, #16]
 8006d5a:	f105 010c 	add.w	r1, r5, #12
 8006d5e:	3202      	adds	r2, #2
 8006d60:	0092      	lsls	r2, r2, #2
 8006d62:	300c      	adds	r0, #12
 8006d64:	f7ff fa7e 	bl	8006264 <memcpy>
 8006d68:	2201      	movs	r2, #1
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4658      	mov	r0, fp
 8006d6e:	f000 fc4f 	bl	8007610 <__lshift>
 8006d72:	462f      	mov	r7, r5
 8006d74:	4605      	mov	r5, r0
 8006d76:	f10a 0301 	add.w	r3, sl, #1
 8006d7a:	9307      	str	r3, [sp, #28]
 8006d7c:	9b08      	ldr	r3, [sp, #32]
 8006d7e:	4453      	add	r3, sl
 8006d80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d82:	9b02      	ldr	r3, [sp, #8]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d8a:	9b07      	ldr	r3, [sp, #28]
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	4648      	mov	r0, r9
 8006d92:	9302      	str	r3, [sp, #8]
 8006d94:	f7ff fa96 	bl	80062c4 <quorem>
 8006d98:	4639      	mov	r1, r7
 8006d9a:	9008      	str	r0, [sp, #32]
 8006d9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006da0:	4648      	mov	r0, r9
 8006da2:	f000 fca1 	bl	80076e8 <__mcmp>
 8006da6:	462a      	mov	r2, r5
 8006da8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006daa:	4621      	mov	r1, r4
 8006dac:	4658      	mov	r0, fp
 8006dae:	f000 fcb7 	bl	8007720 <__mdiff>
 8006db2:	68c2      	ldr	r2, [r0, #12]
 8006db4:	4606      	mov	r6, r0
 8006db6:	bb02      	cbnz	r2, 8006dfa <_dtoa_r+0xa22>
 8006db8:	4601      	mov	r1, r0
 8006dba:	4648      	mov	r0, r9
 8006dbc:	f000 fc94 	bl	80076e8 <__mcmp>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4658      	mov	r0, fp
 8006dc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006dc8:	f000 fa0c 	bl	80071e4 <_Bfree>
 8006dcc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006dd0:	9e07      	ldr	r6, [sp, #28]
 8006dd2:	ea43 0102 	orr.w	r1, r3, r2
 8006dd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dd8:	4319      	orrs	r1, r3
 8006dda:	d110      	bne.n	8006dfe <_dtoa_r+0xa26>
 8006ddc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006de0:	d029      	beq.n	8006e36 <_dtoa_r+0xa5e>
 8006de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dd02      	ble.n	8006dee <_dtoa_r+0xa16>
 8006de8:	9b08      	ldr	r3, [sp, #32]
 8006dea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006dee:	9b02      	ldr	r3, [sp, #8]
 8006df0:	f883 8000 	strb.w	r8, [r3]
 8006df4:	e63b      	b.n	8006a6e <_dtoa_r+0x696>
 8006df6:	4628      	mov	r0, r5
 8006df8:	e7bb      	b.n	8006d72 <_dtoa_r+0x99a>
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	e7e1      	b.n	8006dc2 <_dtoa_r+0x9ea>
 8006dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	db04      	blt.n	8006e0e <_dtoa_r+0xa36>
 8006e04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006e06:	430b      	orrs	r3, r1
 8006e08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	d120      	bne.n	8006e50 <_dtoa_r+0xa78>
 8006e0e:	2a00      	cmp	r2, #0
 8006e10:	dded      	ble.n	8006dee <_dtoa_r+0xa16>
 8006e12:	4649      	mov	r1, r9
 8006e14:	2201      	movs	r2, #1
 8006e16:	4658      	mov	r0, fp
 8006e18:	f000 fbfa 	bl	8007610 <__lshift>
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4681      	mov	r9, r0
 8006e20:	f000 fc62 	bl	80076e8 <__mcmp>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	dc03      	bgt.n	8006e30 <_dtoa_r+0xa58>
 8006e28:	d1e1      	bne.n	8006dee <_dtoa_r+0xa16>
 8006e2a:	f018 0f01 	tst.w	r8, #1
 8006e2e:	d0de      	beq.n	8006dee <_dtoa_r+0xa16>
 8006e30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e34:	d1d8      	bne.n	8006de8 <_dtoa_r+0xa10>
 8006e36:	2339      	movs	r3, #57	@ 0x39
 8006e38:	9a02      	ldr	r2, [sp, #8]
 8006e3a:	7013      	strb	r3, [r2, #0]
 8006e3c:	4633      	mov	r3, r6
 8006e3e:	461e      	mov	r6, r3
 8006e40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	2a39      	cmp	r2, #57	@ 0x39
 8006e48:	d052      	beq.n	8006ef0 <_dtoa_r+0xb18>
 8006e4a:	3201      	adds	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e60e      	b.n	8006a6e <_dtoa_r+0x696>
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	dd07      	ble.n	8006e64 <_dtoa_r+0xa8c>
 8006e54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e58:	d0ed      	beq.n	8006e36 <_dtoa_r+0xa5e>
 8006e5a:	9a02      	ldr	r2, [sp, #8]
 8006e5c:	f108 0301 	add.w	r3, r8, #1
 8006e60:	7013      	strb	r3, [r2, #0]
 8006e62:	e604      	b.n	8006a6e <_dtoa_r+0x696>
 8006e64:	9b07      	ldr	r3, [sp, #28]
 8006e66:	9a07      	ldr	r2, [sp, #28]
 8006e68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006e6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d028      	beq.n	8006ec4 <_dtoa_r+0xaec>
 8006e72:	4649      	mov	r1, r9
 8006e74:	2300      	movs	r3, #0
 8006e76:	220a      	movs	r2, #10
 8006e78:	4658      	mov	r0, fp
 8006e7a:	f000 f9d5 	bl	8007228 <__multadd>
 8006e7e:	42af      	cmp	r7, r5
 8006e80:	4681      	mov	r9, r0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	f04f 020a 	mov.w	r2, #10
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	4658      	mov	r0, fp
 8006e8e:	d107      	bne.n	8006ea0 <_dtoa_r+0xac8>
 8006e90:	f000 f9ca 	bl	8007228 <__multadd>
 8006e94:	4607      	mov	r7, r0
 8006e96:	4605      	mov	r5, r0
 8006e98:	9b07      	ldr	r3, [sp, #28]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	9307      	str	r3, [sp, #28]
 8006e9e:	e774      	b.n	8006d8a <_dtoa_r+0x9b2>
 8006ea0:	f000 f9c2 	bl	8007228 <__multadd>
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	220a      	movs	r2, #10
 8006eac:	4658      	mov	r0, fp
 8006eae:	f000 f9bb 	bl	8007228 <__multadd>
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	e7f0      	b.n	8006e98 <_dtoa_r+0xac0>
 8006eb6:	9b08      	ldr	r3, [sp, #32]
 8006eb8:	2700      	movs	r7, #0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bfcc      	ite	gt
 8006ebe:	461e      	movgt	r6, r3
 8006ec0:	2601      	movle	r6, #1
 8006ec2:	4456      	add	r6, sl
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4658      	mov	r0, fp
 8006eca:	f000 fba1 	bl	8007610 <__lshift>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4681      	mov	r9, r0
 8006ed2:	f000 fc09 	bl	80076e8 <__mcmp>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	dcb0      	bgt.n	8006e3c <_dtoa_r+0xa64>
 8006eda:	d102      	bne.n	8006ee2 <_dtoa_r+0xb0a>
 8006edc:	f018 0f01 	tst.w	r8, #1
 8006ee0:	d1ac      	bne.n	8006e3c <_dtoa_r+0xa64>
 8006ee2:	4633      	mov	r3, r6
 8006ee4:	461e      	mov	r6, r3
 8006ee6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eea:	2a30      	cmp	r2, #48	@ 0x30
 8006eec:	d0fa      	beq.n	8006ee4 <_dtoa_r+0xb0c>
 8006eee:	e5be      	b.n	8006a6e <_dtoa_r+0x696>
 8006ef0:	459a      	cmp	sl, r3
 8006ef2:	d1a4      	bne.n	8006e3e <_dtoa_r+0xa66>
 8006ef4:	9b04      	ldr	r3, [sp, #16]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	9304      	str	r3, [sp, #16]
 8006efa:	2331      	movs	r3, #49	@ 0x31
 8006efc:	f88a 3000 	strb.w	r3, [sl]
 8006f00:	e5b5      	b.n	8006a6e <_dtoa_r+0x696>
 8006f02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006f04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006f64 <_dtoa_r+0xb8c>
 8006f08:	b11b      	cbz	r3, 8006f12 <_dtoa_r+0xb3a>
 8006f0a:	f10a 0308 	add.w	r3, sl, #8
 8006f0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	4650      	mov	r0, sl
 8006f14:	b017      	add	sp, #92	@ 0x5c
 8006f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	f77f ae3d 	ble.w	8006b9c <_dtoa_r+0x7c4>
 8006f22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f24:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f26:	2001      	movs	r0, #1
 8006f28:	e65b      	b.n	8006be2 <_dtoa_r+0x80a>
 8006f2a:	9b08      	ldr	r3, [sp, #32]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f77f aed6 	ble.w	8006cde <_dtoa_r+0x906>
 8006f32:	4656      	mov	r6, sl
 8006f34:	4621      	mov	r1, r4
 8006f36:	4648      	mov	r0, r9
 8006f38:	f7ff f9c4 	bl	80062c4 <quorem>
 8006f3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f40:	9b08      	ldr	r3, [sp, #32]
 8006f42:	f806 8b01 	strb.w	r8, [r6], #1
 8006f46:	eba6 020a 	sub.w	r2, r6, sl
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	ddb3      	ble.n	8006eb6 <_dtoa_r+0xade>
 8006f4e:	4649      	mov	r1, r9
 8006f50:	2300      	movs	r3, #0
 8006f52:	220a      	movs	r2, #10
 8006f54:	4658      	mov	r0, fp
 8006f56:	f000 f967 	bl	8007228 <__multadd>
 8006f5a:	4681      	mov	r9, r0
 8006f5c:	e7ea      	b.n	8006f34 <_dtoa_r+0xb5c>
 8006f5e:	bf00      	nop
 8006f60:	08009f58 	.word	0x08009f58
 8006f64:	08009ef3 	.word	0x08009ef3

08006f68 <_free_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	d040      	beq.n	8006ff2 <_free_r+0x8a>
 8006f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f74:	1f0c      	subs	r4, r1, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfb8      	it	lt
 8006f7a:	18e4      	addlt	r4, r4, r3
 8006f7c:	f000 f8e6 	bl	800714c <__malloc_lock>
 8006f80:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff4 <_free_r+0x8c>)
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	b933      	cbnz	r3, 8006f94 <_free_r+0x2c>
 8006f86:	6063      	str	r3, [r4, #4]
 8006f88:	6014      	str	r4, [r2, #0]
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f90:	f000 b8e2 	b.w	8007158 <__malloc_unlock>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d908      	bls.n	8006faa <_free_r+0x42>
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	1821      	adds	r1, r4, r0
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	bf01      	itttt	eq
 8006fa0:	6819      	ldreq	r1, [r3, #0]
 8006fa2:	685b      	ldreq	r3, [r3, #4]
 8006fa4:	1809      	addeq	r1, r1, r0
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	e7ed      	b.n	8006f86 <_free_r+0x1e>
 8006faa:	461a      	mov	r2, r3
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	b10b      	cbz	r3, 8006fb4 <_free_r+0x4c>
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	d9fa      	bls.n	8006faa <_free_r+0x42>
 8006fb4:	6811      	ldr	r1, [r2, #0]
 8006fb6:	1850      	adds	r0, r2, r1
 8006fb8:	42a0      	cmp	r0, r4
 8006fba:	d10b      	bne.n	8006fd4 <_free_r+0x6c>
 8006fbc:	6820      	ldr	r0, [r4, #0]
 8006fbe:	4401      	add	r1, r0
 8006fc0:	1850      	adds	r0, r2, r1
 8006fc2:	4283      	cmp	r3, r0
 8006fc4:	6011      	str	r1, [r2, #0]
 8006fc6:	d1e0      	bne.n	8006f8a <_free_r+0x22>
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	4408      	add	r0, r1
 8006fce:	6010      	str	r0, [r2, #0]
 8006fd0:	6053      	str	r3, [r2, #4]
 8006fd2:	e7da      	b.n	8006f8a <_free_r+0x22>
 8006fd4:	d902      	bls.n	8006fdc <_free_r+0x74>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	602b      	str	r3, [r5, #0]
 8006fda:	e7d6      	b.n	8006f8a <_free_r+0x22>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	1821      	adds	r1, r4, r0
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	bf01      	itttt	eq
 8006fe4:	6819      	ldreq	r1, [r3, #0]
 8006fe6:	685b      	ldreq	r3, [r3, #4]
 8006fe8:	1809      	addeq	r1, r1, r0
 8006fea:	6021      	streq	r1, [r4, #0]
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	6054      	str	r4, [r2, #4]
 8006ff0:	e7cb      	b.n	8006f8a <_free_r+0x22>
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	200007e8 	.word	0x200007e8

08006ff8 <malloc>:
 8006ff8:	4b02      	ldr	r3, [pc, #8]	@ (8007004 <malloc+0xc>)
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	f000 b825 	b.w	800704c <_malloc_r>
 8007002:	bf00      	nop
 8007004:	20000018 	.word	0x20000018

08007008 <sbrk_aligned>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	4e0f      	ldr	r6, [pc, #60]	@ (8007048 <sbrk_aligned+0x40>)
 800700c:	460c      	mov	r4, r1
 800700e:	6831      	ldr	r1, [r6, #0]
 8007010:	4605      	mov	r5, r0
 8007012:	b911      	cbnz	r1, 800701a <sbrk_aligned+0x12>
 8007014:	f001 fef0 	bl	8008df8 <_sbrk_r>
 8007018:	6030      	str	r0, [r6, #0]
 800701a:	4621      	mov	r1, r4
 800701c:	4628      	mov	r0, r5
 800701e:	f001 feeb 	bl	8008df8 <_sbrk_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	d103      	bne.n	800702e <sbrk_aligned+0x26>
 8007026:	f04f 34ff 	mov.w	r4, #4294967295
 800702a:	4620      	mov	r0, r4
 800702c:	bd70      	pop	{r4, r5, r6, pc}
 800702e:	1cc4      	adds	r4, r0, #3
 8007030:	f024 0403 	bic.w	r4, r4, #3
 8007034:	42a0      	cmp	r0, r4
 8007036:	d0f8      	beq.n	800702a <sbrk_aligned+0x22>
 8007038:	1a21      	subs	r1, r4, r0
 800703a:	4628      	mov	r0, r5
 800703c:	f001 fedc 	bl	8008df8 <_sbrk_r>
 8007040:	3001      	adds	r0, #1
 8007042:	d1f2      	bne.n	800702a <sbrk_aligned+0x22>
 8007044:	e7ef      	b.n	8007026 <sbrk_aligned+0x1e>
 8007046:	bf00      	nop
 8007048:	200007e4 	.word	0x200007e4

0800704c <_malloc_r>:
 800704c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007050:	1ccd      	adds	r5, r1, #3
 8007052:	f025 0503 	bic.w	r5, r5, #3
 8007056:	3508      	adds	r5, #8
 8007058:	2d0c      	cmp	r5, #12
 800705a:	bf38      	it	cc
 800705c:	250c      	movcc	r5, #12
 800705e:	2d00      	cmp	r5, #0
 8007060:	4606      	mov	r6, r0
 8007062:	db01      	blt.n	8007068 <_malloc_r+0x1c>
 8007064:	42a9      	cmp	r1, r5
 8007066:	d904      	bls.n	8007072 <_malloc_r+0x26>
 8007068:	230c      	movs	r3, #12
 800706a:	6033      	str	r3, [r6, #0]
 800706c:	2000      	movs	r0, #0
 800706e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007148 <_malloc_r+0xfc>
 8007076:	f000 f869 	bl	800714c <__malloc_lock>
 800707a:	f8d8 3000 	ldr.w	r3, [r8]
 800707e:	461c      	mov	r4, r3
 8007080:	bb44      	cbnz	r4, 80070d4 <_malloc_r+0x88>
 8007082:	4629      	mov	r1, r5
 8007084:	4630      	mov	r0, r6
 8007086:	f7ff ffbf 	bl	8007008 <sbrk_aligned>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	4604      	mov	r4, r0
 800708e:	d158      	bne.n	8007142 <_malloc_r+0xf6>
 8007090:	f8d8 4000 	ldr.w	r4, [r8]
 8007094:	4627      	mov	r7, r4
 8007096:	2f00      	cmp	r7, #0
 8007098:	d143      	bne.n	8007122 <_malloc_r+0xd6>
 800709a:	2c00      	cmp	r4, #0
 800709c:	d04b      	beq.n	8007136 <_malloc_r+0xea>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	4639      	mov	r1, r7
 80070a2:	4630      	mov	r0, r6
 80070a4:	eb04 0903 	add.w	r9, r4, r3
 80070a8:	f001 fea6 	bl	8008df8 <_sbrk_r>
 80070ac:	4581      	cmp	r9, r0
 80070ae:	d142      	bne.n	8007136 <_malloc_r+0xea>
 80070b0:	6821      	ldr	r1, [r4, #0]
 80070b2:	4630      	mov	r0, r6
 80070b4:	1a6d      	subs	r5, r5, r1
 80070b6:	4629      	mov	r1, r5
 80070b8:	f7ff ffa6 	bl	8007008 <sbrk_aligned>
 80070bc:	3001      	adds	r0, #1
 80070be:	d03a      	beq.n	8007136 <_malloc_r+0xea>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	442b      	add	r3, r5
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	f8d8 3000 	ldr.w	r3, [r8]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	bb62      	cbnz	r2, 8007128 <_malloc_r+0xdc>
 80070ce:	f8c8 7000 	str.w	r7, [r8]
 80070d2:	e00f      	b.n	80070f4 <_malloc_r+0xa8>
 80070d4:	6822      	ldr	r2, [r4, #0]
 80070d6:	1b52      	subs	r2, r2, r5
 80070d8:	d420      	bmi.n	800711c <_malloc_r+0xd0>
 80070da:	2a0b      	cmp	r2, #11
 80070dc:	d917      	bls.n	800710e <_malloc_r+0xc2>
 80070de:	1961      	adds	r1, r4, r5
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	6025      	str	r5, [r4, #0]
 80070e4:	bf18      	it	ne
 80070e6:	6059      	strne	r1, [r3, #4]
 80070e8:	6863      	ldr	r3, [r4, #4]
 80070ea:	bf08      	it	eq
 80070ec:	f8c8 1000 	streq.w	r1, [r8]
 80070f0:	5162      	str	r2, [r4, r5]
 80070f2:	604b      	str	r3, [r1, #4]
 80070f4:	4630      	mov	r0, r6
 80070f6:	f000 f82f 	bl	8007158 <__malloc_unlock>
 80070fa:	f104 000b 	add.w	r0, r4, #11
 80070fe:	1d23      	adds	r3, r4, #4
 8007100:	f020 0007 	bic.w	r0, r0, #7
 8007104:	1ac2      	subs	r2, r0, r3
 8007106:	bf1c      	itt	ne
 8007108:	1a1b      	subne	r3, r3, r0
 800710a:	50a3      	strne	r3, [r4, r2]
 800710c:	e7af      	b.n	800706e <_malloc_r+0x22>
 800710e:	6862      	ldr	r2, [r4, #4]
 8007110:	42a3      	cmp	r3, r4
 8007112:	bf0c      	ite	eq
 8007114:	f8c8 2000 	streq.w	r2, [r8]
 8007118:	605a      	strne	r2, [r3, #4]
 800711a:	e7eb      	b.n	80070f4 <_malloc_r+0xa8>
 800711c:	4623      	mov	r3, r4
 800711e:	6864      	ldr	r4, [r4, #4]
 8007120:	e7ae      	b.n	8007080 <_malloc_r+0x34>
 8007122:	463c      	mov	r4, r7
 8007124:	687f      	ldr	r7, [r7, #4]
 8007126:	e7b6      	b.n	8007096 <_malloc_r+0x4a>
 8007128:	461a      	mov	r2, r3
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	42a3      	cmp	r3, r4
 800712e:	d1fb      	bne.n	8007128 <_malloc_r+0xdc>
 8007130:	2300      	movs	r3, #0
 8007132:	6053      	str	r3, [r2, #4]
 8007134:	e7de      	b.n	80070f4 <_malloc_r+0xa8>
 8007136:	230c      	movs	r3, #12
 8007138:	4630      	mov	r0, r6
 800713a:	6033      	str	r3, [r6, #0]
 800713c:	f000 f80c 	bl	8007158 <__malloc_unlock>
 8007140:	e794      	b.n	800706c <_malloc_r+0x20>
 8007142:	6005      	str	r5, [r0, #0]
 8007144:	e7d6      	b.n	80070f4 <_malloc_r+0xa8>
 8007146:	bf00      	nop
 8007148:	200007e8 	.word	0x200007e8

0800714c <__malloc_lock>:
 800714c:	4801      	ldr	r0, [pc, #4]	@ (8007154 <__malloc_lock+0x8>)
 800714e:	f7ff b879 	b.w	8006244 <__retarget_lock_acquire_recursive>
 8007152:	bf00      	nop
 8007154:	200007e0 	.word	0x200007e0

08007158 <__malloc_unlock>:
 8007158:	4801      	ldr	r0, [pc, #4]	@ (8007160 <__malloc_unlock+0x8>)
 800715a:	f7ff b874 	b.w	8006246 <__retarget_lock_release_recursive>
 800715e:	bf00      	nop
 8007160:	200007e0 	.word	0x200007e0

08007164 <_Balloc>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	69c6      	ldr	r6, [r0, #28]
 8007168:	4604      	mov	r4, r0
 800716a:	460d      	mov	r5, r1
 800716c:	b976      	cbnz	r6, 800718c <_Balloc+0x28>
 800716e:	2010      	movs	r0, #16
 8007170:	f7ff ff42 	bl	8006ff8 <malloc>
 8007174:	4602      	mov	r2, r0
 8007176:	61e0      	str	r0, [r4, #28]
 8007178:	b920      	cbnz	r0, 8007184 <_Balloc+0x20>
 800717a:	216b      	movs	r1, #107	@ 0x6b
 800717c:	4b17      	ldr	r3, [pc, #92]	@ (80071dc <_Balloc+0x78>)
 800717e:	4818      	ldr	r0, [pc, #96]	@ (80071e0 <_Balloc+0x7c>)
 8007180:	f7ff f882 	bl	8006288 <__assert_func>
 8007184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007188:	6006      	str	r6, [r0, #0]
 800718a:	60c6      	str	r6, [r0, #12]
 800718c:	69e6      	ldr	r6, [r4, #28]
 800718e:	68f3      	ldr	r3, [r6, #12]
 8007190:	b183      	cbz	r3, 80071b4 <_Balloc+0x50>
 8007192:	69e3      	ldr	r3, [r4, #28]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800719a:	b9b8      	cbnz	r0, 80071cc <_Balloc+0x68>
 800719c:	2101      	movs	r1, #1
 800719e:	fa01 f605 	lsl.w	r6, r1, r5
 80071a2:	1d72      	adds	r2, r6, #5
 80071a4:	4620      	mov	r0, r4
 80071a6:	0092      	lsls	r2, r2, #2
 80071a8:	f001 fe43 	bl	8008e32 <_calloc_r>
 80071ac:	b160      	cbz	r0, 80071c8 <_Balloc+0x64>
 80071ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071b2:	e00e      	b.n	80071d2 <_Balloc+0x6e>
 80071b4:	2221      	movs	r2, #33	@ 0x21
 80071b6:	2104      	movs	r1, #4
 80071b8:	4620      	mov	r0, r4
 80071ba:	f001 fe3a 	bl	8008e32 <_calloc_r>
 80071be:	69e3      	ldr	r3, [r4, #28]
 80071c0:	60f0      	str	r0, [r6, #12]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e4      	bne.n	8007192 <_Balloc+0x2e>
 80071c8:	2000      	movs	r0, #0
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	6802      	ldr	r2, [r0, #0]
 80071ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071d2:	2300      	movs	r3, #0
 80071d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071d8:	e7f7      	b.n	80071ca <_Balloc+0x66>
 80071da:	bf00      	nop
 80071dc:	08009e46 	.word	0x08009e46
 80071e0:	08009f69 	.word	0x08009f69

080071e4 <_Bfree>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	69c6      	ldr	r6, [r0, #28]
 80071e8:	4605      	mov	r5, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	b976      	cbnz	r6, 800720c <_Bfree+0x28>
 80071ee:	2010      	movs	r0, #16
 80071f0:	f7ff ff02 	bl	8006ff8 <malloc>
 80071f4:	4602      	mov	r2, r0
 80071f6:	61e8      	str	r0, [r5, #28]
 80071f8:	b920      	cbnz	r0, 8007204 <_Bfree+0x20>
 80071fa:	218f      	movs	r1, #143	@ 0x8f
 80071fc:	4b08      	ldr	r3, [pc, #32]	@ (8007220 <_Bfree+0x3c>)
 80071fe:	4809      	ldr	r0, [pc, #36]	@ (8007224 <_Bfree+0x40>)
 8007200:	f7ff f842 	bl	8006288 <__assert_func>
 8007204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007208:	6006      	str	r6, [r0, #0]
 800720a:	60c6      	str	r6, [r0, #12]
 800720c:	b13c      	cbz	r4, 800721e <_Bfree+0x3a>
 800720e:	69eb      	ldr	r3, [r5, #28]
 8007210:	6862      	ldr	r2, [r4, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007218:	6021      	str	r1, [r4, #0]
 800721a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	08009e46 	.word	0x08009e46
 8007224:	08009f69 	.word	0x08009f69

08007228 <__multadd>:
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	4607      	mov	r7, r0
 800722e:	460c      	mov	r4, r1
 8007230:	461e      	mov	r6, r3
 8007232:	2000      	movs	r0, #0
 8007234:	690d      	ldr	r5, [r1, #16]
 8007236:	f101 0c14 	add.w	ip, r1, #20
 800723a:	f8dc 3000 	ldr.w	r3, [ip]
 800723e:	3001      	adds	r0, #1
 8007240:	b299      	uxth	r1, r3
 8007242:	fb02 6101 	mla	r1, r2, r1, r6
 8007246:	0c1e      	lsrs	r6, r3, #16
 8007248:	0c0b      	lsrs	r3, r1, #16
 800724a:	fb02 3306 	mla	r3, r2, r6, r3
 800724e:	b289      	uxth	r1, r1
 8007250:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007254:	4285      	cmp	r5, r0
 8007256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800725a:	f84c 1b04 	str.w	r1, [ip], #4
 800725e:	dcec      	bgt.n	800723a <__multadd+0x12>
 8007260:	b30e      	cbz	r6, 80072a6 <__multadd+0x7e>
 8007262:	68a3      	ldr	r3, [r4, #8]
 8007264:	42ab      	cmp	r3, r5
 8007266:	dc19      	bgt.n	800729c <__multadd+0x74>
 8007268:	6861      	ldr	r1, [r4, #4]
 800726a:	4638      	mov	r0, r7
 800726c:	3101      	adds	r1, #1
 800726e:	f7ff ff79 	bl	8007164 <_Balloc>
 8007272:	4680      	mov	r8, r0
 8007274:	b928      	cbnz	r0, 8007282 <__multadd+0x5a>
 8007276:	4602      	mov	r2, r0
 8007278:	21ba      	movs	r1, #186	@ 0xba
 800727a:	4b0c      	ldr	r3, [pc, #48]	@ (80072ac <__multadd+0x84>)
 800727c:	480c      	ldr	r0, [pc, #48]	@ (80072b0 <__multadd+0x88>)
 800727e:	f7ff f803 	bl	8006288 <__assert_func>
 8007282:	6922      	ldr	r2, [r4, #16]
 8007284:	f104 010c 	add.w	r1, r4, #12
 8007288:	3202      	adds	r2, #2
 800728a:	0092      	lsls	r2, r2, #2
 800728c:	300c      	adds	r0, #12
 800728e:	f7fe ffe9 	bl	8006264 <memcpy>
 8007292:	4621      	mov	r1, r4
 8007294:	4638      	mov	r0, r7
 8007296:	f7ff ffa5 	bl	80071e4 <_Bfree>
 800729a:	4644      	mov	r4, r8
 800729c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072a0:	3501      	adds	r5, #1
 80072a2:	615e      	str	r6, [r3, #20]
 80072a4:	6125      	str	r5, [r4, #16]
 80072a6:	4620      	mov	r0, r4
 80072a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ac:	08009f58 	.word	0x08009f58
 80072b0:	08009f69 	.word	0x08009f69

080072b4 <__s2b>:
 80072b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b8:	4615      	mov	r5, r2
 80072ba:	2209      	movs	r2, #9
 80072bc:	461f      	mov	r7, r3
 80072be:	3308      	adds	r3, #8
 80072c0:	460c      	mov	r4, r1
 80072c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80072c6:	4606      	mov	r6, r0
 80072c8:	2201      	movs	r2, #1
 80072ca:	2100      	movs	r1, #0
 80072cc:	429a      	cmp	r2, r3
 80072ce:	db09      	blt.n	80072e4 <__s2b+0x30>
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff ff47 	bl	8007164 <_Balloc>
 80072d6:	b940      	cbnz	r0, 80072ea <__s2b+0x36>
 80072d8:	4602      	mov	r2, r0
 80072da:	21d3      	movs	r1, #211	@ 0xd3
 80072dc:	4b18      	ldr	r3, [pc, #96]	@ (8007340 <__s2b+0x8c>)
 80072de:	4819      	ldr	r0, [pc, #100]	@ (8007344 <__s2b+0x90>)
 80072e0:	f7fe ffd2 	bl	8006288 <__assert_func>
 80072e4:	0052      	lsls	r2, r2, #1
 80072e6:	3101      	adds	r1, #1
 80072e8:	e7f0      	b.n	80072cc <__s2b+0x18>
 80072ea:	9b08      	ldr	r3, [sp, #32]
 80072ec:	2d09      	cmp	r5, #9
 80072ee:	6143      	str	r3, [r0, #20]
 80072f0:	f04f 0301 	mov.w	r3, #1
 80072f4:	6103      	str	r3, [r0, #16]
 80072f6:	dd16      	ble.n	8007326 <__s2b+0x72>
 80072f8:	f104 0909 	add.w	r9, r4, #9
 80072fc:	46c8      	mov	r8, r9
 80072fe:	442c      	add	r4, r5
 8007300:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007304:	4601      	mov	r1, r0
 8007306:	220a      	movs	r2, #10
 8007308:	4630      	mov	r0, r6
 800730a:	3b30      	subs	r3, #48	@ 0x30
 800730c:	f7ff ff8c 	bl	8007228 <__multadd>
 8007310:	45a0      	cmp	r8, r4
 8007312:	d1f5      	bne.n	8007300 <__s2b+0x4c>
 8007314:	f1a5 0408 	sub.w	r4, r5, #8
 8007318:	444c      	add	r4, r9
 800731a:	1b2d      	subs	r5, r5, r4
 800731c:	1963      	adds	r3, r4, r5
 800731e:	42bb      	cmp	r3, r7
 8007320:	db04      	blt.n	800732c <__s2b+0x78>
 8007322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007326:	2509      	movs	r5, #9
 8007328:	340a      	adds	r4, #10
 800732a:	e7f6      	b.n	800731a <__s2b+0x66>
 800732c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007330:	4601      	mov	r1, r0
 8007332:	220a      	movs	r2, #10
 8007334:	4630      	mov	r0, r6
 8007336:	3b30      	subs	r3, #48	@ 0x30
 8007338:	f7ff ff76 	bl	8007228 <__multadd>
 800733c:	e7ee      	b.n	800731c <__s2b+0x68>
 800733e:	bf00      	nop
 8007340:	08009f58 	.word	0x08009f58
 8007344:	08009f69 	.word	0x08009f69

08007348 <__hi0bits>:
 8007348:	4603      	mov	r3, r0
 800734a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800734e:	bf3a      	itte	cc
 8007350:	0403      	lslcc	r3, r0, #16
 8007352:	2010      	movcc	r0, #16
 8007354:	2000      	movcs	r0, #0
 8007356:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800735a:	bf3c      	itt	cc
 800735c:	021b      	lslcc	r3, r3, #8
 800735e:	3008      	addcc	r0, #8
 8007360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007364:	bf3c      	itt	cc
 8007366:	011b      	lslcc	r3, r3, #4
 8007368:	3004      	addcc	r0, #4
 800736a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800736e:	bf3c      	itt	cc
 8007370:	009b      	lslcc	r3, r3, #2
 8007372:	3002      	addcc	r0, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	db05      	blt.n	8007384 <__hi0bits+0x3c>
 8007378:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800737c:	f100 0001 	add.w	r0, r0, #1
 8007380:	bf08      	it	eq
 8007382:	2020      	moveq	r0, #32
 8007384:	4770      	bx	lr

08007386 <__lo0bits>:
 8007386:	6803      	ldr	r3, [r0, #0]
 8007388:	4602      	mov	r2, r0
 800738a:	f013 0007 	ands.w	r0, r3, #7
 800738e:	d00b      	beq.n	80073a8 <__lo0bits+0x22>
 8007390:	07d9      	lsls	r1, r3, #31
 8007392:	d421      	bmi.n	80073d8 <__lo0bits+0x52>
 8007394:	0798      	lsls	r0, r3, #30
 8007396:	bf49      	itett	mi
 8007398:	085b      	lsrmi	r3, r3, #1
 800739a:	089b      	lsrpl	r3, r3, #2
 800739c:	2001      	movmi	r0, #1
 800739e:	6013      	strmi	r3, [r2, #0]
 80073a0:	bf5c      	itt	pl
 80073a2:	2002      	movpl	r0, #2
 80073a4:	6013      	strpl	r3, [r2, #0]
 80073a6:	4770      	bx	lr
 80073a8:	b299      	uxth	r1, r3
 80073aa:	b909      	cbnz	r1, 80073b0 <__lo0bits+0x2a>
 80073ac:	2010      	movs	r0, #16
 80073ae:	0c1b      	lsrs	r3, r3, #16
 80073b0:	b2d9      	uxtb	r1, r3
 80073b2:	b909      	cbnz	r1, 80073b8 <__lo0bits+0x32>
 80073b4:	3008      	adds	r0, #8
 80073b6:	0a1b      	lsrs	r3, r3, #8
 80073b8:	0719      	lsls	r1, r3, #28
 80073ba:	bf04      	itt	eq
 80073bc:	091b      	lsreq	r3, r3, #4
 80073be:	3004      	addeq	r0, #4
 80073c0:	0799      	lsls	r1, r3, #30
 80073c2:	bf04      	itt	eq
 80073c4:	089b      	lsreq	r3, r3, #2
 80073c6:	3002      	addeq	r0, #2
 80073c8:	07d9      	lsls	r1, r3, #31
 80073ca:	d403      	bmi.n	80073d4 <__lo0bits+0x4e>
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	f100 0001 	add.w	r0, r0, #1
 80073d2:	d003      	beq.n	80073dc <__lo0bits+0x56>
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	4770      	bx	lr
 80073d8:	2000      	movs	r0, #0
 80073da:	4770      	bx	lr
 80073dc:	2020      	movs	r0, #32
 80073de:	4770      	bx	lr

080073e0 <__i2b>:
 80073e0:	b510      	push	{r4, lr}
 80073e2:	460c      	mov	r4, r1
 80073e4:	2101      	movs	r1, #1
 80073e6:	f7ff febd 	bl	8007164 <_Balloc>
 80073ea:	4602      	mov	r2, r0
 80073ec:	b928      	cbnz	r0, 80073fa <__i2b+0x1a>
 80073ee:	f240 1145 	movw	r1, #325	@ 0x145
 80073f2:	4b04      	ldr	r3, [pc, #16]	@ (8007404 <__i2b+0x24>)
 80073f4:	4804      	ldr	r0, [pc, #16]	@ (8007408 <__i2b+0x28>)
 80073f6:	f7fe ff47 	bl	8006288 <__assert_func>
 80073fa:	2301      	movs	r3, #1
 80073fc:	6144      	str	r4, [r0, #20]
 80073fe:	6103      	str	r3, [r0, #16]
 8007400:	bd10      	pop	{r4, pc}
 8007402:	bf00      	nop
 8007404:	08009f58 	.word	0x08009f58
 8007408:	08009f69 	.word	0x08009f69

0800740c <__multiply>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	4614      	mov	r4, r2
 8007412:	690a      	ldr	r2, [r1, #16]
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	460f      	mov	r7, r1
 8007418:	429a      	cmp	r2, r3
 800741a:	bfa2      	ittt	ge
 800741c:	4623      	movge	r3, r4
 800741e:	460c      	movge	r4, r1
 8007420:	461f      	movge	r7, r3
 8007422:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007426:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800742a:	68a3      	ldr	r3, [r4, #8]
 800742c:	6861      	ldr	r1, [r4, #4]
 800742e:	eb0a 0609 	add.w	r6, sl, r9
 8007432:	42b3      	cmp	r3, r6
 8007434:	b085      	sub	sp, #20
 8007436:	bfb8      	it	lt
 8007438:	3101      	addlt	r1, #1
 800743a:	f7ff fe93 	bl	8007164 <_Balloc>
 800743e:	b930      	cbnz	r0, 800744e <__multiply+0x42>
 8007440:	4602      	mov	r2, r0
 8007442:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007446:	4b43      	ldr	r3, [pc, #268]	@ (8007554 <__multiply+0x148>)
 8007448:	4843      	ldr	r0, [pc, #268]	@ (8007558 <__multiply+0x14c>)
 800744a:	f7fe ff1d 	bl	8006288 <__assert_func>
 800744e:	f100 0514 	add.w	r5, r0, #20
 8007452:	462b      	mov	r3, r5
 8007454:	2200      	movs	r2, #0
 8007456:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800745a:	4543      	cmp	r3, r8
 800745c:	d321      	bcc.n	80074a2 <__multiply+0x96>
 800745e:	f107 0114 	add.w	r1, r7, #20
 8007462:	f104 0214 	add.w	r2, r4, #20
 8007466:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800746a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800746e:	9302      	str	r3, [sp, #8]
 8007470:	1b13      	subs	r3, r2, r4
 8007472:	3b15      	subs	r3, #21
 8007474:	f023 0303 	bic.w	r3, r3, #3
 8007478:	3304      	adds	r3, #4
 800747a:	f104 0715 	add.w	r7, r4, #21
 800747e:	42ba      	cmp	r2, r7
 8007480:	bf38      	it	cc
 8007482:	2304      	movcc	r3, #4
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	9b02      	ldr	r3, [sp, #8]
 8007488:	9103      	str	r1, [sp, #12]
 800748a:	428b      	cmp	r3, r1
 800748c:	d80c      	bhi.n	80074a8 <__multiply+0x9c>
 800748e:	2e00      	cmp	r6, #0
 8007490:	dd03      	ble.n	800749a <__multiply+0x8e>
 8007492:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007496:	2b00      	cmp	r3, #0
 8007498:	d05a      	beq.n	8007550 <__multiply+0x144>
 800749a:	6106      	str	r6, [r0, #16]
 800749c:	b005      	add	sp, #20
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	f843 2b04 	str.w	r2, [r3], #4
 80074a6:	e7d8      	b.n	800745a <__multiply+0x4e>
 80074a8:	f8b1 a000 	ldrh.w	sl, [r1]
 80074ac:	f1ba 0f00 	cmp.w	sl, #0
 80074b0:	d023      	beq.n	80074fa <__multiply+0xee>
 80074b2:	46a9      	mov	r9, r5
 80074b4:	f04f 0c00 	mov.w	ip, #0
 80074b8:	f104 0e14 	add.w	lr, r4, #20
 80074bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074c0:	f8d9 3000 	ldr.w	r3, [r9]
 80074c4:	fa1f fb87 	uxth.w	fp, r7
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	fb0a 330b 	mla	r3, sl, fp, r3
 80074ce:	4463      	add	r3, ip
 80074d0:	f8d9 c000 	ldr.w	ip, [r9]
 80074d4:	0c3f      	lsrs	r7, r7, #16
 80074d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80074da:	fb0a c707 	mla	r7, sl, r7, ip
 80074de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074e8:	4572      	cmp	r2, lr
 80074ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074ee:	f849 3b04 	str.w	r3, [r9], #4
 80074f2:	d8e3      	bhi.n	80074bc <__multiply+0xb0>
 80074f4:	9b01      	ldr	r3, [sp, #4]
 80074f6:	f845 c003 	str.w	ip, [r5, r3]
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	3104      	adds	r1, #4
 80074fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007502:	f1b9 0f00 	cmp.w	r9, #0
 8007506:	d021      	beq.n	800754c <__multiply+0x140>
 8007508:	46ae      	mov	lr, r5
 800750a:	f04f 0a00 	mov.w	sl, #0
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	f104 0c14 	add.w	ip, r4, #20
 8007514:	f8bc b000 	ldrh.w	fp, [ip]
 8007518:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800751c:	b29b      	uxth	r3, r3
 800751e:	fb09 770b 	mla	r7, r9, fp, r7
 8007522:	4457      	add	r7, sl
 8007524:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007528:	f84e 3b04 	str.w	r3, [lr], #4
 800752c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007530:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007534:	f8be 3000 	ldrh.w	r3, [lr]
 8007538:	4562      	cmp	r2, ip
 800753a:	fb09 330a 	mla	r3, r9, sl, r3
 800753e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007542:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007546:	d8e5      	bhi.n	8007514 <__multiply+0x108>
 8007548:	9f01      	ldr	r7, [sp, #4]
 800754a:	51eb      	str	r3, [r5, r7]
 800754c:	3504      	adds	r5, #4
 800754e:	e79a      	b.n	8007486 <__multiply+0x7a>
 8007550:	3e01      	subs	r6, #1
 8007552:	e79c      	b.n	800748e <__multiply+0x82>
 8007554:	08009f58 	.word	0x08009f58
 8007558:	08009f69 	.word	0x08009f69

0800755c <__pow5mult>:
 800755c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007560:	4615      	mov	r5, r2
 8007562:	f012 0203 	ands.w	r2, r2, #3
 8007566:	4607      	mov	r7, r0
 8007568:	460e      	mov	r6, r1
 800756a:	d007      	beq.n	800757c <__pow5mult+0x20>
 800756c:	4c25      	ldr	r4, [pc, #148]	@ (8007604 <__pow5mult+0xa8>)
 800756e:	3a01      	subs	r2, #1
 8007570:	2300      	movs	r3, #0
 8007572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007576:	f7ff fe57 	bl	8007228 <__multadd>
 800757a:	4606      	mov	r6, r0
 800757c:	10ad      	asrs	r5, r5, #2
 800757e:	d03d      	beq.n	80075fc <__pow5mult+0xa0>
 8007580:	69fc      	ldr	r4, [r7, #28]
 8007582:	b97c      	cbnz	r4, 80075a4 <__pow5mult+0x48>
 8007584:	2010      	movs	r0, #16
 8007586:	f7ff fd37 	bl	8006ff8 <malloc>
 800758a:	4602      	mov	r2, r0
 800758c:	61f8      	str	r0, [r7, #28]
 800758e:	b928      	cbnz	r0, 800759c <__pow5mult+0x40>
 8007590:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007594:	4b1c      	ldr	r3, [pc, #112]	@ (8007608 <__pow5mult+0xac>)
 8007596:	481d      	ldr	r0, [pc, #116]	@ (800760c <__pow5mult+0xb0>)
 8007598:	f7fe fe76 	bl	8006288 <__assert_func>
 800759c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075a0:	6004      	str	r4, [r0, #0]
 80075a2:	60c4      	str	r4, [r0, #12]
 80075a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075ac:	b94c      	cbnz	r4, 80075c2 <__pow5mult+0x66>
 80075ae:	f240 2171 	movw	r1, #625	@ 0x271
 80075b2:	4638      	mov	r0, r7
 80075b4:	f7ff ff14 	bl	80073e0 <__i2b>
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80075c0:	6003      	str	r3, [r0, #0]
 80075c2:	f04f 0900 	mov.w	r9, #0
 80075c6:	07eb      	lsls	r3, r5, #31
 80075c8:	d50a      	bpl.n	80075e0 <__pow5mult+0x84>
 80075ca:	4631      	mov	r1, r6
 80075cc:	4622      	mov	r2, r4
 80075ce:	4638      	mov	r0, r7
 80075d0:	f7ff ff1c 	bl	800740c <__multiply>
 80075d4:	4680      	mov	r8, r0
 80075d6:	4631      	mov	r1, r6
 80075d8:	4638      	mov	r0, r7
 80075da:	f7ff fe03 	bl	80071e4 <_Bfree>
 80075de:	4646      	mov	r6, r8
 80075e0:	106d      	asrs	r5, r5, #1
 80075e2:	d00b      	beq.n	80075fc <__pow5mult+0xa0>
 80075e4:	6820      	ldr	r0, [r4, #0]
 80075e6:	b938      	cbnz	r0, 80075f8 <__pow5mult+0x9c>
 80075e8:	4622      	mov	r2, r4
 80075ea:	4621      	mov	r1, r4
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff ff0d 	bl	800740c <__multiply>
 80075f2:	6020      	str	r0, [r4, #0]
 80075f4:	f8c0 9000 	str.w	r9, [r0]
 80075f8:	4604      	mov	r4, r0
 80075fa:	e7e4      	b.n	80075c6 <__pow5mult+0x6a>
 80075fc:	4630      	mov	r0, r6
 80075fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007602:	bf00      	nop
 8007604:	08009fc4 	.word	0x08009fc4
 8007608:	08009e46 	.word	0x08009e46
 800760c:	08009f69 	.word	0x08009f69

08007610 <__lshift>:
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	460c      	mov	r4, r1
 8007616:	4607      	mov	r7, r0
 8007618:	4691      	mov	r9, r2
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	6849      	ldr	r1, [r1, #4]
 800761e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007628:	f108 0601 	add.w	r6, r8, #1
 800762c:	42b3      	cmp	r3, r6
 800762e:	db0b      	blt.n	8007648 <__lshift+0x38>
 8007630:	4638      	mov	r0, r7
 8007632:	f7ff fd97 	bl	8007164 <_Balloc>
 8007636:	4605      	mov	r5, r0
 8007638:	b948      	cbnz	r0, 800764e <__lshift+0x3e>
 800763a:	4602      	mov	r2, r0
 800763c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007640:	4b27      	ldr	r3, [pc, #156]	@ (80076e0 <__lshift+0xd0>)
 8007642:	4828      	ldr	r0, [pc, #160]	@ (80076e4 <__lshift+0xd4>)
 8007644:	f7fe fe20 	bl	8006288 <__assert_func>
 8007648:	3101      	adds	r1, #1
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	e7ee      	b.n	800762c <__lshift+0x1c>
 800764e:	2300      	movs	r3, #0
 8007650:	f100 0114 	add.w	r1, r0, #20
 8007654:	f100 0210 	add.w	r2, r0, #16
 8007658:	4618      	mov	r0, r3
 800765a:	4553      	cmp	r3, sl
 800765c:	db33      	blt.n	80076c6 <__lshift+0xb6>
 800765e:	6920      	ldr	r0, [r4, #16]
 8007660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007664:	f104 0314 	add.w	r3, r4, #20
 8007668:	f019 091f 	ands.w	r9, r9, #31
 800766c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007670:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007674:	d02b      	beq.n	80076ce <__lshift+0xbe>
 8007676:	468a      	mov	sl, r1
 8007678:	2200      	movs	r2, #0
 800767a:	f1c9 0e20 	rsb	lr, r9, #32
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	fa00 f009 	lsl.w	r0, r0, r9
 8007684:	4310      	orrs	r0, r2
 8007686:	f84a 0b04 	str.w	r0, [sl], #4
 800768a:	f853 2b04 	ldr.w	r2, [r3], #4
 800768e:	459c      	cmp	ip, r3
 8007690:	fa22 f20e 	lsr.w	r2, r2, lr
 8007694:	d8f3      	bhi.n	800767e <__lshift+0x6e>
 8007696:	ebac 0304 	sub.w	r3, ip, r4
 800769a:	3b15      	subs	r3, #21
 800769c:	f023 0303 	bic.w	r3, r3, #3
 80076a0:	3304      	adds	r3, #4
 80076a2:	f104 0015 	add.w	r0, r4, #21
 80076a6:	4584      	cmp	ip, r0
 80076a8:	bf38      	it	cc
 80076aa:	2304      	movcc	r3, #4
 80076ac:	50ca      	str	r2, [r1, r3]
 80076ae:	b10a      	cbz	r2, 80076b4 <__lshift+0xa4>
 80076b0:	f108 0602 	add.w	r6, r8, #2
 80076b4:	3e01      	subs	r6, #1
 80076b6:	4638      	mov	r0, r7
 80076b8:	4621      	mov	r1, r4
 80076ba:	612e      	str	r6, [r5, #16]
 80076bc:	f7ff fd92 	bl	80071e4 <_Bfree>
 80076c0:	4628      	mov	r0, r5
 80076c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80076ca:	3301      	adds	r3, #1
 80076cc:	e7c5      	b.n	800765a <__lshift+0x4a>
 80076ce:	3904      	subs	r1, #4
 80076d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d4:	459c      	cmp	ip, r3
 80076d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80076da:	d8f9      	bhi.n	80076d0 <__lshift+0xc0>
 80076dc:	e7ea      	b.n	80076b4 <__lshift+0xa4>
 80076de:	bf00      	nop
 80076e0:	08009f58 	.word	0x08009f58
 80076e4:	08009f69 	.word	0x08009f69

080076e8 <__mcmp>:
 80076e8:	4603      	mov	r3, r0
 80076ea:	690a      	ldr	r2, [r1, #16]
 80076ec:	6900      	ldr	r0, [r0, #16]
 80076ee:	b530      	push	{r4, r5, lr}
 80076f0:	1a80      	subs	r0, r0, r2
 80076f2:	d10e      	bne.n	8007712 <__mcmp+0x2a>
 80076f4:	3314      	adds	r3, #20
 80076f6:	3114      	adds	r1, #20
 80076f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007700:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007704:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007708:	4295      	cmp	r5, r2
 800770a:	d003      	beq.n	8007714 <__mcmp+0x2c>
 800770c:	d205      	bcs.n	800771a <__mcmp+0x32>
 800770e:	f04f 30ff 	mov.w	r0, #4294967295
 8007712:	bd30      	pop	{r4, r5, pc}
 8007714:	42a3      	cmp	r3, r4
 8007716:	d3f3      	bcc.n	8007700 <__mcmp+0x18>
 8007718:	e7fb      	b.n	8007712 <__mcmp+0x2a>
 800771a:	2001      	movs	r0, #1
 800771c:	e7f9      	b.n	8007712 <__mcmp+0x2a>
	...

08007720 <__mdiff>:
 8007720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	4689      	mov	r9, r1
 8007726:	4606      	mov	r6, r0
 8007728:	4611      	mov	r1, r2
 800772a:	4648      	mov	r0, r9
 800772c:	4614      	mov	r4, r2
 800772e:	f7ff ffdb 	bl	80076e8 <__mcmp>
 8007732:	1e05      	subs	r5, r0, #0
 8007734:	d112      	bne.n	800775c <__mdiff+0x3c>
 8007736:	4629      	mov	r1, r5
 8007738:	4630      	mov	r0, r6
 800773a:	f7ff fd13 	bl	8007164 <_Balloc>
 800773e:	4602      	mov	r2, r0
 8007740:	b928      	cbnz	r0, 800774e <__mdiff+0x2e>
 8007742:	f240 2137 	movw	r1, #567	@ 0x237
 8007746:	4b3e      	ldr	r3, [pc, #248]	@ (8007840 <__mdiff+0x120>)
 8007748:	483e      	ldr	r0, [pc, #248]	@ (8007844 <__mdiff+0x124>)
 800774a:	f7fe fd9d 	bl	8006288 <__assert_func>
 800774e:	2301      	movs	r3, #1
 8007750:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007754:	4610      	mov	r0, r2
 8007756:	b003      	add	sp, #12
 8007758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775c:	bfbc      	itt	lt
 800775e:	464b      	movlt	r3, r9
 8007760:	46a1      	movlt	r9, r4
 8007762:	4630      	mov	r0, r6
 8007764:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007768:	bfba      	itte	lt
 800776a:	461c      	movlt	r4, r3
 800776c:	2501      	movlt	r5, #1
 800776e:	2500      	movge	r5, #0
 8007770:	f7ff fcf8 	bl	8007164 <_Balloc>
 8007774:	4602      	mov	r2, r0
 8007776:	b918      	cbnz	r0, 8007780 <__mdiff+0x60>
 8007778:	f240 2145 	movw	r1, #581	@ 0x245
 800777c:	4b30      	ldr	r3, [pc, #192]	@ (8007840 <__mdiff+0x120>)
 800777e:	e7e3      	b.n	8007748 <__mdiff+0x28>
 8007780:	f100 0b14 	add.w	fp, r0, #20
 8007784:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007788:	f109 0310 	add.w	r3, r9, #16
 800778c:	60c5      	str	r5, [r0, #12]
 800778e:	f04f 0c00 	mov.w	ip, #0
 8007792:	f109 0514 	add.w	r5, r9, #20
 8007796:	46d9      	mov	r9, fp
 8007798:	6926      	ldr	r6, [r4, #16]
 800779a:	f104 0e14 	add.w	lr, r4, #20
 800779e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80077a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	9b01      	ldr	r3, [sp, #4]
 80077aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80077ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80077b2:	b281      	uxth	r1, r0
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	fa1f f38a 	uxth.w	r3, sl
 80077ba:	1a5b      	subs	r3, r3, r1
 80077bc:	0c00      	lsrs	r0, r0, #16
 80077be:	4463      	add	r3, ip
 80077c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80077c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077ce:	4576      	cmp	r6, lr
 80077d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077d4:	f849 3b04 	str.w	r3, [r9], #4
 80077d8:	d8e6      	bhi.n	80077a8 <__mdiff+0x88>
 80077da:	1b33      	subs	r3, r6, r4
 80077dc:	3b15      	subs	r3, #21
 80077de:	f023 0303 	bic.w	r3, r3, #3
 80077e2:	3415      	adds	r4, #21
 80077e4:	3304      	adds	r3, #4
 80077e6:	42a6      	cmp	r6, r4
 80077e8:	bf38      	it	cc
 80077ea:	2304      	movcc	r3, #4
 80077ec:	441d      	add	r5, r3
 80077ee:	445b      	add	r3, fp
 80077f0:	461e      	mov	r6, r3
 80077f2:	462c      	mov	r4, r5
 80077f4:	4544      	cmp	r4, r8
 80077f6:	d30e      	bcc.n	8007816 <__mdiff+0xf6>
 80077f8:	f108 0103 	add.w	r1, r8, #3
 80077fc:	1b49      	subs	r1, r1, r5
 80077fe:	f021 0103 	bic.w	r1, r1, #3
 8007802:	3d03      	subs	r5, #3
 8007804:	45a8      	cmp	r8, r5
 8007806:	bf38      	it	cc
 8007808:	2100      	movcc	r1, #0
 800780a:	440b      	add	r3, r1
 800780c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007810:	b199      	cbz	r1, 800783a <__mdiff+0x11a>
 8007812:	6117      	str	r7, [r2, #16]
 8007814:	e79e      	b.n	8007754 <__mdiff+0x34>
 8007816:	46e6      	mov	lr, ip
 8007818:	f854 1b04 	ldr.w	r1, [r4], #4
 800781c:	fa1f fc81 	uxth.w	ip, r1
 8007820:	44f4      	add	ip, lr
 8007822:	0c08      	lsrs	r0, r1, #16
 8007824:	4471      	add	r1, lr
 8007826:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800782a:	b289      	uxth	r1, r1
 800782c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007830:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007834:	f846 1b04 	str.w	r1, [r6], #4
 8007838:	e7dc      	b.n	80077f4 <__mdiff+0xd4>
 800783a:	3f01      	subs	r7, #1
 800783c:	e7e6      	b.n	800780c <__mdiff+0xec>
 800783e:	bf00      	nop
 8007840:	08009f58 	.word	0x08009f58
 8007844:	08009f69 	.word	0x08009f69

08007848 <__ulp>:
 8007848:	4b0e      	ldr	r3, [pc, #56]	@ (8007884 <__ulp+0x3c>)
 800784a:	400b      	ands	r3, r1
 800784c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007850:	2b00      	cmp	r3, #0
 8007852:	dc08      	bgt.n	8007866 <__ulp+0x1e>
 8007854:	425b      	negs	r3, r3
 8007856:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800785a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800785e:	da04      	bge.n	800786a <__ulp+0x22>
 8007860:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007864:	4113      	asrs	r3, r2
 8007866:	2200      	movs	r2, #0
 8007868:	e008      	b.n	800787c <__ulp+0x34>
 800786a:	f1a2 0314 	sub.w	r3, r2, #20
 800786e:	2b1e      	cmp	r3, #30
 8007870:	bfd6      	itet	le
 8007872:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007876:	2201      	movgt	r2, #1
 8007878:	40da      	lsrle	r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	4619      	mov	r1, r3
 800787e:	4610      	mov	r0, r2
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	7ff00000 	.word	0x7ff00000

08007888 <__b2d>:
 8007888:	6902      	ldr	r2, [r0, #16]
 800788a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788c:	f100 0614 	add.w	r6, r0, #20
 8007890:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007894:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007898:	4f1e      	ldr	r7, [pc, #120]	@ (8007914 <__b2d+0x8c>)
 800789a:	4620      	mov	r0, r4
 800789c:	f7ff fd54 	bl	8007348 <__hi0bits>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f1c0 0020 	rsb	r0, r0, #32
 80078a6:	2b0a      	cmp	r3, #10
 80078a8:	f1a2 0504 	sub.w	r5, r2, #4
 80078ac:	6008      	str	r0, [r1, #0]
 80078ae:	dc12      	bgt.n	80078d6 <__b2d+0x4e>
 80078b0:	42ae      	cmp	r6, r5
 80078b2:	bf2c      	ite	cs
 80078b4:	2200      	movcs	r2, #0
 80078b6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80078ba:	f1c3 0c0b 	rsb	ip, r3, #11
 80078be:	3315      	adds	r3, #21
 80078c0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80078c4:	fa04 f303 	lsl.w	r3, r4, r3
 80078c8:	fa22 f20c 	lsr.w	r2, r2, ip
 80078cc:	ea4e 0107 	orr.w	r1, lr, r7
 80078d0:	431a      	orrs	r2, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d6:	42ae      	cmp	r6, r5
 80078d8:	bf36      	itet	cc
 80078da:	f1a2 0508 	subcc.w	r5, r2, #8
 80078de:	2200      	movcs	r2, #0
 80078e0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80078e4:	3b0b      	subs	r3, #11
 80078e6:	d012      	beq.n	800790e <__b2d+0x86>
 80078e8:	f1c3 0720 	rsb	r7, r3, #32
 80078ec:	fa22 f107 	lsr.w	r1, r2, r7
 80078f0:	409c      	lsls	r4, r3
 80078f2:	430c      	orrs	r4, r1
 80078f4:	42b5      	cmp	r5, r6
 80078f6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80078fa:	bf94      	ite	ls
 80078fc:	2400      	movls	r4, #0
 80078fe:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007902:	409a      	lsls	r2, r3
 8007904:	40fc      	lsrs	r4, r7
 8007906:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800790a:	4322      	orrs	r2, r4
 800790c:	e7e1      	b.n	80078d2 <__b2d+0x4a>
 800790e:	ea44 0107 	orr.w	r1, r4, r7
 8007912:	e7de      	b.n	80078d2 <__b2d+0x4a>
 8007914:	3ff00000 	.word	0x3ff00000

08007918 <__d2b>:
 8007918:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800791c:	2101      	movs	r1, #1
 800791e:	4690      	mov	r8, r2
 8007920:	4699      	mov	r9, r3
 8007922:	9e08      	ldr	r6, [sp, #32]
 8007924:	f7ff fc1e 	bl	8007164 <_Balloc>
 8007928:	4604      	mov	r4, r0
 800792a:	b930      	cbnz	r0, 800793a <__d2b+0x22>
 800792c:	4602      	mov	r2, r0
 800792e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007932:	4b23      	ldr	r3, [pc, #140]	@ (80079c0 <__d2b+0xa8>)
 8007934:	4823      	ldr	r0, [pc, #140]	@ (80079c4 <__d2b+0xac>)
 8007936:	f7fe fca7 	bl	8006288 <__assert_func>
 800793a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800793e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007942:	b10d      	cbz	r5, 8007948 <__d2b+0x30>
 8007944:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	f1b8 0300 	subs.w	r3, r8, #0
 800794e:	d024      	beq.n	800799a <__d2b+0x82>
 8007950:	4668      	mov	r0, sp
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	f7ff fd17 	bl	8007386 <__lo0bits>
 8007958:	e9dd 1200 	ldrd	r1, r2, [sp]
 800795c:	b1d8      	cbz	r0, 8007996 <__d2b+0x7e>
 800795e:	f1c0 0320 	rsb	r3, r0, #32
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	430b      	orrs	r3, r1
 8007968:	40c2      	lsrs	r2, r0
 800796a:	6163      	str	r3, [r4, #20]
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	bf0c      	ite	eq
 8007974:	2201      	moveq	r2, #1
 8007976:	2202      	movne	r2, #2
 8007978:	61a3      	str	r3, [r4, #24]
 800797a:	6122      	str	r2, [r4, #16]
 800797c:	b1ad      	cbz	r5, 80079aa <__d2b+0x92>
 800797e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007982:	4405      	add	r5, r0
 8007984:	6035      	str	r5, [r6, #0]
 8007986:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800798a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800798c:	6018      	str	r0, [r3, #0]
 800798e:	4620      	mov	r0, r4
 8007990:	b002      	add	sp, #8
 8007992:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007996:	6161      	str	r1, [r4, #20]
 8007998:	e7e9      	b.n	800796e <__d2b+0x56>
 800799a:	a801      	add	r0, sp, #4
 800799c:	f7ff fcf3 	bl	8007386 <__lo0bits>
 80079a0:	9b01      	ldr	r3, [sp, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	6163      	str	r3, [r4, #20]
 80079a6:	3020      	adds	r0, #32
 80079a8:	e7e7      	b.n	800797a <__d2b+0x62>
 80079aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079b2:	6030      	str	r0, [r6, #0]
 80079b4:	6918      	ldr	r0, [r3, #16]
 80079b6:	f7ff fcc7 	bl	8007348 <__hi0bits>
 80079ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079be:	e7e4      	b.n	800798a <__d2b+0x72>
 80079c0:	08009f58 	.word	0x08009f58
 80079c4:	08009f69 	.word	0x08009f69

080079c8 <__ratio>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	b085      	sub	sp, #20
 80079ce:	e9cd 1000 	strd	r1, r0, [sp]
 80079d2:	a902      	add	r1, sp, #8
 80079d4:	f7ff ff58 	bl	8007888 <__b2d>
 80079d8:	468b      	mov	fp, r1
 80079da:	4606      	mov	r6, r0
 80079dc:	460f      	mov	r7, r1
 80079de:	9800      	ldr	r0, [sp, #0]
 80079e0:	a903      	add	r1, sp, #12
 80079e2:	f7ff ff51 	bl	8007888 <__b2d>
 80079e6:	460d      	mov	r5, r1
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	4689      	mov	r9, r1
 80079ec:	6919      	ldr	r1, [r3, #16]
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	4604      	mov	r4, r0
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	4630      	mov	r0, r6
 80079f6:	1ac9      	subs	r1, r1, r3
 80079f8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bfcd      	iteet	gt
 8007a06:	463a      	movgt	r2, r7
 8007a08:	462a      	movle	r2, r5
 8007a0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a0e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007a12:	bfd8      	it	le
 8007a14:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007a18:	464b      	mov	r3, r9
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	4659      	mov	r1, fp
 8007a1e:	f7f8 ff51 	bl	80008c4 <__aeabi_ddiv>
 8007a22:	b005      	add	sp, #20
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a28 <__copybits>:
 8007a28:	3901      	subs	r1, #1
 8007a2a:	b570      	push	{r4, r5, r6, lr}
 8007a2c:	1149      	asrs	r1, r1, #5
 8007a2e:	6914      	ldr	r4, [r2, #16]
 8007a30:	3101      	adds	r1, #1
 8007a32:	f102 0314 	add.w	r3, r2, #20
 8007a36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a3e:	1f05      	subs	r5, r0, #4
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	d30c      	bcc.n	8007a5e <__copybits+0x36>
 8007a44:	1aa3      	subs	r3, r4, r2
 8007a46:	3b11      	subs	r3, #17
 8007a48:	f023 0303 	bic.w	r3, r3, #3
 8007a4c:	3211      	adds	r2, #17
 8007a4e:	42a2      	cmp	r2, r4
 8007a50:	bf88      	it	hi
 8007a52:	2300      	movhi	r3, #0
 8007a54:	4418      	add	r0, r3
 8007a56:	2300      	movs	r3, #0
 8007a58:	4288      	cmp	r0, r1
 8007a5a:	d305      	bcc.n	8007a68 <__copybits+0x40>
 8007a5c:	bd70      	pop	{r4, r5, r6, pc}
 8007a5e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a62:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a66:	e7eb      	b.n	8007a40 <__copybits+0x18>
 8007a68:	f840 3b04 	str.w	r3, [r0], #4
 8007a6c:	e7f4      	b.n	8007a58 <__copybits+0x30>

08007a6e <__any_on>:
 8007a6e:	f100 0214 	add.w	r2, r0, #20
 8007a72:	6900      	ldr	r0, [r0, #16]
 8007a74:	114b      	asrs	r3, r1, #5
 8007a76:	4298      	cmp	r0, r3
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	db11      	blt.n	8007aa0 <__any_on+0x32>
 8007a7c:	dd0a      	ble.n	8007a94 <__any_on+0x26>
 8007a7e:	f011 011f 	ands.w	r1, r1, #31
 8007a82:	d007      	beq.n	8007a94 <__any_on+0x26>
 8007a84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a88:	fa24 f001 	lsr.w	r0, r4, r1
 8007a8c:	fa00 f101 	lsl.w	r1, r0, r1
 8007a90:	428c      	cmp	r4, r1
 8007a92:	d10b      	bne.n	8007aac <__any_on+0x3e>
 8007a94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d803      	bhi.n	8007aa4 <__any_on+0x36>
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	bd10      	pop	{r4, pc}
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	e7f7      	b.n	8007a94 <__any_on+0x26>
 8007aa4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	d0f5      	beq.n	8007a98 <__any_on+0x2a>
 8007aac:	2001      	movs	r0, #1
 8007aae:	e7f6      	b.n	8007a9e <__any_on+0x30>

08007ab0 <sulp>:
 8007ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	4690      	mov	r8, r2
 8007ab8:	f7ff fec6 	bl	8007848 <__ulp>
 8007abc:	4604      	mov	r4, r0
 8007abe:	460d      	mov	r5, r1
 8007ac0:	f1b8 0f00 	cmp.w	r8, #0
 8007ac4:	d011      	beq.n	8007aea <sulp+0x3a>
 8007ac6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007aca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dd0b      	ble.n	8007aea <sulp+0x3a>
 8007ad2:	2400      	movs	r4, #0
 8007ad4:	051b      	lsls	r3, r3, #20
 8007ad6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007ada:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007ade:	4622      	mov	r2, r4
 8007ae0:	462b      	mov	r3, r5
 8007ae2:	f7f8 fdc5 	bl	8000670 <__aeabi_dmul>
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	460d      	mov	r5, r1
 8007aea:	4620      	mov	r0, r4
 8007aec:	4629      	mov	r1, r5
 8007aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af2:	0000      	movs	r0, r0
 8007af4:	0000      	movs	r0, r0
	...

08007af8 <_strtod_l>:
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	b09f      	sub	sp, #124	@ 0x7c
 8007afe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007b00:	2200      	movs	r2, #0
 8007b02:	460c      	mov	r4, r1
 8007b04:	921a      	str	r2, [sp, #104]	@ 0x68
 8007b06:	f04f 0a00 	mov.w	sl, #0
 8007b0a:	f04f 0b00 	mov.w	fp, #0
 8007b0e:	460a      	mov	r2, r1
 8007b10:	9005      	str	r0, [sp, #20]
 8007b12:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b14:	7811      	ldrb	r1, [r2, #0]
 8007b16:	292b      	cmp	r1, #43	@ 0x2b
 8007b18:	d048      	beq.n	8007bac <_strtod_l+0xb4>
 8007b1a:	d836      	bhi.n	8007b8a <_strtod_l+0x92>
 8007b1c:	290d      	cmp	r1, #13
 8007b1e:	d830      	bhi.n	8007b82 <_strtod_l+0x8a>
 8007b20:	2908      	cmp	r1, #8
 8007b22:	d830      	bhi.n	8007b86 <_strtod_l+0x8e>
 8007b24:	2900      	cmp	r1, #0
 8007b26:	d039      	beq.n	8007b9c <_strtod_l+0xa4>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007b2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007b2e:	782a      	ldrb	r2, [r5, #0]
 8007b30:	2a30      	cmp	r2, #48	@ 0x30
 8007b32:	f040 80b1 	bne.w	8007c98 <_strtod_l+0x1a0>
 8007b36:	786a      	ldrb	r2, [r5, #1]
 8007b38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b3c:	2a58      	cmp	r2, #88	@ 0x58
 8007b3e:	d16c      	bne.n	8007c1a <_strtod_l+0x122>
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b44:	4a8e      	ldr	r2, [pc, #568]	@ (8007d80 <_strtod_l+0x288>)
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	ab1a      	add	r3, sp, #104	@ 0x68
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	9805      	ldr	r0, [sp, #20]
 8007b4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007b50:	a919      	add	r1, sp, #100	@ 0x64
 8007b52:	f001 f9eb 	bl	8008f2c <__gethex>
 8007b56:	f010 060f 	ands.w	r6, r0, #15
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	d005      	beq.n	8007b6a <_strtod_l+0x72>
 8007b5e:	2e06      	cmp	r6, #6
 8007b60:	d126      	bne.n	8007bb0 <_strtod_l+0xb8>
 8007b62:	2300      	movs	r3, #0
 8007b64:	3501      	adds	r5, #1
 8007b66:	9519      	str	r5, [sp, #100]	@ 0x64
 8007b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f040 8584 	bne.w	800867a <_strtod_l+0xb82>
 8007b72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b74:	b1bb      	cbz	r3, 8007ba6 <_strtod_l+0xae>
 8007b76:	4650      	mov	r0, sl
 8007b78:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007b7c:	b01f      	add	sp, #124	@ 0x7c
 8007b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b82:	2920      	cmp	r1, #32
 8007b84:	d1d0      	bne.n	8007b28 <_strtod_l+0x30>
 8007b86:	3201      	adds	r2, #1
 8007b88:	e7c3      	b.n	8007b12 <_strtod_l+0x1a>
 8007b8a:	292d      	cmp	r1, #45	@ 0x2d
 8007b8c:	d1cc      	bne.n	8007b28 <_strtod_l+0x30>
 8007b8e:	2101      	movs	r1, #1
 8007b90:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007b92:	1c51      	adds	r1, r2, #1
 8007b94:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b96:	7852      	ldrb	r2, [r2, #1]
 8007b98:	2a00      	cmp	r2, #0
 8007b9a:	d1c7      	bne.n	8007b2c <_strtod_l+0x34>
 8007b9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b9e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f040 8568 	bne.w	8008676 <_strtod_l+0xb7e>
 8007ba6:	4650      	mov	r0, sl
 8007ba8:	4659      	mov	r1, fp
 8007baa:	e7e7      	b.n	8007b7c <_strtod_l+0x84>
 8007bac:	2100      	movs	r1, #0
 8007bae:	e7ef      	b.n	8007b90 <_strtod_l+0x98>
 8007bb0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007bb2:	b13a      	cbz	r2, 8007bc4 <_strtod_l+0xcc>
 8007bb4:	2135      	movs	r1, #53	@ 0x35
 8007bb6:	a81c      	add	r0, sp, #112	@ 0x70
 8007bb8:	f7ff ff36 	bl	8007a28 <__copybits>
 8007bbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bbe:	9805      	ldr	r0, [sp, #20]
 8007bc0:	f7ff fb10 	bl	80071e4 <_Bfree>
 8007bc4:	3e01      	subs	r6, #1
 8007bc6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007bc8:	2e04      	cmp	r6, #4
 8007bca:	d806      	bhi.n	8007bda <_strtod_l+0xe2>
 8007bcc:	e8df f006 	tbb	[pc, r6]
 8007bd0:	201d0314 	.word	0x201d0314
 8007bd4:	14          	.byte	0x14
 8007bd5:	00          	.byte	0x00
 8007bd6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007bda:	05e1      	lsls	r1, r4, #23
 8007bdc:	bf48      	it	mi
 8007bde:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007be2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007be6:	0d1b      	lsrs	r3, r3, #20
 8007be8:	051b      	lsls	r3, r3, #20
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1bd      	bne.n	8007b6a <_strtod_l+0x72>
 8007bee:	f7fe fafd 	bl	80061ec <__errno>
 8007bf2:	2322      	movs	r3, #34	@ 0x22
 8007bf4:	6003      	str	r3, [r0, #0]
 8007bf6:	e7b8      	b.n	8007b6a <_strtod_l+0x72>
 8007bf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007bfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007c00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c04:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c08:	e7e7      	b.n	8007bda <_strtod_l+0xe2>
 8007c0a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007d84 <_strtod_l+0x28c>
 8007c0e:	e7e4      	b.n	8007bda <_strtod_l+0xe2>
 8007c10:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007c14:	f04f 3aff 	mov.w	sl, #4294967295
 8007c18:	e7df      	b.n	8007bda <_strtod_l+0xe2>
 8007c1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b30      	cmp	r3, #48	@ 0x30
 8007c24:	d0f9      	beq.n	8007c1a <_strtod_l+0x122>
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d09f      	beq.n	8007b6a <_strtod_l+0x72>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c30:	220a      	movs	r2, #10
 8007c32:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c34:	2300      	movs	r3, #0
 8007c36:	461f      	mov	r7, r3
 8007c38:	9308      	str	r3, [sp, #32]
 8007c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c3c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007c3e:	7805      	ldrb	r5, [r0, #0]
 8007c40:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007c44:	b2d9      	uxtb	r1, r3
 8007c46:	2909      	cmp	r1, #9
 8007c48:	d928      	bls.n	8007c9c <_strtod_l+0x1a4>
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	494e      	ldr	r1, [pc, #312]	@ (8007d88 <_strtod_l+0x290>)
 8007c4e:	f001 f88c 	bl	8008d6a <strncmp>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d032      	beq.n	8007cbc <_strtod_l+0x1c4>
 8007c56:	2000      	movs	r0, #0
 8007c58:	462a      	mov	r2, r5
 8007c5a:	4681      	mov	r9, r0
 8007c5c:	463d      	mov	r5, r7
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2a65      	cmp	r2, #101	@ 0x65
 8007c62:	d001      	beq.n	8007c68 <_strtod_l+0x170>
 8007c64:	2a45      	cmp	r2, #69	@ 0x45
 8007c66:	d114      	bne.n	8007c92 <_strtod_l+0x19a>
 8007c68:	b91d      	cbnz	r5, 8007c72 <_strtod_l+0x17a>
 8007c6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c6c:	4302      	orrs	r2, r0
 8007c6e:	d095      	beq.n	8007b9c <_strtod_l+0xa4>
 8007c70:	2500      	movs	r5, #0
 8007c72:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007c74:	1c62      	adds	r2, r4, #1
 8007c76:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c78:	7862      	ldrb	r2, [r4, #1]
 8007c7a:	2a2b      	cmp	r2, #43	@ 0x2b
 8007c7c:	d077      	beq.n	8007d6e <_strtod_l+0x276>
 8007c7e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007c80:	d07b      	beq.n	8007d7a <_strtod_l+0x282>
 8007c82:	f04f 0c00 	mov.w	ip, #0
 8007c86:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c8a:	2909      	cmp	r1, #9
 8007c8c:	f240 8082 	bls.w	8007d94 <_strtod_l+0x29c>
 8007c90:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c92:	f04f 0800 	mov.w	r8, #0
 8007c96:	e0a2      	b.n	8007dde <_strtod_l+0x2e6>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e7c7      	b.n	8007c2c <_strtod_l+0x134>
 8007c9c:	2f08      	cmp	r7, #8
 8007c9e:	bfd5      	itete	le
 8007ca0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007ca2:	9908      	ldrgt	r1, [sp, #32]
 8007ca4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ca8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007cac:	f100 0001 	add.w	r0, r0, #1
 8007cb0:	bfd4      	ite	le
 8007cb2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007cb4:	9308      	strgt	r3, [sp, #32]
 8007cb6:	3701      	adds	r7, #1
 8007cb8:	9019      	str	r0, [sp, #100]	@ 0x64
 8007cba:	e7bf      	b.n	8007c3c <_strtod_l+0x144>
 8007cbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cc2:	785a      	ldrb	r2, [r3, #1]
 8007cc4:	b37f      	cbz	r7, 8007d26 <_strtod_l+0x22e>
 8007cc6:	4681      	mov	r9, r0
 8007cc8:	463d      	mov	r5, r7
 8007cca:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007cce:	2b09      	cmp	r3, #9
 8007cd0:	d912      	bls.n	8007cf8 <_strtod_l+0x200>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e7c4      	b.n	8007c60 <_strtod_l+0x168>
 8007cd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cd8:	3001      	adds	r0, #1
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cde:	785a      	ldrb	r2, [r3, #1]
 8007ce0:	2a30      	cmp	r2, #48	@ 0x30
 8007ce2:	d0f8      	beq.n	8007cd6 <_strtod_l+0x1de>
 8007ce4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	f200 84cb 	bhi.w	8008684 <_strtod_l+0xb8c>
 8007cee:	4681      	mov	r9, r0
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cf6:	930c      	str	r3, [sp, #48]	@ 0x30
 8007cf8:	3a30      	subs	r2, #48	@ 0x30
 8007cfa:	f100 0301 	add.w	r3, r0, #1
 8007cfe:	d02a      	beq.n	8007d56 <_strtod_l+0x25e>
 8007d00:	4499      	add	r9, r3
 8007d02:	210a      	movs	r1, #10
 8007d04:	462b      	mov	r3, r5
 8007d06:	eb00 0c05 	add.w	ip, r0, r5
 8007d0a:	4563      	cmp	r3, ip
 8007d0c:	d10d      	bne.n	8007d2a <_strtod_l+0x232>
 8007d0e:	1c69      	adds	r1, r5, #1
 8007d10:	4401      	add	r1, r0
 8007d12:	4428      	add	r0, r5
 8007d14:	2808      	cmp	r0, #8
 8007d16:	dc16      	bgt.n	8007d46 <_strtod_l+0x24e>
 8007d18:	230a      	movs	r3, #10
 8007d1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d1c:	fb03 2300 	mla	r3, r3, r0, r2
 8007d20:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d22:	2300      	movs	r3, #0
 8007d24:	e018      	b.n	8007d58 <_strtod_l+0x260>
 8007d26:	4638      	mov	r0, r7
 8007d28:	e7da      	b.n	8007ce0 <_strtod_l+0x1e8>
 8007d2a:	2b08      	cmp	r3, #8
 8007d2c:	f103 0301 	add.w	r3, r3, #1
 8007d30:	dc03      	bgt.n	8007d3a <_strtod_l+0x242>
 8007d32:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007d34:	434e      	muls	r6, r1
 8007d36:	960a      	str	r6, [sp, #40]	@ 0x28
 8007d38:	e7e7      	b.n	8007d0a <_strtod_l+0x212>
 8007d3a:	2b10      	cmp	r3, #16
 8007d3c:	bfde      	ittt	le
 8007d3e:	9e08      	ldrle	r6, [sp, #32]
 8007d40:	434e      	mulle	r6, r1
 8007d42:	9608      	strle	r6, [sp, #32]
 8007d44:	e7e1      	b.n	8007d0a <_strtod_l+0x212>
 8007d46:	280f      	cmp	r0, #15
 8007d48:	dceb      	bgt.n	8007d22 <_strtod_l+0x22a>
 8007d4a:	230a      	movs	r3, #10
 8007d4c:	9808      	ldr	r0, [sp, #32]
 8007d4e:	fb03 2300 	mla	r3, r3, r0, r2
 8007d52:	9308      	str	r3, [sp, #32]
 8007d54:	e7e5      	b.n	8007d22 <_strtod_l+0x22a>
 8007d56:	4629      	mov	r1, r5
 8007d58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	1c50      	adds	r0, r2, #1
 8007d5e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d60:	7852      	ldrb	r2, [r2, #1]
 8007d62:	4618      	mov	r0, r3
 8007d64:	e7b1      	b.n	8007cca <_strtod_l+0x1d2>
 8007d66:	f04f 0900 	mov.w	r9, #0
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e77d      	b.n	8007c6a <_strtod_l+0x172>
 8007d6e:	f04f 0c00 	mov.w	ip, #0
 8007d72:	1ca2      	adds	r2, r4, #2
 8007d74:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d76:	78a2      	ldrb	r2, [r4, #2]
 8007d78:	e785      	b.n	8007c86 <_strtod_l+0x18e>
 8007d7a:	f04f 0c01 	mov.w	ip, #1
 8007d7e:	e7f8      	b.n	8007d72 <_strtod_l+0x27a>
 8007d80:	0800a0d8 	.word	0x0800a0d8
 8007d84:	7ff00000 	.word	0x7ff00000
 8007d88:	0800a0c0 	.word	0x0800a0c0
 8007d8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d8e:	1c51      	adds	r1, r2, #1
 8007d90:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d92:	7852      	ldrb	r2, [r2, #1]
 8007d94:	2a30      	cmp	r2, #48	@ 0x30
 8007d96:	d0f9      	beq.n	8007d8c <_strtod_l+0x294>
 8007d98:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d9c:	2908      	cmp	r1, #8
 8007d9e:	f63f af78 	bhi.w	8007c92 <_strtod_l+0x19a>
 8007da2:	f04f 080a 	mov.w	r8, #10
 8007da6:	3a30      	subs	r2, #48	@ 0x30
 8007da8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007daa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007dac:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007dae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007db0:	1c56      	adds	r6, r2, #1
 8007db2:	9619      	str	r6, [sp, #100]	@ 0x64
 8007db4:	7852      	ldrb	r2, [r2, #1]
 8007db6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007dba:	f1be 0f09 	cmp.w	lr, #9
 8007dbe:	d939      	bls.n	8007e34 <_strtod_l+0x33c>
 8007dc0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007dc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007dc6:	1a76      	subs	r6, r6, r1
 8007dc8:	2e08      	cmp	r6, #8
 8007dca:	dc03      	bgt.n	8007dd4 <_strtod_l+0x2dc>
 8007dcc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007dce:	4588      	cmp	r8, r1
 8007dd0:	bfa8      	it	ge
 8007dd2:	4688      	movge	r8, r1
 8007dd4:	f1bc 0f00 	cmp.w	ip, #0
 8007dd8:	d001      	beq.n	8007dde <_strtod_l+0x2e6>
 8007dda:	f1c8 0800 	rsb	r8, r8, #0
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	d14e      	bne.n	8007e80 <_strtod_l+0x388>
 8007de2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007de4:	4308      	orrs	r0, r1
 8007de6:	f47f aec0 	bne.w	8007b6a <_strtod_l+0x72>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f47f aed6 	bne.w	8007b9c <_strtod_l+0xa4>
 8007df0:	2a69      	cmp	r2, #105	@ 0x69
 8007df2:	d028      	beq.n	8007e46 <_strtod_l+0x34e>
 8007df4:	dc25      	bgt.n	8007e42 <_strtod_l+0x34a>
 8007df6:	2a49      	cmp	r2, #73	@ 0x49
 8007df8:	d025      	beq.n	8007e46 <_strtod_l+0x34e>
 8007dfa:	2a4e      	cmp	r2, #78	@ 0x4e
 8007dfc:	f47f aece 	bne.w	8007b9c <_strtod_l+0xa4>
 8007e00:	499a      	ldr	r1, [pc, #616]	@ (800806c <_strtod_l+0x574>)
 8007e02:	a819      	add	r0, sp, #100	@ 0x64
 8007e04:	f001 fab4 	bl	8009370 <__match>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	f43f aec7 	beq.w	8007b9c <_strtod_l+0xa4>
 8007e0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b28      	cmp	r3, #40	@ 0x28
 8007e14:	d12e      	bne.n	8007e74 <_strtod_l+0x37c>
 8007e16:	4996      	ldr	r1, [pc, #600]	@ (8008070 <_strtod_l+0x578>)
 8007e18:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e1a:	a819      	add	r0, sp, #100	@ 0x64
 8007e1c:	f001 fabc 	bl	8009398 <__hexnan>
 8007e20:	2805      	cmp	r0, #5
 8007e22:	d127      	bne.n	8007e74 <_strtod_l+0x37c>
 8007e24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e26:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007e2a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007e2e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007e32:	e69a      	b.n	8007b6a <_strtod_l+0x72>
 8007e34:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e36:	fb08 2101 	mla	r1, r8, r1, r2
 8007e3a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007e3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e40:	e7b5      	b.n	8007dae <_strtod_l+0x2b6>
 8007e42:	2a6e      	cmp	r2, #110	@ 0x6e
 8007e44:	e7da      	b.n	8007dfc <_strtod_l+0x304>
 8007e46:	498b      	ldr	r1, [pc, #556]	@ (8008074 <_strtod_l+0x57c>)
 8007e48:	a819      	add	r0, sp, #100	@ 0x64
 8007e4a:	f001 fa91 	bl	8009370 <__match>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	f43f aea4 	beq.w	8007b9c <_strtod_l+0xa4>
 8007e54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e56:	4988      	ldr	r1, [pc, #544]	@ (8008078 <_strtod_l+0x580>)
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	a819      	add	r0, sp, #100	@ 0x64
 8007e5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e5e:	f001 fa87 	bl	8009370 <__match>
 8007e62:	b910      	cbnz	r0, 8007e6a <_strtod_l+0x372>
 8007e64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e66:	3301      	adds	r3, #1
 8007e68:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e6a:	f04f 0a00 	mov.w	sl, #0
 8007e6e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800807c <_strtod_l+0x584>
 8007e72:	e67a      	b.n	8007b6a <_strtod_l+0x72>
 8007e74:	4882      	ldr	r0, [pc, #520]	@ (8008080 <_strtod_l+0x588>)
 8007e76:	f000 ffcf 	bl	8008e18 <nan>
 8007e7a:	4682      	mov	sl, r0
 8007e7c:	468b      	mov	fp, r1
 8007e7e:	e674      	b.n	8007b6a <_strtod_l+0x72>
 8007e80:	eba8 0309 	sub.w	r3, r8, r9
 8007e84:	2f00      	cmp	r7, #0
 8007e86:	bf08      	it	eq
 8007e88:	462f      	moveq	r7, r5
 8007e8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e8c:	2d10      	cmp	r5, #16
 8007e8e:	462c      	mov	r4, r5
 8007e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e92:	bfa8      	it	ge
 8007e94:	2410      	movge	r4, #16
 8007e96:	f7f8 fb71 	bl	800057c <__aeabi_ui2d>
 8007e9a:	2d09      	cmp	r5, #9
 8007e9c:	4682      	mov	sl, r0
 8007e9e:	468b      	mov	fp, r1
 8007ea0:	dc11      	bgt.n	8007ec6 <_strtod_l+0x3ce>
 8007ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f43f ae60 	beq.w	8007b6a <_strtod_l+0x72>
 8007eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eac:	dd76      	ble.n	8007f9c <_strtod_l+0x4a4>
 8007eae:	2b16      	cmp	r3, #22
 8007eb0:	dc5d      	bgt.n	8007f6e <_strtod_l+0x476>
 8007eb2:	4974      	ldr	r1, [pc, #464]	@ (8008084 <_strtod_l+0x58c>)
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007eba:	465b      	mov	r3, fp
 8007ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec0:	f7f8 fbd6 	bl	8000670 <__aeabi_dmul>
 8007ec4:	e7d9      	b.n	8007e7a <_strtod_l+0x382>
 8007ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8008084 <_strtod_l+0x58c>)
 8007ec8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ecc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007ed0:	f7f8 fbce 	bl	8000670 <__aeabi_dmul>
 8007ed4:	4682      	mov	sl, r0
 8007ed6:	9808      	ldr	r0, [sp, #32]
 8007ed8:	468b      	mov	fp, r1
 8007eda:	f7f8 fb4f 	bl	800057c <__aeabi_ui2d>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	f7f8 fa0d 	bl	8000304 <__adddf3>
 8007eea:	2d0f      	cmp	r5, #15
 8007eec:	4682      	mov	sl, r0
 8007eee:	468b      	mov	fp, r1
 8007ef0:	ddd7      	ble.n	8007ea2 <_strtod_l+0x3aa>
 8007ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef4:	1b2c      	subs	r4, r5, r4
 8007ef6:	441c      	add	r4, r3
 8007ef8:	2c00      	cmp	r4, #0
 8007efa:	f340 8096 	ble.w	800802a <_strtod_l+0x532>
 8007efe:	f014 030f 	ands.w	r3, r4, #15
 8007f02:	d00a      	beq.n	8007f1a <_strtod_l+0x422>
 8007f04:	495f      	ldr	r1, [pc, #380]	@ (8008084 <_strtod_l+0x58c>)
 8007f06:	4652      	mov	r2, sl
 8007f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f10:	465b      	mov	r3, fp
 8007f12:	f7f8 fbad 	bl	8000670 <__aeabi_dmul>
 8007f16:	4682      	mov	sl, r0
 8007f18:	468b      	mov	fp, r1
 8007f1a:	f034 040f 	bics.w	r4, r4, #15
 8007f1e:	d073      	beq.n	8008008 <_strtod_l+0x510>
 8007f20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007f24:	dd48      	ble.n	8007fb8 <_strtod_l+0x4c0>
 8007f26:	2400      	movs	r4, #0
 8007f28:	46a0      	mov	r8, r4
 8007f2a:	46a1      	mov	r9, r4
 8007f2c:	940a      	str	r4, [sp, #40]	@ 0x28
 8007f2e:	2322      	movs	r3, #34	@ 0x22
 8007f30:	f04f 0a00 	mov.w	sl, #0
 8007f34:	9a05      	ldr	r2, [sp, #20]
 8007f36:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800807c <_strtod_l+0x584>
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f43f ae13 	beq.w	8007b6a <_strtod_l+0x72>
 8007f44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f46:	9805      	ldr	r0, [sp, #20]
 8007f48:	f7ff f94c 	bl	80071e4 <_Bfree>
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	9805      	ldr	r0, [sp, #20]
 8007f50:	f7ff f948 	bl	80071e4 <_Bfree>
 8007f54:	4641      	mov	r1, r8
 8007f56:	9805      	ldr	r0, [sp, #20]
 8007f58:	f7ff f944 	bl	80071e4 <_Bfree>
 8007f5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f5e:	9805      	ldr	r0, [sp, #20]
 8007f60:	f7ff f940 	bl	80071e4 <_Bfree>
 8007f64:	4621      	mov	r1, r4
 8007f66:	9805      	ldr	r0, [sp, #20]
 8007f68:	f7ff f93c 	bl	80071e4 <_Bfree>
 8007f6c:	e5fd      	b.n	8007b6a <_strtod_l+0x72>
 8007f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007f74:	4293      	cmp	r3, r2
 8007f76:	dbbc      	blt.n	8007ef2 <_strtod_l+0x3fa>
 8007f78:	4c42      	ldr	r4, [pc, #264]	@ (8008084 <_strtod_l+0x58c>)
 8007f7a:	f1c5 050f 	rsb	r5, r5, #15
 8007f7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f82:	4652      	mov	r2, sl
 8007f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f88:	465b      	mov	r3, fp
 8007f8a:	f7f8 fb71 	bl	8000670 <__aeabi_dmul>
 8007f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f90:	1b5d      	subs	r5, r3, r5
 8007f92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f9a:	e791      	b.n	8007ec0 <_strtod_l+0x3c8>
 8007f9c:	3316      	adds	r3, #22
 8007f9e:	dba8      	blt.n	8007ef2 <_strtod_l+0x3fa>
 8007fa0:	4b38      	ldr	r3, [pc, #224]	@ (8008084 <_strtod_l+0x58c>)
 8007fa2:	eba9 0808 	sub.w	r8, r9, r8
 8007fa6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007faa:	4650      	mov	r0, sl
 8007fac:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007fb0:	4659      	mov	r1, fp
 8007fb2:	f7f8 fc87 	bl	80008c4 <__aeabi_ddiv>
 8007fb6:	e760      	b.n	8007e7a <_strtod_l+0x382>
 8007fb8:	4b33      	ldr	r3, [pc, #204]	@ (8008088 <_strtod_l+0x590>)
 8007fba:	4650      	mov	r0, sl
 8007fbc:	9308      	str	r3, [sp, #32]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	4659      	mov	r1, fp
 8007fc2:	461e      	mov	r6, r3
 8007fc4:	1124      	asrs	r4, r4, #4
 8007fc6:	2c01      	cmp	r4, #1
 8007fc8:	dc21      	bgt.n	800800e <_strtod_l+0x516>
 8007fca:	b10b      	cbz	r3, 8007fd0 <_strtod_l+0x4d8>
 8007fcc:	4682      	mov	sl, r0
 8007fce:	468b      	mov	fp, r1
 8007fd0:	492d      	ldr	r1, [pc, #180]	@ (8008088 <_strtod_l+0x590>)
 8007fd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007fd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007fda:	4652      	mov	r2, sl
 8007fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fe0:	465b      	mov	r3, fp
 8007fe2:	f7f8 fb45 	bl	8000670 <__aeabi_dmul>
 8007fe6:	4b25      	ldr	r3, [pc, #148]	@ (800807c <_strtod_l+0x584>)
 8007fe8:	460a      	mov	r2, r1
 8007fea:	400b      	ands	r3, r1
 8007fec:	4927      	ldr	r1, [pc, #156]	@ (800808c <_strtod_l+0x594>)
 8007fee:	4682      	mov	sl, r0
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	d898      	bhi.n	8007f26 <_strtod_l+0x42e>
 8007ff4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007ff8:	428b      	cmp	r3, r1
 8007ffa:	bf86      	itte	hi
 8007ffc:	f04f 3aff 	movhi.w	sl, #4294967295
 8008000:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008090 <_strtod_l+0x598>
 8008004:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008008:	2300      	movs	r3, #0
 800800a:	9308      	str	r3, [sp, #32]
 800800c:	e07a      	b.n	8008104 <_strtod_l+0x60c>
 800800e:	07e2      	lsls	r2, r4, #31
 8008010:	d505      	bpl.n	800801e <_strtod_l+0x526>
 8008012:	9b08      	ldr	r3, [sp, #32]
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f7f8 fb2a 	bl	8000670 <__aeabi_dmul>
 800801c:	2301      	movs	r3, #1
 800801e:	9a08      	ldr	r2, [sp, #32]
 8008020:	3601      	adds	r6, #1
 8008022:	3208      	adds	r2, #8
 8008024:	1064      	asrs	r4, r4, #1
 8008026:	9208      	str	r2, [sp, #32]
 8008028:	e7cd      	b.n	8007fc6 <_strtod_l+0x4ce>
 800802a:	d0ed      	beq.n	8008008 <_strtod_l+0x510>
 800802c:	4264      	negs	r4, r4
 800802e:	f014 020f 	ands.w	r2, r4, #15
 8008032:	d00a      	beq.n	800804a <_strtod_l+0x552>
 8008034:	4b13      	ldr	r3, [pc, #76]	@ (8008084 <_strtod_l+0x58c>)
 8008036:	4650      	mov	r0, sl
 8008038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800803c:	4659      	mov	r1, fp
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	f7f8 fc3f 	bl	80008c4 <__aeabi_ddiv>
 8008046:	4682      	mov	sl, r0
 8008048:	468b      	mov	fp, r1
 800804a:	1124      	asrs	r4, r4, #4
 800804c:	d0dc      	beq.n	8008008 <_strtod_l+0x510>
 800804e:	2c1f      	cmp	r4, #31
 8008050:	dd20      	ble.n	8008094 <_strtod_l+0x59c>
 8008052:	2400      	movs	r4, #0
 8008054:	46a0      	mov	r8, r4
 8008056:	46a1      	mov	r9, r4
 8008058:	940a      	str	r4, [sp, #40]	@ 0x28
 800805a:	2322      	movs	r3, #34	@ 0x22
 800805c:	9a05      	ldr	r2, [sp, #20]
 800805e:	f04f 0a00 	mov.w	sl, #0
 8008062:	f04f 0b00 	mov.w	fp, #0
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	e768      	b.n	8007f3c <_strtod_l+0x444>
 800806a:	bf00      	nop
 800806c:	08009e1a 	.word	0x08009e1a
 8008070:	0800a0c4 	.word	0x0800a0c4
 8008074:	08009e12 	.word	0x08009e12
 8008078:	08009ef6 	.word	0x08009ef6
 800807c:	7ff00000 	.word	0x7ff00000
 8008080:	08009ef2 	.word	0x08009ef2
 8008084:	08009ff8 	.word	0x08009ff8
 8008088:	08009fd0 	.word	0x08009fd0
 800808c:	7ca00000 	.word	0x7ca00000
 8008090:	7fefffff 	.word	0x7fefffff
 8008094:	f014 0310 	ands.w	r3, r4, #16
 8008098:	bf18      	it	ne
 800809a:	236a      	movne	r3, #106	@ 0x6a
 800809c:	4650      	mov	r0, sl
 800809e:	9308      	str	r3, [sp, #32]
 80080a0:	4659      	mov	r1, fp
 80080a2:	2300      	movs	r3, #0
 80080a4:	4ea9      	ldr	r6, [pc, #676]	@ (800834c <_strtod_l+0x854>)
 80080a6:	07e2      	lsls	r2, r4, #31
 80080a8:	d504      	bpl.n	80080b4 <_strtod_l+0x5bc>
 80080aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080ae:	f7f8 fadf 	bl	8000670 <__aeabi_dmul>
 80080b2:	2301      	movs	r3, #1
 80080b4:	1064      	asrs	r4, r4, #1
 80080b6:	f106 0608 	add.w	r6, r6, #8
 80080ba:	d1f4      	bne.n	80080a6 <_strtod_l+0x5ae>
 80080bc:	b10b      	cbz	r3, 80080c2 <_strtod_l+0x5ca>
 80080be:	4682      	mov	sl, r0
 80080c0:	468b      	mov	fp, r1
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	b1b3      	cbz	r3, 80080f4 <_strtod_l+0x5fc>
 80080c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80080ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	4659      	mov	r1, fp
 80080d2:	dd0f      	ble.n	80080f4 <_strtod_l+0x5fc>
 80080d4:	2b1f      	cmp	r3, #31
 80080d6:	dd57      	ble.n	8008188 <_strtod_l+0x690>
 80080d8:	2b34      	cmp	r3, #52	@ 0x34
 80080da:	bfd8      	it	le
 80080dc:	f04f 33ff 	movle.w	r3, #4294967295
 80080e0:	f04f 0a00 	mov.w	sl, #0
 80080e4:	bfcf      	iteee	gt
 80080e6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80080ea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80080ee:	4093      	lslle	r3, r2
 80080f0:	ea03 0b01 	andle.w	fp, r3, r1
 80080f4:	2200      	movs	r2, #0
 80080f6:	2300      	movs	r3, #0
 80080f8:	4650      	mov	r0, sl
 80080fa:	4659      	mov	r1, fp
 80080fc:	f7f8 fd20 	bl	8000b40 <__aeabi_dcmpeq>
 8008100:	2800      	cmp	r0, #0
 8008102:	d1a6      	bne.n	8008052 <_strtod_l+0x55a>
 8008104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008106:	463a      	mov	r2, r7
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800810c:	462b      	mov	r3, r5
 800810e:	9805      	ldr	r0, [sp, #20]
 8008110:	f7ff f8d0 	bl	80072b4 <__s2b>
 8008114:	900a      	str	r0, [sp, #40]	@ 0x28
 8008116:	2800      	cmp	r0, #0
 8008118:	f43f af05 	beq.w	8007f26 <_strtod_l+0x42e>
 800811c:	2400      	movs	r4, #0
 800811e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008120:	eba9 0308 	sub.w	r3, r9, r8
 8008124:	2a00      	cmp	r2, #0
 8008126:	bfa8      	it	ge
 8008128:	2300      	movge	r3, #0
 800812a:	46a0      	mov	r8, r4
 800812c:	9312      	str	r3, [sp, #72]	@ 0x48
 800812e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008132:	9316      	str	r3, [sp, #88]	@ 0x58
 8008134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008136:	9805      	ldr	r0, [sp, #20]
 8008138:	6859      	ldr	r1, [r3, #4]
 800813a:	f7ff f813 	bl	8007164 <_Balloc>
 800813e:	4681      	mov	r9, r0
 8008140:	2800      	cmp	r0, #0
 8008142:	f43f aef4 	beq.w	8007f2e <_strtod_l+0x436>
 8008146:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008148:	300c      	adds	r0, #12
 800814a:	691a      	ldr	r2, [r3, #16]
 800814c:	f103 010c 	add.w	r1, r3, #12
 8008150:	3202      	adds	r2, #2
 8008152:	0092      	lsls	r2, r2, #2
 8008154:	f7fe f886 	bl	8006264 <memcpy>
 8008158:	ab1c      	add	r3, sp, #112	@ 0x70
 800815a:	9301      	str	r3, [sp, #4]
 800815c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	4652      	mov	r2, sl
 8008162:	465b      	mov	r3, fp
 8008164:	9805      	ldr	r0, [sp, #20]
 8008166:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800816a:	f7ff fbd5 	bl	8007918 <__d2b>
 800816e:	901a      	str	r0, [sp, #104]	@ 0x68
 8008170:	2800      	cmp	r0, #0
 8008172:	f43f aedc 	beq.w	8007f2e <_strtod_l+0x436>
 8008176:	2101      	movs	r1, #1
 8008178:	9805      	ldr	r0, [sp, #20]
 800817a:	f7ff f931 	bl	80073e0 <__i2b>
 800817e:	4680      	mov	r8, r0
 8008180:	b948      	cbnz	r0, 8008196 <_strtod_l+0x69e>
 8008182:	f04f 0800 	mov.w	r8, #0
 8008186:	e6d2      	b.n	8007f2e <_strtod_l+0x436>
 8008188:	f04f 32ff 	mov.w	r2, #4294967295
 800818c:	fa02 f303 	lsl.w	r3, r2, r3
 8008190:	ea03 0a0a 	and.w	sl, r3, sl
 8008194:	e7ae      	b.n	80080f4 <_strtod_l+0x5fc>
 8008196:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008198:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800819a:	2d00      	cmp	r5, #0
 800819c:	bfab      	itete	ge
 800819e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80081a0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80081a2:	18ef      	addge	r7, r5, r3
 80081a4:	1b5e      	sublt	r6, r3, r5
 80081a6:	9b08      	ldr	r3, [sp, #32]
 80081a8:	bfa8      	it	ge
 80081aa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80081ac:	eba5 0503 	sub.w	r5, r5, r3
 80081b0:	4415      	add	r5, r2
 80081b2:	4b67      	ldr	r3, [pc, #412]	@ (8008350 <_strtod_l+0x858>)
 80081b4:	f105 35ff 	add.w	r5, r5, #4294967295
 80081b8:	bfb8      	it	lt
 80081ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80081bc:	429d      	cmp	r5, r3
 80081be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80081c2:	da50      	bge.n	8008266 <_strtod_l+0x76e>
 80081c4:	1b5b      	subs	r3, r3, r5
 80081c6:	2b1f      	cmp	r3, #31
 80081c8:	f04f 0101 	mov.w	r1, #1
 80081cc:	eba2 0203 	sub.w	r2, r2, r3
 80081d0:	dc3d      	bgt.n	800824e <_strtod_l+0x756>
 80081d2:	fa01 f303 	lsl.w	r3, r1, r3
 80081d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081d8:	2300      	movs	r3, #0
 80081da:	9310      	str	r3, [sp, #64]	@ 0x40
 80081dc:	18bd      	adds	r5, r7, r2
 80081de:	9b08      	ldr	r3, [sp, #32]
 80081e0:	42af      	cmp	r7, r5
 80081e2:	4416      	add	r6, r2
 80081e4:	441e      	add	r6, r3
 80081e6:	463b      	mov	r3, r7
 80081e8:	bfa8      	it	ge
 80081ea:	462b      	movge	r3, r5
 80081ec:	42b3      	cmp	r3, r6
 80081ee:	bfa8      	it	ge
 80081f0:	4633      	movge	r3, r6
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bfc2      	ittt	gt
 80081f6:	1aed      	subgt	r5, r5, r3
 80081f8:	1af6      	subgt	r6, r6, r3
 80081fa:	1aff      	subgt	r7, r7, r3
 80081fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081fe:	2b00      	cmp	r3, #0
 8008200:	dd16      	ble.n	8008230 <_strtod_l+0x738>
 8008202:	4641      	mov	r1, r8
 8008204:	461a      	mov	r2, r3
 8008206:	9805      	ldr	r0, [sp, #20]
 8008208:	f7ff f9a8 	bl	800755c <__pow5mult>
 800820c:	4680      	mov	r8, r0
 800820e:	2800      	cmp	r0, #0
 8008210:	d0b7      	beq.n	8008182 <_strtod_l+0x68a>
 8008212:	4601      	mov	r1, r0
 8008214:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008216:	9805      	ldr	r0, [sp, #20]
 8008218:	f7ff f8f8 	bl	800740c <__multiply>
 800821c:	900e      	str	r0, [sp, #56]	@ 0x38
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f ae85 	beq.w	8007f2e <_strtod_l+0x436>
 8008224:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008226:	9805      	ldr	r0, [sp, #20]
 8008228:	f7fe ffdc 	bl	80071e4 <_Bfree>
 800822c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800822e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008230:	2d00      	cmp	r5, #0
 8008232:	dc1d      	bgt.n	8008270 <_strtod_l+0x778>
 8008234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008236:	2b00      	cmp	r3, #0
 8008238:	dd23      	ble.n	8008282 <_strtod_l+0x78a>
 800823a:	4649      	mov	r1, r9
 800823c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800823e:	9805      	ldr	r0, [sp, #20]
 8008240:	f7ff f98c 	bl	800755c <__pow5mult>
 8008244:	4681      	mov	r9, r0
 8008246:	b9e0      	cbnz	r0, 8008282 <_strtod_l+0x78a>
 8008248:	f04f 0900 	mov.w	r9, #0
 800824c:	e66f      	b.n	8007f2e <_strtod_l+0x436>
 800824e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008252:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008256:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800825a:	35e2      	adds	r5, #226	@ 0xe2
 800825c:	fa01 f305 	lsl.w	r3, r1, r5
 8008260:	9310      	str	r3, [sp, #64]	@ 0x40
 8008262:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008264:	e7ba      	b.n	80081dc <_strtod_l+0x6e4>
 8008266:	2300      	movs	r3, #0
 8008268:	9310      	str	r3, [sp, #64]	@ 0x40
 800826a:	2301      	movs	r3, #1
 800826c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800826e:	e7b5      	b.n	80081dc <_strtod_l+0x6e4>
 8008270:	462a      	mov	r2, r5
 8008272:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008274:	9805      	ldr	r0, [sp, #20]
 8008276:	f7ff f9cb 	bl	8007610 <__lshift>
 800827a:	901a      	str	r0, [sp, #104]	@ 0x68
 800827c:	2800      	cmp	r0, #0
 800827e:	d1d9      	bne.n	8008234 <_strtod_l+0x73c>
 8008280:	e655      	b.n	8007f2e <_strtod_l+0x436>
 8008282:	2e00      	cmp	r6, #0
 8008284:	dd07      	ble.n	8008296 <_strtod_l+0x79e>
 8008286:	4649      	mov	r1, r9
 8008288:	4632      	mov	r2, r6
 800828a:	9805      	ldr	r0, [sp, #20]
 800828c:	f7ff f9c0 	bl	8007610 <__lshift>
 8008290:	4681      	mov	r9, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	d0d8      	beq.n	8008248 <_strtod_l+0x750>
 8008296:	2f00      	cmp	r7, #0
 8008298:	dd08      	ble.n	80082ac <_strtod_l+0x7b4>
 800829a:	4641      	mov	r1, r8
 800829c:	463a      	mov	r2, r7
 800829e:	9805      	ldr	r0, [sp, #20]
 80082a0:	f7ff f9b6 	bl	8007610 <__lshift>
 80082a4:	4680      	mov	r8, r0
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f43f ae41 	beq.w	8007f2e <_strtod_l+0x436>
 80082ac:	464a      	mov	r2, r9
 80082ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082b0:	9805      	ldr	r0, [sp, #20]
 80082b2:	f7ff fa35 	bl	8007720 <__mdiff>
 80082b6:	4604      	mov	r4, r0
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f43f ae38 	beq.w	8007f2e <_strtod_l+0x436>
 80082be:	68c3      	ldr	r3, [r0, #12]
 80082c0:	4641      	mov	r1, r8
 80082c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082c4:	2300      	movs	r3, #0
 80082c6:	60c3      	str	r3, [r0, #12]
 80082c8:	f7ff fa0e 	bl	80076e8 <__mcmp>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	da45      	bge.n	800835c <_strtod_l+0x864>
 80082d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082d2:	ea53 030a 	orrs.w	r3, r3, sl
 80082d6:	d16b      	bne.n	80083b0 <_strtod_l+0x8b8>
 80082d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d167      	bne.n	80083b0 <_strtod_l+0x8b8>
 80082e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082e4:	0d1b      	lsrs	r3, r3, #20
 80082e6:	051b      	lsls	r3, r3, #20
 80082e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082ec:	d960      	bls.n	80083b0 <_strtod_l+0x8b8>
 80082ee:	6963      	ldr	r3, [r4, #20]
 80082f0:	b913      	cbnz	r3, 80082f8 <_strtod_l+0x800>
 80082f2:	6923      	ldr	r3, [r4, #16]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	dd5b      	ble.n	80083b0 <_strtod_l+0x8b8>
 80082f8:	4621      	mov	r1, r4
 80082fa:	2201      	movs	r2, #1
 80082fc:	9805      	ldr	r0, [sp, #20]
 80082fe:	f7ff f987 	bl	8007610 <__lshift>
 8008302:	4641      	mov	r1, r8
 8008304:	4604      	mov	r4, r0
 8008306:	f7ff f9ef 	bl	80076e8 <__mcmp>
 800830a:	2800      	cmp	r0, #0
 800830c:	dd50      	ble.n	80083b0 <_strtod_l+0x8b8>
 800830e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008312:	9a08      	ldr	r2, [sp, #32]
 8008314:	0d1b      	lsrs	r3, r3, #20
 8008316:	051b      	lsls	r3, r3, #20
 8008318:	2a00      	cmp	r2, #0
 800831a:	d06a      	beq.n	80083f2 <_strtod_l+0x8fa>
 800831c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008320:	d867      	bhi.n	80083f2 <_strtod_l+0x8fa>
 8008322:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008326:	f67f ae98 	bls.w	800805a <_strtod_l+0x562>
 800832a:	4650      	mov	r0, sl
 800832c:	4659      	mov	r1, fp
 800832e:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <_strtod_l+0x85c>)
 8008330:	2200      	movs	r2, #0
 8008332:	f7f8 f99d 	bl	8000670 <__aeabi_dmul>
 8008336:	4b08      	ldr	r3, [pc, #32]	@ (8008358 <_strtod_l+0x860>)
 8008338:	4682      	mov	sl, r0
 800833a:	400b      	ands	r3, r1
 800833c:	468b      	mov	fp, r1
 800833e:	2b00      	cmp	r3, #0
 8008340:	f47f ae00 	bne.w	8007f44 <_strtod_l+0x44c>
 8008344:	2322      	movs	r3, #34	@ 0x22
 8008346:	9a05      	ldr	r2, [sp, #20]
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	e5fb      	b.n	8007f44 <_strtod_l+0x44c>
 800834c:	0800a0f0 	.word	0x0800a0f0
 8008350:	fffffc02 	.word	0xfffffc02
 8008354:	39500000 	.word	0x39500000
 8008358:	7ff00000 	.word	0x7ff00000
 800835c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008360:	d165      	bne.n	800842e <_strtod_l+0x936>
 8008362:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008368:	b35a      	cbz	r2, 80083c2 <_strtod_l+0x8ca>
 800836a:	4a99      	ldr	r2, [pc, #612]	@ (80085d0 <_strtod_l+0xad8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d12b      	bne.n	80083c8 <_strtod_l+0x8d0>
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	4651      	mov	r1, sl
 8008374:	b303      	cbz	r3, 80083b8 <_strtod_l+0x8c0>
 8008376:	465a      	mov	r2, fp
 8008378:	4b96      	ldr	r3, [pc, #600]	@ (80085d4 <_strtod_l+0xadc>)
 800837a:	4013      	ands	r3, r2
 800837c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008380:	f04f 32ff 	mov.w	r2, #4294967295
 8008384:	d81b      	bhi.n	80083be <_strtod_l+0x8c6>
 8008386:	0d1b      	lsrs	r3, r3, #20
 8008388:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	4299      	cmp	r1, r3
 8008392:	d119      	bne.n	80083c8 <_strtod_l+0x8d0>
 8008394:	4b90      	ldr	r3, [pc, #576]	@ (80085d8 <_strtod_l+0xae0>)
 8008396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008398:	429a      	cmp	r2, r3
 800839a:	d102      	bne.n	80083a2 <_strtod_l+0x8aa>
 800839c:	3101      	adds	r1, #1
 800839e:	f43f adc6 	beq.w	8007f2e <_strtod_l+0x436>
 80083a2:	f04f 0a00 	mov.w	sl, #0
 80083a6:	4b8b      	ldr	r3, [pc, #556]	@ (80085d4 <_strtod_l+0xadc>)
 80083a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083aa:	401a      	ands	r2, r3
 80083ac:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1b9      	bne.n	800832a <_strtod_l+0x832>
 80083b6:	e5c5      	b.n	8007f44 <_strtod_l+0x44c>
 80083b8:	f04f 33ff 	mov.w	r3, #4294967295
 80083bc:	e7e8      	b.n	8008390 <_strtod_l+0x898>
 80083be:	4613      	mov	r3, r2
 80083c0:	e7e6      	b.n	8008390 <_strtod_l+0x898>
 80083c2:	ea53 030a 	orrs.w	r3, r3, sl
 80083c6:	d0a2      	beq.n	800830e <_strtod_l+0x816>
 80083c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083ca:	b1db      	cbz	r3, 8008404 <_strtod_l+0x90c>
 80083cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ce:	4213      	tst	r3, r2
 80083d0:	d0ee      	beq.n	80083b0 <_strtod_l+0x8b8>
 80083d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083d4:	4650      	mov	r0, sl
 80083d6:	4659      	mov	r1, fp
 80083d8:	9a08      	ldr	r2, [sp, #32]
 80083da:	b1bb      	cbz	r3, 800840c <_strtod_l+0x914>
 80083dc:	f7ff fb68 	bl	8007ab0 <sulp>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083e8:	f7f7 ff8c 	bl	8000304 <__adddf3>
 80083ec:	4682      	mov	sl, r0
 80083ee:	468b      	mov	fp, r1
 80083f0:	e7de      	b.n	80083b0 <_strtod_l+0x8b8>
 80083f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80083f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083fa:	f04f 3aff 	mov.w	sl, #4294967295
 80083fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008402:	e7d5      	b.n	80083b0 <_strtod_l+0x8b8>
 8008404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008406:	ea13 0f0a 	tst.w	r3, sl
 800840a:	e7e1      	b.n	80083d0 <_strtod_l+0x8d8>
 800840c:	f7ff fb50 	bl	8007ab0 <sulp>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008418:	f7f7 ff72 	bl	8000300 <__aeabi_dsub>
 800841c:	2200      	movs	r2, #0
 800841e:	2300      	movs	r3, #0
 8008420:	4682      	mov	sl, r0
 8008422:	468b      	mov	fp, r1
 8008424:	f7f8 fb8c 	bl	8000b40 <__aeabi_dcmpeq>
 8008428:	2800      	cmp	r0, #0
 800842a:	d0c1      	beq.n	80083b0 <_strtod_l+0x8b8>
 800842c:	e615      	b.n	800805a <_strtod_l+0x562>
 800842e:	4641      	mov	r1, r8
 8008430:	4620      	mov	r0, r4
 8008432:	f7ff fac9 	bl	80079c8 <__ratio>
 8008436:	2200      	movs	r2, #0
 8008438:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800843c:	4606      	mov	r6, r0
 800843e:	460f      	mov	r7, r1
 8008440:	f7f8 fb92 	bl	8000b68 <__aeabi_dcmple>
 8008444:	2800      	cmp	r0, #0
 8008446:	d06d      	beq.n	8008524 <_strtod_l+0xa2c>
 8008448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800844a:	2b00      	cmp	r3, #0
 800844c:	d178      	bne.n	8008540 <_strtod_l+0xa48>
 800844e:	f1ba 0f00 	cmp.w	sl, #0
 8008452:	d156      	bne.n	8008502 <_strtod_l+0xa0a>
 8008454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800845a:	2b00      	cmp	r3, #0
 800845c:	d158      	bne.n	8008510 <_strtod_l+0xa18>
 800845e:	2200      	movs	r2, #0
 8008460:	4630      	mov	r0, r6
 8008462:	4639      	mov	r1, r7
 8008464:	4b5d      	ldr	r3, [pc, #372]	@ (80085dc <_strtod_l+0xae4>)
 8008466:	f7f8 fb75 	bl	8000b54 <__aeabi_dcmplt>
 800846a:	2800      	cmp	r0, #0
 800846c:	d157      	bne.n	800851e <_strtod_l+0xa26>
 800846e:	4630      	mov	r0, r6
 8008470:	4639      	mov	r1, r7
 8008472:	2200      	movs	r2, #0
 8008474:	4b5a      	ldr	r3, [pc, #360]	@ (80085e0 <_strtod_l+0xae8>)
 8008476:	f7f8 f8fb 	bl	8000670 <__aeabi_dmul>
 800847a:	4606      	mov	r6, r0
 800847c:	460f      	mov	r7, r1
 800847e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008482:	9606      	str	r6, [sp, #24]
 8008484:	9307      	str	r3, [sp, #28]
 8008486:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800848a:	4d52      	ldr	r5, [pc, #328]	@ (80085d4 <_strtod_l+0xadc>)
 800848c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008492:	401d      	ands	r5, r3
 8008494:	4b53      	ldr	r3, [pc, #332]	@ (80085e4 <_strtod_l+0xaec>)
 8008496:	429d      	cmp	r5, r3
 8008498:	f040 80aa 	bne.w	80085f0 <_strtod_l+0xaf8>
 800849c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800849e:	4650      	mov	r0, sl
 80084a0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80084a4:	4659      	mov	r1, fp
 80084a6:	f7ff f9cf 	bl	8007848 <__ulp>
 80084aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084ae:	f7f8 f8df 	bl	8000670 <__aeabi_dmul>
 80084b2:	4652      	mov	r2, sl
 80084b4:	465b      	mov	r3, fp
 80084b6:	f7f7 ff25 	bl	8000304 <__adddf3>
 80084ba:	460b      	mov	r3, r1
 80084bc:	4945      	ldr	r1, [pc, #276]	@ (80085d4 <_strtod_l+0xadc>)
 80084be:	4a4a      	ldr	r2, [pc, #296]	@ (80085e8 <_strtod_l+0xaf0>)
 80084c0:	4019      	ands	r1, r3
 80084c2:	4291      	cmp	r1, r2
 80084c4:	4682      	mov	sl, r0
 80084c6:	d942      	bls.n	800854e <_strtod_l+0xa56>
 80084c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084ca:	4b43      	ldr	r3, [pc, #268]	@ (80085d8 <_strtod_l+0xae0>)
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d103      	bne.n	80084d8 <_strtod_l+0x9e0>
 80084d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084d2:	3301      	adds	r3, #1
 80084d4:	f43f ad2b 	beq.w	8007f2e <_strtod_l+0x436>
 80084d8:	f04f 3aff 	mov.w	sl, #4294967295
 80084dc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80085d8 <_strtod_l+0xae0>
 80084e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084e2:	9805      	ldr	r0, [sp, #20]
 80084e4:	f7fe fe7e 	bl	80071e4 <_Bfree>
 80084e8:	4649      	mov	r1, r9
 80084ea:	9805      	ldr	r0, [sp, #20]
 80084ec:	f7fe fe7a 	bl	80071e4 <_Bfree>
 80084f0:	4641      	mov	r1, r8
 80084f2:	9805      	ldr	r0, [sp, #20]
 80084f4:	f7fe fe76 	bl	80071e4 <_Bfree>
 80084f8:	4621      	mov	r1, r4
 80084fa:	9805      	ldr	r0, [sp, #20]
 80084fc:	f7fe fe72 	bl	80071e4 <_Bfree>
 8008500:	e618      	b.n	8008134 <_strtod_l+0x63c>
 8008502:	f1ba 0f01 	cmp.w	sl, #1
 8008506:	d103      	bne.n	8008510 <_strtod_l+0xa18>
 8008508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800850a:	2b00      	cmp	r3, #0
 800850c:	f43f ada5 	beq.w	800805a <_strtod_l+0x562>
 8008510:	2200      	movs	r2, #0
 8008512:	4b36      	ldr	r3, [pc, #216]	@ (80085ec <_strtod_l+0xaf4>)
 8008514:	2600      	movs	r6, #0
 8008516:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800851a:	4f30      	ldr	r7, [pc, #192]	@ (80085dc <_strtod_l+0xae4>)
 800851c:	e7b3      	b.n	8008486 <_strtod_l+0x98e>
 800851e:	2600      	movs	r6, #0
 8008520:	4f2f      	ldr	r7, [pc, #188]	@ (80085e0 <_strtod_l+0xae8>)
 8008522:	e7ac      	b.n	800847e <_strtod_l+0x986>
 8008524:	4630      	mov	r0, r6
 8008526:	4639      	mov	r1, r7
 8008528:	4b2d      	ldr	r3, [pc, #180]	@ (80085e0 <_strtod_l+0xae8>)
 800852a:	2200      	movs	r2, #0
 800852c:	f7f8 f8a0 	bl	8000670 <__aeabi_dmul>
 8008530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008532:	4606      	mov	r6, r0
 8008534:	460f      	mov	r7, r1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0a1      	beq.n	800847e <_strtod_l+0x986>
 800853a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800853e:	e7a2      	b.n	8008486 <_strtod_l+0x98e>
 8008540:	2200      	movs	r2, #0
 8008542:	4b26      	ldr	r3, [pc, #152]	@ (80085dc <_strtod_l+0xae4>)
 8008544:	4616      	mov	r6, r2
 8008546:	461f      	mov	r7, r3
 8008548:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800854c:	e79b      	b.n	8008486 <_strtod_l+0x98e>
 800854e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008552:	9b08      	ldr	r3, [sp, #32]
 8008554:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1c1      	bne.n	80084e0 <_strtod_l+0x9e8>
 800855c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008560:	0d1b      	lsrs	r3, r3, #20
 8008562:	051b      	lsls	r3, r3, #20
 8008564:	429d      	cmp	r5, r3
 8008566:	d1bb      	bne.n	80084e0 <_strtod_l+0x9e8>
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	f7f8 fd84 	bl	8001078 <__aeabi_d2lz>
 8008570:	f7f8 f850 	bl	8000614 <__aeabi_l2d>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4630      	mov	r0, r6
 800857a:	4639      	mov	r1, r7
 800857c:	f7f7 fec0 	bl	8000300 <__aeabi_dsub>
 8008580:	460b      	mov	r3, r1
 8008582:	4602      	mov	r2, r0
 8008584:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008588:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800858c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800858e:	ea46 060a 	orr.w	r6, r6, sl
 8008592:	431e      	orrs	r6, r3
 8008594:	d069      	beq.n	800866a <_strtod_l+0xb72>
 8008596:	a30a      	add	r3, pc, #40	@ (adr r3, 80085c0 <_strtod_l+0xac8>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f7f8 fada 	bl	8000b54 <__aeabi_dcmplt>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f47f accf 	bne.w	8007f44 <_strtod_l+0x44c>
 80085a6:	a308      	add	r3, pc, #32	@ (adr r3, 80085c8 <_strtod_l+0xad0>)
 80085a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085b0:	f7f8 faee 	bl	8000b90 <__aeabi_dcmpgt>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d093      	beq.n	80084e0 <_strtod_l+0x9e8>
 80085b8:	e4c4      	b.n	8007f44 <_strtod_l+0x44c>
 80085ba:	bf00      	nop
 80085bc:	f3af 8000 	nop.w
 80085c0:	94a03595 	.word	0x94a03595
 80085c4:	3fdfffff 	.word	0x3fdfffff
 80085c8:	35afe535 	.word	0x35afe535
 80085cc:	3fe00000 	.word	0x3fe00000
 80085d0:	000fffff 	.word	0x000fffff
 80085d4:	7ff00000 	.word	0x7ff00000
 80085d8:	7fefffff 	.word	0x7fefffff
 80085dc:	3ff00000 	.word	0x3ff00000
 80085e0:	3fe00000 	.word	0x3fe00000
 80085e4:	7fe00000 	.word	0x7fe00000
 80085e8:	7c9fffff 	.word	0x7c9fffff
 80085ec:	bff00000 	.word	0xbff00000
 80085f0:	9b08      	ldr	r3, [sp, #32]
 80085f2:	b323      	cbz	r3, 800863e <_strtod_l+0xb46>
 80085f4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80085f8:	d821      	bhi.n	800863e <_strtod_l+0xb46>
 80085fa:	a327      	add	r3, pc, #156	@ (adr r3, 8008698 <_strtod_l+0xba0>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	4630      	mov	r0, r6
 8008602:	4639      	mov	r1, r7
 8008604:	f7f8 fab0 	bl	8000b68 <__aeabi_dcmple>
 8008608:	b1a0      	cbz	r0, 8008634 <_strtod_l+0xb3c>
 800860a:	4639      	mov	r1, r7
 800860c:	4630      	mov	r0, r6
 800860e:	f7f8 fb07 	bl	8000c20 <__aeabi_d2uiz>
 8008612:	2801      	cmp	r0, #1
 8008614:	bf38      	it	cc
 8008616:	2001      	movcc	r0, #1
 8008618:	f7f7 ffb0 	bl	800057c <__aeabi_ui2d>
 800861c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800861e:	4606      	mov	r6, r0
 8008620:	460f      	mov	r7, r1
 8008622:	b9fb      	cbnz	r3, 8008664 <_strtod_l+0xb6c>
 8008624:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008628:	9014      	str	r0, [sp, #80]	@ 0x50
 800862a:	9315      	str	r3, [sp, #84]	@ 0x54
 800862c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008630:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008634:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008636:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800863a:	1b5b      	subs	r3, r3, r5
 800863c:	9311      	str	r3, [sp, #68]	@ 0x44
 800863e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008642:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008646:	f7ff f8ff 	bl	8007848 <__ulp>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	4650      	mov	r0, sl
 8008650:	4659      	mov	r1, fp
 8008652:	f7f8 f80d 	bl	8000670 <__aeabi_dmul>
 8008656:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800865a:	f7f7 fe53 	bl	8000304 <__adddf3>
 800865e:	4682      	mov	sl, r0
 8008660:	468b      	mov	fp, r1
 8008662:	e776      	b.n	8008552 <_strtod_l+0xa5a>
 8008664:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008668:	e7e0      	b.n	800862c <_strtod_l+0xb34>
 800866a:	a30d      	add	r3, pc, #52	@ (adr r3, 80086a0 <_strtod_l+0xba8>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	f7f8 fa70 	bl	8000b54 <__aeabi_dcmplt>
 8008674:	e79e      	b.n	80085b4 <_strtod_l+0xabc>
 8008676:	2300      	movs	r3, #0
 8008678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800867a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800867c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	f7ff ba77 	b.w	8007b72 <_strtod_l+0x7a>
 8008684:	2a65      	cmp	r2, #101	@ 0x65
 8008686:	f43f ab6e 	beq.w	8007d66 <_strtod_l+0x26e>
 800868a:	2a45      	cmp	r2, #69	@ 0x45
 800868c:	f43f ab6b 	beq.w	8007d66 <_strtod_l+0x26e>
 8008690:	2301      	movs	r3, #1
 8008692:	f7ff bba6 	b.w	8007de2 <_strtod_l+0x2ea>
 8008696:	bf00      	nop
 8008698:	ffc00000 	.word	0xffc00000
 800869c:	41dfffff 	.word	0x41dfffff
 80086a0:	94a03595 	.word	0x94a03595
 80086a4:	3fcfffff 	.word	0x3fcfffff

080086a8 <_strtod_r>:
 80086a8:	4b01      	ldr	r3, [pc, #4]	@ (80086b0 <_strtod_r+0x8>)
 80086aa:	f7ff ba25 	b.w	8007af8 <_strtod_l>
 80086ae:	bf00      	nop
 80086b0:	20000068 	.word	0x20000068

080086b4 <__ssputs_r>:
 80086b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b8:	461f      	mov	r7, r3
 80086ba:	688e      	ldr	r6, [r1, #8]
 80086bc:	4682      	mov	sl, r0
 80086be:	42be      	cmp	r6, r7
 80086c0:	460c      	mov	r4, r1
 80086c2:	4690      	mov	r8, r2
 80086c4:	680b      	ldr	r3, [r1, #0]
 80086c6:	d82d      	bhi.n	8008724 <__ssputs_r+0x70>
 80086c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086d0:	d026      	beq.n	8008720 <__ssputs_r+0x6c>
 80086d2:	6965      	ldr	r5, [r4, #20]
 80086d4:	6909      	ldr	r1, [r1, #16]
 80086d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086da:	eba3 0901 	sub.w	r9, r3, r1
 80086de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086e2:	1c7b      	adds	r3, r7, #1
 80086e4:	444b      	add	r3, r9
 80086e6:	106d      	asrs	r5, r5, #1
 80086e8:	429d      	cmp	r5, r3
 80086ea:	bf38      	it	cc
 80086ec:	461d      	movcc	r5, r3
 80086ee:	0553      	lsls	r3, r2, #21
 80086f0:	d527      	bpl.n	8008742 <__ssputs_r+0x8e>
 80086f2:	4629      	mov	r1, r5
 80086f4:	f7fe fcaa 	bl	800704c <_malloc_r>
 80086f8:	4606      	mov	r6, r0
 80086fa:	b360      	cbz	r0, 8008756 <__ssputs_r+0xa2>
 80086fc:	464a      	mov	r2, r9
 80086fe:	6921      	ldr	r1, [r4, #16]
 8008700:	f7fd fdb0 	bl	8006264 <memcpy>
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800870a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	6126      	str	r6, [r4, #16]
 8008712:	444e      	add	r6, r9
 8008714:	6026      	str	r6, [r4, #0]
 8008716:	463e      	mov	r6, r7
 8008718:	6165      	str	r5, [r4, #20]
 800871a:	eba5 0509 	sub.w	r5, r5, r9
 800871e:	60a5      	str	r5, [r4, #8]
 8008720:	42be      	cmp	r6, r7
 8008722:	d900      	bls.n	8008726 <__ssputs_r+0x72>
 8008724:	463e      	mov	r6, r7
 8008726:	4632      	mov	r2, r6
 8008728:	4641      	mov	r1, r8
 800872a:	6820      	ldr	r0, [r4, #0]
 800872c:	f000 fb03 	bl	8008d36 <memmove>
 8008730:	2000      	movs	r0, #0
 8008732:	68a3      	ldr	r3, [r4, #8]
 8008734:	1b9b      	subs	r3, r3, r6
 8008736:	60a3      	str	r3, [r4, #8]
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	4433      	add	r3, r6
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008742:	462a      	mov	r2, r5
 8008744:	f000 fed5 	bl	80094f2 <_realloc_r>
 8008748:	4606      	mov	r6, r0
 800874a:	2800      	cmp	r0, #0
 800874c:	d1e0      	bne.n	8008710 <__ssputs_r+0x5c>
 800874e:	4650      	mov	r0, sl
 8008750:	6921      	ldr	r1, [r4, #16]
 8008752:	f7fe fc09 	bl	8006f68 <_free_r>
 8008756:	230c      	movs	r3, #12
 8008758:	f8ca 3000 	str.w	r3, [sl]
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
 8008762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008766:	81a3      	strh	r3, [r4, #12]
 8008768:	e7e9      	b.n	800873e <__ssputs_r+0x8a>
	...

0800876c <_svfiprintf_r>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	4698      	mov	r8, r3
 8008772:	898b      	ldrh	r3, [r1, #12]
 8008774:	4607      	mov	r7, r0
 8008776:	061b      	lsls	r3, r3, #24
 8008778:	460d      	mov	r5, r1
 800877a:	4614      	mov	r4, r2
 800877c:	b09d      	sub	sp, #116	@ 0x74
 800877e:	d510      	bpl.n	80087a2 <_svfiprintf_r+0x36>
 8008780:	690b      	ldr	r3, [r1, #16]
 8008782:	b973      	cbnz	r3, 80087a2 <_svfiprintf_r+0x36>
 8008784:	2140      	movs	r1, #64	@ 0x40
 8008786:	f7fe fc61 	bl	800704c <_malloc_r>
 800878a:	6028      	str	r0, [r5, #0]
 800878c:	6128      	str	r0, [r5, #16]
 800878e:	b930      	cbnz	r0, 800879e <_svfiprintf_r+0x32>
 8008790:	230c      	movs	r3, #12
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	b01d      	add	sp, #116	@ 0x74
 800879a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879e:	2340      	movs	r3, #64	@ 0x40
 80087a0:	616b      	str	r3, [r5, #20]
 80087a2:	2300      	movs	r3, #0
 80087a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087a6:	2320      	movs	r3, #32
 80087a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087ac:	2330      	movs	r3, #48	@ 0x30
 80087ae:	f04f 0901 	mov.w	r9, #1
 80087b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80087b6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008950 <_svfiprintf_r+0x1e4>
 80087ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087be:	4623      	mov	r3, r4
 80087c0:	469a      	mov	sl, r3
 80087c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087c6:	b10a      	cbz	r2, 80087cc <_svfiprintf_r+0x60>
 80087c8:	2a25      	cmp	r2, #37	@ 0x25
 80087ca:	d1f9      	bne.n	80087c0 <_svfiprintf_r+0x54>
 80087cc:	ebba 0b04 	subs.w	fp, sl, r4
 80087d0:	d00b      	beq.n	80087ea <_svfiprintf_r+0x7e>
 80087d2:	465b      	mov	r3, fp
 80087d4:	4622      	mov	r2, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	4638      	mov	r0, r7
 80087da:	f7ff ff6b 	bl	80086b4 <__ssputs_r>
 80087de:	3001      	adds	r0, #1
 80087e0:	f000 80a7 	beq.w	8008932 <_svfiprintf_r+0x1c6>
 80087e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087e6:	445a      	add	r2, fp
 80087e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80087ea:	f89a 3000 	ldrb.w	r3, [sl]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 809f 	beq.w	8008932 <_svfiprintf_r+0x1c6>
 80087f4:	2300      	movs	r3, #0
 80087f6:	f04f 32ff 	mov.w	r2, #4294967295
 80087fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087fe:	f10a 0a01 	add.w	sl, sl, #1
 8008802:	9304      	str	r3, [sp, #16]
 8008804:	9307      	str	r3, [sp, #28]
 8008806:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800880a:	931a      	str	r3, [sp, #104]	@ 0x68
 800880c:	4654      	mov	r4, sl
 800880e:	2205      	movs	r2, #5
 8008810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008814:	484e      	ldr	r0, [pc, #312]	@ (8008950 <_svfiprintf_r+0x1e4>)
 8008816:	f7fd fd17 	bl	8006248 <memchr>
 800881a:	9a04      	ldr	r2, [sp, #16]
 800881c:	b9d8      	cbnz	r0, 8008856 <_svfiprintf_r+0xea>
 800881e:	06d0      	lsls	r0, r2, #27
 8008820:	bf44      	itt	mi
 8008822:	2320      	movmi	r3, #32
 8008824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008828:	0711      	lsls	r1, r2, #28
 800882a:	bf44      	itt	mi
 800882c:	232b      	movmi	r3, #43	@ 0x2b
 800882e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008832:	f89a 3000 	ldrb.w	r3, [sl]
 8008836:	2b2a      	cmp	r3, #42	@ 0x2a
 8008838:	d015      	beq.n	8008866 <_svfiprintf_r+0xfa>
 800883a:	4654      	mov	r4, sl
 800883c:	2000      	movs	r0, #0
 800883e:	f04f 0c0a 	mov.w	ip, #10
 8008842:	9a07      	ldr	r2, [sp, #28]
 8008844:	4621      	mov	r1, r4
 8008846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800884a:	3b30      	subs	r3, #48	@ 0x30
 800884c:	2b09      	cmp	r3, #9
 800884e:	d94b      	bls.n	80088e8 <_svfiprintf_r+0x17c>
 8008850:	b1b0      	cbz	r0, 8008880 <_svfiprintf_r+0x114>
 8008852:	9207      	str	r2, [sp, #28]
 8008854:	e014      	b.n	8008880 <_svfiprintf_r+0x114>
 8008856:	eba0 0308 	sub.w	r3, r0, r8
 800885a:	fa09 f303 	lsl.w	r3, r9, r3
 800885e:	4313      	orrs	r3, r2
 8008860:	46a2      	mov	sl, r4
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	e7d2      	b.n	800880c <_svfiprintf_r+0xa0>
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	1d19      	adds	r1, r3, #4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	9103      	str	r1, [sp, #12]
 800886e:	2b00      	cmp	r3, #0
 8008870:	bfbb      	ittet	lt
 8008872:	425b      	neglt	r3, r3
 8008874:	f042 0202 	orrlt.w	r2, r2, #2
 8008878:	9307      	strge	r3, [sp, #28]
 800887a:	9307      	strlt	r3, [sp, #28]
 800887c:	bfb8      	it	lt
 800887e:	9204      	strlt	r2, [sp, #16]
 8008880:	7823      	ldrb	r3, [r4, #0]
 8008882:	2b2e      	cmp	r3, #46	@ 0x2e
 8008884:	d10a      	bne.n	800889c <_svfiprintf_r+0x130>
 8008886:	7863      	ldrb	r3, [r4, #1]
 8008888:	2b2a      	cmp	r3, #42	@ 0x2a
 800888a:	d132      	bne.n	80088f2 <_svfiprintf_r+0x186>
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	3402      	adds	r4, #2
 8008890:	1d1a      	adds	r2, r3, #4
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	9203      	str	r2, [sp, #12]
 8008896:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008954 <_svfiprintf_r+0x1e8>
 80088a0:	2203      	movs	r2, #3
 80088a2:	4650      	mov	r0, sl
 80088a4:	7821      	ldrb	r1, [r4, #0]
 80088a6:	f7fd fccf 	bl	8006248 <memchr>
 80088aa:	b138      	cbz	r0, 80088bc <_svfiprintf_r+0x150>
 80088ac:	2240      	movs	r2, #64	@ 0x40
 80088ae:	9b04      	ldr	r3, [sp, #16]
 80088b0:	eba0 000a 	sub.w	r0, r0, sl
 80088b4:	4082      	lsls	r2, r0
 80088b6:	4313      	orrs	r3, r2
 80088b8:	3401      	adds	r4, #1
 80088ba:	9304      	str	r3, [sp, #16]
 80088bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c0:	2206      	movs	r2, #6
 80088c2:	4825      	ldr	r0, [pc, #148]	@ (8008958 <_svfiprintf_r+0x1ec>)
 80088c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088c8:	f7fd fcbe 	bl	8006248 <memchr>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d036      	beq.n	800893e <_svfiprintf_r+0x1d2>
 80088d0:	4b22      	ldr	r3, [pc, #136]	@ (800895c <_svfiprintf_r+0x1f0>)
 80088d2:	bb1b      	cbnz	r3, 800891c <_svfiprintf_r+0x1b0>
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	3307      	adds	r3, #7
 80088d8:	f023 0307 	bic.w	r3, r3, #7
 80088dc:	3308      	adds	r3, #8
 80088de:	9303      	str	r3, [sp, #12]
 80088e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088e2:	4433      	add	r3, r6
 80088e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088e6:	e76a      	b.n	80087be <_svfiprintf_r+0x52>
 80088e8:	460c      	mov	r4, r1
 80088ea:	2001      	movs	r0, #1
 80088ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80088f0:	e7a8      	b.n	8008844 <_svfiprintf_r+0xd8>
 80088f2:	2300      	movs	r3, #0
 80088f4:	f04f 0c0a 	mov.w	ip, #10
 80088f8:	4619      	mov	r1, r3
 80088fa:	3401      	adds	r4, #1
 80088fc:	9305      	str	r3, [sp, #20]
 80088fe:	4620      	mov	r0, r4
 8008900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008904:	3a30      	subs	r2, #48	@ 0x30
 8008906:	2a09      	cmp	r2, #9
 8008908:	d903      	bls.n	8008912 <_svfiprintf_r+0x1a6>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0c6      	beq.n	800889c <_svfiprintf_r+0x130>
 800890e:	9105      	str	r1, [sp, #20]
 8008910:	e7c4      	b.n	800889c <_svfiprintf_r+0x130>
 8008912:	4604      	mov	r4, r0
 8008914:	2301      	movs	r3, #1
 8008916:	fb0c 2101 	mla	r1, ip, r1, r2
 800891a:	e7f0      	b.n	80088fe <_svfiprintf_r+0x192>
 800891c:	ab03      	add	r3, sp, #12
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	462a      	mov	r2, r5
 8008922:	4638      	mov	r0, r7
 8008924:	4b0e      	ldr	r3, [pc, #56]	@ (8008960 <_svfiprintf_r+0x1f4>)
 8008926:	a904      	add	r1, sp, #16
 8008928:	f7fb ff7c 	bl	8004824 <_printf_float>
 800892c:	1c42      	adds	r2, r0, #1
 800892e:	4606      	mov	r6, r0
 8008930:	d1d6      	bne.n	80088e0 <_svfiprintf_r+0x174>
 8008932:	89ab      	ldrh	r3, [r5, #12]
 8008934:	065b      	lsls	r3, r3, #25
 8008936:	f53f af2d 	bmi.w	8008794 <_svfiprintf_r+0x28>
 800893a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800893c:	e72c      	b.n	8008798 <_svfiprintf_r+0x2c>
 800893e:	ab03      	add	r3, sp, #12
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	462a      	mov	r2, r5
 8008944:	4638      	mov	r0, r7
 8008946:	4b06      	ldr	r3, [pc, #24]	@ (8008960 <_svfiprintf_r+0x1f4>)
 8008948:	a904      	add	r1, sp, #16
 800894a:	f7fc fa09 	bl	8004d60 <_printf_i>
 800894e:	e7ed      	b.n	800892c <_svfiprintf_r+0x1c0>
 8008950:	0800a118 	.word	0x0800a118
 8008954:	0800a11e 	.word	0x0800a11e
 8008958:	0800a122 	.word	0x0800a122
 800895c:	08004825 	.word	0x08004825
 8008960:	080086b5 	.word	0x080086b5

08008964 <__sfputc_r>:
 8008964:	6893      	ldr	r3, [r2, #8]
 8008966:	b410      	push	{r4}
 8008968:	3b01      	subs	r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	6093      	str	r3, [r2, #8]
 800896e:	da07      	bge.n	8008980 <__sfputc_r+0x1c>
 8008970:	6994      	ldr	r4, [r2, #24]
 8008972:	42a3      	cmp	r3, r4
 8008974:	db01      	blt.n	800897a <__sfputc_r+0x16>
 8008976:	290a      	cmp	r1, #10
 8008978:	d102      	bne.n	8008980 <__sfputc_r+0x1c>
 800897a:	bc10      	pop	{r4}
 800897c:	f7fd ba27 	b.w	8005dce <__swbuf_r>
 8008980:	6813      	ldr	r3, [r2, #0]
 8008982:	1c58      	adds	r0, r3, #1
 8008984:	6010      	str	r0, [r2, #0]
 8008986:	7019      	strb	r1, [r3, #0]
 8008988:	4608      	mov	r0, r1
 800898a:	bc10      	pop	{r4}
 800898c:	4770      	bx	lr

0800898e <__sfputs_r>:
 800898e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008990:	4606      	mov	r6, r0
 8008992:	460f      	mov	r7, r1
 8008994:	4614      	mov	r4, r2
 8008996:	18d5      	adds	r5, r2, r3
 8008998:	42ac      	cmp	r4, r5
 800899a:	d101      	bne.n	80089a0 <__sfputs_r+0x12>
 800899c:	2000      	movs	r0, #0
 800899e:	e007      	b.n	80089b0 <__sfputs_r+0x22>
 80089a0:	463a      	mov	r2, r7
 80089a2:	4630      	mov	r0, r6
 80089a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a8:	f7ff ffdc 	bl	8008964 <__sfputc_r>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d1f3      	bne.n	8008998 <__sfputs_r+0xa>
 80089b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089b4 <_vfiprintf_r>:
 80089b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	460d      	mov	r5, r1
 80089ba:	4614      	mov	r4, r2
 80089bc:	4698      	mov	r8, r3
 80089be:	4606      	mov	r6, r0
 80089c0:	b09d      	sub	sp, #116	@ 0x74
 80089c2:	b118      	cbz	r0, 80089cc <_vfiprintf_r+0x18>
 80089c4:	6a03      	ldr	r3, [r0, #32]
 80089c6:	b90b      	cbnz	r3, 80089cc <_vfiprintf_r+0x18>
 80089c8:	f7fc ff72 	bl	80058b0 <__sinit>
 80089cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089ce:	07d9      	lsls	r1, r3, #31
 80089d0:	d405      	bmi.n	80089de <_vfiprintf_r+0x2a>
 80089d2:	89ab      	ldrh	r3, [r5, #12]
 80089d4:	059a      	lsls	r2, r3, #22
 80089d6:	d402      	bmi.n	80089de <_vfiprintf_r+0x2a>
 80089d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089da:	f7fd fc33 	bl	8006244 <__retarget_lock_acquire_recursive>
 80089de:	89ab      	ldrh	r3, [r5, #12]
 80089e0:	071b      	lsls	r3, r3, #28
 80089e2:	d501      	bpl.n	80089e8 <_vfiprintf_r+0x34>
 80089e4:	692b      	ldr	r3, [r5, #16]
 80089e6:	b99b      	cbnz	r3, 8008a10 <_vfiprintf_r+0x5c>
 80089e8:	4629      	mov	r1, r5
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7fd fa2e 	bl	8005e4c <__swsetup_r>
 80089f0:	b170      	cbz	r0, 8008a10 <_vfiprintf_r+0x5c>
 80089f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089f4:	07dc      	lsls	r4, r3, #31
 80089f6:	d504      	bpl.n	8008a02 <_vfiprintf_r+0x4e>
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	b01d      	add	sp, #116	@ 0x74
 80089fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a02:	89ab      	ldrh	r3, [r5, #12]
 8008a04:	0598      	lsls	r0, r3, #22
 8008a06:	d4f7      	bmi.n	80089f8 <_vfiprintf_r+0x44>
 8008a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a0a:	f7fd fc1c 	bl	8006246 <__retarget_lock_release_recursive>
 8008a0e:	e7f3      	b.n	80089f8 <_vfiprintf_r+0x44>
 8008a10:	2300      	movs	r3, #0
 8008a12:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a14:	2320      	movs	r3, #32
 8008a16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a1a:	2330      	movs	r3, #48	@ 0x30
 8008a1c:	f04f 0901 	mov.w	r9, #1
 8008a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a24:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008bd0 <_vfiprintf_r+0x21c>
 8008a28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	469a      	mov	sl, r3
 8008a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a34:	b10a      	cbz	r2, 8008a3a <_vfiprintf_r+0x86>
 8008a36:	2a25      	cmp	r2, #37	@ 0x25
 8008a38:	d1f9      	bne.n	8008a2e <_vfiprintf_r+0x7a>
 8008a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a3e:	d00b      	beq.n	8008a58 <_vfiprintf_r+0xa4>
 8008a40:	465b      	mov	r3, fp
 8008a42:	4622      	mov	r2, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7ff ffa1 	bl	800898e <__sfputs_r>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f000 80a7 	beq.w	8008ba0 <_vfiprintf_r+0x1ec>
 8008a52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a54:	445a      	add	r2, fp
 8008a56:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a58:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 809f 	beq.w	8008ba0 <_vfiprintf_r+0x1ec>
 8008a62:	2300      	movs	r3, #0
 8008a64:	f04f 32ff 	mov.w	r2, #4294967295
 8008a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a6c:	f10a 0a01 	add.w	sl, sl, #1
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	9307      	str	r3, [sp, #28]
 8008a74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a78:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a7a:	4654      	mov	r4, sl
 8008a7c:	2205      	movs	r2, #5
 8008a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a82:	4853      	ldr	r0, [pc, #332]	@ (8008bd0 <_vfiprintf_r+0x21c>)
 8008a84:	f7fd fbe0 	bl	8006248 <memchr>
 8008a88:	9a04      	ldr	r2, [sp, #16]
 8008a8a:	b9d8      	cbnz	r0, 8008ac4 <_vfiprintf_r+0x110>
 8008a8c:	06d1      	lsls	r1, r2, #27
 8008a8e:	bf44      	itt	mi
 8008a90:	2320      	movmi	r3, #32
 8008a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a96:	0713      	lsls	r3, r2, #28
 8008a98:	bf44      	itt	mi
 8008a9a:	232b      	movmi	r3, #43	@ 0x2b
 8008a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa6:	d015      	beq.n	8008ad4 <_vfiprintf_r+0x120>
 8008aa8:	4654      	mov	r4, sl
 8008aaa:	2000      	movs	r0, #0
 8008aac:	f04f 0c0a 	mov.w	ip, #10
 8008ab0:	9a07      	ldr	r2, [sp, #28]
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab8:	3b30      	subs	r3, #48	@ 0x30
 8008aba:	2b09      	cmp	r3, #9
 8008abc:	d94b      	bls.n	8008b56 <_vfiprintf_r+0x1a2>
 8008abe:	b1b0      	cbz	r0, 8008aee <_vfiprintf_r+0x13a>
 8008ac0:	9207      	str	r2, [sp, #28]
 8008ac2:	e014      	b.n	8008aee <_vfiprintf_r+0x13a>
 8008ac4:	eba0 0308 	sub.w	r3, r0, r8
 8008ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8008acc:	4313      	orrs	r3, r2
 8008ace:	46a2      	mov	sl, r4
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	e7d2      	b.n	8008a7a <_vfiprintf_r+0xc6>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	1d19      	adds	r1, r3, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	9103      	str	r1, [sp, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bfbb      	ittet	lt
 8008ae0:	425b      	neglt	r3, r3
 8008ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae6:	9307      	strge	r3, [sp, #28]
 8008ae8:	9307      	strlt	r3, [sp, #28]
 8008aea:	bfb8      	it	lt
 8008aec:	9204      	strlt	r2, [sp, #16]
 8008aee:	7823      	ldrb	r3, [r4, #0]
 8008af0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008af2:	d10a      	bne.n	8008b0a <_vfiprintf_r+0x156>
 8008af4:	7863      	ldrb	r3, [r4, #1]
 8008af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af8:	d132      	bne.n	8008b60 <_vfiprintf_r+0x1ac>
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	3402      	adds	r4, #2
 8008afe:	1d1a      	adds	r2, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9203      	str	r2, [sp, #12]
 8008b04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b08:	9305      	str	r3, [sp, #20]
 8008b0a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008bd4 <_vfiprintf_r+0x220>
 8008b0e:	2203      	movs	r2, #3
 8008b10:	4650      	mov	r0, sl
 8008b12:	7821      	ldrb	r1, [r4, #0]
 8008b14:	f7fd fb98 	bl	8006248 <memchr>
 8008b18:	b138      	cbz	r0, 8008b2a <_vfiprintf_r+0x176>
 8008b1a:	2240      	movs	r2, #64	@ 0x40
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	eba0 000a 	sub.w	r0, r0, sl
 8008b22:	4082      	lsls	r2, r0
 8008b24:	4313      	orrs	r3, r2
 8008b26:	3401      	adds	r4, #1
 8008b28:	9304      	str	r3, [sp, #16]
 8008b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2e:	2206      	movs	r2, #6
 8008b30:	4829      	ldr	r0, [pc, #164]	@ (8008bd8 <_vfiprintf_r+0x224>)
 8008b32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b36:	f7fd fb87 	bl	8006248 <memchr>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d03f      	beq.n	8008bbe <_vfiprintf_r+0x20a>
 8008b3e:	4b27      	ldr	r3, [pc, #156]	@ (8008bdc <_vfiprintf_r+0x228>)
 8008b40:	bb1b      	cbnz	r3, 8008b8a <_vfiprintf_r+0x1d6>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	3307      	adds	r3, #7
 8008b46:	f023 0307 	bic.w	r3, r3, #7
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	9303      	str	r3, [sp, #12]
 8008b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b50:	443b      	add	r3, r7
 8008b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b54:	e76a      	b.n	8008a2c <_vfiprintf_r+0x78>
 8008b56:	460c      	mov	r4, r1
 8008b58:	2001      	movs	r0, #1
 8008b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b5e:	e7a8      	b.n	8008ab2 <_vfiprintf_r+0xfe>
 8008b60:	2300      	movs	r3, #0
 8008b62:	f04f 0c0a 	mov.w	ip, #10
 8008b66:	4619      	mov	r1, r3
 8008b68:	3401      	adds	r4, #1
 8008b6a:	9305      	str	r3, [sp, #20]
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b72:	3a30      	subs	r2, #48	@ 0x30
 8008b74:	2a09      	cmp	r2, #9
 8008b76:	d903      	bls.n	8008b80 <_vfiprintf_r+0x1cc>
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0c6      	beq.n	8008b0a <_vfiprintf_r+0x156>
 8008b7c:	9105      	str	r1, [sp, #20]
 8008b7e:	e7c4      	b.n	8008b0a <_vfiprintf_r+0x156>
 8008b80:	4604      	mov	r4, r0
 8008b82:	2301      	movs	r3, #1
 8008b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b88:	e7f0      	b.n	8008b6c <_vfiprintf_r+0x1b8>
 8008b8a:	ab03      	add	r3, sp, #12
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	462a      	mov	r2, r5
 8008b90:	4630      	mov	r0, r6
 8008b92:	4b13      	ldr	r3, [pc, #76]	@ (8008be0 <_vfiprintf_r+0x22c>)
 8008b94:	a904      	add	r1, sp, #16
 8008b96:	f7fb fe45 	bl	8004824 <_printf_float>
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	1c78      	adds	r0, r7, #1
 8008b9e:	d1d6      	bne.n	8008b4e <_vfiprintf_r+0x19a>
 8008ba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ba2:	07d9      	lsls	r1, r3, #31
 8008ba4:	d405      	bmi.n	8008bb2 <_vfiprintf_r+0x1fe>
 8008ba6:	89ab      	ldrh	r3, [r5, #12]
 8008ba8:	059a      	lsls	r2, r3, #22
 8008baa:	d402      	bmi.n	8008bb2 <_vfiprintf_r+0x1fe>
 8008bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bae:	f7fd fb4a 	bl	8006246 <__retarget_lock_release_recursive>
 8008bb2:	89ab      	ldrh	r3, [r5, #12]
 8008bb4:	065b      	lsls	r3, r3, #25
 8008bb6:	f53f af1f 	bmi.w	80089f8 <_vfiprintf_r+0x44>
 8008bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bbc:	e71e      	b.n	80089fc <_vfiprintf_r+0x48>
 8008bbe:	ab03      	add	r3, sp, #12
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	462a      	mov	r2, r5
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	4b06      	ldr	r3, [pc, #24]	@ (8008be0 <_vfiprintf_r+0x22c>)
 8008bc8:	a904      	add	r1, sp, #16
 8008bca:	f7fc f8c9 	bl	8004d60 <_printf_i>
 8008bce:	e7e4      	b.n	8008b9a <_vfiprintf_r+0x1e6>
 8008bd0:	0800a118 	.word	0x0800a118
 8008bd4:	0800a11e 	.word	0x0800a11e
 8008bd8:	0800a122 	.word	0x0800a122
 8008bdc:	08004825 	.word	0x08004825
 8008be0:	0800898f 	.word	0x0800898f

08008be4 <__sflags>:
 8008be4:	780b      	ldrb	r3, [r1, #0]
 8008be6:	b530      	push	{r4, r5, lr}
 8008be8:	2b72      	cmp	r3, #114	@ 0x72
 8008bea:	d022      	beq.n	8008c32 <__sflags+0x4e>
 8008bec:	2b77      	cmp	r3, #119	@ 0x77
 8008bee:	d024      	beq.n	8008c3a <__sflags+0x56>
 8008bf0:	2b61      	cmp	r3, #97	@ 0x61
 8008bf2:	d027      	beq.n	8008c44 <__sflags+0x60>
 8008bf4:	2316      	movs	r3, #22
 8008bf6:	6003      	str	r3, [r0, #0]
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	bd30      	pop	{r4, r5, pc}
 8008bfc:	2d62      	cmp	r5, #98	@ 0x62
 8008bfe:	d012      	beq.n	8008c26 <__sflags+0x42>
 8008c00:	2d78      	cmp	r5, #120	@ 0x78
 8008c02:	d013      	beq.n	8008c2c <__sflags+0x48>
 8008c04:	2d2b      	cmp	r5, #43	@ 0x2b
 8008c06:	d107      	bne.n	8008c18 <__sflags+0x34>
 8008c08:	f020 001c 	bic.w	r0, r0, #28
 8008c0c:	f023 0303 	bic.w	r3, r3, #3
 8008c10:	f040 0010 	orr.w	r0, r0, #16
 8008c14:	f043 0302 	orr.w	r3, r3, #2
 8008c18:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	d1ed      	bne.n	8008bfc <__sflags+0x18>
 8008c20:	4323      	orrs	r3, r4
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	e7e9      	b.n	8008bfa <__sflags+0x16>
 8008c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c2a:	e7f5      	b.n	8008c18 <__sflags+0x34>
 8008c2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008c30:	e7f2      	b.n	8008c18 <__sflags+0x34>
 8008c32:	2400      	movs	r4, #0
 8008c34:	2004      	movs	r0, #4
 8008c36:	4623      	mov	r3, r4
 8008c38:	e7ee      	b.n	8008c18 <__sflags+0x34>
 8008c3a:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 8008c3e:	2301      	movs	r3, #1
 8008c40:	2008      	movs	r0, #8
 8008c42:	e7e9      	b.n	8008c18 <__sflags+0x34>
 8008c44:	f44f 7402 	mov.w	r4, #520	@ 0x208
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8008c4e:	e7e3      	b.n	8008c18 <__sflags+0x34>

08008c50 <fiprintf>:
 8008c50:	b40e      	push	{r1, r2, r3}
 8008c52:	b503      	push	{r0, r1, lr}
 8008c54:	4601      	mov	r1, r0
 8008c56:	ab03      	add	r3, sp, #12
 8008c58:	4805      	ldr	r0, [pc, #20]	@ (8008c70 <fiprintf+0x20>)
 8008c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5e:	6800      	ldr	r0, [r0, #0]
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	f7ff fea7 	bl	80089b4 <_vfiprintf_r>
 8008c66:	b002      	add	sp, #8
 8008c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c6c:	b003      	add	sp, #12
 8008c6e:	4770      	bx	lr
 8008c70:	20000018 	.word	0x20000018

08008c74 <__swhatbuf_r>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	460c      	mov	r4, r1
 8008c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7c:	4615      	mov	r5, r2
 8008c7e:	2900      	cmp	r1, #0
 8008c80:	461e      	mov	r6, r3
 8008c82:	b096      	sub	sp, #88	@ 0x58
 8008c84:	da0c      	bge.n	8008ca0 <__swhatbuf_r+0x2c>
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	2100      	movs	r1, #0
 8008c8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c8e:	bf14      	ite	ne
 8008c90:	2340      	movne	r3, #64	@ 0x40
 8008c92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c96:	2000      	movs	r0, #0
 8008c98:	6031      	str	r1, [r6, #0]
 8008c9a:	602b      	str	r3, [r5, #0]
 8008c9c:	b016      	add	sp, #88	@ 0x58
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ca0:	466a      	mov	r2, sp
 8008ca2:	f000 f875 	bl	8008d90 <_fstat_r>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	dbed      	blt.n	8008c86 <__swhatbuf_r+0x12>
 8008caa:	9901      	ldr	r1, [sp, #4]
 8008cac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cb0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cb4:	4259      	negs	r1, r3
 8008cb6:	4159      	adcs	r1, r3
 8008cb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cbc:	e7eb      	b.n	8008c96 <__swhatbuf_r+0x22>

08008cbe <__smakebuf_r>:
 8008cbe:	898b      	ldrh	r3, [r1, #12]
 8008cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cc2:	079d      	lsls	r5, r3, #30
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	d507      	bpl.n	8008cda <__smakebuf_r+0x1c>
 8008cca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008cce:	6023      	str	r3, [r4, #0]
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6163      	str	r3, [r4, #20]
 8008cd6:	b003      	add	sp, #12
 8008cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cda:	466a      	mov	r2, sp
 8008cdc:	ab01      	add	r3, sp, #4
 8008cde:	f7ff ffc9 	bl	8008c74 <__swhatbuf_r>
 8008ce2:	9f00      	ldr	r7, [sp, #0]
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7fe f9af 	bl	800704c <_malloc_r>
 8008cee:	b948      	cbnz	r0, 8008d04 <__smakebuf_r+0x46>
 8008cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf4:	059a      	lsls	r2, r3, #22
 8008cf6:	d4ee      	bmi.n	8008cd6 <__smakebuf_r+0x18>
 8008cf8:	f023 0303 	bic.w	r3, r3, #3
 8008cfc:	f043 0302 	orr.w	r3, r3, #2
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	e7e2      	b.n	8008cca <__smakebuf_r+0xc>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	9b01      	ldr	r3, [sp, #4]
 8008d12:	6020      	str	r0, [r4, #0]
 8008d14:	b15b      	cbz	r3, 8008d2e <__smakebuf_r+0x70>
 8008d16:	4630      	mov	r0, r6
 8008d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d1c:	f000 f84a 	bl	8008db4 <_isatty_r>
 8008d20:	b128      	cbz	r0, 8008d2e <__smakebuf_r+0x70>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f023 0303 	bic.w	r3, r3, #3
 8008d28:	f043 0301 	orr.w	r3, r3, #1
 8008d2c:	81a3      	strh	r3, [r4, #12]
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	431d      	orrs	r5, r3
 8008d32:	81a5      	strh	r5, [r4, #12]
 8008d34:	e7cf      	b.n	8008cd6 <__smakebuf_r+0x18>

08008d36 <memmove>:
 8008d36:	4288      	cmp	r0, r1
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	eb01 0402 	add.w	r4, r1, r2
 8008d3e:	d902      	bls.n	8008d46 <memmove+0x10>
 8008d40:	4284      	cmp	r4, r0
 8008d42:	4623      	mov	r3, r4
 8008d44:	d807      	bhi.n	8008d56 <memmove+0x20>
 8008d46:	1e43      	subs	r3, r0, #1
 8008d48:	42a1      	cmp	r1, r4
 8008d4a:	d008      	beq.n	8008d5e <memmove+0x28>
 8008d4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d54:	e7f8      	b.n	8008d48 <memmove+0x12>
 8008d56:	4601      	mov	r1, r0
 8008d58:	4402      	add	r2, r0
 8008d5a:	428a      	cmp	r2, r1
 8008d5c:	d100      	bne.n	8008d60 <memmove+0x2a>
 8008d5e:	bd10      	pop	{r4, pc}
 8008d60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d68:	e7f7      	b.n	8008d5a <memmove+0x24>

08008d6a <strncmp>:
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	b16a      	cbz	r2, 8008d8a <strncmp+0x20>
 8008d6e:	3901      	subs	r1, #1
 8008d70:	1884      	adds	r4, r0, r2
 8008d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d103      	bne.n	8008d86 <strncmp+0x1c>
 8008d7e:	42a0      	cmp	r0, r4
 8008d80:	d001      	beq.n	8008d86 <strncmp+0x1c>
 8008d82:	2a00      	cmp	r2, #0
 8008d84:	d1f5      	bne.n	8008d72 <strncmp+0x8>
 8008d86:	1ad0      	subs	r0, r2, r3
 8008d88:	bd10      	pop	{r4, pc}
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	e7fc      	b.n	8008d88 <strncmp+0x1e>
	...

08008d90 <_fstat_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	2300      	movs	r3, #0
 8008d94:	4d06      	ldr	r5, [pc, #24]	@ (8008db0 <_fstat_r+0x20>)
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	f7f9 fc89 	bl	80026b4 <_fstat>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	d102      	bne.n	8008dac <_fstat_r+0x1c>
 8008da6:	682b      	ldr	r3, [r5, #0]
 8008da8:	b103      	cbz	r3, 8008dac <_fstat_r+0x1c>
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	bf00      	nop
 8008db0:	200007dc 	.word	0x200007dc

08008db4 <_isatty_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	2300      	movs	r3, #0
 8008db8:	4d05      	ldr	r5, [pc, #20]	@ (8008dd0 <_isatty_r+0x1c>)
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	f7f9 fc87 	bl	80026d2 <_isatty>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_isatty_r+0x1a>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_isatty_r+0x1a>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	200007dc 	.word	0x200007dc

08008dd4 <_link_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	4d06      	ldr	r5, [pc, #24]	@ (8008df4 <_link_r+0x20>)
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	4611      	mov	r1, r2
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	f7f9 fca8 	bl	8002736 <_link>
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	d102      	bne.n	8008df0 <_link_r+0x1c>
 8008dea:	682b      	ldr	r3, [r5, #0]
 8008dec:	b103      	cbz	r3, 8008df0 <_link_r+0x1c>
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	bd38      	pop	{r3, r4, r5, pc}
 8008df2:	bf00      	nop
 8008df4:	200007dc 	.word	0x200007dc

08008df8 <_sbrk_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4d05      	ldr	r5, [pc, #20]	@ (8008e14 <_sbrk_r+0x1c>)
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	f7f9 fca8 	bl	8002758 <_sbrk>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_sbrk_r+0x1a>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_sbrk_r+0x1a>
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	200007dc 	.word	0x200007dc

08008e18 <nan>:
 8008e18:	2000      	movs	r0, #0
 8008e1a:	4901      	ldr	r1, [pc, #4]	@ (8008e20 <nan+0x8>)
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	7ff80000 	.word	0x7ff80000

08008e24 <abort>:
 8008e24:	2006      	movs	r0, #6
 8008e26:	b508      	push	{r3, lr}
 8008e28:	f000 fbc6 	bl	80095b8 <raise>
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	f7f9 fc0e 	bl	800264e <_exit>

08008e32 <_calloc_r>:
 8008e32:	b570      	push	{r4, r5, r6, lr}
 8008e34:	fba1 5402 	umull	r5, r4, r1, r2
 8008e38:	b93c      	cbnz	r4, 8008e4a <_calloc_r+0x18>
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f7fe f906 	bl	800704c <_malloc_r>
 8008e40:	4606      	mov	r6, r0
 8008e42:	b928      	cbnz	r0, 8008e50 <_calloc_r+0x1e>
 8008e44:	2600      	movs	r6, #0
 8008e46:	4630      	mov	r0, r6
 8008e48:	bd70      	pop	{r4, r5, r6, pc}
 8008e4a:	220c      	movs	r2, #12
 8008e4c:	6002      	str	r2, [r0, #0]
 8008e4e:	e7f9      	b.n	8008e44 <_calloc_r+0x12>
 8008e50:	462a      	mov	r2, r5
 8008e52:	4621      	mov	r1, r4
 8008e54:	f7fd f8e7 	bl	8006026 <memset>
 8008e58:	e7f5      	b.n	8008e46 <_calloc_r+0x14>

08008e5a <rshift>:
 8008e5a:	6903      	ldr	r3, [r0, #16]
 8008e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e60:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e64:	f100 0414 	add.w	r4, r0, #20
 8008e68:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e6c:	dd46      	ble.n	8008efc <rshift+0xa2>
 8008e6e:	f011 011f 	ands.w	r1, r1, #31
 8008e72:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e76:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e7a:	d10c      	bne.n	8008e96 <rshift+0x3c>
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	f100 0710 	add.w	r7, r0, #16
 8008e82:	42b1      	cmp	r1, r6
 8008e84:	d335      	bcc.n	8008ef2 <rshift+0x98>
 8008e86:	1a9b      	subs	r3, r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	1eea      	subs	r2, r5, #3
 8008e8c:	4296      	cmp	r6, r2
 8008e8e:	bf38      	it	cc
 8008e90:	2300      	movcc	r3, #0
 8008e92:	4423      	add	r3, r4
 8008e94:	e015      	b.n	8008ec2 <rshift+0x68>
 8008e96:	46a1      	mov	r9, r4
 8008e98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e9c:	f1c1 0820 	rsb	r8, r1, #32
 8008ea0:	40cf      	lsrs	r7, r1
 8008ea2:	f105 0e04 	add.w	lr, r5, #4
 8008ea6:	4576      	cmp	r6, lr
 8008ea8:	46f4      	mov	ip, lr
 8008eaa:	d816      	bhi.n	8008eda <rshift+0x80>
 8008eac:	1a9a      	subs	r2, r3, r2
 8008eae:	0092      	lsls	r2, r2, #2
 8008eb0:	3a04      	subs	r2, #4
 8008eb2:	3501      	adds	r5, #1
 8008eb4:	42ae      	cmp	r6, r5
 8008eb6:	bf38      	it	cc
 8008eb8:	2200      	movcc	r2, #0
 8008eba:	18a3      	adds	r3, r4, r2
 8008ebc:	50a7      	str	r7, [r4, r2]
 8008ebe:	b107      	cbz	r7, 8008ec2 <rshift+0x68>
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	eba3 0204 	sub.w	r2, r3, r4
 8008ec8:	bf08      	it	eq
 8008eca:	2300      	moveq	r3, #0
 8008ecc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ed0:	6102      	str	r2, [r0, #16]
 8008ed2:	bf08      	it	eq
 8008ed4:	6143      	streq	r3, [r0, #20]
 8008ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eda:	f8dc c000 	ldr.w	ip, [ip]
 8008ede:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ee2:	ea4c 0707 	orr.w	r7, ip, r7
 8008ee6:	f849 7b04 	str.w	r7, [r9], #4
 8008eea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008eee:	40cf      	lsrs	r7, r1
 8008ef0:	e7d9      	b.n	8008ea6 <rshift+0x4c>
 8008ef2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ef6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008efa:	e7c2      	b.n	8008e82 <rshift+0x28>
 8008efc:	4623      	mov	r3, r4
 8008efe:	e7e0      	b.n	8008ec2 <rshift+0x68>

08008f00 <__hexdig_fun>:
 8008f00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008f04:	2b09      	cmp	r3, #9
 8008f06:	d802      	bhi.n	8008f0e <__hexdig_fun+0xe>
 8008f08:	3820      	subs	r0, #32
 8008f0a:	b2c0      	uxtb	r0, r0
 8008f0c:	4770      	bx	lr
 8008f0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008f12:	2b05      	cmp	r3, #5
 8008f14:	d801      	bhi.n	8008f1a <__hexdig_fun+0x1a>
 8008f16:	3847      	subs	r0, #71	@ 0x47
 8008f18:	e7f7      	b.n	8008f0a <__hexdig_fun+0xa>
 8008f1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d801      	bhi.n	8008f26 <__hexdig_fun+0x26>
 8008f22:	3827      	subs	r0, #39	@ 0x27
 8008f24:	e7f1      	b.n	8008f0a <__hexdig_fun+0xa>
 8008f26:	2000      	movs	r0, #0
 8008f28:	4770      	bx	lr
	...

08008f2c <__gethex>:
 8008f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	468a      	mov	sl, r1
 8008f32:	4690      	mov	r8, r2
 8008f34:	b085      	sub	sp, #20
 8008f36:	9302      	str	r3, [sp, #8]
 8008f38:	680b      	ldr	r3, [r1, #0]
 8008f3a:	9001      	str	r0, [sp, #4]
 8008f3c:	1c9c      	adds	r4, r3, #2
 8008f3e:	46a1      	mov	r9, r4
 8008f40:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008f44:	2830      	cmp	r0, #48	@ 0x30
 8008f46:	d0fa      	beq.n	8008f3e <__gethex+0x12>
 8008f48:	eba9 0303 	sub.w	r3, r9, r3
 8008f4c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008f50:	f7ff ffd6 	bl	8008f00 <__hexdig_fun>
 8008f54:	4605      	mov	r5, r0
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d168      	bne.n	800902c <__gethex+0x100>
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4648      	mov	r0, r9
 8008f5e:	499f      	ldr	r1, [pc, #636]	@ (80091dc <__gethex+0x2b0>)
 8008f60:	f7ff ff03 	bl	8008d6a <strncmp>
 8008f64:	4607      	mov	r7, r0
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d167      	bne.n	800903a <__gethex+0x10e>
 8008f6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008f6e:	4626      	mov	r6, r4
 8008f70:	f7ff ffc6 	bl	8008f00 <__hexdig_fun>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d062      	beq.n	800903e <__gethex+0x112>
 8008f78:	4623      	mov	r3, r4
 8008f7a:	7818      	ldrb	r0, [r3, #0]
 8008f7c:	4699      	mov	r9, r3
 8008f7e:	2830      	cmp	r0, #48	@ 0x30
 8008f80:	f103 0301 	add.w	r3, r3, #1
 8008f84:	d0f9      	beq.n	8008f7a <__gethex+0x4e>
 8008f86:	f7ff ffbb 	bl	8008f00 <__hexdig_fun>
 8008f8a:	fab0 f580 	clz	r5, r0
 8008f8e:	f04f 0b01 	mov.w	fp, #1
 8008f92:	096d      	lsrs	r5, r5, #5
 8008f94:	464a      	mov	r2, r9
 8008f96:	4616      	mov	r6, r2
 8008f98:	7830      	ldrb	r0, [r6, #0]
 8008f9a:	3201      	adds	r2, #1
 8008f9c:	f7ff ffb0 	bl	8008f00 <__hexdig_fun>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d1f8      	bne.n	8008f96 <__gethex+0x6a>
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	498c      	ldr	r1, [pc, #560]	@ (80091dc <__gethex+0x2b0>)
 8008faa:	f7ff fede 	bl	8008d6a <strncmp>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d13f      	bne.n	8009032 <__gethex+0x106>
 8008fb2:	b944      	cbnz	r4, 8008fc6 <__gethex+0x9a>
 8008fb4:	1c74      	adds	r4, r6, #1
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	4616      	mov	r6, r2
 8008fba:	7830      	ldrb	r0, [r6, #0]
 8008fbc:	3201      	adds	r2, #1
 8008fbe:	f7ff ff9f 	bl	8008f00 <__hexdig_fun>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d1f8      	bne.n	8008fb8 <__gethex+0x8c>
 8008fc6:	1ba4      	subs	r4, r4, r6
 8008fc8:	00a7      	lsls	r7, r4, #2
 8008fca:	7833      	ldrb	r3, [r6, #0]
 8008fcc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008fd0:	2b50      	cmp	r3, #80	@ 0x50
 8008fd2:	d13e      	bne.n	8009052 <__gethex+0x126>
 8008fd4:	7873      	ldrb	r3, [r6, #1]
 8008fd6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008fd8:	d033      	beq.n	8009042 <__gethex+0x116>
 8008fda:	2b2d      	cmp	r3, #45	@ 0x2d
 8008fdc:	d034      	beq.n	8009048 <__gethex+0x11c>
 8008fde:	2400      	movs	r4, #0
 8008fe0:	1c71      	adds	r1, r6, #1
 8008fe2:	7808      	ldrb	r0, [r1, #0]
 8008fe4:	f7ff ff8c 	bl	8008f00 <__hexdig_fun>
 8008fe8:	1e43      	subs	r3, r0, #1
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b18      	cmp	r3, #24
 8008fee:	d830      	bhi.n	8009052 <__gethex+0x126>
 8008ff0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ff4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ff8:	f7ff ff82 	bl	8008f00 <__hexdig_fun>
 8008ffc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009000:	fa5f fc8c 	uxtb.w	ip, ip
 8009004:	f1bc 0f18 	cmp.w	ip, #24
 8009008:	f04f 030a 	mov.w	r3, #10
 800900c:	d91e      	bls.n	800904c <__gethex+0x120>
 800900e:	b104      	cbz	r4, 8009012 <__gethex+0xe6>
 8009010:	4252      	negs	r2, r2
 8009012:	4417      	add	r7, r2
 8009014:	f8ca 1000 	str.w	r1, [sl]
 8009018:	b1ed      	cbz	r5, 8009056 <__gethex+0x12a>
 800901a:	f1bb 0f00 	cmp.w	fp, #0
 800901e:	bf0c      	ite	eq
 8009020:	2506      	moveq	r5, #6
 8009022:	2500      	movne	r5, #0
 8009024:	4628      	mov	r0, r5
 8009026:	b005      	add	sp, #20
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	2500      	movs	r5, #0
 800902e:	462c      	mov	r4, r5
 8009030:	e7b0      	b.n	8008f94 <__gethex+0x68>
 8009032:	2c00      	cmp	r4, #0
 8009034:	d1c7      	bne.n	8008fc6 <__gethex+0x9a>
 8009036:	4627      	mov	r7, r4
 8009038:	e7c7      	b.n	8008fca <__gethex+0x9e>
 800903a:	464e      	mov	r6, r9
 800903c:	462f      	mov	r7, r5
 800903e:	2501      	movs	r5, #1
 8009040:	e7c3      	b.n	8008fca <__gethex+0x9e>
 8009042:	2400      	movs	r4, #0
 8009044:	1cb1      	adds	r1, r6, #2
 8009046:	e7cc      	b.n	8008fe2 <__gethex+0xb6>
 8009048:	2401      	movs	r4, #1
 800904a:	e7fb      	b.n	8009044 <__gethex+0x118>
 800904c:	fb03 0002 	mla	r0, r3, r2, r0
 8009050:	e7ce      	b.n	8008ff0 <__gethex+0xc4>
 8009052:	4631      	mov	r1, r6
 8009054:	e7de      	b.n	8009014 <__gethex+0xe8>
 8009056:	4629      	mov	r1, r5
 8009058:	eba6 0309 	sub.w	r3, r6, r9
 800905c:	3b01      	subs	r3, #1
 800905e:	2b07      	cmp	r3, #7
 8009060:	dc0a      	bgt.n	8009078 <__gethex+0x14c>
 8009062:	9801      	ldr	r0, [sp, #4]
 8009064:	f7fe f87e 	bl	8007164 <_Balloc>
 8009068:	4604      	mov	r4, r0
 800906a:	b940      	cbnz	r0, 800907e <__gethex+0x152>
 800906c:	4602      	mov	r2, r0
 800906e:	21e4      	movs	r1, #228	@ 0xe4
 8009070:	4b5b      	ldr	r3, [pc, #364]	@ (80091e0 <__gethex+0x2b4>)
 8009072:	485c      	ldr	r0, [pc, #368]	@ (80091e4 <__gethex+0x2b8>)
 8009074:	f7fd f908 	bl	8006288 <__assert_func>
 8009078:	3101      	adds	r1, #1
 800907a:	105b      	asrs	r3, r3, #1
 800907c:	e7ef      	b.n	800905e <__gethex+0x132>
 800907e:	2300      	movs	r3, #0
 8009080:	f100 0a14 	add.w	sl, r0, #20
 8009084:	4655      	mov	r5, sl
 8009086:	469b      	mov	fp, r3
 8009088:	45b1      	cmp	r9, r6
 800908a:	d337      	bcc.n	80090fc <__gethex+0x1d0>
 800908c:	f845 bb04 	str.w	fp, [r5], #4
 8009090:	eba5 050a 	sub.w	r5, r5, sl
 8009094:	10ad      	asrs	r5, r5, #2
 8009096:	6125      	str	r5, [r4, #16]
 8009098:	4658      	mov	r0, fp
 800909a:	f7fe f955 	bl	8007348 <__hi0bits>
 800909e:	016d      	lsls	r5, r5, #5
 80090a0:	f8d8 6000 	ldr.w	r6, [r8]
 80090a4:	1a2d      	subs	r5, r5, r0
 80090a6:	42b5      	cmp	r5, r6
 80090a8:	dd54      	ble.n	8009154 <__gethex+0x228>
 80090aa:	1bad      	subs	r5, r5, r6
 80090ac:	4629      	mov	r1, r5
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7fe fcdd 	bl	8007a6e <__any_on>
 80090b4:	4681      	mov	r9, r0
 80090b6:	b178      	cbz	r0, 80090d8 <__gethex+0x1ac>
 80090b8:	f04f 0901 	mov.w	r9, #1
 80090bc:	1e6b      	subs	r3, r5, #1
 80090be:	1159      	asrs	r1, r3, #5
 80090c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80090c4:	f003 021f 	and.w	r2, r3, #31
 80090c8:	fa09 f202 	lsl.w	r2, r9, r2
 80090cc:	420a      	tst	r2, r1
 80090ce:	d003      	beq.n	80090d8 <__gethex+0x1ac>
 80090d0:	454b      	cmp	r3, r9
 80090d2:	dc36      	bgt.n	8009142 <__gethex+0x216>
 80090d4:	f04f 0902 	mov.w	r9, #2
 80090d8:	4629      	mov	r1, r5
 80090da:	4620      	mov	r0, r4
 80090dc:	f7ff febd 	bl	8008e5a <rshift>
 80090e0:	442f      	add	r7, r5
 80090e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090e6:	42bb      	cmp	r3, r7
 80090e8:	da42      	bge.n	8009170 <__gethex+0x244>
 80090ea:	4621      	mov	r1, r4
 80090ec:	9801      	ldr	r0, [sp, #4]
 80090ee:	f7fe f879 	bl	80071e4 <_Bfree>
 80090f2:	2300      	movs	r3, #0
 80090f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090f6:	25a3      	movs	r5, #163	@ 0xa3
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	e793      	b.n	8009024 <__gethex+0xf8>
 80090fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009100:	2a2e      	cmp	r2, #46	@ 0x2e
 8009102:	d012      	beq.n	800912a <__gethex+0x1fe>
 8009104:	2b20      	cmp	r3, #32
 8009106:	d104      	bne.n	8009112 <__gethex+0x1e6>
 8009108:	f845 bb04 	str.w	fp, [r5], #4
 800910c:	f04f 0b00 	mov.w	fp, #0
 8009110:	465b      	mov	r3, fp
 8009112:	7830      	ldrb	r0, [r6, #0]
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	f7ff fef3 	bl	8008f00 <__hexdig_fun>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	f000 000f 	and.w	r0, r0, #15
 8009120:	4098      	lsls	r0, r3
 8009122:	ea4b 0b00 	orr.w	fp, fp, r0
 8009126:	3304      	adds	r3, #4
 8009128:	e7ae      	b.n	8009088 <__gethex+0x15c>
 800912a:	45b1      	cmp	r9, r6
 800912c:	d8ea      	bhi.n	8009104 <__gethex+0x1d8>
 800912e:	2201      	movs	r2, #1
 8009130:	4630      	mov	r0, r6
 8009132:	492a      	ldr	r1, [pc, #168]	@ (80091dc <__gethex+0x2b0>)
 8009134:	9303      	str	r3, [sp, #12]
 8009136:	f7ff fe18 	bl	8008d6a <strncmp>
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	2800      	cmp	r0, #0
 800913e:	d1e1      	bne.n	8009104 <__gethex+0x1d8>
 8009140:	e7a2      	b.n	8009088 <__gethex+0x15c>
 8009142:	4620      	mov	r0, r4
 8009144:	1ea9      	subs	r1, r5, #2
 8009146:	f7fe fc92 	bl	8007a6e <__any_on>
 800914a:	2800      	cmp	r0, #0
 800914c:	d0c2      	beq.n	80090d4 <__gethex+0x1a8>
 800914e:	f04f 0903 	mov.w	r9, #3
 8009152:	e7c1      	b.n	80090d8 <__gethex+0x1ac>
 8009154:	da09      	bge.n	800916a <__gethex+0x23e>
 8009156:	1b75      	subs	r5, r6, r5
 8009158:	4621      	mov	r1, r4
 800915a:	462a      	mov	r2, r5
 800915c:	9801      	ldr	r0, [sp, #4]
 800915e:	f7fe fa57 	bl	8007610 <__lshift>
 8009162:	4604      	mov	r4, r0
 8009164:	1b7f      	subs	r7, r7, r5
 8009166:	f100 0a14 	add.w	sl, r0, #20
 800916a:	f04f 0900 	mov.w	r9, #0
 800916e:	e7b8      	b.n	80090e2 <__gethex+0x1b6>
 8009170:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009174:	42bd      	cmp	r5, r7
 8009176:	dd6f      	ble.n	8009258 <__gethex+0x32c>
 8009178:	1bed      	subs	r5, r5, r7
 800917a:	42ae      	cmp	r6, r5
 800917c:	dc34      	bgt.n	80091e8 <__gethex+0x2bc>
 800917e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d022      	beq.n	80091cc <__gethex+0x2a0>
 8009186:	2b03      	cmp	r3, #3
 8009188:	d024      	beq.n	80091d4 <__gethex+0x2a8>
 800918a:	2b01      	cmp	r3, #1
 800918c:	d115      	bne.n	80091ba <__gethex+0x28e>
 800918e:	42ae      	cmp	r6, r5
 8009190:	d113      	bne.n	80091ba <__gethex+0x28e>
 8009192:	2e01      	cmp	r6, #1
 8009194:	d10b      	bne.n	80091ae <__gethex+0x282>
 8009196:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800919a:	9a02      	ldr	r2, [sp, #8]
 800919c:	2562      	movs	r5, #98	@ 0x62
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	2301      	movs	r3, #1
 80091a2:	6123      	str	r3, [r4, #16]
 80091a4:	f8ca 3000 	str.w	r3, [sl]
 80091a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091aa:	601c      	str	r4, [r3, #0]
 80091ac:	e73a      	b.n	8009024 <__gethex+0xf8>
 80091ae:	4620      	mov	r0, r4
 80091b0:	1e71      	subs	r1, r6, #1
 80091b2:	f7fe fc5c 	bl	8007a6e <__any_on>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d1ed      	bne.n	8009196 <__gethex+0x26a>
 80091ba:	4621      	mov	r1, r4
 80091bc:	9801      	ldr	r0, [sp, #4]
 80091be:	f7fe f811 	bl	80071e4 <_Bfree>
 80091c2:	2300      	movs	r3, #0
 80091c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091c6:	2550      	movs	r5, #80	@ 0x50
 80091c8:	6013      	str	r3, [r2, #0]
 80091ca:	e72b      	b.n	8009024 <__gethex+0xf8>
 80091cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1f3      	bne.n	80091ba <__gethex+0x28e>
 80091d2:	e7e0      	b.n	8009196 <__gethex+0x26a>
 80091d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1dd      	bne.n	8009196 <__gethex+0x26a>
 80091da:	e7ee      	b.n	80091ba <__gethex+0x28e>
 80091dc:	0800a0c0 	.word	0x0800a0c0
 80091e0:	08009f58 	.word	0x08009f58
 80091e4:	0800a131 	.word	0x0800a131
 80091e8:	1e6f      	subs	r7, r5, #1
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	d130      	bne.n	8009252 <__gethex+0x326>
 80091f0:	b127      	cbz	r7, 80091fc <__gethex+0x2d0>
 80091f2:	4639      	mov	r1, r7
 80091f4:	4620      	mov	r0, r4
 80091f6:	f7fe fc3a 	bl	8007a6e <__any_on>
 80091fa:	4681      	mov	r9, r0
 80091fc:	2301      	movs	r3, #1
 80091fe:	4629      	mov	r1, r5
 8009200:	1b76      	subs	r6, r6, r5
 8009202:	2502      	movs	r5, #2
 8009204:	117a      	asrs	r2, r7, #5
 8009206:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800920a:	f007 071f 	and.w	r7, r7, #31
 800920e:	40bb      	lsls	r3, r7
 8009210:	4213      	tst	r3, r2
 8009212:	4620      	mov	r0, r4
 8009214:	bf18      	it	ne
 8009216:	f049 0902 	orrne.w	r9, r9, #2
 800921a:	f7ff fe1e 	bl	8008e5a <rshift>
 800921e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009222:	f1b9 0f00 	cmp.w	r9, #0
 8009226:	d047      	beq.n	80092b8 <__gethex+0x38c>
 8009228:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800922c:	2b02      	cmp	r3, #2
 800922e:	d015      	beq.n	800925c <__gethex+0x330>
 8009230:	2b03      	cmp	r3, #3
 8009232:	d017      	beq.n	8009264 <__gethex+0x338>
 8009234:	2b01      	cmp	r3, #1
 8009236:	d109      	bne.n	800924c <__gethex+0x320>
 8009238:	f019 0f02 	tst.w	r9, #2
 800923c:	d006      	beq.n	800924c <__gethex+0x320>
 800923e:	f8da 3000 	ldr.w	r3, [sl]
 8009242:	ea49 0903 	orr.w	r9, r9, r3
 8009246:	f019 0f01 	tst.w	r9, #1
 800924a:	d10e      	bne.n	800926a <__gethex+0x33e>
 800924c:	f045 0510 	orr.w	r5, r5, #16
 8009250:	e032      	b.n	80092b8 <__gethex+0x38c>
 8009252:	f04f 0901 	mov.w	r9, #1
 8009256:	e7d1      	b.n	80091fc <__gethex+0x2d0>
 8009258:	2501      	movs	r5, #1
 800925a:	e7e2      	b.n	8009222 <__gethex+0x2f6>
 800925c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800925e:	f1c3 0301 	rsb	r3, r3, #1
 8009262:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f0      	beq.n	800924c <__gethex+0x320>
 800926a:	f04f 0c00 	mov.w	ip, #0
 800926e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009272:	f104 0314 	add.w	r3, r4, #20
 8009276:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800927a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800927e:	4618      	mov	r0, r3
 8009280:	f853 2b04 	ldr.w	r2, [r3], #4
 8009284:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009288:	d01b      	beq.n	80092c2 <__gethex+0x396>
 800928a:	3201      	adds	r2, #1
 800928c:	6002      	str	r2, [r0, #0]
 800928e:	2d02      	cmp	r5, #2
 8009290:	f104 0314 	add.w	r3, r4, #20
 8009294:	d13c      	bne.n	8009310 <__gethex+0x3e4>
 8009296:	f8d8 2000 	ldr.w	r2, [r8]
 800929a:	3a01      	subs	r2, #1
 800929c:	42b2      	cmp	r2, r6
 800929e:	d109      	bne.n	80092b4 <__gethex+0x388>
 80092a0:	2201      	movs	r2, #1
 80092a2:	1171      	asrs	r1, r6, #5
 80092a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092a8:	f006 061f 	and.w	r6, r6, #31
 80092ac:	fa02 f606 	lsl.w	r6, r2, r6
 80092b0:	421e      	tst	r6, r3
 80092b2:	d13a      	bne.n	800932a <__gethex+0x3fe>
 80092b4:	f045 0520 	orr.w	r5, r5, #32
 80092b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ba:	601c      	str	r4, [r3, #0]
 80092bc:	9b02      	ldr	r3, [sp, #8]
 80092be:	601f      	str	r7, [r3, #0]
 80092c0:	e6b0      	b.n	8009024 <__gethex+0xf8>
 80092c2:	4299      	cmp	r1, r3
 80092c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80092c8:	d8d9      	bhi.n	800927e <__gethex+0x352>
 80092ca:	68a3      	ldr	r3, [r4, #8]
 80092cc:	459b      	cmp	fp, r3
 80092ce:	db17      	blt.n	8009300 <__gethex+0x3d4>
 80092d0:	6861      	ldr	r1, [r4, #4]
 80092d2:	9801      	ldr	r0, [sp, #4]
 80092d4:	3101      	adds	r1, #1
 80092d6:	f7fd ff45 	bl	8007164 <_Balloc>
 80092da:	4681      	mov	r9, r0
 80092dc:	b918      	cbnz	r0, 80092e6 <__gethex+0x3ba>
 80092de:	4602      	mov	r2, r0
 80092e0:	2184      	movs	r1, #132	@ 0x84
 80092e2:	4b19      	ldr	r3, [pc, #100]	@ (8009348 <__gethex+0x41c>)
 80092e4:	e6c5      	b.n	8009072 <__gethex+0x146>
 80092e6:	6922      	ldr	r2, [r4, #16]
 80092e8:	f104 010c 	add.w	r1, r4, #12
 80092ec:	3202      	adds	r2, #2
 80092ee:	0092      	lsls	r2, r2, #2
 80092f0:	300c      	adds	r0, #12
 80092f2:	f7fc ffb7 	bl	8006264 <memcpy>
 80092f6:	4621      	mov	r1, r4
 80092f8:	9801      	ldr	r0, [sp, #4]
 80092fa:	f7fd ff73 	bl	80071e4 <_Bfree>
 80092fe:	464c      	mov	r4, r9
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	6122      	str	r2, [r4, #16]
 8009306:	2201      	movs	r2, #1
 8009308:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800930c:	615a      	str	r2, [r3, #20]
 800930e:	e7be      	b.n	800928e <__gethex+0x362>
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	455a      	cmp	r2, fp
 8009314:	dd0b      	ble.n	800932e <__gethex+0x402>
 8009316:	2101      	movs	r1, #1
 8009318:	4620      	mov	r0, r4
 800931a:	f7ff fd9e 	bl	8008e5a <rshift>
 800931e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009322:	3701      	adds	r7, #1
 8009324:	42bb      	cmp	r3, r7
 8009326:	f6ff aee0 	blt.w	80090ea <__gethex+0x1be>
 800932a:	2501      	movs	r5, #1
 800932c:	e7c2      	b.n	80092b4 <__gethex+0x388>
 800932e:	f016 061f 	ands.w	r6, r6, #31
 8009332:	d0fa      	beq.n	800932a <__gethex+0x3fe>
 8009334:	4453      	add	r3, sl
 8009336:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800933a:	f7fe f805 	bl	8007348 <__hi0bits>
 800933e:	f1c6 0620 	rsb	r6, r6, #32
 8009342:	42b0      	cmp	r0, r6
 8009344:	dbe7      	blt.n	8009316 <__gethex+0x3ea>
 8009346:	e7f0      	b.n	800932a <__gethex+0x3fe>
 8009348:	08009f58 	.word	0x08009f58

0800934c <L_shift>:
 800934c:	f1c2 0208 	rsb	r2, r2, #8
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	b570      	push	{r4, r5, r6, lr}
 8009354:	f1c2 0620 	rsb	r6, r2, #32
 8009358:	6843      	ldr	r3, [r0, #4]
 800935a:	6804      	ldr	r4, [r0, #0]
 800935c:	fa03 f506 	lsl.w	r5, r3, r6
 8009360:	432c      	orrs	r4, r5
 8009362:	40d3      	lsrs	r3, r2
 8009364:	6004      	str	r4, [r0, #0]
 8009366:	f840 3f04 	str.w	r3, [r0, #4]!
 800936a:	4288      	cmp	r0, r1
 800936c:	d3f4      	bcc.n	8009358 <L_shift+0xc>
 800936e:	bd70      	pop	{r4, r5, r6, pc}

08009370 <__match>:
 8009370:	b530      	push	{r4, r5, lr}
 8009372:	6803      	ldr	r3, [r0, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937a:	b914      	cbnz	r4, 8009382 <__match+0x12>
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	2001      	movs	r0, #1
 8009380:	bd30      	pop	{r4, r5, pc}
 8009382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009386:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800938a:	2d19      	cmp	r5, #25
 800938c:	bf98      	it	ls
 800938e:	3220      	addls	r2, #32
 8009390:	42a2      	cmp	r2, r4
 8009392:	d0f0      	beq.n	8009376 <__match+0x6>
 8009394:	2000      	movs	r0, #0
 8009396:	e7f3      	b.n	8009380 <__match+0x10>

08009398 <__hexnan>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	2500      	movs	r5, #0
 800939e:	680b      	ldr	r3, [r1, #0]
 80093a0:	4682      	mov	sl, r0
 80093a2:	115e      	asrs	r6, r3, #5
 80093a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093a8:	f013 031f 	ands.w	r3, r3, #31
 80093ac:	bf18      	it	ne
 80093ae:	3604      	addne	r6, #4
 80093b0:	1f37      	subs	r7, r6, #4
 80093b2:	4690      	mov	r8, r2
 80093b4:	46b9      	mov	r9, r7
 80093b6:	463c      	mov	r4, r7
 80093b8:	46ab      	mov	fp, r5
 80093ba:	b087      	sub	sp, #28
 80093bc:	6801      	ldr	r1, [r0, #0]
 80093be:	9301      	str	r3, [sp, #4]
 80093c0:	f846 5c04 	str.w	r5, [r6, #-4]
 80093c4:	9502      	str	r5, [sp, #8]
 80093c6:	784a      	ldrb	r2, [r1, #1]
 80093c8:	1c4b      	adds	r3, r1, #1
 80093ca:	9303      	str	r3, [sp, #12]
 80093cc:	b342      	cbz	r2, 8009420 <__hexnan+0x88>
 80093ce:	4610      	mov	r0, r2
 80093d0:	9105      	str	r1, [sp, #20]
 80093d2:	9204      	str	r2, [sp, #16]
 80093d4:	f7ff fd94 	bl	8008f00 <__hexdig_fun>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d151      	bne.n	8009480 <__hexnan+0xe8>
 80093dc:	9a04      	ldr	r2, [sp, #16]
 80093de:	9905      	ldr	r1, [sp, #20]
 80093e0:	2a20      	cmp	r2, #32
 80093e2:	d818      	bhi.n	8009416 <__hexnan+0x7e>
 80093e4:	9b02      	ldr	r3, [sp, #8]
 80093e6:	459b      	cmp	fp, r3
 80093e8:	dd13      	ble.n	8009412 <__hexnan+0x7a>
 80093ea:	454c      	cmp	r4, r9
 80093ec:	d206      	bcs.n	80093fc <__hexnan+0x64>
 80093ee:	2d07      	cmp	r5, #7
 80093f0:	dc04      	bgt.n	80093fc <__hexnan+0x64>
 80093f2:	462a      	mov	r2, r5
 80093f4:	4649      	mov	r1, r9
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7ff ffa8 	bl	800934c <L_shift>
 80093fc:	4544      	cmp	r4, r8
 80093fe:	d952      	bls.n	80094a6 <__hexnan+0x10e>
 8009400:	2300      	movs	r3, #0
 8009402:	f1a4 0904 	sub.w	r9, r4, #4
 8009406:	f844 3c04 	str.w	r3, [r4, #-4]
 800940a:	461d      	mov	r5, r3
 800940c:	464c      	mov	r4, r9
 800940e:	f8cd b008 	str.w	fp, [sp, #8]
 8009412:	9903      	ldr	r1, [sp, #12]
 8009414:	e7d7      	b.n	80093c6 <__hexnan+0x2e>
 8009416:	2a29      	cmp	r2, #41	@ 0x29
 8009418:	d157      	bne.n	80094ca <__hexnan+0x132>
 800941a:	3102      	adds	r1, #2
 800941c:	f8ca 1000 	str.w	r1, [sl]
 8009420:	f1bb 0f00 	cmp.w	fp, #0
 8009424:	d051      	beq.n	80094ca <__hexnan+0x132>
 8009426:	454c      	cmp	r4, r9
 8009428:	d206      	bcs.n	8009438 <__hexnan+0xa0>
 800942a:	2d07      	cmp	r5, #7
 800942c:	dc04      	bgt.n	8009438 <__hexnan+0xa0>
 800942e:	462a      	mov	r2, r5
 8009430:	4649      	mov	r1, r9
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff ff8a 	bl	800934c <L_shift>
 8009438:	4544      	cmp	r4, r8
 800943a:	d936      	bls.n	80094aa <__hexnan+0x112>
 800943c:	4623      	mov	r3, r4
 800943e:	f1a8 0204 	sub.w	r2, r8, #4
 8009442:	f853 1b04 	ldr.w	r1, [r3], #4
 8009446:	429f      	cmp	r7, r3
 8009448:	f842 1f04 	str.w	r1, [r2, #4]!
 800944c:	d2f9      	bcs.n	8009442 <__hexnan+0xaa>
 800944e:	1b3b      	subs	r3, r7, r4
 8009450:	f023 0303 	bic.w	r3, r3, #3
 8009454:	3304      	adds	r3, #4
 8009456:	3401      	adds	r4, #1
 8009458:	3e03      	subs	r6, #3
 800945a:	42b4      	cmp	r4, r6
 800945c:	bf88      	it	hi
 800945e:	2304      	movhi	r3, #4
 8009460:	2200      	movs	r2, #0
 8009462:	4443      	add	r3, r8
 8009464:	f843 2b04 	str.w	r2, [r3], #4
 8009468:	429f      	cmp	r7, r3
 800946a:	d2fb      	bcs.n	8009464 <__hexnan+0xcc>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	b91b      	cbnz	r3, 8009478 <__hexnan+0xe0>
 8009470:	4547      	cmp	r7, r8
 8009472:	d128      	bne.n	80094c6 <__hexnan+0x12e>
 8009474:	2301      	movs	r3, #1
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	2005      	movs	r0, #5
 800947a:	b007      	add	sp, #28
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	3501      	adds	r5, #1
 8009482:	2d08      	cmp	r5, #8
 8009484:	f10b 0b01 	add.w	fp, fp, #1
 8009488:	dd06      	ble.n	8009498 <__hexnan+0x100>
 800948a:	4544      	cmp	r4, r8
 800948c:	d9c1      	bls.n	8009412 <__hexnan+0x7a>
 800948e:	2300      	movs	r3, #0
 8009490:	2501      	movs	r5, #1
 8009492:	f844 3c04 	str.w	r3, [r4, #-4]
 8009496:	3c04      	subs	r4, #4
 8009498:	6822      	ldr	r2, [r4, #0]
 800949a:	f000 000f 	and.w	r0, r0, #15
 800949e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80094a2:	6020      	str	r0, [r4, #0]
 80094a4:	e7b5      	b.n	8009412 <__hexnan+0x7a>
 80094a6:	2508      	movs	r5, #8
 80094a8:	e7b3      	b.n	8009412 <__hexnan+0x7a>
 80094aa:	9b01      	ldr	r3, [sp, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0dd      	beq.n	800946c <__hexnan+0xd4>
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295
 80094b4:	f1c3 0320 	rsb	r3, r3, #32
 80094b8:	40da      	lsrs	r2, r3
 80094ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094be:	4013      	ands	r3, r2
 80094c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80094c4:	e7d2      	b.n	800946c <__hexnan+0xd4>
 80094c6:	3f04      	subs	r7, #4
 80094c8:	e7d0      	b.n	800946c <__hexnan+0xd4>
 80094ca:	2004      	movs	r0, #4
 80094cc:	e7d5      	b.n	800947a <__hexnan+0xe2>

080094ce <__ascii_mbtowc>:
 80094ce:	b082      	sub	sp, #8
 80094d0:	b901      	cbnz	r1, 80094d4 <__ascii_mbtowc+0x6>
 80094d2:	a901      	add	r1, sp, #4
 80094d4:	b142      	cbz	r2, 80094e8 <__ascii_mbtowc+0x1a>
 80094d6:	b14b      	cbz	r3, 80094ec <__ascii_mbtowc+0x1e>
 80094d8:	7813      	ldrb	r3, [r2, #0]
 80094da:	600b      	str	r3, [r1, #0]
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	1e10      	subs	r0, r2, #0
 80094e0:	bf18      	it	ne
 80094e2:	2001      	movne	r0, #1
 80094e4:	b002      	add	sp, #8
 80094e6:	4770      	bx	lr
 80094e8:	4610      	mov	r0, r2
 80094ea:	e7fb      	b.n	80094e4 <__ascii_mbtowc+0x16>
 80094ec:	f06f 0001 	mvn.w	r0, #1
 80094f0:	e7f8      	b.n	80094e4 <__ascii_mbtowc+0x16>

080094f2 <_realloc_r>:
 80094f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	4680      	mov	r8, r0
 80094f8:	4615      	mov	r5, r2
 80094fa:	460c      	mov	r4, r1
 80094fc:	b921      	cbnz	r1, 8009508 <_realloc_r+0x16>
 80094fe:	4611      	mov	r1, r2
 8009500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	f7fd bda2 	b.w	800704c <_malloc_r>
 8009508:	b92a      	cbnz	r2, 8009516 <_realloc_r+0x24>
 800950a:	f7fd fd2d 	bl	8006f68 <_free_r>
 800950e:	2400      	movs	r4, #0
 8009510:	4620      	mov	r0, r4
 8009512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009516:	f000 f86b 	bl	80095f0 <_malloc_usable_size_r>
 800951a:	4285      	cmp	r5, r0
 800951c:	4606      	mov	r6, r0
 800951e:	d802      	bhi.n	8009526 <_realloc_r+0x34>
 8009520:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009524:	d8f4      	bhi.n	8009510 <_realloc_r+0x1e>
 8009526:	4629      	mov	r1, r5
 8009528:	4640      	mov	r0, r8
 800952a:	f7fd fd8f 	bl	800704c <_malloc_r>
 800952e:	4607      	mov	r7, r0
 8009530:	2800      	cmp	r0, #0
 8009532:	d0ec      	beq.n	800950e <_realloc_r+0x1c>
 8009534:	42b5      	cmp	r5, r6
 8009536:	462a      	mov	r2, r5
 8009538:	4621      	mov	r1, r4
 800953a:	bf28      	it	cs
 800953c:	4632      	movcs	r2, r6
 800953e:	f7fc fe91 	bl	8006264 <memcpy>
 8009542:	4621      	mov	r1, r4
 8009544:	4640      	mov	r0, r8
 8009546:	f7fd fd0f 	bl	8006f68 <_free_r>
 800954a:	463c      	mov	r4, r7
 800954c:	e7e0      	b.n	8009510 <_realloc_r+0x1e>

0800954e <__ascii_wctomb>:
 800954e:	4603      	mov	r3, r0
 8009550:	4608      	mov	r0, r1
 8009552:	b141      	cbz	r1, 8009566 <__ascii_wctomb+0x18>
 8009554:	2aff      	cmp	r2, #255	@ 0xff
 8009556:	d904      	bls.n	8009562 <__ascii_wctomb+0x14>
 8009558:	228a      	movs	r2, #138	@ 0x8a
 800955a:	f04f 30ff 	mov.w	r0, #4294967295
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	4770      	bx	lr
 8009562:	2001      	movs	r0, #1
 8009564:	700a      	strb	r2, [r1, #0]
 8009566:	4770      	bx	lr

08009568 <_raise_r>:
 8009568:	291f      	cmp	r1, #31
 800956a:	b538      	push	{r3, r4, r5, lr}
 800956c:	4605      	mov	r5, r0
 800956e:	460c      	mov	r4, r1
 8009570:	d904      	bls.n	800957c <_raise_r+0x14>
 8009572:	2316      	movs	r3, #22
 8009574:	6003      	str	r3, [r0, #0]
 8009576:	f04f 30ff 	mov.w	r0, #4294967295
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800957e:	b112      	cbz	r2, 8009586 <_raise_r+0x1e>
 8009580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009584:	b94b      	cbnz	r3, 800959a <_raise_r+0x32>
 8009586:	4628      	mov	r0, r5
 8009588:	f000 f830 	bl	80095ec <_getpid_r>
 800958c:	4622      	mov	r2, r4
 800958e:	4601      	mov	r1, r0
 8009590:	4628      	mov	r0, r5
 8009592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009596:	f000 b817 	b.w	80095c8 <_kill_r>
 800959a:	2b01      	cmp	r3, #1
 800959c:	d00a      	beq.n	80095b4 <_raise_r+0x4c>
 800959e:	1c59      	adds	r1, r3, #1
 80095a0:	d103      	bne.n	80095aa <_raise_r+0x42>
 80095a2:	2316      	movs	r3, #22
 80095a4:	6003      	str	r3, [r0, #0]
 80095a6:	2001      	movs	r0, #1
 80095a8:	e7e7      	b.n	800957a <_raise_r+0x12>
 80095aa:	2100      	movs	r1, #0
 80095ac:	4620      	mov	r0, r4
 80095ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095b2:	4798      	blx	r3
 80095b4:	2000      	movs	r0, #0
 80095b6:	e7e0      	b.n	800957a <_raise_r+0x12>

080095b8 <raise>:
 80095b8:	4b02      	ldr	r3, [pc, #8]	@ (80095c4 <raise+0xc>)
 80095ba:	4601      	mov	r1, r0
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	f7ff bfd3 	b.w	8009568 <_raise_r>
 80095c2:	bf00      	nop
 80095c4:	20000018 	.word	0x20000018

080095c8 <_kill_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	2300      	movs	r3, #0
 80095cc:	4d06      	ldr	r5, [pc, #24]	@ (80095e8 <_kill_r+0x20>)
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	f7f9 f82a 	bl	800262e <_kill>
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	d102      	bne.n	80095e4 <_kill_r+0x1c>
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	b103      	cbz	r3, 80095e4 <_kill_r+0x1c>
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	bd38      	pop	{r3, r4, r5, pc}
 80095e6:	bf00      	nop
 80095e8:	200007dc 	.word	0x200007dc

080095ec <_getpid_r>:
 80095ec:	f7f9 b818 	b.w	8002620 <_getpid>

080095f0 <_malloc_usable_size_r>:
 80095f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095f4:	1f18      	subs	r0, r3, #4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bfbc      	itt	lt
 80095fa:	580b      	ldrlt	r3, [r1, r0]
 80095fc:	18c0      	addlt	r0, r0, r3
 80095fe:	4770      	bx	lr

08009600 <_init>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	bf00      	nop
 8009604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009606:	bc08      	pop	{r3}
 8009608:	469e      	mov	lr, r3
 800960a:	4770      	bx	lr

0800960c <_fini>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	bf00      	nop
 8009610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009612:	bc08      	pop	{r3}
 8009614:	469e      	mov	lr, r3
 8009616:	4770      	bx	lr
