
LCD_Test_Case_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b2c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f08  08008d00  08008d00  00009d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac08  0800ac08  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac08  0800ac08  0000bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac10  0800ac10  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac10  0800ac10  0000bc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac14  0800ac14  0000bc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ac18  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001d8  0800adf0  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  0800adf0  0000c420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d6c  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ece  00000000  00000000  00014f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00016e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000692  00000000  00000000  00017730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222db  00000000  00000000  00017dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b984  00000000  00000000  0003a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f8a  00000000  00000000  00045a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f9ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003784  00000000  00000000  0010f9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00113174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ce4 	.word	0x08008ce4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008ce4 	.word	0x08008ce4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4604      	mov	r4, r0
 800102c:	4608      	mov	r0, r1
 800102e:	4611      	mov	r1, r2
 8001030:	461a      	mov	r2, r3
 8001032:	4623      	mov	r3, r4
 8001034:	80fb      	strh	r3, [r7, #6]
 8001036:	4603      	mov	r3, r0
 8001038:	80bb      	strh	r3, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	807b      	strh	r3, [r7, #2]
 800103e:	4613      	mov	r3, r2
 8001040:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	3b01      	subs	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 800104c:	2301      	movs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
	int dy = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 800105e:	e08d      	b.n	800117c <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	b29a      	uxth	r2, r3
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	4413      	add	r3, r2
 8001068:	b298      	uxth	r0, r3
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	b29a      	uxth	r2, r3
 800106e:	88bb      	ldrh	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	b29b      	uxth	r3, r3
 8001074:	883a      	ldrh	r2, [r7, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	f000 fd82 	bl	8001b80 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	b29a      	uxth	r2, r3
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	4413      	add	r3, r2
 8001084:	b298      	uxth	r0, r3
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	b29a      	uxth	r2, r3
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	b29b      	uxth	r3, r3
 8001090:	883a      	ldrh	r2, [r7, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	f000 fd74 	bl	8001b80 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	b29b      	uxth	r3, r3
 800109c:	88fa      	ldrh	r2, [r7, #6]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b298      	uxth	r0, r3
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	f000 fd66 	bl	8001b80 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	88fa      	ldrh	r2, [r7, #6]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	b298      	uxth	r0, r3
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	883a      	ldrh	r2, [r7, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	f000 fd58 	bl	8001b80 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	88fa      	ldrh	r2, [r7, #6]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b298      	uxth	r0, r3
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	88ba      	ldrh	r2, [r7, #4]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	883a      	ldrh	r2, [r7, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	f000 fd4a 	bl	8001b80 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	88fa      	ldrh	r2, [r7, #6]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	b298      	uxth	r0, r3
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	88ba      	ldrh	r2, [r7, #4]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	883a      	ldrh	r2, [r7, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	f000 fd3c 	bl	8001b80 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	b29a      	uxth	r2, r3
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4413      	add	r3, r2
 8001110:	b298      	uxth	r0, r3
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	b29b      	uxth	r3, r3
 8001116:	88ba      	ldrh	r2, [r7, #4]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	883a      	ldrh	r2, [r7, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	f000 fd2e 	bl	8001b80 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	b29a      	uxth	r2, r3
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	4413      	add	r3, r2
 800112c:	b298      	uxth	r0, r3
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	b29b      	uxth	r3, r3
 8001132:	88ba      	ldrh	r2, [r7, #4]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	883a      	ldrh	r2, [r7, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	f000 fd20 	bl	8001b80 <ILI9341_DrawPixel>

		if (err <= 0)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	dc09      	bgt.n	800115a <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	3301      	adds	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
			err += dy;
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4413      	add	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
			dy += 2;
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	3302      	adds	r3, #2
 8001158:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dd0d      	ble.n	800117c <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	3b01      	subs	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
			dx += 2;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3302      	adds	r3, #2
 800116a:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	425b      	negs	r3, r3
 8001170:	005a      	lsls	r2, r3, #1
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4413      	add	r3, r2
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	429a      	cmp	r2, r3
 8001182:	f6bf af6d 	bge.w	8001060 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3724      	adds	r7, #36	@ 0x24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b08b      	sub	sp, #44	@ 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	4604      	mov	r4, r0
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4623      	mov	r3, r4
 80011a0:	80fb      	strh	r3, [r7, #6]
 80011a2:	4603      	mov	r3, r0
 80011a4:	80bb      	strh	r3, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]
 80011aa:	4613      	mov	r3, r2
 80011ac:	803b      	strh	r3, [r7, #0]

	int x = radius;
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	f1c3 0301 	rsb	r3, r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

	while (x >= y)
 80011c8:	e061      	b.n	800128e <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 80011ca:	88fa      	ldrh	r2, [r7, #6]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	e018      	b.n	8001206 <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	b298      	uxth	r0, r3
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	88bb      	ldrh	r3, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	883a      	ldrh	r2, [r7, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f000 fccb 	bl	8001b80 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	b298      	uxth	r0, r3
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	883a      	ldrh	r2, [r7, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	f000 fcc0 	bl	8001b80 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	3301      	adds	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	88fa      	ldrh	r2, [r7, #6]
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	4413      	add	r3, r2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	429a      	cmp	r2, r3
 8001210:	dde0      	ble.n	80011d4 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e018      	b.n	800124e <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	b298      	uxth	r0, r3
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	b29a      	uxth	r2, r3
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	b29b      	uxth	r3, r3
 800122a:	883a      	ldrh	r2, [r7, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f000 fca7 	bl	8001b80 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	b298      	uxth	r0, r3
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	b29b      	uxth	r3, r3
 800123a:	88ba      	ldrh	r2, [r7, #4]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b29b      	uxth	r3, r3
 8001240:	883a      	ldrh	r2, [r7, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	f000 fc9c 	bl	8001b80 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	88fa      	ldrh	r2, [r7, #6]
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	4413      	add	r3, r2
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	429a      	cmp	r2, r3
 8001258:	dde0      	ble.n	800121c <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	3301      	adds	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	3302      	adds	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005a      	lsls	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	4413      	add	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	dd09      	ble.n	800128e <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	3b01      	subs	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	4413      	add	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	3302      	adds	r3, #2
 800128c:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 800128e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	429a      	cmp	r2, r3
 8001294:	da99      	bge.n	80011ca <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	372c      	adds	r7, #44	@ 0x2c
 800129c:	46bd      	mov	sp, r7
 800129e:	bd90      	pop	{r4, r7, pc}

080012a0 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4604      	mov	r4, r0
 80012a8:	4608      	mov	r0, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4623      	mov	r3, r4
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	4603      	mov	r3, r0
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	807b      	strh	r3, [r7, #2]
 80012ba:	4613      	mov	r3, r2
 80012bc:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 80012d4:	887a      	ldrh	r2, [r7, #2]
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 80012e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f2:	d501      	bpl.n	80012f8 <ILI9341_DrawHollowRectangleCoord+0x58>
 80012f4:	2301      	movs	r3, #1
 80012f6:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 80012fe:	883a      	ldrh	r2, [r7, #0]
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 8001310:	edd7 7a03 	vldr	s15, [r7, #12]
 8001314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	d501      	bpl.n	8001322 <ILI9341_DrawHollowRectangleCoord+0x82>
 800131e:	2301      	movs	r3, #1
 8001320:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 8001322:	7cfb      	ldrb	r3, [r7, #19]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d104      	bne.n	8001332 <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8001328:	887a      	ldrh	r2, [r7, #2]
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	82fb      	strh	r3, [r7, #22]
 8001330:	e003      	b.n	800133a <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 800133a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800133c:	8afa      	ldrh	r2, [r7, #22]
 800133e:	88b9      	ldrh	r1, [r7, #4]
 8001340:	88f8      	ldrh	r0, [r7, #6]
 8001342:	f000 fcdf 	bl	8001d04 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 8001346:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001348:	8afa      	ldrh	r2, [r7, #22]
 800134a:	8839      	ldrh	r1, [r7, #0]
 800134c:	88f8      	ldrh	r0, [r7, #6]
 800134e:	f000 fcd9 	bl	8001d04 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 8001352:	7cbb      	ldrb	r3, [r7, #18]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d104      	bne.n	8001362 <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 8001358:	883a      	ldrh	r2, [r7, #0]
 800135a:	88bb      	ldrh	r3, [r7, #4]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	82bb      	strh	r3, [r7, #20]
 8001360:	e003      	b.n	800136a <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 8001362:	88ba      	ldrh	r2, [r7, #4]
 8001364:	883b      	ldrh	r3, [r7, #0]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 800136a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800136c:	8aba      	ldrh	r2, [r7, #20]
 800136e:	88b9      	ldrh	r1, [r7, #4]
 8001370:	88f8      	ldrh	r0, [r7, #6]
 8001372:	f000 fd0b 	bl	8001d8c <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 8001376:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001378:	8aba      	ldrh	r2, [r7, #20]
 800137a:	88b9      	ldrh	r1, [r7, #4]
 800137c:	8878      	ldrh	r0, [r7, #2]
 800137e:	f000 fd05 	bl	8001d8c <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 8001382:	8afb      	ldrh	r3, [r7, #22]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <ILI9341_DrawHollowRectangleCoord+0xee>
 8001388:	8abb      	ldrh	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 800138e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001390:	8839      	ldrh	r1, [r7, #0]
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fbf3 	bl	8001b80 <ILI9341_DrawPixel>
	}
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}

080013a2 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80013a2:	b590      	push	{r4, r7, lr}
 80013a4:	b08d      	sub	sp, #52	@ 0x34
 80013a6:	af02      	add	r7, sp, #8
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	460b      	mov	r3, r1
 80013b4:	81bb      	strh	r3, [r7, #12]
 80013b6:	4613      	mov	r3, r2
 80013b8:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b1e      	cmp	r3, #30
 80013be:	d964      	bls.n	800148a <ILI9341_DrawChar+0xe8>
 80013c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db60      	blt.n	800148a <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3301      	adds	r3, #1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3302      	adds	r3, #2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3303      	adds	r3, #3
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	3b20      	subs	r3, #32
 80013ea:	7ffa      	ldrb	r2, [r7, #31]
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	3304      	adds	r3, #4
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	4413      	add	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80013f8:	7fbb      	ldrb	r3, [r7, #30]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	7f7b      	ldrb	r3, [r7, #29]
 80013fe:	b29c      	uxth	r4, r3
 8001400:	88f9      	ldrh	r1, [r7, #6]
 8001402:	89b8      	ldrh	r0, [r7, #12]
 8001404:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4623      	mov	r3, r4
 800140a:	f000 fc1f 	bl	8001c4c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
 8001412:	e035      	b.n	8001480 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
 8001418:	e02b      	b.n	8001472 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800141a:	7f3b      	ldrb	r3, [r7, #28]
 800141c:	6a3a      	ldr	r2, [r7, #32]
 800141e:	fb03 f202 	mul.w	r2, r3, r2
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	10db      	asrs	r3, r3, #3
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	4413      	add	r3, r2
 800142c:	3301      	adds	r3, #1
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	2201      	movs	r2, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001444:	7dfa      	ldrb	r2, [r7, #23]
 8001446:	7dbb      	ldrb	r3, [r7, #22]
 8001448:	4013      	ands	r3, r2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00d      	beq.n	800146c <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	b29a      	uxth	r2, r3
 8001454:	89bb      	ldrh	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	b298      	uxth	r0, r3
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145c:	b29a      	uxth	r2, r3
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	4413      	add	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001466:	4619      	mov	r1, r3
 8001468:	f000 fb8a 	bl	8001b80 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	3301      	adds	r3, #1
 8001470:	623b      	str	r3, [r7, #32]
 8001472:	7fbb      	ldrb	r3, [r7, #30]
 8001474:	6a3a      	ldr	r2, [r7, #32]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbcf      	blt.n	800141a <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	3301      	adds	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001480:	7f7b      	ldrb	r3, [r7, #29]
 8001482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001484:	429a      	cmp	r2, r3
 8001486:	dbc5      	blt.n	8001414 <ILI9341_DrawChar+0x72>
 8001488:	e000      	b.n	800148c <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 800148a:	bf00      	nop
			}
		}
	}
}
 800148c:	372c      	adds	r7, #44	@ 0x2c
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}

08001492 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b08a      	sub	sp, #40	@ 0x28
 8001496:	af02      	add	r7, sp, #8
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	4611      	mov	r1, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	4613      	mov	r3, r2
 80014a6:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3301      	adds	r3, #1
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80014b6:	e02d      	b.n	8001514 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	7818      	ldrb	r0, [r3, #0]
 80014bc:	88b9      	ldrh	r1, [r7, #4]
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	460b      	mov	r3, r1
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	f7ff ff69 	bl	80013a2 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	3b20      	subs	r3, #32
 80014d6:	7ffa      	ldrb	r2, [r7, #31]
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	3304      	adds	r3, #4
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	4413      	add	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	1c9a      	adds	r2, r3, #2
 80014ee:	7fbb      	ldrb	r3, [r7, #30]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	da07      	bge.n	8001504 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4413      	add	r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3302      	adds	r3, #2
 8001500:	80fb      	strh	r3, [r7, #6]
 8001502:	e004      	b.n	800150e <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001504:	7fbb      	ldrb	r3, [r7, #30]
 8001506:	b29a      	uxth	r2, r3
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	4413      	add	r3, r2
 800150c:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3301      	adds	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1cd      	bne.n	80014b8 <ILI9341_DrawText+0x26>
	}
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a06      	ldr	r2, [pc, #24]	@ (800154c <HAL_SPI_TxCpltCallback+0x24>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d105      	bne.n	8001544 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800153e:	4804      	ldr	r0, [pc, #16]	@ (8001550 <HAL_SPI_TxCpltCallback+0x28>)
 8001540:	f001 ff30 	bl	80033a4 <HAL_GPIO_WritePin>
  }
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200001f4 	.word	0x200001f4
 8001550:	40020400 	.word	0x40020400

08001554 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800155e:	bf00      	nop
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <ILI9341_SPI_Tx+0x30>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b02      	cmp	r3, #2
 800156c:	d1f8      	bne.n	8001560 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	2201      	movs	r2, #1
 8001572:	4619      	mov	r1, r3
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <ILI9341_SPI_Tx+0x30>)
 8001576:	f002 fe2b 	bl	80041d0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001f4 	.word	0x200001f4

08001588 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001594:	bf00      	nop
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <ILI9341_SPI_TxBuffer+0x30>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d1f8      	bne.n	8001596 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	461a      	mov	r2, r3
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <ILI9341_SPI_TxBuffer+0x30>)
 80015ac:	f002 fe10 	bl	80041d0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200001f4 	.word	0x200001f4

080015bc <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80015c6:	2200      	movs	r2, #0
 80015c8:	2101      	movs	r1, #1
 80015ca:	4808      	ldr	r0, [pc, #32]	@ (80015ec <ILI9341_WriteCommand+0x30>)
 80015cc:	f001 feea 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <ILI9341_WriteCommand+0x30>)
 80015d8:	f001 fee4 	bl	80033a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffb8 	bl	8001554 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020400 	.word	0x40020400

080015f0 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80015fa:	2201      	movs	r2, #1
 80015fc:	2101      	movs	r1, #1
 80015fe:	4808      	ldr	r0, [pc, #32]	@ (8001620 <ILI9341_WriteData+0x30>)
 8001600:	f001 fed0 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <ILI9341_WriteData+0x30>)
 800160c:	f001 feca 	bl	80033a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff9e 	bl	8001554 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020400 	.word	0x40020400

08001624 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001630:	2201      	movs	r2, #1
 8001632:	2101      	movs	r1, #1
 8001634:	4808      	ldr	r0, [pc, #32]	@ (8001658 <ILI9341_WriteBuffer+0x34>)
 8001636:	f001 feb5 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <ILI9341_WriteBuffer+0x34>)
 8001642:	f001 feaf 	bl	80033a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ff9c 	bl	8001588 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40020400 	.word	0x40020400

0800165c <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	4604      	mov	r4, r0
 8001664:	4608      	mov	r0, r1
 8001666:	4611      	mov	r1, r2
 8001668:	461a      	mov	r2, r3
 800166a:	4623      	mov	r3, r4
 800166c:	80fb      	strh	r3, [r7, #6]
 800166e:	4603      	mov	r3, r0
 8001670:	80bb      	strh	r3, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	807b      	strh	r3, [r7, #2]
 8001676:	4613      	mov	r3, r2
 8001678:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800169a:	202a      	movs	r0, #42	@ 0x2a
 800169c:	f7ff ff8e 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2104      	movs	r1, #4
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ffbc 	bl	8001624 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80016bc:	883b      	ldrh	r3, [r7, #0]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80016c6:	883b      	ldrh	r3, [r7, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80016cc:	202b      	movs	r0, #43	@ 0x2b
 80016ce:	f7ff ff75 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2104      	movs	r1, #4
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ffa3 	bl	8001624 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80016de:	202c      	movs	r0, #44	@ 0x2c
 80016e0:	f7ff ff6c 	bl	80015bc <ILI9341_WriteCommand>
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}

080016ec <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80016f0:	2200      	movs	r2, #0
 80016f2:	2102      	movs	r1, #2
 80016f4:	480d      	ldr	r0, [pc, #52]	@ (800172c <ILI9341_Reset+0x40>)
 80016f6:	f001 fe55 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f001 f818 	bl	8002730 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001706:	4809      	ldr	r0, [pc, #36]	@ (800172c <ILI9341_Reset+0x40>)
 8001708:	f001 fe4c 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800170c:	200a      	movs	r0, #10
 800170e:	f001 f80f 	bl	8002730 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001712:	2201      	movs	r2, #1
 8001714:	2102      	movs	r1, #2
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <ILI9341_Reset+0x40>)
 8001718:	f001 fe44 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001722:	4802      	ldr	r0, [pc, #8]	@ (800172c <ILI9341_Reset+0x40>)
 8001724:	f001 fe3e 	bl	80033a4 <HAL_GPIO_WritePin>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40020400 	.word	0x40020400

08001730 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001734:	2201      	movs	r2, #1
 8001736:	2102      	movs	r1, #2
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <ILI9341_Enable+0x14>)
 800173a:	f001 fe33 	bl	80033a4 <HAL_GPIO_WritePin>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40020400 	.word	0x40020400

08001748 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800174c:	f7ff fff0 	bl	8001730 <ILI9341_Enable>
	ILI9341_Reset();
 8001750:	f7ff ffcc 	bl	80016ec <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff ff31 	bl	80015bc <ILI9341_WriteCommand>
	HAL_Delay(10);
 800175a:	200a      	movs	r0, #10
 800175c:	f000 ffe8 	bl	8002730 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001760:	20cb      	movs	r0, #203	@ 0xcb
 8001762:	f7ff ff2b 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8001766:	2039      	movs	r0, #57	@ 0x39
 8001768:	f7ff ff42 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 800176c:	202c      	movs	r0, #44	@ 0x2c
 800176e:	f7ff ff3f 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff ff3c 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001778:	2034      	movs	r0, #52	@ 0x34
 800177a:	f7ff ff39 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff ff36 	bl	80015f0 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001784:	20cf      	movs	r0, #207	@ 0xcf
 8001786:	f7ff ff19 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff ff30 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001790:	20c1      	movs	r0, #193	@ 0xc1
 8001792:	f7ff ff2d 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8001796:	2030      	movs	r0, #48	@ 0x30
 8001798:	f7ff ff2a 	bl	80015f0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 800179c:	20e8      	movs	r0, #232	@ 0xe8
 800179e:	f7ff ff0d 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80017a2:	2085      	movs	r0, #133	@ 0x85
 80017a4:	f7ff ff24 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff ff21 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80017ae:	2078      	movs	r0, #120	@ 0x78
 80017b0:	f7ff ff1e 	bl	80015f0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80017b4:	20ea      	movs	r0, #234	@ 0xea
 80017b6:	f7ff ff01 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff ff18 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff ff15 	bl	80015f0 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80017c6:	20ed      	movs	r0, #237	@ 0xed
 80017c8:	f7ff fef8 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80017cc:	2064      	movs	r0, #100	@ 0x64
 80017ce:	f7ff ff0f 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80017d2:	2003      	movs	r0, #3
 80017d4:	f7ff ff0c 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80017d8:	2012      	movs	r0, #18
 80017da:	f7ff ff09 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80017de:	2081      	movs	r0, #129	@ 0x81
 80017e0:	f7ff ff06 	bl	80015f0 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80017e4:	20f7      	movs	r0, #247	@ 0xf7
 80017e6:	f7ff fee9 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80017ea:	2020      	movs	r0, #32
 80017ec:	f7ff ff00 	bl	80015f0 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80017f0:	20c0      	movs	r0, #192	@ 0xc0
 80017f2:	f7ff fee3 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80017f6:	2023      	movs	r0, #35	@ 0x23
 80017f8:	f7ff fefa 	bl	80015f0 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80017fc:	20c1      	movs	r0, #193	@ 0xc1
 80017fe:	f7ff fedd 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001802:	2010      	movs	r0, #16
 8001804:	f7ff fef4 	bl	80015f0 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001808:	20c5      	movs	r0, #197	@ 0xc5
 800180a:	f7ff fed7 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800180e:	203e      	movs	r0, #62	@ 0x3e
 8001810:	f7ff feee 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001814:	2028      	movs	r0, #40	@ 0x28
 8001816:	f7ff feeb 	bl	80015f0 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800181a:	20c7      	movs	r0, #199	@ 0xc7
 800181c:	f7ff fece 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001820:	2086      	movs	r0, #134	@ 0x86
 8001822:	f7ff fee5 	bl	80015f0 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001826:	2036      	movs	r0, #54	@ 0x36
 8001828:	f7ff fec8 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 800182c:	2048      	movs	r0, #72	@ 0x48
 800182e:	f7ff fedf 	bl	80015f0 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001832:	203a      	movs	r0, #58	@ 0x3a
 8001834:	f7ff fec2 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001838:	2055      	movs	r0, #85	@ 0x55
 800183a:	f7ff fed9 	bl	80015f0 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800183e:	20b1      	movs	r0, #177	@ 0xb1
 8001840:	f7ff febc 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff fed3 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800184a:	2018      	movs	r0, #24
 800184c:	f7ff fed0 	bl	80015f0 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001850:	20b6      	movs	r0, #182	@ 0xb6
 8001852:	f7ff feb3 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8001856:	2008      	movs	r0, #8
 8001858:	f7ff feca 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 800185c:	2082      	movs	r0, #130	@ 0x82
 800185e:	f7ff fec7 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001862:	2027      	movs	r0, #39	@ 0x27
 8001864:	f7ff fec4 	bl	80015f0 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001868:	20f2      	movs	r0, #242	@ 0xf2
 800186a:	f7ff fea7 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff febe 	bl	80015f0 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001874:	2026      	movs	r0, #38	@ 0x26
 8001876:	f7ff fea1 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff feb8 	bl	80015f0 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001880:	20e0      	movs	r0, #224	@ 0xe0
 8001882:	f7ff fe9b 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8001886:	200f      	movs	r0, #15
 8001888:	f7ff feb2 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800188c:	2031      	movs	r0, #49	@ 0x31
 800188e:	f7ff feaf 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001892:	202b      	movs	r0, #43	@ 0x2b
 8001894:	f7ff feac 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001898:	200c      	movs	r0, #12
 800189a:	f7ff fea9 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800189e:	200e      	movs	r0, #14
 80018a0:	f7ff fea6 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80018a4:	2008      	movs	r0, #8
 80018a6:	f7ff fea3 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80018aa:	204e      	movs	r0, #78	@ 0x4e
 80018ac:	f7ff fea0 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80018b0:	20f1      	movs	r0, #241	@ 0xf1
 80018b2:	f7ff fe9d 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80018b6:	2037      	movs	r0, #55	@ 0x37
 80018b8:	f7ff fe9a 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80018bc:	2007      	movs	r0, #7
 80018be:	f7ff fe97 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80018c2:	2010      	movs	r0, #16
 80018c4:	f7ff fe94 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f7ff fe91 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80018ce:	200e      	movs	r0, #14
 80018d0:	f7ff fe8e 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80018d4:	2009      	movs	r0, #9
 80018d6:	f7ff fe8b 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff fe88 	bl	80015f0 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80018e0:	20e1      	movs	r0, #225	@ 0xe1
 80018e2:	f7ff fe6b 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fe82 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80018ec:	200e      	movs	r0, #14
 80018ee:	f7ff fe7f 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80018f2:	2014      	movs	r0, #20
 80018f4:	f7ff fe7c 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f7ff fe79 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80018fe:	2011      	movs	r0, #17
 8001900:	f7ff fe76 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001904:	2007      	movs	r0, #7
 8001906:	f7ff fe73 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800190a:	2031      	movs	r0, #49	@ 0x31
 800190c:	f7ff fe70 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001910:	20c1      	movs	r0, #193	@ 0xc1
 8001912:	f7ff fe6d 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001916:	2048      	movs	r0, #72	@ 0x48
 8001918:	f7ff fe6a 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800191c:	2008      	movs	r0, #8
 800191e:	f7ff fe67 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001922:	200f      	movs	r0, #15
 8001924:	f7ff fe64 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001928:	200c      	movs	r0, #12
 800192a:	f7ff fe61 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800192e:	2031      	movs	r0, #49	@ 0x31
 8001930:	f7ff fe5e 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001934:	2036      	movs	r0, #54	@ 0x36
 8001936:	f7ff fe5b 	bl	80015f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800193a:	200f      	movs	r0, #15
 800193c:	f7ff fe58 	bl	80015f0 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001940:	2011      	movs	r0, #17
 8001942:	f7ff fe3b 	bl	80015bc <ILI9341_WriteCommand>
	HAL_Delay(100);
 8001946:	2064      	movs	r0, #100	@ 0x64
 8001948:	f000 fef2 	bl	8002730 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 800194c:	2029      	movs	r0, #41	@ 0x29
 800194e:	f7ff fe35 	bl	80015bc <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f802 	bl	800195c <ILI9341_SetRotation>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8001966:	2036      	movs	r0, #54	@ 0x36
 8001968:	f7ff fe28 	bl	80015bc <ILI9341_WriteCommand>
	HAL_Delay(1);
 800196c:	2001      	movs	r0, #1
 800196e:	f000 fedf 	bl	8002730 <HAL_Delay>

	switch(rotation)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d837      	bhi.n	80019e8 <ILI9341_SetRotation+0x8c>
 8001978:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <ILI9341_SetRotation+0x24>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	08001991 	.word	0x08001991
 8001984:	080019a7 	.word	0x080019a7
 8001988:	080019bd 	.word	0x080019bd
 800198c:	080019d3 	.word	0x080019d3
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001990:	2048      	movs	r0, #72	@ 0x48
 8001992:	f7ff fe2d 	bl	80015f0 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8001996:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <ILI9341_SetRotation+0x98>)
 8001998:	22f0      	movs	r2, #240	@ 0xf0
 800199a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800199c:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <ILI9341_SetRotation+0x9c>)
 800199e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019a2:	801a      	strh	r2, [r3, #0]
		break;
 80019a4:	e021      	b.n	80019ea <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80019a6:	2028      	movs	r0, #40	@ 0x28
 80019a8:	f7ff fe22 	bl	80015f0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <ILI9341_SetRotation+0x98>)
 80019ae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019b2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80019b4:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <ILI9341_SetRotation+0x9c>)
 80019b6:	22f0      	movs	r2, #240	@ 0xf0
 80019b8:	801a      	strh	r2, [r3, #0]
		break;
 80019ba:	e016      	b.n	80019ea <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80019bc:	2088      	movs	r0, #136	@ 0x88
 80019be:	f7ff fe17 	bl	80015f0 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <ILI9341_SetRotation+0x98>)
 80019c4:	22f0      	movs	r2, #240	@ 0xf0
 80019c6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <ILI9341_SetRotation+0x9c>)
 80019ca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019ce:	801a      	strh	r2, [r3, #0]
		break;
 80019d0:	e00b      	b.n	80019ea <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80019d2:	20e8      	movs	r0, #232	@ 0xe8
 80019d4:	f7ff fe0c 	bl	80015f0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <ILI9341_SetRotation+0x98>)
 80019da:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019de:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <ILI9341_SetRotation+0x9c>)
 80019e2:	22f0      	movs	r2, #240	@ 0xf0
 80019e4:	801a      	strh	r2, [r3, #0]
		break;
 80019e6:	e000      	b.n	80019ea <ILI9341_SetRotation+0x8e>
	default:
		break;
 80019e8:	bf00      	nop
	}
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000002 	.word	0x20000002
 80019f8:	20000000 	.word	0x20000000

080019fc <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80019fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a00:	b08d      	sub	sp, #52	@ 0x34
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	6039      	str	r1, [r7, #0]
 8001a08:	80fb      	strh	r3, [r7, #6]
 8001a0a:	466b      	mov	r3, sp
 8001a0c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a1a:	d202      	bcs.n	8001a22 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a20:	e002      	b.n	8001a28 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001a22:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	483f      	ldr	r0, [pc, #252]	@ (8001b2c <ILI9341_DrawColorBurst+0x130>)
 8001a2e:	f001 fcb9 	bl	80033a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a38:	483c      	ldr	r0, [pc, #240]	@ (8001b2c <ILI9341_DrawColorBurst+0x130>)
 8001a3a:	f001 fcb3 	bl	80033a4 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8001a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	2300      	movs	r3, #0
 8001a52:	4688      	mov	r8, r1
 8001a54:	4699      	mov	r9, r3
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	461d      	mov	r5, r3
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	00eb      	lsls	r3, r5, #3
 8001a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	1dcb      	adds	r3, r1, #7
 8001a82:	08db      	lsrs	r3, r3, #3
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	ebad 0d03 	sub.w	sp, sp, r3
 8001a8a:	466b      	mov	r3, sp
 8001a8c:	3300      	adds	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a94:	e00e      	b.n	8001ab4 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001aa0:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	88fa      	ldrh	r2, [r7, #6]
 8001aa8:	b2d1      	uxtb	r1, r2
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3ec      	bcc.n	8001a96 <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ad0:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ad6:	fb01 f202 	mul.w	r2, r1, r2
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	e009      	b.n	8001afe <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	230a      	movs	r3, #10
 8001af0:	69b9      	ldr	r1, [r7, #24]
 8001af2:	480f      	ldr	r0, [pc, #60]	@ (8001b30 <ILI9341_DrawColorBurst+0x134>)
 8001af4:	f002 fa27 	bl	8003f46 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3f1      	bcc.n	8001aea <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	69b9      	ldr	r1, [r7, #24]
 8001b0e:	4808      	ldr	r0, [pc, #32]	@ (8001b30 <ILI9341_DrawColorBurst+0x134>)
 8001b10:	f002 fa19 	bl	8003f46 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b1a:	4804      	ldr	r0, [pc, #16]	@ (8001b2c <ILI9341_DrawColorBurst+0x130>)
 8001b1c:	f001 fc42 	bl	80033a4 <HAL_GPIO_WritePin>
 8001b20:	46b5      	mov	sp, r6
}
 8001b22:	bf00      	nop
 8001b24:	3734      	adds	r7, #52	@ 0x34
 8001b26:	46bd      	mov	sp, r7
 8001b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	200001f4 	.word	0x200001f4

08001b34 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <ILI9341_FillScreen+0x44>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <ILI9341_FillScreen+0x48>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fd85 	bl	800165c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <ILI9341_FillScreen+0x44>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <ILI9341_FillScreen+0x48>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff46 	bl	80019fc <ILI9341_DrawColorBurst>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000002 	.word	0x20000002
 8001b7c:	20000000 	.word	0x20000000

08001b80 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	80bb      	strh	r3, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b92:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <ILI9341_DrawPixel+0xc4>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	88fa      	ldrh	r2, [r7, #6]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d24d      	bcs.n	8001c3a <ILI9341_DrawPixel+0xba>
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <ILI9341_DrawPixel+0xc8>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	88ba      	ldrh	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d247      	bcs.n	8001c3a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	753b      	strb	r3, [r7, #20]
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	757b      	strb	r3, [r7, #21]
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	121b      	asrs	r3, r3, #8
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	75bb      	strb	r3, [r7, #22]
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001bce:	88bb      	ldrh	r3, [r7, #4]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	743b      	strb	r3, [r7, #16]
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	747b      	strb	r3, [r7, #17]
 8001bde:	88bb      	ldrh	r3, [r7, #4]
 8001be0:	3301      	adds	r3, #1
 8001be2:	121b      	asrs	r3, r3, #8
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	74bb      	strb	r3, [r7, #18]
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	733b      	strb	r3, [r7, #12]
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001c02:	202a      	movs	r0, #42	@ 0x2a
 8001c04:	f7ff fcda 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fd08 	bl	8001624 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001c14:	202b      	movs	r0, #43	@ 0x2b
 8001c16:	f7ff fcd1 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	2104      	movs	r1, #4
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fcff 	bl	8001624 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001c26:	202c      	movs	r0, #44	@ 0x2c
 8001c28:	f7ff fcc8 	bl	80015bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2102      	movs	r1, #2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fcf6 	bl	8001624 <ILI9341_WriteBuffer>
 8001c38:	e000      	b.n	8001c3c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001c3a:	bf00      	nop
}
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000002 	.word	0x20000002
 8001c48:	20000000 	.word	0x20000000

08001c4c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4604      	mov	r4, r0
 8001c54:	4608      	mov	r0, r1
 8001c56:	4611      	mov	r1, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	80fb      	strh	r3, [r7, #6]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80bb      	strh	r3, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	807b      	strh	r3, [r7, #2]
 8001c66:	4613      	mov	r3, r2
 8001c68:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001c6a:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <ILI9341_DrawRectangle+0xb0>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d23d      	bcs.n	8001cf2 <ILI9341_DrawRectangle+0xa6>
 8001c76:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <ILI9341_DrawRectangle+0xb4>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	88ba      	ldrh	r2, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d237      	bcs.n	8001cf2 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001c82:	88fa      	ldrh	r2, [r7, #6]
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <ILI9341_DrawRectangle+0xb0>)
 8001c8a:	8812      	ldrh	r2, [r2, #0]
 8001c8c:	b292      	uxth	r2, r2
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	dd05      	ble.n	8001c9e <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <ILI9341_DrawRectangle+0xb0>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001c9e:	88ba      	ldrh	r2, [r7, #4]
 8001ca0:	883b      	ldrh	r3, [r7, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a16      	ldr	r2, [pc, #88]	@ (8001d00 <ILI9341_DrawRectangle+0xb4>)
 8001ca6:	8812      	ldrh	r2, [r2, #0]
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	4293      	cmp	r3, r2
 8001cac:	dd05      	ble.n	8001cba <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <ILI9341_DrawRectangle+0xb4>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001cba:	88fa      	ldrh	r2, [r7, #6]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29c      	uxth	r4, r3
 8001cc6:	88ba      	ldrh	r2, [r7, #4]
 8001cc8:	883b      	ldrh	r3, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	88b9      	ldrh	r1, [r7, #4]
 8001cd4:	88f8      	ldrh	r0, [r7, #6]
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	f7ff fcc0 	bl	800165c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001cdc:	883b      	ldrh	r3, [r7, #0]
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	8b3b      	ldrh	r3, [r7, #24]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fe86 	bl	80019fc <ILI9341_DrawColorBurst>
 8001cf0:	e000      	b.n	8001cf4 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001cf2:	bf00      	nop
}
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd90      	pop	{r4, r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000002 	.word	0x20000002
 8001d00:	20000000 	.word	0x20000000

08001d04 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	80fb      	strh	r3, [r7, #6]
 8001d16:	4603      	mov	r3, r0
 8001d18:	80bb      	strh	r3, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <ILI9341_DrawHLine+0x80>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d225      	bcs.n	8001d7a <ILI9341_DrawHLine+0x76>
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <ILI9341_DrawHLine+0x84>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	88ba      	ldrh	r2, [r7, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d21f      	bcs.n	8001d7a <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001d3a:	88fa      	ldrh	r2, [r7, #6]
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a10      	ldr	r2, [pc, #64]	@ (8001d84 <ILI9341_DrawHLine+0x80>)
 8001d42:	8812      	ldrh	r2, [r2, #0]
 8001d44:	b292      	uxth	r2, r2
 8001d46:	4293      	cmp	r3, r2
 8001d48:	dd05      	ble.n	8001d56 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <ILI9341_DrawHLine+0x80>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001d56:	88fa      	ldrh	r2, [r7, #6]
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	88bb      	ldrh	r3, [r7, #4]
 8001d64:	88b9      	ldrh	r1, [r7, #4]
 8001d66:	88f8      	ldrh	r0, [r7, #6]
 8001d68:	f7ff fc78 	bl	800165c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	883b      	ldrh	r3, [r7, #0]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fe42 	bl	80019fc <ILI9341_DrawColorBurst>
 8001d78:	e000      	b.n	8001d7c <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001d7a:	bf00      	nop
}
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000002 	.word	0x20000002
 8001d88:	20000000 	.word	0x20000000

08001d8c <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	80fb      	strh	r3, [r7, #6]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80bb      	strh	r3, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001daa:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <ILI9341_DrawVLine+0x80>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	88fa      	ldrh	r2, [r7, #6]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d225      	bcs.n	8001e02 <ILI9341_DrawVLine+0x76>
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <ILI9341_DrawVLine+0x84>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	88ba      	ldrh	r2, [r7, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d21f      	bcs.n	8001e02 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001dc2:	88ba      	ldrh	r2, [r7, #4]
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <ILI9341_DrawVLine+0x84>)
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	dd05      	ble.n	8001dde <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <ILI9341_DrawVLine+0x84>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	88bb      	ldrh	r3, [r7, #4]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001dde:	88ba      	ldrh	r2, [r7, #4]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	4413      	add	r3, r2
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	88b9      	ldrh	r1, [r7, #4]
 8001dee:	88f8      	ldrh	r0, [r7, #6]
 8001df0:	f7ff fc34 	bl	800165c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001df4:	887a      	ldrh	r2, [r7, #2]
 8001df6:	883b      	ldrh	r3, [r7, #0]
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fdfe 	bl	80019fc <ILI9341_DrawColorBurst>
 8001e00:	e000      	b.n	8001e04 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001e02:	bf00      	nop
}
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000002 	.word	0x20000002
 8001e10:	20000000 	.word	0x20000000

08001e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e1a:	f000 fc17 	bl	800264c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e1e:	f000 f91d 	bl	800205c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e22:	f000 f9dd 	bl	80021e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e26:	f000 f9bb 	bl	80021a0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001e2a:	f000 f983 	bl	8002134 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001e2e:	f7ff fc8b 	bl	8001748 <ILI9341_Init>

    // Simple Text writing (Text, Font, X, Y, Color, BackColor)
    // Available Fonts are FONT1, FONT2, FONT3 and FONT4
    ILI9341_FillScreen(BLACK);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fe7e 	bl	8001b34 <ILI9341_FillScreen>
    ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f7ff fd8f 	bl	800195c <ILI9341_SetRotation>
    ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 8001e3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2300      	movs	r3, #0
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	236e      	movs	r3, #110	@ 0x6e
 8001e4a:	225a      	movs	r2, #90	@ 0x5a
 8001e4c:	497e      	ldr	r1, [pc, #504]	@ (8002048 <main+0x234>)
 8001e4e:	487f      	ldr	r0, [pc, #508]	@ (800204c <main+0x238>)
 8001e50:	f7ff fb1f 	bl	8001492 <ILI9341_DrawText>
    HAL_Delay(1000);
 8001e54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e58:	f000 fc6a 	bl	8002730 <HAL_Delay>

    //Writing numbers
    ILI9341_FillScreen(WHITE);
 8001e5c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e60:	f7ff fe68 	bl	8001b34 <ILI9341_FillScreen>
    static char BufferText[30];
    for(uint8_t i = 0; i <= 5; i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	e07b      	b.n	8001f62 <main+0x14e>
    {
      sprintf(BufferText, "COUNT : %d", i);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4978      	ldr	r1, [pc, #480]	@ (8002050 <main+0x23c>)
 8001e70:	4878      	ldr	r0, [pc, #480]	@ (8002054 <main+0x240>)
 8001e72:	f003 faff 	bl	8005474 <siprintf>
      ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 8001e76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	230a      	movs	r3, #10
 8001e82:	220a      	movs	r2, #10
 8001e84:	4974      	ldr	r1, [pc, #464]	@ (8002058 <main+0x244>)
 8001e86:	4873      	ldr	r0, [pc, #460]	@ (8002054 <main+0x240>)
 8001e88:	f7ff fb03 	bl	8001492 <ILI9341_DrawText>
      ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 8001e8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	231f      	movs	r3, #31
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	231e      	movs	r3, #30
 8001e98:	220a      	movs	r2, #10
 8001e9a:	496f      	ldr	r1, [pc, #444]	@ (8002058 <main+0x244>)
 8001e9c:	486d      	ldr	r0, [pc, #436]	@ (8002054 <main+0x240>)
 8001e9e:	f7ff faf8 	bl	8001492 <ILI9341_DrawText>
      ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 8001ea2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2332      	movs	r3, #50	@ 0x32
 8001eb0:	220a      	movs	r2, #10
 8001eb2:	4969      	ldr	r1, [pc, #420]	@ (8002058 <main+0x244>)
 8001eb4:	4867      	ldr	r0, [pc, #412]	@ (8002054 <main+0x240>)
 8001eb6:	f7ff faec 	bl	8001492 <ILI9341_DrawText>
      ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 8001eba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2346      	movs	r3, #70	@ 0x46
 8001ec8:	220a      	movs	r2, #10
 8001eca:	4963      	ldr	r1, [pc, #396]	@ (8002058 <main+0x244>)
 8001ecc:	4861      	ldr	r0, [pc, #388]	@ (8002054 <main+0x240>)
 8001ece:	f7ff fae0 	bl	8001492 <ILI9341_DrawText>
      ILI9341_DrawText(BufferText, FONT3, 10, 90, YELLOW, WHITE);
 8001ed2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	235a      	movs	r3, #90	@ 0x5a
 8001ee0:	220a      	movs	r2, #10
 8001ee2:	495d      	ldr	r1, [pc, #372]	@ (8002058 <main+0x244>)
 8001ee4:	485b      	ldr	r0, [pc, #364]	@ (8002054 <main+0x240>)
 8001ee6:	f7ff fad4 	bl	8001492 <ILI9341_DrawText>
      ILI9341_DrawText(BufferText, FONT3, 10, 110, PURPLE, WHITE);
 8001eea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	f647 030f 	movw	r3, #30735	@ 0x780f
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	236e      	movs	r3, #110	@ 0x6e
 8001ef8:	220a      	movs	r2, #10
 8001efa:	4957      	ldr	r1, [pc, #348]	@ (8002058 <main+0x244>)
 8001efc:	4855      	ldr	r0, [pc, #340]	@ (8002054 <main+0x240>)
 8001efe:	f7ff fac8 	bl	8001492 <ILI9341_DrawText>
      ILI9341_DrawText(BufferText, FONT3, 10, 130, ORANGE, WHITE);
 8001f02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2382      	movs	r3, #130	@ 0x82
 8001f10:	220a      	movs	r2, #10
 8001f12:	4951      	ldr	r1, [pc, #324]	@ (8002058 <main+0x244>)
 8001f14:	484f      	ldr	r0, [pc, #316]	@ (8002054 <main+0x240>)
 8001f16:	f7ff fabc 	bl	8001492 <ILI9341_DrawText>
      ILI9341_DrawText(BufferText, FONT3, 10, 150, MAROON, WHITE);
 8001f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2396      	movs	r3, #150	@ 0x96
 8001f28:	220a      	movs	r2, #10
 8001f2a:	494b      	ldr	r1, [pc, #300]	@ (8002058 <main+0x244>)
 8001f2c:	4849      	ldr	r0, [pc, #292]	@ (8002054 <main+0x240>)
 8001f2e:	f7ff fab0 	bl	8001492 <ILI9341_DrawText>
      ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 8001f32:	2300      	movs	r3, #0
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	23aa      	movs	r3, #170	@ 0xaa
 8001f3e:	220a      	movs	r2, #10
 8001f40:	4945      	ldr	r1, [pc, #276]	@ (8002058 <main+0x244>)
 8001f42:	4844      	ldr	r0, [pc, #272]	@ (8002054 <main+0x240>)
 8001f44:	f7ff faa5 	bl	8001492 <ILI9341_DrawText>
      ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	231f      	movs	r3, #31
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	23be      	movs	r3, #190	@ 0xbe
 8001f52:	220a      	movs	r2, #10
 8001f54:	4940      	ldr	r1, [pc, #256]	@ (8002058 <main+0x244>)
 8001f56:	483f      	ldr	r0, [pc, #252]	@ (8002054 <main+0x240>)
 8001f58:	f7ff fa9b 	bl	8001492 <ILI9341_DrawText>
    for(uint8_t i = 0; i <= 5; i++)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	71fb      	strb	r3, [r7, #7]
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d980      	bls.n	8001e6a <main+0x56>
    }

    // Horizontal Line (X, Y, Length, Color)
    ILI9341_FillScreen(WHITE);
 8001f68:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f6c:	f7ff fde2 	bl	8001b34 <ILI9341_FillScreen>
    ILI9341_DrawHLine(50, 120, 200, NAVY);
 8001f70:	230f      	movs	r3, #15
 8001f72:	22c8      	movs	r2, #200	@ 0xc8
 8001f74:	2178      	movs	r1, #120	@ 0x78
 8001f76:	2032      	movs	r0, #50	@ 0x32
 8001f78:	f7ff fec4 	bl	8001d04 <ILI9341_DrawHLine>
    HAL_Delay(1000);
 8001f7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f80:	f000 fbd6 	bl	8002730 <HAL_Delay>

    // Vertical Line (X, Y, Length, Color)
    ILI9341_FillScreen(WHITE);
 8001f84:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f88:	f7ff fdd4 	bl	8001b34 <ILI9341_FillScreen>
    ILI9341_DrawVLine(160, 40, 150, DARKGREEN);
 8001f8c:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001f90:	2296      	movs	r2, #150	@ 0x96
 8001f92:	2128      	movs	r1, #40	@ 0x28
 8001f94:	20a0      	movs	r0, #160	@ 0xa0
 8001f96:	f7ff fef9 	bl	8001d8c <ILI9341_DrawVLine>
    HAL_Delay(1000);
 8001f9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f9e:	f000 fbc7 	bl	8002730 <HAL_Delay>

    // Hollow Circle (Centre X, Centre Y, Radius, Color)
    ILI9341_FillScreen(WHITE);
 8001fa2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fa6:	f7ff fdc5 	bl	8001b34 <ILI9341_FillScreen>
    ILI9341_DrawHollowCircle(160, 120, 80, PINK);
 8001faa:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001fae:	2250      	movs	r2, #80	@ 0x50
 8001fb0:	2178      	movs	r1, #120	@ 0x78
 8001fb2:	20a0      	movs	r0, #160	@ 0xa0
 8001fb4:	f7ff f836 	bl	8001024 <ILI9341_DrawHollowCircle>
    HAL_Delay(1000);
 8001fb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fbc:	f000 fbb8 	bl	8002730 <HAL_Delay>

    // Filled Circle (Centre X, Centre Y, Radius, Color)
    ILI9341_FillScreen(WHITE);
 8001fc0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fc4:	f7ff fdb6 	bl	8001b34 <ILI9341_FillScreen>
    ILI9341_DrawFilledCircle(160, 120, 50, CYAN);
 8001fc8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001fcc:	2232      	movs	r2, #50	@ 0x32
 8001fce:	2178      	movs	r1, #120	@ 0x78
 8001fd0:	20a0      	movs	r0, #160	@ 0xa0
 8001fd2:	f7ff f8dd 	bl	8001190 <ILI9341_DrawFilledCircle>
    HAL_Delay(1000);
 8001fd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fda:	f000 fba9 	bl	8002730 <HAL_Delay>

    // Filled Rectangle (Start X, Start Y, Length X, Length Y)
    ILI9341_FillScreen(WHITE);
 8001fde:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fe2:	f7ff fda7 	bl	8001b34 <ILI9341_FillScreen>
    ILI9341_DrawRectangle(50, 50, 220, 140, GREENYELLOW);
 8001fe6:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	238c      	movs	r3, #140	@ 0x8c
 8001fee:	22dc      	movs	r2, #220	@ 0xdc
 8001ff0:	2132      	movs	r1, #50	@ 0x32
 8001ff2:	2032      	movs	r0, #50	@ 0x32
 8001ff4:	f7ff fe2a 	bl	8001c4c <ILI9341_DrawRectangle>
    HAL_Delay(1000);
 8001ff8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ffc:	f000 fb98 	bl	8002730 <HAL_Delay>

    // Hollow Rectangle (Start X, Start Y, End X, End Y)
    ILI9341_FillScreen(WHITE);
 8002000:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002004:	f7ff fd96 	bl	8001b34 <ILI9341_FillScreen>
    ILI9341_DrawHollowRectangleCoord(50, 50, 270, 190, DARKCYAN);
 8002008:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	23be      	movs	r3, #190	@ 0xbe
 8002010:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8002014:	2132      	movs	r1, #50	@ 0x32
 8002016:	2032      	movs	r0, #50	@ 0x32
 8002018:	f7ff f942 	bl	80012a0 <ILI9341_DrawHollowRectangleCoord>
    HAL_Delay(1000);
 800201c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002020:	f000 fb86 	bl	8002730 <HAL_Delay>

    // Simple Pixel Only (X, Y, Color)
    ILI9341_FillScreen(WHITE);
 8002024:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002028:	f7ff fd84 	bl	8001b34 <ILI9341_FillScreen>
    ILI9341_DrawPixel(100, 100, BLACK);
 800202c:	2200      	movs	r2, #0
 800202e:	2164      	movs	r1, #100	@ 0x64
 8002030:	2064      	movs	r0, #100	@ 0x64
 8002032:	f7ff fda5 	bl	8001b80 <ILI9341_DrawPixel>
    HAL_Delay(1000);
 8002036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800203a:	f000 fb79 	bl	8002730 <HAL_Delay>
 800203e:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	0800967c 	.word	0x0800967c
 800204c:	08008d00 	.word	0x08008d00
 8002050:	08008d0c 	.word	0x08008d0c
 8002054:	200002ac 	.word	0x200002ac
 8002058:	08008d18 	.word	0x08008d18

0800205c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b094      	sub	sp, #80	@ 0x50
 8002060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	2234      	movs	r2, #52	@ 0x34
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fa65 	bl	800553a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	4b29      	ldr	r3, [pc, #164]	@ (800212c <SystemClock_Config+0xd0>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	4a28      	ldr	r2, [pc, #160]	@ (800212c <SystemClock_Config+0xd0>)
 800208a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800208e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002090:	4b26      	ldr	r3, [pc, #152]	@ (800212c <SystemClock_Config+0xd0>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800209c:	2300      	movs	r3, #0
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <SystemClock_Config+0xd4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80020a8:	4a21      	ldr	r2, [pc, #132]	@ (8002130 <SystemClock_Config+0xd4>)
 80020aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <SystemClock_Config+0xd4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020bc:	2302      	movs	r3, #2
 80020be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020c0:	2301      	movs	r3, #1
 80020c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020c4:	2310      	movs	r3, #16
 80020c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c8:	2302      	movs	r3, #2
 80020ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020cc:	2300      	movs	r3, #0
 80020ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020d0:	2308      	movs	r3, #8
 80020d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80020d4:	2348      	movs	r3, #72	@ 0x48
 80020d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020d8:	2302      	movs	r3, #2
 80020da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 fc05 	bl	80038f8 <HAL_RCC_OscConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80020f4:	f000 f8c6 	bl	8002284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f8:	230f      	movs	r3, #15
 80020fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020fc:	2302      	movs	r3, #2
 80020fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002108:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	2102      	movs	r1, #2
 8002114:	4618      	mov	r0, r3
 8002116:	f001 f95f 	bl	80033d8 <HAL_RCC_ClockConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002120:	f000 f8b0 	bl	8002284 <Error_Handler>
  }
}
 8002124:	bf00      	nop
 8002126:	3750      	adds	r7, #80	@ 0x50
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	40007000 	.word	0x40007000

08002134 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002138:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <MX_SPI1_Init+0x64>)
 800213a:	4a18      	ldr	r2, [pc, #96]	@ (800219c <MX_SPI1_Init+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800213e:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <MX_SPI1_Init+0x64>)
 8002140:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002144:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002146:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <MX_SPI1_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <MX_SPI1_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <MX_SPI1_Init+0x64>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <MX_SPI1_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800215e:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <MX_SPI1_Init+0x64>)
 8002160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002164:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <MX_SPI1_Init+0x64>)
 8002168:	2208      	movs	r2, #8
 800216a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800216c:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <MX_SPI1_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <MX_SPI1_Init+0x64>)
 8002174:	2200      	movs	r2, #0
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <MX_SPI1_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <MX_SPI1_Init+0x64>)
 8002180:	220a      	movs	r2, #10
 8002182:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	@ (8002198 <MX_SPI1_Init+0x64>)
 8002186:	f001 fe55 	bl	8003e34 <HAL_SPI_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002190:	f000 f878 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200001f4 	.word	0x200001f4
 800219c:	40013000 	.word	0x40013000

080021a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <MX_DMA_Init+0x3c>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a0b      	ldr	r2, [pc, #44]	@ (80021dc <MX_DMA_Init+0x3c>)
 80021b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <MX_DMA_Init+0x3c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	203b      	movs	r0, #59	@ 0x3b
 80021c8:	f000 fbb1 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80021cc:	203b      	movs	r0, #59	@ 0x3b
 80021ce:	f000 fbca 	bl	8002966 <HAL_NVIC_EnableIRQ>

}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	4b20      	ldr	r3, [pc, #128]	@ (800227c <MX_GPIO_Init+0x9c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a1f      	ldr	r2, [pc, #124]	@ (800227c <MX_GPIO_Init+0x9c>)
 8002200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <MX_GPIO_Init+0x9c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4b19      	ldr	r3, [pc, #100]	@ (800227c <MX_GPIO_Init+0x9c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a18      	ldr	r2, [pc, #96]	@ (800227c <MX_GPIO_Init+0x9c>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b16      	ldr	r3, [pc, #88]	@ (800227c <MX_GPIO_Init+0x9c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <MX_GPIO_Init+0x9c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a11      	ldr	r2, [pc, #68]	@ (800227c <MX_GPIO_Init+0x9c>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <MX_GPIO_Init+0x9c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f240 4103 	movw	r1, #1027	@ 0x403
 8002250:	480b      	ldr	r0, [pc, #44]	@ (8002280 <MX_GPIO_Init+0xa0>)
 8002252:	f001 f8a7 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8002256:	f240 4303 	movw	r3, #1027	@ 0x403
 800225a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4619      	mov	r1, r3
 800226e:	4804      	ldr	r0, [pc, #16]	@ (8002280 <MX_GPIO_Init+0xa0>)
 8002270:	f000 ff04 	bl	800307c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002274:	bf00      	nop
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40020400 	.word	0x40020400

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <Error_Handler+0x8>

08002290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <HAL_MspInit+0x4c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	4a0f      	ldr	r2, [pc, #60]	@ (80022dc <HAL_MspInit+0x4c>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <HAL_MspInit+0x4c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_MspInit+0x4c>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_MspInit+0x4c>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_MspInit+0x4c>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800

080022e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a30      	ldr	r2, [pc, #192]	@ (80023c0 <HAL_SPI_MspInit+0xe0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d159      	bne.n	80023b6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b2f      	ldr	r3, [pc, #188]	@ (80023c4 <HAL_SPI_MspInit+0xe4>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	4a2e      	ldr	r2, [pc, #184]	@ (80023c4 <HAL_SPI_MspInit+0xe4>)
 800230c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002310:	6453      	str	r3, [r2, #68]	@ 0x44
 8002312:	4b2c      	ldr	r3, [pc, #176]	@ (80023c4 <HAL_SPI_MspInit+0xe4>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <HAL_SPI_MspInit+0xe4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	4a27      	ldr	r2, [pc, #156]	@ (80023c4 <HAL_SPI_MspInit+0xe4>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	@ 0x30
 800232e:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <HAL_SPI_MspInit+0xe4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800233a:	23a0      	movs	r3, #160	@ 0xa0
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800234a:	2305      	movs	r3, #5
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	481c      	ldr	r0, [pc, #112]	@ (80023c8 <HAL_SPI_MspInit+0xe8>)
 8002356:	f000 fe91 	bl	800307c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800235a:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 800235c:	4a1c      	ldr	r2, [pc, #112]	@ (80023d0 <HAL_SPI_MspInit+0xf0>)
 800235e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002360:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 8002362:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002366:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002368:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 800236a:	2240      	movs	r2, #64	@ 0x40
 800236c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800236e:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 8002376:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800237a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237c:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 800237e:	2200      	movs	r2, #0
 8002380:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002382:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002388:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002394:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800239a:	480c      	ldr	r0, [pc, #48]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 800239c:	f000 fafe 	bl	800299c <HAL_DMA_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80023a6:	f7ff ff6d 	bl	8002284 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a07      	ldr	r2, [pc, #28]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 80023ae:	649a      	str	r2, [r3, #72]	@ 0x48
 80023b0:	4a06      	ldr	r2, [pc, #24]	@ (80023cc <HAL_SPI_MspInit+0xec>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	@ 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40013000 	.word	0x40013000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	2000024c 	.word	0x2000024c
 80023d0:	40026458 	.word	0x40026458

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <NMI_Handler+0x4>

080023dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <HardFault_Handler+0x4>

080023e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <MemManage_Handler+0x4>

080023ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <BusFault_Handler+0x4>

080023f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <UsageFault_Handler+0x4>

080023fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242a:	f000 f961 	bl	80026f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <DMA2_Stream3_IRQHandler+0x10>)
 800243a:	f000 fbb5 	bl	8002ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000024c 	.word	0x2000024c

08002448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return 1;
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_kill>:

int _kill(int pid, int sig)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002462:	f003 f8bd 	bl	80055e0 <__errno>
 8002466:	4603      	mov	r3, r0
 8002468:	2216      	movs	r2, #22
 800246a:	601a      	str	r2, [r3, #0]
  return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_exit>:

void _exit (int status)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ffe7 	bl	8002458 <_kill>
  while (1) {}    /* Make sure we hang here */
 800248a:	bf00      	nop
 800248c:	e7fd      	b.n	800248a <_exit+0x12>

0800248e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e00a      	b.n	80024b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024a0:	f3af 8000 	nop.w
 80024a4:	4601      	mov	r1, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	60ba      	str	r2, [r7, #8]
 80024ac:	b2ca      	uxtb	r2, r1
 80024ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	dbf0      	blt.n	80024a0 <_read+0x12>
  }

  return len;
 80024be:	687b      	ldr	r3, [r7, #4]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e009      	b.n	80024ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	60ba      	str	r2, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3301      	adds	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dbf1      	blt.n	80024da <_write+0x12>
  }
  return len;
 80024f6:	687b      	ldr	r3, [r7, #4]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_close>:

int _close(int file)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002528:	605a      	str	r2, [r3, #4]
  return 0;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_isatty>:

int _isatty(int file)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002540:	2301      	movs	r3, #1
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002570:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <_sbrk+0x5c>)
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <_sbrk+0x60>)
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <_sbrk+0x64>)
 8002586:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <_sbrk+0x68>)
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	429a      	cmp	r2, r3
 8002596:	d207      	bcs.n	80025a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002598:	f003 f822 	bl	80055e0 <__errno>
 800259c:	4603      	mov	r3, r0
 800259e:	220c      	movs	r2, #12
 80025a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	e009      	b.n	80025bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a8:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ae:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <_sbrk+0x64>)
 80025b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20020000 	.word	0x20020000
 80025c8:	00000400 	.word	0x00000400
 80025cc:	200002cc 	.word	0x200002cc
 80025d0:	20000420 	.word	0x20000420

080025d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <SystemInit+0x20>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	4a05      	ldr	r2, [pc, #20]	@ (80025f4 <SystemInit+0x20>)
 80025e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002630 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025fc:	f7ff ffea 	bl	80025d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480c      	ldr	r0, [pc, #48]	@ (8002634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002602:	490d      	ldr	r1, [pc, #52]	@ (8002638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0a      	ldr	r2, [pc, #40]	@ (8002640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002618:	4c0a      	ldr	r4, [pc, #40]	@ (8002644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002626:	f002 ffe1 	bl	80055ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262a:	f7ff fbf3 	bl	8001e14 <main>
  bx  lr    
 800262e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002638:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800263c:	0800ac18 	.word	0x0800ac18
  ldr r2, =_sbss
 8002640:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002644:	20000420 	.word	0x20000420

08002648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC_IRQHandler>
	...

0800264c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002650:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <HAL_Init+0x40>)
 8002656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800265a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <HAL_Init+0x40>)
 8002662:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <HAL_Init+0x40>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a07      	ldr	r2, [pc, #28]	@ (800268c <HAL_Init+0x40>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002674:	2003      	movs	r0, #3
 8002676:	f000 f94f 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267a:	200f      	movs	r0, #15
 800267c:	f000 f808 	bl	8002690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002680:	f7ff fe06 	bl	8002290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023c00 	.word	0x40023c00

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002698:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_InitTick+0x54>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_InitTick+0x58>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f967 	bl	8002982 <HAL_SYSTICK_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00e      	b.n	80026dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	d80a      	bhi.n	80026da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f000 f92f 	bl	800292e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d0:	4a06      	ldr	r2, [pc, #24]	@ (80026ec <HAL_InitTick+0x5c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000004 	.word	0x20000004
 80026e8:	2000000c 	.word	0x2000000c
 80026ec:	20000008 	.word	0x20000008

080026f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f4:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_IncTick+0x20>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <HAL_IncTick+0x24>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	4a04      	ldr	r2, [pc, #16]	@ (8002714 <HAL_IncTick+0x24>)
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000000c 	.word	0x2000000c
 8002714:	200002d0 	.word	0x200002d0

08002718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return uwTick;
 800271c:	4b03      	ldr	r3, [pc, #12]	@ (800272c <HAL_GetTick+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	200002d0 	.word	0x200002d0

08002730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff ffee 	bl	8002718 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d005      	beq.n	8002756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800274a:	4b0a      	ldr	r3, [pc, #40]	@ (8002774 <HAL_Delay+0x44>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002756:	bf00      	nop
 8002758:	f7ff ffde 	bl	8002718 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	429a      	cmp	r2, r3
 8002766:	d8f7      	bhi.n	8002758 <HAL_Delay+0x28>
  {
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000000c 	.word	0x2000000c

08002778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002794:	4013      	ands	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	@ (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c4:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <__NVIC_GetPriorityGrouping+0x18>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	f003 0307 	and.w	r3, r3, #7
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db0b      	blt.n	8002806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	4907      	ldr	r1, [pc, #28]	@ (8002814 <__NVIC_EnableIRQ+0x38>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	2001      	movs	r0, #1
 80027fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100

08002818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0a      	blt.n	8002842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	490c      	ldr	r1, [pc, #48]	@ (8002864 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	440b      	add	r3, r1
 800283c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002840:	e00a      	b.n	8002858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4908      	ldr	r1, [pc, #32]	@ (8002868 <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	440b      	add	r3, r1
 8002856:	761a      	strb	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	@ 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1c3 0307 	rsb	r3, r3, #7
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf28      	it	cs
 800288a:	2304      	movcs	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3304      	adds	r3, #4
 8002892:	2b06      	cmp	r3, #6
 8002894:	d902      	bls.n	800289c <NVIC_EncodePriority+0x30>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3b03      	subs	r3, #3
 800289a:	e000      	b.n	800289e <NVIC_EncodePriority+0x32>
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43d9      	mvns	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	4313      	orrs	r3, r2
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	@ 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e4:	d301      	bcc.n	80028ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00f      	b.n	800290a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <SysTick_Config+0x40>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f2:	210f      	movs	r1, #15
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f7ff ff8e 	bl	8002818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <SysTick_Config+0x40>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002902:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <SysTick_Config+0x40>)
 8002904:	2207      	movs	r2, #7
 8002906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000e010 	.word	0xe000e010

08002918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff29 	bl	8002778 <__NVIC_SetPriorityGrouping>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002940:	f7ff ff3e 	bl	80027c0 <__NVIC_GetPriorityGrouping>
 8002944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7ff ff8e 	bl	800286c <NVIC_EncodePriority>
 8002950:	4602      	mov	r2, r0
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff5d 	bl	8002818 <__NVIC_SetPriority>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff31 	bl	80027dc <__NVIC_EnableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa2 	bl	80028d4 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff feb6 	bl	8002718 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e099      	b.n	8002aec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d8:	e00f      	b.n	80029fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029da:	f7ff fe9d 	bl	8002718 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d908      	bls.n	80029fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2203      	movs	r2, #3
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e078      	b.n	8002aec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e8      	bne.n	80029da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4b38      	ldr	r3, [pc, #224]	@ (8002af4 <HAL_DMA_Init+0x158>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0307 	bic.w	r3, r3, #7
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d117      	bne.n	8002abe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa6f 	bl	8002f84 <DMA_CheckFifoParam>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2240      	movs	r2, #64	@ 0x40
 8002ab0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002aba:	2301      	movs	r3, #1
 8002abc:	e016      	b.n	8002aec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fa26 	bl	8002f18 <DMA_CalcBaseAndBitshift>
 8002acc:	4603      	mov	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad4:	223f      	movs	r2, #63	@ 0x3f
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	f010803f 	.word	0xf010803f

08002af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA_Start_IT+0x26>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e040      	b.n	8002ba0 <HAL_DMA_Start_IT+0xa8>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d12f      	bne.n	8002b92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f9b8 	bl	8002ebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	223f      	movs	r2, #63	@ 0x3f
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0216 	orr.w	r2, r2, #22
 8002b66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e005      	b.n	8002b9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb4:	4b8e      	ldr	r3, [pc, #568]	@ (8002df0 <HAL_DMA_IRQHandler+0x248>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a8e      	ldr	r2, [pc, #568]	@ (8002df4 <HAL_DMA_IRQHandler+0x24c>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a9b      	lsrs	r3, r3, #10
 8002bc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01a      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	2208      	movs	r2, #8
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	2201      	movs	r2, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	2201      	movs	r2, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f043 0202 	orr.w	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	2204      	movs	r2, #4
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	2210      	movs	r2, #16
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d043      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d03c      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d024      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
 8002cd6:	e01f      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01b      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e016      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0208 	bic.w	r2, r2, #8
 8002d06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 808f 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8087 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	2220      	movs	r2, #32
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d136      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0216 	bic.w	r2, r2, #22
 8002d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_DMA_IRQHandler+0x1da>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0208 	bic.w	r2, r2, #8
 8002d90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	223f      	movs	r2, #63	@ 0x3f
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d07e      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
        }
        return;
 8002dbe:	e079      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10d      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d031      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e02c      	b.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
 8002dee:	bf00      	nop
 8002df0:	20000004 	.word	0x20000004
 8002df4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d023      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
 8002e08:	e01e      	b.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10f      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0210 	bic.w	r2, r2, #16
 8002e26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d032      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2205      	movs	r2, #5
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3301      	adds	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d307      	bcc.n	8002e90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f2      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x2cc>
 8002e8e:	e000      	b.n	8002e92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
 8002eb2:	e000      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eb4:	bf00      	nop
    }
  }
}
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b40      	cmp	r3, #64	@ 0x40
 8002ee8:	d108      	bne.n	8002efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002efa:	e007      	b.n	8002f0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	3b10      	subs	r3, #16
 8002f28:	4a14      	ldr	r2, [pc, #80]	@ (8002f7c <DMA_CalcBaseAndBitshift+0x64>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f32:	4a13      	ldr	r2, [pc, #76]	@ (8002f80 <DMA_CalcBaseAndBitshift+0x68>)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d909      	bls.n	8002f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	1d1a      	adds	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f58:	e007      	b.n	8002f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	aaaaaaab 	.word	0xaaaaaaab
 8002f80:	0800a7d0 	.word	0x0800a7d0

08002f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11f      	bne.n	8002fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d856      	bhi.n	8003052 <DMA_CheckFifoParam+0xce>
 8002fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fac <DMA_CheckFifoParam+0x28>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fbd 	.word	0x08002fbd
 8002fb0:	08002fcf 	.word	0x08002fcf
 8002fb4:	08002fbd 	.word	0x08002fbd
 8002fb8:	08003053 	.word	0x08003053
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d046      	beq.n	8003056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fcc:	e043      	b.n	8003056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fd6:	d140      	bne.n	800305a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e03d      	b.n	800305a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe6:	d121      	bne.n	800302c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d837      	bhi.n	800305e <DMA_CheckFifoParam+0xda>
 8002fee:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <DMA_CheckFifoParam+0x70>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	0800300b 	.word	0x0800300b
 8002ffc:	08003005 	.word	0x08003005
 8003000:	0800301d 	.word	0x0800301d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      break;
 8003008:	e030      	b.n	800306c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d025      	beq.n	8003062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301a:	e022      	b.n	8003062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003024:	d11f      	bne.n	8003066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800302a:	e01c      	b.n	8003066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d903      	bls.n	800303a <DMA_CheckFifoParam+0xb6>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d003      	beq.n	8003040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003038:	e018      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
      break;
 800303e:	e015      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e00b      	b.n	800306a <DMA_CheckFifoParam+0xe6>
      break;
 8003052:	bf00      	nop
 8003054:	e00a      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 8003056:	bf00      	nop
 8003058:	e008      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800305a:	bf00      	nop
 800305c:	e006      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800305e:	bf00      	nop
 8003060:	e004      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 8003062:	bf00      	nop
 8003064:	e002      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;   
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800306a:	bf00      	nop
    }
  } 
  
  return status; 
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e165      	b.n	8003364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f040 8154 	bne.w	800335e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d005      	beq.n	80030ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d130      	bne.n	8003130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 0201 	and.w	r2, r3, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b03      	cmp	r3, #3
 800313a:	d017      	beq.n	800316c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d123      	bne.n	80031c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3208      	adds	r2, #8
 8003180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	08da      	lsrs	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3208      	adds	r2, #8
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80ae 	beq.w	800335e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b5d      	ldr	r3, [pc, #372]	@ (800337c <HAL_GPIO_Init+0x300>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	4a5c      	ldr	r2, [pc, #368]	@ (800337c <HAL_GPIO_Init+0x300>)
 800320c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003210:	6453      	str	r3, [r2, #68]	@ 0x44
 8003212:	4b5a      	ldr	r3, [pc, #360]	@ (800337c <HAL_GPIO_Init+0x300>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800321e:	4a58      	ldr	r2, [pc, #352]	@ (8003380 <HAL_GPIO_Init+0x304>)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4f      	ldr	r2, [pc, #316]	@ (8003384 <HAL_GPIO_Init+0x308>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d025      	beq.n	8003296 <HAL_GPIO_Init+0x21a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4e      	ldr	r2, [pc, #312]	@ (8003388 <HAL_GPIO_Init+0x30c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01f      	beq.n	8003292 <HAL_GPIO_Init+0x216>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4d      	ldr	r2, [pc, #308]	@ (800338c <HAL_GPIO_Init+0x310>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d019      	beq.n	800328e <HAL_GPIO_Init+0x212>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4c      	ldr	r2, [pc, #304]	@ (8003390 <HAL_GPIO_Init+0x314>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0x20e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4b      	ldr	r2, [pc, #300]	@ (8003394 <HAL_GPIO_Init+0x318>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00d      	beq.n	8003286 <HAL_GPIO_Init+0x20a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4a      	ldr	r2, [pc, #296]	@ (8003398 <HAL_GPIO_Init+0x31c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x206>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a49      	ldr	r2, [pc, #292]	@ (800339c <HAL_GPIO_Init+0x320>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_GPIO_Init+0x202>
 800327a:	2306      	movs	r3, #6
 800327c:	e00c      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 800327e:	2307      	movs	r3, #7
 8003280:	e00a      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 8003282:	2305      	movs	r3, #5
 8003284:	e008      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 8003286:	2304      	movs	r3, #4
 8003288:	e006      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 800328a:	2303      	movs	r3, #3
 800328c:	e004      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 800328e:	2302      	movs	r3, #2
 8003290:	e002      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 8003296:	2300      	movs	r3, #0
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	f002 0203 	and.w	r2, r2, #3
 800329e:	0092      	lsls	r2, r2, #2
 80032a0:	4093      	lsls	r3, r2
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a8:	4935      	ldr	r1, [pc, #212]	@ (8003380 <HAL_GPIO_Init+0x304>)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b6:	4b3a      	ldr	r3, [pc, #232]	@ (80033a0 <HAL_GPIO_Init+0x324>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032da:	4a31      	ldr	r2, [pc, #196]	@ (80033a0 <HAL_GPIO_Init+0x324>)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e0:	4b2f      	ldr	r3, [pc, #188]	@ (80033a0 <HAL_GPIO_Init+0x324>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003304:	4a26      	ldr	r2, [pc, #152]	@ (80033a0 <HAL_GPIO_Init+0x324>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800330a:	4b25      	ldr	r3, [pc, #148]	@ (80033a0 <HAL_GPIO_Init+0x324>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800332e:	4a1c      	ldr	r2, [pc, #112]	@ (80033a0 <HAL_GPIO_Init+0x324>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <HAL_GPIO_Init+0x324>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003358:	4a11      	ldr	r2, [pc, #68]	@ (80033a0 <HAL_GPIO_Init+0x324>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3301      	adds	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	f67f ae96 	bls.w	8003098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	3724      	adds	r7, #36	@ 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	40013800 	.word	0x40013800
 8003384:	40020000 	.word	0x40020000
 8003388:	40020400 	.word	0x40020400
 800338c:	40020800 	.word	0x40020800
 8003390:	40020c00 	.word	0x40020c00
 8003394:	40021000 	.word	0x40021000
 8003398:	40021400 	.word	0x40021400
 800339c:	40021800 	.word	0x40021800
 80033a0:	40013c00 	.word	0x40013c00

080033a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
 80033b0:	4613      	mov	r3, r2
 80033b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033c0:	e003      	b.n	80033ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	041a      	lsls	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	619a      	str	r2, [r3, #24]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0cc      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b68      	ldr	r3, [pc, #416]	@ (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d90c      	bls.n	8003414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b65      	ldr	r3, [pc, #404]	@ (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b63      	ldr	r3, [pc, #396]	@ (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0b8      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800342c:	4b59      	ldr	r3, [pc, #356]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a58      	ldr	r2, [pc, #352]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003436:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003444:	4b53      	ldr	r3, [pc, #332]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a52      	ldr	r2, [pc, #328]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800344e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003450:	4b50      	ldr	r3, [pc, #320]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	494d      	ldr	r1, [pc, #308]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d044      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	4b47      	ldr	r3, [pc, #284]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d119      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e07f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d003      	beq.n	8003496 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003492:	2b03      	cmp	r3, #3
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003496:	4b3f      	ldr	r3, [pc, #252]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e067      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b6:	4b37      	ldr	r3, [pc, #220]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f023 0203 	bic.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4934      	ldr	r1, [pc, #208]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c8:	f7ff f926 	bl	8002718 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d0:	f7ff f922 	bl	8002718 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e04f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 020c 	and.w	r2, r3, #12
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d1eb      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f8:	4b25      	ldr	r3, [pc, #148]	@ (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d20c      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b22      	ldr	r3, [pc, #136]	@ (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b20      	ldr	r3, [pc, #128]	@ (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e032      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4916      	ldr	r1, [pc, #88]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354a:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	490e      	ldr	r1, [pc, #56]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800355e:	f000 f821 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 8003562:	4602      	mov	r2, r0
 8003564:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	490a      	ldr	r1, [pc, #40]	@ (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	5ccb      	ldrb	r3, [r1, r3]
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	4a09      	ldr	r2, [pc, #36]	@ (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800357a:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff f886 	bl	8002690 <HAL_InitTick>

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023c00 	.word	0x40023c00
 8003594:	40023800 	.word	0x40023800
 8003598:	0800a7c0 	.word	0x0800a7c0
 800359c:	20000004 	.word	0x20000004
 80035a0:	20000008 	.word	0x20000008

080035a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a8:	b0a6      	sub	sp, #152	@ 0x98
 80035aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ca:	4bc8      	ldr	r3, [pc, #800]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	f200 817e 	bhi.w	80038d4 <HAL_RCC_GetSysClockFreq+0x330>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003615 	.word	0x08003615
 80035e4:	080038d5 	.word	0x080038d5
 80035e8:	080038d5 	.word	0x080038d5
 80035ec:	080038d5 	.word	0x080038d5
 80035f0:	0800361d 	.word	0x0800361d
 80035f4:	080038d5 	.word	0x080038d5
 80035f8:	080038d5 	.word	0x080038d5
 80035fc:	080038d5 	.word	0x080038d5
 8003600:	08003625 	.word	0x08003625
 8003604:	080038d5 	.word	0x080038d5
 8003608:	080038d5 	.word	0x080038d5
 800360c:	080038d5 	.word	0x080038d5
 8003610:	0800378f 	.word	0x0800378f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4bb6      	ldr	r3, [pc, #728]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800361a:	e15f      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361c:	4bb5      	ldr	r3, [pc, #724]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800361e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003622:	e15b      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003624:	4bb1      	ldr	r3, [pc, #708]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800362c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003630:	4bae      	ldr	r3, [pc, #696]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d031      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363c:	4bab      	ldr	r3, [pc, #684]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	2200      	movs	r2, #0
 8003644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003646:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003650:	2300      	movs	r3, #0
 8003652:	667b      	str	r3, [r7, #100]	@ 0x64
 8003654:	4ba7      	ldr	r3, [pc, #668]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003656:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800365a:	462a      	mov	r2, r5
 800365c:	fb03 f202 	mul.w	r2, r3, r2
 8003660:	2300      	movs	r3, #0
 8003662:	4621      	mov	r1, r4
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	4aa2      	ldr	r2, [pc, #648]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800366c:	4621      	mov	r1, r4
 800366e:	fba1 1202 	umull	r1, r2, r1, r2
 8003672:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003674:	460a      	mov	r2, r1
 8003676:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003678:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800367a:	4413      	add	r3, r2
 800367c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800367e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003682:	2200      	movs	r2, #0
 8003684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003686:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003688:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800368c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003690:	f7fd fb1a 	bl	8000cc8 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4613      	mov	r3, r2
 800369a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800369e:	e064      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a0:	4b92      	ldr	r3, [pc, #584]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	2200      	movs	r2, #0
 80036a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80036aa:	657a      	str	r2, [r7, #84]	@ 0x54
 80036ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b4:	2300      	movs	r3, #0
 80036b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80036bc:	4622      	mov	r2, r4
 80036be:	462b      	mov	r3, r5
 80036c0:	f04f 0000 	mov.w	r0, #0
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	0159      	lsls	r1, r3, #5
 80036ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ce:	0150      	lsls	r0, r2, #5
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4621      	mov	r1, r4
 80036d6:	1a51      	subs	r1, r2, r1
 80036d8:	6139      	str	r1, [r7, #16]
 80036da:	4629      	mov	r1, r5
 80036dc:	eb63 0301 	sbc.w	r3, r3, r1
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036ee:	4659      	mov	r1, fp
 80036f0:	018b      	lsls	r3, r1, #6
 80036f2:	4651      	mov	r1, sl
 80036f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036f8:	4651      	mov	r1, sl
 80036fa:	018a      	lsls	r2, r1, #6
 80036fc:	4651      	mov	r1, sl
 80036fe:	ebb2 0801 	subs.w	r8, r2, r1
 8003702:	4659      	mov	r1, fp
 8003704:	eb63 0901 	sbc.w	r9, r3, r1
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003714:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003718:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800371c:	4690      	mov	r8, r2
 800371e:	4699      	mov	r9, r3
 8003720:	4623      	mov	r3, r4
 8003722:	eb18 0303 	adds.w	r3, r8, r3
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	462b      	mov	r3, r5
 800372a:	eb49 0303 	adc.w	r3, r9, r3
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800373c:	4629      	mov	r1, r5
 800373e:	028b      	lsls	r3, r1, #10
 8003740:	4621      	mov	r1, r4
 8003742:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003746:	4621      	mov	r1, r4
 8003748:	028a      	lsls	r2, r1, #10
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003752:	2200      	movs	r2, #0
 8003754:	643b      	str	r3, [r7, #64]	@ 0x40
 8003756:	647a      	str	r2, [r7, #68]	@ 0x44
 8003758:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800375c:	f7fd fab4 	bl	8000cc8 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4613      	mov	r3, r2
 8003766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800376a:	4b60      	ldr	r3, [pc, #384]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	3301      	adds	r3, #1
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800377c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003780:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800378c:	e0a6      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800378e:	4b57      	ldr	r3, [pc, #348]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379a:	4b54      	ldr	r3, [pc, #336]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02a      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	4b51      	ldr	r3, [pc, #324]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	2200      	movs	r2, #0
 80037ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037b8:	2100      	movs	r1, #0
 80037ba:	4b4e      	ldr	r3, [pc, #312]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80037bc:	fb03 f201 	mul.w	r2, r3, r1
 80037c0:	2300      	movs	r3, #0
 80037c2:	fb00 f303 	mul.w	r3, r0, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	4a4a      	ldr	r2, [pc, #296]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80037ca:	fba0 1202 	umull	r1, r2, r0, r2
 80037ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80037d0:	460a      	mov	r2, r1
 80037d2:	673a      	str	r2, [r7, #112]	@ 0x70
 80037d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037d6:	4413      	add	r3, r2
 80037d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80037da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037de:	2200      	movs	r2, #0
 80037e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80037e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80037e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80037ec:	f7fd fa6c 	bl	8000cc8 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037fa:	e05b      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fc:	4b3b      	ldr	r3, [pc, #236]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	2200      	movs	r2, #0
 8003804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380e:	623b      	str	r3, [r7, #32]
 8003810:	2300      	movs	r3, #0
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
 8003814:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003818:	4642      	mov	r2, r8
 800381a:	464b      	mov	r3, r9
 800381c:	f04f 0000 	mov.w	r0, #0
 8003820:	f04f 0100 	mov.w	r1, #0
 8003824:	0159      	lsls	r1, r3, #5
 8003826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800382a:	0150      	lsls	r0, r2, #5
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4641      	mov	r1, r8
 8003832:	ebb2 0a01 	subs.w	sl, r2, r1
 8003836:	4649      	mov	r1, r9
 8003838:	eb63 0b01 	sbc.w	fp, r3, r1
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003848:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800384c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003850:	ebb2 040a 	subs.w	r4, r2, sl
 8003854:	eb63 050b 	sbc.w	r5, r3, fp
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	00eb      	lsls	r3, r5, #3
 8003862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003866:	00e2      	lsls	r2, r4, #3
 8003868:	4614      	mov	r4, r2
 800386a:	461d      	mov	r5, r3
 800386c:	4643      	mov	r3, r8
 800386e:	18e3      	adds	r3, r4, r3
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	464b      	mov	r3, r9
 8003874:	eb45 0303 	adc.w	r3, r5, r3
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003886:	4629      	mov	r1, r5
 8003888:	028b      	lsls	r3, r1, #10
 800388a:	4621      	mov	r1, r4
 800388c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003890:	4621      	mov	r1, r4
 8003892:	028a      	lsls	r2, r1, #10
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800389c:	2200      	movs	r2, #0
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	61fa      	str	r2, [r7, #28]
 80038a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a6:	f7fd fa0f 	bl	8000cc8 <__aeabi_uldivmod>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4613      	mov	r3, r2
 80038b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038b4:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x348>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	0f1b      	lsrs	r3, r3, #28
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80038c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80038d2:	e003      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d4:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80038d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80038da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3798      	adds	r7, #152	@ 0x98
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	017d7840 	.word	0x017d7840

080038f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e28d      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8083 	beq.w	8003a1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003918:	4b94      	ldr	r3, [pc, #592]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b04      	cmp	r3, #4
 8003922:	d019      	beq.n	8003958 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003924:	4b91      	ldr	r3, [pc, #580]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
        || \
 800392c:	2b08      	cmp	r3, #8
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003930:	4b8e      	ldr	r3, [pc, #568]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800393c:	d00c      	beq.n	8003958 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b8b      	ldr	r3, [pc, #556]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d112      	bne.n	8003970 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394a:	4b88      	ldr	r3, [pc, #544]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003956:	d10b      	bne.n	8003970 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	4b84      	ldr	r3, [pc, #528]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05b      	beq.n	8003a1c <HAL_RCC_OscConfig+0x124>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d157      	bne.n	8003a1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e25a      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x90>
 800397a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7b      	ldr	r2, [pc, #492]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e01d      	b.n	80039c4 <HAL_RCC_OscConfig+0xcc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0xb4>
 8003992:	4b76      	ldr	r3, [pc, #472]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a75      	ldr	r2, [pc, #468]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b73      	ldr	r3, [pc, #460]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a72      	ldr	r2, [pc, #456]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e00b      	b.n	80039c4 <HAL_RCC_OscConfig+0xcc>
 80039ac:	4b6f      	ldr	r3, [pc, #444]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b6c      	ldr	r3, [pc, #432]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a6b      	ldr	r2, [pc, #428]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe fea4 	bl	8002718 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fe fea0 	bl	8002718 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	@ 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e21f      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b61      	ldr	r3, [pc, #388]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0xdc>
 80039f2:	e014      	b.n	8003a1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fe fe90 	bl	8002718 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe fe8c 	bl	8002718 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	@ 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e20b      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	4b57      	ldr	r3, [pc, #348]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x104>
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d06f      	beq.n	8003b0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a2a:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d017      	beq.n	8003a66 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a36:	4b4d      	ldr	r3, [pc, #308]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d105      	bne.n	8003a4e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a42:	4b4a      	ldr	r3, [pc, #296]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4e:	4b47      	ldr	r3, [pc, #284]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d11c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5a:	4b44      	ldr	r3, [pc, #272]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	4b41      	ldr	r3, [pc, #260]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x186>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e1d3      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4937      	ldr	r1, [pc, #220]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a92:	e03a      	b.n	8003b0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9c:	4b34      	ldr	r3, [pc, #208]	@ (8003b70 <HAL_RCC_OscConfig+0x278>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fe fe39 	bl	8002718 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fe fe35 	bl	8002718 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e1b4      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b28      	ldr	r3, [pc, #160]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4925      	ldr	r1, [pc, #148]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ade:	4b24      	ldr	r3, [pc, #144]	@ (8003b70 <HAL_RCC_OscConfig+0x278>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fe18 	bl	8002718 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fe fe14 	bl	8002718 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e193      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	4b1b      	ldr	r3, [pc, #108]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d036      	beq.n	8003b84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fe fdf8 	bl	8002718 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fe fdf4 	bl	8002718 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e173      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x234>
 8003b4a:	e01b      	b.n	8003b84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4c:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b52:	f7fe fde1 	bl	8002718 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	e00e      	b.n	8003b78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5a:	f7fe fddd 	bl	8002718 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d907      	bls.n	8003b78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e15c      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	42470000 	.word	0x42470000
 8003b74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	4b8a      	ldr	r3, [pc, #552]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ea      	bne.n	8003b5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8097 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b96:	4b83      	ldr	r3, [pc, #524]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	4a7e      	ldr	r2, [pc, #504]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b79      	ldr	r3, [pc, #484]	@ (8003da8 <HAL_RCC_OscConfig+0x4b0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d118      	bne.n	8003c00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bce:	4b76      	ldr	r3, [pc, #472]	@ (8003da8 <HAL_RCC_OscConfig+0x4b0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a75      	ldr	r2, [pc, #468]	@ (8003da8 <HAL_RCC_OscConfig+0x4b0>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bda:	f7fe fd9d 	bl	8002718 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7fe fd99 	bl	8002718 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e118      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8003da8 <HAL_RCC_OscConfig+0x4b0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x31e>
 8003c08:	4b66      	ldr	r3, [pc, #408]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0c:	4a65      	ldr	r2, [pc, #404]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c14:	e01c      	b.n	8003c50 <HAL_RCC_OscConfig+0x358>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x340>
 8003c1e:	4b61      	ldr	r3, [pc, #388]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	4a60      	ldr	r2, [pc, #384]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0x358>
 8003c38:	4b5a      	ldr	r3, [pc, #360]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3c:	4a59      	ldr	r2, [pc, #356]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c44:	4b57      	ldr	r3, [pc, #348]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	4a56      	ldr	r2, [pc, #344]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c4a:	f023 0304 	bic.w	r3, r3, #4
 8003c4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d015      	beq.n	8003c84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fe fd5e 	bl	8002718 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fe fd5a 	bl	8002718 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0d7      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	4b4b      	ldr	r3, [pc, #300]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ee      	beq.n	8003c60 <HAL_RCC_OscConfig+0x368>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fe fd48 	bl	8002718 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8c:	f7fe fd44 	bl	8002718 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0c1      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca2:	4b40      	ldr	r3, [pc, #256]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ee      	bne.n	8003c8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80ad 	beq.w	8003e24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cca:	4b36      	ldr	r3, [pc, #216]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d060      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d145      	bne.n	8003d6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b33      	ldr	r3, [pc, #204]	@ (8003dac <HAL_RCC_OscConfig+0x4b4>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fd18 	bl	8002718 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe fd14 	bl	8002718 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e093      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	4b29      	ldr	r3, [pc, #164]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	071b      	lsls	r3, r3, #28
 8003d36:	491b      	ldr	r1, [pc, #108]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <HAL_RCC_OscConfig+0x4b4>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fe fce9 	bl	8002718 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fe fce5 	bl	8002718 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e064      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5c:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x452>
 8003d68:	e05c      	b.n	8003e24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <HAL_RCC_OscConfig+0x4b4>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe fcd2 	bl	8002718 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe fcce 	bl	8002718 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e04d      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x480>
 8003d96:	e045      	b.n	8003e24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e040      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40007000 	.word	0x40007000
 8003dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e30 <HAL_RCC_OscConfig+0x538>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d030      	beq.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d129      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d122      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003de0:	4013      	ands	r3, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d119      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d10f      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800

08003e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e07b      	b.n	8003f3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d108      	bne.n	8003e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e56:	d009      	beq.n	8003e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]
 8003e5e:	e005      	b.n	8003e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fe fa2a 	bl	80022e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef0:	ea42 0103 	orr.w	r1, r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	f003 0104 	and.w	r1, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	f003 0210 	and.w	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b088      	sub	sp, #32
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f56:	f7fe fbdf 	bl	8002718 <HAL_GetTick>
 8003f5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d001      	beq.n	8003f70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e12a      	b.n	80041c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_SPI_Transmit+0x36>
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e122      	b.n	80041c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_SPI_Transmit+0x48>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e11b      	b.n	80041c6 <HAL_SPI_Transmit+0x280>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fdc:	d10f      	bne.n	8003ffe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ffc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	2b40      	cmp	r3, #64	@ 0x40
 800400a:	d007      	beq.n	800401c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800401a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004024:	d152      	bne.n	80040cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_SPI_Transmit+0xee>
 800402e:	8b7b      	ldrh	r3, [r7, #26]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d145      	bne.n	80040c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	881a      	ldrh	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004044:	1c9a      	adds	r2, r3, #2
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004058:	e032      	b.n	80040c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d112      	bne.n	800408e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800408c:	e018      	b.n	80040c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800408e:	f7fe fb43 	bl	8002718 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d803      	bhi.n	80040a6 <HAL_SPI_Transmit+0x160>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d102      	bne.n	80040ac <HAL_SPI_Transmit+0x166>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e082      	b.n	80041c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1c7      	bne.n	800405a <HAL_SPI_Transmit+0x114>
 80040ca:	e053      	b.n	8004174 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_Transmit+0x194>
 80040d4:	8b7b      	ldrh	r3, [r7, #26]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d147      	bne.n	800416a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004100:	e033      	b.n	800416a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b02      	cmp	r3, #2
 800410e:	d113      	bne.n	8004138 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	7812      	ldrb	r2, [r2, #0]
 800411c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004136:	e018      	b.n	800416a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004138:	f7fe faee 	bl	8002718 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d803      	bhi.n	8004150 <HAL_SPI_Transmit+0x20a>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d102      	bne.n	8004156 <HAL_SPI_Transmit+0x210>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e02d      	b.n	80041c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1c6      	bne.n	8004102 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	6839      	ldr	r1, [r7, #0]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f9f9 	bl	8004570 <SPI_EndRxTxTransaction>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80041c4:	2300      	movs	r3, #0
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
 80041ec:	e097      	b.n	800431e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_SPI_Transmit_DMA+0x2a>
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e08f      	b.n	800431e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_SPI_Transmit_DMA+0x3c>
 8004208:	2302      	movs	r3, #2
 800420a:	e088      	b.n	800431e <HAL_SPI_Transmit_DMA+0x14e>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2203      	movs	r2, #3
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800425a:	d10f      	bne.n	800427c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800426a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800427a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004280:	4a29      	ldr	r2, [pc, #164]	@ (8004328 <HAL_SPI_Transmit_DMA+0x158>)
 8004282:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004288:	4a28      	ldr	r2, [pc, #160]	@ (800432c <HAL_SPI_Transmit_DMA+0x15c>)
 800428a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004290:	4a27      	ldr	r2, [pc, #156]	@ (8004330 <HAL_SPI_Transmit_DMA+0x160>)
 8004292:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004298:	2200      	movs	r2, #0
 800429a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	4619      	mov	r1, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042b4:	f7fe fc20 	bl	8002af8 <HAL_DMA_Start_IT>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c2:	f043 0210 	orr.w	r2, r3, #16
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e023      	b.n	800431e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b40      	cmp	r3, #64	@ 0x40
 80042e2:	d007      	beq.n	80042f4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042f2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0220 	orr.w	r2, r2, #32
 800430a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0202 	orr.w	r2, r2, #2
 800431a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	08004405 	.word	0x08004405
 800432c:	0800435d 	.word	0x0800435d
 8004330:	08004421 	.word	0x08004421

08004334 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004368:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800436a:	f7fe f9d5 	bl	8002718 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800437e:	d03b      	beq.n	80043f8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0220 	bic.w	r2, r2, #32
 800438e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0202 	bic.w	r2, r2, #2
 800439e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	2164      	movs	r1, #100	@ 0x64
 80043a4:	6978      	ldr	r0, [r7, #20]
 80043a6:	f000 f8e3 	bl	8004570 <SPI_EndRxTxTransaction>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b4:	f043 0220 	orr.w	r2, r3, #32
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80043f0:	6978      	ldr	r0, [r7, #20]
 80043f2:	f7ff ffa9 	bl	8004348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80043f6:	e002      	b.n	80043fe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	f7fd f895 	bl	8001528 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004410:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff ff8e 	bl	8004334 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0203 	bic.w	r2, r2, #3
 800443c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004442:	f043 0210 	orr.w	r2, r3, #16
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff ff78 	bl	8004348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004470:	f7fe f952 	bl	8002718 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4413      	add	r3, r2
 800447e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004480:	f7fe f94a 	bl	8002718 <HAL_GetTick>
 8004484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004486:	4b39      	ldr	r3, [pc, #228]	@ (800456c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	015b      	lsls	r3, r3, #5
 800448c:	0d1b      	lsrs	r3, r3, #20
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	fb02 f303 	mul.w	r3, r2, r3
 8004494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004496:	e054      	b.n	8004542 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d050      	beq.n	8004542 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a0:	f7fe f93a 	bl	8002718 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d902      	bls.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d13d      	bne.n	8004532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ce:	d111      	bne.n	80044f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044d8:	d004      	beq.n	80044e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e2:	d107      	bne.n	80044f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044fc:	d10f      	bne.n	800451e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800451c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e017      	b.n	8004562 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	3b01      	subs	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	bf0c      	ite	eq
 8004552:	2301      	moveq	r3, #1
 8004554:	2300      	movne	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	429a      	cmp	r2, r3
 800455e:	d19b      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000004 	.word	0x20000004

08004570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2201      	movs	r2, #1
 8004584:	2102      	movs	r1, #2
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff ff6a 	bl	8004460 <SPI_WaitFlagStateUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e032      	b.n	8004608 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <SPI_EndRxTxTransaction+0xa0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004614 <SPI_EndRxTxTransaction+0xa4>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	0d5b      	lsrs	r3, r3, #21
 80045ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045c0:	d112      	bne.n	80045e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	2180      	movs	r1, #128	@ 0x80
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff ff47 	bl	8004460 <SPI_WaitFlagStateUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d016      	beq.n	8004606 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e00f      	b.n	8004608 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fe:	2b80      	cmp	r3, #128	@ 0x80
 8004600:	d0f2      	beq.n	80045e8 <SPI_EndRxTxTransaction+0x78>
 8004602:	e000      	b.n	8004606 <SPI_EndRxTxTransaction+0x96>
        break;
 8004604:	bf00      	nop
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000004 	.word	0x20000004
 8004614:	165e9f81 	.word	0x165e9f81

08004618 <__cvt>:
 8004618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	ec57 6b10 	vmov	r6, r7, d0
 8004620:	2f00      	cmp	r7, #0
 8004622:	460c      	mov	r4, r1
 8004624:	4619      	mov	r1, r3
 8004626:	463b      	mov	r3, r7
 8004628:	bfbb      	ittet	lt
 800462a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800462e:	461f      	movlt	r7, r3
 8004630:	2300      	movge	r3, #0
 8004632:	232d      	movlt	r3, #45	@ 0x2d
 8004634:	700b      	strb	r3, [r1, #0]
 8004636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004638:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800463c:	4691      	mov	r9, r2
 800463e:	f023 0820 	bic.w	r8, r3, #32
 8004642:	bfbc      	itt	lt
 8004644:	4632      	movlt	r2, r6
 8004646:	4616      	movlt	r6, r2
 8004648:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800464c:	d005      	beq.n	800465a <__cvt+0x42>
 800464e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004652:	d100      	bne.n	8004656 <__cvt+0x3e>
 8004654:	3401      	adds	r4, #1
 8004656:	2102      	movs	r1, #2
 8004658:	e000      	b.n	800465c <__cvt+0x44>
 800465a:	2103      	movs	r1, #3
 800465c:	ab03      	add	r3, sp, #12
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	ab02      	add	r3, sp, #8
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	ec47 6b10 	vmov	d0, r6, r7
 8004668:	4653      	mov	r3, sl
 800466a:	4622      	mov	r2, r4
 800466c:	f001 f874 	bl	8005758 <_dtoa_r>
 8004670:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004674:	4605      	mov	r5, r0
 8004676:	d119      	bne.n	80046ac <__cvt+0x94>
 8004678:	f019 0f01 	tst.w	r9, #1
 800467c:	d00e      	beq.n	800469c <__cvt+0x84>
 800467e:	eb00 0904 	add.w	r9, r0, r4
 8004682:	2200      	movs	r2, #0
 8004684:	2300      	movs	r3, #0
 8004686:	4630      	mov	r0, r6
 8004688:	4639      	mov	r1, r7
 800468a:	f7fc fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800468e:	b108      	cbz	r0, 8004694 <__cvt+0x7c>
 8004690:	f8cd 900c 	str.w	r9, [sp, #12]
 8004694:	2230      	movs	r2, #48	@ 0x30
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	454b      	cmp	r3, r9
 800469a:	d31e      	bcc.n	80046da <__cvt+0xc2>
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046a0:	1b5b      	subs	r3, r3, r5
 80046a2:	4628      	mov	r0, r5
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	b004      	add	sp, #16
 80046a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046b0:	eb00 0904 	add.w	r9, r0, r4
 80046b4:	d1e5      	bne.n	8004682 <__cvt+0x6a>
 80046b6:	7803      	ldrb	r3, [r0, #0]
 80046b8:	2b30      	cmp	r3, #48	@ 0x30
 80046ba:	d10a      	bne.n	80046d2 <__cvt+0xba>
 80046bc:	2200      	movs	r2, #0
 80046be:	2300      	movs	r3, #0
 80046c0:	4630      	mov	r0, r6
 80046c2:	4639      	mov	r1, r7
 80046c4:	f7fc fa20 	bl	8000b08 <__aeabi_dcmpeq>
 80046c8:	b918      	cbnz	r0, 80046d2 <__cvt+0xba>
 80046ca:	f1c4 0401 	rsb	r4, r4, #1
 80046ce:	f8ca 4000 	str.w	r4, [sl]
 80046d2:	f8da 3000 	ldr.w	r3, [sl]
 80046d6:	4499      	add	r9, r3
 80046d8:	e7d3      	b.n	8004682 <__cvt+0x6a>
 80046da:	1c59      	adds	r1, r3, #1
 80046dc:	9103      	str	r1, [sp, #12]
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	e7d9      	b.n	8004696 <__cvt+0x7e>

080046e2 <__exponent>:
 80046e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046e4:	2900      	cmp	r1, #0
 80046e6:	bfba      	itte	lt
 80046e8:	4249      	neglt	r1, r1
 80046ea:	232d      	movlt	r3, #45	@ 0x2d
 80046ec:	232b      	movge	r3, #43	@ 0x2b
 80046ee:	2909      	cmp	r1, #9
 80046f0:	7002      	strb	r2, [r0, #0]
 80046f2:	7043      	strb	r3, [r0, #1]
 80046f4:	dd29      	ble.n	800474a <__exponent+0x68>
 80046f6:	f10d 0307 	add.w	r3, sp, #7
 80046fa:	461d      	mov	r5, r3
 80046fc:	270a      	movs	r7, #10
 80046fe:	461a      	mov	r2, r3
 8004700:	fbb1 f6f7 	udiv	r6, r1, r7
 8004704:	fb07 1416 	mls	r4, r7, r6, r1
 8004708:	3430      	adds	r4, #48	@ 0x30
 800470a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800470e:	460c      	mov	r4, r1
 8004710:	2c63      	cmp	r4, #99	@ 0x63
 8004712:	f103 33ff 	add.w	r3, r3, #4294967295
 8004716:	4631      	mov	r1, r6
 8004718:	dcf1      	bgt.n	80046fe <__exponent+0x1c>
 800471a:	3130      	adds	r1, #48	@ 0x30
 800471c:	1e94      	subs	r4, r2, #2
 800471e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004722:	1c41      	adds	r1, r0, #1
 8004724:	4623      	mov	r3, r4
 8004726:	42ab      	cmp	r3, r5
 8004728:	d30a      	bcc.n	8004740 <__exponent+0x5e>
 800472a:	f10d 0309 	add.w	r3, sp, #9
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	42ac      	cmp	r4, r5
 8004732:	bf88      	it	hi
 8004734:	2300      	movhi	r3, #0
 8004736:	3302      	adds	r3, #2
 8004738:	4403      	add	r3, r0
 800473a:	1a18      	subs	r0, r3, r0
 800473c:	b003      	add	sp, #12
 800473e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004740:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004744:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004748:	e7ed      	b.n	8004726 <__exponent+0x44>
 800474a:	2330      	movs	r3, #48	@ 0x30
 800474c:	3130      	adds	r1, #48	@ 0x30
 800474e:	7083      	strb	r3, [r0, #2]
 8004750:	70c1      	strb	r1, [r0, #3]
 8004752:	1d03      	adds	r3, r0, #4
 8004754:	e7f1      	b.n	800473a <__exponent+0x58>
	...

08004758 <_printf_float>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	b08d      	sub	sp, #52	@ 0x34
 800475e:	460c      	mov	r4, r1
 8004760:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004764:	4616      	mov	r6, r2
 8004766:	461f      	mov	r7, r3
 8004768:	4605      	mov	r5, r0
 800476a:	f000 feef 	bl	800554c <_localeconv_r>
 800476e:	6803      	ldr	r3, [r0, #0]
 8004770:	9304      	str	r3, [sp, #16]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fb fd9c 	bl	80002b0 <strlen>
 8004778:	2300      	movs	r3, #0
 800477a:	930a      	str	r3, [sp, #40]	@ 0x28
 800477c:	f8d8 3000 	ldr.w	r3, [r8]
 8004780:	9005      	str	r0, [sp, #20]
 8004782:	3307      	adds	r3, #7
 8004784:	f023 0307 	bic.w	r3, r3, #7
 8004788:	f103 0208 	add.w	r2, r3, #8
 800478c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004790:	f8d4 b000 	ldr.w	fp, [r4]
 8004794:	f8c8 2000 	str.w	r2, [r8]
 8004798:	e9d3 8900 	ldrd	r8, r9, [r3]
 800479c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80047a0:	9307      	str	r3, [sp, #28]
 80047a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80047a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80047aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004a20 <_printf_float+0x2c8>)
 80047b0:	f04f 32ff 	mov.w	r2, #4294967295
 80047b4:	f7fc f9da 	bl	8000b6c <__aeabi_dcmpun>
 80047b8:	bb70      	cbnz	r0, 8004818 <_printf_float+0xc0>
 80047ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047be:	4b98      	ldr	r3, [pc, #608]	@ (8004a20 <_printf_float+0x2c8>)
 80047c0:	f04f 32ff 	mov.w	r2, #4294967295
 80047c4:	f7fc f9b4 	bl	8000b30 <__aeabi_dcmple>
 80047c8:	bb30      	cbnz	r0, 8004818 <_printf_float+0xc0>
 80047ca:	2200      	movs	r2, #0
 80047cc:	2300      	movs	r3, #0
 80047ce:	4640      	mov	r0, r8
 80047d0:	4649      	mov	r1, r9
 80047d2:	f7fc f9a3 	bl	8000b1c <__aeabi_dcmplt>
 80047d6:	b110      	cbz	r0, 80047de <_printf_float+0x86>
 80047d8:	232d      	movs	r3, #45	@ 0x2d
 80047da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047de:	4a91      	ldr	r2, [pc, #580]	@ (8004a24 <_printf_float+0x2cc>)
 80047e0:	4b91      	ldr	r3, [pc, #580]	@ (8004a28 <_printf_float+0x2d0>)
 80047e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80047e6:	bf94      	ite	ls
 80047e8:	4690      	movls	r8, r2
 80047ea:	4698      	movhi	r8, r3
 80047ec:	2303      	movs	r3, #3
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	f02b 0304 	bic.w	r3, fp, #4
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	f04f 0900 	mov.w	r9, #0
 80047fa:	9700      	str	r7, [sp, #0]
 80047fc:	4633      	mov	r3, r6
 80047fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004800:	4621      	mov	r1, r4
 8004802:	4628      	mov	r0, r5
 8004804:	f000 f9d2 	bl	8004bac <_printf_common>
 8004808:	3001      	adds	r0, #1
 800480a:	f040 808d 	bne.w	8004928 <_printf_float+0x1d0>
 800480e:	f04f 30ff 	mov.w	r0, #4294967295
 8004812:	b00d      	add	sp, #52	@ 0x34
 8004814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004818:	4642      	mov	r2, r8
 800481a:	464b      	mov	r3, r9
 800481c:	4640      	mov	r0, r8
 800481e:	4649      	mov	r1, r9
 8004820:	f7fc f9a4 	bl	8000b6c <__aeabi_dcmpun>
 8004824:	b140      	cbz	r0, 8004838 <_printf_float+0xe0>
 8004826:	464b      	mov	r3, r9
 8004828:	2b00      	cmp	r3, #0
 800482a:	bfbc      	itt	lt
 800482c:	232d      	movlt	r3, #45	@ 0x2d
 800482e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004832:	4a7e      	ldr	r2, [pc, #504]	@ (8004a2c <_printf_float+0x2d4>)
 8004834:	4b7e      	ldr	r3, [pc, #504]	@ (8004a30 <_printf_float+0x2d8>)
 8004836:	e7d4      	b.n	80047e2 <_printf_float+0x8a>
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800483e:	9206      	str	r2, [sp, #24]
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	d13b      	bne.n	80048bc <_printf_float+0x164>
 8004844:	2306      	movs	r3, #6
 8004846:	6063      	str	r3, [r4, #4]
 8004848:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800484c:	2300      	movs	r3, #0
 800484e:	6022      	str	r2, [r4, #0]
 8004850:	9303      	str	r3, [sp, #12]
 8004852:	ab0a      	add	r3, sp, #40	@ 0x28
 8004854:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004858:	ab09      	add	r3, sp, #36	@ 0x24
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	6861      	ldr	r1, [r4, #4]
 800485e:	ec49 8b10 	vmov	d0, r8, r9
 8004862:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004866:	4628      	mov	r0, r5
 8004868:	f7ff fed6 	bl	8004618 <__cvt>
 800486c:	9b06      	ldr	r3, [sp, #24]
 800486e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004870:	2b47      	cmp	r3, #71	@ 0x47
 8004872:	4680      	mov	r8, r0
 8004874:	d129      	bne.n	80048ca <_printf_float+0x172>
 8004876:	1cc8      	adds	r0, r1, #3
 8004878:	db02      	blt.n	8004880 <_printf_float+0x128>
 800487a:	6863      	ldr	r3, [r4, #4]
 800487c:	4299      	cmp	r1, r3
 800487e:	dd41      	ble.n	8004904 <_printf_float+0x1ac>
 8004880:	f1aa 0a02 	sub.w	sl, sl, #2
 8004884:	fa5f fa8a 	uxtb.w	sl, sl
 8004888:	3901      	subs	r1, #1
 800488a:	4652      	mov	r2, sl
 800488c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004890:	9109      	str	r1, [sp, #36]	@ 0x24
 8004892:	f7ff ff26 	bl	80046e2 <__exponent>
 8004896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004898:	1813      	adds	r3, r2, r0
 800489a:	2a01      	cmp	r2, #1
 800489c:	4681      	mov	r9, r0
 800489e:	6123      	str	r3, [r4, #16]
 80048a0:	dc02      	bgt.n	80048a8 <_printf_float+0x150>
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	07d2      	lsls	r2, r2, #31
 80048a6:	d501      	bpl.n	80048ac <_printf_float+0x154>
 80048a8:	3301      	adds	r3, #1
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0a2      	beq.n	80047fa <_printf_float+0xa2>
 80048b4:	232d      	movs	r3, #45	@ 0x2d
 80048b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048ba:	e79e      	b.n	80047fa <_printf_float+0xa2>
 80048bc:	9a06      	ldr	r2, [sp, #24]
 80048be:	2a47      	cmp	r2, #71	@ 0x47
 80048c0:	d1c2      	bne.n	8004848 <_printf_float+0xf0>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1c0      	bne.n	8004848 <_printf_float+0xf0>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e7bd      	b.n	8004846 <_printf_float+0xee>
 80048ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048ce:	d9db      	bls.n	8004888 <_printf_float+0x130>
 80048d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80048d4:	d118      	bne.n	8004908 <_printf_float+0x1b0>
 80048d6:	2900      	cmp	r1, #0
 80048d8:	6863      	ldr	r3, [r4, #4]
 80048da:	dd0b      	ble.n	80048f4 <_printf_float+0x19c>
 80048dc:	6121      	str	r1, [r4, #16]
 80048de:	b913      	cbnz	r3, 80048e6 <_printf_float+0x18e>
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	07d0      	lsls	r0, r2, #31
 80048e4:	d502      	bpl.n	80048ec <_printf_float+0x194>
 80048e6:	3301      	adds	r3, #1
 80048e8:	440b      	add	r3, r1
 80048ea:	6123      	str	r3, [r4, #16]
 80048ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80048ee:	f04f 0900 	mov.w	r9, #0
 80048f2:	e7db      	b.n	80048ac <_printf_float+0x154>
 80048f4:	b913      	cbnz	r3, 80048fc <_printf_float+0x1a4>
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	07d2      	lsls	r2, r2, #31
 80048fa:	d501      	bpl.n	8004900 <_printf_float+0x1a8>
 80048fc:	3302      	adds	r3, #2
 80048fe:	e7f4      	b.n	80048ea <_printf_float+0x192>
 8004900:	2301      	movs	r3, #1
 8004902:	e7f2      	b.n	80048ea <_printf_float+0x192>
 8004904:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800490a:	4299      	cmp	r1, r3
 800490c:	db05      	blt.n	800491a <_printf_float+0x1c2>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	6121      	str	r1, [r4, #16]
 8004912:	07d8      	lsls	r0, r3, #31
 8004914:	d5ea      	bpl.n	80048ec <_printf_float+0x194>
 8004916:	1c4b      	adds	r3, r1, #1
 8004918:	e7e7      	b.n	80048ea <_printf_float+0x192>
 800491a:	2900      	cmp	r1, #0
 800491c:	bfd4      	ite	le
 800491e:	f1c1 0202 	rsble	r2, r1, #2
 8004922:	2201      	movgt	r2, #1
 8004924:	4413      	add	r3, r2
 8004926:	e7e0      	b.n	80048ea <_printf_float+0x192>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	055a      	lsls	r2, r3, #21
 800492c:	d407      	bmi.n	800493e <_printf_float+0x1e6>
 800492e:	6923      	ldr	r3, [r4, #16]
 8004930:	4642      	mov	r2, r8
 8004932:	4631      	mov	r1, r6
 8004934:	4628      	mov	r0, r5
 8004936:	47b8      	blx	r7
 8004938:	3001      	adds	r0, #1
 800493a:	d12b      	bne.n	8004994 <_printf_float+0x23c>
 800493c:	e767      	b.n	800480e <_printf_float+0xb6>
 800493e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004942:	f240 80dd 	bls.w	8004b00 <_printf_float+0x3a8>
 8004946:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800494a:	2200      	movs	r2, #0
 800494c:	2300      	movs	r3, #0
 800494e:	f7fc f8db 	bl	8000b08 <__aeabi_dcmpeq>
 8004952:	2800      	cmp	r0, #0
 8004954:	d033      	beq.n	80049be <_printf_float+0x266>
 8004956:	4a37      	ldr	r2, [pc, #220]	@ (8004a34 <_printf_float+0x2dc>)
 8004958:	2301      	movs	r3, #1
 800495a:	4631      	mov	r1, r6
 800495c:	4628      	mov	r0, r5
 800495e:	47b8      	blx	r7
 8004960:	3001      	adds	r0, #1
 8004962:	f43f af54 	beq.w	800480e <_printf_float+0xb6>
 8004966:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800496a:	4543      	cmp	r3, r8
 800496c:	db02      	blt.n	8004974 <_printf_float+0x21c>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	07d8      	lsls	r0, r3, #31
 8004972:	d50f      	bpl.n	8004994 <_printf_float+0x23c>
 8004974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004978:	4631      	mov	r1, r6
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	f43f af45 	beq.w	800480e <_printf_float+0xb6>
 8004984:	f04f 0900 	mov.w	r9, #0
 8004988:	f108 38ff 	add.w	r8, r8, #4294967295
 800498c:	f104 0a1a 	add.w	sl, r4, #26
 8004990:	45c8      	cmp	r8, r9
 8004992:	dc09      	bgt.n	80049a8 <_printf_float+0x250>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	079b      	lsls	r3, r3, #30
 8004998:	f100 8103 	bmi.w	8004ba2 <_printf_float+0x44a>
 800499c:	68e0      	ldr	r0, [r4, #12]
 800499e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049a0:	4298      	cmp	r0, r3
 80049a2:	bfb8      	it	lt
 80049a4:	4618      	movlt	r0, r3
 80049a6:	e734      	b.n	8004812 <_printf_float+0xba>
 80049a8:	2301      	movs	r3, #1
 80049aa:	4652      	mov	r2, sl
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f af2b 	beq.w	800480e <_printf_float+0xb6>
 80049b8:	f109 0901 	add.w	r9, r9, #1
 80049bc:	e7e8      	b.n	8004990 <_printf_float+0x238>
 80049be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	dc39      	bgt.n	8004a38 <_printf_float+0x2e0>
 80049c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a34 <_printf_float+0x2dc>)
 80049c6:	2301      	movs	r3, #1
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f af1d 	beq.w	800480e <_printf_float+0xb6>
 80049d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80049d8:	ea59 0303 	orrs.w	r3, r9, r3
 80049dc:	d102      	bne.n	80049e4 <_printf_float+0x28c>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	07d9      	lsls	r1, r3, #31
 80049e2:	d5d7      	bpl.n	8004994 <_printf_float+0x23c>
 80049e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049e8:	4631      	mov	r1, r6
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b8      	blx	r7
 80049ee:	3001      	adds	r0, #1
 80049f0:	f43f af0d 	beq.w	800480e <_printf_float+0xb6>
 80049f4:	f04f 0a00 	mov.w	sl, #0
 80049f8:	f104 0b1a 	add.w	fp, r4, #26
 80049fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049fe:	425b      	negs	r3, r3
 8004a00:	4553      	cmp	r3, sl
 8004a02:	dc01      	bgt.n	8004a08 <_printf_float+0x2b0>
 8004a04:	464b      	mov	r3, r9
 8004a06:	e793      	b.n	8004930 <_printf_float+0x1d8>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	465a      	mov	r2, fp
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4628      	mov	r0, r5
 8004a10:	47b8      	blx	r7
 8004a12:	3001      	adds	r0, #1
 8004a14:	f43f aefb 	beq.w	800480e <_printf_float+0xb6>
 8004a18:	f10a 0a01 	add.w	sl, sl, #1
 8004a1c:	e7ee      	b.n	80049fc <_printf_float+0x2a4>
 8004a1e:	bf00      	nop
 8004a20:	7fefffff 	.word	0x7fefffff
 8004a24:	0800a7d8 	.word	0x0800a7d8
 8004a28:	0800a7dc 	.word	0x0800a7dc
 8004a2c:	0800a7e0 	.word	0x0800a7e0
 8004a30:	0800a7e4 	.word	0x0800a7e4
 8004a34:	0800a7e8 	.word	0x0800a7e8
 8004a38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a3e:	4553      	cmp	r3, sl
 8004a40:	bfa8      	it	ge
 8004a42:	4653      	movge	r3, sl
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	4699      	mov	r9, r3
 8004a48:	dc36      	bgt.n	8004ab8 <_printf_float+0x360>
 8004a4a:	f04f 0b00 	mov.w	fp, #0
 8004a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a52:	f104 021a 	add.w	r2, r4, #26
 8004a56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a58:	9306      	str	r3, [sp, #24]
 8004a5a:	eba3 0309 	sub.w	r3, r3, r9
 8004a5e:	455b      	cmp	r3, fp
 8004a60:	dc31      	bgt.n	8004ac6 <_printf_float+0x36e>
 8004a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a64:	459a      	cmp	sl, r3
 8004a66:	dc3a      	bgt.n	8004ade <_printf_float+0x386>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	07da      	lsls	r2, r3, #31
 8004a6c:	d437      	bmi.n	8004ade <_printf_float+0x386>
 8004a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a70:	ebaa 0903 	sub.w	r9, sl, r3
 8004a74:	9b06      	ldr	r3, [sp, #24]
 8004a76:	ebaa 0303 	sub.w	r3, sl, r3
 8004a7a:	4599      	cmp	r9, r3
 8004a7c:	bfa8      	it	ge
 8004a7e:	4699      	movge	r9, r3
 8004a80:	f1b9 0f00 	cmp.w	r9, #0
 8004a84:	dc33      	bgt.n	8004aee <_printf_float+0x396>
 8004a86:	f04f 0800 	mov.w	r8, #0
 8004a8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a8e:	f104 0b1a 	add.w	fp, r4, #26
 8004a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a94:	ebaa 0303 	sub.w	r3, sl, r3
 8004a98:	eba3 0309 	sub.w	r3, r3, r9
 8004a9c:	4543      	cmp	r3, r8
 8004a9e:	f77f af79 	ble.w	8004994 <_printf_float+0x23c>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	465a      	mov	r2, fp
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	f43f aeae 	beq.w	800480e <_printf_float+0xb6>
 8004ab2:	f108 0801 	add.w	r8, r8, #1
 8004ab6:	e7ec      	b.n	8004a92 <_printf_float+0x33a>
 8004ab8:	4642      	mov	r2, r8
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d1c2      	bne.n	8004a4a <_printf_float+0x2f2>
 8004ac4:	e6a3      	b.n	800480e <_printf_float+0xb6>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4628      	mov	r0, r5
 8004acc:	9206      	str	r2, [sp, #24]
 8004ace:	47b8      	blx	r7
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	f43f ae9c 	beq.w	800480e <_printf_float+0xb6>
 8004ad6:	9a06      	ldr	r2, [sp, #24]
 8004ad8:	f10b 0b01 	add.w	fp, fp, #1
 8004adc:	e7bb      	b.n	8004a56 <_printf_float+0x2fe>
 8004ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	47b8      	blx	r7
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d1c0      	bne.n	8004a6e <_printf_float+0x316>
 8004aec:	e68f      	b.n	800480e <_printf_float+0xb6>
 8004aee:	9a06      	ldr	r2, [sp, #24]
 8004af0:	464b      	mov	r3, r9
 8004af2:	4442      	add	r2, r8
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	d1c3      	bne.n	8004a86 <_printf_float+0x32e>
 8004afe:	e686      	b.n	800480e <_printf_float+0xb6>
 8004b00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b04:	f1ba 0f01 	cmp.w	sl, #1
 8004b08:	dc01      	bgt.n	8004b0e <_printf_float+0x3b6>
 8004b0a:	07db      	lsls	r3, r3, #31
 8004b0c:	d536      	bpl.n	8004b7c <_printf_float+0x424>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4642      	mov	r2, r8
 8004b12:	4631      	mov	r1, r6
 8004b14:	4628      	mov	r0, r5
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	f43f ae78 	beq.w	800480e <_printf_float+0xb6>
 8004b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b22:	4631      	mov	r1, r6
 8004b24:	4628      	mov	r0, r5
 8004b26:	47b8      	blx	r7
 8004b28:	3001      	adds	r0, #1
 8004b2a:	f43f ae70 	beq.w	800480e <_printf_float+0xb6>
 8004b2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b32:	2200      	movs	r2, #0
 8004b34:	2300      	movs	r3, #0
 8004b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b3a:	f7fb ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 8004b3e:	b9c0      	cbnz	r0, 8004b72 <_printf_float+0x41a>
 8004b40:	4653      	mov	r3, sl
 8004b42:	f108 0201 	add.w	r2, r8, #1
 8004b46:	4631      	mov	r1, r6
 8004b48:	4628      	mov	r0, r5
 8004b4a:	47b8      	blx	r7
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d10c      	bne.n	8004b6a <_printf_float+0x412>
 8004b50:	e65d      	b.n	800480e <_printf_float+0xb6>
 8004b52:	2301      	movs	r3, #1
 8004b54:	465a      	mov	r2, fp
 8004b56:	4631      	mov	r1, r6
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b8      	blx	r7
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f43f ae56 	beq.w	800480e <_printf_float+0xb6>
 8004b62:	f108 0801 	add.w	r8, r8, #1
 8004b66:	45d0      	cmp	r8, sl
 8004b68:	dbf3      	blt.n	8004b52 <_printf_float+0x3fa>
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004b70:	e6df      	b.n	8004932 <_printf_float+0x1da>
 8004b72:	f04f 0800 	mov.w	r8, #0
 8004b76:	f104 0b1a 	add.w	fp, r4, #26
 8004b7a:	e7f4      	b.n	8004b66 <_printf_float+0x40e>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	4642      	mov	r2, r8
 8004b80:	e7e1      	b.n	8004b46 <_printf_float+0x3ee>
 8004b82:	2301      	movs	r3, #1
 8004b84:	464a      	mov	r2, r9
 8004b86:	4631      	mov	r1, r6
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b8      	blx	r7
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	f43f ae3e 	beq.w	800480e <_printf_float+0xb6>
 8004b92:	f108 0801 	add.w	r8, r8, #1
 8004b96:	68e3      	ldr	r3, [r4, #12]
 8004b98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b9a:	1a5b      	subs	r3, r3, r1
 8004b9c:	4543      	cmp	r3, r8
 8004b9e:	dcf0      	bgt.n	8004b82 <_printf_float+0x42a>
 8004ba0:	e6fc      	b.n	800499c <_printf_float+0x244>
 8004ba2:	f04f 0800 	mov.w	r8, #0
 8004ba6:	f104 0919 	add.w	r9, r4, #25
 8004baa:	e7f4      	b.n	8004b96 <_printf_float+0x43e>

08004bac <_printf_common>:
 8004bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	4698      	mov	r8, r3
 8004bb4:	688a      	ldr	r2, [r1, #8]
 8004bb6:	690b      	ldr	r3, [r1, #16]
 8004bb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	bfb8      	it	lt
 8004bc0:	4613      	movlt	r3, r2
 8004bc2:	6033      	str	r3, [r6, #0]
 8004bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bc8:	4607      	mov	r7, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	b10a      	cbz	r2, 8004bd2 <_printf_common+0x26>
 8004bce:	3301      	adds	r3, #1
 8004bd0:	6033      	str	r3, [r6, #0]
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	0699      	lsls	r1, r3, #26
 8004bd6:	bf42      	ittt	mi
 8004bd8:	6833      	ldrmi	r3, [r6, #0]
 8004bda:	3302      	addmi	r3, #2
 8004bdc:	6033      	strmi	r3, [r6, #0]
 8004bde:	6825      	ldr	r5, [r4, #0]
 8004be0:	f015 0506 	ands.w	r5, r5, #6
 8004be4:	d106      	bne.n	8004bf4 <_printf_common+0x48>
 8004be6:	f104 0a19 	add.w	sl, r4, #25
 8004bea:	68e3      	ldr	r3, [r4, #12]
 8004bec:	6832      	ldr	r2, [r6, #0]
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	42ab      	cmp	r3, r5
 8004bf2:	dc26      	bgt.n	8004c42 <_printf_common+0x96>
 8004bf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bf8:	6822      	ldr	r2, [r4, #0]
 8004bfa:	3b00      	subs	r3, #0
 8004bfc:	bf18      	it	ne
 8004bfe:	2301      	movne	r3, #1
 8004c00:	0692      	lsls	r2, r2, #26
 8004c02:	d42b      	bmi.n	8004c5c <_printf_common+0xb0>
 8004c04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c08:	4641      	mov	r1, r8
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	47c8      	blx	r9
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d01e      	beq.n	8004c50 <_printf_common+0xa4>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	6922      	ldr	r2, [r4, #16]
 8004c16:	f003 0306 	and.w	r3, r3, #6
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	bf02      	ittt	eq
 8004c1e:	68e5      	ldreq	r5, [r4, #12]
 8004c20:	6833      	ldreq	r3, [r6, #0]
 8004c22:	1aed      	subeq	r5, r5, r3
 8004c24:	68a3      	ldr	r3, [r4, #8]
 8004c26:	bf0c      	ite	eq
 8004c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c2c:	2500      	movne	r5, #0
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	bfc4      	itt	gt
 8004c32:	1a9b      	subgt	r3, r3, r2
 8004c34:	18ed      	addgt	r5, r5, r3
 8004c36:	2600      	movs	r6, #0
 8004c38:	341a      	adds	r4, #26
 8004c3a:	42b5      	cmp	r5, r6
 8004c3c:	d11a      	bne.n	8004c74 <_printf_common+0xc8>
 8004c3e:	2000      	movs	r0, #0
 8004c40:	e008      	b.n	8004c54 <_printf_common+0xa8>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4652      	mov	r2, sl
 8004c46:	4641      	mov	r1, r8
 8004c48:	4638      	mov	r0, r7
 8004c4a:	47c8      	blx	r9
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d103      	bne.n	8004c58 <_printf_common+0xac>
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	3501      	adds	r5, #1
 8004c5a:	e7c6      	b.n	8004bea <_printf_common+0x3e>
 8004c5c:	18e1      	adds	r1, r4, r3
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	2030      	movs	r0, #48	@ 0x30
 8004c62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c66:	4422      	add	r2, r4
 8004c68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c70:	3302      	adds	r3, #2
 8004c72:	e7c7      	b.n	8004c04 <_printf_common+0x58>
 8004c74:	2301      	movs	r3, #1
 8004c76:	4622      	mov	r2, r4
 8004c78:	4641      	mov	r1, r8
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	47c8      	blx	r9
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d0e6      	beq.n	8004c50 <_printf_common+0xa4>
 8004c82:	3601      	adds	r6, #1
 8004c84:	e7d9      	b.n	8004c3a <_printf_common+0x8e>
	...

08004c88 <_printf_i>:
 8004c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	7e0f      	ldrb	r7, [r1, #24]
 8004c8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c90:	2f78      	cmp	r7, #120	@ 0x78
 8004c92:	4691      	mov	r9, r2
 8004c94:	4680      	mov	r8, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	469a      	mov	sl, r3
 8004c9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c9e:	d807      	bhi.n	8004cb0 <_printf_i+0x28>
 8004ca0:	2f62      	cmp	r7, #98	@ 0x62
 8004ca2:	d80a      	bhi.n	8004cba <_printf_i+0x32>
 8004ca4:	2f00      	cmp	r7, #0
 8004ca6:	f000 80d2 	beq.w	8004e4e <_printf_i+0x1c6>
 8004caa:	2f58      	cmp	r7, #88	@ 0x58
 8004cac:	f000 80b9 	beq.w	8004e22 <_printf_i+0x19a>
 8004cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cb8:	e03a      	b.n	8004d30 <_printf_i+0xa8>
 8004cba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cbe:	2b15      	cmp	r3, #21
 8004cc0:	d8f6      	bhi.n	8004cb0 <_printf_i+0x28>
 8004cc2:	a101      	add	r1, pc, #4	@ (adr r1, 8004cc8 <_printf_i+0x40>)
 8004cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d35 	.word	0x08004d35
 8004cd0:	08004cb1 	.word	0x08004cb1
 8004cd4:	08004cb1 	.word	0x08004cb1
 8004cd8:	08004cb1 	.word	0x08004cb1
 8004cdc:	08004cb1 	.word	0x08004cb1
 8004ce0:	08004d35 	.word	0x08004d35
 8004ce4:	08004cb1 	.word	0x08004cb1
 8004ce8:	08004cb1 	.word	0x08004cb1
 8004cec:	08004cb1 	.word	0x08004cb1
 8004cf0:	08004cb1 	.word	0x08004cb1
 8004cf4:	08004e35 	.word	0x08004e35
 8004cf8:	08004d5f 	.word	0x08004d5f
 8004cfc:	08004def 	.word	0x08004def
 8004d00:	08004cb1 	.word	0x08004cb1
 8004d04:	08004cb1 	.word	0x08004cb1
 8004d08:	08004e57 	.word	0x08004e57
 8004d0c:	08004cb1 	.word	0x08004cb1
 8004d10:	08004d5f 	.word	0x08004d5f
 8004d14:	08004cb1 	.word	0x08004cb1
 8004d18:	08004cb1 	.word	0x08004cb1
 8004d1c:	08004df7 	.word	0x08004df7
 8004d20:	6833      	ldr	r3, [r6, #0]
 8004d22:	1d1a      	adds	r2, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6032      	str	r2, [r6, #0]
 8004d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d30:	2301      	movs	r3, #1
 8004d32:	e09d      	b.n	8004e70 <_printf_i+0x1e8>
 8004d34:	6833      	ldr	r3, [r6, #0]
 8004d36:	6820      	ldr	r0, [r4, #0]
 8004d38:	1d19      	adds	r1, r3, #4
 8004d3a:	6031      	str	r1, [r6, #0]
 8004d3c:	0606      	lsls	r6, r0, #24
 8004d3e:	d501      	bpl.n	8004d44 <_printf_i+0xbc>
 8004d40:	681d      	ldr	r5, [r3, #0]
 8004d42:	e003      	b.n	8004d4c <_printf_i+0xc4>
 8004d44:	0645      	lsls	r5, r0, #25
 8004d46:	d5fb      	bpl.n	8004d40 <_printf_i+0xb8>
 8004d48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d4c:	2d00      	cmp	r5, #0
 8004d4e:	da03      	bge.n	8004d58 <_printf_i+0xd0>
 8004d50:	232d      	movs	r3, #45	@ 0x2d
 8004d52:	426d      	negs	r5, r5
 8004d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d58:	4859      	ldr	r0, [pc, #356]	@ (8004ec0 <_printf_i+0x238>)
 8004d5a:	230a      	movs	r3, #10
 8004d5c:	e011      	b.n	8004d82 <_printf_i+0xfa>
 8004d5e:	6821      	ldr	r1, [r4, #0]
 8004d60:	6833      	ldr	r3, [r6, #0]
 8004d62:	0608      	lsls	r0, r1, #24
 8004d64:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d68:	d402      	bmi.n	8004d70 <_printf_i+0xe8>
 8004d6a:	0649      	lsls	r1, r1, #25
 8004d6c:	bf48      	it	mi
 8004d6e:	b2ad      	uxthmi	r5, r5
 8004d70:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d72:	4853      	ldr	r0, [pc, #332]	@ (8004ec0 <_printf_i+0x238>)
 8004d74:	6033      	str	r3, [r6, #0]
 8004d76:	bf14      	ite	ne
 8004d78:	230a      	movne	r3, #10
 8004d7a:	2308      	moveq	r3, #8
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d82:	6866      	ldr	r6, [r4, #4]
 8004d84:	60a6      	str	r6, [r4, #8]
 8004d86:	2e00      	cmp	r6, #0
 8004d88:	bfa2      	ittt	ge
 8004d8a:	6821      	ldrge	r1, [r4, #0]
 8004d8c:	f021 0104 	bicge.w	r1, r1, #4
 8004d90:	6021      	strge	r1, [r4, #0]
 8004d92:	b90d      	cbnz	r5, 8004d98 <_printf_i+0x110>
 8004d94:	2e00      	cmp	r6, #0
 8004d96:	d04b      	beq.n	8004e30 <_printf_i+0x1a8>
 8004d98:	4616      	mov	r6, r2
 8004d9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d9e:	fb03 5711 	mls	r7, r3, r1, r5
 8004da2:	5dc7      	ldrb	r7, [r0, r7]
 8004da4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004da8:	462f      	mov	r7, r5
 8004daa:	42bb      	cmp	r3, r7
 8004dac:	460d      	mov	r5, r1
 8004dae:	d9f4      	bls.n	8004d9a <_printf_i+0x112>
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d10b      	bne.n	8004dcc <_printf_i+0x144>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	07df      	lsls	r7, r3, #31
 8004db8:	d508      	bpl.n	8004dcc <_printf_i+0x144>
 8004dba:	6923      	ldr	r3, [r4, #16]
 8004dbc:	6861      	ldr	r1, [r4, #4]
 8004dbe:	4299      	cmp	r1, r3
 8004dc0:	bfde      	ittt	le
 8004dc2:	2330      	movle	r3, #48	@ 0x30
 8004dc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dcc:	1b92      	subs	r2, r2, r6
 8004dce:	6122      	str	r2, [r4, #16]
 8004dd0:	f8cd a000 	str.w	sl, [sp]
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	aa03      	add	r2, sp, #12
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f7ff fee6 	bl	8004bac <_printf_common>
 8004de0:	3001      	adds	r0, #1
 8004de2:	d14a      	bne.n	8004e7a <_printf_i+0x1f2>
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	b004      	add	sp, #16
 8004dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	4833      	ldr	r0, [pc, #204]	@ (8004ec4 <_printf_i+0x23c>)
 8004df8:	2778      	movs	r7, #120	@ 0x78
 8004dfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	6831      	ldr	r1, [r6, #0]
 8004e02:	061f      	lsls	r7, r3, #24
 8004e04:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e08:	d402      	bmi.n	8004e10 <_printf_i+0x188>
 8004e0a:	065f      	lsls	r7, r3, #25
 8004e0c:	bf48      	it	mi
 8004e0e:	b2ad      	uxthmi	r5, r5
 8004e10:	6031      	str	r1, [r6, #0]
 8004e12:	07d9      	lsls	r1, r3, #31
 8004e14:	bf44      	itt	mi
 8004e16:	f043 0320 	orrmi.w	r3, r3, #32
 8004e1a:	6023      	strmi	r3, [r4, #0]
 8004e1c:	b11d      	cbz	r5, 8004e26 <_printf_i+0x19e>
 8004e1e:	2310      	movs	r3, #16
 8004e20:	e7ac      	b.n	8004d7c <_printf_i+0xf4>
 8004e22:	4827      	ldr	r0, [pc, #156]	@ (8004ec0 <_printf_i+0x238>)
 8004e24:	e7e9      	b.n	8004dfa <_printf_i+0x172>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	f023 0320 	bic.w	r3, r3, #32
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	e7f6      	b.n	8004e1e <_printf_i+0x196>
 8004e30:	4616      	mov	r6, r2
 8004e32:	e7bd      	b.n	8004db0 <_printf_i+0x128>
 8004e34:	6833      	ldr	r3, [r6, #0]
 8004e36:	6825      	ldr	r5, [r4, #0]
 8004e38:	6961      	ldr	r1, [r4, #20]
 8004e3a:	1d18      	adds	r0, r3, #4
 8004e3c:	6030      	str	r0, [r6, #0]
 8004e3e:	062e      	lsls	r6, r5, #24
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	d501      	bpl.n	8004e48 <_printf_i+0x1c0>
 8004e44:	6019      	str	r1, [r3, #0]
 8004e46:	e002      	b.n	8004e4e <_printf_i+0x1c6>
 8004e48:	0668      	lsls	r0, r5, #25
 8004e4a:	d5fb      	bpl.n	8004e44 <_printf_i+0x1bc>
 8004e4c:	8019      	strh	r1, [r3, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6123      	str	r3, [r4, #16]
 8004e52:	4616      	mov	r6, r2
 8004e54:	e7bc      	b.n	8004dd0 <_printf_i+0x148>
 8004e56:	6833      	ldr	r3, [r6, #0]
 8004e58:	1d1a      	adds	r2, r3, #4
 8004e5a:	6032      	str	r2, [r6, #0]
 8004e5c:	681e      	ldr	r6, [r3, #0]
 8004e5e:	6862      	ldr	r2, [r4, #4]
 8004e60:	2100      	movs	r1, #0
 8004e62:	4630      	mov	r0, r6
 8004e64:	f7fb f9d4 	bl	8000210 <memchr>
 8004e68:	b108      	cbz	r0, 8004e6e <_printf_i+0x1e6>
 8004e6a:	1b80      	subs	r0, r0, r6
 8004e6c:	6060      	str	r0, [r4, #4]
 8004e6e:	6863      	ldr	r3, [r4, #4]
 8004e70:	6123      	str	r3, [r4, #16]
 8004e72:	2300      	movs	r3, #0
 8004e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e78:	e7aa      	b.n	8004dd0 <_printf_i+0x148>
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	4649      	mov	r1, r9
 8004e80:	4640      	mov	r0, r8
 8004e82:	47d0      	blx	sl
 8004e84:	3001      	adds	r0, #1
 8004e86:	d0ad      	beq.n	8004de4 <_printf_i+0x15c>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	079b      	lsls	r3, r3, #30
 8004e8c:	d413      	bmi.n	8004eb6 <_printf_i+0x22e>
 8004e8e:	68e0      	ldr	r0, [r4, #12]
 8004e90:	9b03      	ldr	r3, [sp, #12]
 8004e92:	4298      	cmp	r0, r3
 8004e94:	bfb8      	it	lt
 8004e96:	4618      	movlt	r0, r3
 8004e98:	e7a6      	b.n	8004de8 <_printf_i+0x160>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4632      	mov	r2, r6
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	4640      	mov	r0, r8
 8004ea2:	47d0      	blx	sl
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d09d      	beq.n	8004de4 <_printf_i+0x15c>
 8004ea8:	3501      	adds	r5, #1
 8004eaa:	68e3      	ldr	r3, [r4, #12]
 8004eac:	9903      	ldr	r1, [sp, #12]
 8004eae:	1a5b      	subs	r3, r3, r1
 8004eb0:	42ab      	cmp	r3, r5
 8004eb2:	dcf2      	bgt.n	8004e9a <_printf_i+0x212>
 8004eb4:	e7eb      	b.n	8004e8e <_printf_i+0x206>
 8004eb6:	2500      	movs	r5, #0
 8004eb8:	f104 0619 	add.w	r6, r4, #25
 8004ebc:	e7f5      	b.n	8004eaa <_printf_i+0x222>
 8004ebe:	bf00      	nop
 8004ec0:	0800a7ea 	.word	0x0800a7ea
 8004ec4:	0800a7fb 	.word	0x0800a7fb

08004ec8 <_scanf_float>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	b087      	sub	sp, #28
 8004ece:	4617      	mov	r7, r2
 8004ed0:	9303      	str	r3, [sp, #12]
 8004ed2:	688b      	ldr	r3, [r1, #8]
 8004ed4:	1e5a      	subs	r2, r3, #1
 8004ed6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004eda:	bf81      	itttt	hi
 8004edc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004ee0:	eb03 0b05 	addhi.w	fp, r3, r5
 8004ee4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004ee8:	608b      	strhi	r3, [r1, #8]
 8004eea:	680b      	ldr	r3, [r1, #0]
 8004eec:	460a      	mov	r2, r1
 8004eee:	f04f 0500 	mov.w	r5, #0
 8004ef2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004ef6:	f842 3b1c 	str.w	r3, [r2], #28
 8004efa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004efe:	4680      	mov	r8, r0
 8004f00:	460c      	mov	r4, r1
 8004f02:	bf98      	it	ls
 8004f04:	f04f 0b00 	movls.w	fp, #0
 8004f08:	9201      	str	r2, [sp, #4]
 8004f0a:	4616      	mov	r6, r2
 8004f0c:	46aa      	mov	sl, r5
 8004f0e:	46a9      	mov	r9, r5
 8004f10:	9502      	str	r5, [sp, #8]
 8004f12:	68a2      	ldr	r2, [r4, #8]
 8004f14:	b152      	cbz	r2, 8004f2c <_scanf_float+0x64>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f1c:	d864      	bhi.n	8004fe8 <_scanf_float+0x120>
 8004f1e:	2b40      	cmp	r3, #64	@ 0x40
 8004f20:	d83c      	bhi.n	8004f9c <_scanf_float+0xd4>
 8004f22:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004f26:	b2c8      	uxtb	r0, r1
 8004f28:	280e      	cmp	r0, #14
 8004f2a:	d93a      	bls.n	8004fa2 <_scanf_float+0xda>
 8004f2c:	f1b9 0f00 	cmp.w	r9, #0
 8004f30:	d003      	beq.n	8004f3a <_scanf_float+0x72>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f3e:	f1ba 0f01 	cmp.w	sl, #1
 8004f42:	f200 8117 	bhi.w	8005174 <_scanf_float+0x2ac>
 8004f46:	9b01      	ldr	r3, [sp, #4]
 8004f48:	429e      	cmp	r6, r3
 8004f4a:	f200 8108 	bhi.w	800515e <_scanf_float+0x296>
 8004f4e:	2001      	movs	r0, #1
 8004f50:	b007      	add	sp, #28
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004f5a:	2a0d      	cmp	r2, #13
 8004f5c:	d8e6      	bhi.n	8004f2c <_scanf_float+0x64>
 8004f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f64 <_scanf_float+0x9c>)
 8004f60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f64:	080050ab 	.word	0x080050ab
 8004f68:	08004f2d 	.word	0x08004f2d
 8004f6c:	08004f2d 	.word	0x08004f2d
 8004f70:	08004f2d 	.word	0x08004f2d
 8004f74:	0800510b 	.word	0x0800510b
 8004f78:	080050e3 	.word	0x080050e3
 8004f7c:	08004f2d 	.word	0x08004f2d
 8004f80:	08004f2d 	.word	0x08004f2d
 8004f84:	080050b9 	.word	0x080050b9
 8004f88:	08004f2d 	.word	0x08004f2d
 8004f8c:	08004f2d 	.word	0x08004f2d
 8004f90:	08004f2d 	.word	0x08004f2d
 8004f94:	08004f2d 	.word	0x08004f2d
 8004f98:	08005071 	.word	0x08005071
 8004f9c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004fa0:	e7db      	b.n	8004f5a <_scanf_float+0x92>
 8004fa2:	290e      	cmp	r1, #14
 8004fa4:	d8c2      	bhi.n	8004f2c <_scanf_float+0x64>
 8004fa6:	a001      	add	r0, pc, #4	@ (adr r0, 8004fac <_scanf_float+0xe4>)
 8004fa8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004fac:	08005061 	.word	0x08005061
 8004fb0:	08004f2d 	.word	0x08004f2d
 8004fb4:	08005061 	.word	0x08005061
 8004fb8:	080050f7 	.word	0x080050f7
 8004fbc:	08004f2d 	.word	0x08004f2d
 8004fc0:	08005009 	.word	0x08005009
 8004fc4:	08005047 	.word	0x08005047
 8004fc8:	08005047 	.word	0x08005047
 8004fcc:	08005047 	.word	0x08005047
 8004fd0:	08005047 	.word	0x08005047
 8004fd4:	08005047 	.word	0x08005047
 8004fd8:	08005047 	.word	0x08005047
 8004fdc:	08005047 	.word	0x08005047
 8004fe0:	08005047 	.word	0x08005047
 8004fe4:	08005047 	.word	0x08005047
 8004fe8:	2b6e      	cmp	r3, #110	@ 0x6e
 8004fea:	d809      	bhi.n	8005000 <_scanf_float+0x138>
 8004fec:	2b60      	cmp	r3, #96	@ 0x60
 8004fee:	d8b2      	bhi.n	8004f56 <_scanf_float+0x8e>
 8004ff0:	2b54      	cmp	r3, #84	@ 0x54
 8004ff2:	d07b      	beq.n	80050ec <_scanf_float+0x224>
 8004ff4:	2b59      	cmp	r3, #89	@ 0x59
 8004ff6:	d199      	bne.n	8004f2c <_scanf_float+0x64>
 8004ff8:	2d07      	cmp	r5, #7
 8004ffa:	d197      	bne.n	8004f2c <_scanf_float+0x64>
 8004ffc:	2508      	movs	r5, #8
 8004ffe:	e02c      	b.n	800505a <_scanf_float+0x192>
 8005000:	2b74      	cmp	r3, #116	@ 0x74
 8005002:	d073      	beq.n	80050ec <_scanf_float+0x224>
 8005004:	2b79      	cmp	r3, #121	@ 0x79
 8005006:	e7f6      	b.n	8004ff6 <_scanf_float+0x12e>
 8005008:	6821      	ldr	r1, [r4, #0]
 800500a:	05c8      	lsls	r0, r1, #23
 800500c:	d51b      	bpl.n	8005046 <_scanf_float+0x17e>
 800500e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005012:	6021      	str	r1, [r4, #0]
 8005014:	f109 0901 	add.w	r9, r9, #1
 8005018:	f1bb 0f00 	cmp.w	fp, #0
 800501c:	d003      	beq.n	8005026 <_scanf_float+0x15e>
 800501e:	3201      	adds	r2, #1
 8005020:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005024:	60a2      	str	r2, [r4, #8]
 8005026:	68a3      	ldr	r3, [r4, #8]
 8005028:	3b01      	subs	r3, #1
 800502a:	60a3      	str	r3, [r4, #8]
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	3301      	adds	r3, #1
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3b01      	subs	r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	f340 8087 	ble.w	800514c <_scanf_float+0x284>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	3301      	adds	r3, #1
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	e765      	b.n	8004f12 <_scanf_float+0x4a>
 8005046:	eb1a 0105 	adds.w	r1, sl, r5
 800504a:	f47f af6f 	bne.w	8004f2c <_scanf_float+0x64>
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005054:	6022      	str	r2, [r4, #0]
 8005056:	460d      	mov	r5, r1
 8005058:	468a      	mov	sl, r1
 800505a:	f806 3b01 	strb.w	r3, [r6], #1
 800505e:	e7e2      	b.n	8005026 <_scanf_float+0x15e>
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	0610      	lsls	r0, r2, #24
 8005064:	f57f af62 	bpl.w	8004f2c <_scanf_float+0x64>
 8005068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800506c:	6022      	str	r2, [r4, #0]
 800506e:	e7f4      	b.n	800505a <_scanf_float+0x192>
 8005070:	f1ba 0f00 	cmp.w	sl, #0
 8005074:	d10e      	bne.n	8005094 <_scanf_float+0x1cc>
 8005076:	f1b9 0f00 	cmp.w	r9, #0
 800507a:	d10e      	bne.n	800509a <_scanf_float+0x1d2>
 800507c:	6822      	ldr	r2, [r4, #0]
 800507e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005082:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005086:	d108      	bne.n	800509a <_scanf_float+0x1d2>
 8005088:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800508c:	6022      	str	r2, [r4, #0]
 800508e:	f04f 0a01 	mov.w	sl, #1
 8005092:	e7e2      	b.n	800505a <_scanf_float+0x192>
 8005094:	f1ba 0f02 	cmp.w	sl, #2
 8005098:	d055      	beq.n	8005146 <_scanf_float+0x27e>
 800509a:	2d01      	cmp	r5, #1
 800509c:	d002      	beq.n	80050a4 <_scanf_float+0x1dc>
 800509e:	2d04      	cmp	r5, #4
 80050a0:	f47f af44 	bne.w	8004f2c <_scanf_float+0x64>
 80050a4:	3501      	adds	r5, #1
 80050a6:	b2ed      	uxtb	r5, r5
 80050a8:	e7d7      	b.n	800505a <_scanf_float+0x192>
 80050aa:	f1ba 0f01 	cmp.w	sl, #1
 80050ae:	f47f af3d 	bne.w	8004f2c <_scanf_float+0x64>
 80050b2:	f04f 0a02 	mov.w	sl, #2
 80050b6:	e7d0      	b.n	800505a <_scanf_float+0x192>
 80050b8:	b97d      	cbnz	r5, 80050da <_scanf_float+0x212>
 80050ba:	f1b9 0f00 	cmp.w	r9, #0
 80050be:	f47f af38 	bne.w	8004f32 <_scanf_float+0x6a>
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80050c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80050cc:	f040 8108 	bne.w	80052e0 <_scanf_float+0x418>
 80050d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80050d4:	6022      	str	r2, [r4, #0]
 80050d6:	2501      	movs	r5, #1
 80050d8:	e7bf      	b.n	800505a <_scanf_float+0x192>
 80050da:	2d03      	cmp	r5, #3
 80050dc:	d0e2      	beq.n	80050a4 <_scanf_float+0x1dc>
 80050de:	2d05      	cmp	r5, #5
 80050e0:	e7de      	b.n	80050a0 <_scanf_float+0x1d8>
 80050e2:	2d02      	cmp	r5, #2
 80050e4:	f47f af22 	bne.w	8004f2c <_scanf_float+0x64>
 80050e8:	2503      	movs	r5, #3
 80050ea:	e7b6      	b.n	800505a <_scanf_float+0x192>
 80050ec:	2d06      	cmp	r5, #6
 80050ee:	f47f af1d 	bne.w	8004f2c <_scanf_float+0x64>
 80050f2:	2507      	movs	r5, #7
 80050f4:	e7b1      	b.n	800505a <_scanf_float+0x192>
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	0591      	lsls	r1, r2, #22
 80050fa:	f57f af17 	bpl.w	8004f2c <_scanf_float+0x64>
 80050fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005102:	6022      	str	r2, [r4, #0]
 8005104:	f8cd 9008 	str.w	r9, [sp, #8]
 8005108:	e7a7      	b.n	800505a <_scanf_float+0x192>
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005110:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005114:	d006      	beq.n	8005124 <_scanf_float+0x25c>
 8005116:	0550      	lsls	r0, r2, #21
 8005118:	f57f af08 	bpl.w	8004f2c <_scanf_float+0x64>
 800511c:	f1b9 0f00 	cmp.w	r9, #0
 8005120:	f000 80de 	beq.w	80052e0 <_scanf_float+0x418>
 8005124:	0591      	lsls	r1, r2, #22
 8005126:	bf58      	it	pl
 8005128:	9902      	ldrpl	r1, [sp, #8]
 800512a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800512e:	bf58      	it	pl
 8005130:	eba9 0101 	subpl.w	r1, r9, r1
 8005134:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005138:	bf58      	it	pl
 800513a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800513e:	6022      	str	r2, [r4, #0]
 8005140:	f04f 0900 	mov.w	r9, #0
 8005144:	e789      	b.n	800505a <_scanf_float+0x192>
 8005146:	f04f 0a03 	mov.w	sl, #3
 800514a:	e786      	b.n	800505a <_scanf_float+0x192>
 800514c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005150:	4639      	mov	r1, r7
 8005152:	4640      	mov	r0, r8
 8005154:	4798      	blx	r3
 8005156:	2800      	cmp	r0, #0
 8005158:	f43f aedb 	beq.w	8004f12 <_scanf_float+0x4a>
 800515c:	e6e6      	b.n	8004f2c <_scanf_float+0x64>
 800515e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005162:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005166:	463a      	mov	r2, r7
 8005168:	4640      	mov	r0, r8
 800516a:	4798      	blx	r3
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	3b01      	subs	r3, #1
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	e6e8      	b.n	8004f46 <_scanf_float+0x7e>
 8005174:	1e6b      	subs	r3, r5, #1
 8005176:	2b06      	cmp	r3, #6
 8005178:	d824      	bhi.n	80051c4 <_scanf_float+0x2fc>
 800517a:	2d02      	cmp	r5, #2
 800517c:	d836      	bhi.n	80051ec <_scanf_float+0x324>
 800517e:	9b01      	ldr	r3, [sp, #4]
 8005180:	429e      	cmp	r6, r3
 8005182:	f67f aee4 	bls.w	8004f4e <_scanf_float+0x86>
 8005186:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800518a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800518e:	463a      	mov	r2, r7
 8005190:	4640      	mov	r0, r8
 8005192:	4798      	blx	r3
 8005194:	6923      	ldr	r3, [r4, #16]
 8005196:	3b01      	subs	r3, #1
 8005198:	6123      	str	r3, [r4, #16]
 800519a:	e7f0      	b.n	800517e <_scanf_float+0x2b6>
 800519c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80051a4:	463a      	mov	r2, r7
 80051a6:	4640      	mov	r0, r8
 80051a8:	4798      	blx	r3
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051b4:	fa5f fa8a 	uxtb.w	sl, sl
 80051b8:	f1ba 0f02 	cmp.w	sl, #2
 80051bc:	d1ee      	bne.n	800519c <_scanf_float+0x2d4>
 80051be:	3d03      	subs	r5, #3
 80051c0:	b2ed      	uxtb	r5, r5
 80051c2:	1b76      	subs	r6, r6, r5
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	05da      	lsls	r2, r3, #23
 80051c8:	d530      	bpl.n	800522c <_scanf_float+0x364>
 80051ca:	055b      	lsls	r3, r3, #21
 80051cc:	d511      	bpl.n	80051f2 <_scanf_float+0x32a>
 80051ce:	9b01      	ldr	r3, [sp, #4]
 80051d0:	429e      	cmp	r6, r3
 80051d2:	f67f aebc 	bls.w	8004f4e <_scanf_float+0x86>
 80051d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051de:	463a      	mov	r2, r7
 80051e0:	4640      	mov	r0, r8
 80051e2:	4798      	blx	r3
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	6123      	str	r3, [r4, #16]
 80051ea:	e7f0      	b.n	80051ce <_scanf_float+0x306>
 80051ec:	46aa      	mov	sl, r5
 80051ee:	46b3      	mov	fp, r6
 80051f0:	e7de      	b.n	80051b0 <_scanf_float+0x2e8>
 80051f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	2965      	cmp	r1, #101	@ 0x65
 80051fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80051fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	d00c      	beq.n	8005220 <_scanf_float+0x358>
 8005206:	2945      	cmp	r1, #69	@ 0x45
 8005208:	d00a      	beq.n	8005220 <_scanf_float+0x358>
 800520a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800520e:	463a      	mov	r2, r7
 8005210:	4640      	mov	r0, r8
 8005212:	4798      	blx	r3
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800521a:	3b01      	subs	r3, #1
 800521c:	1eb5      	subs	r5, r6, #2
 800521e:	6123      	str	r3, [r4, #16]
 8005220:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005224:	463a      	mov	r2, r7
 8005226:	4640      	mov	r0, r8
 8005228:	4798      	blx	r3
 800522a:	462e      	mov	r6, r5
 800522c:	6822      	ldr	r2, [r4, #0]
 800522e:	f012 0210 	ands.w	r2, r2, #16
 8005232:	d001      	beq.n	8005238 <_scanf_float+0x370>
 8005234:	2000      	movs	r0, #0
 8005236:	e68b      	b.n	8004f50 <_scanf_float+0x88>
 8005238:	7032      	strb	r2, [r6, #0]
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005244:	d11c      	bne.n	8005280 <_scanf_float+0x3b8>
 8005246:	9b02      	ldr	r3, [sp, #8]
 8005248:	454b      	cmp	r3, r9
 800524a:	eba3 0209 	sub.w	r2, r3, r9
 800524e:	d123      	bne.n	8005298 <_scanf_float+0x3d0>
 8005250:	9901      	ldr	r1, [sp, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	4640      	mov	r0, r8
 8005256:	f002 fbf7 	bl	8007a48 <_strtod_r>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	6821      	ldr	r1, [r4, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f011 0f02 	tst.w	r1, #2
 8005264:	ec57 6b10 	vmov	r6, r7, d0
 8005268:	f103 0204 	add.w	r2, r3, #4
 800526c:	d01f      	beq.n	80052ae <_scanf_float+0x3e6>
 800526e:	9903      	ldr	r1, [sp, #12]
 8005270:	600a      	str	r2, [r1, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	e9c3 6700 	strd	r6, r7, [r3]
 8005278:	68e3      	ldr	r3, [r4, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60e3      	str	r3, [r4, #12]
 800527e:	e7d9      	b.n	8005234 <_scanf_float+0x36c>
 8005280:	9b04      	ldr	r3, [sp, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0e4      	beq.n	8005250 <_scanf_float+0x388>
 8005286:	9905      	ldr	r1, [sp, #20]
 8005288:	230a      	movs	r3, #10
 800528a:	3101      	adds	r1, #1
 800528c:	4640      	mov	r0, r8
 800528e:	f002 fc5b 	bl	8007b48 <_strtol_r>
 8005292:	9b04      	ldr	r3, [sp, #16]
 8005294:	9e05      	ldr	r6, [sp, #20]
 8005296:	1ac2      	subs	r2, r0, r3
 8005298:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800529c:	429e      	cmp	r6, r3
 800529e:	bf28      	it	cs
 80052a0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80052a4:	4910      	ldr	r1, [pc, #64]	@ (80052e8 <_scanf_float+0x420>)
 80052a6:	4630      	mov	r0, r6
 80052a8:	f000 f8e4 	bl	8005474 <siprintf>
 80052ac:	e7d0      	b.n	8005250 <_scanf_float+0x388>
 80052ae:	f011 0f04 	tst.w	r1, #4
 80052b2:	9903      	ldr	r1, [sp, #12]
 80052b4:	600a      	str	r2, [r1, #0]
 80052b6:	d1dc      	bne.n	8005272 <_scanf_float+0x3aa>
 80052b8:	681d      	ldr	r5, [r3, #0]
 80052ba:	4632      	mov	r2, r6
 80052bc:	463b      	mov	r3, r7
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	f7fb fc53 	bl	8000b6c <__aeabi_dcmpun>
 80052c6:	b128      	cbz	r0, 80052d4 <_scanf_float+0x40c>
 80052c8:	4808      	ldr	r0, [pc, #32]	@ (80052ec <_scanf_float+0x424>)
 80052ca:	f000 f9b7 	bl	800563c <nanf>
 80052ce:	ed85 0a00 	vstr	s0, [r5]
 80052d2:	e7d1      	b.n	8005278 <_scanf_float+0x3b0>
 80052d4:	4630      	mov	r0, r6
 80052d6:	4639      	mov	r1, r7
 80052d8:	f7fb fca6 	bl	8000c28 <__aeabi_d2f>
 80052dc:	6028      	str	r0, [r5, #0]
 80052de:	e7cb      	b.n	8005278 <_scanf_float+0x3b0>
 80052e0:	f04f 0900 	mov.w	r9, #0
 80052e4:	e629      	b.n	8004f3a <_scanf_float+0x72>
 80052e6:	bf00      	nop
 80052e8:	0800a80c 	.word	0x0800a80c
 80052ec:	0800aba5 	.word	0x0800aba5

080052f0 <std>:
 80052f0:	2300      	movs	r3, #0
 80052f2:	b510      	push	{r4, lr}
 80052f4:	4604      	mov	r4, r0
 80052f6:	e9c0 3300 	strd	r3, r3, [r0]
 80052fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052fe:	6083      	str	r3, [r0, #8]
 8005300:	8181      	strh	r1, [r0, #12]
 8005302:	6643      	str	r3, [r0, #100]	@ 0x64
 8005304:	81c2      	strh	r2, [r0, #14]
 8005306:	6183      	str	r3, [r0, #24]
 8005308:	4619      	mov	r1, r3
 800530a:	2208      	movs	r2, #8
 800530c:	305c      	adds	r0, #92	@ 0x5c
 800530e:	f000 f914 	bl	800553a <memset>
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <std+0x58>)
 8005314:	6263      	str	r3, [r4, #36]	@ 0x24
 8005316:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <std+0x5c>)
 8005318:	62a3      	str	r3, [r4, #40]	@ 0x28
 800531a:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <std+0x60>)
 800531c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800531e:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <std+0x64>)
 8005320:	6323      	str	r3, [r4, #48]	@ 0x30
 8005322:	4b0d      	ldr	r3, [pc, #52]	@ (8005358 <std+0x68>)
 8005324:	6224      	str	r4, [r4, #32]
 8005326:	429c      	cmp	r4, r3
 8005328:	d006      	beq.n	8005338 <std+0x48>
 800532a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800532e:	4294      	cmp	r4, r2
 8005330:	d002      	beq.n	8005338 <std+0x48>
 8005332:	33d0      	adds	r3, #208	@ 0xd0
 8005334:	429c      	cmp	r4, r3
 8005336:	d105      	bne.n	8005344 <std+0x54>
 8005338:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800533c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005340:	f000 b978 	b.w	8005634 <__retarget_lock_init_recursive>
 8005344:	bd10      	pop	{r4, pc}
 8005346:	bf00      	nop
 8005348:	080054b5 	.word	0x080054b5
 800534c:	080054d7 	.word	0x080054d7
 8005350:	0800550f 	.word	0x0800550f
 8005354:	08005533 	.word	0x08005533
 8005358:	200002d4 	.word	0x200002d4

0800535c <stdio_exit_handler>:
 800535c:	4a02      	ldr	r2, [pc, #8]	@ (8005368 <stdio_exit_handler+0xc>)
 800535e:	4903      	ldr	r1, [pc, #12]	@ (800536c <stdio_exit_handler+0x10>)
 8005360:	4803      	ldr	r0, [pc, #12]	@ (8005370 <stdio_exit_handler+0x14>)
 8005362:	f000 b869 	b.w	8005438 <_fwalk_sglue>
 8005366:	bf00      	nop
 8005368:	20000010 	.word	0x20000010
 800536c:	08007f05 	.word	0x08007f05
 8005370:	20000020 	.word	0x20000020

08005374 <cleanup_stdio>:
 8005374:	6841      	ldr	r1, [r0, #4]
 8005376:	4b0c      	ldr	r3, [pc, #48]	@ (80053a8 <cleanup_stdio+0x34>)
 8005378:	4299      	cmp	r1, r3
 800537a:	b510      	push	{r4, lr}
 800537c:	4604      	mov	r4, r0
 800537e:	d001      	beq.n	8005384 <cleanup_stdio+0x10>
 8005380:	f002 fdc0 	bl	8007f04 <_fflush_r>
 8005384:	68a1      	ldr	r1, [r4, #8]
 8005386:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <cleanup_stdio+0x38>)
 8005388:	4299      	cmp	r1, r3
 800538a:	d002      	beq.n	8005392 <cleanup_stdio+0x1e>
 800538c:	4620      	mov	r0, r4
 800538e:	f002 fdb9 	bl	8007f04 <_fflush_r>
 8005392:	68e1      	ldr	r1, [r4, #12]
 8005394:	4b06      	ldr	r3, [pc, #24]	@ (80053b0 <cleanup_stdio+0x3c>)
 8005396:	4299      	cmp	r1, r3
 8005398:	d004      	beq.n	80053a4 <cleanup_stdio+0x30>
 800539a:	4620      	mov	r0, r4
 800539c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a0:	f002 bdb0 	b.w	8007f04 <_fflush_r>
 80053a4:	bd10      	pop	{r4, pc}
 80053a6:	bf00      	nop
 80053a8:	200002d4 	.word	0x200002d4
 80053ac:	2000033c 	.word	0x2000033c
 80053b0:	200003a4 	.word	0x200003a4

080053b4 <global_stdio_init.part.0>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <global_stdio_init.part.0+0x30>)
 80053b8:	4c0b      	ldr	r4, [pc, #44]	@ (80053e8 <global_stdio_init.part.0+0x34>)
 80053ba:	4a0c      	ldr	r2, [pc, #48]	@ (80053ec <global_stdio_init.part.0+0x38>)
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	4620      	mov	r0, r4
 80053c0:	2200      	movs	r2, #0
 80053c2:	2104      	movs	r1, #4
 80053c4:	f7ff ff94 	bl	80052f0 <std>
 80053c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053cc:	2201      	movs	r2, #1
 80053ce:	2109      	movs	r1, #9
 80053d0:	f7ff ff8e 	bl	80052f0 <std>
 80053d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053d8:	2202      	movs	r2, #2
 80053da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053de:	2112      	movs	r1, #18
 80053e0:	f7ff bf86 	b.w	80052f0 <std>
 80053e4:	2000040c 	.word	0x2000040c
 80053e8:	200002d4 	.word	0x200002d4
 80053ec:	0800535d 	.word	0x0800535d

080053f0 <__sfp_lock_acquire>:
 80053f0:	4801      	ldr	r0, [pc, #4]	@ (80053f8 <__sfp_lock_acquire+0x8>)
 80053f2:	f000 b920 	b.w	8005636 <__retarget_lock_acquire_recursive>
 80053f6:	bf00      	nop
 80053f8:	20000415 	.word	0x20000415

080053fc <__sfp_lock_release>:
 80053fc:	4801      	ldr	r0, [pc, #4]	@ (8005404 <__sfp_lock_release+0x8>)
 80053fe:	f000 b91b 	b.w	8005638 <__retarget_lock_release_recursive>
 8005402:	bf00      	nop
 8005404:	20000415 	.word	0x20000415

08005408 <__sinit>:
 8005408:	b510      	push	{r4, lr}
 800540a:	4604      	mov	r4, r0
 800540c:	f7ff fff0 	bl	80053f0 <__sfp_lock_acquire>
 8005410:	6a23      	ldr	r3, [r4, #32]
 8005412:	b11b      	cbz	r3, 800541c <__sinit+0x14>
 8005414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005418:	f7ff bff0 	b.w	80053fc <__sfp_lock_release>
 800541c:	4b04      	ldr	r3, [pc, #16]	@ (8005430 <__sinit+0x28>)
 800541e:	6223      	str	r3, [r4, #32]
 8005420:	4b04      	ldr	r3, [pc, #16]	@ (8005434 <__sinit+0x2c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f5      	bne.n	8005414 <__sinit+0xc>
 8005428:	f7ff ffc4 	bl	80053b4 <global_stdio_init.part.0>
 800542c:	e7f2      	b.n	8005414 <__sinit+0xc>
 800542e:	bf00      	nop
 8005430:	08005375 	.word	0x08005375
 8005434:	2000040c 	.word	0x2000040c

08005438 <_fwalk_sglue>:
 8005438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800543c:	4607      	mov	r7, r0
 800543e:	4688      	mov	r8, r1
 8005440:	4614      	mov	r4, r2
 8005442:	2600      	movs	r6, #0
 8005444:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005448:	f1b9 0901 	subs.w	r9, r9, #1
 800544c:	d505      	bpl.n	800545a <_fwalk_sglue+0x22>
 800544e:	6824      	ldr	r4, [r4, #0]
 8005450:	2c00      	cmp	r4, #0
 8005452:	d1f7      	bne.n	8005444 <_fwalk_sglue+0xc>
 8005454:	4630      	mov	r0, r6
 8005456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d907      	bls.n	8005470 <_fwalk_sglue+0x38>
 8005460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005464:	3301      	adds	r3, #1
 8005466:	d003      	beq.n	8005470 <_fwalk_sglue+0x38>
 8005468:	4629      	mov	r1, r5
 800546a:	4638      	mov	r0, r7
 800546c:	47c0      	blx	r8
 800546e:	4306      	orrs	r6, r0
 8005470:	3568      	adds	r5, #104	@ 0x68
 8005472:	e7e9      	b.n	8005448 <_fwalk_sglue+0x10>

08005474 <siprintf>:
 8005474:	b40e      	push	{r1, r2, r3}
 8005476:	b500      	push	{lr}
 8005478:	b09c      	sub	sp, #112	@ 0x70
 800547a:	ab1d      	add	r3, sp, #116	@ 0x74
 800547c:	9002      	str	r0, [sp, #8]
 800547e:	9006      	str	r0, [sp, #24]
 8005480:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005484:	4809      	ldr	r0, [pc, #36]	@ (80054ac <siprintf+0x38>)
 8005486:	9107      	str	r1, [sp, #28]
 8005488:	9104      	str	r1, [sp, #16]
 800548a:	4909      	ldr	r1, [pc, #36]	@ (80054b0 <siprintf+0x3c>)
 800548c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005490:	9105      	str	r1, [sp, #20]
 8005492:	6800      	ldr	r0, [r0, #0]
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	a902      	add	r1, sp, #8
 8005498:	f002 fbb4 	bl	8007c04 <_svfiprintf_r>
 800549c:	9b02      	ldr	r3, [sp, #8]
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	b01c      	add	sp, #112	@ 0x70
 80054a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054a8:	b003      	add	sp, #12
 80054aa:	4770      	bx	lr
 80054ac:	2000001c 	.word	0x2000001c
 80054b0:	ffff0208 	.word	0xffff0208

080054b4 <__sread>:
 80054b4:	b510      	push	{r4, lr}
 80054b6:	460c      	mov	r4, r1
 80054b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054bc:	f000 f86c 	bl	8005598 <_read_r>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	bfab      	itete	ge
 80054c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054c6:	89a3      	ldrhlt	r3, [r4, #12]
 80054c8:	181b      	addge	r3, r3, r0
 80054ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054ce:	bfac      	ite	ge
 80054d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054d2:	81a3      	strhlt	r3, [r4, #12]
 80054d4:	bd10      	pop	{r4, pc}

080054d6 <__swrite>:
 80054d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054da:	461f      	mov	r7, r3
 80054dc:	898b      	ldrh	r3, [r1, #12]
 80054de:	05db      	lsls	r3, r3, #23
 80054e0:	4605      	mov	r5, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	4616      	mov	r6, r2
 80054e6:	d505      	bpl.n	80054f4 <__swrite+0x1e>
 80054e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ec:	2302      	movs	r3, #2
 80054ee:	2200      	movs	r2, #0
 80054f0:	f000 f840 	bl	8005574 <_lseek_r>
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054fe:	81a3      	strh	r3, [r4, #12]
 8005500:	4632      	mov	r2, r6
 8005502:	463b      	mov	r3, r7
 8005504:	4628      	mov	r0, r5
 8005506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	f000 b857 	b.w	80055bc <_write_r>

0800550e <__sseek>:
 800550e:	b510      	push	{r4, lr}
 8005510:	460c      	mov	r4, r1
 8005512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005516:	f000 f82d 	bl	8005574 <_lseek_r>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	bf15      	itete	ne
 8005520:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005522:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005526:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800552a:	81a3      	strheq	r3, [r4, #12]
 800552c:	bf18      	it	ne
 800552e:	81a3      	strhne	r3, [r4, #12]
 8005530:	bd10      	pop	{r4, pc}

08005532 <__sclose>:
 8005532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005536:	f000 b80d 	b.w	8005554 <_close_r>

0800553a <memset>:
 800553a:	4402      	add	r2, r0
 800553c:	4603      	mov	r3, r0
 800553e:	4293      	cmp	r3, r2
 8005540:	d100      	bne.n	8005544 <memset+0xa>
 8005542:	4770      	bx	lr
 8005544:	f803 1b01 	strb.w	r1, [r3], #1
 8005548:	e7f9      	b.n	800553e <memset+0x4>
	...

0800554c <_localeconv_r>:
 800554c:	4800      	ldr	r0, [pc, #0]	@ (8005550 <_localeconv_r+0x4>)
 800554e:	4770      	bx	lr
 8005550:	2000015c 	.word	0x2000015c

08005554 <_close_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d06      	ldr	r5, [pc, #24]	@ (8005570 <_close_r+0x1c>)
 8005558:	2300      	movs	r3, #0
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	f7fc ffce 	bl	8002500 <_close>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_close_r+0x1a>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_close_r+0x1a>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	20000410 	.word	0x20000410

08005574 <_lseek_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d07      	ldr	r5, [pc, #28]	@ (8005594 <_lseek_r+0x20>)
 8005578:	4604      	mov	r4, r0
 800557a:	4608      	mov	r0, r1
 800557c:	4611      	mov	r1, r2
 800557e:	2200      	movs	r2, #0
 8005580:	602a      	str	r2, [r5, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	f7fc ffe3 	bl	800254e <_lseek>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_lseek_r+0x1e>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_lseek_r+0x1e>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	20000410 	.word	0x20000410

08005598 <_read_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d07      	ldr	r5, [pc, #28]	@ (80055b8 <_read_r+0x20>)
 800559c:	4604      	mov	r4, r0
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	2200      	movs	r2, #0
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f7fc ff71 	bl	800248e <_read>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_read_r+0x1e>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_read_r+0x1e>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	20000410 	.word	0x20000410

080055bc <_write_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d07      	ldr	r5, [pc, #28]	@ (80055dc <_write_r+0x20>)
 80055c0:	4604      	mov	r4, r0
 80055c2:	4608      	mov	r0, r1
 80055c4:	4611      	mov	r1, r2
 80055c6:	2200      	movs	r2, #0
 80055c8:	602a      	str	r2, [r5, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f7fc ff7c 	bl	80024c8 <_write>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_write_r+0x1e>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_write_r+0x1e>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	20000410 	.word	0x20000410

080055e0 <__errno>:
 80055e0:	4b01      	ldr	r3, [pc, #4]	@ (80055e8 <__errno+0x8>)
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	2000001c 	.word	0x2000001c

080055ec <__libc_init_array>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005624 <__libc_init_array+0x38>)
 80055f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005628 <__libc_init_array+0x3c>)
 80055f2:	1b64      	subs	r4, r4, r5
 80055f4:	10a4      	asrs	r4, r4, #2
 80055f6:	2600      	movs	r6, #0
 80055f8:	42a6      	cmp	r6, r4
 80055fa:	d109      	bne.n	8005610 <__libc_init_array+0x24>
 80055fc:	4d0b      	ldr	r5, [pc, #44]	@ (800562c <__libc_init_array+0x40>)
 80055fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005630 <__libc_init_array+0x44>)
 8005600:	f003 fb70 	bl	8008ce4 <_init>
 8005604:	1b64      	subs	r4, r4, r5
 8005606:	10a4      	asrs	r4, r4, #2
 8005608:	2600      	movs	r6, #0
 800560a:	42a6      	cmp	r6, r4
 800560c:	d105      	bne.n	800561a <__libc_init_array+0x2e>
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	f855 3b04 	ldr.w	r3, [r5], #4
 8005614:	4798      	blx	r3
 8005616:	3601      	adds	r6, #1
 8005618:	e7ee      	b.n	80055f8 <__libc_init_array+0xc>
 800561a:	f855 3b04 	ldr.w	r3, [r5], #4
 800561e:	4798      	blx	r3
 8005620:	3601      	adds	r6, #1
 8005622:	e7f2      	b.n	800560a <__libc_init_array+0x1e>
 8005624:	0800ac10 	.word	0x0800ac10
 8005628:	0800ac10 	.word	0x0800ac10
 800562c:	0800ac10 	.word	0x0800ac10
 8005630:	0800ac14 	.word	0x0800ac14

08005634 <__retarget_lock_init_recursive>:
 8005634:	4770      	bx	lr

08005636 <__retarget_lock_acquire_recursive>:
 8005636:	4770      	bx	lr

08005638 <__retarget_lock_release_recursive>:
 8005638:	4770      	bx	lr
	...

0800563c <nanf>:
 800563c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005644 <nanf+0x8>
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	7fc00000 	.word	0x7fc00000

08005648 <quorem>:
 8005648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	6903      	ldr	r3, [r0, #16]
 800564e:	690c      	ldr	r4, [r1, #16]
 8005650:	42a3      	cmp	r3, r4
 8005652:	4607      	mov	r7, r0
 8005654:	db7e      	blt.n	8005754 <quorem+0x10c>
 8005656:	3c01      	subs	r4, #1
 8005658:	f101 0814 	add.w	r8, r1, #20
 800565c:	00a3      	lsls	r3, r4, #2
 800565e:	f100 0514 	add.w	r5, r0, #20
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800566e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005672:	3301      	adds	r3, #1
 8005674:	429a      	cmp	r2, r3
 8005676:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800567a:	fbb2 f6f3 	udiv	r6, r2, r3
 800567e:	d32e      	bcc.n	80056de <quorem+0x96>
 8005680:	f04f 0a00 	mov.w	sl, #0
 8005684:	46c4      	mov	ip, r8
 8005686:	46ae      	mov	lr, r5
 8005688:	46d3      	mov	fp, sl
 800568a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800568e:	b298      	uxth	r0, r3
 8005690:	fb06 a000 	mla	r0, r6, r0, sl
 8005694:	0c02      	lsrs	r2, r0, #16
 8005696:	0c1b      	lsrs	r3, r3, #16
 8005698:	fb06 2303 	mla	r3, r6, r3, r2
 800569c:	f8de 2000 	ldr.w	r2, [lr]
 80056a0:	b280      	uxth	r0, r0
 80056a2:	b292      	uxth	r2, r2
 80056a4:	1a12      	subs	r2, r2, r0
 80056a6:	445a      	add	r2, fp
 80056a8:	f8de 0000 	ldr.w	r0, [lr]
 80056ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80056b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80056ba:	b292      	uxth	r2, r2
 80056bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80056c0:	45e1      	cmp	r9, ip
 80056c2:	f84e 2b04 	str.w	r2, [lr], #4
 80056c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80056ca:	d2de      	bcs.n	800568a <quorem+0x42>
 80056cc:	9b00      	ldr	r3, [sp, #0]
 80056ce:	58eb      	ldr	r3, [r5, r3]
 80056d0:	b92b      	cbnz	r3, 80056de <quorem+0x96>
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	3b04      	subs	r3, #4
 80056d6:	429d      	cmp	r5, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	d32f      	bcc.n	800573c <quorem+0xf4>
 80056dc:	613c      	str	r4, [r7, #16]
 80056de:	4638      	mov	r0, r7
 80056e0:	f001 f9c2 	bl	8006a68 <__mcmp>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	db25      	blt.n	8005734 <quorem+0xec>
 80056e8:	4629      	mov	r1, r5
 80056ea:	2000      	movs	r0, #0
 80056ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80056f0:	f8d1 c000 	ldr.w	ip, [r1]
 80056f4:	fa1f fe82 	uxth.w	lr, r2
 80056f8:	fa1f f38c 	uxth.w	r3, ip
 80056fc:	eba3 030e 	sub.w	r3, r3, lr
 8005700:	4403      	add	r3, r0
 8005702:	0c12      	lsrs	r2, r2, #16
 8005704:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005708:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800570c:	b29b      	uxth	r3, r3
 800570e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005712:	45c1      	cmp	r9, r8
 8005714:	f841 3b04 	str.w	r3, [r1], #4
 8005718:	ea4f 4022 	mov.w	r0, r2, asr #16
 800571c:	d2e6      	bcs.n	80056ec <quorem+0xa4>
 800571e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005726:	b922      	cbnz	r2, 8005732 <quorem+0xea>
 8005728:	3b04      	subs	r3, #4
 800572a:	429d      	cmp	r5, r3
 800572c:	461a      	mov	r2, r3
 800572e:	d30b      	bcc.n	8005748 <quorem+0x100>
 8005730:	613c      	str	r4, [r7, #16]
 8005732:	3601      	adds	r6, #1
 8005734:	4630      	mov	r0, r6
 8005736:	b003      	add	sp, #12
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	3b04      	subs	r3, #4
 8005740:	2a00      	cmp	r2, #0
 8005742:	d1cb      	bne.n	80056dc <quorem+0x94>
 8005744:	3c01      	subs	r4, #1
 8005746:	e7c6      	b.n	80056d6 <quorem+0x8e>
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	3b04      	subs	r3, #4
 800574c:	2a00      	cmp	r2, #0
 800574e:	d1ef      	bne.n	8005730 <quorem+0xe8>
 8005750:	3c01      	subs	r4, #1
 8005752:	e7ea      	b.n	800572a <quorem+0xe2>
 8005754:	2000      	movs	r0, #0
 8005756:	e7ee      	b.n	8005736 <quorem+0xee>

08005758 <_dtoa_r>:
 8005758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575c:	69c7      	ldr	r7, [r0, #28]
 800575e:	b099      	sub	sp, #100	@ 0x64
 8005760:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005764:	ec55 4b10 	vmov	r4, r5, d0
 8005768:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800576a:	9109      	str	r1, [sp, #36]	@ 0x24
 800576c:	4683      	mov	fp, r0
 800576e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005770:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005772:	b97f      	cbnz	r7, 8005794 <_dtoa_r+0x3c>
 8005774:	2010      	movs	r0, #16
 8005776:	f000 fdfd 	bl	8006374 <malloc>
 800577a:	4602      	mov	r2, r0
 800577c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005780:	b920      	cbnz	r0, 800578c <_dtoa_r+0x34>
 8005782:	4ba7      	ldr	r3, [pc, #668]	@ (8005a20 <_dtoa_r+0x2c8>)
 8005784:	21ef      	movs	r1, #239	@ 0xef
 8005786:	48a7      	ldr	r0, [pc, #668]	@ (8005a24 <_dtoa_r+0x2cc>)
 8005788:	f002 fc36 	bl	8007ff8 <__assert_func>
 800578c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005790:	6007      	str	r7, [r0, #0]
 8005792:	60c7      	str	r7, [r0, #12]
 8005794:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005798:	6819      	ldr	r1, [r3, #0]
 800579a:	b159      	cbz	r1, 80057b4 <_dtoa_r+0x5c>
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	604a      	str	r2, [r1, #4]
 80057a0:	2301      	movs	r3, #1
 80057a2:	4093      	lsls	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]
 80057a6:	4658      	mov	r0, fp
 80057a8:	f000 feda 	bl	8006560 <_Bfree>
 80057ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	1e2b      	subs	r3, r5, #0
 80057b6:	bfb9      	ittee	lt
 80057b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80057bc:	9303      	strlt	r3, [sp, #12]
 80057be:	2300      	movge	r3, #0
 80057c0:	6033      	strge	r3, [r6, #0]
 80057c2:	9f03      	ldr	r7, [sp, #12]
 80057c4:	4b98      	ldr	r3, [pc, #608]	@ (8005a28 <_dtoa_r+0x2d0>)
 80057c6:	bfbc      	itt	lt
 80057c8:	2201      	movlt	r2, #1
 80057ca:	6032      	strlt	r2, [r6, #0]
 80057cc:	43bb      	bics	r3, r7
 80057ce:	d112      	bne.n	80057f6 <_dtoa_r+0x9e>
 80057d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80057d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80057dc:	4323      	orrs	r3, r4
 80057de:	f000 854d 	beq.w	800627c <_dtoa_r+0xb24>
 80057e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80057e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005a3c <_dtoa_r+0x2e4>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 854f 	beq.w	800628c <_dtoa_r+0xb34>
 80057ee:	f10a 0303 	add.w	r3, sl, #3
 80057f2:	f000 bd49 	b.w	8006288 <_dtoa_r+0xb30>
 80057f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	ec51 0b17 	vmov	r0, r1, d7
 8005800:	2300      	movs	r3, #0
 8005802:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005806:	f7fb f97f 	bl	8000b08 <__aeabi_dcmpeq>
 800580a:	4680      	mov	r8, r0
 800580c:	b158      	cbz	r0, 8005826 <_dtoa_r+0xce>
 800580e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005810:	2301      	movs	r3, #1
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005816:	b113      	cbz	r3, 800581e <_dtoa_r+0xc6>
 8005818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800581a:	4b84      	ldr	r3, [pc, #528]	@ (8005a2c <_dtoa_r+0x2d4>)
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005a40 <_dtoa_r+0x2e8>
 8005822:	f000 bd33 	b.w	800628c <_dtoa_r+0xb34>
 8005826:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800582a:	aa16      	add	r2, sp, #88	@ 0x58
 800582c:	a917      	add	r1, sp, #92	@ 0x5c
 800582e:	4658      	mov	r0, fp
 8005830:	f001 fa3a 	bl	8006ca8 <__d2b>
 8005834:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005838:	4681      	mov	r9, r0
 800583a:	2e00      	cmp	r6, #0
 800583c:	d077      	beq.n	800592e <_dtoa_r+0x1d6>
 800583e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005840:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800584c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005850:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005854:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005858:	4619      	mov	r1, r3
 800585a:	2200      	movs	r2, #0
 800585c:	4b74      	ldr	r3, [pc, #464]	@ (8005a30 <_dtoa_r+0x2d8>)
 800585e:	f7fa fd33 	bl	80002c8 <__aeabi_dsub>
 8005862:	a369      	add	r3, pc, #420	@ (adr r3, 8005a08 <_dtoa_r+0x2b0>)
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f7fa fee6 	bl	8000638 <__aeabi_dmul>
 800586c:	a368      	add	r3, pc, #416	@ (adr r3, 8005a10 <_dtoa_r+0x2b8>)
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f7fa fd2b 	bl	80002cc <__adddf3>
 8005876:	4604      	mov	r4, r0
 8005878:	4630      	mov	r0, r6
 800587a:	460d      	mov	r5, r1
 800587c:	f7fa fe72 	bl	8000564 <__aeabi_i2d>
 8005880:	a365      	add	r3, pc, #404	@ (adr r3, 8005a18 <_dtoa_r+0x2c0>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fa fed7 	bl	8000638 <__aeabi_dmul>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	f7fa fd1b 	bl	80002cc <__adddf3>
 8005896:	4604      	mov	r4, r0
 8005898:	460d      	mov	r5, r1
 800589a:	f7fb f97d 	bl	8000b98 <__aeabi_d2iz>
 800589e:	2200      	movs	r2, #0
 80058a0:	4607      	mov	r7, r0
 80058a2:	2300      	movs	r3, #0
 80058a4:	4620      	mov	r0, r4
 80058a6:	4629      	mov	r1, r5
 80058a8:	f7fb f938 	bl	8000b1c <__aeabi_dcmplt>
 80058ac:	b140      	cbz	r0, 80058c0 <_dtoa_r+0x168>
 80058ae:	4638      	mov	r0, r7
 80058b0:	f7fa fe58 	bl	8000564 <__aeabi_i2d>
 80058b4:	4622      	mov	r2, r4
 80058b6:	462b      	mov	r3, r5
 80058b8:	f7fb f926 	bl	8000b08 <__aeabi_dcmpeq>
 80058bc:	b900      	cbnz	r0, 80058c0 <_dtoa_r+0x168>
 80058be:	3f01      	subs	r7, #1
 80058c0:	2f16      	cmp	r7, #22
 80058c2:	d851      	bhi.n	8005968 <_dtoa_r+0x210>
 80058c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005a34 <_dtoa_r+0x2dc>)
 80058c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058d2:	f7fb f923 	bl	8000b1c <__aeabi_dcmplt>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d048      	beq.n	800596c <_dtoa_r+0x214>
 80058da:	3f01      	subs	r7, #1
 80058dc:	2300      	movs	r3, #0
 80058de:	9312      	str	r3, [sp, #72]	@ 0x48
 80058e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80058e2:	1b9b      	subs	r3, r3, r6
 80058e4:	1e5a      	subs	r2, r3, #1
 80058e6:	bf44      	itt	mi
 80058e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80058ec:	2300      	movmi	r3, #0
 80058ee:	9208      	str	r2, [sp, #32]
 80058f0:	bf54      	ite	pl
 80058f2:	f04f 0800 	movpl.w	r8, #0
 80058f6:	9308      	strmi	r3, [sp, #32]
 80058f8:	2f00      	cmp	r7, #0
 80058fa:	db39      	blt.n	8005970 <_dtoa_r+0x218>
 80058fc:	9b08      	ldr	r3, [sp, #32]
 80058fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005900:	443b      	add	r3, r7
 8005902:	9308      	str	r3, [sp, #32]
 8005904:	2300      	movs	r3, #0
 8005906:	930a      	str	r3, [sp, #40]	@ 0x28
 8005908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800590a:	2b09      	cmp	r3, #9
 800590c:	d864      	bhi.n	80059d8 <_dtoa_r+0x280>
 800590e:	2b05      	cmp	r3, #5
 8005910:	bfc4      	itt	gt
 8005912:	3b04      	subgt	r3, #4
 8005914:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005918:	f1a3 0302 	sub.w	r3, r3, #2
 800591c:	bfcc      	ite	gt
 800591e:	2400      	movgt	r4, #0
 8005920:	2401      	movle	r4, #1
 8005922:	2b03      	cmp	r3, #3
 8005924:	d863      	bhi.n	80059ee <_dtoa_r+0x296>
 8005926:	e8df f003 	tbb	[pc, r3]
 800592a:	372a      	.short	0x372a
 800592c:	5535      	.short	0x5535
 800592e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005932:	441e      	add	r6, r3
 8005934:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005938:	2b20      	cmp	r3, #32
 800593a:	bfc1      	itttt	gt
 800593c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005940:	409f      	lslgt	r7, r3
 8005942:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005946:	fa24 f303 	lsrgt.w	r3, r4, r3
 800594a:	bfd6      	itet	le
 800594c:	f1c3 0320 	rsble	r3, r3, #32
 8005950:	ea47 0003 	orrgt.w	r0, r7, r3
 8005954:	fa04 f003 	lslle.w	r0, r4, r3
 8005958:	f7fa fdf4 	bl	8000544 <__aeabi_ui2d>
 800595c:	2201      	movs	r2, #1
 800595e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005962:	3e01      	subs	r6, #1
 8005964:	9214      	str	r2, [sp, #80]	@ 0x50
 8005966:	e777      	b.n	8005858 <_dtoa_r+0x100>
 8005968:	2301      	movs	r3, #1
 800596a:	e7b8      	b.n	80058de <_dtoa_r+0x186>
 800596c:	9012      	str	r0, [sp, #72]	@ 0x48
 800596e:	e7b7      	b.n	80058e0 <_dtoa_r+0x188>
 8005970:	427b      	negs	r3, r7
 8005972:	930a      	str	r3, [sp, #40]	@ 0x28
 8005974:	2300      	movs	r3, #0
 8005976:	eba8 0807 	sub.w	r8, r8, r7
 800597a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800597c:	e7c4      	b.n	8005908 <_dtoa_r+0x1b0>
 800597e:	2300      	movs	r3, #0
 8005980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	dc35      	bgt.n	80059f4 <_dtoa_r+0x29c>
 8005988:	2301      	movs	r3, #1
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	9307      	str	r3, [sp, #28]
 800598e:	461a      	mov	r2, r3
 8005990:	920e      	str	r2, [sp, #56]	@ 0x38
 8005992:	e00b      	b.n	80059ac <_dtoa_r+0x254>
 8005994:	2301      	movs	r3, #1
 8005996:	e7f3      	b.n	8005980 <_dtoa_r+0x228>
 8005998:	2300      	movs	r3, #0
 800599a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800599c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	3301      	adds	r3, #1
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	9307      	str	r3, [sp, #28]
 80059a8:	bfb8      	it	lt
 80059aa:	2301      	movlt	r3, #1
 80059ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80059b0:	2100      	movs	r1, #0
 80059b2:	2204      	movs	r2, #4
 80059b4:	f102 0514 	add.w	r5, r2, #20
 80059b8:	429d      	cmp	r5, r3
 80059ba:	d91f      	bls.n	80059fc <_dtoa_r+0x2a4>
 80059bc:	6041      	str	r1, [r0, #4]
 80059be:	4658      	mov	r0, fp
 80059c0:	f000 fd8e 	bl	80064e0 <_Balloc>
 80059c4:	4682      	mov	sl, r0
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d13c      	bne.n	8005a44 <_dtoa_r+0x2ec>
 80059ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005a38 <_dtoa_r+0x2e0>)
 80059cc:	4602      	mov	r2, r0
 80059ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80059d2:	e6d8      	b.n	8005786 <_dtoa_r+0x2e>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e7e0      	b.n	800599a <_dtoa_r+0x242>
 80059d8:	2401      	movs	r4, #1
 80059da:	2300      	movs	r3, #0
 80059dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80059de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80059e0:	f04f 33ff 	mov.w	r3, #4294967295
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	9307      	str	r3, [sp, #28]
 80059e8:	2200      	movs	r2, #0
 80059ea:	2312      	movs	r3, #18
 80059ec:	e7d0      	b.n	8005990 <_dtoa_r+0x238>
 80059ee:	2301      	movs	r3, #1
 80059f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059f2:	e7f5      	b.n	80059e0 <_dtoa_r+0x288>
 80059f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	9307      	str	r3, [sp, #28]
 80059fa:	e7d7      	b.n	80059ac <_dtoa_r+0x254>
 80059fc:	3101      	adds	r1, #1
 80059fe:	0052      	lsls	r2, r2, #1
 8005a00:	e7d8      	b.n	80059b4 <_dtoa_r+0x25c>
 8005a02:	bf00      	nop
 8005a04:	f3af 8000 	nop.w
 8005a08:	636f4361 	.word	0x636f4361
 8005a0c:	3fd287a7 	.word	0x3fd287a7
 8005a10:	8b60c8b3 	.word	0x8b60c8b3
 8005a14:	3fc68a28 	.word	0x3fc68a28
 8005a18:	509f79fb 	.word	0x509f79fb
 8005a1c:	3fd34413 	.word	0x3fd34413
 8005a20:	0800a81e 	.word	0x0800a81e
 8005a24:	0800a835 	.word	0x0800a835
 8005a28:	7ff00000 	.word	0x7ff00000
 8005a2c:	0800a7e9 	.word	0x0800a7e9
 8005a30:	3ff80000 	.word	0x3ff80000
 8005a34:	0800a930 	.word	0x0800a930
 8005a38:	0800a88d 	.word	0x0800a88d
 8005a3c:	0800a81a 	.word	0x0800a81a
 8005a40:	0800a7e8 	.word	0x0800a7e8
 8005a44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a48:	6018      	str	r0, [r3, #0]
 8005a4a:	9b07      	ldr	r3, [sp, #28]
 8005a4c:	2b0e      	cmp	r3, #14
 8005a4e:	f200 80a4 	bhi.w	8005b9a <_dtoa_r+0x442>
 8005a52:	2c00      	cmp	r4, #0
 8005a54:	f000 80a1 	beq.w	8005b9a <_dtoa_r+0x442>
 8005a58:	2f00      	cmp	r7, #0
 8005a5a:	dd33      	ble.n	8005ac4 <_dtoa_r+0x36c>
 8005a5c:	4bad      	ldr	r3, [pc, #692]	@ (8005d14 <_dtoa_r+0x5bc>)
 8005a5e:	f007 020f 	and.w	r2, r7, #15
 8005a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a66:	ed93 7b00 	vldr	d7, [r3]
 8005a6a:	05f8      	lsls	r0, r7, #23
 8005a6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a74:	d516      	bpl.n	8005aa4 <_dtoa_r+0x34c>
 8005a76:	4ba8      	ldr	r3, [pc, #672]	@ (8005d18 <_dtoa_r+0x5c0>)
 8005a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a80:	f7fa ff04 	bl	800088c <__aeabi_ddiv>
 8005a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a88:	f004 040f 	and.w	r4, r4, #15
 8005a8c:	2603      	movs	r6, #3
 8005a8e:	4da2      	ldr	r5, [pc, #648]	@ (8005d18 <_dtoa_r+0x5c0>)
 8005a90:	b954      	cbnz	r4, 8005aa8 <_dtoa_r+0x350>
 8005a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a9a:	f7fa fef7 	bl	800088c <__aeabi_ddiv>
 8005a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aa2:	e028      	b.n	8005af6 <_dtoa_r+0x39e>
 8005aa4:	2602      	movs	r6, #2
 8005aa6:	e7f2      	b.n	8005a8e <_dtoa_r+0x336>
 8005aa8:	07e1      	lsls	r1, r4, #31
 8005aaa:	d508      	bpl.n	8005abe <_dtoa_r+0x366>
 8005aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ab4:	f7fa fdc0 	bl	8000638 <__aeabi_dmul>
 8005ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005abc:	3601      	adds	r6, #1
 8005abe:	1064      	asrs	r4, r4, #1
 8005ac0:	3508      	adds	r5, #8
 8005ac2:	e7e5      	b.n	8005a90 <_dtoa_r+0x338>
 8005ac4:	f000 80d2 	beq.w	8005c6c <_dtoa_r+0x514>
 8005ac8:	427c      	negs	r4, r7
 8005aca:	4b92      	ldr	r3, [pc, #584]	@ (8005d14 <_dtoa_r+0x5bc>)
 8005acc:	4d92      	ldr	r5, [pc, #584]	@ (8005d18 <_dtoa_r+0x5c0>)
 8005ace:	f004 020f 	and.w	r2, r4, #15
 8005ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ade:	f7fa fdab 	bl	8000638 <__aeabi_dmul>
 8005ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ae6:	1124      	asrs	r4, r4, #4
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2602      	movs	r6, #2
 8005aec:	2c00      	cmp	r4, #0
 8005aee:	f040 80b2 	bne.w	8005c56 <_dtoa_r+0x4fe>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1d3      	bne.n	8005a9e <_dtoa_r+0x346>
 8005af6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005af8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80b7 	beq.w	8005c70 <_dtoa_r+0x518>
 8005b02:	4b86      	ldr	r3, [pc, #536]	@ (8005d1c <_dtoa_r+0x5c4>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fb f807 	bl	8000b1c <__aeabi_dcmplt>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f000 80ae 	beq.w	8005c70 <_dtoa_r+0x518>
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80aa 	beq.w	8005c70 <_dtoa_r+0x518>
 8005b1c:	9b00      	ldr	r3, [sp, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	dd37      	ble.n	8005b92 <_dtoa_r+0x43a>
 8005b22:	1e7b      	subs	r3, r7, #1
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	4620      	mov	r0, r4
 8005b28:	4b7d      	ldr	r3, [pc, #500]	@ (8005d20 <_dtoa_r+0x5c8>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	f7fa fd83 	bl	8000638 <__aeabi_dmul>
 8005b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b36:	9c00      	ldr	r4, [sp, #0]
 8005b38:	3601      	adds	r6, #1
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f7fa fd12 	bl	8000564 <__aeabi_i2d>
 8005b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b44:	f7fa fd78 	bl	8000638 <__aeabi_dmul>
 8005b48:	4b76      	ldr	r3, [pc, #472]	@ (8005d24 <_dtoa_r+0x5cc>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f7fa fbbe 	bl	80002cc <__adddf3>
 8005b50:	4605      	mov	r5, r0
 8005b52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b56:	2c00      	cmp	r4, #0
 8005b58:	f040 808d 	bne.w	8005c76 <_dtoa_r+0x51e>
 8005b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b60:	4b71      	ldr	r3, [pc, #452]	@ (8005d28 <_dtoa_r+0x5d0>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	f7fa fbb0 	bl	80002c8 <__aeabi_dsub>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b70:	462a      	mov	r2, r5
 8005b72:	4633      	mov	r3, r6
 8005b74:	f7fa fff0 	bl	8000b58 <__aeabi_dcmpgt>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	f040 828b 	bne.w	8006094 <_dtoa_r+0x93c>
 8005b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b82:	462a      	mov	r2, r5
 8005b84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b88:	f7fa ffc8 	bl	8000b1c <__aeabi_dcmplt>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	f040 8128 	bne.w	8005de2 <_dtoa_r+0x68a>
 8005b92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f2c0 815a 	blt.w	8005e56 <_dtoa_r+0x6fe>
 8005ba2:	2f0e      	cmp	r7, #14
 8005ba4:	f300 8157 	bgt.w	8005e56 <_dtoa_r+0x6fe>
 8005ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8005d14 <_dtoa_r+0x5bc>)
 8005baa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bae:	ed93 7b00 	vldr	d7, [r3]
 8005bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	ed8d 7b00 	vstr	d7, [sp]
 8005bba:	da03      	bge.n	8005bc4 <_dtoa_r+0x46c>
 8005bbc:	9b07      	ldr	r3, [sp, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f340 8101 	ble.w	8005dc6 <_dtoa_r+0x66e>
 8005bc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005bc8:	4656      	mov	r6, sl
 8005bca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f7fa fe5b 	bl	800088c <__aeabi_ddiv>
 8005bd6:	f7fa ffdf 	bl	8000b98 <__aeabi_d2iz>
 8005bda:	4680      	mov	r8, r0
 8005bdc:	f7fa fcc2 	bl	8000564 <__aeabi_i2d>
 8005be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005be4:	f7fa fd28 	bl	8000638 <__aeabi_dmul>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4620      	mov	r0, r4
 8005bee:	4629      	mov	r1, r5
 8005bf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005bf4:	f7fa fb68 	bl	80002c8 <__aeabi_dsub>
 8005bf8:	f806 4b01 	strb.w	r4, [r6], #1
 8005bfc:	9d07      	ldr	r5, [sp, #28]
 8005bfe:	eba6 040a 	sub.w	r4, r6, sl
 8005c02:	42a5      	cmp	r5, r4
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	f040 8117 	bne.w	8005e3a <_dtoa_r+0x6e2>
 8005c0c:	f7fa fb5e 	bl	80002cc <__adddf3>
 8005c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c14:	4604      	mov	r4, r0
 8005c16:	460d      	mov	r5, r1
 8005c18:	f7fa ff9e 	bl	8000b58 <__aeabi_dcmpgt>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f040 80f9 	bne.w	8005e14 <_dtoa_r+0x6bc>
 8005c22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c26:	4620      	mov	r0, r4
 8005c28:	4629      	mov	r1, r5
 8005c2a:	f7fa ff6d 	bl	8000b08 <__aeabi_dcmpeq>
 8005c2e:	b118      	cbz	r0, 8005c38 <_dtoa_r+0x4e0>
 8005c30:	f018 0f01 	tst.w	r8, #1
 8005c34:	f040 80ee 	bne.w	8005e14 <_dtoa_r+0x6bc>
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4658      	mov	r0, fp
 8005c3c:	f000 fc90 	bl	8006560 <_Bfree>
 8005c40:	2300      	movs	r3, #0
 8005c42:	7033      	strb	r3, [r6, #0]
 8005c44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c46:	3701      	adds	r7, #1
 8005c48:	601f      	str	r7, [r3, #0]
 8005c4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 831d 	beq.w	800628c <_dtoa_r+0xb34>
 8005c52:	601e      	str	r6, [r3, #0]
 8005c54:	e31a      	b.n	800628c <_dtoa_r+0xb34>
 8005c56:	07e2      	lsls	r2, r4, #31
 8005c58:	d505      	bpl.n	8005c66 <_dtoa_r+0x50e>
 8005c5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c5e:	f7fa fceb 	bl	8000638 <__aeabi_dmul>
 8005c62:	3601      	adds	r6, #1
 8005c64:	2301      	movs	r3, #1
 8005c66:	1064      	asrs	r4, r4, #1
 8005c68:	3508      	adds	r5, #8
 8005c6a:	e73f      	b.n	8005aec <_dtoa_r+0x394>
 8005c6c:	2602      	movs	r6, #2
 8005c6e:	e742      	b.n	8005af6 <_dtoa_r+0x39e>
 8005c70:	9c07      	ldr	r4, [sp, #28]
 8005c72:	9704      	str	r7, [sp, #16]
 8005c74:	e761      	b.n	8005b3a <_dtoa_r+0x3e2>
 8005c76:	4b27      	ldr	r3, [pc, #156]	@ (8005d14 <_dtoa_r+0x5bc>)
 8005c78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c82:	4454      	add	r4, sl
 8005c84:	2900      	cmp	r1, #0
 8005c86:	d053      	beq.n	8005d30 <_dtoa_r+0x5d8>
 8005c88:	4928      	ldr	r1, [pc, #160]	@ (8005d2c <_dtoa_r+0x5d4>)
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f7fa fdfe 	bl	800088c <__aeabi_ddiv>
 8005c90:	4633      	mov	r3, r6
 8005c92:	462a      	mov	r2, r5
 8005c94:	f7fa fb18 	bl	80002c8 <__aeabi_dsub>
 8005c98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c9c:	4656      	mov	r6, sl
 8005c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca2:	f7fa ff79 	bl	8000b98 <__aeabi_d2iz>
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	f7fa fc5c 	bl	8000564 <__aeabi_i2d>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb4:	f7fa fb08 	bl	80002c8 <__aeabi_dsub>
 8005cb8:	3530      	adds	r5, #48	@ 0x30
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cc2:	f806 5b01 	strb.w	r5, [r6], #1
 8005cc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cca:	f7fa ff27 	bl	8000b1c <__aeabi_dcmplt>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d171      	bne.n	8005db6 <_dtoa_r+0x65e>
 8005cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cd6:	4911      	ldr	r1, [pc, #68]	@ (8005d1c <_dtoa_r+0x5c4>)
 8005cd8:	2000      	movs	r0, #0
 8005cda:	f7fa faf5 	bl	80002c8 <__aeabi_dsub>
 8005cde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ce2:	f7fa ff1b 	bl	8000b1c <__aeabi_dcmplt>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	f040 8095 	bne.w	8005e16 <_dtoa_r+0x6be>
 8005cec:	42a6      	cmp	r6, r4
 8005cee:	f43f af50 	beq.w	8005b92 <_dtoa_r+0x43a>
 8005cf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8005d20 <_dtoa_r+0x5c8>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f7fa fc9d 	bl	8000638 <__aeabi_dmul>
 8005cfe:	4b08      	ldr	r3, [pc, #32]	@ (8005d20 <_dtoa_r+0x5c8>)
 8005d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d04:	2200      	movs	r2, #0
 8005d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0a:	f7fa fc95 	bl	8000638 <__aeabi_dmul>
 8005d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d12:	e7c4      	b.n	8005c9e <_dtoa_r+0x546>
 8005d14:	0800a930 	.word	0x0800a930
 8005d18:	0800a908 	.word	0x0800a908
 8005d1c:	3ff00000 	.word	0x3ff00000
 8005d20:	40240000 	.word	0x40240000
 8005d24:	401c0000 	.word	0x401c0000
 8005d28:	40140000 	.word	0x40140000
 8005d2c:	3fe00000 	.word	0x3fe00000
 8005d30:	4631      	mov	r1, r6
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7fa fc80 	bl	8000638 <__aeabi_dmul>
 8005d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005d3e:	4656      	mov	r6, sl
 8005d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d44:	f7fa ff28 	bl	8000b98 <__aeabi_d2iz>
 8005d48:	4605      	mov	r5, r0
 8005d4a:	f7fa fc0b 	bl	8000564 <__aeabi_i2d>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d56:	f7fa fab7 	bl	80002c8 <__aeabi_dsub>
 8005d5a:	3530      	adds	r5, #48	@ 0x30
 8005d5c:	f806 5b01 	strb.w	r5, [r6], #1
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	42a6      	cmp	r6, r4
 8005d66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	d124      	bne.n	8005dba <_dtoa_r+0x662>
 8005d70:	4bac      	ldr	r3, [pc, #688]	@ (8006024 <_dtoa_r+0x8cc>)
 8005d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d76:	f7fa faa9 	bl	80002cc <__adddf3>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d82:	f7fa fee9 	bl	8000b58 <__aeabi_dcmpgt>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d145      	bne.n	8005e16 <_dtoa_r+0x6be>
 8005d8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d8e:	49a5      	ldr	r1, [pc, #660]	@ (8006024 <_dtoa_r+0x8cc>)
 8005d90:	2000      	movs	r0, #0
 8005d92:	f7fa fa99 	bl	80002c8 <__aeabi_dsub>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d9e:	f7fa febd 	bl	8000b1c <__aeabi_dcmplt>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	f43f aef5 	beq.w	8005b92 <_dtoa_r+0x43a>
 8005da8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005daa:	1e73      	subs	r3, r6, #1
 8005dac:	9315      	str	r3, [sp, #84]	@ 0x54
 8005dae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005db2:	2b30      	cmp	r3, #48	@ 0x30
 8005db4:	d0f8      	beq.n	8005da8 <_dtoa_r+0x650>
 8005db6:	9f04      	ldr	r7, [sp, #16]
 8005db8:	e73e      	b.n	8005c38 <_dtoa_r+0x4e0>
 8005dba:	4b9b      	ldr	r3, [pc, #620]	@ (8006028 <_dtoa_r+0x8d0>)
 8005dbc:	f7fa fc3c 	bl	8000638 <__aeabi_dmul>
 8005dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc4:	e7bc      	b.n	8005d40 <_dtoa_r+0x5e8>
 8005dc6:	d10c      	bne.n	8005de2 <_dtoa_r+0x68a>
 8005dc8:	4b98      	ldr	r3, [pc, #608]	@ (800602c <_dtoa_r+0x8d4>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dd0:	f7fa fc32 	bl	8000638 <__aeabi_dmul>
 8005dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dd8:	f7fa feb4 	bl	8000b44 <__aeabi_dcmpge>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	f000 8157 	beq.w	8006090 <_dtoa_r+0x938>
 8005de2:	2400      	movs	r4, #0
 8005de4:	4625      	mov	r5, r4
 8005de6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005de8:	43db      	mvns	r3, r3
 8005dea:	9304      	str	r3, [sp, #16]
 8005dec:	4656      	mov	r6, sl
 8005dee:	2700      	movs	r7, #0
 8005df0:	4621      	mov	r1, r4
 8005df2:	4658      	mov	r0, fp
 8005df4:	f000 fbb4 	bl	8006560 <_Bfree>
 8005df8:	2d00      	cmp	r5, #0
 8005dfa:	d0dc      	beq.n	8005db6 <_dtoa_r+0x65e>
 8005dfc:	b12f      	cbz	r7, 8005e0a <_dtoa_r+0x6b2>
 8005dfe:	42af      	cmp	r7, r5
 8005e00:	d003      	beq.n	8005e0a <_dtoa_r+0x6b2>
 8005e02:	4639      	mov	r1, r7
 8005e04:	4658      	mov	r0, fp
 8005e06:	f000 fbab 	bl	8006560 <_Bfree>
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	f000 fba7 	bl	8006560 <_Bfree>
 8005e12:	e7d0      	b.n	8005db6 <_dtoa_r+0x65e>
 8005e14:	9704      	str	r7, [sp, #16]
 8005e16:	4633      	mov	r3, r6
 8005e18:	461e      	mov	r6, r3
 8005e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e1e:	2a39      	cmp	r2, #57	@ 0x39
 8005e20:	d107      	bne.n	8005e32 <_dtoa_r+0x6da>
 8005e22:	459a      	cmp	sl, r3
 8005e24:	d1f8      	bne.n	8005e18 <_dtoa_r+0x6c0>
 8005e26:	9a04      	ldr	r2, [sp, #16]
 8005e28:	3201      	adds	r2, #1
 8005e2a:	9204      	str	r2, [sp, #16]
 8005e2c:	2230      	movs	r2, #48	@ 0x30
 8005e2e:	f88a 2000 	strb.w	r2, [sl]
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	3201      	adds	r2, #1
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	e7bd      	b.n	8005db6 <_dtoa_r+0x65e>
 8005e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8006028 <_dtoa_r+0x8d0>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f7fa fbfb 	bl	8000638 <__aeabi_dmul>
 8005e42:	2200      	movs	r2, #0
 8005e44:	2300      	movs	r3, #0
 8005e46:	4604      	mov	r4, r0
 8005e48:	460d      	mov	r5, r1
 8005e4a:	f7fa fe5d 	bl	8000b08 <__aeabi_dcmpeq>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f43f aebb 	beq.w	8005bca <_dtoa_r+0x472>
 8005e54:	e6f0      	b.n	8005c38 <_dtoa_r+0x4e0>
 8005e56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	f000 80db 	beq.w	8006014 <_dtoa_r+0x8bc>
 8005e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e60:	2a01      	cmp	r2, #1
 8005e62:	f300 80bf 	bgt.w	8005fe4 <_dtoa_r+0x88c>
 8005e66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	f000 80b7 	beq.w	8005fdc <_dtoa_r+0x884>
 8005e6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e74:	4646      	mov	r6, r8
 8005e76:	9a08      	ldr	r2, [sp, #32]
 8005e78:	2101      	movs	r1, #1
 8005e7a:	441a      	add	r2, r3
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	4498      	add	r8, r3
 8005e80:	9208      	str	r2, [sp, #32]
 8005e82:	f000 fc6b 	bl	800675c <__i2b>
 8005e86:	4605      	mov	r5, r0
 8005e88:	b15e      	cbz	r6, 8005ea2 <_dtoa_r+0x74a>
 8005e8a:	9b08      	ldr	r3, [sp, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	dd08      	ble.n	8005ea2 <_dtoa_r+0x74a>
 8005e90:	42b3      	cmp	r3, r6
 8005e92:	9a08      	ldr	r2, [sp, #32]
 8005e94:	bfa8      	it	ge
 8005e96:	4633      	movge	r3, r6
 8005e98:	eba8 0803 	sub.w	r8, r8, r3
 8005e9c:	1af6      	subs	r6, r6, r3
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	9308      	str	r3, [sp, #32]
 8005ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ea4:	b1f3      	cbz	r3, 8005ee4 <_dtoa_r+0x78c>
 8005ea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80b7 	beq.w	800601c <_dtoa_r+0x8c4>
 8005eae:	b18c      	cbz	r4, 8005ed4 <_dtoa_r+0x77c>
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	4658      	mov	r0, fp
 8005eb6:	f000 fd11 	bl	80068dc <__pow5mult>
 8005eba:	464a      	mov	r2, r9
 8005ebc:	4601      	mov	r1, r0
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	4658      	mov	r0, fp
 8005ec2:	f000 fc61 	bl	8006788 <__multiply>
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	9004      	str	r0, [sp, #16]
 8005eca:	4658      	mov	r0, fp
 8005ecc:	f000 fb48 	bl	8006560 <_Bfree>
 8005ed0:	9b04      	ldr	r3, [sp, #16]
 8005ed2:	4699      	mov	r9, r3
 8005ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ed6:	1b1a      	subs	r2, r3, r4
 8005ed8:	d004      	beq.n	8005ee4 <_dtoa_r+0x78c>
 8005eda:	4649      	mov	r1, r9
 8005edc:	4658      	mov	r0, fp
 8005ede:	f000 fcfd 	bl	80068dc <__pow5mult>
 8005ee2:	4681      	mov	r9, r0
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4658      	mov	r0, fp
 8005ee8:	f000 fc38 	bl	800675c <__i2b>
 8005eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eee:	4604      	mov	r4, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 81cf 	beq.w	8006294 <_dtoa_r+0xb3c>
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	4601      	mov	r1, r0
 8005efa:	4658      	mov	r0, fp
 8005efc:	f000 fcee 	bl	80068dc <__pow5mult>
 8005f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	4604      	mov	r4, r0
 8005f06:	f300 8095 	bgt.w	8006034 <_dtoa_r+0x8dc>
 8005f0a:	9b02      	ldr	r3, [sp, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 8087 	bne.w	8006020 <_dtoa_r+0x8c8>
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f040 8089 	bne.w	8006030 <_dtoa_r+0x8d8>
 8005f1e:	9b03      	ldr	r3, [sp, #12]
 8005f20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f24:	0d1b      	lsrs	r3, r3, #20
 8005f26:	051b      	lsls	r3, r3, #20
 8005f28:	b12b      	cbz	r3, 8005f36 <_dtoa_r+0x7de>
 8005f2a:	9b08      	ldr	r3, [sp, #32]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	9308      	str	r3, [sp, #32]
 8005f30:	f108 0801 	add.w	r8, r8, #1
 8005f34:	2301      	movs	r3, #1
 8005f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 81b0 	beq.w	80062a0 <_dtoa_r+0xb48>
 8005f40:	6923      	ldr	r3, [r4, #16]
 8005f42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f46:	6918      	ldr	r0, [r3, #16]
 8005f48:	f000 fbbc 	bl	80066c4 <__hi0bits>
 8005f4c:	f1c0 0020 	rsb	r0, r0, #32
 8005f50:	9b08      	ldr	r3, [sp, #32]
 8005f52:	4418      	add	r0, r3
 8005f54:	f010 001f 	ands.w	r0, r0, #31
 8005f58:	d077      	beq.n	800604a <_dtoa_r+0x8f2>
 8005f5a:	f1c0 0320 	rsb	r3, r0, #32
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	dd6b      	ble.n	800603a <_dtoa_r+0x8e2>
 8005f62:	9b08      	ldr	r3, [sp, #32]
 8005f64:	f1c0 001c 	rsb	r0, r0, #28
 8005f68:	4403      	add	r3, r0
 8005f6a:	4480      	add	r8, r0
 8005f6c:	4406      	add	r6, r0
 8005f6e:	9308      	str	r3, [sp, #32]
 8005f70:	f1b8 0f00 	cmp.w	r8, #0
 8005f74:	dd05      	ble.n	8005f82 <_dtoa_r+0x82a>
 8005f76:	4649      	mov	r1, r9
 8005f78:	4642      	mov	r2, r8
 8005f7a:	4658      	mov	r0, fp
 8005f7c:	f000 fd08 	bl	8006990 <__lshift>
 8005f80:	4681      	mov	r9, r0
 8005f82:	9b08      	ldr	r3, [sp, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	dd05      	ble.n	8005f94 <_dtoa_r+0x83c>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4658      	mov	r0, fp
 8005f8e:	f000 fcff 	bl	8006990 <__lshift>
 8005f92:	4604      	mov	r4, r0
 8005f94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d059      	beq.n	800604e <_dtoa_r+0x8f6>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	4648      	mov	r0, r9
 8005f9e:	f000 fd63 	bl	8006a68 <__mcmp>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	da53      	bge.n	800604e <_dtoa_r+0x8f6>
 8005fa6:	1e7b      	subs	r3, r7, #1
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	4649      	mov	r1, r9
 8005fac:	2300      	movs	r3, #0
 8005fae:	220a      	movs	r2, #10
 8005fb0:	4658      	mov	r0, fp
 8005fb2:	f000 faf7 	bl	80065a4 <__multadd>
 8005fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fb8:	4681      	mov	r9, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8172 	beq.w	80062a4 <_dtoa_r+0xb4c>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	220a      	movs	r2, #10
 8005fc6:	4658      	mov	r0, fp
 8005fc8:	f000 faec 	bl	80065a4 <__multadd>
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	dc67      	bgt.n	80060a4 <_dtoa_r+0x94c>
 8005fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	dc41      	bgt.n	800605e <_dtoa_r+0x906>
 8005fda:	e063      	b.n	80060a4 <_dtoa_r+0x94c>
 8005fdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005fde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005fe2:	e746      	b.n	8005e72 <_dtoa_r+0x71a>
 8005fe4:	9b07      	ldr	r3, [sp, #28]
 8005fe6:	1e5c      	subs	r4, r3, #1
 8005fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	bfbf      	itttt	lt
 8005fee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ff0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005ff2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005ff4:	1ae3      	sublt	r3, r4, r3
 8005ff6:	bfb4      	ite	lt
 8005ff8:	18d2      	addlt	r2, r2, r3
 8005ffa:	1b1c      	subge	r4, r3, r4
 8005ffc:	9b07      	ldr	r3, [sp, #28]
 8005ffe:	bfbc      	itt	lt
 8006000:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006002:	2400      	movlt	r4, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	bfb5      	itete	lt
 8006008:	eba8 0603 	sublt.w	r6, r8, r3
 800600c:	9b07      	ldrge	r3, [sp, #28]
 800600e:	2300      	movlt	r3, #0
 8006010:	4646      	movge	r6, r8
 8006012:	e730      	b.n	8005e76 <_dtoa_r+0x71e>
 8006014:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006016:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006018:	4646      	mov	r6, r8
 800601a:	e735      	b.n	8005e88 <_dtoa_r+0x730>
 800601c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800601e:	e75c      	b.n	8005eda <_dtoa_r+0x782>
 8006020:	2300      	movs	r3, #0
 8006022:	e788      	b.n	8005f36 <_dtoa_r+0x7de>
 8006024:	3fe00000 	.word	0x3fe00000
 8006028:	40240000 	.word	0x40240000
 800602c:	40140000 	.word	0x40140000
 8006030:	9b02      	ldr	r3, [sp, #8]
 8006032:	e780      	b.n	8005f36 <_dtoa_r+0x7de>
 8006034:	2300      	movs	r3, #0
 8006036:	930a      	str	r3, [sp, #40]	@ 0x28
 8006038:	e782      	b.n	8005f40 <_dtoa_r+0x7e8>
 800603a:	d099      	beq.n	8005f70 <_dtoa_r+0x818>
 800603c:	9a08      	ldr	r2, [sp, #32]
 800603e:	331c      	adds	r3, #28
 8006040:	441a      	add	r2, r3
 8006042:	4498      	add	r8, r3
 8006044:	441e      	add	r6, r3
 8006046:	9208      	str	r2, [sp, #32]
 8006048:	e792      	b.n	8005f70 <_dtoa_r+0x818>
 800604a:	4603      	mov	r3, r0
 800604c:	e7f6      	b.n	800603c <_dtoa_r+0x8e4>
 800604e:	9b07      	ldr	r3, [sp, #28]
 8006050:	9704      	str	r7, [sp, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	dc20      	bgt.n	8006098 <_dtoa_r+0x940>
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800605a:	2b02      	cmp	r3, #2
 800605c:	dd1e      	ble.n	800609c <_dtoa_r+0x944>
 800605e:	9b00      	ldr	r3, [sp, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f aec0 	bne.w	8005de6 <_dtoa_r+0x68e>
 8006066:	4621      	mov	r1, r4
 8006068:	2205      	movs	r2, #5
 800606a:	4658      	mov	r0, fp
 800606c:	f000 fa9a 	bl	80065a4 <__multadd>
 8006070:	4601      	mov	r1, r0
 8006072:	4604      	mov	r4, r0
 8006074:	4648      	mov	r0, r9
 8006076:	f000 fcf7 	bl	8006a68 <__mcmp>
 800607a:	2800      	cmp	r0, #0
 800607c:	f77f aeb3 	ble.w	8005de6 <_dtoa_r+0x68e>
 8006080:	4656      	mov	r6, sl
 8006082:	2331      	movs	r3, #49	@ 0x31
 8006084:	f806 3b01 	strb.w	r3, [r6], #1
 8006088:	9b04      	ldr	r3, [sp, #16]
 800608a:	3301      	adds	r3, #1
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	e6ae      	b.n	8005dee <_dtoa_r+0x696>
 8006090:	9c07      	ldr	r4, [sp, #28]
 8006092:	9704      	str	r7, [sp, #16]
 8006094:	4625      	mov	r5, r4
 8006096:	e7f3      	b.n	8006080 <_dtoa_r+0x928>
 8006098:	9b07      	ldr	r3, [sp, #28]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 8104 	beq.w	80062ac <_dtoa_r+0xb54>
 80060a4:	2e00      	cmp	r6, #0
 80060a6:	dd05      	ble.n	80060b4 <_dtoa_r+0x95c>
 80060a8:	4629      	mov	r1, r5
 80060aa:	4632      	mov	r2, r6
 80060ac:	4658      	mov	r0, fp
 80060ae:	f000 fc6f 	bl	8006990 <__lshift>
 80060b2:	4605      	mov	r5, r0
 80060b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d05a      	beq.n	8006170 <_dtoa_r+0xa18>
 80060ba:	6869      	ldr	r1, [r5, #4]
 80060bc:	4658      	mov	r0, fp
 80060be:	f000 fa0f 	bl	80064e0 <_Balloc>
 80060c2:	4606      	mov	r6, r0
 80060c4:	b928      	cbnz	r0, 80060d2 <_dtoa_r+0x97a>
 80060c6:	4b84      	ldr	r3, [pc, #528]	@ (80062d8 <_dtoa_r+0xb80>)
 80060c8:	4602      	mov	r2, r0
 80060ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060ce:	f7ff bb5a 	b.w	8005786 <_dtoa_r+0x2e>
 80060d2:	692a      	ldr	r2, [r5, #16]
 80060d4:	3202      	adds	r2, #2
 80060d6:	0092      	lsls	r2, r2, #2
 80060d8:	f105 010c 	add.w	r1, r5, #12
 80060dc:	300c      	adds	r0, #12
 80060de:	f001 ff75 	bl	8007fcc <memcpy>
 80060e2:	2201      	movs	r2, #1
 80060e4:	4631      	mov	r1, r6
 80060e6:	4658      	mov	r0, fp
 80060e8:	f000 fc52 	bl	8006990 <__lshift>
 80060ec:	f10a 0301 	add.w	r3, sl, #1
 80060f0:	9307      	str	r3, [sp, #28]
 80060f2:	9b00      	ldr	r3, [sp, #0]
 80060f4:	4453      	add	r3, sl
 80060f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060f8:	9b02      	ldr	r3, [sp, #8]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	462f      	mov	r7, r5
 8006100:	930a      	str	r3, [sp, #40]	@ 0x28
 8006102:	4605      	mov	r5, r0
 8006104:	9b07      	ldr	r3, [sp, #28]
 8006106:	4621      	mov	r1, r4
 8006108:	3b01      	subs	r3, #1
 800610a:	4648      	mov	r0, r9
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	f7ff fa9b 	bl	8005648 <quorem>
 8006112:	4639      	mov	r1, r7
 8006114:	9002      	str	r0, [sp, #8]
 8006116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800611a:	4648      	mov	r0, r9
 800611c:	f000 fca4 	bl	8006a68 <__mcmp>
 8006120:	462a      	mov	r2, r5
 8006122:	9008      	str	r0, [sp, #32]
 8006124:	4621      	mov	r1, r4
 8006126:	4658      	mov	r0, fp
 8006128:	f000 fcba 	bl	8006aa0 <__mdiff>
 800612c:	68c2      	ldr	r2, [r0, #12]
 800612e:	4606      	mov	r6, r0
 8006130:	bb02      	cbnz	r2, 8006174 <_dtoa_r+0xa1c>
 8006132:	4601      	mov	r1, r0
 8006134:	4648      	mov	r0, r9
 8006136:	f000 fc97 	bl	8006a68 <__mcmp>
 800613a:	4602      	mov	r2, r0
 800613c:	4631      	mov	r1, r6
 800613e:	4658      	mov	r0, fp
 8006140:	920e      	str	r2, [sp, #56]	@ 0x38
 8006142:	f000 fa0d 	bl	8006560 <_Bfree>
 8006146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800614a:	9e07      	ldr	r6, [sp, #28]
 800614c:	ea43 0102 	orr.w	r1, r3, r2
 8006150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006152:	4319      	orrs	r1, r3
 8006154:	d110      	bne.n	8006178 <_dtoa_r+0xa20>
 8006156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800615a:	d029      	beq.n	80061b0 <_dtoa_r+0xa58>
 800615c:	9b08      	ldr	r3, [sp, #32]
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd02      	ble.n	8006168 <_dtoa_r+0xa10>
 8006162:	9b02      	ldr	r3, [sp, #8]
 8006164:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006168:	9b00      	ldr	r3, [sp, #0]
 800616a:	f883 8000 	strb.w	r8, [r3]
 800616e:	e63f      	b.n	8005df0 <_dtoa_r+0x698>
 8006170:	4628      	mov	r0, r5
 8006172:	e7bb      	b.n	80060ec <_dtoa_r+0x994>
 8006174:	2201      	movs	r2, #1
 8006176:	e7e1      	b.n	800613c <_dtoa_r+0x9e4>
 8006178:	9b08      	ldr	r3, [sp, #32]
 800617a:	2b00      	cmp	r3, #0
 800617c:	db04      	blt.n	8006188 <_dtoa_r+0xa30>
 800617e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006180:	430b      	orrs	r3, r1
 8006182:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006184:	430b      	orrs	r3, r1
 8006186:	d120      	bne.n	80061ca <_dtoa_r+0xa72>
 8006188:	2a00      	cmp	r2, #0
 800618a:	dded      	ble.n	8006168 <_dtoa_r+0xa10>
 800618c:	4649      	mov	r1, r9
 800618e:	2201      	movs	r2, #1
 8006190:	4658      	mov	r0, fp
 8006192:	f000 fbfd 	bl	8006990 <__lshift>
 8006196:	4621      	mov	r1, r4
 8006198:	4681      	mov	r9, r0
 800619a:	f000 fc65 	bl	8006a68 <__mcmp>
 800619e:	2800      	cmp	r0, #0
 80061a0:	dc03      	bgt.n	80061aa <_dtoa_r+0xa52>
 80061a2:	d1e1      	bne.n	8006168 <_dtoa_r+0xa10>
 80061a4:	f018 0f01 	tst.w	r8, #1
 80061a8:	d0de      	beq.n	8006168 <_dtoa_r+0xa10>
 80061aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061ae:	d1d8      	bne.n	8006162 <_dtoa_r+0xa0a>
 80061b0:	9a00      	ldr	r2, [sp, #0]
 80061b2:	2339      	movs	r3, #57	@ 0x39
 80061b4:	7013      	strb	r3, [r2, #0]
 80061b6:	4633      	mov	r3, r6
 80061b8:	461e      	mov	r6, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80061c0:	2a39      	cmp	r2, #57	@ 0x39
 80061c2:	d052      	beq.n	800626a <_dtoa_r+0xb12>
 80061c4:	3201      	adds	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e612      	b.n	8005df0 <_dtoa_r+0x698>
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	dd07      	ble.n	80061de <_dtoa_r+0xa86>
 80061ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061d2:	d0ed      	beq.n	80061b0 <_dtoa_r+0xa58>
 80061d4:	9a00      	ldr	r2, [sp, #0]
 80061d6:	f108 0301 	add.w	r3, r8, #1
 80061da:	7013      	strb	r3, [r2, #0]
 80061dc:	e608      	b.n	8005df0 <_dtoa_r+0x698>
 80061de:	9b07      	ldr	r3, [sp, #28]
 80061e0:	9a07      	ldr	r2, [sp, #28]
 80061e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80061e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d028      	beq.n	800623e <_dtoa_r+0xae6>
 80061ec:	4649      	mov	r1, r9
 80061ee:	2300      	movs	r3, #0
 80061f0:	220a      	movs	r2, #10
 80061f2:	4658      	mov	r0, fp
 80061f4:	f000 f9d6 	bl	80065a4 <__multadd>
 80061f8:	42af      	cmp	r7, r5
 80061fa:	4681      	mov	r9, r0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	f04f 020a 	mov.w	r2, #10
 8006204:	4639      	mov	r1, r7
 8006206:	4658      	mov	r0, fp
 8006208:	d107      	bne.n	800621a <_dtoa_r+0xac2>
 800620a:	f000 f9cb 	bl	80065a4 <__multadd>
 800620e:	4607      	mov	r7, r0
 8006210:	4605      	mov	r5, r0
 8006212:	9b07      	ldr	r3, [sp, #28]
 8006214:	3301      	adds	r3, #1
 8006216:	9307      	str	r3, [sp, #28]
 8006218:	e774      	b.n	8006104 <_dtoa_r+0x9ac>
 800621a:	f000 f9c3 	bl	80065a4 <__multadd>
 800621e:	4629      	mov	r1, r5
 8006220:	4607      	mov	r7, r0
 8006222:	2300      	movs	r3, #0
 8006224:	220a      	movs	r2, #10
 8006226:	4658      	mov	r0, fp
 8006228:	f000 f9bc 	bl	80065a4 <__multadd>
 800622c:	4605      	mov	r5, r0
 800622e:	e7f0      	b.n	8006212 <_dtoa_r+0xaba>
 8006230:	9b00      	ldr	r3, [sp, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	bfcc      	ite	gt
 8006236:	461e      	movgt	r6, r3
 8006238:	2601      	movle	r6, #1
 800623a:	4456      	add	r6, sl
 800623c:	2700      	movs	r7, #0
 800623e:	4649      	mov	r1, r9
 8006240:	2201      	movs	r2, #1
 8006242:	4658      	mov	r0, fp
 8006244:	f000 fba4 	bl	8006990 <__lshift>
 8006248:	4621      	mov	r1, r4
 800624a:	4681      	mov	r9, r0
 800624c:	f000 fc0c 	bl	8006a68 <__mcmp>
 8006250:	2800      	cmp	r0, #0
 8006252:	dcb0      	bgt.n	80061b6 <_dtoa_r+0xa5e>
 8006254:	d102      	bne.n	800625c <_dtoa_r+0xb04>
 8006256:	f018 0f01 	tst.w	r8, #1
 800625a:	d1ac      	bne.n	80061b6 <_dtoa_r+0xa5e>
 800625c:	4633      	mov	r3, r6
 800625e:	461e      	mov	r6, r3
 8006260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006264:	2a30      	cmp	r2, #48	@ 0x30
 8006266:	d0fa      	beq.n	800625e <_dtoa_r+0xb06>
 8006268:	e5c2      	b.n	8005df0 <_dtoa_r+0x698>
 800626a:	459a      	cmp	sl, r3
 800626c:	d1a4      	bne.n	80061b8 <_dtoa_r+0xa60>
 800626e:	9b04      	ldr	r3, [sp, #16]
 8006270:	3301      	adds	r3, #1
 8006272:	9304      	str	r3, [sp, #16]
 8006274:	2331      	movs	r3, #49	@ 0x31
 8006276:	f88a 3000 	strb.w	r3, [sl]
 800627a:	e5b9      	b.n	8005df0 <_dtoa_r+0x698>
 800627c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800627e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80062dc <_dtoa_r+0xb84>
 8006282:	b11b      	cbz	r3, 800628c <_dtoa_r+0xb34>
 8006284:	f10a 0308 	add.w	r3, sl, #8
 8006288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	4650      	mov	r0, sl
 800628e:	b019      	add	sp, #100	@ 0x64
 8006290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006296:	2b01      	cmp	r3, #1
 8006298:	f77f ae37 	ble.w	8005f0a <_dtoa_r+0x7b2>
 800629c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800629e:	930a      	str	r3, [sp, #40]	@ 0x28
 80062a0:	2001      	movs	r0, #1
 80062a2:	e655      	b.n	8005f50 <_dtoa_r+0x7f8>
 80062a4:	9b00      	ldr	r3, [sp, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f77f aed6 	ble.w	8006058 <_dtoa_r+0x900>
 80062ac:	4656      	mov	r6, sl
 80062ae:	4621      	mov	r1, r4
 80062b0:	4648      	mov	r0, r9
 80062b2:	f7ff f9c9 	bl	8005648 <quorem>
 80062b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062ba:	f806 8b01 	strb.w	r8, [r6], #1
 80062be:	9b00      	ldr	r3, [sp, #0]
 80062c0:	eba6 020a 	sub.w	r2, r6, sl
 80062c4:	4293      	cmp	r3, r2
 80062c6:	ddb3      	ble.n	8006230 <_dtoa_r+0xad8>
 80062c8:	4649      	mov	r1, r9
 80062ca:	2300      	movs	r3, #0
 80062cc:	220a      	movs	r2, #10
 80062ce:	4658      	mov	r0, fp
 80062d0:	f000 f968 	bl	80065a4 <__multadd>
 80062d4:	4681      	mov	r9, r0
 80062d6:	e7ea      	b.n	80062ae <_dtoa_r+0xb56>
 80062d8:	0800a88d 	.word	0x0800a88d
 80062dc:	0800a811 	.word	0x0800a811

080062e0 <_free_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4605      	mov	r5, r0
 80062e4:	2900      	cmp	r1, #0
 80062e6:	d041      	beq.n	800636c <_free_r+0x8c>
 80062e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ec:	1f0c      	subs	r4, r1, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfb8      	it	lt
 80062f2:	18e4      	addlt	r4, r4, r3
 80062f4:	f000 f8e8 	bl	80064c8 <__malloc_lock>
 80062f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006370 <_free_r+0x90>)
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	b933      	cbnz	r3, 800630c <_free_r+0x2c>
 80062fe:	6063      	str	r3, [r4, #4]
 8006300:	6014      	str	r4, [r2, #0]
 8006302:	4628      	mov	r0, r5
 8006304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006308:	f000 b8e4 	b.w	80064d4 <__malloc_unlock>
 800630c:	42a3      	cmp	r3, r4
 800630e:	d908      	bls.n	8006322 <_free_r+0x42>
 8006310:	6820      	ldr	r0, [r4, #0]
 8006312:	1821      	adds	r1, r4, r0
 8006314:	428b      	cmp	r3, r1
 8006316:	bf01      	itttt	eq
 8006318:	6819      	ldreq	r1, [r3, #0]
 800631a:	685b      	ldreq	r3, [r3, #4]
 800631c:	1809      	addeq	r1, r1, r0
 800631e:	6021      	streq	r1, [r4, #0]
 8006320:	e7ed      	b.n	80062fe <_free_r+0x1e>
 8006322:	461a      	mov	r2, r3
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	b10b      	cbz	r3, 800632c <_free_r+0x4c>
 8006328:	42a3      	cmp	r3, r4
 800632a:	d9fa      	bls.n	8006322 <_free_r+0x42>
 800632c:	6811      	ldr	r1, [r2, #0]
 800632e:	1850      	adds	r0, r2, r1
 8006330:	42a0      	cmp	r0, r4
 8006332:	d10b      	bne.n	800634c <_free_r+0x6c>
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	4401      	add	r1, r0
 8006338:	1850      	adds	r0, r2, r1
 800633a:	4283      	cmp	r3, r0
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	d1e0      	bne.n	8006302 <_free_r+0x22>
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	6053      	str	r3, [r2, #4]
 8006346:	4408      	add	r0, r1
 8006348:	6010      	str	r0, [r2, #0]
 800634a:	e7da      	b.n	8006302 <_free_r+0x22>
 800634c:	d902      	bls.n	8006354 <_free_r+0x74>
 800634e:	230c      	movs	r3, #12
 8006350:	602b      	str	r3, [r5, #0]
 8006352:	e7d6      	b.n	8006302 <_free_r+0x22>
 8006354:	6820      	ldr	r0, [r4, #0]
 8006356:	1821      	adds	r1, r4, r0
 8006358:	428b      	cmp	r3, r1
 800635a:	bf04      	itt	eq
 800635c:	6819      	ldreq	r1, [r3, #0]
 800635e:	685b      	ldreq	r3, [r3, #4]
 8006360:	6063      	str	r3, [r4, #4]
 8006362:	bf04      	itt	eq
 8006364:	1809      	addeq	r1, r1, r0
 8006366:	6021      	streq	r1, [r4, #0]
 8006368:	6054      	str	r4, [r2, #4]
 800636a:	e7ca      	b.n	8006302 <_free_r+0x22>
 800636c:	bd38      	pop	{r3, r4, r5, pc}
 800636e:	bf00      	nop
 8006370:	2000041c 	.word	0x2000041c

08006374 <malloc>:
 8006374:	4b02      	ldr	r3, [pc, #8]	@ (8006380 <malloc+0xc>)
 8006376:	4601      	mov	r1, r0
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	f000 b825 	b.w	80063c8 <_malloc_r>
 800637e:	bf00      	nop
 8006380:	2000001c 	.word	0x2000001c

08006384 <sbrk_aligned>:
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	4e0f      	ldr	r6, [pc, #60]	@ (80063c4 <sbrk_aligned+0x40>)
 8006388:	460c      	mov	r4, r1
 800638a:	6831      	ldr	r1, [r6, #0]
 800638c:	4605      	mov	r5, r0
 800638e:	b911      	cbnz	r1, 8006396 <sbrk_aligned+0x12>
 8006390:	f001 fe0c 	bl	8007fac <_sbrk_r>
 8006394:	6030      	str	r0, [r6, #0]
 8006396:	4621      	mov	r1, r4
 8006398:	4628      	mov	r0, r5
 800639a:	f001 fe07 	bl	8007fac <_sbrk_r>
 800639e:	1c43      	adds	r3, r0, #1
 80063a0:	d103      	bne.n	80063aa <sbrk_aligned+0x26>
 80063a2:	f04f 34ff 	mov.w	r4, #4294967295
 80063a6:	4620      	mov	r0, r4
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
 80063aa:	1cc4      	adds	r4, r0, #3
 80063ac:	f024 0403 	bic.w	r4, r4, #3
 80063b0:	42a0      	cmp	r0, r4
 80063b2:	d0f8      	beq.n	80063a6 <sbrk_aligned+0x22>
 80063b4:	1a21      	subs	r1, r4, r0
 80063b6:	4628      	mov	r0, r5
 80063b8:	f001 fdf8 	bl	8007fac <_sbrk_r>
 80063bc:	3001      	adds	r0, #1
 80063be:	d1f2      	bne.n	80063a6 <sbrk_aligned+0x22>
 80063c0:	e7ef      	b.n	80063a2 <sbrk_aligned+0x1e>
 80063c2:	bf00      	nop
 80063c4:	20000418 	.word	0x20000418

080063c8 <_malloc_r>:
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063cc:	1ccd      	adds	r5, r1, #3
 80063ce:	f025 0503 	bic.w	r5, r5, #3
 80063d2:	3508      	adds	r5, #8
 80063d4:	2d0c      	cmp	r5, #12
 80063d6:	bf38      	it	cc
 80063d8:	250c      	movcc	r5, #12
 80063da:	2d00      	cmp	r5, #0
 80063dc:	4606      	mov	r6, r0
 80063de:	db01      	blt.n	80063e4 <_malloc_r+0x1c>
 80063e0:	42a9      	cmp	r1, r5
 80063e2:	d904      	bls.n	80063ee <_malloc_r+0x26>
 80063e4:	230c      	movs	r3, #12
 80063e6:	6033      	str	r3, [r6, #0]
 80063e8:	2000      	movs	r0, #0
 80063ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064c4 <_malloc_r+0xfc>
 80063f2:	f000 f869 	bl	80064c8 <__malloc_lock>
 80063f6:	f8d8 3000 	ldr.w	r3, [r8]
 80063fa:	461c      	mov	r4, r3
 80063fc:	bb44      	cbnz	r4, 8006450 <_malloc_r+0x88>
 80063fe:	4629      	mov	r1, r5
 8006400:	4630      	mov	r0, r6
 8006402:	f7ff ffbf 	bl	8006384 <sbrk_aligned>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	4604      	mov	r4, r0
 800640a:	d158      	bne.n	80064be <_malloc_r+0xf6>
 800640c:	f8d8 4000 	ldr.w	r4, [r8]
 8006410:	4627      	mov	r7, r4
 8006412:	2f00      	cmp	r7, #0
 8006414:	d143      	bne.n	800649e <_malloc_r+0xd6>
 8006416:	2c00      	cmp	r4, #0
 8006418:	d04b      	beq.n	80064b2 <_malloc_r+0xea>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	4639      	mov	r1, r7
 800641e:	4630      	mov	r0, r6
 8006420:	eb04 0903 	add.w	r9, r4, r3
 8006424:	f001 fdc2 	bl	8007fac <_sbrk_r>
 8006428:	4581      	cmp	r9, r0
 800642a:	d142      	bne.n	80064b2 <_malloc_r+0xea>
 800642c:	6821      	ldr	r1, [r4, #0]
 800642e:	1a6d      	subs	r5, r5, r1
 8006430:	4629      	mov	r1, r5
 8006432:	4630      	mov	r0, r6
 8006434:	f7ff ffa6 	bl	8006384 <sbrk_aligned>
 8006438:	3001      	adds	r0, #1
 800643a:	d03a      	beq.n	80064b2 <_malloc_r+0xea>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	442b      	add	r3, r5
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	f8d8 3000 	ldr.w	r3, [r8]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	bb62      	cbnz	r2, 80064a4 <_malloc_r+0xdc>
 800644a:	f8c8 7000 	str.w	r7, [r8]
 800644e:	e00f      	b.n	8006470 <_malloc_r+0xa8>
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	1b52      	subs	r2, r2, r5
 8006454:	d420      	bmi.n	8006498 <_malloc_r+0xd0>
 8006456:	2a0b      	cmp	r2, #11
 8006458:	d917      	bls.n	800648a <_malloc_r+0xc2>
 800645a:	1961      	adds	r1, r4, r5
 800645c:	42a3      	cmp	r3, r4
 800645e:	6025      	str	r5, [r4, #0]
 8006460:	bf18      	it	ne
 8006462:	6059      	strne	r1, [r3, #4]
 8006464:	6863      	ldr	r3, [r4, #4]
 8006466:	bf08      	it	eq
 8006468:	f8c8 1000 	streq.w	r1, [r8]
 800646c:	5162      	str	r2, [r4, r5]
 800646e:	604b      	str	r3, [r1, #4]
 8006470:	4630      	mov	r0, r6
 8006472:	f000 f82f 	bl	80064d4 <__malloc_unlock>
 8006476:	f104 000b 	add.w	r0, r4, #11
 800647a:	1d23      	adds	r3, r4, #4
 800647c:	f020 0007 	bic.w	r0, r0, #7
 8006480:	1ac2      	subs	r2, r0, r3
 8006482:	bf1c      	itt	ne
 8006484:	1a1b      	subne	r3, r3, r0
 8006486:	50a3      	strne	r3, [r4, r2]
 8006488:	e7af      	b.n	80063ea <_malloc_r+0x22>
 800648a:	6862      	ldr	r2, [r4, #4]
 800648c:	42a3      	cmp	r3, r4
 800648e:	bf0c      	ite	eq
 8006490:	f8c8 2000 	streq.w	r2, [r8]
 8006494:	605a      	strne	r2, [r3, #4]
 8006496:	e7eb      	b.n	8006470 <_malloc_r+0xa8>
 8006498:	4623      	mov	r3, r4
 800649a:	6864      	ldr	r4, [r4, #4]
 800649c:	e7ae      	b.n	80063fc <_malloc_r+0x34>
 800649e:	463c      	mov	r4, r7
 80064a0:	687f      	ldr	r7, [r7, #4]
 80064a2:	e7b6      	b.n	8006412 <_malloc_r+0x4a>
 80064a4:	461a      	mov	r2, r3
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	42a3      	cmp	r3, r4
 80064aa:	d1fb      	bne.n	80064a4 <_malloc_r+0xdc>
 80064ac:	2300      	movs	r3, #0
 80064ae:	6053      	str	r3, [r2, #4]
 80064b0:	e7de      	b.n	8006470 <_malloc_r+0xa8>
 80064b2:	230c      	movs	r3, #12
 80064b4:	6033      	str	r3, [r6, #0]
 80064b6:	4630      	mov	r0, r6
 80064b8:	f000 f80c 	bl	80064d4 <__malloc_unlock>
 80064bc:	e794      	b.n	80063e8 <_malloc_r+0x20>
 80064be:	6005      	str	r5, [r0, #0]
 80064c0:	e7d6      	b.n	8006470 <_malloc_r+0xa8>
 80064c2:	bf00      	nop
 80064c4:	2000041c 	.word	0x2000041c

080064c8 <__malloc_lock>:
 80064c8:	4801      	ldr	r0, [pc, #4]	@ (80064d0 <__malloc_lock+0x8>)
 80064ca:	f7ff b8b4 	b.w	8005636 <__retarget_lock_acquire_recursive>
 80064ce:	bf00      	nop
 80064d0:	20000414 	.word	0x20000414

080064d4 <__malloc_unlock>:
 80064d4:	4801      	ldr	r0, [pc, #4]	@ (80064dc <__malloc_unlock+0x8>)
 80064d6:	f7ff b8af 	b.w	8005638 <__retarget_lock_release_recursive>
 80064da:	bf00      	nop
 80064dc:	20000414 	.word	0x20000414

080064e0 <_Balloc>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	69c6      	ldr	r6, [r0, #28]
 80064e4:	4604      	mov	r4, r0
 80064e6:	460d      	mov	r5, r1
 80064e8:	b976      	cbnz	r6, 8006508 <_Balloc+0x28>
 80064ea:	2010      	movs	r0, #16
 80064ec:	f7ff ff42 	bl	8006374 <malloc>
 80064f0:	4602      	mov	r2, r0
 80064f2:	61e0      	str	r0, [r4, #28]
 80064f4:	b920      	cbnz	r0, 8006500 <_Balloc+0x20>
 80064f6:	4b18      	ldr	r3, [pc, #96]	@ (8006558 <_Balloc+0x78>)
 80064f8:	4818      	ldr	r0, [pc, #96]	@ (800655c <_Balloc+0x7c>)
 80064fa:	216b      	movs	r1, #107	@ 0x6b
 80064fc:	f001 fd7c 	bl	8007ff8 <__assert_func>
 8006500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006504:	6006      	str	r6, [r0, #0]
 8006506:	60c6      	str	r6, [r0, #12]
 8006508:	69e6      	ldr	r6, [r4, #28]
 800650a:	68f3      	ldr	r3, [r6, #12]
 800650c:	b183      	cbz	r3, 8006530 <_Balloc+0x50>
 800650e:	69e3      	ldr	r3, [r4, #28]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006516:	b9b8      	cbnz	r0, 8006548 <_Balloc+0x68>
 8006518:	2101      	movs	r1, #1
 800651a:	fa01 f605 	lsl.w	r6, r1, r5
 800651e:	1d72      	adds	r2, r6, #5
 8006520:	0092      	lsls	r2, r2, #2
 8006522:	4620      	mov	r0, r4
 8006524:	f001 fd86 	bl	8008034 <_calloc_r>
 8006528:	b160      	cbz	r0, 8006544 <_Balloc+0x64>
 800652a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800652e:	e00e      	b.n	800654e <_Balloc+0x6e>
 8006530:	2221      	movs	r2, #33	@ 0x21
 8006532:	2104      	movs	r1, #4
 8006534:	4620      	mov	r0, r4
 8006536:	f001 fd7d 	bl	8008034 <_calloc_r>
 800653a:	69e3      	ldr	r3, [r4, #28]
 800653c:	60f0      	str	r0, [r6, #12]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e4      	bne.n	800650e <_Balloc+0x2e>
 8006544:	2000      	movs	r0, #0
 8006546:	bd70      	pop	{r4, r5, r6, pc}
 8006548:	6802      	ldr	r2, [r0, #0]
 800654a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800654e:	2300      	movs	r3, #0
 8006550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006554:	e7f7      	b.n	8006546 <_Balloc+0x66>
 8006556:	bf00      	nop
 8006558:	0800a81e 	.word	0x0800a81e
 800655c:	0800a89e 	.word	0x0800a89e

08006560 <_Bfree>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	69c6      	ldr	r6, [r0, #28]
 8006564:	4605      	mov	r5, r0
 8006566:	460c      	mov	r4, r1
 8006568:	b976      	cbnz	r6, 8006588 <_Bfree+0x28>
 800656a:	2010      	movs	r0, #16
 800656c:	f7ff ff02 	bl	8006374 <malloc>
 8006570:	4602      	mov	r2, r0
 8006572:	61e8      	str	r0, [r5, #28]
 8006574:	b920      	cbnz	r0, 8006580 <_Bfree+0x20>
 8006576:	4b09      	ldr	r3, [pc, #36]	@ (800659c <_Bfree+0x3c>)
 8006578:	4809      	ldr	r0, [pc, #36]	@ (80065a0 <_Bfree+0x40>)
 800657a:	218f      	movs	r1, #143	@ 0x8f
 800657c:	f001 fd3c 	bl	8007ff8 <__assert_func>
 8006580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006584:	6006      	str	r6, [r0, #0]
 8006586:	60c6      	str	r6, [r0, #12]
 8006588:	b13c      	cbz	r4, 800659a <_Bfree+0x3a>
 800658a:	69eb      	ldr	r3, [r5, #28]
 800658c:	6862      	ldr	r2, [r4, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006594:	6021      	str	r1, [r4, #0]
 8006596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	0800a81e 	.word	0x0800a81e
 80065a0:	0800a89e 	.word	0x0800a89e

080065a4 <__multadd>:
 80065a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a8:	690d      	ldr	r5, [r1, #16]
 80065aa:	4607      	mov	r7, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	461e      	mov	r6, r3
 80065b0:	f101 0c14 	add.w	ip, r1, #20
 80065b4:	2000      	movs	r0, #0
 80065b6:	f8dc 3000 	ldr.w	r3, [ip]
 80065ba:	b299      	uxth	r1, r3
 80065bc:	fb02 6101 	mla	r1, r2, r1, r6
 80065c0:	0c1e      	lsrs	r6, r3, #16
 80065c2:	0c0b      	lsrs	r3, r1, #16
 80065c4:	fb02 3306 	mla	r3, r2, r6, r3
 80065c8:	b289      	uxth	r1, r1
 80065ca:	3001      	adds	r0, #1
 80065cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065d0:	4285      	cmp	r5, r0
 80065d2:	f84c 1b04 	str.w	r1, [ip], #4
 80065d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065da:	dcec      	bgt.n	80065b6 <__multadd+0x12>
 80065dc:	b30e      	cbz	r6, 8006622 <__multadd+0x7e>
 80065de:	68a3      	ldr	r3, [r4, #8]
 80065e0:	42ab      	cmp	r3, r5
 80065e2:	dc19      	bgt.n	8006618 <__multadd+0x74>
 80065e4:	6861      	ldr	r1, [r4, #4]
 80065e6:	4638      	mov	r0, r7
 80065e8:	3101      	adds	r1, #1
 80065ea:	f7ff ff79 	bl	80064e0 <_Balloc>
 80065ee:	4680      	mov	r8, r0
 80065f0:	b928      	cbnz	r0, 80065fe <__multadd+0x5a>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <__multadd+0x84>)
 80065f6:	480d      	ldr	r0, [pc, #52]	@ (800662c <__multadd+0x88>)
 80065f8:	21ba      	movs	r1, #186	@ 0xba
 80065fa:	f001 fcfd 	bl	8007ff8 <__assert_func>
 80065fe:	6922      	ldr	r2, [r4, #16]
 8006600:	3202      	adds	r2, #2
 8006602:	f104 010c 	add.w	r1, r4, #12
 8006606:	0092      	lsls	r2, r2, #2
 8006608:	300c      	adds	r0, #12
 800660a:	f001 fcdf 	bl	8007fcc <memcpy>
 800660e:	4621      	mov	r1, r4
 8006610:	4638      	mov	r0, r7
 8006612:	f7ff ffa5 	bl	8006560 <_Bfree>
 8006616:	4644      	mov	r4, r8
 8006618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800661c:	3501      	adds	r5, #1
 800661e:	615e      	str	r6, [r3, #20]
 8006620:	6125      	str	r5, [r4, #16]
 8006622:	4620      	mov	r0, r4
 8006624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006628:	0800a88d 	.word	0x0800a88d
 800662c:	0800a89e 	.word	0x0800a89e

08006630 <__s2b>:
 8006630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006634:	460c      	mov	r4, r1
 8006636:	4615      	mov	r5, r2
 8006638:	461f      	mov	r7, r3
 800663a:	2209      	movs	r2, #9
 800663c:	3308      	adds	r3, #8
 800663e:	4606      	mov	r6, r0
 8006640:	fb93 f3f2 	sdiv	r3, r3, r2
 8006644:	2100      	movs	r1, #0
 8006646:	2201      	movs	r2, #1
 8006648:	429a      	cmp	r2, r3
 800664a:	db09      	blt.n	8006660 <__s2b+0x30>
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff ff47 	bl	80064e0 <_Balloc>
 8006652:	b940      	cbnz	r0, 8006666 <__s2b+0x36>
 8006654:	4602      	mov	r2, r0
 8006656:	4b19      	ldr	r3, [pc, #100]	@ (80066bc <__s2b+0x8c>)
 8006658:	4819      	ldr	r0, [pc, #100]	@ (80066c0 <__s2b+0x90>)
 800665a:	21d3      	movs	r1, #211	@ 0xd3
 800665c:	f001 fccc 	bl	8007ff8 <__assert_func>
 8006660:	0052      	lsls	r2, r2, #1
 8006662:	3101      	adds	r1, #1
 8006664:	e7f0      	b.n	8006648 <__s2b+0x18>
 8006666:	9b08      	ldr	r3, [sp, #32]
 8006668:	6143      	str	r3, [r0, #20]
 800666a:	2d09      	cmp	r5, #9
 800666c:	f04f 0301 	mov.w	r3, #1
 8006670:	6103      	str	r3, [r0, #16]
 8006672:	dd16      	ble.n	80066a2 <__s2b+0x72>
 8006674:	f104 0909 	add.w	r9, r4, #9
 8006678:	46c8      	mov	r8, r9
 800667a:	442c      	add	r4, r5
 800667c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006680:	4601      	mov	r1, r0
 8006682:	3b30      	subs	r3, #48	@ 0x30
 8006684:	220a      	movs	r2, #10
 8006686:	4630      	mov	r0, r6
 8006688:	f7ff ff8c 	bl	80065a4 <__multadd>
 800668c:	45a0      	cmp	r8, r4
 800668e:	d1f5      	bne.n	800667c <__s2b+0x4c>
 8006690:	f1a5 0408 	sub.w	r4, r5, #8
 8006694:	444c      	add	r4, r9
 8006696:	1b2d      	subs	r5, r5, r4
 8006698:	1963      	adds	r3, r4, r5
 800669a:	42bb      	cmp	r3, r7
 800669c:	db04      	blt.n	80066a8 <__s2b+0x78>
 800669e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a2:	340a      	adds	r4, #10
 80066a4:	2509      	movs	r5, #9
 80066a6:	e7f6      	b.n	8006696 <__s2b+0x66>
 80066a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80066ac:	4601      	mov	r1, r0
 80066ae:	3b30      	subs	r3, #48	@ 0x30
 80066b0:	220a      	movs	r2, #10
 80066b2:	4630      	mov	r0, r6
 80066b4:	f7ff ff76 	bl	80065a4 <__multadd>
 80066b8:	e7ee      	b.n	8006698 <__s2b+0x68>
 80066ba:	bf00      	nop
 80066bc:	0800a88d 	.word	0x0800a88d
 80066c0:	0800a89e 	.word	0x0800a89e

080066c4 <__hi0bits>:
 80066c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066c8:	4603      	mov	r3, r0
 80066ca:	bf36      	itet	cc
 80066cc:	0403      	lslcc	r3, r0, #16
 80066ce:	2000      	movcs	r0, #0
 80066d0:	2010      	movcc	r0, #16
 80066d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066d6:	bf3c      	itt	cc
 80066d8:	021b      	lslcc	r3, r3, #8
 80066da:	3008      	addcc	r0, #8
 80066dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066e0:	bf3c      	itt	cc
 80066e2:	011b      	lslcc	r3, r3, #4
 80066e4:	3004      	addcc	r0, #4
 80066e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ea:	bf3c      	itt	cc
 80066ec:	009b      	lslcc	r3, r3, #2
 80066ee:	3002      	addcc	r0, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	db05      	blt.n	8006700 <__hi0bits+0x3c>
 80066f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066f8:	f100 0001 	add.w	r0, r0, #1
 80066fc:	bf08      	it	eq
 80066fe:	2020      	moveq	r0, #32
 8006700:	4770      	bx	lr

08006702 <__lo0bits>:
 8006702:	6803      	ldr	r3, [r0, #0]
 8006704:	4602      	mov	r2, r0
 8006706:	f013 0007 	ands.w	r0, r3, #7
 800670a:	d00b      	beq.n	8006724 <__lo0bits+0x22>
 800670c:	07d9      	lsls	r1, r3, #31
 800670e:	d421      	bmi.n	8006754 <__lo0bits+0x52>
 8006710:	0798      	lsls	r0, r3, #30
 8006712:	bf49      	itett	mi
 8006714:	085b      	lsrmi	r3, r3, #1
 8006716:	089b      	lsrpl	r3, r3, #2
 8006718:	2001      	movmi	r0, #1
 800671a:	6013      	strmi	r3, [r2, #0]
 800671c:	bf5c      	itt	pl
 800671e:	6013      	strpl	r3, [r2, #0]
 8006720:	2002      	movpl	r0, #2
 8006722:	4770      	bx	lr
 8006724:	b299      	uxth	r1, r3
 8006726:	b909      	cbnz	r1, 800672c <__lo0bits+0x2a>
 8006728:	0c1b      	lsrs	r3, r3, #16
 800672a:	2010      	movs	r0, #16
 800672c:	b2d9      	uxtb	r1, r3
 800672e:	b909      	cbnz	r1, 8006734 <__lo0bits+0x32>
 8006730:	3008      	adds	r0, #8
 8006732:	0a1b      	lsrs	r3, r3, #8
 8006734:	0719      	lsls	r1, r3, #28
 8006736:	bf04      	itt	eq
 8006738:	091b      	lsreq	r3, r3, #4
 800673a:	3004      	addeq	r0, #4
 800673c:	0799      	lsls	r1, r3, #30
 800673e:	bf04      	itt	eq
 8006740:	089b      	lsreq	r3, r3, #2
 8006742:	3002      	addeq	r0, #2
 8006744:	07d9      	lsls	r1, r3, #31
 8006746:	d403      	bmi.n	8006750 <__lo0bits+0x4e>
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	f100 0001 	add.w	r0, r0, #1
 800674e:	d003      	beq.n	8006758 <__lo0bits+0x56>
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	4770      	bx	lr
 8006754:	2000      	movs	r0, #0
 8006756:	4770      	bx	lr
 8006758:	2020      	movs	r0, #32
 800675a:	4770      	bx	lr

0800675c <__i2b>:
 800675c:	b510      	push	{r4, lr}
 800675e:	460c      	mov	r4, r1
 8006760:	2101      	movs	r1, #1
 8006762:	f7ff febd 	bl	80064e0 <_Balloc>
 8006766:	4602      	mov	r2, r0
 8006768:	b928      	cbnz	r0, 8006776 <__i2b+0x1a>
 800676a:	4b05      	ldr	r3, [pc, #20]	@ (8006780 <__i2b+0x24>)
 800676c:	4805      	ldr	r0, [pc, #20]	@ (8006784 <__i2b+0x28>)
 800676e:	f240 1145 	movw	r1, #325	@ 0x145
 8006772:	f001 fc41 	bl	8007ff8 <__assert_func>
 8006776:	2301      	movs	r3, #1
 8006778:	6144      	str	r4, [r0, #20]
 800677a:	6103      	str	r3, [r0, #16]
 800677c:	bd10      	pop	{r4, pc}
 800677e:	bf00      	nop
 8006780:	0800a88d 	.word	0x0800a88d
 8006784:	0800a89e 	.word	0x0800a89e

08006788 <__multiply>:
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	4614      	mov	r4, r2
 800678e:	690a      	ldr	r2, [r1, #16]
 8006790:	6923      	ldr	r3, [r4, #16]
 8006792:	429a      	cmp	r2, r3
 8006794:	bfa8      	it	ge
 8006796:	4623      	movge	r3, r4
 8006798:	460f      	mov	r7, r1
 800679a:	bfa4      	itt	ge
 800679c:	460c      	movge	r4, r1
 800679e:	461f      	movge	r7, r3
 80067a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80067a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80067a8:	68a3      	ldr	r3, [r4, #8]
 80067aa:	6861      	ldr	r1, [r4, #4]
 80067ac:	eb0a 0609 	add.w	r6, sl, r9
 80067b0:	42b3      	cmp	r3, r6
 80067b2:	b085      	sub	sp, #20
 80067b4:	bfb8      	it	lt
 80067b6:	3101      	addlt	r1, #1
 80067b8:	f7ff fe92 	bl	80064e0 <_Balloc>
 80067bc:	b930      	cbnz	r0, 80067cc <__multiply+0x44>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b44      	ldr	r3, [pc, #272]	@ (80068d4 <__multiply+0x14c>)
 80067c2:	4845      	ldr	r0, [pc, #276]	@ (80068d8 <__multiply+0x150>)
 80067c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80067c8:	f001 fc16 	bl	8007ff8 <__assert_func>
 80067cc:	f100 0514 	add.w	r5, r0, #20
 80067d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067d4:	462b      	mov	r3, r5
 80067d6:	2200      	movs	r2, #0
 80067d8:	4543      	cmp	r3, r8
 80067da:	d321      	bcc.n	8006820 <__multiply+0x98>
 80067dc:	f107 0114 	add.w	r1, r7, #20
 80067e0:	f104 0214 	add.w	r2, r4, #20
 80067e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80067e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80067ec:	9302      	str	r3, [sp, #8]
 80067ee:	1b13      	subs	r3, r2, r4
 80067f0:	3b15      	subs	r3, #21
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	3304      	adds	r3, #4
 80067f8:	f104 0715 	add.w	r7, r4, #21
 80067fc:	42ba      	cmp	r2, r7
 80067fe:	bf38      	it	cc
 8006800:	2304      	movcc	r3, #4
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	9b02      	ldr	r3, [sp, #8]
 8006806:	9103      	str	r1, [sp, #12]
 8006808:	428b      	cmp	r3, r1
 800680a:	d80c      	bhi.n	8006826 <__multiply+0x9e>
 800680c:	2e00      	cmp	r6, #0
 800680e:	dd03      	ble.n	8006818 <__multiply+0x90>
 8006810:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006814:	2b00      	cmp	r3, #0
 8006816:	d05b      	beq.n	80068d0 <__multiply+0x148>
 8006818:	6106      	str	r6, [r0, #16]
 800681a:	b005      	add	sp, #20
 800681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006820:	f843 2b04 	str.w	r2, [r3], #4
 8006824:	e7d8      	b.n	80067d8 <__multiply+0x50>
 8006826:	f8b1 a000 	ldrh.w	sl, [r1]
 800682a:	f1ba 0f00 	cmp.w	sl, #0
 800682e:	d024      	beq.n	800687a <__multiply+0xf2>
 8006830:	f104 0e14 	add.w	lr, r4, #20
 8006834:	46a9      	mov	r9, r5
 8006836:	f04f 0c00 	mov.w	ip, #0
 800683a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800683e:	f8d9 3000 	ldr.w	r3, [r9]
 8006842:	fa1f fb87 	uxth.w	fp, r7
 8006846:	b29b      	uxth	r3, r3
 8006848:	fb0a 330b 	mla	r3, sl, fp, r3
 800684c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006850:	f8d9 7000 	ldr.w	r7, [r9]
 8006854:	4463      	add	r3, ip
 8006856:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800685a:	fb0a c70b 	mla	r7, sl, fp, ip
 800685e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006862:	b29b      	uxth	r3, r3
 8006864:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006868:	4572      	cmp	r2, lr
 800686a:	f849 3b04 	str.w	r3, [r9], #4
 800686e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006872:	d8e2      	bhi.n	800683a <__multiply+0xb2>
 8006874:	9b01      	ldr	r3, [sp, #4]
 8006876:	f845 c003 	str.w	ip, [r5, r3]
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006880:	3104      	adds	r1, #4
 8006882:	f1b9 0f00 	cmp.w	r9, #0
 8006886:	d021      	beq.n	80068cc <__multiply+0x144>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	f104 0c14 	add.w	ip, r4, #20
 800688e:	46ae      	mov	lr, r5
 8006890:	f04f 0a00 	mov.w	sl, #0
 8006894:	f8bc b000 	ldrh.w	fp, [ip]
 8006898:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800689c:	fb09 770b 	mla	r7, r9, fp, r7
 80068a0:	4457      	add	r7, sl
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80068a8:	f84e 3b04 	str.w	r3, [lr], #4
 80068ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068b4:	f8be 3000 	ldrh.w	r3, [lr]
 80068b8:	fb09 330a 	mla	r3, r9, sl, r3
 80068bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80068c0:	4562      	cmp	r2, ip
 80068c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068c6:	d8e5      	bhi.n	8006894 <__multiply+0x10c>
 80068c8:	9f01      	ldr	r7, [sp, #4]
 80068ca:	51eb      	str	r3, [r5, r7]
 80068cc:	3504      	adds	r5, #4
 80068ce:	e799      	b.n	8006804 <__multiply+0x7c>
 80068d0:	3e01      	subs	r6, #1
 80068d2:	e79b      	b.n	800680c <__multiply+0x84>
 80068d4:	0800a88d 	.word	0x0800a88d
 80068d8:	0800a89e 	.word	0x0800a89e

080068dc <__pow5mult>:
 80068dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e0:	4615      	mov	r5, r2
 80068e2:	f012 0203 	ands.w	r2, r2, #3
 80068e6:	4607      	mov	r7, r0
 80068e8:	460e      	mov	r6, r1
 80068ea:	d007      	beq.n	80068fc <__pow5mult+0x20>
 80068ec:	4c25      	ldr	r4, [pc, #148]	@ (8006984 <__pow5mult+0xa8>)
 80068ee:	3a01      	subs	r2, #1
 80068f0:	2300      	movs	r3, #0
 80068f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068f6:	f7ff fe55 	bl	80065a4 <__multadd>
 80068fa:	4606      	mov	r6, r0
 80068fc:	10ad      	asrs	r5, r5, #2
 80068fe:	d03d      	beq.n	800697c <__pow5mult+0xa0>
 8006900:	69fc      	ldr	r4, [r7, #28]
 8006902:	b97c      	cbnz	r4, 8006924 <__pow5mult+0x48>
 8006904:	2010      	movs	r0, #16
 8006906:	f7ff fd35 	bl	8006374 <malloc>
 800690a:	4602      	mov	r2, r0
 800690c:	61f8      	str	r0, [r7, #28]
 800690e:	b928      	cbnz	r0, 800691c <__pow5mult+0x40>
 8006910:	4b1d      	ldr	r3, [pc, #116]	@ (8006988 <__pow5mult+0xac>)
 8006912:	481e      	ldr	r0, [pc, #120]	@ (800698c <__pow5mult+0xb0>)
 8006914:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006918:	f001 fb6e 	bl	8007ff8 <__assert_func>
 800691c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006920:	6004      	str	r4, [r0, #0]
 8006922:	60c4      	str	r4, [r0, #12]
 8006924:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800692c:	b94c      	cbnz	r4, 8006942 <__pow5mult+0x66>
 800692e:	f240 2171 	movw	r1, #625	@ 0x271
 8006932:	4638      	mov	r0, r7
 8006934:	f7ff ff12 	bl	800675c <__i2b>
 8006938:	2300      	movs	r3, #0
 800693a:	f8c8 0008 	str.w	r0, [r8, #8]
 800693e:	4604      	mov	r4, r0
 8006940:	6003      	str	r3, [r0, #0]
 8006942:	f04f 0900 	mov.w	r9, #0
 8006946:	07eb      	lsls	r3, r5, #31
 8006948:	d50a      	bpl.n	8006960 <__pow5mult+0x84>
 800694a:	4631      	mov	r1, r6
 800694c:	4622      	mov	r2, r4
 800694e:	4638      	mov	r0, r7
 8006950:	f7ff ff1a 	bl	8006788 <__multiply>
 8006954:	4631      	mov	r1, r6
 8006956:	4680      	mov	r8, r0
 8006958:	4638      	mov	r0, r7
 800695a:	f7ff fe01 	bl	8006560 <_Bfree>
 800695e:	4646      	mov	r6, r8
 8006960:	106d      	asrs	r5, r5, #1
 8006962:	d00b      	beq.n	800697c <__pow5mult+0xa0>
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	b938      	cbnz	r0, 8006978 <__pow5mult+0x9c>
 8006968:	4622      	mov	r2, r4
 800696a:	4621      	mov	r1, r4
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff ff0b 	bl	8006788 <__multiply>
 8006972:	6020      	str	r0, [r4, #0]
 8006974:	f8c0 9000 	str.w	r9, [r0]
 8006978:	4604      	mov	r4, r0
 800697a:	e7e4      	b.n	8006946 <__pow5mult+0x6a>
 800697c:	4630      	mov	r0, r6
 800697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006982:	bf00      	nop
 8006984:	0800a8f8 	.word	0x0800a8f8
 8006988:	0800a81e 	.word	0x0800a81e
 800698c:	0800a89e 	.word	0x0800a89e

08006990 <__lshift>:
 8006990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	460c      	mov	r4, r1
 8006996:	6849      	ldr	r1, [r1, #4]
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800699e:	68a3      	ldr	r3, [r4, #8]
 80069a0:	4607      	mov	r7, r0
 80069a2:	4691      	mov	r9, r2
 80069a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069a8:	f108 0601 	add.w	r6, r8, #1
 80069ac:	42b3      	cmp	r3, r6
 80069ae:	db0b      	blt.n	80069c8 <__lshift+0x38>
 80069b0:	4638      	mov	r0, r7
 80069b2:	f7ff fd95 	bl	80064e0 <_Balloc>
 80069b6:	4605      	mov	r5, r0
 80069b8:	b948      	cbnz	r0, 80069ce <__lshift+0x3e>
 80069ba:	4602      	mov	r2, r0
 80069bc:	4b28      	ldr	r3, [pc, #160]	@ (8006a60 <__lshift+0xd0>)
 80069be:	4829      	ldr	r0, [pc, #164]	@ (8006a64 <__lshift+0xd4>)
 80069c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80069c4:	f001 fb18 	bl	8007ff8 <__assert_func>
 80069c8:	3101      	adds	r1, #1
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	e7ee      	b.n	80069ac <__lshift+0x1c>
 80069ce:	2300      	movs	r3, #0
 80069d0:	f100 0114 	add.w	r1, r0, #20
 80069d4:	f100 0210 	add.w	r2, r0, #16
 80069d8:	4618      	mov	r0, r3
 80069da:	4553      	cmp	r3, sl
 80069dc:	db33      	blt.n	8006a46 <__lshift+0xb6>
 80069de:	6920      	ldr	r0, [r4, #16]
 80069e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069e4:	f104 0314 	add.w	r3, r4, #20
 80069e8:	f019 091f 	ands.w	r9, r9, #31
 80069ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069f4:	d02b      	beq.n	8006a4e <__lshift+0xbe>
 80069f6:	f1c9 0e20 	rsb	lr, r9, #32
 80069fa:	468a      	mov	sl, r1
 80069fc:	2200      	movs	r2, #0
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	fa00 f009 	lsl.w	r0, r0, r9
 8006a04:	4310      	orrs	r0, r2
 8006a06:	f84a 0b04 	str.w	r0, [sl], #4
 8006a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a0e:	459c      	cmp	ip, r3
 8006a10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a14:	d8f3      	bhi.n	80069fe <__lshift+0x6e>
 8006a16:	ebac 0304 	sub.w	r3, ip, r4
 8006a1a:	3b15      	subs	r3, #21
 8006a1c:	f023 0303 	bic.w	r3, r3, #3
 8006a20:	3304      	adds	r3, #4
 8006a22:	f104 0015 	add.w	r0, r4, #21
 8006a26:	4584      	cmp	ip, r0
 8006a28:	bf38      	it	cc
 8006a2a:	2304      	movcc	r3, #4
 8006a2c:	50ca      	str	r2, [r1, r3]
 8006a2e:	b10a      	cbz	r2, 8006a34 <__lshift+0xa4>
 8006a30:	f108 0602 	add.w	r6, r8, #2
 8006a34:	3e01      	subs	r6, #1
 8006a36:	4638      	mov	r0, r7
 8006a38:	612e      	str	r6, [r5, #16]
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	f7ff fd90 	bl	8006560 <_Bfree>
 8006a40:	4628      	mov	r0, r5
 8006a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	e7c5      	b.n	80069da <__lshift+0x4a>
 8006a4e:	3904      	subs	r1, #4
 8006a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a54:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a58:	459c      	cmp	ip, r3
 8006a5a:	d8f9      	bhi.n	8006a50 <__lshift+0xc0>
 8006a5c:	e7ea      	b.n	8006a34 <__lshift+0xa4>
 8006a5e:	bf00      	nop
 8006a60:	0800a88d 	.word	0x0800a88d
 8006a64:	0800a89e 	.word	0x0800a89e

08006a68 <__mcmp>:
 8006a68:	690a      	ldr	r2, [r1, #16]
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	6900      	ldr	r0, [r0, #16]
 8006a6e:	1a80      	subs	r0, r0, r2
 8006a70:	b530      	push	{r4, r5, lr}
 8006a72:	d10e      	bne.n	8006a92 <__mcmp+0x2a>
 8006a74:	3314      	adds	r3, #20
 8006a76:	3114      	adds	r1, #20
 8006a78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a88:	4295      	cmp	r5, r2
 8006a8a:	d003      	beq.n	8006a94 <__mcmp+0x2c>
 8006a8c:	d205      	bcs.n	8006a9a <__mcmp+0x32>
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a92:	bd30      	pop	{r4, r5, pc}
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d3f3      	bcc.n	8006a80 <__mcmp+0x18>
 8006a98:	e7fb      	b.n	8006a92 <__mcmp+0x2a>
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	e7f9      	b.n	8006a92 <__mcmp+0x2a>
	...

08006aa0 <__mdiff>:
 8006aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	4689      	mov	r9, r1
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	4648      	mov	r0, r9
 8006aac:	4614      	mov	r4, r2
 8006aae:	f7ff ffdb 	bl	8006a68 <__mcmp>
 8006ab2:	1e05      	subs	r5, r0, #0
 8006ab4:	d112      	bne.n	8006adc <__mdiff+0x3c>
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7ff fd11 	bl	80064e0 <_Balloc>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	b928      	cbnz	r0, 8006ace <__mdiff+0x2e>
 8006ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8006bc0 <__mdiff+0x120>)
 8006ac4:	f240 2137 	movw	r1, #567	@ 0x237
 8006ac8:	483e      	ldr	r0, [pc, #248]	@ (8006bc4 <__mdiff+0x124>)
 8006aca:	f001 fa95 	bl	8007ff8 <__assert_func>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	b003      	add	sp, #12
 8006ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006adc:	bfbc      	itt	lt
 8006ade:	464b      	movlt	r3, r9
 8006ae0:	46a1      	movlt	r9, r4
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ae8:	bfba      	itte	lt
 8006aea:	461c      	movlt	r4, r3
 8006aec:	2501      	movlt	r5, #1
 8006aee:	2500      	movge	r5, #0
 8006af0:	f7ff fcf6 	bl	80064e0 <_Balloc>
 8006af4:	4602      	mov	r2, r0
 8006af6:	b918      	cbnz	r0, 8006b00 <__mdiff+0x60>
 8006af8:	4b31      	ldr	r3, [pc, #196]	@ (8006bc0 <__mdiff+0x120>)
 8006afa:	f240 2145 	movw	r1, #581	@ 0x245
 8006afe:	e7e3      	b.n	8006ac8 <__mdiff+0x28>
 8006b00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b04:	6926      	ldr	r6, [r4, #16]
 8006b06:	60c5      	str	r5, [r0, #12]
 8006b08:	f109 0310 	add.w	r3, r9, #16
 8006b0c:	f109 0514 	add.w	r5, r9, #20
 8006b10:	f104 0e14 	add.w	lr, r4, #20
 8006b14:	f100 0b14 	add.w	fp, r0, #20
 8006b18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	46d9      	mov	r9, fp
 8006b24:	f04f 0c00 	mov.w	ip, #0
 8006b28:	9b01      	ldr	r3, [sp, #4]
 8006b2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	fa1f f38a 	uxth.w	r3, sl
 8006b38:	4619      	mov	r1, r3
 8006b3a:	b283      	uxth	r3, r0
 8006b3c:	1acb      	subs	r3, r1, r3
 8006b3e:	0c00      	lsrs	r0, r0, #16
 8006b40:	4463      	add	r3, ip
 8006b42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b50:	4576      	cmp	r6, lr
 8006b52:	f849 3b04 	str.w	r3, [r9], #4
 8006b56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b5a:	d8e5      	bhi.n	8006b28 <__mdiff+0x88>
 8006b5c:	1b33      	subs	r3, r6, r4
 8006b5e:	3b15      	subs	r3, #21
 8006b60:	f023 0303 	bic.w	r3, r3, #3
 8006b64:	3415      	adds	r4, #21
 8006b66:	3304      	adds	r3, #4
 8006b68:	42a6      	cmp	r6, r4
 8006b6a:	bf38      	it	cc
 8006b6c:	2304      	movcc	r3, #4
 8006b6e:	441d      	add	r5, r3
 8006b70:	445b      	add	r3, fp
 8006b72:	461e      	mov	r6, r3
 8006b74:	462c      	mov	r4, r5
 8006b76:	4544      	cmp	r4, r8
 8006b78:	d30e      	bcc.n	8006b98 <__mdiff+0xf8>
 8006b7a:	f108 0103 	add.w	r1, r8, #3
 8006b7e:	1b49      	subs	r1, r1, r5
 8006b80:	f021 0103 	bic.w	r1, r1, #3
 8006b84:	3d03      	subs	r5, #3
 8006b86:	45a8      	cmp	r8, r5
 8006b88:	bf38      	it	cc
 8006b8a:	2100      	movcc	r1, #0
 8006b8c:	440b      	add	r3, r1
 8006b8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b92:	b191      	cbz	r1, 8006bba <__mdiff+0x11a>
 8006b94:	6117      	str	r7, [r2, #16]
 8006b96:	e79d      	b.n	8006ad4 <__mdiff+0x34>
 8006b98:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b9c:	46e6      	mov	lr, ip
 8006b9e:	0c08      	lsrs	r0, r1, #16
 8006ba0:	fa1c fc81 	uxtah	ip, ip, r1
 8006ba4:	4471      	add	r1, lr
 8006ba6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006baa:	b289      	uxth	r1, r1
 8006bac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006bb0:	f846 1b04 	str.w	r1, [r6], #4
 8006bb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bb8:	e7dd      	b.n	8006b76 <__mdiff+0xd6>
 8006bba:	3f01      	subs	r7, #1
 8006bbc:	e7e7      	b.n	8006b8e <__mdiff+0xee>
 8006bbe:	bf00      	nop
 8006bc0:	0800a88d 	.word	0x0800a88d
 8006bc4:	0800a89e 	.word	0x0800a89e

08006bc8 <__ulp>:
 8006bc8:	b082      	sub	sp, #8
 8006bca:	ed8d 0b00 	vstr	d0, [sp]
 8006bce:	9a01      	ldr	r2, [sp, #4]
 8006bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006c10 <__ulp+0x48>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	dc08      	bgt.n	8006bee <__ulp+0x26>
 8006bdc:	425b      	negs	r3, r3
 8006bde:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006be2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006be6:	da04      	bge.n	8006bf2 <__ulp+0x2a>
 8006be8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006bec:	4113      	asrs	r3, r2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	e008      	b.n	8006c04 <__ulp+0x3c>
 8006bf2:	f1a2 0314 	sub.w	r3, r2, #20
 8006bf6:	2b1e      	cmp	r3, #30
 8006bf8:	bfda      	itte	le
 8006bfa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006bfe:	40da      	lsrle	r2, r3
 8006c00:	2201      	movgt	r2, #1
 8006c02:	2300      	movs	r3, #0
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	ec41 0b10 	vmov	d0, r0, r1
 8006c0c:	b002      	add	sp, #8
 8006c0e:	4770      	bx	lr
 8006c10:	7ff00000 	.word	0x7ff00000

08006c14 <__b2d>:
 8006c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c18:	6906      	ldr	r6, [r0, #16]
 8006c1a:	f100 0814 	add.w	r8, r0, #20
 8006c1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006c22:	1f37      	subs	r7, r6, #4
 8006c24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7ff fd4b 	bl	80066c4 <__hi0bits>
 8006c2e:	f1c0 0320 	rsb	r3, r0, #32
 8006c32:	280a      	cmp	r0, #10
 8006c34:	600b      	str	r3, [r1, #0]
 8006c36:	491b      	ldr	r1, [pc, #108]	@ (8006ca4 <__b2d+0x90>)
 8006c38:	dc15      	bgt.n	8006c66 <__b2d+0x52>
 8006c3a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006c3e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006c42:	45b8      	cmp	r8, r7
 8006c44:	ea43 0501 	orr.w	r5, r3, r1
 8006c48:	bf34      	ite	cc
 8006c4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006c4e:	2300      	movcs	r3, #0
 8006c50:	3015      	adds	r0, #21
 8006c52:	fa02 f000 	lsl.w	r0, r2, r0
 8006c56:	fa23 f30c 	lsr.w	r3, r3, ip
 8006c5a:	4303      	orrs	r3, r0
 8006c5c:	461c      	mov	r4, r3
 8006c5e:	ec45 4b10 	vmov	d0, r4, r5
 8006c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c66:	45b8      	cmp	r8, r7
 8006c68:	bf3a      	itte	cc
 8006c6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006c6e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006c72:	2300      	movcs	r3, #0
 8006c74:	380b      	subs	r0, #11
 8006c76:	d012      	beq.n	8006c9e <__b2d+0x8a>
 8006c78:	f1c0 0120 	rsb	r1, r0, #32
 8006c7c:	fa23 f401 	lsr.w	r4, r3, r1
 8006c80:	4082      	lsls	r2, r0
 8006c82:	4322      	orrs	r2, r4
 8006c84:	4547      	cmp	r7, r8
 8006c86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006c8a:	bf8c      	ite	hi
 8006c8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006c90:	2200      	movls	r2, #0
 8006c92:	4083      	lsls	r3, r0
 8006c94:	40ca      	lsrs	r2, r1
 8006c96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	e7de      	b.n	8006c5c <__b2d+0x48>
 8006c9e:	ea42 0501 	orr.w	r5, r2, r1
 8006ca2:	e7db      	b.n	8006c5c <__b2d+0x48>
 8006ca4:	3ff00000 	.word	0x3ff00000

08006ca8 <__d2b>:
 8006ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cac:	460f      	mov	r7, r1
 8006cae:	2101      	movs	r1, #1
 8006cb0:	ec59 8b10 	vmov	r8, r9, d0
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	f7ff fc13 	bl	80064e0 <_Balloc>
 8006cba:	4604      	mov	r4, r0
 8006cbc:	b930      	cbnz	r0, 8006ccc <__d2b+0x24>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	4b23      	ldr	r3, [pc, #140]	@ (8006d50 <__d2b+0xa8>)
 8006cc2:	4824      	ldr	r0, [pc, #144]	@ (8006d54 <__d2b+0xac>)
 8006cc4:	f240 310f 	movw	r1, #783	@ 0x30f
 8006cc8:	f001 f996 	bl	8007ff8 <__assert_func>
 8006ccc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cd4:	b10d      	cbz	r5, 8006cda <__d2b+0x32>
 8006cd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	f1b8 0300 	subs.w	r3, r8, #0
 8006ce0:	d023      	beq.n	8006d2a <__d2b+0x82>
 8006ce2:	4668      	mov	r0, sp
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	f7ff fd0c 	bl	8006702 <__lo0bits>
 8006cea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006cee:	b1d0      	cbz	r0, 8006d26 <__d2b+0x7e>
 8006cf0:	f1c0 0320 	rsb	r3, r0, #32
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	40c2      	lsrs	r2, r0
 8006cfc:	6163      	str	r3, [r4, #20]
 8006cfe:	9201      	str	r2, [sp, #4]
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	61a3      	str	r3, [r4, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	bf0c      	ite	eq
 8006d08:	2201      	moveq	r2, #1
 8006d0a:	2202      	movne	r2, #2
 8006d0c:	6122      	str	r2, [r4, #16]
 8006d0e:	b1a5      	cbz	r5, 8006d3a <__d2b+0x92>
 8006d10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d14:	4405      	add	r5, r0
 8006d16:	603d      	str	r5, [r7, #0]
 8006d18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d1c:	6030      	str	r0, [r6, #0]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	b003      	add	sp, #12
 8006d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d26:	6161      	str	r1, [r4, #20]
 8006d28:	e7ea      	b.n	8006d00 <__d2b+0x58>
 8006d2a:	a801      	add	r0, sp, #4
 8006d2c:	f7ff fce9 	bl	8006702 <__lo0bits>
 8006d30:	9b01      	ldr	r3, [sp, #4]
 8006d32:	6163      	str	r3, [r4, #20]
 8006d34:	3020      	adds	r0, #32
 8006d36:	2201      	movs	r2, #1
 8006d38:	e7e8      	b.n	8006d0c <__d2b+0x64>
 8006d3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006d42:	6038      	str	r0, [r7, #0]
 8006d44:	6918      	ldr	r0, [r3, #16]
 8006d46:	f7ff fcbd 	bl	80066c4 <__hi0bits>
 8006d4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d4e:	e7e5      	b.n	8006d1c <__d2b+0x74>
 8006d50:	0800a88d 	.word	0x0800a88d
 8006d54:	0800a89e 	.word	0x0800a89e

08006d58 <__ratio>:
 8006d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	e9cd 1000 	strd	r1, r0, [sp]
 8006d62:	a902      	add	r1, sp, #8
 8006d64:	f7ff ff56 	bl	8006c14 <__b2d>
 8006d68:	9800      	ldr	r0, [sp, #0]
 8006d6a:	a903      	add	r1, sp, #12
 8006d6c:	ec55 4b10 	vmov	r4, r5, d0
 8006d70:	f7ff ff50 	bl	8006c14 <__b2d>
 8006d74:	9b01      	ldr	r3, [sp, #4]
 8006d76:	6919      	ldr	r1, [r3, #16]
 8006d78:	9b00      	ldr	r3, [sp, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	1ac9      	subs	r1, r1, r3
 8006d7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	ec5b ab10 	vmov	sl, fp, d0
 8006d88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfce      	itee	gt
 8006d90:	462a      	movgt	r2, r5
 8006d92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d96:	465a      	movle	r2, fp
 8006d98:	462f      	mov	r7, r5
 8006d9a:	46d9      	mov	r9, fp
 8006d9c:	bfcc      	ite	gt
 8006d9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006da2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006da6:	464b      	mov	r3, r9
 8006da8:	4652      	mov	r2, sl
 8006daa:	4620      	mov	r0, r4
 8006dac:	4639      	mov	r1, r7
 8006dae:	f7f9 fd6d 	bl	800088c <__aeabi_ddiv>
 8006db2:	ec41 0b10 	vmov	d0, r0, r1
 8006db6:	b005      	add	sp, #20
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006dbc <__copybits>:
 8006dbc:	3901      	subs	r1, #1
 8006dbe:	b570      	push	{r4, r5, r6, lr}
 8006dc0:	1149      	asrs	r1, r1, #5
 8006dc2:	6914      	ldr	r4, [r2, #16]
 8006dc4:	3101      	adds	r1, #1
 8006dc6:	f102 0314 	add.w	r3, r2, #20
 8006dca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006dce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006dd2:	1f05      	subs	r5, r0, #4
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	d30c      	bcc.n	8006df2 <__copybits+0x36>
 8006dd8:	1aa3      	subs	r3, r4, r2
 8006dda:	3b11      	subs	r3, #17
 8006ddc:	f023 0303 	bic.w	r3, r3, #3
 8006de0:	3211      	adds	r2, #17
 8006de2:	42a2      	cmp	r2, r4
 8006de4:	bf88      	it	hi
 8006de6:	2300      	movhi	r3, #0
 8006de8:	4418      	add	r0, r3
 8006dea:	2300      	movs	r3, #0
 8006dec:	4288      	cmp	r0, r1
 8006dee:	d305      	bcc.n	8006dfc <__copybits+0x40>
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006df6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006dfa:	e7eb      	b.n	8006dd4 <__copybits+0x18>
 8006dfc:	f840 3b04 	str.w	r3, [r0], #4
 8006e00:	e7f4      	b.n	8006dec <__copybits+0x30>

08006e02 <__any_on>:
 8006e02:	f100 0214 	add.w	r2, r0, #20
 8006e06:	6900      	ldr	r0, [r0, #16]
 8006e08:	114b      	asrs	r3, r1, #5
 8006e0a:	4298      	cmp	r0, r3
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	db11      	blt.n	8006e34 <__any_on+0x32>
 8006e10:	dd0a      	ble.n	8006e28 <__any_on+0x26>
 8006e12:	f011 011f 	ands.w	r1, r1, #31
 8006e16:	d007      	beq.n	8006e28 <__any_on+0x26>
 8006e18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e1c:	fa24 f001 	lsr.w	r0, r4, r1
 8006e20:	fa00 f101 	lsl.w	r1, r0, r1
 8006e24:	428c      	cmp	r4, r1
 8006e26:	d10b      	bne.n	8006e40 <__any_on+0x3e>
 8006e28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d803      	bhi.n	8006e38 <__any_on+0x36>
 8006e30:	2000      	movs	r0, #0
 8006e32:	bd10      	pop	{r4, pc}
 8006e34:	4603      	mov	r3, r0
 8006e36:	e7f7      	b.n	8006e28 <__any_on+0x26>
 8006e38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	d0f5      	beq.n	8006e2c <__any_on+0x2a>
 8006e40:	2001      	movs	r0, #1
 8006e42:	e7f6      	b.n	8006e32 <__any_on+0x30>

08006e44 <sulp>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	ec45 4b10 	vmov	d0, r4, r5
 8006e4e:	4616      	mov	r6, r2
 8006e50:	f7ff feba 	bl	8006bc8 <__ulp>
 8006e54:	ec51 0b10 	vmov	r0, r1, d0
 8006e58:	b17e      	cbz	r6, 8006e7a <sulp+0x36>
 8006e5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dd09      	ble.n	8006e7a <sulp+0x36>
 8006e66:	051b      	lsls	r3, r3, #20
 8006e68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006e6c:	2400      	movs	r4, #0
 8006e6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006e72:	4622      	mov	r2, r4
 8006e74:	462b      	mov	r3, r5
 8006e76:	f7f9 fbdf 	bl	8000638 <__aeabi_dmul>
 8006e7a:	ec41 0b10 	vmov	d0, r0, r1
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}

08006e80 <_strtod_l>:
 8006e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	b09f      	sub	sp, #124	@ 0x7c
 8006e86:	460c      	mov	r4, r1
 8006e88:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006e8e:	9005      	str	r0, [sp, #20]
 8006e90:	f04f 0a00 	mov.w	sl, #0
 8006e94:	f04f 0b00 	mov.w	fp, #0
 8006e98:	460a      	mov	r2, r1
 8006e9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e9c:	7811      	ldrb	r1, [r2, #0]
 8006e9e:	292b      	cmp	r1, #43	@ 0x2b
 8006ea0:	d04a      	beq.n	8006f38 <_strtod_l+0xb8>
 8006ea2:	d838      	bhi.n	8006f16 <_strtod_l+0x96>
 8006ea4:	290d      	cmp	r1, #13
 8006ea6:	d832      	bhi.n	8006f0e <_strtod_l+0x8e>
 8006ea8:	2908      	cmp	r1, #8
 8006eaa:	d832      	bhi.n	8006f12 <_strtod_l+0x92>
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d03b      	beq.n	8006f28 <_strtod_l+0xa8>
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006eb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006eb6:	782a      	ldrb	r2, [r5, #0]
 8006eb8:	2a30      	cmp	r2, #48	@ 0x30
 8006eba:	f040 80b3 	bne.w	8007024 <_strtod_l+0x1a4>
 8006ebe:	786a      	ldrb	r2, [r5, #1]
 8006ec0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ec4:	2a58      	cmp	r2, #88	@ 0x58
 8006ec6:	d16e      	bne.n	8006fa6 <_strtod_l+0x126>
 8006ec8:	9302      	str	r3, [sp, #8]
 8006eca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	ab1a      	add	r3, sp, #104	@ 0x68
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	4a8e      	ldr	r2, [pc, #568]	@ (800710c <_strtod_l+0x28c>)
 8006ed4:	9805      	ldr	r0, [sp, #20]
 8006ed6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006ed8:	a919      	add	r1, sp, #100	@ 0x64
 8006eda:	f001 f927 	bl	800812c <__gethex>
 8006ede:	f010 060f 	ands.w	r6, r0, #15
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	d005      	beq.n	8006ef2 <_strtod_l+0x72>
 8006ee6:	2e06      	cmp	r6, #6
 8006ee8:	d128      	bne.n	8006f3c <_strtod_l+0xbc>
 8006eea:	3501      	adds	r5, #1
 8006eec:	2300      	movs	r3, #0
 8006eee:	9519      	str	r5, [sp, #100]	@ 0x64
 8006ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ef2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 858e 	bne.w	8007a16 <_strtod_l+0xb96>
 8006efa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006efc:	b1cb      	cbz	r3, 8006f32 <_strtod_l+0xb2>
 8006efe:	4652      	mov	r2, sl
 8006f00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006f04:	ec43 2b10 	vmov	d0, r2, r3
 8006f08:	b01f      	add	sp, #124	@ 0x7c
 8006f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	2920      	cmp	r1, #32
 8006f10:	d1ce      	bne.n	8006eb0 <_strtod_l+0x30>
 8006f12:	3201      	adds	r2, #1
 8006f14:	e7c1      	b.n	8006e9a <_strtod_l+0x1a>
 8006f16:	292d      	cmp	r1, #45	@ 0x2d
 8006f18:	d1ca      	bne.n	8006eb0 <_strtod_l+0x30>
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f1e:	1c51      	adds	r1, r2, #1
 8006f20:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f22:	7852      	ldrb	r2, [r2, #1]
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	d1c5      	bne.n	8006eb4 <_strtod_l+0x34>
 8006f28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f2a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 8570 	bne.w	8007a12 <_strtod_l+0xb92>
 8006f32:	4652      	mov	r2, sl
 8006f34:	465b      	mov	r3, fp
 8006f36:	e7e5      	b.n	8006f04 <_strtod_l+0x84>
 8006f38:	2100      	movs	r1, #0
 8006f3a:	e7ef      	b.n	8006f1c <_strtod_l+0x9c>
 8006f3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f3e:	b13a      	cbz	r2, 8006f50 <_strtod_l+0xd0>
 8006f40:	2135      	movs	r1, #53	@ 0x35
 8006f42:	a81c      	add	r0, sp, #112	@ 0x70
 8006f44:	f7ff ff3a 	bl	8006dbc <__copybits>
 8006f48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f4a:	9805      	ldr	r0, [sp, #20]
 8006f4c:	f7ff fb08 	bl	8006560 <_Bfree>
 8006f50:	3e01      	subs	r6, #1
 8006f52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006f54:	2e04      	cmp	r6, #4
 8006f56:	d806      	bhi.n	8006f66 <_strtod_l+0xe6>
 8006f58:	e8df f006 	tbb	[pc, r6]
 8006f5c:	201d0314 	.word	0x201d0314
 8006f60:	14          	.byte	0x14
 8006f61:	00          	.byte	0x00
 8006f62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006f66:	05e1      	lsls	r1, r4, #23
 8006f68:	bf48      	it	mi
 8006f6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006f6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f72:	0d1b      	lsrs	r3, r3, #20
 8006f74:	051b      	lsls	r3, r3, #20
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1bb      	bne.n	8006ef2 <_strtod_l+0x72>
 8006f7a:	f7fe fb31 	bl	80055e0 <__errno>
 8006f7e:	2322      	movs	r3, #34	@ 0x22
 8006f80:	6003      	str	r3, [r0, #0]
 8006f82:	e7b6      	b.n	8006ef2 <_strtod_l+0x72>
 8006f84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006f88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006f8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f94:	e7e7      	b.n	8006f66 <_strtod_l+0xe6>
 8006f96:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007114 <_strtod_l+0x294>
 8006f9a:	e7e4      	b.n	8006f66 <_strtod_l+0xe6>
 8006f9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006fa0:	f04f 3aff 	mov.w	sl, #4294967295
 8006fa4:	e7df      	b.n	8006f66 <_strtod_l+0xe6>
 8006fa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	2b30      	cmp	r3, #48	@ 0x30
 8006fb0:	d0f9      	beq.n	8006fa6 <_strtod_l+0x126>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d09d      	beq.n	8006ef2 <_strtod_l+0x72>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9308      	str	r3, [sp, #32]
 8006fc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc4:	461f      	mov	r7, r3
 8006fc6:	220a      	movs	r2, #10
 8006fc8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006fca:	7805      	ldrb	r5, [r0, #0]
 8006fcc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006fd0:	b2d9      	uxtb	r1, r3
 8006fd2:	2909      	cmp	r1, #9
 8006fd4:	d928      	bls.n	8007028 <_strtod_l+0x1a8>
 8006fd6:	494e      	ldr	r1, [pc, #312]	@ (8007110 <_strtod_l+0x290>)
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f000 ffd5 	bl	8007f88 <strncmp>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d032      	beq.n	8007048 <_strtod_l+0x1c8>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	462a      	mov	r2, r5
 8006fe6:	4681      	mov	r9, r0
 8006fe8:	463d      	mov	r5, r7
 8006fea:	4603      	mov	r3, r0
 8006fec:	2a65      	cmp	r2, #101	@ 0x65
 8006fee:	d001      	beq.n	8006ff4 <_strtod_l+0x174>
 8006ff0:	2a45      	cmp	r2, #69	@ 0x45
 8006ff2:	d114      	bne.n	800701e <_strtod_l+0x19e>
 8006ff4:	b91d      	cbnz	r5, 8006ffe <_strtod_l+0x17e>
 8006ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ff8:	4302      	orrs	r2, r0
 8006ffa:	d095      	beq.n	8006f28 <_strtod_l+0xa8>
 8006ffc:	2500      	movs	r5, #0
 8006ffe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007000:	1c62      	adds	r2, r4, #1
 8007002:	9219      	str	r2, [sp, #100]	@ 0x64
 8007004:	7862      	ldrb	r2, [r4, #1]
 8007006:	2a2b      	cmp	r2, #43	@ 0x2b
 8007008:	d077      	beq.n	80070fa <_strtod_l+0x27a>
 800700a:	2a2d      	cmp	r2, #45	@ 0x2d
 800700c:	d07b      	beq.n	8007106 <_strtod_l+0x286>
 800700e:	f04f 0c00 	mov.w	ip, #0
 8007012:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007016:	2909      	cmp	r1, #9
 8007018:	f240 8082 	bls.w	8007120 <_strtod_l+0x2a0>
 800701c:	9419      	str	r4, [sp, #100]	@ 0x64
 800701e:	f04f 0800 	mov.w	r8, #0
 8007022:	e0a2      	b.n	800716a <_strtod_l+0x2ea>
 8007024:	2300      	movs	r3, #0
 8007026:	e7c7      	b.n	8006fb8 <_strtod_l+0x138>
 8007028:	2f08      	cmp	r7, #8
 800702a:	bfd5      	itete	le
 800702c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800702e:	9908      	ldrgt	r1, [sp, #32]
 8007030:	fb02 3301 	mlale	r3, r2, r1, r3
 8007034:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007038:	f100 0001 	add.w	r0, r0, #1
 800703c:	bfd4      	ite	le
 800703e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007040:	9308      	strgt	r3, [sp, #32]
 8007042:	3701      	adds	r7, #1
 8007044:	9019      	str	r0, [sp, #100]	@ 0x64
 8007046:	e7bf      	b.n	8006fc8 <_strtod_l+0x148>
 8007048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	9219      	str	r2, [sp, #100]	@ 0x64
 800704e:	785a      	ldrb	r2, [r3, #1]
 8007050:	b37f      	cbz	r7, 80070b2 <_strtod_l+0x232>
 8007052:	4681      	mov	r9, r0
 8007054:	463d      	mov	r5, r7
 8007056:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800705a:	2b09      	cmp	r3, #9
 800705c:	d912      	bls.n	8007084 <_strtod_l+0x204>
 800705e:	2301      	movs	r3, #1
 8007060:	e7c4      	b.n	8006fec <_strtod_l+0x16c>
 8007062:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	9219      	str	r2, [sp, #100]	@ 0x64
 8007068:	785a      	ldrb	r2, [r3, #1]
 800706a:	3001      	adds	r0, #1
 800706c:	2a30      	cmp	r2, #48	@ 0x30
 800706e:	d0f8      	beq.n	8007062 <_strtod_l+0x1e2>
 8007070:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007074:	2b08      	cmp	r3, #8
 8007076:	f200 84d3 	bhi.w	8007a20 <_strtod_l+0xba0>
 800707a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800707c:	930c      	str	r3, [sp, #48]	@ 0x30
 800707e:	4681      	mov	r9, r0
 8007080:	2000      	movs	r0, #0
 8007082:	4605      	mov	r5, r0
 8007084:	3a30      	subs	r2, #48	@ 0x30
 8007086:	f100 0301 	add.w	r3, r0, #1
 800708a:	d02a      	beq.n	80070e2 <_strtod_l+0x262>
 800708c:	4499      	add	r9, r3
 800708e:	eb00 0c05 	add.w	ip, r0, r5
 8007092:	462b      	mov	r3, r5
 8007094:	210a      	movs	r1, #10
 8007096:	4563      	cmp	r3, ip
 8007098:	d10d      	bne.n	80070b6 <_strtod_l+0x236>
 800709a:	1c69      	adds	r1, r5, #1
 800709c:	4401      	add	r1, r0
 800709e:	4428      	add	r0, r5
 80070a0:	2808      	cmp	r0, #8
 80070a2:	dc16      	bgt.n	80070d2 <_strtod_l+0x252>
 80070a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070a6:	230a      	movs	r3, #10
 80070a8:	fb03 2300 	mla	r3, r3, r0, r2
 80070ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ae:	2300      	movs	r3, #0
 80070b0:	e018      	b.n	80070e4 <_strtod_l+0x264>
 80070b2:	4638      	mov	r0, r7
 80070b4:	e7da      	b.n	800706c <_strtod_l+0x1ec>
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	f103 0301 	add.w	r3, r3, #1
 80070bc:	dc03      	bgt.n	80070c6 <_strtod_l+0x246>
 80070be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80070c0:	434e      	muls	r6, r1
 80070c2:	960a      	str	r6, [sp, #40]	@ 0x28
 80070c4:	e7e7      	b.n	8007096 <_strtod_l+0x216>
 80070c6:	2b10      	cmp	r3, #16
 80070c8:	bfde      	ittt	le
 80070ca:	9e08      	ldrle	r6, [sp, #32]
 80070cc:	434e      	mulle	r6, r1
 80070ce:	9608      	strle	r6, [sp, #32]
 80070d0:	e7e1      	b.n	8007096 <_strtod_l+0x216>
 80070d2:	280f      	cmp	r0, #15
 80070d4:	dceb      	bgt.n	80070ae <_strtod_l+0x22e>
 80070d6:	9808      	ldr	r0, [sp, #32]
 80070d8:	230a      	movs	r3, #10
 80070da:	fb03 2300 	mla	r3, r3, r0, r2
 80070de:	9308      	str	r3, [sp, #32]
 80070e0:	e7e5      	b.n	80070ae <_strtod_l+0x22e>
 80070e2:	4629      	mov	r1, r5
 80070e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070e6:	1c50      	adds	r0, r2, #1
 80070e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80070ea:	7852      	ldrb	r2, [r2, #1]
 80070ec:	4618      	mov	r0, r3
 80070ee:	460d      	mov	r5, r1
 80070f0:	e7b1      	b.n	8007056 <_strtod_l+0x1d6>
 80070f2:	f04f 0900 	mov.w	r9, #0
 80070f6:	2301      	movs	r3, #1
 80070f8:	e77d      	b.n	8006ff6 <_strtod_l+0x176>
 80070fa:	f04f 0c00 	mov.w	ip, #0
 80070fe:	1ca2      	adds	r2, r4, #2
 8007100:	9219      	str	r2, [sp, #100]	@ 0x64
 8007102:	78a2      	ldrb	r2, [r4, #2]
 8007104:	e785      	b.n	8007012 <_strtod_l+0x192>
 8007106:	f04f 0c01 	mov.w	ip, #1
 800710a:	e7f8      	b.n	80070fe <_strtod_l+0x27e>
 800710c:	0800aa10 	.word	0x0800aa10
 8007110:	0800a9f8 	.word	0x0800a9f8
 8007114:	7ff00000 	.word	0x7ff00000
 8007118:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800711a:	1c51      	adds	r1, r2, #1
 800711c:	9119      	str	r1, [sp, #100]	@ 0x64
 800711e:	7852      	ldrb	r2, [r2, #1]
 8007120:	2a30      	cmp	r2, #48	@ 0x30
 8007122:	d0f9      	beq.n	8007118 <_strtod_l+0x298>
 8007124:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007128:	2908      	cmp	r1, #8
 800712a:	f63f af78 	bhi.w	800701e <_strtod_l+0x19e>
 800712e:	3a30      	subs	r2, #48	@ 0x30
 8007130:	920e      	str	r2, [sp, #56]	@ 0x38
 8007132:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007134:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007136:	f04f 080a 	mov.w	r8, #10
 800713a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800713c:	1c56      	adds	r6, r2, #1
 800713e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007140:	7852      	ldrb	r2, [r2, #1]
 8007142:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007146:	f1be 0f09 	cmp.w	lr, #9
 800714a:	d939      	bls.n	80071c0 <_strtod_l+0x340>
 800714c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800714e:	1a76      	subs	r6, r6, r1
 8007150:	2e08      	cmp	r6, #8
 8007152:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007156:	dc03      	bgt.n	8007160 <_strtod_l+0x2e0>
 8007158:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800715a:	4588      	cmp	r8, r1
 800715c:	bfa8      	it	ge
 800715e:	4688      	movge	r8, r1
 8007160:	f1bc 0f00 	cmp.w	ip, #0
 8007164:	d001      	beq.n	800716a <_strtod_l+0x2ea>
 8007166:	f1c8 0800 	rsb	r8, r8, #0
 800716a:	2d00      	cmp	r5, #0
 800716c:	d14e      	bne.n	800720c <_strtod_l+0x38c>
 800716e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007170:	4308      	orrs	r0, r1
 8007172:	f47f aebe 	bne.w	8006ef2 <_strtod_l+0x72>
 8007176:	2b00      	cmp	r3, #0
 8007178:	f47f aed6 	bne.w	8006f28 <_strtod_l+0xa8>
 800717c:	2a69      	cmp	r2, #105	@ 0x69
 800717e:	d028      	beq.n	80071d2 <_strtod_l+0x352>
 8007180:	dc25      	bgt.n	80071ce <_strtod_l+0x34e>
 8007182:	2a49      	cmp	r2, #73	@ 0x49
 8007184:	d025      	beq.n	80071d2 <_strtod_l+0x352>
 8007186:	2a4e      	cmp	r2, #78	@ 0x4e
 8007188:	f47f aece 	bne.w	8006f28 <_strtod_l+0xa8>
 800718c:	499b      	ldr	r1, [pc, #620]	@ (80073fc <_strtod_l+0x57c>)
 800718e:	a819      	add	r0, sp, #100	@ 0x64
 8007190:	f001 f9ee 	bl	8008570 <__match>
 8007194:	2800      	cmp	r0, #0
 8007196:	f43f aec7 	beq.w	8006f28 <_strtod_l+0xa8>
 800719a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b28      	cmp	r3, #40	@ 0x28
 80071a0:	d12e      	bne.n	8007200 <_strtod_l+0x380>
 80071a2:	4997      	ldr	r1, [pc, #604]	@ (8007400 <_strtod_l+0x580>)
 80071a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80071a6:	a819      	add	r0, sp, #100	@ 0x64
 80071a8:	f001 f9f6 	bl	8008598 <__hexnan>
 80071ac:	2805      	cmp	r0, #5
 80071ae:	d127      	bne.n	8007200 <_strtod_l+0x380>
 80071b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80071b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80071b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80071ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80071be:	e698      	b.n	8006ef2 <_strtod_l+0x72>
 80071c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80071c2:	fb08 2101 	mla	r1, r8, r1, r2
 80071c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80071ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80071cc:	e7b5      	b.n	800713a <_strtod_l+0x2ba>
 80071ce:	2a6e      	cmp	r2, #110	@ 0x6e
 80071d0:	e7da      	b.n	8007188 <_strtod_l+0x308>
 80071d2:	498c      	ldr	r1, [pc, #560]	@ (8007404 <_strtod_l+0x584>)
 80071d4:	a819      	add	r0, sp, #100	@ 0x64
 80071d6:	f001 f9cb 	bl	8008570 <__match>
 80071da:	2800      	cmp	r0, #0
 80071dc:	f43f aea4 	beq.w	8006f28 <_strtod_l+0xa8>
 80071e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071e2:	4989      	ldr	r1, [pc, #548]	@ (8007408 <_strtod_l+0x588>)
 80071e4:	3b01      	subs	r3, #1
 80071e6:	a819      	add	r0, sp, #100	@ 0x64
 80071e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80071ea:	f001 f9c1 	bl	8008570 <__match>
 80071ee:	b910      	cbnz	r0, 80071f6 <_strtod_l+0x376>
 80071f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071f2:	3301      	adds	r3, #1
 80071f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80071f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007418 <_strtod_l+0x598>
 80071fa:	f04f 0a00 	mov.w	sl, #0
 80071fe:	e678      	b.n	8006ef2 <_strtod_l+0x72>
 8007200:	4882      	ldr	r0, [pc, #520]	@ (800740c <_strtod_l+0x58c>)
 8007202:	f000 fef1 	bl	8007fe8 <nan>
 8007206:	ec5b ab10 	vmov	sl, fp, d0
 800720a:	e672      	b.n	8006ef2 <_strtod_l+0x72>
 800720c:	eba8 0309 	sub.w	r3, r8, r9
 8007210:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007212:	9309      	str	r3, [sp, #36]	@ 0x24
 8007214:	2f00      	cmp	r7, #0
 8007216:	bf08      	it	eq
 8007218:	462f      	moveq	r7, r5
 800721a:	2d10      	cmp	r5, #16
 800721c:	462c      	mov	r4, r5
 800721e:	bfa8      	it	ge
 8007220:	2410      	movge	r4, #16
 8007222:	f7f9 f98f 	bl	8000544 <__aeabi_ui2d>
 8007226:	2d09      	cmp	r5, #9
 8007228:	4682      	mov	sl, r0
 800722a:	468b      	mov	fp, r1
 800722c:	dc13      	bgt.n	8007256 <_strtod_l+0x3d6>
 800722e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	f43f ae5e 	beq.w	8006ef2 <_strtod_l+0x72>
 8007236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007238:	dd78      	ble.n	800732c <_strtod_l+0x4ac>
 800723a:	2b16      	cmp	r3, #22
 800723c:	dc5f      	bgt.n	80072fe <_strtod_l+0x47e>
 800723e:	4974      	ldr	r1, [pc, #464]	@ (8007410 <_strtod_l+0x590>)
 8007240:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007248:	4652      	mov	r2, sl
 800724a:	465b      	mov	r3, fp
 800724c:	f7f9 f9f4 	bl	8000638 <__aeabi_dmul>
 8007250:	4682      	mov	sl, r0
 8007252:	468b      	mov	fp, r1
 8007254:	e64d      	b.n	8006ef2 <_strtod_l+0x72>
 8007256:	4b6e      	ldr	r3, [pc, #440]	@ (8007410 <_strtod_l+0x590>)
 8007258:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800725c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007260:	f7f9 f9ea 	bl	8000638 <__aeabi_dmul>
 8007264:	4682      	mov	sl, r0
 8007266:	9808      	ldr	r0, [sp, #32]
 8007268:	468b      	mov	fp, r1
 800726a:	f7f9 f96b 	bl	8000544 <__aeabi_ui2d>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4650      	mov	r0, sl
 8007274:	4659      	mov	r1, fp
 8007276:	f7f9 f829 	bl	80002cc <__adddf3>
 800727a:	2d0f      	cmp	r5, #15
 800727c:	4682      	mov	sl, r0
 800727e:	468b      	mov	fp, r1
 8007280:	ddd5      	ble.n	800722e <_strtod_l+0x3ae>
 8007282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007284:	1b2c      	subs	r4, r5, r4
 8007286:	441c      	add	r4, r3
 8007288:	2c00      	cmp	r4, #0
 800728a:	f340 8096 	ble.w	80073ba <_strtod_l+0x53a>
 800728e:	f014 030f 	ands.w	r3, r4, #15
 8007292:	d00a      	beq.n	80072aa <_strtod_l+0x42a>
 8007294:	495e      	ldr	r1, [pc, #376]	@ (8007410 <_strtod_l+0x590>)
 8007296:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800729a:	4652      	mov	r2, sl
 800729c:	465b      	mov	r3, fp
 800729e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072a2:	f7f9 f9c9 	bl	8000638 <__aeabi_dmul>
 80072a6:	4682      	mov	sl, r0
 80072a8:	468b      	mov	fp, r1
 80072aa:	f034 040f 	bics.w	r4, r4, #15
 80072ae:	d073      	beq.n	8007398 <_strtod_l+0x518>
 80072b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80072b4:	dd48      	ble.n	8007348 <_strtod_l+0x4c8>
 80072b6:	2400      	movs	r4, #0
 80072b8:	46a0      	mov	r8, r4
 80072ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80072bc:	46a1      	mov	r9, r4
 80072be:	9a05      	ldr	r2, [sp, #20]
 80072c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007418 <_strtod_l+0x598>
 80072c4:	2322      	movs	r3, #34	@ 0x22
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	f04f 0a00 	mov.w	sl, #0
 80072cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f43f ae0f 	beq.w	8006ef2 <_strtod_l+0x72>
 80072d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072d6:	9805      	ldr	r0, [sp, #20]
 80072d8:	f7ff f942 	bl	8006560 <_Bfree>
 80072dc:	9805      	ldr	r0, [sp, #20]
 80072de:	4649      	mov	r1, r9
 80072e0:	f7ff f93e 	bl	8006560 <_Bfree>
 80072e4:	9805      	ldr	r0, [sp, #20]
 80072e6:	4641      	mov	r1, r8
 80072e8:	f7ff f93a 	bl	8006560 <_Bfree>
 80072ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072ee:	9805      	ldr	r0, [sp, #20]
 80072f0:	f7ff f936 	bl	8006560 <_Bfree>
 80072f4:	9805      	ldr	r0, [sp, #20]
 80072f6:	4621      	mov	r1, r4
 80072f8:	f7ff f932 	bl	8006560 <_Bfree>
 80072fc:	e5f9      	b.n	8006ef2 <_strtod_l+0x72>
 80072fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007300:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007304:	4293      	cmp	r3, r2
 8007306:	dbbc      	blt.n	8007282 <_strtod_l+0x402>
 8007308:	4c41      	ldr	r4, [pc, #260]	@ (8007410 <_strtod_l+0x590>)
 800730a:	f1c5 050f 	rsb	r5, r5, #15
 800730e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007312:	4652      	mov	r2, sl
 8007314:	465b      	mov	r3, fp
 8007316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800731a:	f7f9 f98d 	bl	8000638 <__aeabi_dmul>
 800731e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007320:	1b5d      	subs	r5, r3, r5
 8007322:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007326:	e9d4 2300 	ldrd	r2, r3, [r4]
 800732a:	e78f      	b.n	800724c <_strtod_l+0x3cc>
 800732c:	3316      	adds	r3, #22
 800732e:	dba8      	blt.n	8007282 <_strtod_l+0x402>
 8007330:	4b37      	ldr	r3, [pc, #220]	@ (8007410 <_strtod_l+0x590>)
 8007332:	eba9 0808 	sub.w	r8, r9, r8
 8007336:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800733a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800733e:	4650      	mov	r0, sl
 8007340:	4659      	mov	r1, fp
 8007342:	f7f9 faa3 	bl	800088c <__aeabi_ddiv>
 8007346:	e783      	b.n	8007250 <_strtod_l+0x3d0>
 8007348:	4b32      	ldr	r3, [pc, #200]	@ (8007414 <_strtod_l+0x594>)
 800734a:	9308      	str	r3, [sp, #32]
 800734c:	2300      	movs	r3, #0
 800734e:	1124      	asrs	r4, r4, #4
 8007350:	4650      	mov	r0, sl
 8007352:	4659      	mov	r1, fp
 8007354:	461e      	mov	r6, r3
 8007356:	2c01      	cmp	r4, #1
 8007358:	dc21      	bgt.n	800739e <_strtod_l+0x51e>
 800735a:	b10b      	cbz	r3, 8007360 <_strtod_l+0x4e0>
 800735c:	4682      	mov	sl, r0
 800735e:	468b      	mov	fp, r1
 8007360:	492c      	ldr	r1, [pc, #176]	@ (8007414 <_strtod_l+0x594>)
 8007362:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007366:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800736a:	4652      	mov	r2, sl
 800736c:	465b      	mov	r3, fp
 800736e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007372:	f7f9 f961 	bl	8000638 <__aeabi_dmul>
 8007376:	4b28      	ldr	r3, [pc, #160]	@ (8007418 <_strtod_l+0x598>)
 8007378:	460a      	mov	r2, r1
 800737a:	400b      	ands	r3, r1
 800737c:	4927      	ldr	r1, [pc, #156]	@ (800741c <_strtod_l+0x59c>)
 800737e:	428b      	cmp	r3, r1
 8007380:	4682      	mov	sl, r0
 8007382:	d898      	bhi.n	80072b6 <_strtod_l+0x436>
 8007384:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007388:	428b      	cmp	r3, r1
 800738a:	bf86      	itte	hi
 800738c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007420 <_strtod_l+0x5a0>
 8007390:	f04f 3aff 	movhi.w	sl, #4294967295
 8007394:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007398:	2300      	movs	r3, #0
 800739a:	9308      	str	r3, [sp, #32]
 800739c:	e07a      	b.n	8007494 <_strtod_l+0x614>
 800739e:	07e2      	lsls	r2, r4, #31
 80073a0:	d505      	bpl.n	80073ae <_strtod_l+0x52e>
 80073a2:	9b08      	ldr	r3, [sp, #32]
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f9 f946 	bl	8000638 <__aeabi_dmul>
 80073ac:	2301      	movs	r3, #1
 80073ae:	9a08      	ldr	r2, [sp, #32]
 80073b0:	3208      	adds	r2, #8
 80073b2:	3601      	adds	r6, #1
 80073b4:	1064      	asrs	r4, r4, #1
 80073b6:	9208      	str	r2, [sp, #32]
 80073b8:	e7cd      	b.n	8007356 <_strtod_l+0x4d6>
 80073ba:	d0ed      	beq.n	8007398 <_strtod_l+0x518>
 80073bc:	4264      	negs	r4, r4
 80073be:	f014 020f 	ands.w	r2, r4, #15
 80073c2:	d00a      	beq.n	80073da <_strtod_l+0x55a>
 80073c4:	4b12      	ldr	r3, [pc, #72]	@ (8007410 <_strtod_l+0x590>)
 80073c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073ca:	4650      	mov	r0, sl
 80073cc:	4659      	mov	r1, fp
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f9 fa5b 	bl	800088c <__aeabi_ddiv>
 80073d6:	4682      	mov	sl, r0
 80073d8:	468b      	mov	fp, r1
 80073da:	1124      	asrs	r4, r4, #4
 80073dc:	d0dc      	beq.n	8007398 <_strtod_l+0x518>
 80073de:	2c1f      	cmp	r4, #31
 80073e0:	dd20      	ble.n	8007424 <_strtod_l+0x5a4>
 80073e2:	2400      	movs	r4, #0
 80073e4:	46a0      	mov	r8, r4
 80073e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80073e8:	46a1      	mov	r9, r4
 80073ea:	9a05      	ldr	r2, [sp, #20]
 80073ec:	2322      	movs	r3, #34	@ 0x22
 80073ee:	f04f 0a00 	mov.w	sl, #0
 80073f2:	f04f 0b00 	mov.w	fp, #0
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	e768      	b.n	80072cc <_strtod_l+0x44c>
 80073fa:	bf00      	nop
 80073fc:	0800a7e5 	.word	0x0800a7e5
 8007400:	0800a9fc 	.word	0x0800a9fc
 8007404:	0800a7dd 	.word	0x0800a7dd
 8007408:	0800a814 	.word	0x0800a814
 800740c:	0800aba5 	.word	0x0800aba5
 8007410:	0800a930 	.word	0x0800a930
 8007414:	0800a908 	.word	0x0800a908
 8007418:	7ff00000 	.word	0x7ff00000
 800741c:	7ca00000 	.word	0x7ca00000
 8007420:	7fefffff 	.word	0x7fefffff
 8007424:	f014 0310 	ands.w	r3, r4, #16
 8007428:	bf18      	it	ne
 800742a:	236a      	movne	r3, #106	@ 0x6a
 800742c:	4ea9      	ldr	r6, [pc, #676]	@ (80076d4 <_strtod_l+0x854>)
 800742e:	9308      	str	r3, [sp, #32]
 8007430:	4650      	mov	r0, sl
 8007432:	4659      	mov	r1, fp
 8007434:	2300      	movs	r3, #0
 8007436:	07e2      	lsls	r2, r4, #31
 8007438:	d504      	bpl.n	8007444 <_strtod_l+0x5c4>
 800743a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800743e:	f7f9 f8fb 	bl	8000638 <__aeabi_dmul>
 8007442:	2301      	movs	r3, #1
 8007444:	1064      	asrs	r4, r4, #1
 8007446:	f106 0608 	add.w	r6, r6, #8
 800744a:	d1f4      	bne.n	8007436 <_strtod_l+0x5b6>
 800744c:	b10b      	cbz	r3, 8007452 <_strtod_l+0x5d2>
 800744e:	4682      	mov	sl, r0
 8007450:	468b      	mov	fp, r1
 8007452:	9b08      	ldr	r3, [sp, #32]
 8007454:	b1b3      	cbz	r3, 8007484 <_strtod_l+0x604>
 8007456:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800745a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800745e:	2b00      	cmp	r3, #0
 8007460:	4659      	mov	r1, fp
 8007462:	dd0f      	ble.n	8007484 <_strtod_l+0x604>
 8007464:	2b1f      	cmp	r3, #31
 8007466:	dd55      	ble.n	8007514 <_strtod_l+0x694>
 8007468:	2b34      	cmp	r3, #52	@ 0x34
 800746a:	bfde      	ittt	le
 800746c:	f04f 33ff 	movle.w	r3, #4294967295
 8007470:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007474:	4093      	lslle	r3, r2
 8007476:	f04f 0a00 	mov.w	sl, #0
 800747a:	bfcc      	ite	gt
 800747c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007480:	ea03 0b01 	andle.w	fp, r3, r1
 8007484:	2200      	movs	r2, #0
 8007486:	2300      	movs	r3, #0
 8007488:	4650      	mov	r0, sl
 800748a:	4659      	mov	r1, fp
 800748c:	f7f9 fb3c 	bl	8000b08 <__aeabi_dcmpeq>
 8007490:	2800      	cmp	r0, #0
 8007492:	d1a6      	bne.n	80073e2 <_strtod_l+0x562>
 8007494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800749a:	9805      	ldr	r0, [sp, #20]
 800749c:	462b      	mov	r3, r5
 800749e:	463a      	mov	r2, r7
 80074a0:	f7ff f8c6 	bl	8006630 <__s2b>
 80074a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f43f af05 	beq.w	80072b6 <_strtod_l+0x436>
 80074ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ae:	2a00      	cmp	r2, #0
 80074b0:	eba9 0308 	sub.w	r3, r9, r8
 80074b4:	bfa8      	it	ge
 80074b6:	2300      	movge	r3, #0
 80074b8:	9312      	str	r3, [sp, #72]	@ 0x48
 80074ba:	2400      	movs	r4, #0
 80074bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80074c0:	9316      	str	r3, [sp, #88]	@ 0x58
 80074c2:	46a0      	mov	r8, r4
 80074c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074c6:	9805      	ldr	r0, [sp, #20]
 80074c8:	6859      	ldr	r1, [r3, #4]
 80074ca:	f7ff f809 	bl	80064e0 <_Balloc>
 80074ce:	4681      	mov	r9, r0
 80074d0:	2800      	cmp	r0, #0
 80074d2:	f43f aef4 	beq.w	80072be <_strtod_l+0x43e>
 80074d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	3202      	adds	r2, #2
 80074dc:	f103 010c 	add.w	r1, r3, #12
 80074e0:	0092      	lsls	r2, r2, #2
 80074e2:	300c      	adds	r0, #12
 80074e4:	f000 fd72 	bl	8007fcc <memcpy>
 80074e8:	ec4b ab10 	vmov	d0, sl, fp
 80074ec:	9805      	ldr	r0, [sp, #20]
 80074ee:	aa1c      	add	r2, sp, #112	@ 0x70
 80074f0:	a91b      	add	r1, sp, #108	@ 0x6c
 80074f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80074f6:	f7ff fbd7 	bl	8006ca8 <__d2b>
 80074fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f43f aede 	beq.w	80072be <_strtod_l+0x43e>
 8007502:	9805      	ldr	r0, [sp, #20]
 8007504:	2101      	movs	r1, #1
 8007506:	f7ff f929 	bl	800675c <__i2b>
 800750a:	4680      	mov	r8, r0
 800750c:	b948      	cbnz	r0, 8007522 <_strtod_l+0x6a2>
 800750e:	f04f 0800 	mov.w	r8, #0
 8007512:	e6d4      	b.n	80072be <_strtod_l+0x43e>
 8007514:	f04f 32ff 	mov.w	r2, #4294967295
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	ea03 0a0a 	and.w	sl, r3, sl
 8007520:	e7b0      	b.n	8007484 <_strtod_l+0x604>
 8007522:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007524:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007526:	2d00      	cmp	r5, #0
 8007528:	bfab      	itete	ge
 800752a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800752c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800752e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007530:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007532:	bfac      	ite	ge
 8007534:	18ef      	addge	r7, r5, r3
 8007536:	1b5e      	sublt	r6, r3, r5
 8007538:	9b08      	ldr	r3, [sp, #32]
 800753a:	1aed      	subs	r5, r5, r3
 800753c:	4415      	add	r5, r2
 800753e:	4b66      	ldr	r3, [pc, #408]	@ (80076d8 <_strtod_l+0x858>)
 8007540:	3d01      	subs	r5, #1
 8007542:	429d      	cmp	r5, r3
 8007544:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007548:	da50      	bge.n	80075ec <_strtod_l+0x76c>
 800754a:	1b5b      	subs	r3, r3, r5
 800754c:	2b1f      	cmp	r3, #31
 800754e:	eba2 0203 	sub.w	r2, r2, r3
 8007552:	f04f 0101 	mov.w	r1, #1
 8007556:	dc3d      	bgt.n	80075d4 <_strtod_l+0x754>
 8007558:	fa01 f303 	lsl.w	r3, r1, r3
 800755c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800755e:	2300      	movs	r3, #0
 8007560:	9310      	str	r3, [sp, #64]	@ 0x40
 8007562:	18bd      	adds	r5, r7, r2
 8007564:	9b08      	ldr	r3, [sp, #32]
 8007566:	42af      	cmp	r7, r5
 8007568:	4416      	add	r6, r2
 800756a:	441e      	add	r6, r3
 800756c:	463b      	mov	r3, r7
 800756e:	bfa8      	it	ge
 8007570:	462b      	movge	r3, r5
 8007572:	42b3      	cmp	r3, r6
 8007574:	bfa8      	it	ge
 8007576:	4633      	movge	r3, r6
 8007578:	2b00      	cmp	r3, #0
 800757a:	bfc2      	ittt	gt
 800757c:	1aed      	subgt	r5, r5, r3
 800757e:	1af6      	subgt	r6, r6, r3
 8007580:	1aff      	subgt	r7, r7, r3
 8007582:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007584:	2b00      	cmp	r3, #0
 8007586:	dd16      	ble.n	80075b6 <_strtod_l+0x736>
 8007588:	4641      	mov	r1, r8
 800758a:	9805      	ldr	r0, [sp, #20]
 800758c:	461a      	mov	r2, r3
 800758e:	f7ff f9a5 	bl	80068dc <__pow5mult>
 8007592:	4680      	mov	r8, r0
 8007594:	2800      	cmp	r0, #0
 8007596:	d0ba      	beq.n	800750e <_strtod_l+0x68e>
 8007598:	4601      	mov	r1, r0
 800759a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800759c:	9805      	ldr	r0, [sp, #20]
 800759e:	f7ff f8f3 	bl	8006788 <__multiply>
 80075a2:	900e      	str	r0, [sp, #56]	@ 0x38
 80075a4:	2800      	cmp	r0, #0
 80075a6:	f43f ae8a 	beq.w	80072be <_strtod_l+0x43e>
 80075aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075ac:	9805      	ldr	r0, [sp, #20]
 80075ae:	f7fe ffd7 	bl	8006560 <_Bfree>
 80075b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	dc1d      	bgt.n	80075f6 <_strtod_l+0x776>
 80075ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dd23      	ble.n	8007608 <_strtod_l+0x788>
 80075c0:	4649      	mov	r1, r9
 80075c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80075c4:	9805      	ldr	r0, [sp, #20]
 80075c6:	f7ff f989 	bl	80068dc <__pow5mult>
 80075ca:	4681      	mov	r9, r0
 80075cc:	b9e0      	cbnz	r0, 8007608 <_strtod_l+0x788>
 80075ce:	f04f 0900 	mov.w	r9, #0
 80075d2:	e674      	b.n	80072be <_strtod_l+0x43e>
 80075d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80075d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80075dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80075e0:	35e2      	adds	r5, #226	@ 0xe2
 80075e2:	fa01 f305 	lsl.w	r3, r1, r5
 80075e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80075e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80075ea:	e7ba      	b.n	8007562 <_strtod_l+0x6e2>
 80075ec:	2300      	movs	r3, #0
 80075ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80075f0:	2301      	movs	r3, #1
 80075f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075f4:	e7b5      	b.n	8007562 <_strtod_l+0x6e2>
 80075f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075f8:	9805      	ldr	r0, [sp, #20]
 80075fa:	462a      	mov	r2, r5
 80075fc:	f7ff f9c8 	bl	8006990 <__lshift>
 8007600:	901a      	str	r0, [sp, #104]	@ 0x68
 8007602:	2800      	cmp	r0, #0
 8007604:	d1d9      	bne.n	80075ba <_strtod_l+0x73a>
 8007606:	e65a      	b.n	80072be <_strtod_l+0x43e>
 8007608:	2e00      	cmp	r6, #0
 800760a:	dd07      	ble.n	800761c <_strtod_l+0x79c>
 800760c:	4649      	mov	r1, r9
 800760e:	9805      	ldr	r0, [sp, #20]
 8007610:	4632      	mov	r2, r6
 8007612:	f7ff f9bd 	bl	8006990 <__lshift>
 8007616:	4681      	mov	r9, r0
 8007618:	2800      	cmp	r0, #0
 800761a:	d0d8      	beq.n	80075ce <_strtod_l+0x74e>
 800761c:	2f00      	cmp	r7, #0
 800761e:	dd08      	ble.n	8007632 <_strtod_l+0x7b2>
 8007620:	4641      	mov	r1, r8
 8007622:	9805      	ldr	r0, [sp, #20]
 8007624:	463a      	mov	r2, r7
 8007626:	f7ff f9b3 	bl	8006990 <__lshift>
 800762a:	4680      	mov	r8, r0
 800762c:	2800      	cmp	r0, #0
 800762e:	f43f ae46 	beq.w	80072be <_strtod_l+0x43e>
 8007632:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007634:	9805      	ldr	r0, [sp, #20]
 8007636:	464a      	mov	r2, r9
 8007638:	f7ff fa32 	bl	8006aa0 <__mdiff>
 800763c:	4604      	mov	r4, r0
 800763e:	2800      	cmp	r0, #0
 8007640:	f43f ae3d 	beq.w	80072be <_strtod_l+0x43e>
 8007644:	68c3      	ldr	r3, [r0, #12]
 8007646:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007648:	2300      	movs	r3, #0
 800764a:	60c3      	str	r3, [r0, #12]
 800764c:	4641      	mov	r1, r8
 800764e:	f7ff fa0b 	bl	8006a68 <__mcmp>
 8007652:	2800      	cmp	r0, #0
 8007654:	da46      	bge.n	80076e4 <_strtod_l+0x864>
 8007656:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007658:	ea53 030a 	orrs.w	r3, r3, sl
 800765c:	d16c      	bne.n	8007738 <_strtod_l+0x8b8>
 800765e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007662:	2b00      	cmp	r3, #0
 8007664:	d168      	bne.n	8007738 <_strtod_l+0x8b8>
 8007666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800766a:	0d1b      	lsrs	r3, r3, #20
 800766c:	051b      	lsls	r3, r3, #20
 800766e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007672:	d961      	bls.n	8007738 <_strtod_l+0x8b8>
 8007674:	6963      	ldr	r3, [r4, #20]
 8007676:	b913      	cbnz	r3, 800767e <_strtod_l+0x7fe>
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	2b01      	cmp	r3, #1
 800767c:	dd5c      	ble.n	8007738 <_strtod_l+0x8b8>
 800767e:	4621      	mov	r1, r4
 8007680:	2201      	movs	r2, #1
 8007682:	9805      	ldr	r0, [sp, #20]
 8007684:	f7ff f984 	bl	8006990 <__lshift>
 8007688:	4641      	mov	r1, r8
 800768a:	4604      	mov	r4, r0
 800768c:	f7ff f9ec 	bl	8006a68 <__mcmp>
 8007690:	2800      	cmp	r0, #0
 8007692:	dd51      	ble.n	8007738 <_strtod_l+0x8b8>
 8007694:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007698:	9a08      	ldr	r2, [sp, #32]
 800769a:	0d1b      	lsrs	r3, r3, #20
 800769c:	051b      	lsls	r3, r3, #20
 800769e:	2a00      	cmp	r2, #0
 80076a0:	d06b      	beq.n	800777a <_strtod_l+0x8fa>
 80076a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80076a6:	d868      	bhi.n	800777a <_strtod_l+0x8fa>
 80076a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80076ac:	f67f ae9d 	bls.w	80073ea <_strtod_l+0x56a>
 80076b0:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <_strtod_l+0x85c>)
 80076b2:	4650      	mov	r0, sl
 80076b4:	4659      	mov	r1, fp
 80076b6:	2200      	movs	r2, #0
 80076b8:	f7f8 ffbe 	bl	8000638 <__aeabi_dmul>
 80076bc:	4b08      	ldr	r3, [pc, #32]	@ (80076e0 <_strtod_l+0x860>)
 80076be:	400b      	ands	r3, r1
 80076c0:	4682      	mov	sl, r0
 80076c2:	468b      	mov	fp, r1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f47f ae05 	bne.w	80072d4 <_strtod_l+0x454>
 80076ca:	9a05      	ldr	r2, [sp, #20]
 80076cc:	2322      	movs	r3, #34	@ 0x22
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	e600      	b.n	80072d4 <_strtod_l+0x454>
 80076d2:	bf00      	nop
 80076d4:	0800aa28 	.word	0x0800aa28
 80076d8:	fffffc02 	.word	0xfffffc02
 80076dc:	39500000 	.word	0x39500000
 80076e0:	7ff00000 	.word	0x7ff00000
 80076e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80076e8:	d165      	bne.n	80077b6 <_strtod_l+0x936>
 80076ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80076ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076f0:	b35a      	cbz	r2, 800774a <_strtod_l+0x8ca>
 80076f2:	4a9f      	ldr	r2, [pc, #636]	@ (8007970 <_strtod_l+0xaf0>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d12b      	bne.n	8007750 <_strtod_l+0x8d0>
 80076f8:	9b08      	ldr	r3, [sp, #32]
 80076fa:	4651      	mov	r1, sl
 80076fc:	b303      	cbz	r3, 8007740 <_strtod_l+0x8c0>
 80076fe:	4b9d      	ldr	r3, [pc, #628]	@ (8007974 <_strtod_l+0xaf4>)
 8007700:	465a      	mov	r2, fp
 8007702:	4013      	ands	r3, r2
 8007704:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007708:	f04f 32ff 	mov.w	r2, #4294967295
 800770c:	d81b      	bhi.n	8007746 <_strtod_l+0x8c6>
 800770e:	0d1b      	lsrs	r3, r3, #20
 8007710:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	4299      	cmp	r1, r3
 800771a:	d119      	bne.n	8007750 <_strtod_l+0x8d0>
 800771c:	4b96      	ldr	r3, [pc, #600]	@ (8007978 <_strtod_l+0xaf8>)
 800771e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007720:	429a      	cmp	r2, r3
 8007722:	d102      	bne.n	800772a <_strtod_l+0x8aa>
 8007724:	3101      	adds	r1, #1
 8007726:	f43f adca 	beq.w	80072be <_strtod_l+0x43e>
 800772a:	4b92      	ldr	r3, [pc, #584]	@ (8007974 <_strtod_l+0xaf4>)
 800772c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800772e:	401a      	ands	r2, r3
 8007730:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007734:	f04f 0a00 	mov.w	sl, #0
 8007738:	9b08      	ldr	r3, [sp, #32]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1b8      	bne.n	80076b0 <_strtod_l+0x830>
 800773e:	e5c9      	b.n	80072d4 <_strtod_l+0x454>
 8007740:	f04f 33ff 	mov.w	r3, #4294967295
 8007744:	e7e8      	b.n	8007718 <_strtod_l+0x898>
 8007746:	4613      	mov	r3, r2
 8007748:	e7e6      	b.n	8007718 <_strtod_l+0x898>
 800774a:	ea53 030a 	orrs.w	r3, r3, sl
 800774e:	d0a1      	beq.n	8007694 <_strtod_l+0x814>
 8007750:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007752:	b1db      	cbz	r3, 800778c <_strtod_l+0x90c>
 8007754:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007756:	4213      	tst	r3, r2
 8007758:	d0ee      	beq.n	8007738 <_strtod_l+0x8b8>
 800775a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800775c:	9a08      	ldr	r2, [sp, #32]
 800775e:	4650      	mov	r0, sl
 8007760:	4659      	mov	r1, fp
 8007762:	b1bb      	cbz	r3, 8007794 <_strtod_l+0x914>
 8007764:	f7ff fb6e 	bl	8006e44 <sulp>
 8007768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800776c:	ec53 2b10 	vmov	r2, r3, d0
 8007770:	f7f8 fdac 	bl	80002cc <__adddf3>
 8007774:	4682      	mov	sl, r0
 8007776:	468b      	mov	fp, r1
 8007778:	e7de      	b.n	8007738 <_strtod_l+0x8b8>
 800777a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800777e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007782:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007786:	f04f 3aff 	mov.w	sl, #4294967295
 800778a:	e7d5      	b.n	8007738 <_strtod_l+0x8b8>
 800778c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800778e:	ea13 0f0a 	tst.w	r3, sl
 8007792:	e7e1      	b.n	8007758 <_strtod_l+0x8d8>
 8007794:	f7ff fb56 	bl	8006e44 <sulp>
 8007798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800779c:	ec53 2b10 	vmov	r2, r3, d0
 80077a0:	f7f8 fd92 	bl	80002c8 <__aeabi_dsub>
 80077a4:	2200      	movs	r2, #0
 80077a6:	2300      	movs	r3, #0
 80077a8:	4682      	mov	sl, r0
 80077aa:	468b      	mov	fp, r1
 80077ac:	f7f9 f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d0c1      	beq.n	8007738 <_strtod_l+0x8b8>
 80077b4:	e619      	b.n	80073ea <_strtod_l+0x56a>
 80077b6:	4641      	mov	r1, r8
 80077b8:	4620      	mov	r0, r4
 80077ba:	f7ff facd 	bl	8006d58 <__ratio>
 80077be:	ec57 6b10 	vmov	r6, r7, d0
 80077c2:	2200      	movs	r2, #0
 80077c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f9 f9b0 	bl	8000b30 <__aeabi_dcmple>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d06f      	beq.n	80078b4 <_strtod_l+0xa34>
 80077d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d17a      	bne.n	80078d0 <_strtod_l+0xa50>
 80077da:	f1ba 0f00 	cmp.w	sl, #0
 80077de:	d158      	bne.n	8007892 <_strtod_l+0xa12>
 80077e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d15a      	bne.n	80078a0 <_strtod_l+0xa20>
 80077ea:	4b64      	ldr	r3, [pc, #400]	@ (800797c <_strtod_l+0xafc>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	4630      	mov	r0, r6
 80077f0:	4639      	mov	r1, r7
 80077f2:	f7f9 f993 	bl	8000b1c <__aeabi_dcmplt>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d159      	bne.n	80078ae <_strtod_l+0xa2e>
 80077fa:	4630      	mov	r0, r6
 80077fc:	4639      	mov	r1, r7
 80077fe:	4b60      	ldr	r3, [pc, #384]	@ (8007980 <_strtod_l+0xb00>)
 8007800:	2200      	movs	r2, #0
 8007802:	f7f8 ff19 	bl	8000638 <__aeabi_dmul>
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800780e:	9606      	str	r6, [sp, #24]
 8007810:	9307      	str	r3, [sp, #28]
 8007812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007816:	4d57      	ldr	r5, [pc, #348]	@ (8007974 <_strtod_l+0xaf4>)
 8007818:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800781c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800781e:	401d      	ands	r5, r3
 8007820:	4b58      	ldr	r3, [pc, #352]	@ (8007984 <_strtod_l+0xb04>)
 8007822:	429d      	cmp	r5, r3
 8007824:	f040 80b2 	bne.w	800798c <_strtod_l+0xb0c>
 8007828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800782a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800782e:	ec4b ab10 	vmov	d0, sl, fp
 8007832:	f7ff f9c9 	bl	8006bc8 <__ulp>
 8007836:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800783a:	ec51 0b10 	vmov	r0, r1, d0
 800783e:	f7f8 fefb 	bl	8000638 <__aeabi_dmul>
 8007842:	4652      	mov	r2, sl
 8007844:	465b      	mov	r3, fp
 8007846:	f7f8 fd41 	bl	80002cc <__adddf3>
 800784a:	460b      	mov	r3, r1
 800784c:	4949      	ldr	r1, [pc, #292]	@ (8007974 <_strtod_l+0xaf4>)
 800784e:	4a4e      	ldr	r2, [pc, #312]	@ (8007988 <_strtod_l+0xb08>)
 8007850:	4019      	ands	r1, r3
 8007852:	4291      	cmp	r1, r2
 8007854:	4682      	mov	sl, r0
 8007856:	d942      	bls.n	80078de <_strtod_l+0xa5e>
 8007858:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800785a:	4b47      	ldr	r3, [pc, #284]	@ (8007978 <_strtod_l+0xaf8>)
 800785c:	429a      	cmp	r2, r3
 800785e:	d103      	bne.n	8007868 <_strtod_l+0x9e8>
 8007860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007862:	3301      	adds	r3, #1
 8007864:	f43f ad2b 	beq.w	80072be <_strtod_l+0x43e>
 8007868:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007978 <_strtod_l+0xaf8>
 800786c:	f04f 3aff 	mov.w	sl, #4294967295
 8007870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007872:	9805      	ldr	r0, [sp, #20]
 8007874:	f7fe fe74 	bl	8006560 <_Bfree>
 8007878:	9805      	ldr	r0, [sp, #20]
 800787a:	4649      	mov	r1, r9
 800787c:	f7fe fe70 	bl	8006560 <_Bfree>
 8007880:	9805      	ldr	r0, [sp, #20]
 8007882:	4641      	mov	r1, r8
 8007884:	f7fe fe6c 	bl	8006560 <_Bfree>
 8007888:	9805      	ldr	r0, [sp, #20]
 800788a:	4621      	mov	r1, r4
 800788c:	f7fe fe68 	bl	8006560 <_Bfree>
 8007890:	e618      	b.n	80074c4 <_strtod_l+0x644>
 8007892:	f1ba 0f01 	cmp.w	sl, #1
 8007896:	d103      	bne.n	80078a0 <_strtod_l+0xa20>
 8007898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800789a:	2b00      	cmp	r3, #0
 800789c:	f43f ada5 	beq.w	80073ea <_strtod_l+0x56a>
 80078a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007950 <_strtod_l+0xad0>
 80078a4:	4f35      	ldr	r7, [pc, #212]	@ (800797c <_strtod_l+0xafc>)
 80078a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078aa:	2600      	movs	r6, #0
 80078ac:	e7b1      	b.n	8007812 <_strtod_l+0x992>
 80078ae:	4f34      	ldr	r7, [pc, #208]	@ (8007980 <_strtod_l+0xb00>)
 80078b0:	2600      	movs	r6, #0
 80078b2:	e7aa      	b.n	800780a <_strtod_l+0x98a>
 80078b4:	4b32      	ldr	r3, [pc, #200]	@ (8007980 <_strtod_l+0xb00>)
 80078b6:	4630      	mov	r0, r6
 80078b8:	4639      	mov	r1, r7
 80078ba:	2200      	movs	r2, #0
 80078bc:	f7f8 febc 	bl	8000638 <__aeabi_dmul>
 80078c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078c2:	4606      	mov	r6, r0
 80078c4:	460f      	mov	r7, r1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d09f      	beq.n	800780a <_strtod_l+0x98a>
 80078ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80078ce:	e7a0      	b.n	8007812 <_strtod_l+0x992>
 80078d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007958 <_strtod_l+0xad8>
 80078d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078d8:	ec57 6b17 	vmov	r6, r7, d7
 80078dc:	e799      	b.n	8007812 <_strtod_l+0x992>
 80078de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80078e2:	9b08      	ldr	r3, [sp, #32]
 80078e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1c1      	bne.n	8007870 <_strtod_l+0x9f0>
 80078ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078f0:	0d1b      	lsrs	r3, r3, #20
 80078f2:	051b      	lsls	r3, r3, #20
 80078f4:	429d      	cmp	r5, r3
 80078f6:	d1bb      	bne.n	8007870 <_strtod_l+0x9f0>
 80078f8:	4630      	mov	r0, r6
 80078fa:	4639      	mov	r1, r7
 80078fc:	f7f9 f9fc 	bl	8000cf8 <__aeabi_d2lz>
 8007900:	f7f8 fe6c 	bl	80005dc <__aeabi_l2d>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4630      	mov	r0, r6
 800790a:	4639      	mov	r1, r7
 800790c:	f7f8 fcdc 	bl	80002c8 <__aeabi_dsub>
 8007910:	460b      	mov	r3, r1
 8007912:	4602      	mov	r2, r0
 8007914:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007918:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800791c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800791e:	ea46 060a 	orr.w	r6, r6, sl
 8007922:	431e      	orrs	r6, r3
 8007924:	d06f      	beq.n	8007a06 <_strtod_l+0xb86>
 8007926:	a30e      	add	r3, pc, #56	@ (adr r3, 8007960 <_strtod_l+0xae0>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	f7f9 f8f6 	bl	8000b1c <__aeabi_dcmplt>
 8007930:	2800      	cmp	r0, #0
 8007932:	f47f accf 	bne.w	80072d4 <_strtod_l+0x454>
 8007936:	a30c      	add	r3, pc, #48	@ (adr r3, 8007968 <_strtod_l+0xae8>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007940:	f7f9 f90a 	bl	8000b58 <__aeabi_dcmpgt>
 8007944:	2800      	cmp	r0, #0
 8007946:	d093      	beq.n	8007870 <_strtod_l+0x9f0>
 8007948:	e4c4      	b.n	80072d4 <_strtod_l+0x454>
 800794a:	bf00      	nop
 800794c:	f3af 8000 	nop.w
 8007950:	00000000 	.word	0x00000000
 8007954:	bff00000 	.word	0xbff00000
 8007958:	00000000 	.word	0x00000000
 800795c:	3ff00000 	.word	0x3ff00000
 8007960:	94a03595 	.word	0x94a03595
 8007964:	3fdfffff 	.word	0x3fdfffff
 8007968:	35afe535 	.word	0x35afe535
 800796c:	3fe00000 	.word	0x3fe00000
 8007970:	000fffff 	.word	0x000fffff
 8007974:	7ff00000 	.word	0x7ff00000
 8007978:	7fefffff 	.word	0x7fefffff
 800797c:	3ff00000 	.word	0x3ff00000
 8007980:	3fe00000 	.word	0x3fe00000
 8007984:	7fe00000 	.word	0x7fe00000
 8007988:	7c9fffff 	.word	0x7c9fffff
 800798c:	9b08      	ldr	r3, [sp, #32]
 800798e:	b323      	cbz	r3, 80079da <_strtod_l+0xb5a>
 8007990:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007994:	d821      	bhi.n	80079da <_strtod_l+0xb5a>
 8007996:	a328      	add	r3, pc, #160	@ (adr r3, 8007a38 <_strtod_l+0xbb8>)
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	4630      	mov	r0, r6
 800799e:	4639      	mov	r1, r7
 80079a0:	f7f9 f8c6 	bl	8000b30 <__aeabi_dcmple>
 80079a4:	b1a0      	cbz	r0, 80079d0 <_strtod_l+0xb50>
 80079a6:	4639      	mov	r1, r7
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7f9 f91d 	bl	8000be8 <__aeabi_d2uiz>
 80079ae:	2801      	cmp	r0, #1
 80079b0:	bf38      	it	cc
 80079b2:	2001      	movcc	r0, #1
 80079b4:	f7f8 fdc6 	bl	8000544 <__aeabi_ui2d>
 80079b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ba:	4606      	mov	r6, r0
 80079bc:	460f      	mov	r7, r1
 80079be:	b9fb      	cbnz	r3, 8007a00 <_strtod_l+0xb80>
 80079c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80079c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80079c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80079c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80079cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80079d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80079d6:	1b5b      	subs	r3, r3, r5
 80079d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80079da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80079de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80079e2:	f7ff f8f1 	bl	8006bc8 <__ulp>
 80079e6:	4650      	mov	r0, sl
 80079e8:	ec53 2b10 	vmov	r2, r3, d0
 80079ec:	4659      	mov	r1, fp
 80079ee:	f7f8 fe23 	bl	8000638 <__aeabi_dmul>
 80079f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80079f6:	f7f8 fc69 	bl	80002cc <__adddf3>
 80079fa:	4682      	mov	sl, r0
 80079fc:	468b      	mov	fp, r1
 80079fe:	e770      	b.n	80078e2 <_strtod_l+0xa62>
 8007a00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007a04:	e7e0      	b.n	80079c8 <_strtod_l+0xb48>
 8007a06:	a30e      	add	r3, pc, #56	@ (adr r3, 8007a40 <_strtod_l+0xbc0>)
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f7f9 f886 	bl	8000b1c <__aeabi_dcmplt>
 8007a10:	e798      	b.n	8007944 <_strtod_l+0xac4>
 8007a12:	2300      	movs	r3, #0
 8007a14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007a18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	f7ff ba6d 	b.w	8006efa <_strtod_l+0x7a>
 8007a20:	2a65      	cmp	r2, #101	@ 0x65
 8007a22:	f43f ab66 	beq.w	80070f2 <_strtod_l+0x272>
 8007a26:	2a45      	cmp	r2, #69	@ 0x45
 8007a28:	f43f ab63 	beq.w	80070f2 <_strtod_l+0x272>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f7ff bb9e 	b.w	800716e <_strtod_l+0x2ee>
 8007a32:	bf00      	nop
 8007a34:	f3af 8000 	nop.w
 8007a38:	ffc00000 	.word	0xffc00000
 8007a3c:	41dfffff 	.word	0x41dfffff
 8007a40:	94a03595 	.word	0x94a03595
 8007a44:	3fcfffff 	.word	0x3fcfffff

08007a48 <_strtod_r>:
 8007a48:	4b01      	ldr	r3, [pc, #4]	@ (8007a50 <_strtod_r+0x8>)
 8007a4a:	f7ff ba19 	b.w	8006e80 <_strtod_l>
 8007a4e:	bf00      	nop
 8007a50:	2000006c 	.word	0x2000006c

08007a54 <_strtol_l.constprop.0>:
 8007a54:	2b24      	cmp	r3, #36	@ 0x24
 8007a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5a:	4686      	mov	lr, r0
 8007a5c:	4690      	mov	r8, r2
 8007a5e:	d801      	bhi.n	8007a64 <_strtol_l.constprop.0+0x10>
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d106      	bne.n	8007a72 <_strtol_l.constprop.0+0x1e>
 8007a64:	f7fd fdbc 	bl	80055e0 <__errno>
 8007a68:	2316      	movs	r3, #22
 8007a6a:	6003      	str	r3, [r0, #0]
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a72:	4834      	ldr	r0, [pc, #208]	@ (8007b44 <_strtol_l.constprop.0+0xf0>)
 8007a74:	460d      	mov	r5, r1
 8007a76:	462a      	mov	r2, r5
 8007a78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a7c:	5d06      	ldrb	r6, [r0, r4]
 8007a7e:	f016 0608 	ands.w	r6, r6, #8
 8007a82:	d1f8      	bne.n	8007a76 <_strtol_l.constprop.0+0x22>
 8007a84:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a86:	d12d      	bne.n	8007ae4 <_strtol_l.constprop.0+0x90>
 8007a88:	782c      	ldrb	r4, [r5, #0]
 8007a8a:	2601      	movs	r6, #1
 8007a8c:	1c95      	adds	r5, r2, #2
 8007a8e:	f033 0210 	bics.w	r2, r3, #16
 8007a92:	d109      	bne.n	8007aa8 <_strtol_l.constprop.0+0x54>
 8007a94:	2c30      	cmp	r4, #48	@ 0x30
 8007a96:	d12a      	bne.n	8007aee <_strtol_l.constprop.0+0x9a>
 8007a98:	782a      	ldrb	r2, [r5, #0]
 8007a9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007a9e:	2a58      	cmp	r2, #88	@ 0x58
 8007aa0:	d125      	bne.n	8007aee <_strtol_l.constprop.0+0x9a>
 8007aa2:	786c      	ldrb	r4, [r5, #1]
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	3502      	adds	r5, #2
 8007aa8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007aac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	fbbc f9f3 	udiv	r9, ip, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007abc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007ac0:	2f09      	cmp	r7, #9
 8007ac2:	d81b      	bhi.n	8007afc <_strtol_l.constprop.0+0xa8>
 8007ac4:	463c      	mov	r4, r7
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	dd27      	ble.n	8007b1a <_strtol_l.constprop.0+0xc6>
 8007aca:	1c57      	adds	r7, r2, #1
 8007acc:	d007      	beq.n	8007ade <_strtol_l.constprop.0+0x8a>
 8007ace:	4581      	cmp	r9, r0
 8007ad0:	d320      	bcc.n	8007b14 <_strtol_l.constprop.0+0xc0>
 8007ad2:	d101      	bne.n	8007ad8 <_strtol_l.constprop.0+0x84>
 8007ad4:	45a2      	cmp	sl, r4
 8007ad6:	db1d      	blt.n	8007b14 <_strtol_l.constprop.0+0xc0>
 8007ad8:	fb00 4003 	mla	r0, r0, r3, r4
 8007adc:	2201      	movs	r2, #1
 8007ade:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ae2:	e7eb      	b.n	8007abc <_strtol_l.constprop.0+0x68>
 8007ae4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ae6:	bf04      	itt	eq
 8007ae8:	782c      	ldrbeq	r4, [r5, #0]
 8007aea:	1c95      	addeq	r5, r2, #2
 8007aec:	e7cf      	b.n	8007a8e <_strtol_l.constprop.0+0x3a>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1da      	bne.n	8007aa8 <_strtol_l.constprop.0+0x54>
 8007af2:	2c30      	cmp	r4, #48	@ 0x30
 8007af4:	bf0c      	ite	eq
 8007af6:	2308      	moveq	r3, #8
 8007af8:	230a      	movne	r3, #10
 8007afa:	e7d5      	b.n	8007aa8 <_strtol_l.constprop.0+0x54>
 8007afc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007b00:	2f19      	cmp	r7, #25
 8007b02:	d801      	bhi.n	8007b08 <_strtol_l.constprop.0+0xb4>
 8007b04:	3c37      	subs	r4, #55	@ 0x37
 8007b06:	e7de      	b.n	8007ac6 <_strtol_l.constprop.0+0x72>
 8007b08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007b0c:	2f19      	cmp	r7, #25
 8007b0e:	d804      	bhi.n	8007b1a <_strtol_l.constprop.0+0xc6>
 8007b10:	3c57      	subs	r4, #87	@ 0x57
 8007b12:	e7d8      	b.n	8007ac6 <_strtol_l.constprop.0+0x72>
 8007b14:	f04f 32ff 	mov.w	r2, #4294967295
 8007b18:	e7e1      	b.n	8007ade <_strtol_l.constprop.0+0x8a>
 8007b1a:	1c53      	adds	r3, r2, #1
 8007b1c:	d108      	bne.n	8007b30 <_strtol_l.constprop.0+0xdc>
 8007b1e:	2322      	movs	r3, #34	@ 0x22
 8007b20:	f8ce 3000 	str.w	r3, [lr]
 8007b24:	4660      	mov	r0, ip
 8007b26:	f1b8 0f00 	cmp.w	r8, #0
 8007b2a:	d0a0      	beq.n	8007a6e <_strtol_l.constprop.0+0x1a>
 8007b2c:	1e69      	subs	r1, r5, #1
 8007b2e:	e006      	b.n	8007b3e <_strtol_l.constprop.0+0xea>
 8007b30:	b106      	cbz	r6, 8007b34 <_strtol_l.constprop.0+0xe0>
 8007b32:	4240      	negs	r0, r0
 8007b34:	f1b8 0f00 	cmp.w	r8, #0
 8007b38:	d099      	beq.n	8007a6e <_strtol_l.constprop.0+0x1a>
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	d1f6      	bne.n	8007b2c <_strtol_l.constprop.0+0xd8>
 8007b3e:	f8c8 1000 	str.w	r1, [r8]
 8007b42:	e794      	b.n	8007a6e <_strtol_l.constprop.0+0x1a>
 8007b44:	0800aa51 	.word	0x0800aa51

08007b48 <_strtol_r>:
 8007b48:	f7ff bf84 	b.w	8007a54 <_strtol_l.constprop.0>

08007b4c <__ssputs_r>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	688e      	ldr	r6, [r1, #8]
 8007b52:	461f      	mov	r7, r3
 8007b54:	42be      	cmp	r6, r7
 8007b56:	680b      	ldr	r3, [r1, #0]
 8007b58:	4682      	mov	sl, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	4690      	mov	r8, r2
 8007b5e:	d82d      	bhi.n	8007bbc <__ssputs_r+0x70>
 8007b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b68:	d026      	beq.n	8007bb8 <__ssputs_r+0x6c>
 8007b6a:	6965      	ldr	r5, [r4, #20]
 8007b6c:	6909      	ldr	r1, [r1, #16]
 8007b6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b72:	eba3 0901 	sub.w	r9, r3, r1
 8007b76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b7a:	1c7b      	adds	r3, r7, #1
 8007b7c:	444b      	add	r3, r9
 8007b7e:	106d      	asrs	r5, r5, #1
 8007b80:	429d      	cmp	r5, r3
 8007b82:	bf38      	it	cc
 8007b84:	461d      	movcc	r5, r3
 8007b86:	0553      	lsls	r3, r2, #21
 8007b88:	d527      	bpl.n	8007bda <__ssputs_r+0x8e>
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7fe fc1c 	bl	80063c8 <_malloc_r>
 8007b90:	4606      	mov	r6, r0
 8007b92:	b360      	cbz	r0, 8007bee <__ssputs_r+0xa2>
 8007b94:	6921      	ldr	r1, [r4, #16]
 8007b96:	464a      	mov	r2, r9
 8007b98:	f000 fa18 	bl	8007fcc <memcpy>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	6126      	str	r6, [r4, #16]
 8007baa:	6165      	str	r5, [r4, #20]
 8007bac:	444e      	add	r6, r9
 8007bae:	eba5 0509 	sub.w	r5, r5, r9
 8007bb2:	6026      	str	r6, [r4, #0]
 8007bb4:	60a5      	str	r5, [r4, #8]
 8007bb6:	463e      	mov	r6, r7
 8007bb8:	42be      	cmp	r6, r7
 8007bba:	d900      	bls.n	8007bbe <__ssputs_r+0x72>
 8007bbc:	463e      	mov	r6, r7
 8007bbe:	6820      	ldr	r0, [r4, #0]
 8007bc0:	4632      	mov	r2, r6
 8007bc2:	4641      	mov	r1, r8
 8007bc4:	f000 f9c6 	bl	8007f54 <memmove>
 8007bc8:	68a3      	ldr	r3, [r4, #8]
 8007bca:	1b9b      	subs	r3, r3, r6
 8007bcc:	60a3      	str	r3, [r4, #8]
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	4433      	add	r3, r6
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bda:	462a      	mov	r2, r5
 8007bdc:	f000 fd89 	bl	80086f2 <_realloc_r>
 8007be0:	4606      	mov	r6, r0
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d1e0      	bne.n	8007ba8 <__ssputs_r+0x5c>
 8007be6:	6921      	ldr	r1, [r4, #16]
 8007be8:	4650      	mov	r0, sl
 8007bea:	f7fe fb79 	bl	80062e0 <_free_r>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	f8ca 3000 	str.w	r3, [sl]
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	e7e9      	b.n	8007bd6 <__ssputs_r+0x8a>
	...

08007c04 <_svfiprintf_r>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	4698      	mov	r8, r3
 8007c0a:	898b      	ldrh	r3, [r1, #12]
 8007c0c:	061b      	lsls	r3, r3, #24
 8007c0e:	b09d      	sub	sp, #116	@ 0x74
 8007c10:	4607      	mov	r7, r0
 8007c12:	460d      	mov	r5, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	d510      	bpl.n	8007c3a <_svfiprintf_r+0x36>
 8007c18:	690b      	ldr	r3, [r1, #16]
 8007c1a:	b973      	cbnz	r3, 8007c3a <_svfiprintf_r+0x36>
 8007c1c:	2140      	movs	r1, #64	@ 0x40
 8007c1e:	f7fe fbd3 	bl	80063c8 <_malloc_r>
 8007c22:	6028      	str	r0, [r5, #0]
 8007c24:	6128      	str	r0, [r5, #16]
 8007c26:	b930      	cbnz	r0, 8007c36 <_svfiprintf_r+0x32>
 8007c28:	230c      	movs	r3, #12
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	b01d      	add	sp, #116	@ 0x74
 8007c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c36:	2340      	movs	r3, #64	@ 0x40
 8007c38:	616b      	str	r3, [r5, #20]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c3e:	2320      	movs	r3, #32
 8007c40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c48:	2330      	movs	r3, #48	@ 0x30
 8007c4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007de8 <_svfiprintf_r+0x1e4>
 8007c4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c52:	f04f 0901 	mov.w	r9, #1
 8007c56:	4623      	mov	r3, r4
 8007c58:	469a      	mov	sl, r3
 8007c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5e:	b10a      	cbz	r2, 8007c64 <_svfiprintf_r+0x60>
 8007c60:	2a25      	cmp	r2, #37	@ 0x25
 8007c62:	d1f9      	bne.n	8007c58 <_svfiprintf_r+0x54>
 8007c64:	ebba 0b04 	subs.w	fp, sl, r4
 8007c68:	d00b      	beq.n	8007c82 <_svfiprintf_r+0x7e>
 8007c6a:	465b      	mov	r3, fp
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ff6b 	bl	8007b4c <__ssputs_r>
 8007c76:	3001      	adds	r0, #1
 8007c78:	f000 80a7 	beq.w	8007dca <_svfiprintf_r+0x1c6>
 8007c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c7e:	445a      	add	r2, fp
 8007c80:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c82:	f89a 3000 	ldrb.w	r3, [sl]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 809f 	beq.w	8007dca <_svfiprintf_r+0x1c6>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c96:	f10a 0a01 	add.w	sl, sl, #1
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	9307      	str	r3, [sp, #28]
 8007c9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ca2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ca4:	4654      	mov	r4, sl
 8007ca6:	2205      	movs	r2, #5
 8007ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cac:	484e      	ldr	r0, [pc, #312]	@ (8007de8 <_svfiprintf_r+0x1e4>)
 8007cae:	f7f8 faaf 	bl	8000210 <memchr>
 8007cb2:	9a04      	ldr	r2, [sp, #16]
 8007cb4:	b9d8      	cbnz	r0, 8007cee <_svfiprintf_r+0xea>
 8007cb6:	06d0      	lsls	r0, r2, #27
 8007cb8:	bf44      	itt	mi
 8007cba:	2320      	movmi	r3, #32
 8007cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cc0:	0711      	lsls	r1, r2, #28
 8007cc2:	bf44      	itt	mi
 8007cc4:	232b      	movmi	r3, #43	@ 0x2b
 8007cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cca:	f89a 3000 	ldrb.w	r3, [sl]
 8007cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cd0:	d015      	beq.n	8007cfe <_svfiprintf_r+0xfa>
 8007cd2:	9a07      	ldr	r2, [sp, #28]
 8007cd4:	4654      	mov	r4, sl
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f04f 0c0a 	mov.w	ip, #10
 8007cdc:	4621      	mov	r1, r4
 8007cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce2:	3b30      	subs	r3, #48	@ 0x30
 8007ce4:	2b09      	cmp	r3, #9
 8007ce6:	d94b      	bls.n	8007d80 <_svfiprintf_r+0x17c>
 8007ce8:	b1b0      	cbz	r0, 8007d18 <_svfiprintf_r+0x114>
 8007cea:	9207      	str	r2, [sp, #28]
 8007cec:	e014      	b.n	8007d18 <_svfiprintf_r+0x114>
 8007cee:	eba0 0308 	sub.w	r3, r0, r8
 8007cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	46a2      	mov	sl, r4
 8007cfc:	e7d2      	b.n	8007ca4 <_svfiprintf_r+0xa0>
 8007cfe:	9b03      	ldr	r3, [sp, #12]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	9103      	str	r1, [sp, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfbb      	ittet	lt
 8007d0a:	425b      	neglt	r3, r3
 8007d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d10:	9307      	strge	r3, [sp, #28]
 8007d12:	9307      	strlt	r3, [sp, #28]
 8007d14:	bfb8      	it	lt
 8007d16:	9204      	strlt	r2, [sp, #16]
 8007d18:	7823      	ldrb	r3, [r4, #0]
 8007d1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d1c:	d10a      	bne.n	8007d34 <_svfiprintf_r+0x130>
 8007d1e:	7863      	ldrb	r3, [r4, #1]
 8007d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d22:	d132      	bne.n	8007d8a <_svfiprintf_r+0x186>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	1d1a      	adds	r2, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	9203      	str	r2, [sp, #12]
 8007d2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d30:	3402      	adds	r4, #2
 8007d32:	9305      	str	r3, [sp, #20]
 8007d34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007df8 <_svfiprintf_r+0x1f4>
 8007d38:	7821      	ldrb	r1, [r4, #0]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	f7f8 fa67 	bl	8000210 <memchr>
 8007d42:	b138      	cbz	r0, 8007d54 <_svfiprintf_r+0x150>
 8007d44:	9b04      	ldr	r3, [sp, #16]
 8007d46:	eba0 000a 	sub.w	r0, r0, sl
 8007d4a:	2240      	movs	r2, #64	@ 0x40
 8007d4c:	4082      	lsls	r2, r0
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	3401      	adds	r4, #1
 8007d52:	9304      	str	r3, [sp, #16]
 8007d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d58:	4824      	ldr	r0, [pc, #144]	@ (8007dec <_svfiprintf_r+0x1e8>)
 8007d5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d5e:	2206      	movs	r2, #6
 8007d60:	f7f8 fa56 	bl	8000210 <memchr>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d036      	beq.n	8007dd6 <_svfiprintf_r+0x1d2>
 8007d68:	4b21      	ldr	r3, [pc, #132]	@ (8007df0 <_svfiprintf_r+0x1ec>)
 8007d6a:	bb1b      	cbnz	r3, 8007db4 <_svfiprintf_r+0x1b0>
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	3307      	adds	r3, #7
 8007d70:	f023 0307 	bic.w	r3, r3, #7
 8007d74:	3308      	adds	r3, #8
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d7a:	4433      	add	r3, r6
 8007d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d7e:	e76a      	b.n	8007c56 <_svfiprintf_r+0x52>
 8007d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d84:	460c      	mov	r4, r1
 8007d86:	2001      	movs	r0, #1
 8007d88:	e7a8      	b.n	8007cdc <_svfiprintf_r+0xd8>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	3401      	adds	r4, #1
 8007d8e:	9305      	str	r3, [sp, #20]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f04f 0c0a 	mov.w	ip, #10
 8007d96:	4620      	mov	r0, r4
 8007d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9c:	3a30      	subs	r2, #48	@ 0x30
 8007d9e:	2a09      	cmp	r2, #9
 8007da0:	d903      	bls.n	8007daa <_svfiprintf_r+0x1a6>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0c6      	beq.n	8007d34 <_svfiprintf_r+0x130>
 8007da6:	9105      	str	r1, [sp, #20]
 8007da8:	e7c4      	b.n	8007d34 <_svfiprintf_r+0x130>
 8007daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dae:	4604      	mov	r4, r0
 8007db0:	2301      	movs	r3, #1
 8007db2:	e7f0      	b.n	8007d96 <_svfiprintf_r+0x192>
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	462a      	mov	r2, r5
 8007dba:	4b0e      	ldr	r3, [pc, #56]	@ (8007df4 <_svfiprintf_r+0x1f0>)
 8007dbc:	a904      	add	r1, sp, #16
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f7fc fcca 	bl	8004758 <_printf_float>
 8007dc4:	1c42      	adds	r2, r0, #1
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	d1d6      	bne.n	8007d78 <_svfiprintf_r+0x174>
 8007dca:	89ab      	ldrh	r3, [r5, #12]
 8007dcc:	065b      	lsls	r3, r3, #25
 8007dce:	f53f af2d 	bmi.w	8007c2c <_svfiprintf_r+0x28>
 8007dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dd4:	e72c      	b.n	8007c30 <_svfiprintf_r+0x2c>
 8007dd6:	ab03      	add	r3, sp, #12
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	462a      	mov	r2, r5
 8007ddc:	4b05      	ldr	r3, [pc, #20]	@ (8007df4 <_svfiprintf_r+0x1f0>)
 8007dde:	a904      	add	r1, sp, #16
 8007de0:	4638      	mov	r0, r7
 8007de2:	f7fc ff51 	bl	8004c88 <_printf_i>
 8007de6:	e7ed      	b.n	8007dc4 <_svfiprintf_r+0x1c0>
 8007de8:	0800ab51 	.word	0x0800ab51
 8007dec:	0800ab5b 	.word	0x0800ab5b
 8007df0:	08004759 	.word	0x08004759
 8007df4:	08007b4d 	.word	0x08007b4d
 8007df8:	0800ab57 	.word	0x0800ab57

08007dfc <__sflush_r>:
 8007dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e04:	0716      	lsls	r6, r2, #28
 8007e06:	4605      	mov	r5, r0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	d454      	bmi.n	8007eb6 <__sflush_r+0xba>
 8007e0c:	684b      	ldr	r3, [r1, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dc02      	bgt.n	8007e18 <__sflush_r+0x1c>
 8007e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dd48      	ble.n	8007eaa <__sflush_r+0xae>
 8007e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	d045      	beq.n	8007eaa <__sflush_r+0xae>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e24:	682f      	ldr	r7, [r5, #0]
 8007e26:	6a21      	ldr	r1, [r4, #32]
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	d030      	beq.n	8007e8e <__sflush_r+0x92>
 8007e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	0759      	lsls	r1, r3, #29
 8007e32:	d505      	bpl.n	8007e40 <__sflush_r+0x44>
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	1ad2      	subs	r2, r2, r3
 8007e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e3a:	b10b      	cbz	r3, 8007e40 <__sflush_r+0x44>
 8007e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	2300      	movs	r3, #0
 8007e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e44:	6a21      	ldr	r1, [r4, #32]
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b0      	blx	r6
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	d106      	bne.n	8007e5e <__sflush_r+0x62>
 8007e50:	6829      	ldr	r1, [r5, #0]
 8007e52:	291d      	cmp	r1, #29
 8007e54:	d82b      	bhi.n	8007eae <__sflush_r+0xb2>
 8007e56:	4a2a      	ldr	r2, [pc, #168]	@ (8007f00 <__sflush_r+0x104>)
 8007e58:	410a      	asrs	r2, r1
 8007e5a:	07d6      	lsls	r6, r2, #31
 8007e5c:	d427      	bmi.n	8007eae <__sflush_r+0xb2>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6062      	str	r2, [r4, #4]
 8007e62:	04d9      	lsls	r1, r3, #19
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	d504      	bpl.n	8007e74 <__sflush_r+0x78>
 8007e6a:	1c42      	adds	r2, r0, #1
 8007e6c:	d101      	bne.n	8007e72 <__sflush_r+0x76>
 8007e6e:	682b      	ldr	r3, [r5, #0]
 8007e70:	b903      	cbnz	r3, 8007e74 <__sflush_r+0x78>
 8007e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e76:	602f      	str	r7, [r5, #0]
 8007e78:	b1b9      	cbz	r1, 8007eaa <__sflush_r+0xae>
 8007e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	d002      	beq.n	8007e88 <__sflush_r+0x8c>
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7fe fa2c 	bl	80062e0 <_free_r>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e8c:	e00d      	b.n	8007eaa <__sflush_r+0xae>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b0      	blx	r6
 8007e94:	4602      	mov	r2, r0
 8007e96:	1c50      	adds	r0, r2, #1
 8007e98:	d1c9      	bne.n	8007e2e <__sflush_r+0x32>
 8007e9a:	682b      	ldr	r3, [r5, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0c6      	beq.n	8007e2e <__sflush_r+0x32>
 8007ea0:	2b1d      	cmp	r3, #29
 8007ea2:	d001      	beq.n	8007ea8 <__sflush_r+0xac>
 8007ea4:	2b16      	cmp	r3, #22
 8007ea6:	d11e      	bne.n	8007ee6 <__sflush_r+0xea>
 8007ea8:	602f      	str	r7, [r5, #0]
 8007eaa:	2000      	movs	r0, #0
 8007eac:	e022      	b.n	8007ef4 <__sflush_r+0xf8>
 8007eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eb2:	b21b      	sxth	r3, r3
 8007eb4:	e01b      	b.n	8007eee <__sflush_r+0xf2>
 8007eb6:	690f      	ldr	r7, [r1, #16]
 8007eb8:	2f00      	cmp	r7, #0
 8007eba:	d0f6      	beq.n	8007eaa <__sflush_r+0xae>
 8007ebc:	0793      	lsls	r3, r2, #30
 8007ebe:	680e      	ldr	r6, [r1, #0]
 8007ec0:	bf08      	it	eq
 8007ec2:	694b      	ldreq	r3, [r1, #20]
 8007ec4:	600f      	str	r7, [r1, #0]
 8007ec6:	bf18      	it	ne
 8007ec8:	2300      	movne	r3, #0
 8007eca:	eba6 0807 	sub.w	r8, r6, r7
 8007ece:	608b      	str	r3, [r1, #8]
 8007ed0:	f1b8 0f00 	cmp.w	r8, #0
 8007ed4:	dde9      	ble.n	8007eaa <__sflush_r+0xae>
 8007ed6:	6a21      	ldr	r1, [r4, #32]
 8007ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007eda:	4643      	mov	r3, r8
 8007edc:	463a      	mov	r2, r7
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b0      	blx	r6
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	dc08      	bgt.n	8007ef8 <__sflush_r+0xfc>
 8007ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	4407      	add	r7, r0
 8007efa:	eba8 0800 	sub.w	r8, r8, r0
 8007efe:	e7e7      	b.n	8007ed0 <__sflush_r+0xd4>
 8007f00:	dfbffffe 	.word	0xdfbffffe

08007f04 <_fflush_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	690b      	ldr	r3, [r1, #16]
 8007f08:	4605      	mov	r5, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	b913      	cbnz	r3, 8007f14 <_fflush_r+0x10>
 8007f0e:	2500      	movs	r5, #0
 8007f10:	4628      	mov	r0, r5
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	b118      	cbz	r0, 8007f1e <_fflush_r+0x1a>
 8007f16:	6a03      	ldr	r3, [r0, #32]
 8007f18:	b90b      	cbnz	r3, 8007f1e <_fflush_r+0x1a>
 8007f1a:	f7fd fa75 	bl	8005408 <__sinit>
 8007f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f3      	beq.n	8007f0e <_fflush_r+0xa>
 8007f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f28:	07d0      	lsls	r0, r2, #31
 8007f2a:	d404      	bmi.n	8007f36 <_fflush_r+0x32>
 8007f2c:	0599      	lsls	r1, r3, #22
 8007f2e:	d402      	bmi.n	8007f36 <_fflush_r+0x32>
 8007f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f32:	f7fd fb80 	bl	8005636 <__retarget_lock_acquire_recursive>
 8007f36:	4628      	mov	r0, r5
 8007f38:	4621      	mov	r1, r4
 8007f3a:	f7ff ff5f 	bl	8007dfc <__sflush_r>
 8007f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f40:	07da      	lsls	r2, r3, #31
 8007f42:	4605      	mov	r5, r0
 8007f44:	d4e4      	bmi.n	8007f10 <_fflush_r+0xc>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	059b      	lsls	r3, r3, #22
 8007f4a:	d4e1      	bmi.n	8007f10 <_fflush_r+0xc>
 8007f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f4e:	f7fd fb73 	bl	8005638 <__retarget_lock_release_recursive>
 8007f52:	e7dd      	b.n	8007f10 <_fflush_r+0xc>

08007f54 <memmove>:
 8007f54:	4288      	cmp	r0, r1
 8007f56:	b510      	push	{r4, lr}
 8007f58:	eb01 0402 	add.w	r4, r1, r2
 8007f5c:	d902      	bls.n	8007f64 <memmove+0x10>
 8007f5e:	4284      	cmp	r4, r0
 8007f60:	4623      	mov	r3, r4
 8007f62:	d807      	bhi.n	8007f74 <memmove+0x20>
 8007f64:	1e43      	subs	r3, r0, #1
 8007f66:	42a1      	cmp	r1, r4
 8007f68:	d008      	beq.n	8007f7c <memmove+0x28>
 8007f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f72:	e7f8      	b.n	8007f66 <memmove+0x12>
 8007f74:	4402      	add	r2, r0
 8007f76:	4601      	mov	r1, r0
 8007f78:	428a      	cmp	r2, r1
 8007f7a:	d100      	bne.n	8007f7e <memmove+0x2a>
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f86:	e7f7      	b.n	8007f78 <memmove+0x24>

08007f88 <strncmp>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	b16a      	cbz	r2, 8007fa8 <strncmp+0x20>
 8007f8c:	3901      	subs	r1, #1
 8007f8e:	1884      	adds	r4, r0, r2
 8007f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d103      	bne.n	8007fa4 <strncmp+0x1c>
 8007f9c:	42a0      	cmp	r0, r4
 8007f9e:	d001      	beq.n	8007fa4 <strncmp+0x1c>
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	d1f5      	bne.n	8007f90 <strncmp+0x8>
 8007fa4:	1ad0      	subs	r0, r2, r3
 8007fa6:	bd10      	pop	{r4, pc}
 8007fa8:	4610      	mov	r0, r2
 8007faa:	e7fc      	b.n	8007fa6 <strncmp+0x1e>

08007fac <_sbrk_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4d06      	ldr	r5, [pc, #24]	@ (8007fc8 <_sbrk_r+0x1c>)
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7fa fad6 	bl	8002568 <_sbrk>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_sbrk_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_sbrk_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20000410 	.word	0x20000410

08007fcc <memcpy>:
 8007fcc:	440a      	add	r2, r1
 8007fce:	4291      	cmp	r1, r2
 8007fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fd4:	d100      	bne.n	8007fd8 <memcpy+0xc>
 8007fd6:	4770      	bx	lr
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fe2:	4291      	cmp	r1, r2
 8007fe4:	d1f9      	bne.n	8007fda <memcpy+0xe>
 8007fe6:	bd10      	pop	{r4, pc}

08007fe8 <nan>:
 8007fe8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ff0 <nan+0x8>
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	00000000 	.word	0x00000000
 8007ff4:	7ff80000 	.word	0x7ff80000

08007ff8 <__assert_func>:
 8007ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ffa:	4614      	mov	r4, r2
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4b09      	ldr	r3, [pc, #36]	@ (8008024 <__assert_func+0x2c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4605      	mov	r5, r0
 8008004:	68d8      	ldr	r0, [r3, #12]
 8008006:	b954      	cbnz	r4, 800801e <__assert_func+0x26>
 8008008:	4b07      	ldr	r3, [pc, #28]	@ (8008028 <__assert_func+0x30>)
 800800a:	461c      	mov	r4, r3
 800800c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008010:	9100      	str	r1, [sp, #0]
 8008012:	462b      	mov	r3, r5
 8008014:	4905      	ldr	r1, [pc, #20]	@ (800802c <__assert_func+0x34>)
 8008016:	f000 fba7 	bl	8008768 <fiprintf>
 800801a:	f000 fbb7 	bl	800878c <abort>
 800801e:	4b04      	ldr	r3, [pc, #16]	@ (8008030 <__assert_func+0x38>)
 8008020:	e7f4      	b.n	800800c <__assert_func+0x14>
 8008022:	bf00      	nop
 8008024:	2000001c 	.word	0x2000001c
 8008028:	0800aba5 	.word	0x0800aba5
 800802c:	0800ab77 	.word	0x0800ab77
 8008030:	0800ab6a 	.word	0x0800ab6a

08008034 <_calloc_r>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	fba1 5402 	umull	r5, r4, r1, r2
 800803a:	b93c      	cbnz	r4, 800804c <_calloc_r+0x18>
 800803c:	4629      	mov	r1, r5
 800803e:	f7fe f9c3 	bl	80063c8 <_malloc_r>
 8008042:	4606      	mov	r6, r0
 8008044:	b928      	cbnz	r0, 8008052 <_calloc_r+0x1e>
 8008046:	2600      	movs	r6, #0
 8008048:	4630      	mov	r0, r6
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	220c      	movs	r2, #12
 800804e:	6002      	str	r2, [r0, #0]
 8008050:	e7f9      	b.n	8008046 <_calloc_r+0x12>
 8008052:	462a      	mov	r2, r5
 8008054:	4621      	mov	r1, r4
 8008056:	f7fd fa70 	bl	800553a <memset>
 800805a:	e7f5      	b.n	8008048 <_calloc_r+0x14>

0800805c <rshift>:
 800805c:	6903      	ldr	r3, [r0, #16]
 800805e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008062:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008066:	ea4f 1261 	mov.w	r2, r1, asr #5
 800806a:	f100 0414 	add.w	r4, r0, #20
 800806e:	dd45      	ble.n	80080fc <rshift+0xa0>
 8008070:	f011 011f 	ands.w	r1, r1, #31
 8008074:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008078:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800807c:	d10c      	bne.n	8008098 <rshift+0x3c>
 800807e:	f100 0710 	add.w	r7, r0, #16
 8008082:	4629      	mov	r1, r5
 8008084:	42b1      	cmp	r1, r6
 8008086:	d334      	bcc.n	80080f2 <rshift+0x96>
 8008088:	1a9b      	subs	r3, r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	1eea      	subs	r2, r5, #3
 800808e:	4296      	cmp	r6, r2
 8008090:	bf38      	it	cc
 8008092:	2300      	movcc	r3, #0
 8008094:	4423      	add	r3, r4
 8008096:	e015      	b.n	80080c4 <rshift+0x68>
 8008098:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800809c:	f1c1 0820 	rsb	r8, r1, #32
 80080a0:	40cf      	lsrs	r7, r1
 80080a2:	f105 0e04 	add.w	lr, r5, #4
 80080a6:	46a1      	mov	r9, r4
 80080a8:	4576      	cmp	r6, lr
 80080aa:	46f4      	mov	ip, lr
 80080ac:	d815      	bhi.n	80080da <rshift+0x7e>
 80080ae:	1a9a      	subs	r2, r3, r2
 80080b0:	0092      	lsls	r2, r2, #2
 80080b2:	3a04      	subs	r2, #4
 80080b4:	3501      	adds	r5, #1
 80080b6:	42ae      	cmp	r6, r5
 80080b8:	bf38      	it	cc
 80080ba:	2200      	movcc	r2, #0
 80080bc:	18a3      	adds	r3, r4, r2
 80080be:	50a7      	str	r7, [r4, r2]
 80080c0:	b107      	cbz	r7, 80080c4 <rshift+0x68>
 80080c2:	3304      	adds	r3, #4
 80080c4:	1b1a      	subs	r2, r3, r4
 80080c6:	42a3      	cmp	r3, r4
 80080c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80080cc:	bf08      	it	eq
 80080ce:	2300      	moveq	r3, #0
 80080d0:	6102      	str	r2, [r0, #16]
 80080d2:	bf08      	it	eq
 80080d4:	6143      	streq	r3, [r0, #20]
 80080d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080da:	f8dc c000 	ldr.w	ip, [ip]
 80080de:	fa0c fc08 	lsl.w	ip, ip, r8
 80080e2:	ea4c 0707 	orr.w	r7, ip, r7
 80080e6:	f849 7b04 	str.w	r7, [r9], #4
 80080ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080ee:	40cf      	lsrs	r7, r1
 80080f0:	e7da      	b.n	80080a8 <rshift+0x4c>
 80080f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80080f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80080fa:	e7c3      	b.n	8008084 <rshift+0x28>
 80080fc:	4623      	mov	r3, r4
 80080fe:	e7e1      	b.n	80080c4 <rshift+0x68>

08008100 <__hexdig_fun>:
 8008100:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008104:	2b09      	cmp	r3, #9
 8008106:	d802      	bhi.n	800810e <__hexdig_fun+0xe>
 8008108:	3820      	subs	r0, #32
 800810a:	b2c0      	uxtb	r0, r0
 800810c:	4770      	bx	lr
 800810e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008112:	2b05      	cmp	r3, #5
 8008114:	d801      	bhi.n	800811a <__hexdig_fun+0x1a>
 8008116:	3847      	subs	r0, #71	@ 0x47
 8008118:	e7f7      	b.n	800810a <__hexdig_fun+0xa>
 800811a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800811e:	2b05      	cmp	r3, #5
 8008120:	d801      	bhi.n	8008126 <__hexdig_fun+0x26>
 8008122:	3827      	subs	r0, #39	@ 0x27
 8008124:	e7f1      	b.n	800810a <__hexdig_fun+0xa>
 8008126:	2000      	movs	r0, #0
 8008128:	4770      	bx	lr
	...

0800812c <__gethex>:
 800812c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	b085      	sub	sp, #20
 8008132:	468a      	mov	sl, r1
 8008134:	9302      	str	r3, [sp, #8]
 8008136:	680b      	ldr	r3, [r1, #0]
 8008138:	9001      	str	r0, [sp, #4]
 800813a:	4690      	mov	r8, r2
 800813c:	1c9c      	adds	r4, r3, #2
 800813e:	46a1      	mov	r9, r4
 8008140:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008144:	2830      	cmp	r0, #48	@ 0x30
 8008146:	d0fa      	beq.n	800813e <__gethex+0x12>
 8008148:	eba9 0303 	sub.w	r3, r9, r3
 800814c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008150:	f7ff ffd6 	bl	8008100 <__hexdig_fun>
 8008154:	4605      	mov	r5, r0
 8008156:	2800      	cmp	r0, #0
 8008158:	d168      	bne.n	800822c <__gethex+0x100>
 800815a:	49a0      	ldr	r1, [pc, #640]	@ (80083dc <__gethex+0x2b0>)
 800815c:	2201      	movs	r2, #1
 800815e:	4648      	mov	r0, r9
 8008160:	f7ff ff12 	bl	8007f88 <strncmp>
 8008164:	4607      	mov	r7, r0
 8008166:	2800      	cmp	r0, #0
 8008168:	d167      	bne.n	800823a <__gethex+0x10e>
 800816a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800816e:	4626      	mov	r6, r4
 8008170:	f7ff ffc6 	bl	8008100 <__hexdig_fun>
 8008174:	2800      	cmp	r0, #0
 8008176:	d062      	beq.n	800823e <__gethex+0x112>
 8008178:	4623      	mov	r3, r4
 800817a:	7818      	ldrb	r0, [r3, #0]
 800817c:	2830      	cmp	r0, #48	@ 0x30
 800817e:	4699      	mov	r9, r3
 8008180:	f103 0301 	add.w	r3, r3, #1
 8008184:	d0f9      	beq.n	800817a <__gethex+0x4e>
 8008186:	f7ff ffbb 	bl	8008100 <__hexdig_fun>
 800818a:	fab0 f580 	clz	r5, r0
 800818e:	096d      	lsrs	r5, r5, #5
 8008190:	f04f 0b01 	mov.w	fp, #1
 8008194:	464a      	mov	r2, r9
 8008196:	4616      	mov	r6, r2
 8008198:	3201      	adds	r2, #1
 800819a:	7830      	ldrb	r0, [r6, #0]
 800819c:	f7ff ffb0 	bl	8008100 <__hexdig_fun>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d1f8      	bne.n	8008196 <__gethex+0x6a>
 80081a4:	498d      	ldr	r1, [pc, #564]	@ (80083dc <__gethex+0x2b0>)
 80081a6:	2201      	movs	r2, #1
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7ff feed 	bl	8007f88 <strncmp>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d13f      	bne.n	8008232 <__gethex+0x106>
 80081b2:	b944      	cbnz	r4, 80081c6 <__gethex+0x9a>
 80081b4:	1c74      	adds	r4, r6, #1
 80081b6:	4622      	mov	r2, r4
 80081b8:	4616      	mov	r6, r2
 80081ba:	3201      	adds	r2, #1
 80081bc:	7830      	ldrb	r0, [r6, #0]
 80081be:	f7ff ff9f 	bl	8008100 <__hexdig_fun>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d1f8      	bne.n	80081b8 <__gethex+0x8c>
 80081c6:	1ba4      	subs	r4, r4, r6
 80081c8:	00a7      	lsls	r7, r4, #2
 80081ca:	7833      	ldrb	r3, [r6, #0]
 80081cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80081d0:	2b50      	cmp	r3, #80	@ 0x50
 80081d2:	d13e      	bne.n	8008252 <__gethex+0x126>
 80081d4:	7873      	ldrb	r3, [r6, #1]
 80081d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80081d8:	d033      	beq.n	8008242 <__gethex+0x116>
 80081da:	2b2d      	cmp	r3, #45	@ 0x2d
 80081dc:	d034      	beq.n	8008248 <__gethex+0x11c>
 80081de:	1c71      	adds	r1, r6, #1
 80081e0:	2400      	movs	r4, #0
 80081e2:	7808      	ldrb	r0, [r1, #0]
 80081e4:	f7ff ff8c 	bl	8008100 <__hexdig_fun>
 80081e8:	1e43      	subs	r3, r0, #1
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b18      	cmp	r3, #24
 80081ee:	d830      	bhi.n	8008252 <__gethex+0x126>
 80081f0:	f1a0 0210 	sub.w	r2, r0, #16
 80081f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081f8:	f7ff ff82 	bl	8008100 <__hexdig_fun>
 80081fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008200:	fa5f fc8c 	uxtb.w	ip, ip
 8008204:	f1bc 0f18 	cmp.w	ip, #24
 8008208:	f04f 030a 	mov.w	r3, #10
 800820c:	d91e      	bls.n	800824c <__gethex+0x120>
 800820e:	b104      	cbz	r4, 8008212 <__gethex+0xe6>
 8008210:	4252      	negs	r2, r2
 8008212:	4417      	add	r7, r2
 8008214:	f8ca 1000 	str.w	r1, [sl]
 8008218:	b1ed      	cbz	r5, 8008256 <__gethex+0x12a>
 800821a:	f1bb 0f00 	cmp.w	fp, #0
 800821e:	bf0c      	ite	eq
 8008220:	2506      	moveq	r5, #6
 8008222:	2500      	movne	r5, #0
 8008224:	4628      	mov	r0, r5
 8008226:	b005      	add	sp, #20
 8008228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822c:	2500      	movs	r5, #0
 800822e:	462c      	mov	r4, r5
 8008230:	e7b0      	b.n	8008194 <__gethex+0x68>
 8008232:	2c00      	cmp	r4, #0
 8008234:	d1c7      	bne.n	80081c6 <__gethex+0x9a>
 8008236:	4627      	mov	r7, r4
 8008238:	e7c7      	b.n	80081ca <__gethex+0x9e>
 800823a:	464e      	mov	r6, r9
 800823c:	462f      	mov	r7, r5
 800823e:	2501      	movs	r5, #1
 8008240:	e7c3      	b.n	80081ca <__gethex+0x9e>
 8008242:	2400      	movs	r4, #0
 8008244:	1cb1      	adds	r1, r6, #2
 8008246:	e7cc      	b.n	80081e2 <__gethex+0xb6>
 8008248:	2401      	movs	r4, #1
 800824a:	e7fb      	b.n	8008244 <__gethex+0x118>
 800824c:	fb03 0002 	mla	r0, r3, r2, r0
 8008250:	e7ce      	b.n	80081f0 <__gethex+0xc4>
 8008252:	4631      	mov	r1, r6
 8008254:	e7de      	b.n	8008214 <__gethex+0xe8>
 8008256:	eba6 0309 	sub.w	r3, r6, r9
 800825a:	3b01      	subs	r3, #1
 800825c:	4629      	mov	r1, r5
 800825e:	2b07      	cmp	r3, #7
 8008260:	dc0a      	bgt.n	8008278 <__gethex+0x14c>
 8008262:	9801      	ldr	r0, [sp, #4]
 8008264:	f7fe f93c 	bl	80064e0 <_Balloc>
 8008268:	4604      	mov	r4, r0
 800826a:	b940      	cbnz	r0, 800827e <__gethex+0x152>
 800826c:	4b5c      	ldr	r3, [pc, #368]	@ (80083e0 <__gethex+0x2b4>)
 800826e:	4602      	mov	r2, r0
 8008270:	21e4      	movs	r1, #228	@ 0xe4
 8008272:	485c      	ldr	r0, [pc, #368]	@ (80083e4 <__gethex+0x2b8>)
 8008274:	f7ff fec0 	bl	8007ff8 <__assert_func>
 8008278:	3101      	adds	r1, #1
 800827a:	105b      	asrs	r3, r3, #1
 800827c:	e7ef      	b.n	800825e <__gethex+0x132>
 800827e:	f100 0a14 	add.w	sl, r0, #20
 8008282:	2300      	movs	r3, #0
 8008284:	4655      	mov	r5, sl
 8008286:	469b      	mov	fp, r3
 8008288:	45b1      	cmp	r9, r6
 800828a:	d337      	bcc.n	80082fc <__gethex+0x1d0>
 800828c:	f845 bb04 	str.w	fp, [r5], #4
 8008290:	eba5 050a 	sub.w	r5, r5, sl
 8008294:	10ad      	asrs	r5, r5, #2
 8008296:	6125      	str	r5, [r4, #16]
 8008298:	4658      	mov	r0, fp
 800829a:	f7fe fa13 	bl	80066c4 <__hi0bits>
 800829e:	016d      	lsls	r5, r5, #5
 80082a0:	f8d8 6000 	ldr.w	r6, [r8]
 80082a4:	1a2d      	subs	r5, r5, r0
 80082a6:	42b5      	cmp	r5, r6
 80082a8:	dd54      	ble.n	8008354 <__gethex+0x228>
 80082aa:	1bad      	subs	r5, r5, r6
 80082ac:	4629      	mov	r1, r5
 80082ae:	4620      	mov	r0, r4
 80082b0:	f7fe fda7 	bl	8006e02 <__any_on>
 80082b4:	4681      	mov	r9, r0
 80082b6:	b178      	cbz	r0, 80082d8 <__gethex+0x1ac>
 80082b8:	1e6b      	subs	r3, r5, #1
 80082ba:	1159      	asrs	r1, r3, #5
 80082bc:	f003 021f 	and.w	r2, r3, #31
 80082c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80082c4:	f04f 0901 	mov.w	r9, #1
 80082c8:	fa09 f202 	lsl.w	r2, r9, r2
 80082cc:	420a      	tst	r2, r1
 80082ce:	d003      	beq.n	80082d8 <__gethex+0x1ac>
 80082d0:	454b      	cmp	r3, r9
 80082d2:	dc36      	bgt.n	8008342 <__gethex+0x216>
 80082d4:	f04f 0902 	mov.w	r9, #2
 80082d8:	4629      	mov	r1, r5
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff febe 	bl	800805c <rshift>
 80082e0:	442f      	add	r7, r5
 80082e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082e6:	42bb      	cmp	r3, r7
 80082e8:	da42      	bge.n	8008370 <__gethex+0x244>
 80082ea:	9801      	ldr	r0, [sp, #4]
 80082ec:	4621      	mov	r1, r4
 80082ee:	f7fe f937 	bl	8006560 <_Bfree>
 80082f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082f4:	2300      	movs	r3, #0
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	25a3      	movs	r5, #163	@ 0xa3
 80082fa:	e793      	b.n	8008224 <__gethex+0xf8>
 80082fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008300:	2a2e      	cmp	r2, #46	@ 0x2e
 8008302:	d012      	beq.n	800832a <__gethex+0x1fe>
 8008304:	2b20      	cmp	r3, #32
 8008306:	d104      	bne.n	8008312 <__gethex+0x1e6>
 8008308:	f845 bb04 	str.w	fp, [r5], #4
 800830c:	f04f 0b00 	mov.w	fp, #0
 8008310:	465b      	mov	r3, fp
 8008312:	7830      	ldrb	r0, [r6, #0]
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	f7ff fef3 	bl	8008100 <__hexdig_fun>
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	f000 000f 	and.w	r0, r0, #15
 8008320:	4098      	lsls	r0, r3
 8008322:	ea4b 0b00 	orr.w	fp, fp, r0
 8008326:	3304      	adds	r3, #4
 8008328:	e7ae      	b.n	8008288 <__gethex+0x15c>
 800832a:	45b1      	cmp	r9, r6
 800832c:	d8ea      	bhi.n	8008304 <__gethex+0x1d8>
 800832e:	492b      	ldr	r1, [pc, #172]	@ (80083dc <__gethex+0x2b0>)
 8008330:	9303      	str	r3, [sp, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	4630      	mov	r0, r6
 8008336:	f7ff fe27 	bl	8007f88 <strncmp>
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	2800      	cmp	r0, #0
 800833e:	d1e1      	bne.n	8008304 <__gethex+0x1d8>
 8008340:	e7a2      	b.n	8008288 <__gethex+0x15c>
 8008342:	1ea9      	subs	r1, r5, #2
 8008344:	4620      	mov	r0, r4
 8008346:	f7fe fd5c 	bl	8006e02 <__any_on>
 800834a:	2800      	cmp	r0, #0
 800834c:	d0c2      	beq.n	80082d4 <__gethex+0x1a8>
 800834e:	f04f 0903 	mov.w	r9, #3
 8008352:	e7c1      	b.n	80082d8 <__gethex+0x1ac>
 8008354:	da09      	bge.n	800836a <__gethex+0x23e>
 8008356:	1b75      	subs	r5, r6, r5
 8008358:	4621      	mov	r1, r4
 800835a:	9801      	ldr	r0, [sp, #4]
 800835c:	462a      	mov	r2, r5
 800835e:	f7fe fb17 	bl	8006990 <__lshift>
 8008362:	1b7f      	subs	r7, r7, r5
 8008364:	4604      	mov	r4, r0
 8008366:	f100 0a14 	add.w	sl, r0, #20
 800836a:	f04f 0900 	mov.w	r9, #0
 800836e:	e7b8      	b.n	80082e2 <__gethex+0x1b6>
 8008370:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008374:	42bd      	cmp	r5, r7
 8008376:	dd6f      	ble.n	8008458 <__gethex+0x32c>
 8008378:	1bed      	subs	r5, r5, r7
 800837a:	42ae      	cmp	r6, r5
 800837c:	dc34      	bgt.n	80083e8 <__gethex+0x2bc>
 800837e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d022      	beq.n	80083cc <__gethex+0x2a0>
 8008386:	2b03      	cmp	r3, #3
 8008388:	d024      	beq.n	80083d4 <__gethex+0x2a8>
 800838a:	2b01      	cmp	r3, #1
 800838c:	d115      	bne.n	80083ba <__gethex+0x28e>
 800838e:	42ae      	cmp	r6, r5
 8008390:	d113      	bne.n	80083ba <__gethex+0x28e>
 8008392:	2e01      	cmp	r6, #1
 8008394:	d10b      	bne.n	80083ae <__gethex+0x282>
 8008396:	9a02      	ldr	r2, [sp, #8]
 8008398:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	2301      	movs	r3, #1
 80083a0:	6123      	str	r3, [r4, #16]
 80083a2:	f8ca 3000 	str.w	r3, [sl]
 80083a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083a8:	2562      	movs	r5, #98	@ 0x62
 80083aa:	601c      	str	r4, [r3, #0]
 80083ac:	e73a      	b.n	8008224 <__gethex+0xf8>
 80083ae:	1e71      	subs	r1, r6, #1
 80083b0:	4620      	mov	r0, r4
 80083b2:	f7fe fd26 	bl	8006e02 <__any_on>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d1ed      	bne.n	8008396 <__gethex+0x26a>
 80083ba:	9801      	ldr	r0, [sp, #4]
 80083bc:	4621      	mov	r1, r4
 80083be:	f7fe f8cf 	bl	8006560 <_Bfree>
 80083c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083c4:	2300      	movs	r3, #0
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	2550      	movs	r5, #80	@ 0x50
 80083ca:	e72b      	b.n	8008224 <__gethex+0xf8>
 80083cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f3      	bne.n	80083ba <__gethex+0x28e>
 80083d2:	e7e0      	b.n	8008396 <__gethex+0x26a>
 80083d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1dd      	bne.n	8008396 <__gethex+0x26a>
 80083da:	e7ee      	b.n	80083ba <__gethex+0x28e>
 80083dc:	0800a9f8 	.word	0x0800a9f8
 80083e0:	0800a88d 	.word	0x0800a88d
 80083e4:	0800aba6 	.word	0x0800aba6
 80083e8:	1e6f      	subs	r7, r5, #1
 80083ea:	f1b9 0f00 	cmp.w	r9, #0
 80083ee:	d130      	bne.n	8008452 <__gethex+0x326>
 80083f0:	b127      	cbz	r7, 80083fc <__gethex+0x2d0>
 80083f2:	4639      	mov	r1, r7
 80083f4:	4620      	mov	r0, r4
 80083f6:	f7fe fd04 	bl	8006e02 <__any_on>
 80083fa:	4681      	mov	r9, r0
 80083fc:	117a      	asrs	r2, r7, #5
 80083fe:	2301      	movs	r3, #1
 8008400:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008404:	f007 071f 	and.w	r7, r7, #31
 8008408:	40bb      	lsls	r3, r7
 800840a:	4213      	tst	r3, r2
 800840c:	4629      	mov	r1, r5
 800840e:	4620      	mov	r0, r4
 8008410:	bf18      	it	ne
 8008412:	f049 0902 	orrne.w	r9, r9, #2
 8008416:	f7ff fe21 	bl	800805c <rshift>
 800841a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800841e:	1b76      	subs	r6, r6, r5
 8008420:	2502      	movs	r5, #2
 8008422:	f1b9 0f00 	cmp.w	r9, #0
 8008426:	d047      	beq.n	80084b8 <__gethex+0x38c>
 8008428:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d015      	beq.n	800845c <__gethex+0x330>
 8008430:	2b03      	cmp	r3, #3
 8008432:	d017      	beq.n	8008464 <__gethex+0x338>
 8008434:	2b01      	cmp	r3, #1
 8008436:	d109      	bne.n	800844c <__gethex+0x320>
 8008438:	f019 0f02 	tst.w	r9, #2
 800843c:	d006      	beq.n	800844c <__gethex+0x320>
 800843e:	f8da 3000 	ldr.w	r3, [sl]
 8008442:	ea49 0903 	orr.w	r9, r9, r3
 8008446:	f019 0f01 	tst.w	r9, #1
 800844a:	d10e      	bne.n	800846a <__gethex+0x33e>
 800844c:	f045 0510 	orr.w	r5, r5, #16
 8008450:	e032      	b.n	80084b8 <__gethex+0x38c>
 8008452:	f04f 0901 	mov.w	r9, #1
 8008456:	e7d1      	b.n	80083fc <__gethex+0x2d0>
 8008458:	2501      	movs	r5, #1
 800845a:	e7e2      	b.n	8008422 <__gethex+0x2f6>
 800845c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800845e:	f1c3 0301 	rsb	r3, r3, #1
 8008462:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0f0      	beq.n	800844c <__gethex+0x320>
 800846a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800846e:	f104 0314 	add.w	r3, r4, #20
 8008472:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008476:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800847a:	f04f 0c00 	mov.w	ip, #0
 800847e:	4618      	mov	r0, r3
 8008480:	f853 2b04 	ldr.w	r2, [r3], #4
 8008484:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008488:	d01b      	beq.n	80084c2 <__gethex+0x396>
 800848a:	3201      	adds	r2, #1
 800848c:	6002      	str	r2, [r0, #0]
 800848e:	2d02      	cmp	r5, #2
 8008490:	f104 0314 	add.w	r3, r4, #20
 8008494:	d13c      	bne.n	8008510 <__gethex+0x3e4>
 8008496:	f8d8 2000 	ldr.w	r2, [r8]
 800849a:	3a01      	subs	r2, #1
 800849c:	42b2      	cmp	r2, r6
 800849e:	d109      	bne.n	80084b4 <__gethex+0x388>
 80084a0:	1171      	asrs	r1, r6, #5
 80084a2:	2201      	movs	r2, #1
 80084a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084a8:	f006 061f 	and.w	r6, r6, #31
 80084ac:	fa02 f606 	lsl.w	r6, r2, r6
 80084b0:	421e      	tst	r6, r3
 80084b2:	d13a      	bne.n	800852a <__gethex+0x3fe>
 80084b4:	f045 0520 	orr.w	r5, r5, #32
 80084b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084ba:	601c      	str	r4, [r3, #0]
 80084bc:	9b02      	ldr	r3, [sp, #8]
 80084be:	601f      	str	r7, [r3, #0]
 80084c0:	e6b0      	b.n	8008224 <__gethex+0xf8>
 80084c2:	4299      	cmp	r1, r3
 80084c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80084c8:	d8d9      	bhi.n	800847e <__gethex+0x352>
 80084ca:	68a3      	ldr	r3, [r4, #8]
 80084cc:	459b      	cmp	fp, r3
 80084ce:	db17      	blt.n	8008500 <__gethex+0x3d4>
 80084d0:	6861      	ldr	r1, [r4, #4]
 80084d2:	9801      	ldr	r0, [sp, #4]
 80084d4:	3101      	adds	r1, #1
 80084d6:	f7fe f803 	bl	80064e0 <_Balloc>
 80084da:	4681      	mov	r9, r0
 80084dc:	b918      	cbnz	r0, 80084e6 <__gethex+0x3ba>
 80084de:	4b1a      	ldr	r3, [pc, #104]	@ (8008548 <__gethex+0x41c>)
 80084e0:	4602      	mov	r2, r0
 80084e2:	2184      	movs	r1, #132	@ 0x84
 80084e4:	e6c5      	b.n	8008272 <__gethex+0x146>
 80084e6:	6922      	ldr	r2, [r4, #16]
 80084e8:	3202      	adds	r2, #2
 80084ea:	f104 010c 	add.w	r1, r4, #12
 80084ee:	0092      	lsls	r2, r2, #2
 80084f0:	300c      	adds	r0, #12
 80084f2:	f7ff fd6b 	bl	8007fcc <memcpy>
 80084f6:	4621      	mov	r1, r4
 80084f8:	9801      	ldr	r0, [sp, #4]
 80084fa:	f7fe f831 	bl	8006560 <_Bfree>
 80084fe:	464c      	mov	r4, r9
 8008500:	6923      	ldr	r3, [r4, #16]
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008508:	6122      	str	r2, [r4, #16]
 800850a:	2201      	movs	r2, #1
 800850c:	615a      	str	r2, [r3, #20]
 800850e:	e7be      	b.n	800848e <__gethex+0x362>
 8008510:	6922      	ldr	r2, [r4, #16]
 8008512:	455a      	cmp	r2, fp
 8008514:	dd0b      	ble.n	800852e <__gethex+0x402>
 8008516:	2101      	movs	r1, #1
 8008518:	4620      	mov	r0, r4
 800851a:	f7ff fd9f 	bl	800805c <rshift>
 800851e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008522:	3701      	adds	r7, #1
 8008524:	42bb      	cmp	r3, r7
 8008526:	f6ff aee0 	blt.w	80082ea <__gethex+0x1be>
 800852a:	2501      	movs	r5, #1
 800852c:	e7c2      	b.n	80084b4 <__gethex+0x388>
 800852e:	f016 061f 	ands.w	r6, r6, #31
 8008532:	d0fa      	beq.n	800852a <__gethex+0x3fe>
 8008534:	4453      	add	r3, sl
 8008536:	f1c6 0620 	rsb	r6, r6, #32
 800853a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800853e:	f7fe f8c1 	bl	80066c4 <__hi0bits>
 8008542:	42b0      	cmp	r0, r6
 8008544:	dbe7      	blt.n	8008516 <__gethex+0x3ea>
 8008546:	e7f0      	b.n	800852a <__gethex+0x3fe>
 8008548:	0800a88d 	.word	0x0800a88d

0800854c <L_shift>:
 800854c:	f1c2 0208 	rsb	r2, r2, #8
 8008550:	0092      	lsls	r2, r2, #2
 8008552:	b570      	push	{r4, r5, r6, lr}
 8008554:	f1c2 0620 	rsb	r6, r2, #32
 8008558:	6843      	ldr	r3, [r0, #4]
 800855a:	6804      	ldr	r4, [r0, #0]
 800855c:	fa03 f506 	lsl.w	r5, r3, r6
 8008560:	432c      	orrs	r4, r5
 8008562:	40d3      	lsrs	r3, r2
 8008564:	6004      	str	r4, [r0, #0]
 8008566:	f840 3f04 	str.w	r3, [r0, #4]!
 800856a:	4288      	cmp	r0, r1
 800856c:	d3f4      	bcc.n	8008558 <L_shift+0xc>
 800856e:	bd70      	pop	{r4, r5, r6, pc}

08008570 <__match>:
 8008570:	b530      	push	{r4, r5, lr}
 8008572:	6803      	ldr	r3, [r0, #0]
 8008574:	3301      	adds	r3, #1
 8008576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857a:	b914      	cbnz	r4, 8008582 <__match+0x12>
 800857c:	6003      	str	r3, [r0, #0]
 800857e:	2001      	movs	r0, #1
 8008580:	bd30      	pop	{r4, r5, pc}
 8008582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008586:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800858a:	2d19      	cmp	r5, #25
 800858c:	bf98      	it	ls
 800858e:	3220      	addls	r2, #32
 8008590:	42a2      	cmp	r2, r4
 8008592:	d0f0      	beq.n	8008576 <__match+0x6>
 8008594:	2000      	movs	r0, #0
 8008596:	e7f3      	b.n	8008580 <__match+0x10>

08008598 <__hexnan>:
 8008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	680b      	ldr	r3, [r1, #0]
 800859e:	6801      	ldr	r1, [r0, #0]
 80085a0:	115e      	asrs	r6, r3, #5
 80085a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80085a6:	f013 031f 	ands.w	r3, r3, #31
 80085aa:	b087      	sub	sp, #28
 80085ac:	bf18      	it	ne
 80085ae:	3604      	addne	r6, #4
 80085b0:	2500      	movs	r5, #0
 80085b2:	1f37      	subs	r7, r6, #4
 80085b4:	4682      	mov	sl, r0
 80085b6:	4690      	mov	r8, r2
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80085be:	46b9      	mov	r9, r7
 80085c0:	463c      	mov	r4, r7
 80085c2:	9502      	str	r5, [sp, #8]
 80085c4:	46ab      	mov	fp, r5
 80085c6:	784a      	ldrb	r2, [r1, #1]
 80085c8:	1c4b      	adds	r3, r1, #1
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	b342      	cbz	r2, 8008620 <__hexnan+0x88>
 80085ce:	4610      	mov	r0, r2
 80085d0:	9105      	str	r1, [sp, #20]
 80085d2:	9204      	str	r2, [sp, #16]
 80085d4:	f7ff fd94 	bl	8008100 <__hexdig_fun>
 80085d8:	2800      	cmp	r0, #0
 80085da:	d151      	bne.n	8008680 <__hexnan+0xe8>
 80085dc:	9a04      	ldr	r2, [sp, #16]
 80085de:	9905      	ldr	r1, [sp, #20]
 80085e0:	2a20      	cmp	r2, #32
 80085e2:	d818      	bhi.n	8008616 <__hexnan+0x7e>
 80085e4:	9b02      	ldr	r3, [sp, #8]
 80085e6:	459b      	cmp	fp, r3
 80085e8:	dd13      	ble.n	8008612 <__hexnan+0x7a>
 80085ea:	454c      	cmp	r4, r9
 80085ec:	d206      	bcs.n	80085fc <__hexnan+0x64>
 80085ee:	2d07      	cmp	r5, #7
 80085f0:	dc04      	bgt.n	80085fc <__hexnan+0x64>
 80085f2:	462a      	mov	r2, r5
 80085f4:	4649      	mov	r1, r9
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7ff ffa8 	bl	800854c <L_shift>
 80085fc:	4544      	cmp	r4, r8
 80085fe:	d952      	bls.n	80086a6 <__hexnan+0x10e>
 8008600:	2300      	movs	r3, #0
 8008602:	f1a4 0904 	sub.w	r9, r4, #4
 8008606:	f844 3c04 	str.w	r3, [r4, #-4]
 800860a:	f8cd b008 	str.w	fp, [sp, #8]
 800860e:	464c      	mov	r4, r9
 8008610:	461d      	mov	r5, r3
 8008612:	9903      	ldr	r1, [sp, #12]
 8008614:	e7d7      	b.n	80085c6 <__hexnan+0x2e>
 8008616:	2a29      	cmp	r2, #41	@ 0x29
 8008618:	d157      	bne.n	80086ca <__hexnan+0x132>
 800861a:	3102      	adds	r1, #2
 800861c:	f8ca 1000 	str.w	r1, [sl]
 8008620:	f1bb 0f00 	cmp.w	fp, #0
 8008624:	d051      	beq.n	80086ca <__hexnan+0x132>
 8008626:	454c      	cmp	r4, r9
 8008628:	d206      	bcs.n	8008638 <__hexnan+0xa0>
 800862a:	2d07      	cmp	r5, #7
 800862c:	dc04      	bgt.n	8008638 <__hexnan+0xa0>
 800862e:	462a      	mov	r2, r5
 8008630:	4649      	mov	r1, r9
 8008632:	4620      	mov	r0, r4
 8008634:	f7ff ff8a 	bl	800854c <L_shift>
 8008638:	4544      	cmp	r4, r8
 800863a:	d936      	bls.n	80086aa <__hexnan+0x112>
 800863c:	f1a8 0204 	sub.w	r2, r8, #4
 8008640:	4623      	mov	r3, r4
 8008642:	f853 1b04 	ldr.w	r1, [r3], #4
 8008646:	f842 1f04 	str.w	r1, [r2, #4]!
 800864a:	429f      	cmp	r7, r3
 800864c:	d2f9      	bcs.n	8008642 <__hexnan+0xaa>
 800864e:	1b3b      	subs	r3, r7, r4
 8008650:	f023 0303 	bic.w	r3, r3, #3
 8008654:	3304      	adds	r3, #4
 8008656:	3401      	adds	r4, #1
 8008658:	3e03      	subs	r6, #3
 800865a:	42b4      	cmp	r4, r6
 800865c:	bf88      	it	hi
 800865e:	2304      	movhi	r3, #4
 8008660:	4443      	add	r3, r8
 8008662:	2200      	movs	r2, #0
 8008664:	f843 2b04 	str.w	r2, [r3], #4
 8008668:	429f      	cmp	r7, r3
 800866a:	d2fb      	bcs.n	8008664 <__hexnan+0xcc>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	b91b      	cbnz	r3, 8008678 <__hexnan+0xe0>
 8008670:	4547      	cmp	r7, r8
 8008672:	d128      	bne.n	80086c6 <__hexnan+0x12e>
 8008674:	2301      	movs	r3, #1
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	2005      	movs	r0, #5
 800867a:	b007      	add	sp, #28
 800867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008680:	3501      	adds	r5, #1
 8008682:	2d08      	cmp	r5, #8
 8008684:	f10b 0b01 	add.w	fp, fp, #1
 8008688:	dd06      	ble.n	8008698 <__hexnan+0x100>
 800868a:	4544      	cmp	r4, r8
 800868c:	d9c1      	bls.n	8008612 <__hexnan+0x7a>
 800868e:	2300      	movs	r3, #0
 8008690:	f844 3c04 	str.w	r3, [r4, #-4]
 8008694:	2501      	movs	r5, #1
 8008696:	3c04      	subs	r4, #4
 8008698:	6822      	ldr	r2, [r4, #0]
 800869a:	f000 000f 	and.w	r0, r0, #15
 800869e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80086a2:	6020      	str	r0, [r4, #0]
 80086a4:	e7b5      	b.n	8008612 <__hexnan+0x7a>
 80086a6:	2508      	movs	r5, #8
 80086a8:	e7b3      	b.n	8008612 <__hexnan+0x7a>
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0dd      	beq.n	800866c <__hexnan+0xd4>
 80086b0:	f1c3 0320 	rsb	r3, r3, #32
 80086b4:	f04f 32ff 	mov.w	r2, #4294967295
 80086b8:	40da      	lsrs	r2, r3
 80086ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80086be:	4013      	ands	r3, r2
 80086c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80086c4:	e7d2      	b.n	800866c <__hexnan+0xd4>
 80086c6:	3f04      	subs	r7, #4
 80086c8:	e7d0      	b.n	800866c <__hexnan+0xd4>
 80086ca:	2004      	movs	r0, #4
 80086cc:	e7d5      	b.n	800867a <__hexnan+0xe2>

080086ce <__ascii_mbtowc>:
 80086ce:	b082      	sub	sp, #8
 80086d0:	b901      	cbnz	r1, 80086d4 <__ascii_mbtowc+0x6>
 80086d2:	a901      	add	r1, sp, #4
 80086d4:	b142      	cbz	r2, 80086e8 <__ascii_mbtowc+0x1a>
 80086d6:	b14b      	cbz	r3, 80086ec <__ascii_mbtowc+0x1e>
 80086d8:	7813      	ldrb	r3, [r2, #0]
 80086da:	600b      	str	r3, [r1, #0]
 80086dc:	7812      	ldrb	r2, [r2, #0]
 80086de:	1e10      	subs	r0, r2, #0
 80086e0:	bf18      	it	ne
 80086e2:	2001      	movne	r0, #1
 80086e4:	b002      	add	sp, #8
 80086e6:	4770      	bx	lr
 80086e8:	4610      	mov	r0, r2
 80086ea:	e7fb      	b.n	80086e4 <__ascii_mbtowc+0x16>
 80086ec:	f06f 0001 	mvn.w	r0, #1
 80086f0:	e7f8      	b.n	80086e4 <__ascii_mbtowc+0x16>

080086f2 <_realloc_r>:
 80086f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	4680      	mov	r8, r0
 80086f8:	4615      	mov	r5, r2
 80086fa:	460c      	mov	r4, r1
 80086fc:	b921      	cbnz	r1, 8008708 <_realloc_r+0x16>
 80086fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008702:	4611      	mov	r1, r2
 8008704:	f7fd be60 	b.w	80063c8 <_malloc_r>
 8008708:	b92a      	cbnz	r2, 8008716 <_realloc_r+0x24>
 800870a:	f7fd fde9 	bl	80062e0 <_free_r>
 800870e:	2400      	movs	r4, #0
 8008710:	4620      	mov	r0, r4
 8008712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008716:	f000 f840 	bl	800879a <_malloc_usable_size_r>
 800871a:	4285      	cmp	r5, r0
 800871c:	4606      	mov	r6, r0
 800871e:	d802      	bhi.n	8008726 <_realloc_r+0x34>
 8008720:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008724:	d8f4      	bhi.n	8008710 <_realloc_r+0x1e>
 8008726:	4629      	mov	r1, r5
 8008728:	4640      	mov	r0, r8
 800872a:	f7fd fe4d 	bl	80063c8 <_malloc_r>
 800872e:	4607      	mov	r7, r0
 8008730:	2800      	cmp	r0, #0
 8008732:	d0ec      	beq.n	800870e <_realloc_r+0x1c>
 8008734:	42b5      	cmp	r5, r6
 8008736:	462a      	mov	r2, r5
 8008738:	4621      	mov	r1, r4
 800873a:	bf28      	it	cs
 800873c:	4632      	movcs	r2, r6
 800873e:	f7ff fc45 	bl	8007fcc <memcpy>
 8008742:	4621      	mov	r1, r4
 8008744:	4640      	mov	r0, r8
 8008746:	f7fd fdcb 	bl	80062e0 <_free_r>
 800874a:	463c      	mov	r4, r7
 800874c:	e7e0      	b.n	8008710 <_realloc_r+0x1e>

0800874e <__ascii_wctomb>:
 800874e:	4603      	mov	r3, r0
 8008750:	4608      	mov	r0, r1
 8008752:	b141      	cbz	r1, 8008766 <__ascii_wctomb+0x18>
 8008754:	2aff      	cmp	r2, #255	@ 0xff
 8008756:	d904      	bls.n	8008762 <__ascii_wctomb+0x14>
 8008758:	228a      	movs	r2, #138	@ 0x8a
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	4770      	bx	lr
 8008762:	700a      	strb	r2, [r1, #0]
 8008764:	2001      	movs	r0, #1
 8008766:	4770      	bx	lr

08008768 <fiprintf>:
 8008768:	b40e      	push	{r1, r2, r3}
 800876a:	b503      	push	{r0, r1, lr}
 800876c:	4601      	mov	r1, r0
 800876e:	ab03      	add	r3, sp, #12
 8008770:	4805      	ldr	r0, [pc, #20]	@ (8008788 <fiprintf+0x20>)
 8008772:	f853 2b04 	ldr.w	r2, [r3], #4
 8008776:	6800      	ldr	r0, [r0, #0]
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	f000 f83f 	bl	80087fc <_vfiprintf_r>
 800877e:	b002      	add	sp, #8
 8008780:	f85d eb04 	ldr.w	lr, [sp], #4
 8008784:	b003      	add	sp, #12
 8008786:	4770      	bx	lr
 8008788:	2000001c 	.word	0x2000001c

0800878c <abort>:
 800878c:	b508      	push	{r3, lr}
 800878e:	2006      	movs	r0, #6
 8008790:	f000 fa08 	bl	8008ba4 <raise>
 8008794:	2001      	movs	r0, #1
 8008796:	f7f9 fe6f 	bl	8002478 <_exit>

0800879a <_malloc_usable_size_r>:
 800879a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800879e:	1f18      	subs	r0, r3, #4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bfbc      	itt	lt
 80087a4:	580b      	ldrlt	r3, [r1, r0]
 80087a6:	18c0      	addlt	r0, r0, r3
 80087a8:	4770      	bx	lr

080087aa <__sfputc_r>:
 80087aa:	6893      	ldr	r3, [r2, #8]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	b410      	push	{r4}
 80087b2:	6093      	str	r3, [r2, #8]
 80087b4:	da08      	bge.n	80087c8 <__sfputc_r+0x1e>
 80087b6:	6994      	ldr	r4, [r2, #24]
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	db01      	blt.n	80087c0 <__sfputc_r+0x16>
 80087bc:	290a      	cmp	r1, #10
 80087be:	d103      	bne.n	80087c8 <__sfputc_r+0x1e>
 80087c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c4:	f000 b932 	b.w	8008a2c <__swbuf_r>
 80087c8:	6813      	ldr	r3, [r2, #0]
 80087ca:	1c58      	adds	r0, r3, #1
 80087cc:	6010      	str	r0, [r2, #0]
 80087ce:	7019      	strb	r1, [r3, #0]
 80087d0:	4608      	mov	r0, r1
 80087d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <__sfputs_r>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	4606      	mov	r6, r0
 80087dc:	460f      	mov	r7, r1
 80087de:	4614      	mov	r4, r2
 80087e0:	18d5      	adds	r5, r2, r3
 80087e2:	42ac      	cmp	r4, r5
 80087e4:	d101      	bne.n	80087ea <__sfputs_r+0x12>
 80087e6:	2000      	movs	r0, #0
 80087e8:	e007      	b.n	80087fa <__sfputs_r+0x22>
 80087ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ee:	463a      	mov	r2, r7
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7ff ffda 	bl	80087aa <__sfputc_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d1f3      	bne.n	80087e2 <__sfputs_r+0xa>
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087fc <_vfiprintf_r>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	460d      	mov	r5, r1
 8008802:	b09d      	sub	sp, #116	@ 0x74
 8008804:	4614      	mov	r4, r2
 8008806:	4698      	mov	r8, r3
 8008808:	4606      	mov	r6, r0
 800880a:	b118      	cbz	r0, 8008814 <_vfiprintf_r+0x18>
 800880c:	6a03      	ldr	r3, [r0, #32]
 800880e:	b90b      	cbnz	r3, 8008814 <_vfiprintf_r+0x18>
 8008810:	f7fc fdfa 	bl	8005408 <__sinit>
 8008814:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008816:	07d9      	lsls	r1, r3, #31
 8008818:	d405      	bmi.n	8008826 <_vfiprintf_r+0x2a>
 800881a:	89ab      	ldrh	r3, [r5, #12]
 800881c:	059a      	lsls	r2, r3, #22
 800881e:	d402      	bmi.n	8008826 <_vfiprintf_r+0x2a>
 8008820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008822:	f7fc ff08 	bl	8005636 <__retarget_lock_acquire_recursive>
 8008826:	89ab      	ldrh	r3, [r5, #12]
 8008828:	071b      	lsls	r3, r3, #28
 800882a:	d501      	bpl.n	8008830 <_vfiprintf_r+0x34>
 800882c:	692b      	ldr	r3, [r5, #16]
 800882e:	b99b      	cbnz	r3, 8008858 <_vfiprintf_r+0x5c>
 8008830:	4629      	mov	r1, r5
 8008832:	4630      	mov	r0, r6
 8008834:	f000 f938 	bl	8008aa8 <__swsetup_r>
 8008838:	b170      	cbz	r0, 8008858 <_vfiprintf_r+0x5c>
 800883a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800883c:	07dc      	lsls	r4, r3, #31
 800883e:	d504      	bpl.n	800884a <_vfiprintf_r+0x4e>
 8008840:	f04f 30ff 	mov.w	r0, #4294967295
 8008844:	b01d      	add	sp, #116	@ 0x74
 8008846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884a:	89ab      	ldrh	r3, [r5, #12]
 800884c:	0598      	lsls	r0, r3, #22
 800884e:	d4f7      	bmi.n	8008840 <_vfiprintf_r+0x44>
 8008850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008852:	f7fc fef1 	bl	8005638 <__retarget_lock_release_recursive>
 8008856:	e7f3      	b.n	8008840 <_vfiprintf_r+0x44>
 8008858:	2300      	movs	r3, #0
 800885a:	9309      	str	r3, [sp, #36]	@ 0x24
 800885c:	2320      	movs	r3, #32
 800885e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008862:	f8cd 800c 	str.w	r8, [sp, #12]
 8008866:	2330      	movs	r3, #48	@ 0x30
 8008868:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a18 <_vfiprintf_r+0x21c>
 800886c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008870:	f04f 0901 	mov.w	r9, #1
 8008874:	4623      	mov	r3, r4
 8008876:	469a      	mov	sl, r3
 8008878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800887c:	b10a      	cbz	r2, 8008882 <_vfiprintf_r+0x86>
 800887e:	2a25      	cmp	r2, #37	@ 0x25
 8008880:	d1f9      	bne.n	8008876 <_vfiprintf_r+0x7a>
 8008882:	ebba 0b04 	subs.w	fp, sl, r4
 8008886:	d00b      	beq.n	80088a0 <_vfiprintf_r+0xa4>
 8008888:	465b      	mov	r3, fp
 800888a:	4622      	mov	r2, r4
 800888c:	4629      	mov	r1, r5
 800888e:	4630      	mov	r0, r6
 8008890:	f7ff ffa2 	bl	80087d8 <__sfputs_r>
 8008894:	3001      	adds	r0, #1
 8008896:	f000 80a7 	beq.w	80089e8 <_vfiprintf_r+0x1ec>
 800889a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800889c:	445a      	add	r2, fp
 800889e:	9209      	str	r2, [sp, #36]	@ 0x24
 80088a0:	f89a 3000 	ldrb.w	r3, [sl]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 809f 	beq.w	80089e8 <_vfiprintf_r+0x1ec>
 80088aa:	2300      	movs	r3, #0
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088b4:	f10a 0a01 	add.w	sl, sl, #1
 80088b8:	9304      	str	r3, [sp, #16]
 80088ba:	9307      	str	r3, [sp, #28]
 80088bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80088c2:	4654      	mov	r4, sl
 80088c4:	2205      	movs	r2, #5
 80088c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ca:	4853      	ldr	r0, [pc, #332]	@ (8008a18 <_vfiprintf_r+0x21c>)
 80088cc:	f7f7 fca0 	bl	8000210 <memchr>
 80088d0:	9a04      	ldr	r2, [sp, #16]
 80088d2:	b9d8      	cbnz	r0, 800890c <_vfiprintf_r+0x110>
 80088d4:	06d1      	lsls	r1, r2, #27
 80088d6:	bf44      	itt	mi
 80088d8:	2320      	movmi	r3, #32
 80088da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088de:	0713      	lsls	r3, r2, #28
 80088e0:	bf44      	itt	mi
 80088e2:	232b      	movmi	r3, #43	@ 0x2b
 80088e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088e8:	f89a 3000 	ldrb.w	r3, [sl]
 80088ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ee:	d015      	beq.n	800891c <_vfiprintf_r+0x120>
 80088f0:	9a07      	ldr	r2, [sp, #28]
 80088f2:	4654      	mov	r4, sl
 80088f4:	2000      	movs	r0, #0
 80088f6:	f04f 0c0a 	mov.w	ip, #10
 80088fa:	4621      	mov	r1, r4
 80088fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008900:	3b30      	subs	r3, #48	@ 0x30
 8008902:	2b09      	cmp	r3, #9
 8008904:	d94b      	bls.n	800899e <_vfiprintf_r+0x1a2>
 8008906:	b1b0      	cbz	r0, 8008936 <_vfiprintf_r+0x13a>
 8008908:	9207      	str	r2, [sp, #28]
 800890a:	e014      	b.n	8008936 <_vfiprintf_r+0x13a>
 800890c:	eba0 0308 	sub.w	r3, r0, r8
 8008910:	fa09 f303 	lsl.w	r3, r9, r3
 8008914:	4313      	orrs	r3, r2
 8008916:	9304      	str	r3, [sp, #16]
 8008918:	46a2      	mov	sl, r4
 800891a:	e7d2      	b.n	80088c2 <_vfiprintf_r+0xc6>
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	1d19      	adds	r1, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	9103      	str	r1, [sp, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	bfbb      	ittet	lt
 8008928:	425b      	neglt	r3, r3
 800892a:	f042 0202 	orrlt.w	r2, r2, #2
 800892e:	9307      	strge	r3, [sp, #28]
 8008930:	9307      	strlt	r3, [sp, #28]
 8008932:	bfb8      	it	lt
 8008934:	9204      	strlt	r2, [sp, #16]
 8008936:	7823      	ldrb	r3, [r4, #0]
 8008938:	2b2e      	cmp	r3, #46	@ 0x2e
 800893a:	d10a      	bne.n	8008952 <_vfiprintf_r+0x156>
 800893c:	7863      	ldrb	r3, [r4, #1]
 800893e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008940:	d132      	bne.n	80089a8 <_vfiprintf_r+0x1ac>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	1d1a      	adds	r2, r3, #4
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	9203      	str	r2, [sp, #12]
 800894a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800894e:	3402      	adds	r4, #2
 8008950:	9305      	str	r3, [sp, #20]
 8008952:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a28 <_vfiprintf_r+0x22c>
 8008956:	7821      	ldrb	r1, [r4, #0]
 8008958:	2203      	movs	r2, #3
 800895a:	4650      	mov	r0, sl
 800895c:	f7f7 fc58 	bl	8000210 <memchr>
 8008960:	b138      	cbz	r0, 8008972 <_vfiprintf_r+0x176>
 8008962:	9b04      	ldr	r3, [sp, #16]
 8008964:	eba0 000a 	sub.w	r0, r0, sl
 8008968:	2240      	movs	r2, #64	@ 0x40
 800896a:	4082      	lsls	r2, r0
 800896c:	4313      	orrs	r3, r2
 800896e:	3401      	adds	r4, #1
 8008970:	9304      	str	r3, [sp, #16]
 8008972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008976:	4829      	ldr	r0, [pc, #164]	@ (8008a1c <_vfiprintf_r+0x220>)
 8008978:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800897c:	2206      	movs	r2, #6
 800897e:	f7f7 fc47 	bl	8000210 <memchr>
 8008982:	2800      	cmp	r0, #0
 8008984:	d03f      	beq.n	8008a06 <_vfiprintf_r+0x20a>
 8008986:	4b26      	ldr	r3, [pc, #152]	@ (8008a20 <_vfiprintf_r+0x224>)
 8008988:	bb1b      	cbnz	r3, 80089d2 <_vfiprintf_r+0x1d6>
 800898a:	9b03      	ldr	r3, [sp, #12]
 800898c:	3307      	adds	r3, #7
 800898e:	f023 0307 	bic.w	r3, r3, #7
 8008992:	3308      	adds	r3, #8
 8008994:	9303      	str	r3, [sp, #12]
 8008996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008998:	443b      	add	r3, r7
 800899a:	9309      	str	r3, [sp, #36]	@ 0x24
 800899c:	e76a      	b.n	8008874 <_vfiprintf_r+0x78>
 800899e:	fb0c 3202 	mla	r2, ip, r2, r3
 80089a2:	460c      	mov	r4, r1
 80089a4:	2001      	movs	r0, #1
 80089a6:	e7a8      	b.n	80088fa <_vfiprintf_r+0xfe>
 80089a8:	2300      	movs	r3, #0
 80089aa:	3401      	adds	r4, #1
 80089ac:	9305      	str	r3, [sp, #20]
 80089ae:	4619      	mov	r1, r3
 80089b0:	f04f 0c0a 	mov.w	ip, #10
 80089b4:	4620      	mov	r0, r4
 80089b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ba:	3a30      	subs	r2, #48	@ 0x30
 80089bc:	2a09      	cmp	r2, #9
 80089be:	d903      	bls.n	80089c8 <_vfiprintf_r+0x1cc>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d0c6      	beq.n	8008952 <_vfiprintf_r+0x156>
 80089c4:	9105      	str	r1, [sp, #20]
 80089c6:	e7c4      	b.n	8008952 <_vfiprintf_r+0x156>
 80089c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80089cc:	4604      	mov	r4, r0
 80089ce:	2301      	movs	r3, #1
 80089d0:	e7f0      	b.n	80089b4 <_vfiprintf_r+0x1b8>
 80089d2:	ab03      	add	r3, sp, #12
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	462a      	mov	r2, r5
 80089d8:	4b12      	ldr	r3, [pc, #72]	@ (8008a24 <_vfiprintf_r+0x228>)
 80089da:	a904      	add	r1, sp, #16
 80089dc:	4630      	mov	r0, r6
 80089de:	f7fb febb 	bl	8004758 <_printf_float>
 80089e2:	4607      	mov	r7, r0
 80089e4:	1c78      	adds	r0, r7, #1
 80089e6:	d1d6      	bne.n	8008996 <_vfiprintf_r+0x19a>
 80089e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089ea:	07d9      	lsls	r1, r3, #31
 80089ec:	d405      	bmi.n	80089fa <_vfiprintf_r+0x1fe>
 80089ee:	89ab      	ldrh	r3, [r5, #12]
 80089f0:	059a      	lsls	r2, r3, #22
 80089f2:	d402      	bmi.n	80089fa <_vfiprintf_r+0x1fe>
 80089f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089f6:	f7fc fe1f 	bl	8005638 <__retarget_lock_release_recursive>
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	065b      	lsls	r3, r3, #25
 80089fe:	f53f af1f 	bmi.w	8008840 <_vfiprintf_r+0x44>
 8008a02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a04:	e71e      	b.n	8008844 <_vfiprintf_r+0x48>
 8008a06:	ab03      	add	r3, sp, #12
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	462a      	mov	r2, r5
 8008a0c:	4b05      	ldr	r3, [pc, #20]	@ (8008a24 <_vfiprintf_r+0x228>)
 8008a0e:	a904      	add	r1, sp, #16
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7fc f939 	bl	8004c88 <_printf_i>
 8008a16:	e7e4      	b.n	80089e2 <_vfiprintf_r+0x1e6>
 8008a18:	0800ab51 	.word	0x0800ab51
 8008a1c:	0800ab5b 	.word	0x0800ab5b
 8008a20:	08004759 	.word	0x08004759
 8008a24:	080087d9 	.word	0x080087d9
 8008a28:	0800ab57 	.word	0x0800ab57

08008a2c <__swbuf_r>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	460e      	mov	r6, r1
 8008a30:	4614      	mov	r4, r2
 8008a32:	4605      	mov	r5, r0
 8008a34:	b118      	cbz	r0, 8008a3e <__swbuf_r+0x12>
 8008a36:	6a03      	ldr	r3, [r0, #32]
 8008a38:	b90b      	cbnz	r3, 8008a3e <__swbuf_r+0x12>
 8008a3a:	f7fc fce5 	bl	8005408 <__sinit>
 8008a3e:	69a3      	ldr	r3, [r4, #24]
 8008a40:	60a3      	str	r3, [r4, #8]
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	071a      	lsls	r2, r3, #28
 8008a46:	d501      	bpl.n	8008a4c <__swbuf_r+0x20>
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	b943      	cbnz	r3, 8008a5e <__swbuf_r+0x32>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 f82a 	bl	8008aa8 <__swsetup_r>
 8008a54:	b118      	cbz	r0, 8008a5e <__swbuf_r+0x32>
 8008a56:	f04f 37ff 	mov.w	r7, #4294967295
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	6922      	ldr	r2, [r4, #16]
 8008a62:	1a98      	subs	r0, r3, r2
 8008a64:	6963      	ldr	r3, [r4, #20]
 8008a66:	b2f6      	uxtb	r6, r6
 8008a68:	4283      	cmp	r3, r0
 8008a6a:	4637      	mov	r7, r6
 8008a6c:	dc05      	bgt.n	8008a7a <__swbuf_r+0x4e>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	f7ff fa47 	bl	8007f04 <_fflush_r>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d1ed      	bne.n	8008a56 <__swbuf_r+0x2a>
 8008a7a:	68a3      	ldr	r3, [r4, #8]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	60a3      	str	r3, [r4, #8]
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	6022      	str	r2, [r4, #0]
 8008a86:	701e      	strb	r6, [r3, #0]
 8008a88:	6962      	ldr	r2, [r4, #20]
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d004      	beq.n	8008a9a <__swbuf_r+0x6e>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	07db      	lsls	r3, r3, #31
 8008a94:	d5e1      	bpl.n	8008a5a <__swbuf_r+0x2e>
 8008a96:	2e0a      	cmp	r6, #10
 8008a98:	d1df      	bne.n	8008a5a <__swbuf_r+0x2e>
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f7ff fa31 	bl	8007f04 <_fflush_r>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d0d9      	beq.n	8008a5a <__swbuf_r+0x2e>
 8008aa6:	e7d6      	b.n	8008a56 <__swbuf_r+0x2a>

08008aa8 <__swsetup_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4b29      	ldr	r3, [pc, #164]	@ (8008b50 <__swsetup_r+0xa8>)
 8008aac:	4605      	mov	r5, r0
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	b118      	cbz	r0, 8008abc <__swsetup_r+0x14>
 8008ab4:	6a03      	ldr	r3, [r0, #32]
 8008ab6:	b90b      	cbnz	r3, 8008abc <__swsetup_r+0x14>
 8008ab8:	f7fc fca6 	bl	8005408 <__sinit>
 8008abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac0:	0719      	lsls	r1, r3, #28
 8008ac2:	d422      	bmi.n	8008b0a <__swsetup_r+0x62>
 8008ac4:	06da      	lsls	r2, r3, #27
 8008ac6:	d407      	bmi.n	8008ad8 <__swsetup_r+0x30>
 8008ac8:	2209      	movs	r2, #9
 8008aca:	602a      	str	r2, [r5, #0]
 8008acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad6:	e033      	b.n	8008b40 <__swsetup_r+0x98>
 8008ad8:	0758      	lsls	r0, r3, #29
 8008ada:	d512      	bpl.n	8008b02 <__swsetup_r+0x5a>
 8008adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ade:	b141      	cbz	r1, 8008af2 <__swsetup_r+0x4a>
 8008ae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ae4:	4299      	cmp	r1, r3
 8008ae6:	d002      	beq.n	8008aee <__swsetup_r+0x46>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f7fd fbf9 	bl	80062e0 <_free_r>
 8008aee:	2300      	movs	r3, #0
 8008af0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	2300      	movs	r3, #0
 8008afc:	6063      	str	r3, [r4, #4]
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f043 0308 	orr.w	r3, r3, #8
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	6923      	ldr	r3, [r4, #16]
 8008b0c:	b94b      	cbnz	r3, 8008b22 <__swsetup_r+0x7a>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b18:	d003      	beq.n	8008b22 <__swsetup_r+0x7a>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f000 f883 	bl	8008c28 <__smakebuf_r>
 8008b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b26:	f013 0201 	ands.w	r2, r3, #1
 8008b2a:	d00a      	beq.n	8008b42 <__swsetup_r+0x9a>
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	60a2      	str	r2, [r4, #8]
 8008b30:	6962      	ldr	r2, [r4, #20]
 8008b32:	4252      	negs	r2, r2
 8008b34:	61a2      	str	r2, [r4, #24]
 8008b36:	6922      	ldr	r2, [r4, #16]
 8008b38:	b942      	cbnz	r2, 8008b4c <__swsetup_r+0xa4>
 8008b3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b3e:	d1c5      	bne.n	8008acc <__swsetup_r+0x24>
 8008b40:	bd38      	pop	{r3, r4, r5, pc}
 8008b42:	0799      	lsls	r1, r3, #30
 8008b44:	bf58      	it	pl
 8008b46:	6962      	ldrpl	r2, [r4, #20]
 8008b48:	60a2      	str	r2, [r4, #8]
 8008b4a:	e7f4      	b.n	8008b36 <__swsetup_r+0x8e>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	e7f7      	b.n	8008b40 <__swsetup_r+0x98>
 8008b50:	2000001c 	.word	0x2000001c

08008b54 <_raise_r>:
 8008b54:	291f      	cmp	r1, #31
 8008b56:	b538      	push	{r3, r4, r5, lr}
 8008b58:	4605      	mov	r5, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	d904      	bls.n	8008b68 <_raise_r+0x14>
 8008b5e:	2316      	movs	r3, #22
 8008b60:	6003      	str	r3, [r0, #0]
 8008b62:	f04f 30ff 	mov.w	r0, #4294967295
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b6a:	b112      	cbz	r2, 8008b72 <_raise_r+0x1e>
 8008b6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b70:	b94b      	cbnz	r3, 8008b86 <_raise_r+0x32>
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 f830 	bl	8008bd8 <_getpid_r>
 8008b78:	4622      	mov	r2, r4
 8008b7a:	4601      	mov	r1, r0
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b82:	f000 b817 	b.w	8008bb4 <_kill_r>
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d00a      	beq.n	8008ba0 <_raise_r+0x4c>
 8008b8a:	1c59      	adds	r1, r3, #1
 8008b8c:	d103      	bne.n	8008b96 <_raise_r+0x42>
 8008b8e:	2316      	movs	r3, #22
 8008b90:	6003      	str	r3, [r0, #0]
 8008b92:	2001      	movs	r0, #1
 8008b94:	e7e7      	b.n	8008b66 <_raise_r+0x12>
 8008b96:	2100      	movs	r1, #0
 8008b98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4798      	blx	r3
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	e7e0      	b.n	8008b66 <_raise_r+0x12>

08008ba4 <raise>:
 8008ba4:	4b02      	ldr	r3, [pc, #8]	@ (8008bb0 <raise+0xc>)
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	f7ff bfd3 	b.w	8008b54 <_raise_r>
 8008bae:	bf00      	nop
 8008bb0:	2000001c 	.word	0x2000001c

08008bb4 <_kill_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d07      	ldr	r5, [pc, #28]	@ (8008bd4 <_kill_r+0x20>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	602b      	str	r3, [r5, #0]
 8008bc2:	f7f9 fc49 	bl	8002458 <_kill>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	d102      	bne.n	8008bd0 <_kill_r+0x1c>
 8008bca:	682b      	ldr	r3, [r5, #0]
 8008bcc:	b103      	cbz	r3, 8008bd0 <_kill_r+0x1c>
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	bd38      	pop	{r3, r4, r5, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000410 	.word	0x20000410

08008bd8 <_getpid_r>:
 8008bd8:	f7f9 bc36 	b.w	8002448 <_getpid>

08008bdc <__swhatbuf_r>:
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	460c      	mov	r4, r1
 8008be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be4:	2900      	cmp	r1, #0
 8008be6:	b096      	sub	sp, #88	@ 0x58
 8008be8:	4615      	mov	r5, r2
 8008bea:	461e      	mov	r6, r3
 8008bec:	da0d      	bge.n	8008c0a <__swhatbuf_r+0x2e>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bf4:	f04f 0100 	mov.w	r1, #0
 8008bf8:	bf14      	ite	ne
 8008bfa:	2340      	movne	r3, #64	@ 0x40
 8008bfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c00:	2000      	movs	r0, #0
 8008c02:	6031      	str	r1, [r6, #0]
 8008c04:	602b      	str	r3, [r5, #0]
 8008c06:	b016      	add	sp, #88	@ 0x58
 8008c08:	bd70      	pop	{r4, r5, r6, pc}
 8008c0a:	466a      	mov	r2, sp
 8008c0c:	f000 f848 	bl	8008ca0 <_fstat_r>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	dbec      	blt.n	8008bee <__swhatbuf_r+0x12>
 8008c14:	9901      	ldr	r1, [sp, #4]
 8008c16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c1e:	4259      	negs	r1, r3
 8008c20:	4159      	adcs	r1, r3
 8008c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c26:	e7eb      	b.n	8008c00 <__swhatbuf_r+0x24>

08008c28 <__smakebuf_r>:
 8008c28:	898b      	ldrh	r3, [r1, #12]
 8008c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c2c:	079d      	lsls	r5, r3, #30
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460c      	mov	r4, r1
 8008c32:	d507      	bpl.n	8008c44 <__smakebuf_r+0x1c>
 8008c34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	6123      	str	r3, [r4, #16]
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	6163      	str	r3, [r4, #20]
 8008c40:	b003      	add	sp, #12
 8008c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c44:	ab01      	add	r3, sp, #4
 8008c46:	466a      	mov	r2, sp
 8008c48:	f7ff ffc8 	bl	8008bdc <__swhatbuf_r>
 8008c4c:	9f00      	ldr	r7, [sp, #0]
 8008c4e:	4605      	mov	r5, r0
 8008c50:	4639      	mov	r1, r7
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7fd fbb8 	bl	80063c8 <_malloc_r>
 8008c58:	b948      	cbnz	r0, 8008c6e <__smakebuf_r+0x46>
 8008c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c5e:	059a      	lsls	r2, r3, #22
 8008c60:	d4ee      	bmi.n	8008c40 <__smakebuf_r+0x18>
 8008c62:	f023 0303 	bic.w	r3, r3, #3
 8008c66:	f043 0302 	orr.w	r3, r3, #2
 8008c6a:	81a3      	strh	r3, [r4, #12]
 8008c6c:	e7e2      	b.n	8008c34 <__smakebuf_r+0xc>
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	6020      	str	r0, [r4, #0]
 8008c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c76:	81a3      	strh	r3, [r4, #12]
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c7e:	b15b      	cbz	r3, 8008c98 <__smakebuf_r+0x70>
 8008c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c84:	4630      	mov	r0, r6
 8008c86:	f000 f81d 	bl	8008cc4 <_isatty_r>
 8008c8a:	b128      	cbz	r0, 8008c98 <__smakebuf_r+0x70>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f023 0303 	bic.w	r3, r3, #3
 8008c92:	f043 0301 	orr.w	r3, r3, #1
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	431d      	orrs	r5, r3
 8008c9c:	81a5      	strh	r5, [r4, #12]
 8008c9e:	e7cf      	b.n	8008c40 <__smakebuf_r+0x18>

08008ca0 <_fstat_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4d07      	ldr	r5, [pc, #28]	@ (8008cc0 <_fstat_r+0x20>)
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	4608      	mov	r0, r1
 8008caa:	4611      	mov	r1, r2
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	f7f9 fc33 	bl	8002518 <_fstat>
 8008cb2:	1c43      	adds	r3, r0, #1
 8008cb4:	d102      	bne.n	8008cbc <_fstat_r+0x1c>
 8008cb6:	682b      	ldr	r3, [r5, #0]
 8008cb8:	b103      	cbz	r3, 8008cbc <_fstat_r+0x1c>
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	bd38      	pop	{r3, r4, r5, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000410 	.word	0x20000410

08008cc4 <_isatty_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4d06      	ldr	r5, [pc, #24]	@ (8008ce0 <_isatty_r+0x1c>)
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4608      	mov	r0, r1
 8008cce:	602b      	str	r3, [r5, #0]
 8008cd0:	f7f9 fc32 	bl	8002538 <_isatty>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d102      	bne.n	8008cde <_isatty_r+0x1a>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	b103      	cbz	r3, 8008cde <_isatty_r+0x1a>
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
 8008ce0:	20000410 	.word	0x20000410

08008ce4 <_init>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr

08008cf0 <_fini>:
 8008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf2:	bf00      	nop
 8008cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf6:	bc08      	pop	{r3}
 8008cf8:	469e      	mov	lr, r3
 8008cfa:	4770      	bx	lr
