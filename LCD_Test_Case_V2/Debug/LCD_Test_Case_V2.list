
LCD_Test_Case_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000878c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f04  08008960  08008960  00009960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a864  0800a864  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a864  0800a864  0000b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a86c  0800a86c  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a86c  0800a86c  0000b86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a870  0800a870  0000b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a874  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200001d8  0800aa4c  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800aa4c  0000c400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c9a  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebe  00000000  00000000  00014ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00016d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000692  00000000  00000000  00017648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002233c  00000000  00000000  00017cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b986  00000000  00000000  0003a016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca0a6  00000000  00000000  0004599c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fa42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  0010fa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00113278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008944 	.word	0x08008944

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008944 	.word	0x08008944

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <ILI9341_DrawHollowRectangleCoord>:
		}
	}
}

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	4604      	mov	r4, r0
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	4623      	mov	r3, r4
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	4603      	mov	r3, r0
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]
 800107a:	4613      	mov	r3, r2
 800107c:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8001094:	887a      	ldrh	r2, [r7, #2]
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a2:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 80010a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d501      	bpl.n	80010b8 <ILI9341_DrawHollowRectangleCoord+0x58>
 80010b4:	2301      	movs	r3, #1
 80010b6:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 80010be:	883a      	ldrh	r2, [r7, #0]
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010cc:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 80010d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	d501      	bpl.n	80010e2 <ILI9341_DrawHollowRectangleCoord+0x82>
 80010de:	2301      	movs	r3, #1
 80010e0:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 80010e2:	7cfb      	ldrb	r3, [r7, #19]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d104      	bne.n	80010f2 <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 80010e8:	887a      	ldrh	r2, [r7, #2]
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	82fb      	strh	r3, [r7, #22]
 80010f0:	e003      	b.n	80010fa <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 80010f2:	88fa      	ldrh	r2, [r7, #6]
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 80010fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010fc:	8afa      	ldrh	r2, [r7, #22]
 80010fe:	88b9      	ldrh	r1, [r7, #4]
 8001100:	88f8      	ldrh	r0, [r7, #6]
 8001102:	f000 fcdf 	bl	8001ac4 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 8001106:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001108:	8afa      	ldrh	r2, [r7, #22]
 800110a:	8839      	ldrh	r1, [r7, #0]
 800110c:	88f8      	ldrh	r0, [r7, #6]
 800110e:	f000 fcd9 	bl	8001ac4 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 8001112:	7cbb      	ldrb	r3, [r7, #18]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d104      	bne.n	8001122 <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 8001118:	883a      	ldrh	r2, [r7, #0]
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	82bb      	strh	r3, [r7, #20]
 8001120:	e003      	b.n	800112a <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 8001122:	88ba      	ldrh	r2, [r7, #4]
 8001124:	883b      	ldrh	r3, [r7, #0]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 800112a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800112c:	8aba      	ldrh	r2, [r7, #20]
 800112e:	88b9      	ldrh	r1, [r7, #4]
 8001130:	88f8      	ldrh	r0, [r7, #6]
 8001132:	f000 fd0b 	bl	8001b4c <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 8001136:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001138:	8aba      	ldrh	r2, [r7, #20]
 800113a:	88b9      	ldrh	r1, [r7, #4]
 800113c:	8878      	ldrh	r0, [r7, #2]
 800113e:	f000 fd05 	bl	8001b4c <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 8001142:	8afb      	ldrh	r3, [r7, #22]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <ILI9341_DrawHollowRectangleCoord+0xee>
 8001148:	8abb      	ldrh	r3, [r7, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 800114e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001150:	8839      	ldrh	r1, [r7, #0]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fbf3 	bl	8001940 <ILI9341_DrawPixel>
	}
}
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}

08001162 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001162:	b590      	push	{r4, r7, lr}
 8001164:	b08d      	sub	sp, #52	@ 0x34
 8001166:	af02      	add	r7, sp, #8
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	460b      	mov	r3, r1
 8001174:	81bb      	strh	r3, [r7, #12]
 8001176:	4613      	mov	r3, r2
 8001178:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b1e      	cmp	r3, #30
 800117e:	d964      	bls.n	800124a <ILI9341_DrawChar+0xe8>
 8001180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db60      	blt.n	800124a <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3301      	adds	r3, #1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	3302      	adds	r3, #2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	3303      	adds	r3, #3
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	3b20      	subs	r3, #32
 80011aa:	7ffa      	ldrb	r2, [r7, #31]
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	3304      	adds	r3, #4
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	4413      	add	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80011b8:	7fbb      	ldrb	r3, [r7, #30]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	7f7b      	ldrb	r3, [r7, #29]
 80011be:	b29c      	uxth	r4, r3
 80011c0:	88f9      	ldrh	r1, [r7, #6]
 80011c2:	89b8      	ldrh	r0, [r7, #12]
 80011c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4623      	mov	r3, r4
 80011ca:	f000 fc1f 	bl	8001a0c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011d2:	e035      	b.n	8001240 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	e02b      	b.n	8001232 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	6a3a      	ldr	r2, [r7, #32]
 80011de:	fb03 f202 	mul.w	r2, r3, r2
 80011e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e4:	10db      	asrs	r3, r3, #3
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	4413      	add	r3, r2
 80011ec:	3301      	adds	r3, #1
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	2201      	movs	r2, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001204:	7dfa      	ldrb	r2, [r7, #23]
 8001206:	7dbb      	ldrb	r3, [r7, #22]
 8001208:	4013      	ands	r3, r2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00d      	beq.n	800122c <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	b29a      	uxth	r2, r3
 8001214:	89bb      	ldrh	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	b298      	uxth	r0, r3
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	b29a      	uxth	r2, r3
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	4413      	add	r3, r2
 8001222:	b29b      	uxth	r3, r3
 8001224:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001226:	4619      	mov	r1, r3
 8001228:	f000 fb8a 	bl	8001940 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	3301      	adds	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	7fbb      	ldrb	r3, [r7, #30]
 8001234:	6a3a      	ldr	r2, [r7, #32]
 8001236:	429a      	cmp	r2, r3
 8001238:	dbcf      	blt.n	80011da <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	3301      	adds	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001240:	7f7b      	ldrb	r3, [r7, #29]
 8001242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001244:	429a      	cmp	r2, r3
 8001246:	dbc5      	blt.n	80011d4 <ILI9341_DrawChar+0x72>
 8001248:	e000      	b.n	800124c <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 800124a:	bf00      	nop
			}
		}
	}
}
 800124c:	372c      	adds	r7, #44	@ 0x2c
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}

08001252 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b08a      	sub	sp, #40	@ 0x28
 8001256:	af02      	add	r7, sp, #8
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	4611      	mov	r1, r2
 800125e:	461a      	mov	r2, r3
 8001260:	460b      	mov	r3, r1
 8001262:	80fb      	strh	r3, [r7, #6]
 8001264:	4613      	mov	r3, r2
 8001266:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3301      	adds	r3, #1
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8001276:	e02d      	b.n	80012d4 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	7818      	ldrb	r0, [r3, #0]
 800127c:	88b9      	ldrh	r1, [r7, #4]
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	460b      	mov	r3, r1
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	f7ff ff69 	bl	8001162 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	3b20      	subs	r3, #32
 8001296:	7ffa      	ldrb	r2, [r7, #31]
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	3304      	adds	r3, #4
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	4413      	add	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	1c9a      	adds	r2, r3, #2
 80012ae:	7fbb      	ldrb	r3, [r7, #30]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	da07      	bge.n	80012c4 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3302      	adds	r3, #2
 80012c0:	80fb      	strh	r3, [r7, #6]
 80012c2:	e004      	b.n	80012ce <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 80012c4:	7fbb      	ldrb	r3, [r7, #30]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	4413      	add	r3, r2
 80012cc:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
	while (*str)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1cd      	bne.n	8001278 <ILI9341_DrawText+0x26>
	}
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a06      	ldr	r2, [pc, #24]	@ (800130c <HAL_SPI_TxCpltCallback+0x24>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d105      	bne.n	8001304 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012fe:	4804      	ldr	r0, [pc, #16]	@ (8001310 <HAL_SPI_TxCpltCallback+0x28>)
 8001300:	f001 fe6c 	bl	8002fdc <HAL_GPIO_WritePin>
  }
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200001f4 	.word	0x200001f4
 8001310:	40020400 	.word	0x40020400

08001314 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800131e:	bf00      	nop
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <ILI9341_SPI_Tx+0x30>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b02      	cmp	r3, #2
 800132c:	d1f8      	bne.n	8001320 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	4803      	ldr	r0, [pc, #12]	@ (8001344 <ILI9341_SPI_Tx+0x30>)
 8001336:	f002 fd67 	bl	8003e08 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200001f4 	.word	0x200001f4

08001348 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001354:	bf00      	nop
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <ILI9341_SPI_TxBuffer+0x30>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b02      	cmp	r3, #2
 8001362:	d1f8      	bne.n	8001356 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	461a      	mov	r2, r3
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4803      	ldr	r0, [pc, #12]	@ (8001378 <ILI9341_SPI_TxBuffer+0x30>)
 800136c:	f002 fd4c 	bl	8003e08 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200001f4 	.word	0x200001f4

0800137c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001386:	2200      	movs	r2, #0
 8001388:	2101      	movs	r1, #1
 800138a:	4808      	ldr	r0, [pc, #32]	@ (80013ac <ILI9341_WriteCommand+0x30>)
 800138c:	f001 fe26 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <ILI9341_WriteCommand+0x30>)
 8001398:	f001 fe20 	bl	8002fdc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffb8 	bl	8001314 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40020400 	.word	0x40020400

080013b0 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80013ba:	2201      	movs	r2, #1
 80013bc:	2101      	movs	r1, #1
 80013be:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <ILI9341_WriteData+0x30>)
 80013c0:	f001 fe0c 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <ILI9341_WriteData+0x30>)
 80013cc:	f001 fe06 	bl	8002fdc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff9e 	bl	8001314 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020400 	.word	0x40020400

080013e4 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80013f0:	2201      	movs	r2, #1
 80013f2:	2101      	movs	r1, #1
 80013f4:	4808      	ldr	r0, [pc, #32]	@ (8001418 <ILI9341_WriteBuffer+0x34>)
 80013f6:	f001 fdf1 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <ILI9341_WriteBuffer+0x34>)
 8001402:	f001 fdeb 	bl	8002fdc <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	4619      	mov	r1, r3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff9c 	bl	8001348 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020400 	.word	0x40020400

0800141c <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	4613      	mov	r3, r2
 8001438:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	b29b      	uxth	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	b29b      	uxth	r3, r3
 8001450:	b2db      	uxtb	r3, r3
 8001452:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800145a:	202a      	movs	r0, #42	@ 0x2a
 800145c:	f7ff ff8e 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2104      	movs	r1, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ffbc 	bl	80013e4 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 800146c:	88bb      	ldrh	r3, [r7, #4]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	b29b      	uxth	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 800147c:	883b      	ldrh	r3, [r7, #0]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b29b      	uxth	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001486:	883b      	ldrh	r3, [r7, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 800148c:	202b      	movs	r0, #43	@ 0x2b
 800148e:	f7ff ff75 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2104      	movs	r1, #4
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ffa3 	bl	80013e4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800149e:	202c      	movs	r0, #44	@ 0x2c
 80014a0:	f7ff ff6c 	bl	800137c <ILI9341_WriteCommand>
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd90      	pop	{r4, r7, pc}

080014ac <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80014b0:	2200      	movs	r2, #0
 80014b2:	2102      	movs	r1, #2
 80014b4:	480d      	ldr	r0, [pc, #52]	@ (80014ec <ILI9341_Reset+0x40>)
 80014b6:	f001 fd91 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f000 ff54 	bl	8002368 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014c6:	4809      	ldr	r0, [pc, #36]	@ (80014ec <ILI9341_Reset+0x40>)
 80014c8:	f001 fd88 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014cc:	200a      	movs	r0, #10
 80014ce:	f000 ff4b 	bl	8002368 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80014d2:	2201      	movs	r2, #1
 80014d4:	2102      	movs	r1, #2
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <ILI9341_Reset+0x40>)
 80014d8:	f001 fd80 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014e2:	4802      	ldr	r0, [pc, #8]	@ (80014ec <ILI9341_Reset+0x40>)
 80014e4:	f001 fd7a 	bl	8002fdc <HAL_GPIO_WritePin>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40020400 	.word	0x40020400

080014f0 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80014f4:	2201      	movs	r2, #1
 80014f6:	2102      	movs	r1, #2
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <ILI9341_Enable+0x14>)
 80014fa:	f001 fd6f 	bl	8002fdc <HAL_GPIO_WritePin>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40020400 	.word	0x40020400

08001508 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800150c:	f7ff fff0 	bl	80014f0 <ILI9341_Enable>
	ILI9341_Reset();
 8001510:	f7ff ffcc 	bl	80014ac <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff ff31 	bl	800137c <ILI9341_WriteCommand>
	HAL_Delay(10);
 800151a:	200a      	movs	r0, #10
 800151c:	f000 ff24 	bl	8002368 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001520:	20cb      	movs	r0, #203	@ 0xcb
 8001522:	f7ff ff2b 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8001526:	2039      	movs	r0, #57	@ 0x39
 8001528:	f7ff ff42 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 800152c:	202c      	movs	r0, #44	@ 0x2c
 800152e:	f7ff ff3f 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff ff3c 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001538:	2034      	movs	r0, #52	@ 0x34
 800153a:	f7ff ff39 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800153e:	2002      	movs	r0, #2
 8001540:	f7ff ff36 	bl	80013b0 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001544:	20cf      	movs	r0, #207	@ 0xcf
 8001546:	f7ff ff19 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff ff30 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001550:	20c1      	movs	r0, #193	@ 0xc1
 8001552:	f7ff ff2d 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8001556:	2030      	movs	r0, #48	@ 0x30
 8001558:	f7ff ff2a 	bl	80013b0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 800155c:	20e8      	movs	r0, #232	@ 0xe8
 800155e:	f7ff ff0d 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001562:	2085      	movs	r0, #133	@ 0x85
 8001564:	f7ff ff24 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff ff21 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800156e:	2078      	movs	r0, #120	@ 0x78
 8001570:	f7ff ff1e 	bl	80013b0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001574:	20ea      	movs	r0, #234	@ 0xea
 8001576:	f7ff ff01 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff ff18 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff ff15 	bl	80013b0 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001586:	20ed      	movs	r0, #237	@ 0xed
 8001588:	f7ff fef8 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 800158c:	2064      	movs	r0, #100	@ 0x64
 800158e:	f7ff ff0f 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001592:	2003      	movs	r0, #3
 8001594:	f7ff ff0c 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001598:	2012      	movs	r0, #18
 800159a:	f7ff ff09 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800159e:	2081      	movs	r0, #129	@ 0x81
 80015a0:	f7ff ff06 	bl	80013b0 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80015a4:	20f7      	movs	r0, #247	@ 0xf7
 80015a6:	f7ff fee9 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80015aa:	2020      	movs	r0, #32
 80015ac:	f7ff ff00 	bl	80013b0 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80015b0:	20c0      	movs	r0, #192	@ 0xc0
 80015b2:	f7ff fee3 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80015b6:	2023      	movs	r0, #35	@ 0x23
 80015b8:	f7ff fefa 	bl	80013b0 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80015bc:	20c1      	movs	r0, #193	@ 0xc1
 80015be:	f7ff fedd 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80015c2:	2010      	movs	r0, #16
 80015c4:	f7ff fef4 	bl	80013b0 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80015c8:	20c5      	movs	r0, #197	@ 0xc5
 80015ca:	f7ff fed7 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80015ce:	203e      	movs	r0, #62	@ 0x3e
 80015d0:	f7ff feee 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80015d4:	2028      	movs	r0, #40	@ 0x28
 80015d6:	f7ff feeb 	bl	80013b0 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80015da:	20c7      	movs	r0, #199	@ 0xc7
 80015dc:	f7ff fece 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80015e0:	2086      	movs	r0, #134	@ 0x86
 80015e2:	f7ff fee5 	bl	80013b0 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80015e6:	2036      	movs	r0, #54	@ 0x36
 80015e8:	f7ff fec8 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80015ec:	2048      	movs	r0, #72	@ 0x48
 80015ee:	f7ff fedf 	bl	80013b0 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80015f2:	203a      	movs	r0, #58	@ 0x3a
 80015f4:	f7ff fec2 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80015f8:	2055      	movs	r0, #85	@ 0x55
 80015fa:	f7ff fed9 	bl	80013b0 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80015fe:	20b1      	movs	r0, #177	@ 0xb1
 8001600:	f7ff febc 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fed3 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800160a:	2018      	movs	r0, #24
 800160c:	f7ff fed0 	bl	80013b0 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001610:	20b6      	movs	r0, #182	@ 0xb6
 8001612:	f7ff feb3 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8001616:	2008      	movs	r0, #8
 8001618:	f7ff feca 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 800161c:	2082      	movs	r0, #130	@ 0x82
 800161e:	f7ff fec7 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001622:	2027      	movs	r0, #39	@ 0x27
 8001624:	f7ff fec4 	bl	80013b0 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001628:	20f2      	movs	r0, #242	@ 0xf2
 800162a:	f7ff fea7 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff febe 	bl	80013b0 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001634:	2026      	movs	r0, #38	@ 0x26
 8001636:	f7ff fea1 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff feb8 	bl	80013b0 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001640:	20e0      	movs	r0, #224	@ 0xe0
 8001642:	f7ff fe9b 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8001646:	200f      	movs	r0, #15
 8001648:	f7ff feb2 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800164c:	2031      	movs	r0, #49	@ 0x31
 800164e:	f7ff feaf 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001652:	202b      	movs	r0, #43	@ 0x2b
 8001654:	f7ff feac 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001658:	200c      	movs	r0, #12
 800165a:	f7ff fea9 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800165e:	200e      	movs	r0, #14
 8001660:	f7ff fea6 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001664:	2008      	movs	r0, #8
 8001666:	f7ff fea3 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800166a:	204e      	movs	r0, #78	@ 0x4e
 800166c:	f7ff fea0 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001670:	20f1      	movs	r0, #241	@ 0xf1
 8001672:	f7ff fe9d 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001676:	2037      	movs	r0, #55	@ 0x37
 8001678:	f7ff fe9a 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800167c:	2007      	movs	r0, #7
 800167e:	f7ff fe97 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001682:	2010      	movs	r0, #16
 8001684:	f7ff fe94 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001688:	2003      	movs	r0, #3
 800168a:	f7ff fe91 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800168e:	200e      	movs	r0, #14
 8001690:	f7ff fe8e 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001694:	2009      	movs	r0, #9
 8001696:	f7ff fe8b 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff fe88 	bl	80013b0 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80016a0:	20e1      	movs	r0, #225	@ 0xe1
 80016a2:	f7ff fe6b 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fe82 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80016ac:	200e      	movs	r0, #14
 80016ae:	f7ff fe7f 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80016b2:	2014      	movs	r0, #20
 80016b4:	f7ff fe7c 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f7ff fe79 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80016be:	2011      	movs	r0, #17
 80016c0:	f7ff fe76 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80016c4:	2007      	movs	r0, #7
 80016c6:	f7ff fe73 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80016ca:	2031      	movs	r0, #49	@ 0x31
 80016cc:	f7ff fe70 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80016d0:	20c1      	movs	r0, #193	@ 0xc1
 80016d2:	f7ff fe6d 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80016d6:	2048      	movs	r0, #72	@ 0x48
 80016d8:	f7ff fe6a 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80016dc:	2008      	movs	r0, #8
 80016de:	f7ff fe67 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80016e2:	200f      	movs	r0, #15
 80016e4:	f7ff fe64 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80016e8:	200c      	movs	r0, #12
 80016ea:	f7ff fe61 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80016ee:	2031      	movs	r0, #49	@ 0x31
 80016f0:	f7ff fe5e 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80016f4:	2036      	movs	r0, #54	@ 0x36
 80016f6:	f7ff fe5b 	bl	80013b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f7ff fe58 	bl	80013b0 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001700:	2011      	movs	r0, #17
 8001702:	f7ff fe3b 	bl	800137c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8001706:	2064      	movs	r0, #100	@ 0x64
 8001708:	f000 fe2e 	bl	8002368 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 800170c:	2029      	movs	r0, #41	@ 0x29
 800170e:	f7ff fe35 	bl	800137c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f802 	bl	800171c <ILI9341_SetRotation>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8001726:	2036      	movs	r0, #54	@ 0x36
 8001728:	f7ff fe28 	bl	800137c <ILI9341_WriteCommand>
	HAL_Delay(1);
 800172c:	2001      	movs	r0, #1
 800172e:	f000 fe1b 	bl	8002368 <HAL_Delay>

	switch(rotation)
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d837      	bhi.n	80017a8 <ILI9341_SetRotation+0x8c>
 8001738:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <ILI9341_SetRotation+0x24>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001751 	.word	0x08001751
 8001744:	08001767 	.word	0x08001767
 8001748:	0800177d 	.word	0x0800177d
 800174c:	08001793 	.word	0x08001793
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001750:	2048      	movs	r0, #72	@ 0x48
 8001752:	f7ff fe2d 	bl	80013b0 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <ILI9341_SetRotation+0x98>)
 8001758:	22f0      	movs	r2, #240	@ 0xf0
 800175a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800175c:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <ILI9341_SetRotation+0x9c>)
 800175e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001762:	801a      	strh	r2, [r3, #0]
		break;
 8001764:	e021      	b.n	80017aa <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8001766:	2028      	movs	r0, #40	@ 0x28
 8001768:	f7ff fe22 	bl	80013b0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <ILI9341_SetRotation+0x98>)
 800176e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001772:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001774:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <ILI9341_SetRotation+0x9c>)
 8001776:	22f0      	movs	r2, #240	@ 0xf0
 8001778:	801a      	strh	r2, [r3, #0]
		break;
 800177a:	e016      	b.n	80017aa <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 800177c:	2088      	movs	r0, #136	@ 0x88
 800177e:	f7ff fe17 	bl	80013b0 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <ILI9341_SetRotation+0x98>)
 8001784:	22f0      	movs	r2, #240	@ 0xf0
 8001786:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <ILI9341_SetRotation+0x9c>)
 800178a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800178e:	801a      	strh	r2, [r3, #0]
		break;
 8001790:	e00b      	b.n	80017aa <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001792:	20e8      	movs	r0, #232	@ 0xe8
 8001794:	f7ff fe0c 	bl	80013b0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <ILI9341_SetRotation+0x98>)
 800179a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800179e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <ILI9341_SetRotation+0x9c>)
 80017a2:	22f0      	movs	r2, #240	@ 0xf0
 80017a4:	801a      	strh	r2, [r3, #0]
		break;
 80017a6:	e000      	b.n	80017aa <ILI9341_SetRotation+0x8e>
	default:
		break;
 80017a8:	bf00      	nop
	}
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000002 	.word	0x20000002
 80017b8:	20000000 	.word	0x20000000

080017bc <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80017bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017c0:	b08d      	sub	sp, #52	@ 0x34
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	6039      	str	r1, [r7, #0]
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	466b      	mov	r3, sp
 80017cc:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017da:	d202      	bcs.n	80017e2 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e0:	e002      	b.n	80017e8 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80017e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2101      	movs	r1, #1
 80017ec:	483f      	ldr	r0, [pc, #252]	@ (80018ec <ILI9341_DrawColorBurst+0x130>)
 80017ee:	f001 fbf5 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017f8:	483c      	ldr	r0, [pc, #240]	@ (80018ec <ILI9341_DrawColorBurst+0x130>)
 80017fa:	f001 fbef 	bl	8002fdc <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	b29b      	uxth	r3, r3
 8001804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8001808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800180a:	460b      	mov	r3, r1
 800180c:	3b01      	subs	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	2300      	movs	r3, #0
 8001812:	4688      	mov	r8, r1
 8001814:	4699      	mov	r9, r3
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800182a:	2300      	movs	r3, #0
 800182c:	460c      	mov	r4, r1
 800182e:	461d      	mov	r5, r3
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	00eb      	lsls	r3, r5, #3
 800183a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800183e:	00e2      	lsls	r2, r4, #3
 8001840:	1dcb      	adds	r3, r1, #7
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	ebad 0d03 	sub.w	sp, sp, r3
 800184a:	466b      	mov	r3, sp
 800184c:	3300      	adds	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001854:	e00e      	b.n	8001874 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185a:	4413      	add	r3, r2
 800185c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001860:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	3301      	adds	r3, #1
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	b2d1      	uxtb	r1, r2
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 800186e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001870:	3302      	adds	r3, #2
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	429a      	cmp	r2, r3
 800187a:	d3ec      	bcc.n	8001856 <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001890:	fbb3 f2f2 	udiv	r2, r3, r2
 8001894:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001896:	fb01 f202 	mul.w	r2, r1, r2
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d010      	beq.n	80018c6 <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a8:	e009      	b.n	80018be <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 80018aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	230a      	movs	r3, #10
 80018b0:	69b9      	ldr	r1, [r7, #24]
 80018b2:	480f      	ldr	r0, [pc, #60]	@ (80018f0 <ILI9341_DrawColorBurst+0x134>)
 80018b4:	f002 f963 	bl	8003b7e <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	3301      	adds	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80018be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3f1      	bcc.n	80018aa <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	230a      	movs	r3, #10
 80018cc:	69b9      	ldr	r1, [r7, #24]
 80018ce:	4808      	ldr	r0, [pc, #32]	@ (80018f0 <ILI9341_DrawColorBurst+0x134>)
 80018d0:	f002 f955 	bl	8003b7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018da:	4804      	ldr	r0, [pc, #16]	@ (80018ec <ILI9341_DrawColorBurst+0x130>)
 80018dc:	f001 fb7e 	bl	8002fdc <HAL_GPIO_WritePin>
 80018e0:	46b5      	mov	sp, r6
}
 80018e2:	bf00      	nop
 80018e4:	3734      	adds	r7, #52	@ 0x34
 80018e6:	46bd      	mov	sp, r7
 80018e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018ec:	40020400 	.word	0x40020400
 80018f0:	200001f4 	.word	0x200001f4

080018f4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <ILI9341_FillScreen+0x44>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <ILI9341_FillScreen+0x48>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	2100      	movs	r1, #0
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fd85 	bl	800141c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <ILI9341_FillScreen+0x44>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <ILI9341_FillScreen+0x48>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	461a      	mov	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff46 	bl	80017bc <ILI9341_DrawColorBurst>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000002 	.word	0x20000002
 800193c:	20000000 	.word	0x20000000

08001940 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	80bb      	strh	r3, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001952:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <ILI9341_DrawPixel+0xc4>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	429a      	cmp	r2, r3
 800195c:	d24d      	bcs.n	80019fa <ILI9341_DrawPixel+0xba>
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <ILI9341_DrawPixel+0xc8>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	88ba      	ldrh	r2, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d247      	bcs.n	80019fa <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b29b      	uxth	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	753b      	strb	r3, [r7, #20]
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	757b      	strb	r3, [r7, #21]
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	3301      	adds	r3, #1
 800197e:	121b      	asrs	r3, r3, #8
 8001980:	b2db      	uxtb	r3, r3
 8001982:	75bb      	strb	r3, [r7, #22]
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800198e:	88bb      	ldrh	r3, [r7, #4]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	b29b      	uxth	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	743b      	strb	r3, [r7, #16]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	747b      	strb	r3, [r7, #17]
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	3301      	adds	r3, #1
 80019a2:	121b      	asrs	r3, r3, #8
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	74bb      	strb	r3, [r7, #18]
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	733b      	strb	r3, [r7, #12]
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80019c2:	202a      	movs	r0, #42	@ 0x2a
 80019c4:	f7ff fcda 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2104      	movs	r1, #4
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fd08 	bl	80013e4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80019d4:	202b      	movs	r0, #43	@ 0x2b
 80019d6:	f7ff fcd1 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	2104      	movs	r1, #4
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fcff 	bl	80013e4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80019e6:	202c      	movs	r0, #44	@ 0x2c
 80019e8:	f7ff fcc8 	bl	800137c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fcf6 	bl	80013e4 <ILI9341_WriteBuffer>
 80019f8:	e000      	b.n	80019fc <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019fa:	bf00      	nop
}
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000002 	.word	0x20000002
 8001a08:	20000000 	.word	0x20000000

08001a0c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4604      	mov	r4, r0
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	80fb      	strh	r3, [r7, #6]
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80bb      	strh	r3, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	807b      	strh	r3, [r7, #2]
 8001a26:	4613      	mov	r3, r2
 8001a28:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a2a:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <ILI9341_DrawRectangle+0xb0>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d23d      	bcs.n	8001ab2 <ILI9341_DrawRectangle+0xa6>
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <ILI9341_DrawRectangle+0xb4>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	88ba      	ldrh	r2, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d237      	bcs.n	8001ab2 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001a42:	88fa      	ldrh	r2, [r7, #6]
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <ILI9341_DrawRectangle+0xb0>)
 8001a4a:	8812      	ldrh	r2, [r2, #0]
 8001a4c:	b292      	uxth	r2, r2
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	dd05      	ble.n	8001a5e <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <ILI9341_DrawRectangle+0xb0>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001a5e:	88ba      	ldrh	r2, [r7, #4]
 8001a60:	883b      	ldrh	r3, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a16      	ldr	r2, [pc, #88]	@ (8001ac0 <ILI9341_DrawRectangle+0xb4>)
 8001a66:	8812      	ldrh	r2, [r2, #0]
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	dd05      	ble.n	8001a7a <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <ILI9341_DrawRectangle+0xb4>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29c      	uxth	r4, r3
 8001a86:	88ba      	ldrh	r2, [r7, #4]
 8001a88:	883b      	ldrh	r3, [r7, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	88b9      	ldrh	r1, [r7, #4]
 8001a94:	88f8      	ldrh	r0, [r7, #6]
 8001a96:	4622      	mov	r2, r4
 8001a98:	f7ff fcc0 	bl	800141c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001a9c:	883b      	ldrh	r3, [r7, #0]
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	8b3b      	ldrh	r3, [r7, #24]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fe86 	bl	80017bc <ILI9341_DrawColorBurst>
 8001ab0:	e000      	b.n	8001ab4 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001ab2:	bf00      	nop
}
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000002 	.word	0x20000002
 8001ac0:	20000000 	.word	0x20000000

08001ac4 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4604      	mov	r4, r0
 8001acc:	4608      	mov	r0, r1
 8001ace:	4611      	mov	r1, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4623      	mov	r3, r4
 8001ad4:	80fb      	strh	r3, [r7, #6]
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80bb      	strh	r3, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	807b      	strh	r3, [r7, #2]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <ILI9341_DrawHLine+0x80>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d225      	bcs.n	8001b3a <ILI9341_DrawHLine+0x76>
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <ILI9341_DrawHLine+0x84>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	88ba      	ldrh	r2, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d21f      	bcs.n	8001b3a <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001afa:	88fa      	ldrh	r2, [r7, #6]
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <ILI9341_DrawHLine+0x80>)
 8001b02:	8812      	ldrh	r2, [r2, #0]
 8001b04:	b292      	uxth	r2, r2
 8001b06:	4293      	cmp	r3, r2
 8001b08:	dd05      	ble.n	8001b16 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <ILI9341_DrawHLine+0x80>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001b16:	88fa      	ldrh	r2, [r7, #6]
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	88bb      	ldrh	r3, [r7, #4]
 8001b24:	88b9      	ldrh	r1, [r7, #4]
 8001b26:	88f8      	ldrh	r0, [r7, #6]
 8001b28:	f7ff fc78 	bl	800141c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001b2c:	887a      	ldrh	r2, [r7, #2]
 8001b2e:	883b      	ldrh	r3, [r7, #0]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fe42 	bl	80017bc <ILI9341_DrawColorBurst>
 8001b38:	e000      	b.n	8001b3c <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b3a:	bf00      	nop
}
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000002 	.word	0x20000002
 8001b48:	20000000 	.word	0x20000000

08001b4c <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <ILI9341_DrawVLine+0x80>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	88fa      	ldrh	r2, [r7, #6]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d225      	bcs.n	8001bc2 <ILI9341_DrawVLine+0x76>
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <ILI9341_DrawVLine+0x84>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	88ba      	ldrh	r2, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d21f      	bcs.n	8001bc2 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001b82:	88ba      	ldrh	r2, [r7, #4]
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a11      	ldr	r2, [pc, #68]	@ (8001bd0 <ILI9341_DrawVLine+0x84>)
 8001b8a:	8812      	ldrh	r2, [r2, #0]
 8001b8c:	b292      	uxth	r2, r2
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	dd05      	ble.n	8001b9e <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <ILI9341_DrawVLine+0x84>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001b9e:	88ba      	ldrh	r2, [r7, #4]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	88fa      	ldrh	r2, [r7, #6]
 8001bac:	88b9      	ldrh	r1, [r7, #4]
 8001bae:	88f8      	ldrh	r0, [r7, #6]
 8001bb0:	f7ff fc34 	bl	800141c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001bb4:	887a      	ldrh	r2, [r7, #2]
 8001bb6:	883b      	ldrh	r3, [r7, #0]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fdfe 	bl	80017bc <ILI9341_DrawColorBurst>
 8001bc0:	e000      	b.n	8001bc4 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001bc2:	bf00      	nop
}
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000002 	.word	0x20000002
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bda:	f000 fb53 	bl	8002284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bde:	f000 f859 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be2:	f000 f919 	bl	8001e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8001be6:	f000 f8f7 	bl	8001dd8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001bea:	f000 f8bf 	bl	8001d6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001bee:	f7ff fc8b 	bl	8001508 <ILI9341_Init>

  int rectXStart = 80;
 8001bf2:	2350      	movs	r3, #80	@ 0x50
 8001bf4:	607b      	str	r3, [r7, #4]
  int rectYStart = 80;
 8001bf6:	2350      	movs	r3, #80	@ 0x50
 8001bf8:	603b      	str	r3, [r7, #0]

    // Simple Text writing (Text, Font, X, Y, Color, BackColor)
    // Available Fonts are FONT1, FONT2, FONT3 and FONT4
    ILI9341_FillScreen(BLACK);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff fe7a 	bl	80018f4 <ILI9341_FillScreen>
    ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f7ff fd8b 	bl	800171c <ILI9341_SetRotation>
    ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, WHITE, BLACK);
 8001c06:	2300      	movs	r3, #0
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	236e      	movs	r3, #110	@ 0x6e
 8001c12:	225a      	movs	r2, #90	@ 0x5a
 8001c14:	491a      	ldr	r1, [pc, #104]	@ (8001c80 <main+0xac>)
 8001c16:	481b      	ldr	r0, [pc, #108]	@ (8001c84 <main+0xb0>)
 8001c18:	f7ff fb1b 	bl	8001252 <ILI9341_DrawText>
    HAL_Delay(3000);
 8001c1c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001c20:	f000 fba2 	bl	8002368 <HAL_Delay>

    printf("HI");
 8001c24:	4818      	ldr	r0, [pc, #96]	@ (8001c88 <main+0xb4>)
 8001c26:	f003 fa39 	bl	800509c <iprintf>
    ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
    ILI9341_DrawText("I Am Fine", FONT4, 50, 70, WHITE, BLACK);
    HAL_Delay(1000);
    ILI9341_DrawText("Thank You", FONT4, 130, 150, BLACK, WHITE);
*/
    HAL_Delay(1000);
 8001c2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c2e:	f000 fb9b 	bl	8002368 <HAL_Delay>
    ILI9341_FillScreen(BLACK);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff fe5e 	bl	80018f4 <ILI9341_FillScreen>
    ILI9341_DrawHollowRectangleCoord(50, 50, 220, 140, WHITE);
 8001c38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	238c      	movs	r3, #140	@ 0x8c
 8001c40:	22dc      	movs	r2, #220	@ 0xdc
 8001c42:	2132      	movs	r1, #50	@ 0x32
 8001c44:	2032      	movs	r0, #50	@ 0x32
 8001c46:	f7ff fa0b 	bl	8001060 <ILI9341_DrawHollowRectangleCoord>
    HAL_Delay(1000);
 8001c4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c4e:	f000 fb8b 	bl	8002368 <HAL_Delay>
    ILI9341_DrawText("Testing", FONT3, 95, 85, WHITE, BLACK);
 8001c52:	2300      	movs	r3, #0
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2355      	movs	r3, #85	@ 0x55
 8001c5e:	225f      	movs	r2, #95	@ 0x5f
 8001c60:	490a      	ldr	r1, [pc, #40]	@ (8001c8c <main+0xb8>)
 8001c62:	480b      	ldr	r0, [pc, #44]	@ (8001c90 <main+0xbc>)
 8001c64:	f7ff faf5 	bl	8001252 <ILI9341_DrawText>
    HAL_Delay(1000);
 8001c68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c6c:	f000 fb7c 	bl	8002368 <HAL_Delay>
    ILI9341_DrawPixel(160, 95, WHITE);
 8001c70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c74:	215f      	movs	r1, #95	@ 0x5f
 8001c76:	20a0      	movs	r0, #160	@ 0xa0
 8001c78:	f7ff fe62 	bl	8001940 <ILI9341_DrawPixel>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //ILI9341_DrawHollowRectangleCoord(80, 80, 310, 230, WHITE);

  while(1){
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <main+0xa8>
 8001c80:	080092dc 	.word	0x080092dc
 8001c84:	08008960 	.word	0x08008960
 8001c88:	0800896c 	.word	0x0800896c
 8001c8c:	08008978 	.word	0x08008978
 8001c90:	08008970 	.word	0x08008970

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b094      	sub	sp, #80	@ 0x50
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	2234      	movs	r2, #52	@ 0x34
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fa71 	bl	800518a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <SystemClock_Config+0xd0>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	4a28      	ldr	r2, [pc, #160]	@ (8001d64 <SystemClock_Config+0xd0>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc8:	4b26      	ldr	r3, [pc, #152]	@ (8001d64 <SystemClock_Config+0xd0>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <SystemClock_Config+0xd4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ce0:	4a21      	ldr	r2, [pc, #132]	@ (8001d68 <SystemClock_Config+0xd4>)
 8001ce2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <SystemClock_Config+0xd4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d00:	2302      	movs	r3, #2
 8001d02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001d0c:	2348      	movs	r3, #72	@ 0x48
 8001d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 fc05 	bl	8003530 <HAL_RCC_OscConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d2c:	f000 f8c6 	bl	8001ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d30:	230f      	movs	r3, #15
 8001d32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d34:	2302      	movs	r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 f95f 	bl	8003010 <HAL_RCC_ClockConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001d58:	f000 f8b0 	bl	8001ebc <Error_Handler>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3750      	adds	r7, #80	@ 0x50
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40007000 	.word	0x40007000

08001d6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d70:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001d72:	4a18      	ldr	r2, [pc, #96]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001d74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d76:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001d78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001da0:	2208      	movs	r2, #8
 8001da2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da4:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db0:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001db8:	220a      	movs	r2, #10
 8001dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dbc:	4804      	ldr	r0, [pc, #16]	@ (8001dd0 <MX_SPI1_Init+0x64>)
 8001dbe:	f001 fe55 	bl	8003a6c <HAL_SPI_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dc8:	f000 f878 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200001f4 	.word	0x200001f4
 8001dd4:	40013000 	.word	0x40013000

08001dd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <MX_DMA_Init+0x3c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a0b      	ldr	r2, [pc, #44]	@ (8001e14 <MX_DMA_Init+0x3c>)
 8001de8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <MX_DMA_Init+0x3c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	203b      	movs	r0, #59	@ 0x3b
 8001e00:	f000 fbb1 	bl	8002566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001e04:	203b      	movs	r0, #59	@ 0x3b
 8001e06:	f000 fbca 	bl	800259e <HAL_NVIC_EnableIRQ>

}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800

08001e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <MX_GPIO_Init+0x9c>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb4 <MX_GPIO_Init+0x9c>)
 8001e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <MX_GPIO_Init+0x9c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <MX_GPIO_Init+0x9c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a18      	ldr	r2, [pc, #96]	@ (8001eb4 <MX_GPIO_Init+0x9c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <MX_GPIO_Init+0x9c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <MX_GPIO_Init+0x9c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <MX_GPIO_Init+0x9c>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <MX_GPIO_Init+0x9c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	f240 4103 	movw	r1, #1027	@ 0x403
 8001e88:	480b      	ldr	r0, [pc, #44]	@ (8001eb8 <MX_GPIO_Init+0xa0>)
 8001e8a:	f001 f8a7 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001e8e:	f240 4303 	movw	r3, #1027	@ 0x403
 8001e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4804      	ldr	r0, [pc, #16]	@ (8001eb8 <MX_GPIO_Init+0xa0>)
 8001ea8:	f000 ff04 	bl	8002cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eac:	bf00      	nop
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020400 	.word	0x40020400

08001ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec0:	b672      	cpsid	i
}
 8001ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <Error_Handler+0x8>

08001ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a08      	ldr	r2, [pc, #32]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a30      	ldr	r2, [pc, #192]	@ (8001ff8 <HAL_SPI_MspInit+0xe0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d159      	bne.n	8001fee <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ffc <HAL_SPI_MspInit+0xe4>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a2e      	ldr	r2, [pc, #184]	@ (8001ffc <HAL_SPI_MspInit+0xe4>)
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ffc <HAL_SPI_MspInit+0xe4>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <HAL_SPI_MspInit+0xe4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a27      	ldr	r2, [pc, #156]	@ (8001ffc <HAL_SPI_MspInit+0xe4>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <HAL_SPI_MspInit+0xe4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f72:	23a0      	movs	r3, #160	@ 0xa0
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f82:	2305      	movs	r3, #5
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	481c      	ldr	r0, [pc, #112]	@ (8002000 <HAL_SPI_MspInit+0xe8>)
 8001f8e:	f000 fe91 	bl	8002cb4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001f92:	4b1c      	ldr	r3, [pc, #112]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001f94:	4a1c      	ldr	r2, [pc, #112]	@ (8002008 <HAL_SPI_MspInit+0xf0>)
 8001f96:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001f9a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001f9e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fac:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fb2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fb4:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fba:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fc0:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fd2:	480c      	ldr	r0, [pc, #48]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fd4:	f000 fafe 	bl	80025d4 <HAL_DMA_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001fde:	f7ff ff6d 	bl	8001ebc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fe6:	649a      	str	r2, [r3, #72]	@ 0x48
 8001fe8:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <HAL_SPI_MspInit+0xec>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	@ 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40013000 	.word	0x40013000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000
 8002004:	2000024c 	.word	0x2000024c
 8002008:	40026458 	.word	0x40026458

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <NMI_Handler+0x4>

08002014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <MemManage_Handler+0x4>

08002024 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <UsageFault_Handler+0x4>

08002034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002062:	f000 f961 	bl	8002328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <DMA2_Stream3_IRQHandler+0x10>)
 8002072:	f000 fbb5 	bl	80027e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000024c 	.word	0x2000024c

08002080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return 1;
 8002084:	2301      	movs	r3, #1
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_kill>:

int _kill(int pid, int sig)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800209a:	f003 f8c9 	bl	8005230 <__errno>
 800209e:	4603      	mov	r3, r0
 80020a0:	2216      	movs	r2, #22
 80020a2:	601a      	str	r2, [r3, #0]
  return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_exit>:

void _exit (int status)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ffe7 	bl	8002090 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020c2:	bf00      	nop
 80020c4:	e7fd      	b.n	80020c2 <_exit+0x12>

080020c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e00a      	b.n	80020ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d8:	f3af 8000 	nop.w
 80020dc:	4601      	mov	r1, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	60ba      	str	r2, [r7, #8]
 80020e4:	b2ca      	uxtb	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3301      	adds	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	dbf0      	blt.n	80020d8 <_read+0x12>
  }

  return len;
 80020f6:	687b      	ldr	r3, [r7, #4]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e009      	b.n	8002126 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	60ba      	str	r2, [r7, #8]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	dbf1      	blt.n	8002112 <_write+0x12>
  }
  return len;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_close>:

int _close(int file)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002160:	605a      	str	r2, [r3, #4]
  return 0;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_isatty>:

int _isatty(int file)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002178:	2301      	movs	r3, #1
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a8:	4a14      	ldr	r2, [pc, #80]	@ (80021fc <_sbrk+0x5c>)
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <_sbrk+0x60>)
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b4:	4b13      	ldr	r3, [pc, #76]	@ (8002204 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <_sbrk+0x64>)
 80021be:	4a12      	ldr	r2, [pc, #72]	@ (8002208 <_sbrk+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d207      	bcs.n	80021e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d0:	f003 f82e 	bl	8005230 <__errno>
 80021d4:	4603      	mov	r3, r0
 80021d6:	220c      	movs	r2, #12
 80021d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e009      	b.n	80021f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e0:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <_sbrk+0x64>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20020000 	.word	0x20020000
 8002200:	00000400 	.word	0x00000400
 8002204:	200002ac 	.word	0x200002ac
 8002208:	20000400 	.word	0x20000400

0800220c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <SystemInit+0x20>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	4a05      	ldr	r2, [pc, #20]	@ (800222c <SystemInit+0x20>)
 8002218:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002268 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002234:	f7ff ffea 	bl	800220c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002238:	480c      	ldr	r0, [pc, #48]	@ (800226c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800223a:	490d      	ldr	r1, [pc, #52]	@ (8002270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800223c:	4a0d      	ldr	r2, [pc, #52]	@ (8002274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002240:	e002      	b.n	8002248 <LoopCopyDataInit>

08002242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002246:	3304      	adds	r3, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800224c:	d3f9      	bcc.n	8002242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224e:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002250:	4c0a      	ldr	r4, [pc, #40]	@ (800227c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002254:	e001      	b.n	800225a <LoopFillZerobss>

08002256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002258:	3204      	adds	r2, #4

0800225a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800225c:	d3fb      	bcc.n	8002256 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800225e:	f002 ffed 	bl	800523c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002262:	f7ff fcb7 	bl	8001bd4 <main>
  bx  lr    
 8002266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800226c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002270:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002274:	0800a874 	.word	0x0800a874
  ldr r2, =_sbss
 8002278:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800227c:	20000400 	.word	0x20000400

08002280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC_IRQHandler>
	...

08002284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002288:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <HAL_Init+0x40>)
 800228e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <HAL_Init+0x40>)
 800229a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800229e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a07      	ldr	r2, [pc, #28]	@ (80022c4 <HAL_Init+0x40>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 f94f 	bl	8002550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b2:	200f      	movs	r0, #15
 80022b4:	f000 f808 	bl	80022c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b8:	f7ff fe06 	bl	8001ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d0:	4b12      	ldr	r3, [pc, #72]	@ (800231c <HAL_InitTick+0x54>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_InitTick+0x58>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022de:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f967 	bl	80025ba <HAL_SYSTICK_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00e      	b.n	8002314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d80a      	bhi.n	8002312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fc:	2200      	movs	r2, #0
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f000 f92f 	bl	8002566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002308:	4a06      	ldr	r2, [pc, #24]	@ (8002324 <HAL_InitTick+0x5c>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000004 	.word	0x20000004
 8002320:	2000000c 	.word	0x2000000c
 8002324:	20000008 	.word	0x20000008

08002328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_IncTick+0x20>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_IncTick+0x24>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4413      	add	r3, r2
 8002338:	4a04      	ldr	r2, [pc, #16]	@ (800234c <HAL_IncTick+0x24>)
 800233a:	6013      	str	r3, [r2, #0]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	2000000c 	.word	0x2000000c
 800234c:	200002b0 	.word	0x200002b0

08002350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <HAL_GetTick+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	200002b0 	.word	0x200002b0

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff ffee 	bl	8002350 <HAL_GetTick>
 8002374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_Delay+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800238e:	bf00      	nop
 8002390:	f7ff ffde 	bl	8002350 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000000c 	.word	0x2000000c

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	@ (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4907      	ldr	r1, [pc, #28]	@ (800244c <__NVIC_EnableIRQ+0x38>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	@ (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	@ (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	@ 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	@ 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800251c:	d301      	bcc.n	8002522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251e:	2301      	movs	r3, #1
 8002520:	e00f      	b.n	8002542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002522:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <SysTick_Config+0x40>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252a:	210f      	movs	r1, #15
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	f7ff ff8e 	bl	8002450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <SysTick_Config+0x40>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253a:	4b04      	ldr	r3, [pc, #16]	@ (800254c <SysTick_Config+0x40>)
 800253c:	2207      	movs	r2, #7
 800253e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	e000e010 	.word	0xe000e010

08002550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff29 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002578:	f7ff ff3e 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 800257c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f7ff ff8e 	bl	80024a4 <NVIC_EncodePriority>
 8002588:	4602      	mov	r2, r0
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff5d 	bl	8002450 <__NVIC_SetPriority>
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff31 	bl	8002414 <__NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ffa2 	bl	800250c <SysTick_Config>
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff feb6 	bl	8002350 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e099      	b.n	8002724 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002610:	e00f      	b.n	8002632 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002612:	f7ff fe9d 	bl	8002350 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b05      	cmp	r3, #5
 800261e:	d908      	bls.n	8002632 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2203      	movs	r2, #3
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e078      	b.n	8002724 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e8      	bne.n	8002612 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4b38      	ldr	r3, [pc, #224]	@ (800272c <HAL_DMA_Init+0x158>)
 800264c:	4013      	ands	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800265e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	2b04      	cmp	r3, #4
 800268a:	d107      	bne.n	800269c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002694:	4313      	orrs	r3, r2
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f023 0307 	bic.w	r3, r3, #7
 80026b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d117      	bne.n	80026f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00e      	beq.n	80026f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fa6f 	bl	8002bbc <DMA_CheckFifoParam>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2240      	movs	r2, #64	@ 0x40
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026f2:	2301      	movs	r3, #1
 80026f4:	e016      	b.n	8002724 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa26 	bl	8002b50 <DMA_CalcBaseAndBitshift>
 8002704:	4603      	mov	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	223f      	movs	r2, #63	@ 0x3f
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	f010803f 	.word	0xf010803f

08002730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_DMA_Start_IT+0x26>
 8002752:	2302      	movs	r3, #2
 8002754:	e040      	b.n	80027d8 <HAL_DMA_Start_IT+0xa8>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d12f      	bne.n	80027ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f9b8 	bl	8002af4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002788:	223f      	movs	r2, #63	@ 0x3f
 800278a:	409a      	lsls	r2, r3
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0216 	orr.w	r2, r2, #22
 800279e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0208 	orr.w	r2, r2, #8
 80027b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e005      	b.n	80027d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
 80027d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002a28 <HAL_DMA_IRQHandler+0x248>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a8e      	ldr	r2, [pc, #568]	@ (8002a2c <HAL_DMA_IRQHandler+0x24c>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0a9b      	lsrs	r3, r3, #10
 80027f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	2208      	movs	r2, #8
 800280c:	409a      	lsls	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d01a      	beq.n	800284c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	2208      	movs	r2, #8
 800283a:	409a      	lsls	r2, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002850:	2201      	movs	r2, #1
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	2201      	movs	r2, #1
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287a:	f043 0202 	orr.w	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002886:	2204      	movs	r2, #4
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d012      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	2204      	movs	r2, #4
 80028a6:	409a      	lsls	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b0:	f043 0204 	orr.w	r2, r3, #4
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	2210      	movs	r2, #16
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d043      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d03c      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	2210      	movs	r2, #16
 80028dc:	409a      	lsls	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d018      	beq.n	8002922 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d108      	bne.n	8002910 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d024      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
 800290e:	e01f      	b.n	8002950 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
 8002920:	e016      	b.n	8002950 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0208 	bic.w	r2, r2, #8
 800293e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002954:	2220      	movs	r2, #32
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 808f 	beq.w	8002a80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8087 	beq.w	8002a80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002976:	2220      	movs	r2, #32
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b05      	cmp	r3, #5
 8002988:	d136      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0216 	bic.w	r2, r2, #22
 8002998:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <HAL_DMA_IRQHandler+0x1da>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0208 	bic.w	r2, r2, #8
 80029c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ce:	223f      	movs	r2, #63	@ 0x3f
 80029d0:	409a      	lsls	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d07e      	beq.n	8002aec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
        }
        return;
 80029f6:	e079      	b.n	8002aec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01d      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10d      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d031      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
 8002a24:	e02c      	b.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
 8002a26:	bf00      	nop
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d023      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
 8002a40:	e01e      	b.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10f      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0210 	bic.w	r2, r2, #16
 8002a5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d032      	beq.n	8002aee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d022      	beq.n	8002ada <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2205      	movs	r2, #5
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d307      	bcc.n	8002ac8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f2      	bne.n	8002aac <HAL_DMA_IRQHandler+0x2cc>
 8002ac6:	e000      	b.n	8002aca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ac8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
 8002aea:	e000      	b.n	8002aee <HAL_DMA_IRQHandler+0x30e>
        return;
 8002aec:	bf00      	nop
    }
  }
}
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b40      	cmp	r3, #64	@ 0x40
 8002b20:	d108      	bne.n	8002b34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b32:	e007      	b.n	8002b44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	3b10      	subs	r3, #16
 8002b60:	4a14      	ldr	r2, [pc, #80]	@ (8002bb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b6a:	4a13      	ldr	r2, [pc, #76]	@ (8002bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d909      	bls.n	8002b92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	1d1a      	adds	r2, r3, #4
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b90:	e007      	b.n	8002ba2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b9a:	f023 0303 	bic.w	r3, r3, #3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	aaaaaaab 	.word	0xaaaaaaab
 8002bb8:	0800a430 	.word	0x0800a430

08002bbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d11f      	bne.n	8002c16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d856      	bhi.n	8002c8a <DMA_CheckFifoParam+0xce>
 8002bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002be4 <DMA_CheckFifoParam+0x28>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c07 	.word	0x08002c07
 8002bec:	08002bf5 	.word	0x08002bf5
 8002bf0:	08002c8b 	.word	0x08002c8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d046      	beq.n	8002c8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c04:	e043      	b.n	8002c8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c0e:	d140      	bne.n	8002c92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c14:	e03d      	b.n	8002c92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c1e:	d121      	bne.n	8002c64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d837      	bhi.n	8002c96 <DMA_CheckFifoParam+0xda>
 8002c26:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <DMA_CheckFifoParam+0x70>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c43 	.word	0x08002c43
 8002c34:	08002c3d 	.word	0x08002c3d
 8002c38:	08002c55 	.word	0x08002c55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c40:	e030      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d025      	beq.n	8002c9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c52:	e022      	b.n	8002c9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c5c:	d11f      	bne.n	8002c9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c62:	e01c      	b.n	8002c9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d903      	bls.n	8002c72 <DMA_CheckFifoParam+0xb6>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d003      	beq.n	8002c78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c70:	e018      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      break;
 8002c76:	e015      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00e      	beq.n	8002ca2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      break;
 8002c88:	e00b      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e00a      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e008      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e006      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002c96:	bf00      	nop
 8002c98:	e004      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e002      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c9e:	bf00      	nop
 8002ca0:	e000      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop

08002cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	@ 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e165      	b.n	8002f9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	f040 8154 	bne.w	8002f96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d005      	beq.n	8002d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d130      	bne.n	8002d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	2203      	movs	r2, #3
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 0201 	and.w	r2, r3, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d017      	beq.n	8002da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d123      	bne.n	8002df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	08da      	lsrs	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3208      	adds	r2, #8
 8002db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	08da      	lsrs	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3208      	adds	r2, #8
 8002df2:	69b9      	ldr	r1, [r7, #24]
 8002df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0203 	and.w	r2, r3, #3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80ae 	beq.w	8002f96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fb4 <HAL_GPIO_Init+0x300>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb4 <HAL_GPIO_Init+0x300>)
 8002e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fb4 <HAL_GPIO_Init+0x300>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e56:	4a58      	ldr	r2, [pc, #352]	@ (8002fb8 <HAL_GPIO_Init+0x304>)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fbc <HAL_GPIO_Init+0x308>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d025      	beq.n	8002ece <HAL_GPIO_Init+0x21a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4e      	ldr	r2, [pc, #312]	@ (8002fc0 <HAL_GPIO_Init+0x30c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01f      	beq.n	8002eca <HAL_GPIO_Init+0x216>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc4 <HAL_GPIO_Init+0x310>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d019      	beq.n	8002ec6 <HAL_GPIO_Init+0x212>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4c      	ldr	r2, [pc, #304]	@ (8002fc8 <HAL_GPIO_Init+0x314>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_GPIO_Init+0x20e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fcc <HAL_GPIO_Init+0x318>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00d      	beq.n	8002ebe <HAL_GPIO_Init+0x20a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd0 <HAL_GPIO_Init+0x31c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d007      	beq.n	8002eba <HAL_GPIO_Init+0x206>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a49      	ldr	r2, [pc, #292]	@ (8002fd4 <HAL_GPIO_Init+0x320>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_GPIO_Init+0x202>
 8002eb2:	2306      	movs	r3, #6
 8002eb4:	e00c      	b.n	8002ed0 <HAL_GPIO_Init+0x21c>
 8002eb6:	2307      	movs	r3, #7
 8002eb8:	e00a      	b.n	8002ed0 <HAL_GPIO_Init+0x21c>
 8002eba:	2305      	movs	r3, #5
 8002ebc:	e008      	b.n	8002ed0 <HAL_GPIO_Init+0x21c>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x21c>
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e004      	b.n	8002ed0 <HAL_GPIO_Init+0x21c>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e002      	b.n	8002ed0 <HAL_GPIO_Init+0x21c>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_GPIO_Init+0x21c>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	f002 0203 	and.w	r2, r2, #3
 8002ed6:	0092      	lsls	r2, r2, #2
 8002ed8:	4093      	lsls	r3, r2
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee0:	4935      	ldr	r1, [pc, #212]	@ (8002fb8 <HAL_GPIO_Init+0x304>)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eee:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd8 <HAL_GPIO_Init+0x324>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f12:	4a31      	ldr	r2, [pc, #196]	@ (8002fd8 <HAL_GPIO_Init+0x324>)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f18:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <HAL_GPIO_Init+0x324>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f3c:	4a26      	ldr	r2, [pc, #152]	@ (8002fd8 <HAL_GPIO_Init+0x324>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f42:	4b25      	ldr	r3, [pc, #148]	@ (8002fd8 <HAL_GPIO_Init+0x324>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f66:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd8 <HAL_GPIO_Init+0x324>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <HAL_GPIO_Init+0x324>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f90:	4a11      	ldr	r2, [pc, #68]	@ (8002fd8 <HAL_GPIO_Init+0x324>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b0f      	cmp	r3, #15
 8002fa0:	f67f ae96 	bls.w	8002cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3724      	adds	r7, #36	@ 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40020000 	.word	0x40020000
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	40020800 	.word	0x40020800
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40021400 	.word	0x40021400
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff8:	e003      	b.n	8003002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	619a      	str	r2, [r3, #24]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0cc      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b68      	ldr	r3, [pc, #416]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d90c      	bls.n	800304c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b65      	ldr	r3, [pc, #404]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b63      	ldr	r3, [pc, #396]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0b8      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003064:	4b59      	ldr	r3, [pc, #356]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a58      	ldr	r2, [pc, #352]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800306e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800307c:	4b53      	ldr	r3, [pc, #332]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a52      	ldr	r2, [pc, #328]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4b50      	ldr	r3, [pc, #320]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	494d      	ldr	r1, [pc, #308]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d044      	beq.n	8003130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b47      	ldr	r3, [pc, #284]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d119      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e07f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	4b3f      	ldr	r3, [pc, #252]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	4b3b      	ldr	r3, [pc, #236]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e067      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ee:	4b37      	ldr	r3, [pc, #220]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f023 0203 	bic.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4934      	ldr	r1, [pc, #208]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003100:	f7ff f926 	bl	8002350 <HAL_GetTick>
 8003104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	e00a      	b.n	800311e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7ff f922 	bl	8002350 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e04f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 020c 	and.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	429a      	cmp	r2, r3
 800312e:	d1eb      	bne.n	8003108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003130:	4b25      	ldr	r3, [pc, #148]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d20c      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b22      	ldr	r3, [pc, #136]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e032      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4916      	ldr	r1, [pc, #88]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003182:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	490e      	ldr	r1, [pc, #56]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003196:	f000 f821 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 800319a:	4602      	mov	r2, r0
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	490a      	ldr	r1, [pc, #40]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	5ccb      	ldrb	r3, [r1, r3]
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	4a09      	ldr	r2, [pc, #36]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031b2:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f886 	bl	80022c8 <HAL_InitTick>

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023c00 	.word	0x40023c00
 80031cc:	40023800 	.word	0x40023800
 80031d0:	0800a420 	.word	0x0800a420
 80031d4:	20000004 	.word	0x20000004
 80031d8:	20000008 	.word	0x20000008

080031dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e0:	b0a6      	sub	sp, #152	@ 0x98
 80031e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003202:	4bc8      	ldr	r3, [pc, #800]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b0c      	cmp	r3, #12
 800320c:	f200 817e 	bhi.w	800350c <HAL_RCC_GetSysClockFreq+0x330>
 8003210:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800350d 	.word	0x0800350d
 8003220:	0800350d 	.word	0x0800350d
 8003224:	0800350d 	.word	0x0800350d
 8003228:	08003255 	.word	0x08003255
 800322c:	0800350d 	.word	0x0800350d
 8003230:	0800350d 	.word	0x0800350d
 8003234:	0800350d 	.word	0x0800350d
 8003238:	0800325d 	.word	0x0800325d
 800323c:	0800350d 	.word	0x0800350d
 8003240:	0800350d 	.word	0x0800350d
 8003244:	0800350d 	.word	0x0800350d
 8003248:	080033c7 	.word	0x080033c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4bb6      	ldr	r3, [pc, #728]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x34c>)
 800324e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003252:	e15f      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003254:	4bb5      	ldr	r3, [pc, #724]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 8003256:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800325a:	e15b      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800325c:	4bb1      	ldr	r3, [pc, #708]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003268:	4bae      	ldr	r3, [pc, #696]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d031      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003274:	4bab      	ldr	r3, [pc, #684]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	2200      	movs	r2, #0
 800327c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800327e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	663b      	str	r3, [r7, #96]	@ 0x60
 8003288:	2300      	movs	r3, #0
 800328a:	667b      	str	r3, [r7, #100]	@ 0x64
 800328c:	4ba7      	ldr	r3, [pc, #668]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 800328e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003292:	462a      	mov	r2, r5
 8003294:	fb03 f202 	mul.w	r2, r3, r2
 8003298:	2300      	movs	r3, #0
 800329a:	4621      	mov	r1, r4
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	4aa2      	ldr	r2, [pc, #648]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 80032a4:	4621      	mov	r1, r4
 80032a6:	fba1 1202 	umull	r1, r2, r1, r2
 80032aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032ac:	460a      	mov	r2, r1
 80032ae:	67ba      	str	r2, [r7, #120]	@ 0x78
 80032b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80032b2:	4413      	add	r3, r2
 80032b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ba:	2200      	movs	r2, #0
 80032bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80032c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80032c8:	f7fd fcfe 	bl	8000cc8 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4613      	mov	r3, r2
 80032d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032d6:	e064      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d8:	4b92      	ldr	r3, [pc, #584]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	2200      	movs	r2, #0
 80032e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80032e2:	657a      	str	r2, [r7, #84]	@ 0x54
 80032e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032ec:	2300      	movs	r3, #0
 80032ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80032f4:	4622      	mov	r2, r4
 80032f6:	462b      	mov	r3, r5
 80032f8:	f04f 0000 	mov.w	r0, #0
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	0159      	lsls	r1, r3, #5
 8003302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003306:	0150      	lsls	r0, r2, #5
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4621      	mov	r1, r4
 800330e:	1a51      	subs	r1, r2, r1
 8003310:	6139      	str	r1, [r7, #16]
 8003312:	4629      	mov	r1, r5
 8003314:	eb63 0301 	sbc.w	r3, r3, r1
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003326:	4659      	mov	r1, fp
 8003328:	018b      	lsls	r3, r1, #6
 800332a:	4651      	mov	r1, sl
 800332c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003330:	4651      	mov	r1, sl
 8003332:	018a      	lsls	r2, r1, #6
 8003334:	4651      	mov	r1, sl
 8003336:	ebb2 0801 	subs.w	r8, r2, r1
 800333a:	4659      	mov	r1, fp
 800333c:	eb63 0901 	sbc.w	r9, r3, r1
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003350:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003354:	4690      	mov	r8, r2
 8003356:	4699      	mov	r9, r3
 8003358:	4623      	mov	r3, r4
 800335a:	eb18 0303 	adds.w	r3, r8, r3
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	462b      	mov	r3, r5
 8003362:	eb49 0303 	adc.w	r3, r9, r3
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003374:	4629      	mov	r1, r5
 8003376:	028b      	lsls	r3, r1, #10
 8003378:	4621      	mov	r1, r4
 800337a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800337e:	4621      	mov	r1, r4
 8003380:	028a      	lsls	r2, r1, #10
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338a:	2200      	movs	r2, #0
 800338c:	643b      	str	r3, [r7, #64]	@ 0x40
 800338e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003390:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003394:	f7fd fc98 	bl	8000cc8 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033a2:	4b60      	ldr	r3, [pc, #384]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	3301      	adds	r3, #1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80033b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80033c4:	e0a6      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c6:	4b57      	ldr	r3, [pc, #348]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d2:	4b54      	ldr	r3, [pc, #336]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02a      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033de:	4b51      	ldr	r3, [pc, #324]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	2200      	movs	r2, #0
 80033e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033f0:	2100      	movs	r1, #0
 80033f2:	4b4e      	ldr	r3, [pc, #312]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 80033f4:	fb03 f201 	mul.w	r2, r3, r1
 80033f8:	2300      	movs	r3, #0
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	4413      	add	r3, r2
 8003400:	4a4a      	ldr	r2, [pc, #296]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 8003402:	fba0 1202 	umull	r1, r2, r0, r2
 8003406:	677a      	str	r2, [r7, #116]	@ 0x74
 8003408:	460a      	mov	r2, r1
 800340a:	673a      	str	r2, [r7, #112]	@ 0x70
 800340c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800340e:	4413      	add	r3, r2
 8003410:	677b      	str	r3, [r7, #116]	@ 0x74
 8003412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003416:	2200      	movs	r2, #0
 8003418:	633b      	str	r3, [r7, #48]	@ 0x30
 800341a:	637a      	str	r2, [r7, #52]	@ 0x34
 800341c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003420:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003424:	f7fd fc50 	bl	8000cc8 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003432:	e05b      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	2200      	movs	r2, #0
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800343e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
 800344c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	0159      	lsls	r1, r3, #5
 800345e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003462:	0150      	lsls	r0, r2, #5
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4641      	mov	r1, r8
 800346a:	ebb2 0a01 	subs.w	sl, r2, r1
 800346e:	4649      	mov	r1, r9
 8003470:	eb63 0b01 	sbc.w	fp, r3, r1
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003488:	ebb2 040a 	subs.w	r4, r2, sl
 800348c:	eb63 050b 	sbc.w	r5, r3, fp
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	00eb      	lsls	r3, r5, #3
 800349a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349e:	00e2      	lsls	r2, r4, #3
 80034a0:	4614      	mov	r4, r2
 80034a2:	461d      	mov	r5, r3
 80034a4:	4643      	mov	r3, r8
 80034a6:	18e3      	adds	r3, r4, r3
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	464b      	mov	r3, r9
 80034ac:	eb45 0303 	adc.w	r3, r5, r3
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034be:	4629      	mov	r1, r5
 80034c0:	028b      	lsls	r3, r1, #10
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c8:	4621      	mov	r1, r4
 80034ca:	028a      	lsls	r2, r1, #10
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d4:	2200      	movs	r2, #0
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	61fa      	str	r2, [r7, #28]
 80034da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034de:	f7fd fbf3 	bl	8000cc8 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4613      	mov	r3, r2
 80034e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0f1b      	lsrs	r3, r3, #28
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80034fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800350a:	e003      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x34c>)
 800350e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003514:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003518:	4618      	mov	r0, r3
 800351a:	3798      	adds	r7, #152	@ 0x98
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	00f42400 	.word	0x00f42400
 800352c:	017d7840 	.word	0x017d7840

08003530 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e28d      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8083 	beq.w	8003656 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003550:	4b94      	ldr	r3, [pc, #592]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b04      	cmp	r3, #4
 800355a:	d019      	beq.n	8003590 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800355c:	4b91      	ldr	r3, [pc, #580]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 030c 	and.w	r3, r3, #12
        || \
 8003564:	2b08      	cmp	r3, #8
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003568:	4b8e      	ldr	r3, [pc, #568]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003574:	d00c      	beq.n	8003590 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003576:	4b8b      	ldr	r3, [pc, #556]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d112      	bne.n	80035a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003582:	4b88      	ldr	r3, [pc, #544]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800358e:	d10b      	bne.n	80035a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	4b84      	ldr	r3, [pc, #528]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d05b      	beq.n	8003654 <HAL_RCC_OscConfig+0x124>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d157      	bne.n	8003654 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e25a      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0x90>
 80035b2:	4b7c      	ldr	r3, [pc, #496]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7b      	ldr	r2, [pc, #492]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e01d      	b.n	80035fc <HAL_RCC_OscConfig+0xcc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0xb4>
 80035ca:	4b76      	ldr	r3, [pc, #472]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a75      	ldr	r2, [pc, #468]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b73      	ldr	r3, [pc, #460]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a72      	ldr	r2, [pc, #456]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0xcc>
 80035e4:	4b6f      	ldr	r3, [pc, #444]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a6e      	ldr	r2, [pc, #440]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b6c      	ldr	r3, [pc, #432]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a6b      	ldr	r2, [pc, #428]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe fea4 	bl	8002350 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7fe fea0 	bl	8002350 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	@ 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e21f      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b61      	ldr	r3, [pc, #388]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0xdc>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe fe90 	bl	8002350 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe fe8c 	bl	8002350 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	@ 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e20b      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	4b57      	ldr	r3, [pc, #348]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x104>
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d06f      	beq.n	8003742 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003662:	4b50      	ldr	r3, [pc, #320]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800366e:	4b4d      	ldr	r3, [pc, #308]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
        || \
 8003676:	2b08      	cmp	r3, #8
 8003678:	d105      	bne.n	8003686 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800367a:	4b4a      	ldr	r3, [pc, #296]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003686:	4b47      	ldr	r3, [pc, #284]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d11c      	bne.n	80036cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b44      	ldr	r3, [pc, #272]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d116      	bne.n	80036cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369e:	4b41      	ldr	r3, [pc, #260]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_RCC_OscConfig+0x186>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e1d3      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b6:	4b3b      	ldr	r3, [pc, #236]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4937      	ldr	r1, [pc, #220]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ca:	e03a      	b.n	8003742 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d4:	4b34      	ldr	r3, [pc, #208]	@ (80037a8 <HAL_RCC_OscConfig+0x278>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe fe39 	bl	8002350 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e2:	f7fe fe35 	bl	8002350 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e1b4      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f4:	4b2b      	ldr	r3, [pc, #172]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003700:	4b28      	ldr	r3, [pc, #160]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4925      	ldr	r1, [pc, #148]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003710:	4313      	orrs	r3, r2
 8003712:	600b      	str	r3, [r1, #0]
 8003714:	e015      	b.n	8003742 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003716:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_RCC_OscConfig+0x278>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fe18 	bl	8002350 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003724:	f7fe fe14 	bl	8002350 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e193      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003736:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d036      	beq.n	80037bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d016      	beq.n	8003784 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003756:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fe fdf8 	bl	8002350 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003764:	f7fe fdf4 	bl	8002350 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e173      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003776:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x234>
 8003782:	e01b      	b.n	80037bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003784:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fe fde1 	bl	8002350 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	e00e      	b.n	80037b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003792:	f7fe fddd 	bl	8002350 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d907      	bls.n	80037b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e15c      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
 80037a4:	40023800 	.word	0x40023800
 80037a8:	42470000 	.word	0x42470000
 80037ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	4b8a      	ldr	r3, [pc, #552]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ea      	bne.n	8003792 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8097 	beq.w	80038f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ca:	2300      	movs	r3, #0
 80037cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ce:	4b83      	ldr	r3, [pc, #524]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	4b7f      	ldr	r3, [pc, #508]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	4a7e      	ldr	r2, [pc, #504]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ea:	4b7c      	ldr	r3, [pc, #496]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fa:	4b79      	ldr	r3, [pc, #484]	@ (80039e0 <HAL_RCC_OscConfig+0x4b0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d118      	bne.n	8003838 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003806:	4b76      	ldr	r3, [pc, #472]	@ (80039e0 <HAL_RCC_OscConfig+0x4b0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a75      	ldr	r2, [pc, #468]	@ (80039e0 <HAL_RCC_OscConfig+0x4b0>)
 800380c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003812:	f7fe fd9d 	bl	8002350 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381a:	f7fe fd99 	bl	8002350 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e118      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	4b6c      	ldr	r3, [pc, #432]	@ (80039e0 <HAL_RCC_OscConfig+0x4b0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x31e>
 8003840:	4b66      	ldr	r3, [pc, #408]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	4a65      	ldr	r2, [pc, #404]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	6713      	str	r3, [r2, #112]	@ 0x70
 800384c:	e01c      	b.n	8003888 <HAL_RCC_OscConfig+0x358>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b05      	cmp	r3, #5
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0x340>
 8003856:	4b61      	ldr	r3, [pc, #388]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385a:	4a60      	ldr	r2, [pc, #384]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	6713      	str	r3, [r2, #112]	@ 0x70
 8003862:	4b5e      	ldr	r3, [pc, #376]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	4a5d      	ldr	r2, [pc, #372]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6713      	str	r3, [r2, #112]	@ 0x70
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0x358>
 8003870:	4b5a      	ldr	r3, [pc, #360]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	4a59      	ldr	r2, [pc, #356]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	6713      	str	r3, [r2, #112]	@ 0x70
 800387c:	4b57      	ldr	r3, [pc, #348]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a56      	ldr	r2, [pc, #344]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003882:	f023 0304 	bic.w	r3, r3, #4
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fe fd5e 	bl	8002350 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fe fd5a 	bl	8002350 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0d7      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	4b4b      	ldr	r3, [pc, #300]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0ee      	beq.n	8003898 <HAL_RCC_OscConfig+0x368>
 80038ba:	e014      	b.n	80038e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fe fd48 	bl	8002350 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c2:	e00a      	b.n	80038da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7fe fd44 	bl	8002350 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e0c1      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038da:	4b40      	ldr	r3, [pc, #256]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1ee      	bne.n	80038c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d105      	bne.n	80038f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ec:	4b3b      	ldr	r3, [pc, #236]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	4a3a      	ldr	r2, [pc, #232]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80038f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80ad 	beq.w	8003a5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003902:	4b36      	ldr	r3, [pc, #216]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b08      	cmp	r3, #8
 800390c:	d060      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d145      	bne.n	80039a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	4b33      	ldr	r3, [pc, #204]	@ (80039e4 <HAL_RCC_OscConfig+0x4b4>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe fd18 	bl	8002350 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe fd14 	bl	8002350 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e093      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	4b29      	ldr	r3, [pc, #164]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	019b      	lsls	r3, r3, #6
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	491b      	ldr	r1, [pc, #108]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003974:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_RCC_OscConfig+0x4b4>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fe fce9 	bl	8002350 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003982:	f7fe fce5 	bl	8002350 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e064      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003994:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x452>
 80039a0:	e05c      	b.n	8003a5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <HAL_RCC_OscConfig+0x4b4>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe fcd2 	bl	8002350 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fe fcce 	bl	8002350 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e04d      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x480>
 80039ce:	e045      	b.n	8003a5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e040      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40007000 	.word	0x40007000
 80039e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a68 <HAL_RCC_OscConfig+0x538>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d030      	beq.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d129      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d122      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d119      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	3b01      	subs	r3, #1
 8003a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d10f      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07b      	b.n	8003b76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a8e:	d009      	beq.n	8003aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
 8003a96:	e005      	b.n	8003aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fe fa2a 	bl	8001f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ada:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b28:	ea42 0103 	orr.w	r1, r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b30:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	f003 0104 	and.w	r1, r3, #4
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	f003 0210 	and.w	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b088      	sub	sp, #32
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b8e:	f7fe fbdf 	bl	8002350 <HAL_GetTick>
 8003b92:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d001      	beq.n	8003ba8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e12a      	b.n	8003dfe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_SPI_Transmit+0x36>
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e122      	b.n	8003dfe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_SPI_Transmit+0x48>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e11b      	b.n	8003dfe <HAL_SPI_Transmit+0x280>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	88fa      	ldrh	r2, [r7, #6]
 8003be6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c14:	d10f      	bne.n	8003c36 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	d007      	beq.n	8003c54 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c5c:	d152      	bne.n	8003d04 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Transmit+0xee>
 8003c66:	8b7b      	ldrh	r3, [r7, #26]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d145      	bne.n	8003cf8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c70:	881a      	ldrh	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	1c9a      	adds	r2, r3, #2
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c90:	e032      	b.n	8003cf8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d112      	bne.n	8003cc6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cc4:	e018      	b.n	8003cf8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc6:	f7fe fb43 	bl	8002350 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d803      	bhi.n	8003cde <HAL_SPI_Transmit+0x160>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d102      	bne.n	8003ce4 <HAL_SPI_Transmit+0x166>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e082      	b.n	8003dfe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1c7      	bne.n	8003c92 <HAL_SPI_Transmit+0x114>
 8003d02:	e053      	b.n	8003dac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_SPI_Transmit+0x194>
 8003d0c:	8b7b      	ldrh	r3, [r7, #26]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d147      	bne.n	8003da2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	7812      	ldrb	r2, [r2, #0]
 8003d1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d38:	e033      	b.n	8003da2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d113      	bne.n	8003d70 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	7812      	ldrb	r2, [r2, #0]
 8003d54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d6e:	e018      	b.n	8003da2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d70:	f7fe faee 	bl	8002350 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d803      	bhi.n	8003d88 <HAL_SPI_Transmit+0x20a>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d102      	bne.n	8003d8e <HAL_SPI_Transmit+0x210>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e02d      	b.n	8003dfe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1c6      	bne.n	8003d3a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	6839      	ldr	r1, [r7, #0]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f9f9 	bl	80041a8 <SPI_EndRxTxTransaction>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d001      	beq.n	8003e26 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
 8003e24:	e097      	b.n	8003f56 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Transmit_DMA+0x2a>
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e08f      	b.n	8003f56 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_SPI_Transmit_DMA+0x3c>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e088      	b.n	8003f56 <HAL_SPI_Transmit_DMA+0x14e>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2203      	movs	r2, #3
 8003e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	88fa      	ldrh	r2, [r7, #6]
 8003e6a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e92:	d10f      	bne.n	8003eb4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ea2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eb8:	4a29      	ldr	r2, [pc, #164]	@ (8003f60 <HAL_SPI_Transmit_DMA+0x158>)
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec0:	4a28      	ldr	r2, [pc, #160]	@ (8003f64 <HAL_SPI_Transmit_DMA+0x15c>)
 8003ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec8:	4a27      	ldr	r2, [pc, #156]	@ (8003f68 <HAL_SPI_Transmit_DMA+0x160>)
 8003eca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	4619      	mov	r1, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003eec:	f7fe fc20 	bl	8002730 <HAL_DMA_Start_IT>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efa:	f043 0210 	orr.w	r2, r3, #16
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e023      	b.n	8003f56 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d007      	beq.n	8003f2c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f2a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0220 	orr.w	r2, r2, #32
 8003f42:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0202 	orr.w	r2, r2, #2
 8003f52:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	0800403d 	.word	0x0800403d
 8003f64:	08003f95 	.word	0x08003f95
 8003f68:	08004059 	.word	0x08004059

08003f6c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa2:	f7fe f9d5 	bl	8002350 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb6:	d03b      	beq.n	8004030 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0220 	bic.w	r2, r2, #32
 8003fc6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0202 	bic.w	r2, r2, #2
 8003fd6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	2164      	movs	r1, #100	@ 0x64
 8003fdc:	6978      	ldr	r0, [r7, #20]
 8003fde:	f000 f8e3 	bl	80041a8 <SPI_EndRxTxTransaction>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2200      	movs	r2, #0
 8004016:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004028:	6978      	ldr	r0, [r7, #20]
 800402a:	f7ff ffa9 	bl	8003f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800402e:	e002      	b.n	8004036 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004030:	6978      	ldr	r0, [r7, #20]
 8004032:	f7fd f959 	bl	80012e8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f7ff ff8e 	bl	8003f6c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0203 	bic.w	r2, r2, #3
 8004074:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	f043 0210 	orr.w	r2, r3, #16
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff ff78 	bl	8003f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040a8:	f7fe f952 	bl	8002350 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	4413      	add	r3, r2
 80040b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040b8:	f7fe f94a 	bl	8002350 <HAL_GetTick>
 80040bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040be:	4b39      	ldr	r3, [pc, #228]	@ (80041a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	015b      	lsls	r3, r3, #5
 80040c4:	0d1b      	lsrs	r3, r3, #20
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ce:	e054      	b.n	800417a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d050      	beq.n	800417a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040d8:	f7fe f93a 	bl	8002350 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d902      	bls.n	80040ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d13d      	bne.n	800416a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004106:	d111      	bne.n	800412c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004110:	d004      	beq.n	800411c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411a:	d107      	bne.n	800412c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800412a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004134:	d10f      	bne.n	8004156 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e017      	b.n	800419a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3b01      	subs	r3, #1
 8004178:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4013      	ands	r3, r2
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	429a      	cmp	r2, r3
 8004196:	d19b      	bne.n	80040d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000004 	.word	0x20000004

080041a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2201      	movs	r2, #1
 80041bc:	2102      	movs	r1, #2
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff ff6a 	bl	8004098 <SPI_WaitFlagStateUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e032      	b.n	8004240 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041da:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <SPI_EndRxTxTransaction+0xa0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1b      	ldr	r2, [pc, #108]	@ (800424c <SPI_EndRxTxTransaction+0xa4>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	0d5b      	lsrs	r3, r3, #21
 80041e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041f8:	d112      	bne.n	8004220 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2200      	movs	r2, #0
 8004202:	2180      	movs	r1, #128	@ 0x80
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff ff47 	bl	8004098 <SPI_WaitFlagStateUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d016      	beq.n	800423e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e00f      	b.n	8004240 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3b01      	subs	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004236:	2b80      	cmp	r3, #128	@ 0x80
 8004238:	d0f2      	beq.n	8004220 <SPI_EndRxTxTransaction+0x78>
 800423a:	e000      	b.n	800423e <SPI_EndRxTxTransaction+0x96>
        break;
 800423c:	bf00      	nop
  }

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000004 	.word	0x20000004
 800424c:	165e9f81 	.word	0x165e9f81

08004250 <__cvt>:
 8004250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	ec57 6b10 	vmov	r6, r7, d0
 8004258:	2f00      	cmp	r7, #0
 800425a:	460c      	mov	r4, r1
 800425c:	4619      	mov	r1, r3
 800425e:	463b      	mov	r3, r7
 8004260:	bfbb      	ittet	lt
 8004262:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004266:	461f      	movlt	r7, r3
 8004268:	2300      	movge	r3, #0
 800426a:	232d      	movlt	r3, #45	@ 0x2d
 800426c:	700b      	strb	r3, [r1, #0]
 800426e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004270:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004274:	4691      	mov	r9, r2
 8004276:	f023 0820 	bic.w	r8, r3, #32
 800427a:	bfbc      	itt	lt
 800427c:	4632      	movlt	r2, r6
 800427e:	4616      	movlt	r6, r2
 8004280:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004284:	d005      	beq.n	8004292 <__cvt+0x42>
 8004286:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800428a:	d100      	bne.n	800428e <__cvt+0x3e>
 800428c:	3401      	adds	r4, #1
 800428e:	2102      	movs	r1, #2
 8004290:	e000      	b.n	8004294 <__cvt+0x44>
 8004292:	2103      	movs	r1, #3
 8004294:	ab03      	add	r3, sp, #12
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	ab02      	add	r3, sp, #8
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	ec47 6b10 	vmov	d0, r6, r7
 80042a0:	4653      	mov	r3, sl
 80042a2:	4622      	mov	r2, r4
 80042a4:	f001 f880 	bl	80053a8 <_dtoa_r>
 80042a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80042ac:	4605      	mov	r5, r0
 80042ae:	d119      	bne.n	80042e4 <__cvt+0x94>
 80042b0:	f019 0f01 	tst.w	r9, #1
 80042b4:	d00e      	beq.n	80042d4 <__cvt+0x84>
 80042b6:	eb00 0904 	add.w	r9, r0, r4
 80042ba:	2200      	movs	r2, #0
 80042bc:	2300      	movs	r3, #0
 80042be:	4630      	mov	r0, r6
 80042c0:	4639      	mov	r1, r7
 80042c2:	f7fc fc21 	bl	8000b08 <__aeabi_dcmpeq>
 80042c6:	b108      	cbz	r0, 80042cc <__cvt+0x7c>
 80042c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80042cc:	2230      	movs	r2, #48	@ 0x30
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	454b      	cmp	r3, r9
 80042d2:	d31e      	bcc.n	8004312 <__cvt+0xc2>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80042d8:	1b5b      	subs	r3, r3, r5
 80042da:	4628      	mov	r0, r5
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	b004      	add	sp, #16
 80042e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042e8:	eb00 0904 	add.w	r9, r0, r4
 80042ec:	d1e5      	bne.n	80042ba <__cvt+0x6a>
 80042ee:	7803      	ldrb	r3, [r0, #0]
 80042f0:	2b30      	cmp	r3, #48	@ 0x30
 80042f2:	d10a      	bne.n	800430a <__cvt+0xba>
 80042f4:	2200      	movs	r2, #0
 80042f6:	2300      	movs	r3, #0
 80042f8:	4630      	mov	r0, r6
 80042fa:	4639      	mov	r1, r7
 80042fc:	f7fc fc04 	bl	8000b08 <__aeabi_dcmpeq>
 8004300:	b918      	cbnz	r0, 800430a <__cvt+0xba>
 8004302:	f1c4 0401 	rsb	r4, r4, #1
 8004306:	f8ca 4000 	str.w	r4, [sl]
 800430a:	f8da 3000 	ldr.w	r3, [sl]
 800430e:	4499      	add	r9, r3
 8004310:	e7d3      	b.n	80042ba <__cvt+0x6a>
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	9103      	str	r1, [sp, #12]
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e7d9      	b.n	80042ce <__cvt+0x7e>

0800431a <__exponent>:
 800431a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800431c:	2900      	cmp	r1, #0
 800431e:	bfba      	itte	lt
 8004320:	4249      	neglt	r1, r1
 8004322:	232d      	movlt	r3, #45	@ 0x2d
 8004324:	232b      	movge	r3, #43	@ 0x2b
 8004326:	2909      	cmp	r1, #9
 8004328:	7002      	strb	r2, [r0, #0]
 800432a:	7043      	strb	r3, [r0, #1]
 800432c:	dd29      	ble.n	8004382 <__exponent+0x68>
 800432e:	f10d 0307 	add.w	r3, sp, #7
 8004332:	461d      	mov	r5, r3
 8004334:	270a      	movs	r7, #10
 8004336:	461a      	mov	r2, r3
 8004338:	fbb1 f6f7 	udiv	r6, r1, r7
 800433c:	fb07 1416 	mls	r4, r7, r6, r1
 8004340:	3430      	adds	r4, #48	@ 0x30
 8004342:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004346:	460c      	mov	r4, r1
 8004348:	2c63      	cmp	r4, #99	@ 0x63
 800434a:	f103 33ff 	add.w	r3, r3, #4294967295
 800434e:	4631      	mov	r1, r6
 8004350:	dcf1      	bgt.n	8004336 <__exponent+0x1c>
 8004352:	3130      	adds	r1, #48	@ 0x30
 8004354:	1e94      	subs	r4, r2, #2
 8004356:	f803 1c01 	strb.w	r1, [r3, #-1]
 800435a:	1c41      	adds	r1, r0, #1
 800435c:	4623      	mov	r3, r4
 800435e:	42ab      	cmp	r3, r5
 8004360:	d30a      	bcc.n	8004378 <__exponent+0x5e>
 8004362:	f10d 0309 	add.w	r3, sp, #9
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	42ac      	cmp	r4, r5
 800436a:	bf88      	it	hi
 800436c:	2300      	movhi	r3, #0
 800436e:	3302      	adds	r3, #2
 8004370:	4403      	add	r3, r0
 8004372:	1a18      	subs	r0, r3, r0
 8004374:	b003      	add	sp, #12
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004378:	f813 6b01 	ldrb.w	r6, [r3], #1
 800437c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004380:	e7ed      	b.n	800435e <__exponent+0x44>
 8004382:	2330      	movs	r3, #48	@ 0x30
 8004384:	3130      	adds	r1, #48	@ 0x30
 8004386:	7083      	strb	r3, [r0, #2]
 8004388:	70c1      	strb	r1, [r0, #3]
 800438a:	1d03      	adds	r3, r0, #4
 800438c:	e7f1      	b.n	8004372 <__exponent+0x58>
	...

08004390 <_printf_float>:
 8004390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	b08d      	sub	sp, #52	@ 0x34
 8004396:	460c      	mov	r4, r1
 8004398:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800439c:	4616      	mov	r6, r2
 800439e:	461f      	mov	r7, r3
 80043a0:	4605      	mov	r5, r0
 80043a2:	f000 fefb 	bl	800519c <_localeconv_r>
 80043a6:	6803      	ldr	r3, [r0, #0]
 80043a8:	9304      	str	r3, [sp, #16]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fb ff80 	bl	80002b0 <strlen>
 80043b0:	2300      	movs	r3, #0
 80043b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80043b4:	f8d8 3000 	ldr.w	r3, [r8]
 80043b8:	9005      	str	r0, [sp, #20]
 80043ba:	3307      	adds	r3, #7
 80043bc:	f023 0307 	bic.w	r3, r3, #7
 80043c0:	f103 0208 	add.w	r2, r3, #8
 80043c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043c8:	f8d4 b000 	ldr.w	fp, [r4]
 80043cc:	f8c8 2000 	str.w	r2, [r8]
 80043d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80043d8:	9307      	str	r3, [sp, #28]
 80043da:	f8cd 8018 	str.w	r8, [sp, #24]
 80043de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80043e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004658 <_printf_float+0x2c8>)
 80043e8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ec:	f7fc fbbe 	bl	8000b6c <__aeabi_dcmpun>
 80043f0:	bb70      	cbnz	r0, 8004450 <_printf_float+0xc0>
 80043f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043f6:	4b98      	ldr	r3, [pc, #608]	@ (8004658 <_printf_float+0x2c8>)
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	f7fc fb98 	bl	8000b30 <__aeabi_dcmple>
 8004400:	bb30      	cbnz	r0, 8004450 <_printf_float+0xc0>
 8004402:	2200      	movs	r2, #0
 8004404:	2300      	movs	r3, #0
 8004406:	4640      	mov	r0, r8
 8004408:	4649      	mov	r1, r9
 800440a:	f7fc fb87 	bl	8000b1c <__aeabi_dcmplt>
 800440e:	b110      	cbz	r0, 8004416 <_printf_float+0x86>
 8004410:	232d      	movs	r3, #45	@ 0x2d
 8004412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004416:	4a91      	ldr	r2, [pc, #580]	@ (800465c <_printf_float+0x2cc>)
 8004418:	4b91      	ldr	r3, [pc, #580]	@ (8004660 <_printf_float+0x2d0>)
 800441a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800441e:	bf8c      	ite	hi
 8004420:	4690      	movhi	r8, r2
 8004422:	4698      	movls	r8, r3
 8004424:	2303      	movs	r3, #3
 8004426:	6123      	str	r3, [r4, #16]
 8004428:	f02b 0304 	bic.w	r3, fp, #4
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	f04f 0900 	mov.w	r9, #0
 8004432:	9700      	str	r7, [sp, #0]
 8004434:	4633      	mov	r3, r6
 8004436:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004438:	4621      	mov	r1, r4
 800443a:	4628      	mov	r0, r5
 800443c:	f000 f9d2 	bl	80047e4 <_printf_common>
 8004440:	3001      	adds	r0, #1
 8004442:	f040 808d 	bne.w	8004560 <_printf_float+0x1d0>
 8004446:	f04f 30ff 	mov.w	r0, #4294967295
 800444a:	b00d      	add	sp, #52	@ 0x34
 800444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	4640      	mov	r0, r8
 8004456:	4649      	mov	r1, r9
 8004458:	f7fc fb88 	bl	8000b6c <__aeabi_dcmpun>
 800445c:	b140      	cbz	r0, 8004470 <_printf_float+0xe0>
 800445e:	464b      	mov	r3, r9
 8004460:	2b00      	cmp	r3, #0
 8004462:	bfbc      	itt	lt
 8004464:	232d      	movlt	r3, #45	@ 0x2d
 8004466:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800446a:	4a7e      	ldr	r2, [pc, #504]	@ (8004664 <_printf_float+0x2d4>)
 800446c:	4b7e      	ldr	r3, [pc, #504]	@ (8004668 <_printf_float+0x2d8>)
 800446e:	e7d4      	b.n	800441a <_printf_float+0x8a>
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004476:	9206      	str	r2, [sp, #24]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	d13b      	bne.n	80044f4 <_printf_float+0x164>
 800447c:	2306      	movs	r3, #6
 800447e:	6063      	str	r3, [r4, #4]
 8004480:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004484:	2300      	movs	r3, #0
 8004486:	6022      	str	r2, [r4, #0]
 8004488:	9303      	str	r3, [sp, #12]
 800448a:	ab0a      	add	r3, sp, #40	@ 0x28
 800448c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004490:	ab09      	add	r3, sp, #36	@ 0x24
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	6861      	ldr	r1, [r4, #4]
 8004496:	ec49 8b10 	vmov	d0, r8, r9
 800449a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800449e:	4628      	mov	r0, r5
 80044a0:	f7ff fed6 	bl	8004250 <__cvt>
 80044a4:	9b06      	ldr	r3, [sp, #24]
 80044a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80044a8:	2b47      	cmp	r3, #71	@ 0x47
 80044aa:	4680      	mov	r8, r0
 80044ac:	d129      	bne.n	8004502 <_printf_float+0x172>
 80044ae:	1cc8      	adds	r0, r1, #3
 80044b0:	db02      	blt.n	80044b8 <_printf_float+0x128>
 80044b2:	6863      	ldr	r3, [r4, #4]
 80044b4:	4299      	cmp	r1, r3
 80044b6:	dd41      	ble.n	800453c <_printf_float+0x1ac>
 80044b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80044bc:	fa5f fa8a 	uxtb.w	sl, sl
 80044c0:	3901      	subs	r1, #1
 80044c2:	4652      	mov	r2, sl
 80044c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80044c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80044ca:	f7ff ff26 	bl	800431a <__exponent>
 80044ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044d0:	1813      	adds	r3, r2, r0
 80044d2:	2a01      	cmp	r2, #1
 80044d4:	4681      	mov	r9, r0
 80044d6:	6123      	str	r3, [r4, #16]
 80044d8:	dc02      	bgt.n	80044e0 <_printf_float+0x150>
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	07d2      	lsls	r2, r2, #31
 80044de:	d501      	bpl.n	80044e4 <_printf_float+0x154>
 80044e0:	3301      	adds	r3, #1
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0a2      	beq.n	8004432 <_printf_float+0xa2>
 80044ec:	232d      	movs	r3, #45	@ 0x2d
 80044ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044f2:	e79e      	b.n	8004432 <_printf_float+0xa2>
 80044f4:	9a06      	ldr	r2, [sp, #24]
 80044f6:	2a47      	cmp	r2, #71	@ 0x47
 80044f8:	d1c2      	bne.n	8004480 <_printf_float+0xf0>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1c0      	bne.n	8004480 <_printf_float+0xf0>
 80044fe:	2301      	movs	r3, #1
 8004500:	e7bd      	b.n	800447e <_printf_float+0xee>
 8004502:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004506:	d9db      	bls.n	80044c0 <_printf_float+0x130>
 8004508:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800450c:	d118      	bne.n	8004540 <_printf_float+0x1b0>
 800450e:	2900      	cmp	r1, #0
 8004510:	6863      	ldr	r3, [r4, #4]
 8004512:	dd0b      	ble.n	800452c <_printf_float+0x19c>
 8004514:	6121      	str	r1, [r4, #16]
 8004516:	b913      	cbnz	r3, 800451e <_printf_float+0x18e>
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	07d0      	lsls	r0, r2, #31
 800451c:	d502      	bpl.n	8004524 <_printf_float+0x194>
 800451e:	3301      	adds	r3, #1
 8004520:	440b      	add	r3, r1
 8004522:	6123      	str	r3, [r4, #16]
 8004524:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004526:	f04f 0900 	mov.w	r9, #0
 800452a:	e7db      	b.n	80044e4 <_printf_float+0x154>
 800452c:	b913      	cbnz	r3, 8004534 <_printf_float+0x1a4>
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	07d2      	lsls	r2, r2, #31
 8004532:	d501      	bpl.n	8004538 <_printf_float+0x1a8>
 8004534:	3302      	adds	r3, #2
 8004536:	e7f4      	b.n	8004522 <_printf_float+0x192>
 8004538:	2301      	movs	r3, #1
 800453a:	e7f2      	b.n	8004522 <_printf_float+0x192>
 800453c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004542:	4299      	cmp	r1, r3
 8004544:	db05      	blt.n	8004552 <_printf_float+0x1c2>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	6121      	str	r1, [r4, #16]
 800454a:	07d8      	lsls	r0, r3, #31
 800454c:	d5ea      	bpl.n	8004524 <_printf_float+0x194>
 800454e:	1c4b      	adds	r3, r1, #1
 8004550:	e7e7      	b.n	8004522 <_printf_float+0x192>
 8004552:	2900      	cmp	r1, #0
 8004554:	bfd4      	ite	le
 8004556:	f1c1 0202 	rsble	r2, r1, #2
 800455a:	2201      	movgt	r2, #1
 800455c:	4413      	add	r3, r2
 800455e:	e7e0      	b.n	8004522 <_printf_float+0x192>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	055a      	lsls	r2, r3, #21
 8004564:	d407      	bmi.n	8004576 <_printf_float+0x1e6>
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	4642      	mov	r2, r8
 800456a:	4631      	mov	r1, r6
 800456c:	4628      	mov	r0, r5
 800456e:	47b8      	blx	r7
 8004570:	3001      	adds	r0, #1
 8004572:	d12b      	bne.n	80045cc <_printf_float+0x23c>
 8004574:	e767      	b.n	8004446 <_printf_float+0xb6>
 8004576:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800457a:	f240 80dd 	bls.w	8004738 <_printf_float+0x3a8>
 800457e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004582:	2200      	movs	r2, #0
 8004584:	2300      	movs	r3, #0
 8004586:	f7fc fabf 	bl	8000b08 <__aeabi_dcmpeq>
 800458a:	2800      	cmp	r0, #0
 800458c:	d033      	beq.n	80045f6 <_printf_float+0x266>
 800458e:	4a37      	ldr	r2, [pc, #220]	@ (800466c <_printf_float+0x2dc>)
 8004590:	2301      	movs	r3, #1
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	f43f af54 	beq.w	8004446 <_printf_float+0xb6>
 800459e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80045a2:	4543      	cmp	r3, r8
 80045a4:	db02      	blt.n	80045ac <_printf_float+0x21c>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	07d8      	lsls	r0, r3, #31
 80045aa:	d50f      	bpl.n	80045cc <_printf_float+0x23c>
 80045ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045b0:	4631      	mov	r1, r6
 80045b2:	4628      	mov	r0, r5
 80045b4:	47b8      	blx	r7
 80045b6:	3001      	adds	r0, #1
 80045b8:	f43f af45 	beq.w	8004446 <_printf_float+0xb6>
 80045bc:	f04f 0900 	mov.w	r9, #0
 80045c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80045c4:	f104 0a1a 	add.w	sl, r4, #26
 80045c8:	45c8      	cmp	r8, r9
 80045ca:	dc09      	bgt.n	80045e0 <_printf_float+0x250>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	079b      	lsls	r3, r3, #30
 80045d0:	f100 8103 	bmi.w	80047da <_printf_float+0x44a>
 80045d4:	68e0      	ldr	r0, [r4, #12]
 80045d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045d8:	4298      	cmp	r0, r3
 80045da:	bfb8      	it	lt
 80045dc:	4618      	movlt	r0, r3
 80045de:	e734      	b.n	800444a <_printf_float+0xba>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4652      	mov	r2, sl
 80045e4:	4631      	mov	r1, r6
 80045e6:	4628      	mov	r0, r5
 80045e8:	47b8      	blx	r7
 80045ea:	3001      	adds	r0, #1
 80045ec:	f43f af2b 	beq.w	8004446 <_printf_float+0xb6>
 80045f0:	f109 0901 	add.w	r9, r9, #1
 80045f4:	e7e8      	b.n	80045c8 <_printf_float+0x238>
 80045f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	dc39      	bgt.n	8004670 <_printf_float+0x2e0>
 80045fc:	4a1b      	ldr	r2, [pc, #108]	@ (800466c <_printf_float+0x2dc>)
 80045fe:	2301      	movs	r3, #1
 8004600:	4631      	mov	r1, r6
 8004602:	4628      	mov	r0, r5
 8004604:	47b8      	blx	r7
 8004606:	3001      	adds	r0, #1
 8004608:	f43f af1d 	beq.w	8004446 <_printf_float+0xb6>
 800460c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004610:	ea59 0303 	orrs.w	r3, r9, r3
 8004614:	d102      	bne.n	800461c <_printf_float+0x28c>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	07d9      	lsls	r1, r3, #31
 800461a:	d5d7      	bpl.n	80045cc <_printf_float+0x23c>
 800461c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004620:	4631      	mov	r1, r6
 8004622:	4628      	mov	r0, r5
 8004624:	47b8      	blx	r7
 8004626:	3001      	adds	r0, #1
 8004628:	f43f af0d 	beq.w	8004446 <_printf_float+0xb6>
 800462c:	f04f 0a00 	mov.w	sl, #0
 8004630:	f104 0b1a 	add.w	fp, r4, #26
 8004634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004636:	425b      	negs	r3, r3
 8004638:	4553      	cmp	r3, sl
 800463a:	dc01      	bgt.n	8004640 <_printf_float+0x2b0>
 800463c:	464b      	mov	r3, r9
 800463e:	e793      	b.n	8004568 <_printf_float+0x1d8>
 8004640:	2301      	movs	r3, #1
 8004642:	465a      	mov	r2, fp
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	47b8      	blx	r7
 800464a:	3001      	adds	r0, #1
 800464c:	f43f aefb 	beq.w	8004446 <_printf_float+0xb6>
 8004650:	f10a 0a01 	add.w	sl, sl, #1
 8004654:	e7ee      	b.n	8004634 <_printf_float+0x2a4>
 8004656:	bf00      	nop
 8004658:	7fefffff 	.word	0x7fefffff
 800465c:	0800a43c 	.word	0x0800a43c
 8004660:	0800a438 	.word	0x0800a438
 8004664:	0800a444 	.word	0x0800a444
 8004668:	0800a440 	.word	0x0800a440
 800466c:	0800a448 	.word	0x0800a448
 8004670:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004672:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004676:	4553      	cmp	r3, sl
 8004678:	bfa8      	it	ge
 800467a:	4653      	movge	r3, sl
 800467c:	2b00      	cmp	r3, #0
 800467e:	4699      	mov	r9, r3
 8004680:	dc36      	bgt.n	80046f0 <_printf_float+0x360>
 8004682:	f04f 0b00 	mov.w	fp, #0
 8004686:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800468a:	f104 021a 	add.w	r2, r4, #26
 800468e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004690:	9306      	str	r3, [sp, #24]
 8004692:	eba3 0309 	sub.w	r3, r3, r9
 8004696:	455b      	cmp	r3, fp
 8004698:	dc31      	bgt.n	80046fe <_printf_float+0x36e>
 800469a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800469c:	459a      	cmp	sl, r3
 800469e:	dc3a      	bgt.n	8004716 <_printf_float+0x386>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	07da      	lsls	r2, r3, #31
 80046a4:	d437      	bmi.n	8004716 <_printf_float+0x386>
 80046a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046a8:	ebaa 0903 	sub.w	r9, sl, r3
 80046ac:	9b06      	ldr	r3, [sp, #24]
 80046ae:	ebaa 0303 	sub.w	r3, sl, r3
 80046b2:	4599      	cmp	r9, r3
 80046b4:	bfa8      	it	ge
 80046b6:	4699      	movge	r9, r3
 80046b8:	f1b9 0f00 	cmp.w	r9, #0
 80046bc:	dc33      	bgt.n	8004726 <_printf_float+0x396>
 80046be:	f04f 0800 	mov.w	r8, #0
 80046c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046c6:	f104 0b1a 	add.w	fp, r4, #26
 80046ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046cc:	ebaa 0303 	sub.w	r3, sl, r3
 80046d0:	eba3 0309 	sub.w	r3, r3, r9
 80046d4:	4543      	cmp	r3, r8
 80046d6:	f77f af79 	ble.w	80045cc <_printf_float+0x23c>
 80046da:	2301      	movs	r3, #1
 80046dc:	465a      	mov	r2, fp
 80046de:	4631      	mov	r1, r6
 80046e0:	4628      	mov	r0, r5
 80046e2:	47b8      	blx	r7
 80046e4:	3001      	adds	r0, #1
 80046e6:	f43f aeae 	beq.w	8004446 <_printf_float+0xb6>
 80046ea:	f108 0801 	add.w	r8, r8, #1
 80046ee:	e7ec      	b.n	80046ca <_printf_float+0x33a>
 80046f0:	4642      	mov	r2, r8
 80046f2:	4631      	mov	r1, r6
 80046f4:	4628      	mov	r0, r5
 80046f6:	47b8      	blx	r7
 80046f8:	3001      	adds	r0, #1
 80046fa:	d1c2      	bne.n	8004682 <_printf_float+0x2f2>
 80046fc:	e6a3      	b.n	8004446 <_printf_float+0xb6>
 80046fe:	2301      	movs	r3, #1
 8004700:	4631      	mov	r1, r6
 8004702:	4628      	mov	r0, r5
 8004704:	9206      	str	r2, [sp, #24]
 8004706:	47b8      	blx	r7
 8004708:	3001      	adds	r0, #1
 800470a:	f43f ae9c 	beq.w	8004446 <_printf_float+0xb6>
 800470e:	9a06      	ldr	r2, [sp, #24]
 8004710:	f10b 0b01 	add.w	fp, fp, #1
 8004714:	e7bb      	b.n	800468e <_printf_float+0x2fe>
 8004716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	d1c0      	bne.n	80046a6 <_printf_float+0x316>
 8004724:	e68f      	b.n	8004446 <_printf_float+0xb6>
 8004726:	9a06      	ldr	r2, [sp, #24]
 8004728:	464b      	mov	r3, r9
 800472a:	4442      	add	r2, r8
 800472c:	4631      	mov	r1, r6
 800472e:	4628      	mov	r0, r5
 8004730:	47b8      	blx	r7
 8004732:	3001      	adds	r0, #1
 8004734:	d1c3      	bne.n	80046be <_printf_float+0x32e>
 8004736:	e686      	b.n	8004446 <_printf_float+0xb6>
 8004738:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800473c:	f1ba 0f01 	cmp.w	sl, #1
 8004740:	dc01      	bgt.n	8004746 <_printf_float+0x3b6>
 8004742:	07db      	lsls	r3, r3, #31
 8004744:	d536      	bpl.n	80047b4 <_printf_float+0x424>
 8004746:	2301      	movs	r3, #1
 8004748:	4642      	mov	r2, r8
 800474a:	4631      	mov	r1, r6
 800474c:	4628      	mov	r0, r5
 800474e:	47b8      	blx	r7
 8004750:	3001      	adds	r0, #1
 8004752:	f43f ae78 	beq.w	8004446 <_printf_float+0xb6>
 8004756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800475a:	4631      	mov	r1, r6
 800475c:	4628      	mov	r0, r5
 800475e:	47b8      	blx	r7
 8004760:	3001      	adds	r0, #1
 8004762:	f43f ae70 	beq.w	8004446 <_printf_float+0xb6>
 8004766:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800476a:	2200      	movs	r2, #0
 800476c:	2300      	movs	r3, #0
 800476e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004772:	f7fc f9c9 	bl	8000b08 <__aeabi_dcmpeq>
 8004776:	b9c0      	cbnz	r0, 80047aa <_printf_float+0x41a>
 8004778:	4653      	mov	r3, sl
 800477a:	f108 0201 	add.w	r2, r8, #1
 800477e:	4631      	mov	r1, r6
 8004780:	4628      	mov	r0, r5
 8004782:	47b8      	blx	r7
 8004784:	3001      	adds	r0, #1
 8004786:	d10c      	bne.n	80047a2 <_printf_float+0x412>
 8004788:	e65d      	b.n	8004446 <_printf_float+0xb6>
 800478a:	2301      	movs	r3, #1
 800478c:	465a      	mov	r2, fp
 800478e:	4631      	mov	r1, r6
 8004790:	4628      	mov	r0, r5
 8004792:	47b8      	blx	r7
 8004794:	3001      	adds	r0, #1
 8004796:	f43f ae56 	beq.w	8004446 <_printf_float+0xb6>
 800479a:	f108 0801 	add.w	r8, r8, #1
 800479e:	45d0      	cmp	r8, sl
 80047a0:	dbf3      	blt.n	800478a <_printf_float+0x3fa>
 80047a2:	464b      	mov	r3, r9
 80047a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80047a8:	e6df      	b.n	800456a <_printf_float+0x1da>
 80047aa:	f04f 0800 	mov.w	r8, #0
 80047ae:	f104 0b1a 	add.w	fp, r4, #26
 80047b2:	e7f4      	b.n	800479e <_printf_float+0x40e>
 80047b4:	2301      	movs	r3, #1
 80047b6:	4642      	mov	r2, r8
 80047b8:	e7e1      	b.n	800477e <_printf_float+0x3ee>
 80047ba:	2301      	movs	r3, #1
 80047bc:	464a      	mov	r2, r9
 80047be:	4631      	mov	r1, r6
 80047c0:	4628      	mov	r0, r5
 80047c2:	47b8      	blx	r7
 80047c4:	3001      	adds	r0, #1
 80047c6:	f43f ae3e 	beq.w	8004446 <_printf_float+0xb6>
 80047ca:	f108 0801 	add.w	r8, r8, #1
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80047d2:	1a5b      	subs	r3, r3, r1
 80047d4:	4543      	cmp	r3, r8
 80047d6:	dcf0      	bgt.n	80047ba <_printf_float+0x42a>
 80047d8:	e6fc      	b.n	80045d4 <_printf_float+0x244>
 80047da:	f04f 0800 	mov.w	r8, #0
 80047de:	f104 0919 	add.w	r9, r4, #25
 80047e2:	e7f4      	b.n	80047ce <_printf_float+0x43e>

080047e4 <_printf_common>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	4616      	mov	r6, r2
 80047ea:	4698      	mov	r8, r3
 80047ec:	688a      	ldr	r2, [r1, #8]
 80047ee:	690b      	ldr	r3, [r1, #16]
 80047f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	bfb8      	it	lt
 80047f8:	4613      	movlt	r3, r2
 80047fa:	6033      	str	r3, [r6, #0]
 80047fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004800:	4607      	mov	r7, r0
 8004802:	460c      	mov	r4, r1
 8004804:	b10a      	cbz	r2, 800480a <_printf_common+0x26>
 8004806:	3301      	adds	r3, #1
 8004808:	6033      	str	r3, [r6, #0]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	0699      	lsls	r1, r3, #26
 800480e:	bf42      	ittt	mi
 8004810:	6833      	ldrmi	r3, [r6, #0]
 8004812:	3302      	addmi	r3, #2
 8004814:	6033      	strmi	r3, [r6, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	f015 0506 	ands.w	r5, r5, #6
 800481c:	d106      	bne.n	800482c <_printf_common+0x48>
 800481e:	f104 0a19 	add.w	sl, r4, #25
 8004822:	68e3      	ldr	r3, [r4, #12]
 8004824:	6832      	ldr	r2, [r6, #0]
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	42ab      	cmp	r3, r5
 800482a:	dc26      	bgt.n	800487a <_printf_common+0x96>
 800482c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	3b00      	subs	r3, #0
 8004834:	bf18      	it	ne
 8004836:	2301      	movne	r3, #1
 8004838:	0692      	lsls	r2, r2, #26
 800483a:	d42b      	bmi.n	8004894 <_printf_common+0xb0>
 800483c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004840:	4641      	mov	r1, r8
 8004842:	4638      	mov	r0, r7
 8004844:	47c8      	blx	r9
 8004846:	3001      	adds	r0, #1
 8004848:	d01e      	beq.n	8004888 <_printf_common+0xa4>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	6922      	ldr	r2, [r4, #16]
 800484e:	f003 0306 	and.w	r3, r3, #6
 8004852:	2b04      	cmp	r3, #4
 8004854:	bf02      	ittt	eq
 8004856:	68e5      	ldreq	r5, [r4, #12]
 8004858:	6833      	ldreq	r3, [r6, #0]
 800485a:	1aed      	subeq	r5, r5, r3
 800485c:	68a3      	ldr	r3, [r4, #8]
 800485e:	bf0c      	ite	eq
 8004860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004864:	2500      	movne	r5, #0
 8004866:	4293      	cmp	r3, r2
 8004868:	bfc4      	itt	gt
 800486a:	1a9b      	subgt	r3, r3, r2
 800486c:	18ed      	addgt	r5, r5, r3
 800486e:	2600      	movs	r6, #0
 8004870:	341a      	adds	r4, #26
 8004872:	42b5      	cmp	r5, r6
 8004874:	d11a      	bne.n	80048ac <_printf_common+0xc8>
 8004876:	2000      	movs	r0, #0
 8004878:	e008      	b.n	800488c <_printf_common+0xa8>
 800487a:	2301      	movs	r3, #1
 800487c:	4652      	mov	r2, sl
 800487e:	4641      	mov	r1, r8
 8004880:	4638      	mov	r0, r7
 8004882:	47c8      	blx	r9
 8004884:	3001      	adds	r0, #1
 8004886:	d103      	bne.n	8004890 <_printf_common+0xac>
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004890:	3501      	adds	r5, #1
 8004892:	e7c6      	b.n	8004822 <_printf_common+0x3e>
 8004894:	18e1      	adds	r1, r4, r3
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	2030      	movs	r0, #48	@ 0x30
 800489a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800489e:	4422      	add	r2, r4
 80048a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048a8:	3302      	adds	r3, #2
 80048aa:	e7c7      	b.n	800483c <_printf_common+0x58>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4622      	mov	r2, r4
 80048b0:	4641      	mov	r1, r8
 80048b2:	4638      	mov	r0, r7
 80048b4:	47c8      	blx	r9
 80048b6:	3001      	adds	r0, #1
 80048b8:	d0e6      	beq.n	8004888 <_printf_common+0xa4>
 80048ba:	3601      	adds	r6, #1
 80048bc:	e7d9      	b.n	8004872 <_printf_common+0x8e>
	...

080048c0 <_printf_i>:
 80048c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	7e0f      	ldrb	r7, [r1, #24]
 80048c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048c8:	2f78      	cmp	r7, #120	@ 0x78
 80048ca:	4691      	mov	r9, r2
 80048cc:	4680      	mov	r8, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	469a      	mov	sl, r3
 80048d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048d6:	d807      	bhi.n	80048e8 <_printf_i+0x28>
 80048d8:	2f62      	cmp	r7, #98	@ 0x62
 80048da:	d80a      	bhi.n	80048f2 <_printf_i+0x32>
 80048dc:	2f00      	cmp	r7, #0
 80048de:	f000 80d1 	beq.w	8004a84 <_printf_i+0x1c4>
 80048e2:	2f58      	cmp	r7, #88	@ 0x58
 80048e4:	f000 80b8 	beq.w	8004a58 <_printf_i+0x198>
 80048e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048f0:	e03a      	b.n	8004968 <_printf_i+0xa8>
 80048f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048f6:	2b15      	cmp	r3, #21
 80048f8:	d8f6      	bhi.n	80048e8 <_printf_i+0x28>
 80048fa:	a101      	add	r1, pc, #4	@ (adr r1, 8004900 <_printf_i+0x40>)
 80048fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004900:	08004959 	.word	0x08004959
 8004904:	0800496d 	.word	0x0800496d
 8004908:	080048e9 	.word	0x080048e9
 800490c:	080048e9 	.word	0x080048e9
 8004910:	080048e9 	.word	0x080048e9
 8004914:	080048e9 	.word	0x080048e9
 8004918:	0800496d 	.word	0x0800496d
 800491c:	080048e9 	.word	0x080048e9
 8004920:	080048e9 	.word	0x080048e9
 8004924:	080048e9 	.word	0x080048e9
 8004928:	080048e9 	.word	0x080048e9
 800492c:	08004a6b 	.word	0x08004a6b
 8004930:	08004997 	.word	0x08004997
 8004934:	08004a25 	.word	0x08004a25
 8004938:	080048e9 	.word	0x080048e9
 800493c:	080048e9 	.word	0x080048e9
 8004940:	08004a8d 	.word	0x08004a8d
 8004944:	080048e9 	.word	0x080048e9
 8004948:	08004997 	.word	0x08004997
 800494c:	080048e9 	.word	0x080048e9
 8004950:	080048e9 	.word	0x080048e9
 8004954:	08004a2d 	.word	0x08004a2d
 8004958:	6833      	ldr	r3, [r6, #0]
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6032      	str	r2, [r6, #0]
 8004960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004968:	2301      	movs	r3, #1
 800496a:	e09c      	b.n	8004aa6 <_printf_i+0x1e6>
 800496c:	6833      	ldr	r3, [r6, #0]
 800496e:	6820      	ldr	r0, [r4, #0]
 8004970:	1d19      	adds	r1, r3, #4
 8004972:	6031      	str	r1, [r6, #0]
 8004974:	0606      	lsls	r6, r0, #24
 8004976:	d501      	bpl.n	800497c <_printf_i+0xbc>
 8004978:	681d      	ldr	r5, [r3, #0]
 800497a:	e003      	b.n	8004984 <_printf_i+0xc4>
 800497c:	0645      	lsls	r5, r0, #25
 800497e:	d5fb      	bpl.n	8004978 <_printf_i+0xb8>
 8004980:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004984:	2d00      	cmp	r5, #0
 8004986:	da03      	bge.n	8004990 <_printf_i+0xd0>
 8004988:	232d      	movs	r3, #45	@ 0x2d
 800498a:	426d      	negs	r5, r5
 800498c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004990:	4858      	ldr	r0, [pc, #352]	@ (8004af4 <_printf_i+0x234>)
 8004992:	230a      	movs	r3, #10
 8004994:	e011      	b.n	80049ba <_printf_i+0xfa>
 8004996:	6821      	ldr	r1, [r4, #0]
 8004998:	6833      	ldr	r3, [r6, #0]
 800499a:	0608      	lsls	r0, r1, #24
 800499c:	f853 5b04 	ldr.w	r5, [r3], #4
 80049a0:	d402      	bmi.n	80049a8 <_printf_i+0xe8>
 80049a2:	0649      	lsls	r1, r1, #25
 80049a4:	bf48      	it	mi
 80049a6:	b2ad      	uxthmi	r5, r5
 80049a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80049aa:	4852      	ldr	r0, [pc, #328]	@ (8004af4 <_printf_i+0x234>)
 80049ac:	6033      	str	r3, [r6, #0]
 80049ae:	bf14      	ite	ne
 80049b0:	230a      	movne	r3, #10
 80049b2:	2308      	moveq	r3, #8
 80049b4:	2100      	movs	r1, #0
 80049b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049ba:	6866      	ldr	r6, [r4, #4]
 80049bc:	60a6      	str	r6, [r4, #8]
 80049be:	2e00      	cmp	r6, #0
 80049c0:	db05      	blt.n	80049ce <_printf_i+0x10e>
 80049c2:	6821      	ldr	r1, [r4, #0]
 80049c4:	432e      	orrs	r6, r5
 80049c6:	f021 0104 	bic.w	r1, r1, #4
 80049ca:	6021      	str	r1, [r4, #0]
 80049cc:	d04b      	beq.n	8004a66 <_printf_i+0x1a6>
 80049ce:	4616      	mov	r6, r2
 80049d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80049d4:	fb03 5711 	mls	r7, r3, r1, r5
 80049d8:	5dc7      	ldrb	r7, [r0, r7]
 80049da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049de:	462f      	mov	r7, r5
 80049e0:	42bb      	cmp	r3, r7
 80049e2:	460d      	mov	r5, r1
 80049e4:	d9f4      	bls.n	80049d0 <_printf_i+0x110>
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d10b      	bne.n	8004a02 <_printf_i+0x142>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	07df      	lsls	r7, r3, #31
 80049ee:	d508      	bpl.n	8004a02 <_printf_i+0x142>
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	6861      	ldr	r1, [r4, #4]
 80049f4:	4299      	cmp	r1, r3
 80049f6:	bfde      	ittt	le
 80049f8:	2330      	movle	r3, #48	@ 0x30
 80049fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a02:	1b92      	subs	r2, r2, r6
 8004a04:	6122      	str	r2, [r4, #16]
 8004a06:	f8cd a000 	str.w	sl, [sp]
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	aa03      	add	r2, sp, #12
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4640      	mov	r0, r8
 8004a12:	f7ff fee7 	bl	80047e4 <_printf_common>
 8004a16:	3001      	adds	r0, #1
 8004a18:	d14a      	bne.n	8004ab0 <_printf_i+0x1f0>
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	b004      	add	sp, #16
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f043 0320 	orr.w	r3, r3, #32
 8004a2a:	6023      	str	r3, [r4, #0]
 8004a2c:	4832      	ldr	r0, [pc, #200]	@ (8004af8 <_printf_i+0x238>)
 8004a2e:	2778      	movs	r7, #120	@ 0x78
 8004a30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6831      	ldr	r1, [r6, #0]
 8004a38:	061f      	lsls	r7, r3, #24
 8004a3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a3e:	d402      	bmi.n	8004a46 <_printf_i+0x186>
 8004a40:	065f      	lsls	r7, r3, #25
 8004a42:	bf48      	it	mi
 8004a44:	b2ad      	uxthmi	r5, r5
 8004a46:	6031      	str	r1, [r6, #0]
 8004a48:	07d9      	lsls	r1, r3, #31
 8004a4a:	bf44      	itt	mi
 8004a4c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a50:	6023      	strmi	r3, [r4, #0]
 8004a52:	b11d      	cbz	r5, 8004a5c <_printf_i+0x19c>
 8004a54:	2310      	movs	r3, #16
 8004a56:	e7ad      	b.n	80049b4 <_printf_i+0xf4>
 8004a58:	4826      	ldr	r0, [pc, #152]	@ (8004af4 <_printf_i+0x234>)
 8004a5a:	e7e9      	b.n	8004a30 <_printf_i+0x170>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	f023 0320 	bic.w	r3, r3, #32
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	e7f6      	b.n	8004a54 <_printf_i+0x194>
 8004a66:	4616      	mov	r6, r2
 8004a68:	e7bd      	b.n	80049e6 <_printf_i+0x126>
 8004a6a:	6833      	ldr	r3, [r6, #0]
 8004a6c:	6825      	ldr	r5, [r4, #0]
 8004a6e:	6961      	ldr	r1, [r4, #20]
 8004a70:	1d18      	adds	r0, r3, #4
 8004a72:	6030      	str	r0, [r6, #0]
 8004a74:	062e      	lsls	r6, r5, #24
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	d501      	bpl.n	8004a7e <_printf_i+0x1be>
 8004a7a:	6019      	str	r1, [r3, #0]
 8004a7c:	e002      	b.n	8004a84 <_printf_i+0x1c4>
 8004a7e:	0668      	lsls	r0, r5, #25
 8004a80:	d5fb      	bpl.n	8004a7a <_printf_i+0x1ba>
 8004a82:	8019      	strh	r1, [r3, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	6123      	str	r3, [r4, #16]
 8004a88:	4616      	mov	r6, r2
 8004a8a:	e7bc      	b.n	8004a06 <_printf_i+0x146>
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	1d1a      	adds	r2, r3, #4
 8004a90:	6032      	str	r2, [r6, #0]
 8004a92:	681e      	ldr	r6, [r3, #0]
 8004a94:	6862      	ldr	r2, [r4, #4]
 8004a96:	2100      	movs	r1, #0
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f7fb fbb9 	bl	8000210 <memchr>
 8004a9e:	b108      	cbz	r0, 8004aa4 <_printf_i+0x1e4>
 8004aa0:	1b80      	subs	r0, r0, r6
 8004aa2:	6060      	str	r0, [r4, #4]
 8004aa4:	6863      	ldr	r3, [r4, #4]
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aae:	e7aa      	b.n	8004a06 <_printf_i+0x146>
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	4632      	mov	r2, r6
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	4640      	mov	r0, r8
 8004ab8:	47d0      	blx	sl
 8004aba:	3001      	adds	r0, #1
 8004abc:	d0ad      	beq.n	8004a1a <_printf_i+0x15a>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	079b      	lsls	r3, r3, #30
 8004ac2:	d413      	bmi.n	8004aec <_printf_i+0x22c>
 8004ac4:	68e0      	ldr	r0, [r4, #12]
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	4298      	cmp	r0, r3
 8004aca:	bfb8      	it	lt
 8004acc:	4618      	movlt	r0, r3
 8004ace:	e7a6      	b.n	8004a1e <_printf_i+0x15e>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	47d0      	blx	sl
 8004ada:	3001      	adds	r0, #1
 8004adc:	d09d      	beq.n	8004a1a <_printf_i+0x15a>
 8004ade:	3501      	adds	r5, #1
 8004ae0:	68e3      	ldr	r3, [r4, #12]
 8004ae2:	9903      	ldr	r1, [sp, #12]
 8004ae4:	1a5b      	subs	r3, r3, r1
 8004ae6:	42ab      	cmp	r3, r5
 8004ae8:	dcf2      	bgt.n	8004ad0 <_printf_i+0x210>
 8004aea:	e7eb      	b.n	8004ac4 <_printf_i+0x204>
 8004aec:	2500      	movs	r5, #0
 8004aee:	f104 0619 	add.w	r6, r4, #25
 8004af2:	e7f5      	b.n	8004ae0 <_printf_i+0x220>
 8004af4:	0800a44a 	.word	0x0800a44a
 8004af8:	0800a45b 	.word	0x0800a45b

08004afc <_scanf_float>:
 8004afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b00:	b087      	sub	sp, #28
 8004b02:	4691      	mov	r9, r2
 8004b04:	9303      	str	r3, [sp, #12]
 8004b06:	688b      	ldr	r3, [r1, #8]
 8004b08:	1e5a      	subs	r2, r3, #1
 8004b0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004b0e:	bf81      	itttt	hi
 8004b10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004b14:	eb03 0b05 	addhi.w	fp, r3, r5
 8004b18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004b1c:	608b      	strhi	r3, [r1, #8]
 8004b1e:	680b      	ldr	r3, [r1, #0]
 8004b20:	460a      	mov	r2, r1
 8004b22:	f04f 0500 	mov.w	r5, #0
 8004b26:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004b2a:	f842 3b1c 	str.w	r3, [r2], #28
 8004b2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004b32:	4680      	mov	r8, r0
 8004b34:	460c      	mov	r4, r1
 8004b36:	bf98      	it	ls
 8004b38:	f04f 0b00 	movls.w	fp, #0
 8004b3c:	9201      	str	r2, [sp, #4]
 8004b3e:	4616      	mov	r6, r2
 8004b40:	46aa      	mov	sl, r5
 8004b42:	462f      	mov	r7, r5
 8004b44:	9502      	str	r5, [sp, #8]
 8004b46:	68a2      	ldr	r2, [r4, #8]
 8004b48:	b15a      	cbz	r2, 8004b62 <_scanf_float+0x66>
 8004b4a:	f8d9 3000 	ldr.w	r3, [r9]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b4e      	cmp	r3, #78	@ 0x4e
 8004b52:	d863      	bhi.n	8004c1c <_scanf_float+0x120>
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d83b      	bhi.n	8004bd0 <_scanf_float+0xd4>
 8004b58:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004b5c:	b2c8      	uxtb	r0, r1
 8004b5e:	280e      	cmp	r0, #14
 8004b60:	d939      	bls.n	8004bd6 <_scanf_float+0xda>
 8004b62:	b11f      	cbz	r7, 8004b6c <_scanf_float+0x70>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b70:	f1ba 0f01 	cmp.w	sl, #1
 8004b74:	f200 8114 	bhi.w	8004da0 <_scanf_float+0x2a4>
 8004b78:	9b01      	ldr	r3, [sp, #4]
 8004b7a:	429e      	cmp	r6, r3
 8004b7c:	f200 8105 	bhi.w	8004d8a <_scanf_float+0x28e>
 8004b80:	2001      	movs	r0, #1
 8004b82:	b007      	add	sp, #28
 8004b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b88:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004b8c:	2a0d      	cmp	r2, #13
 8004b8e:	d8e8      	bhi.n	8004b62 <_scanf_float+0x66>
 8004b90:	a101      	add	r1, pc, #4	@ (adr r1, 8004b98 <_scanf_float+0x9c>)
 8004b92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004ce1 	.word	0x08004ce1
 8004b9c:	08004b63 	.word	0x08004b63
 8004ba0:	08004b63 	.word	0x08004b63
 8004ba4:	08004b63 	.word	0x08004b63
 8004ba8:	08004d3d 	.word	0x08004d3d
 8004bac:	08004d17 	.word	0x08004d17
 8004bb0:	08004b63 	.word	0x08004b63
 8004bb4:	08004b63 	.word	0x08004b63
 8004bb8:	08004cef 	.word	0x08004cef
 8004bbc:	08004b63 	.word	0x08004b63
 8004bc0:	08004b63 	.word	0x08004b63
 8004bc4:	08004b63 	.word	0x08004b63
 8004bc8:	08004b63 	.word	0x08004b63
 8004bcc:	08004cab 	.word	0x08004cab
 8004bd0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004bd4:	e7da      	b.n	8004b8c <_scanf_float+0x90>
 8004bd6:	290e      	cmp	r1, #14
 8004bd8:	d8c3      	bhi.n	8004b62 <_scanf_float+0x66>
 8004bda:	a001      	add	r0, pc, #4	@ (adr r0, 8004be0 <_scanf_float+0xe4>)
 8004bdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004be0:	08004c9b 	.word	0x08004c9b
 8004be4:	08004b63 	.word	0x08004b63
 8004be8:	08004c9b 	.word	0x08004c9b
 8004bec:	08004d2b 	.word	0x08004d2b
 8004bf0:	08004b63 	.word	0x08004b63
 8004bf4:	08004c3d 	.word	0x08004c3d
 8004bf8:	08004c81 	.word	0x08004c81
 8004bfc:	08004c81 	.word	0x08004c81
 8004c00:	08004c81 	.word	0x08004c81
 8004c04:	08004c81 	.word	0x08004c81
 8004c08:	08004c81 	.word	0x08004c81
 8004c0c:	08004c81 	.word	0x08004c81
 8004c10:	08004c81 	.word	0x08004c81
 8004c14:	08004c81 	.word	0x08004c81
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004c1e:	d809      	bhi.n	8004c34 <_scanf_float+0x138>
 8004c20:	2b60      	cmp	r3, #96	@ 0x60
 8004c22:	d8b1      	bhi.n	8004b88 <_scanf_float+0x8c>
 8004c24:	2b54      	cmp	r3, #84	@ 0x54
 8004c26:	d07b      	beq.n	8004d20 <_scanf_float+0x224>
 8004c28:	2b59      	cmp	r3, #89	@ 0x59
 8004c2a:	d19a      	bne.n	8004b62 <_scanf_float+0x66>
 8004c2c:	2d07      	cmp	r5, #7
 8004c2e:	d198      	bne.n	8004b62 <_scanf_float+0x66>
 8004c30:	2508      	movs	r5, #8
 8004c32:	e02f      	b.n	8004c94 <_scanf_float+0x198>
 8004c34:	2b74      	cmp	r3, #116	@ 0x74
 8004c36:	d073      	beq.n	8004d20 <_scanf_float+0x224>
 8004c38:	2b79      	cmp	r3, #121	@ 0x79
 8004c3a:	e7f6      	b.n	8004c2a <_scanf_float+0x12e>
 8004c3c:	6821      	ldr	r1, [r4, #0]
 8004c3e:	05c8      	lsls	r0, r1, #23
 8004c40:	d51e      	bpl.n	8004c80 <_scanf_float+0x184>
 8004c42:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004c46:	6021      	str	r1, [r4, #0]
 8004c48:	3701      	adds	r7, #1
 8004c4a:	f1bb 0f00 	cmp.w	fp, #0
 8004c4e:	d003      	beq.n	8004c58 <_scanf_float+0x15c>
 8004c50:	3201      	adds	r2, #1
 8004c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c56:	60a2      	str	r2, [r4, #8]
 8004c58:	68a3      	ldr	r3, [r4, #8]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	3301      	adds	r3, #1
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f8c9 3004 	str.w	r3, [r9, #4]
 8004c70:	f340 8082 	ble.w	8004d78 <_scanf_float+0x27c>
 8004c74:	f8d9 3000 	ldr.w	r3, [r9]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f8c9 3000 	str.w	r3, [r9]
 8004c7e:	e762      	b.n	8004b46 <_scanf_float+0x4a>
 8004c80:	eb1a 0105 	adds.w	r1, sl, r5
 8004c84:	f47f af6d 	bne.w	8004b62 <_scanf_float+0x66>
 8004c88:	6822      	ldr	r2, [r4, #0]
 8004c8a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004c8e:	6022      	str	r2, [r4, #0]
 8004c90:	460d      	mov	r5, r1
 8004c92:	468a      	mov	sl, r1
 8004c94:	f806 3b01 	strb.w	r3, [r6], #1
 8004c98:	e7de      	b.n	8004c58 <_scanf_float+0x15c>
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	0610      	lsls	r0, r2, #24
 8004c9e:	f57f af60 	bpl.w	8004b62 <_scanf_float+0x66>
 8004ca2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ca6:	6022      	str	r2, [r4, #0]
 8004ca8:	e7f4      	b.n	8004c94 <_scanf_float+0x198>
 8004caa:	f1ba 0f00 	cmp.w	sl, #0
 8004cae:	d10c      	bne.n	8004cca <_scanf_float+0x1ce>
 8004cb0:	b977      	cbnz	r7, 8004cd0 <_scanf_float+0x1d4>
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004cb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004cbc:	d108      	bne.n	8004cd0 <_scanf_float+0x1d4>
 8004cbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004cc2:	6022      	str	r2, [r4, #0]
 8004cc4:	f04f 0a01 	mov.w	sl, #1
 8004cc8:	e7e4      	b.n	8004c94 <_scanf_float+0x198>
 8004cca:	f1ba 0f02 	cmp.w	sl, #2
 8004cce:	d050      	beq.n	8004d72 <_scanf_float+0x276>
 8004cd0:	2d01      	cmp	r5, #1
 8004cd2:	d002      	beq.n	8004cda <_scanf_float+0x1de>
 8004cd4:	2d04      	cmp	r5, #4
 8004cd6:	f47f af44 	bne.w	8004b62 <_scanf_float+0x66>
 8004cda:	3501      	adds	r5, #1
 8004cdc:	b2ed      	uxtb	r5, r5
 8004cde:	e7d9      	b.n	8004c94 <_scanf_float+0x198>
 8004ce0:	f1ba 0f01 	cmp.w	sl, #1
 8004ce4:	f47f af3d 	bne.w	8004b62 <_scanf_float+0x66>
 8004ce8:	f04f 0a02 	mov.w	sl, #2
 8004cec:	e7d2      	b.n	8004c94 <_scanf_float+0x198>
 8004cee:	b975      	cbnz	r5, 8004d0e <_scanf_float+0x212>
 8004cf0:	2f00      	cmp	r7, #0
 8004cf2:	f47f af37 	bne.w	8004b64 <_scanf_float+0x68>
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004cfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004d00:	f040 8103 	bne.w	8004f0a <_scanf_float+0x40e>
 8004d04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004d08:	6022      	str	r2, [r4, #0]
 8004d0a:	2501      	movs	r5, #1
 8004d0c:	e7c2      	b.n	8004c94 <_scanf_float+0x198>
 8004d0e:	2d03      	cmp	r5, #3
 8004d10:	d0e3      	beq.n	8004cda <_scanf_float+0x1de>
 8004d12:	2d05      	cmp	r5, #5
 8004d14:	e7df      	b.n	8004cd6 <_scanf_float+0x1da>
 8004d16:	2d02      	cmp	r5, #2
 8004d18:	f47f af23 	bne.w	8004b62 <_scanf_float+0x66>
 8004d1c:	2503      	movs	r5, #3
 8004d1e:	e7b9      	b.n	8004c94 <_scanf_float+0x198>
 8004d20:	2d06      	cmp	r5, #6
 8004d22:	f47f af1e 	bne.w	8004b62 <_scanf_float+0x66>
 8004d26:	2507      	movs	r5, #7
 8004d28:	e7b4      	b.n	8004c94 <_scanf_float+0x198>
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	0591      	lsls	r1, r2, #22
 8004d2e:	f57f af18 	bpl.w	8004b62 <_scanf_float+0x66>
 8004d32:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004d36:	6022      	str	r2, [r4, #0]
 8004d38:	9702      	str	r7, [sp, #8]
 8004d3a:	e7ab      	b.n	8004c94 <_scanf_float+0x198>
 8004d3c:	6822      	ldr	r2, [r4, #0]
 8004d3e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004d42:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004d46:	d005      	beq.n	8004d54 <_scanf_float+0x258>
 8004d48:	0550      	lsls	r0, r2, #21
 8004d4a:	f57f af0a 	bpl.w	8004b62 <_scanf_float+0x66>
 8004d4e:	2f00      	cmp	r7, #0
 8004d50:	f000 80db 	beq.w	8004f0a <_scanf_float+0x40e>
 8004d54:	0591      	lsls	r1, r2, #22
 8004d56:	bf58      	it	pl
 8004d58:	9902      	ldrpl	r1, [sp, #8]
 8004d5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004d5e:	bf58      	it	pl
 8004d60:	1a79      	subpl	r1, r7, r1
 8004d62:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004d66:	bf58      	it	pl
 8004d68:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004d6c:	6022      	str	r2, [r4, #0]
 8004d6e:	2700      	movs	r7, #0
 8004d70:	e790      	b.n	8004c94 <_scanf_float+0x198>
 8004d72:	f04f 0a03 	mov.w	sl, #3
 8004d76:	e78d      	b.n	8004c94 <_scanf_float+0x198>
 8004d78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	4640      	mov	r0, r8
 8004d80:	4798      	blx	r3
 8004d82:	2800      	cmp	r0, #0
 8004d84:	f43f aedf 	beq.w	8004b46 <_scanf_float+0x4a>
 8004d88:	e6eb      	b.n	8004b62 <_scanf_float+0x66>
 8004d8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d92:	464a      	mov	r2, r9
 8004d94:	4640      	mov	r0, r8
 8004d96:	4798      	blx	r3
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	e6eb      	b.n	8004b78 <_scanf_float+0x7c>
 8004da0:	1e6b      	subs	r3, r5, #1
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d824      	bhi.n	8004df0 <_scanf_float+0x2f4>
 8004da6:	2d02      	cmp	r5, #2
 8004da8:	d836      	bhi.n	8004e18 <_scanf_float+0x31c>
 8004daa:	9b01      	ldr	r3, [sp, #4]
 8004dac:	429e      	cmp	r6, r3
 8004dae:	f67f aee7 	bls.w	8004b80 <_scanf_float+0x84>
 8004db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004db6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004dba:	464a      	mov	r2, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	4798      	blx	r3
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	e7f0      	b.n	8004daa <_scanf_float+0x2ae>
 8004dc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004dcc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004dd0:	464a      	mov	r2, r9
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4798      	blx	r3
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	6123      	str	r3, [r4, #16]
 8004ddc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004de0:	fa5f fa8a 	uxtb.w	sl, sl
 8004de4:	f1ba 0f02 	cmp.w	sl, #2
 8004de8:	d1ee      	bne.n	8004dc8 <_scanf_float+0x2cc>
 8004dea:	3d03      	subs	r5, #3
 8004dec:	b2ed      	uxtb	r5, r5
 8004dee:	1b76      	subs	r6, r6, r5
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	05da      	lsls	r2, r3, #23
 8004df4:	d530      	bpl.n	8004e58 <_scanf_float+0x35c>
 8004df6:	055b      	lsls	r3, r3, #21
 8004df8:	d511      	bpl.n	8004e1e <_scanf_float+0x322>
 8004dfa:	9b01      	ldr	r3, [sp, #4]
 8004dfc:	429e      	cmp	r6, r3
 8004dfe:	f67f aebf 	bls.w	8004b80 <_scanf_float+0x84>
 8004e02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e0a:	464a      	mov	r2, r9
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	4798      	blx	r3
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	6123      	str	r3, [r4, #16]
 8004e16:	e7f0      	b.n	8004dfa <_scanf_float+0x2fe>
 8004e18:	46aa      	mov	sl, r5
 8004e1a:	46b3      	mov	fp, r6
 8004e1c:	e7de      	b.n	8004ddc <_scanf_float+0x2e0>
 8004e1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004e22:	6923      	ldr	r3, [r4, #16]
 8004e24:	2965      	cmp	r1, #101	@ 0x65
 8004e26:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	d00c      	beq.n	8004e4c <_scanf_float+0x350>
 8004e32:	2945      	cmp	r1, #69	@ 0x45
 8004e34:	d00a      	beq.n	8004e4c <_scanf_float+0x350>
 8004e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e3a:	464a      	mov	r2, r9
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	4798      	blx	r3
 8004e40:	6923      	ldr	r3, [r4, #16]
 8004e42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	1eb5      	subs	r5, r6, #2
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e50:	464a      	mov	r2, r9
 8004e52:	4640      	mov	r0, r8
 8004e54:	4798      	blx	r3
 8004e56:	462e      	mov	r6, r5
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	f012 0210 	ands.w	r2, r2, #16
 8004e5e:	d001      	beq.n	8004e64 <_scanf_float+0x368>
 8004e60:	2000      	movs	r0, #0
 8004e62:	e68e      	b.n	8004b82 <_scanf_float+0x86>
 8004e64:	7032      	strb	r2, [r6, #0]
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e70:	d125      	bne.n	8004ebe <_scanf_float+0x3c2>
 8004e72:	9b02      	ldr	r3, [sp, #8]
 8004e74:	429f      	cmp	r7, r3
 8004e76:	d00a      	beq.n	8004e8e <_scanf_float+0x392>
 8004e78:	1bda      	subs	r2, r3, r7
 8004e7a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004e7e:	429e      	cmp	r6, r3
 8004e80:	bf28      	it	cs
 8004e82:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004e86:	4922      	ldr	r1, [pc, #136]	@ (8004f10 <_scanf_float+0x414>)
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f000 f919 	bl	80050c0 <siprintf>
 8004e8e:	9901      	ldr	r1, [sp, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	4640      	mov	r0, r8
 8004e94:	f002 fc04 	bl	80076a0 <_strtod_r>
 8004e98:	9b03      	ldr	r3, [sp, #12]
 8004e9a:	6821      	ldr	r1, [r4, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f011 0f02 	tst.w	r1, #2
 8004ea2:	ec57 6b10 	vmov	r6, r7, d0
 8004ea6:	f103 0204 	add.w	r2, r3, #4
 8004eaa:	d015      	beq.n	8004ed8 <_scanf_float+0x3dc>
 8004eac:	9903      	ldr	r1, [sp, #12]
 8004eae:	600a      	str	r2, [r1, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	e9c3 6700 	strd	r6, r7, [r3]
 8004eb6:	68e3      	ldr	r3, [r4, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60e3      	str	r3, [r4, #12]
 8004ebc:	e7d0      	b.n	8004e60 <_scanf_float+0x364>
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0e4      	beq.n	8004e8e <_scanf_float+0x392>
 8004ec4:	9905      	ldr	r1, [sp, #20]
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	3101      	adds	r1, #1
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f002 fc68 	bl	80077a0 <_strtol_r>
 8004ed0:	9b04      	ldr	r3, [sp, #16]
 8004ed2:	9e05      	ldr	r6, [sp, #20]
 8004ed4:	1ac2      	subs	r2, r0, r3
 8004ed6:	e7d0      	b.n	8004e7a <_scanf_float+0x37e>
 8004ed8:	f011 0f04 	tst.w	r1, #4
 8004edc:	9903      	ldr	r1, [sp, #12]
 8004ede:	600a      	str	r2, [r1, #0]
 8004ee0:	d1e6      	bne.n	8004eb0 <_scanf_float+0x3b4>
 8004ee2:	681d      	ldr	r5, [r3, #0]
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	4630      	mov	r0, r6
 8004eea:	4639      	mov	r1, r7
 8004eec:	f7fb fe3e 	bl	8000b6c <__aeabi_dcmpun>
 8004ef0:	b128      	cbz	r0, 8004efe <_scanf_float+0x402>
 8004ef2:	4808      	ldr	r0, [pc, #32]	@ (8004f14 <_scanf_float+0x418>)
 8004ef4:	f000 f9ca 	bl	800528c <nanf>
 8004ef8:	ed85 0a00 	vstr	s0, [r5]
 8004efc:	e7db      	b.n	8004eb6 <_scanf_float+0x3ba>
 8004efe:	4630      	mov	r0, r6
 8004f00:	4639      	mov	r1, r7
 8004f02:	f7fb fe91 	bl	8000c28 <__aeabi_d2f>
 8004f06:	6028      	str	r0, [r5, #0]
 8004f08:	e7d5      	b.n	8004eb6 <_scanf_float+0x3ba>
 8004f0a:	2700      	movs	r7, #0
 8004f0c:	e62e      	b.n	8004b6c <_scanf_float+0x70>
 8004f0e:	bf00      	nop
 8004f10:	0800a46c 	.word	0x0800a46c
 8004f14:	0800a5ad 	.word	0x0800a5ad

08004f18 <std>:
 8004f18:	2300      	movs	r3, #0
 8004f1a:	b510      	push	{r4, lr}
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f26:	6083      	str	r3, [r0, #8]
 8004f28:	8181      	strh	r1, [r0, #12]
 8004f2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f2c:	81c2      	strh	r2, [r0, #14]
 8004f2e:	6183      	str	r3, [r0, #24]
 8004f30:	4619      	mov	r1, r3
 8004f32:	2208      	movs	r2, #8
 8004f34:	305c      	adds	r0, #92	@ 0x5c
 8004f36:	f000 f928 	bl	800518a <memset>
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <std+0x58>)
 8004f3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <std+0x5c>)
 8004f40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <std+0x60>)
 8004f44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f46:	4b0d      	ldr	r3, [pc, #52]	@ (8004f7c <std+0x64>)
 8004f48:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f80 <std+0x68>)
 8004f4c:	6224      	str	r4, [r4, #32]
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d006      	beq.n	8004f60 <std+0x48>
 8004f52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f56:	4294      	cmp	r4, r2
 8004f58:	d002      	beq.n	8004f60 <std+0x48>
 8004f5a:	33d0      	adds	r3, #208	@ 0xd0
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	d105      	bne.n	8004f6c <std+0x54>
 8004f60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f68:	f000 b98c 	b.w	8005284 <__retarget_lock_init_recursive>
 8004f6c:	bd10      	pop	{r4, pc}
 8004f6e:	bf00      	nop
 8004f70:	08005105 	.word	0x08005105
 8004f74:	08005127 	.word	0x08005127
 8004f78:	0800515f 	.word	0x0800515f
 8004f7c:	08005183 	.word	0x08005183
 8004f80:	200002b4 	.word	0x200002b4

08004f84 <stdio_exit_handler>:
 8004f84:	4a02      	ldr	r2, [pc, #8]	@ (8004f90 <stdio_exit_handler+0xc>)
 8004f86:	4903      	ldr	r1, [pc, #12]	@ (8004f94 <stdio_exit_handler+0x10>)
 8004f88:	4803      	ldr	r0, [pc, #12]	@ (8004f98 <stdio_exit_handler+0x14>)
 8004f8a:	f000 b869 	b.w	8005060 <_fwalk_sglue>
 8004f8e:	bf00      	nop
 8004f90:	20000010 	.word	0x20000010
 8004f94:	08007de1 	.word	0x08007de1
 8004f98:	20000020 	.word	0x20000020

08004f9c <cleanup_stdio>:
 8004f9c:	6841      	ldr	r1, [r0, #4]
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <cleanup_stdio+0x34>)
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	d001      	beq.n	8004fac <cleanup_stdio+0x10>
 8004fa8:	f002 ff1a 	bl	8007de0 <_fflush_r>
 8004fac:	68a1      	ldr	r1, [r4, #8]
 8004fae:	4b09      	ldr	r3, [pc, #36]	@ (8004fd4 <cleanup_stdio+0x38>)
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	d002      	beq.n	8004fba <cleanup_stdio+0x1e>
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f002 ff13 	bl	8007de0 <_fflush_r>
 8004fba:	68e1      	ldr	r1, [r4, #12]
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <cleanup_stdio+0x3c>)
 8004fbe:	4299      	cmp	r1, r3
 8004fc0:	d004      	beq.n	8004fcc <cleanup_stdio+0x30>
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc8:	f002 bf0a 	b.w	8007de0 <_fflush_r>
 8004fcc:	bd10      	pop	{r4, pc}
 8004fce:	bf00      	nop
 8004fd0:	200002b4 	.word	0x200002b4
 8004fd4:	2000031c 	.word	0x2000031c
 8004fd8:	20000384 	.word	0x20000384

08004fdc <global_stdio_init.part.0>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	4b0b      	ldr	r3, [pc, #44]	@ (800500c <global_stdio_init.part.0+0x30>)
 8004fe0:	4c0b      	ldr	r4, [pc, #44]	@ (8005010 <global_stdio_init.part.0+0x34>)
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <global_stdio_init.part.0+0x38>)
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2104      	movs	r1, #4
 8004fec:	f7ff ff94 	bl	8004f18 <std>
 8004ff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	2109      	movs	r1, #9
 8004ff8:	f7ff ff8e 	bl	8004f18 <std>
 8004ffc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005000:	2202      	movs	r2, #2
 8005002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005006:	2112      	movs	r1, #18
 8005008:	f7ff bf86 	b.w	8004f18 <std>
 800500c:	200003ec 	.word	0x200003ec
 8005010:	200002b4 	.word	0x200002b4
 8005014:	08004f85 	.word	0x08004f85

08005018 <__sfp_lock_acquire>:
 8005018:	4801      	ldr	r0, [pc, #4]	@ (8005020 <__sfp_lock_acquire+0x8>)
 800501a:	f000 b934 	b.w	8005286 <__retarget_lock_acquire_recursive>
 800501e:	bf00      	nop
 8005020:	200003f5 	.word	0x200003f5

08005024 <__sfp_lock_release>:
 8005024:	4801      	ldr	r0, [pc, #4]	@ (800502c <__sfp_lock_release+0x8>)
 8005026:	f000 b92f 	b.w	8005288 <__retarget_lock_release_recursive>
 800502a:	bf00      	nop
 800502c:	200003f5 	.word	0x200003f5

08005030 <__sinit>:
 8005030:	b510      	push	{r4, lr}
 8005032:	4604      	mov	r4, r0
 8005034:	f7ff fff0 	bl	8005018 <__sfp_lock_acquire>
 8005038:	6a23      	ldr	r3, [r4, #32]
 800503a:	b11b      	cbz	r3, 8005044 <__sinit+0x14>
 800503c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005040:	f7ff bff0 	b.w	8005024 <__sfp_lock_release>
 8005044:	4b04      	ldr	r3, [pc, #16]	@ (8005058 <__sinit+0x28>)
 8005046:	6223      	str	r3, [r4, #32]
 8005048:	4b04      	ldr	r3, [pc, #16]	@ (800505c <__sinit+0x2c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f5      	bne.n	800503c <__sinit+0xc>
 8005050:	f7ff ffc4 	bl	8004fdc <global_stdio_init.part.0>
 8005054:	e7f2      	b.n	800503c <__sinit+0xc>
 8005056:	bf00      	nop
 8005058:	08004f9d 	.word	0x08004f9d
 800505c:	200003ec 	.word	0x200003ec

08005060 <_fwalk_sglue>:
 8005060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005064:	4607      	mov	r7, r0
 8005066:	4688      	mov	r8, r1
 8005068:	4614      	mov	r4, r2
 800506a:	2600      	movs	r6, #0
 800506c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005070:	f1b9 0901 	subs.w	r9, r9, #1
 8005074:	d505      	bpl.n	8005082 <_fwalk_sglue+0x22>
 8005076:	6824      	ldr	r4, [r4, #0]
 8005078:	2c00      	cmp	r4, #0
 800507a:	d1f7      	bne.n	800506c <_fwalk_sglue+0xc>
 800507c:	4630      	mov	r0, r6
 800507e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d907      	bls.n	8005098 <_fwalk_sglue+0x38>
 8005088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800508c:	3301      	adds	r3, #1
 800508e:	d003      	beq.n	8005098 <_fwalk_sglue+0x38>
 8005090:	4629      	mov	r1, r5
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	4306      	orrs	r6, r0
 8005098:	3568      	adds	r5, #104	@ 0x68
 800509a:	e7e9      	b.n	8005070 <_fwalk_sglue+0x10>

0800509c <iprintf>:
 800509c:	b40f      	push	{r0, r1, r2, r3}
 800509e:	b507      	push	{r0, r1, r2, lr}
 80050a0:	4906      	ldr	r1, [pc, #24]	@ (80050bc <iprintf+0x20>)
 80050a2:	ab04      	add	r3, sp, #16
 80050a4:	6808      	ldr	r0, [r1, #0]
 80050a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050aa:	6881      	ldr	r1, [r0, #8]
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	f002 fcfb 	bl	8007aa8 <_vfiprintf_r>
 80050b2:	b003      	add	sp, #12
 80050b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b8:	b004      	add	sp, #16
 80050ba:	4770      	bx	lr
 80050bc:	2000001c 	.word	0x2000001c

080050c0 <siprintf>:
 80050c0:	b40e      	push	{r1, r2, r3}
 80050c2:	b510      	push	{r4, lr}
 80050c4:	b09d      	sub	sp, #116	@ 0x74
 80050c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80050c8:	9002      	str	r0, [sp, #8]
 80050ca:	9006      	str	r0, [sp, #24]
 80050cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050d0:	480a      	ldr	r0, [pc, #40]	@ (80050fc <siprintf+0x3c>)
 80050d2:	9107      	str	r1, [sp, #28]
 80050d4:	9104      	str	r1, [sp, #16]
 80050d6:	490a      	ldr	r1, [pc, #40]	@ (8005100 <siprintf+0x40>)
 80050d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050dc:	9105      	str	r1, [sp, #20]
 80050de:	2400      	movs	r4, #0
 80050e0:	a902      	add	r1, sp, #8
 80050e2:	6800      	ldr	r0, [r0, #0]
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80050e8:	f002 fbb8 	bl	800785c <_svfiprintf_r>
 80050ec:	9b02      	ldr	r3, [sp, #8]
 80050ee:	701c      	strb	r4, [r3, #0]
 80050f0:	b01d      	add	sp, #116	@ 0x74
 80050f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f6:	b003      	add	sp, #12
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	2000001c 	.word	0x2000001c
 8005100:	ffff0208 	.word	0xffff0208

08005104 <__sread>:
 8005104:	b510      	push	{r4, lr}
 8005106:	460c      	mov	r4, r1
 8005108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510c:	f000 f86c 	bl	80051e8 <_read_r>
 8005110:	2800      	cmp	r0, #0
 8005112:	bfab      	itete	ge
 8005114:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005116:	89a3      	ldrhlt	r3, [r4, #12]
 8005118:	181b      	addge	r3, r3, r0
 800511a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800511e:	bfac      	ite	ge
 8005120:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005122:	81a3      	strhlt	r3, [r4, #12]
 8005124:	bd10      	pop	{r4, pc}

08005126 <__swrite>:
 8005126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512a:	461f      	mov	r7, r3
 800512c:	898b      	ldrh	r3, [r1, #12]
 800512e:	05db      	lsls	r3, r3, #23
 8005130:	4605      	mov	r5, r0
 8005132:	460c      	mov	r4, r1
 8005134:	4616      	mov	r6, r2
 8005136:	d505      	bpl.n	8005144 <__swrite+0x1e>
 8005138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513c:	2302      	movs	r3, #2
 800513e:	2200      	movs	r2, #0
 8005140:	f000 f840 	bl	80051c4 <_lseek_r>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800514a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	4632      	mov	r2, r6
 8005152:	463b      	mov	r3, r7
 8005154:	4628      	mov	r0, r5
 8005156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800515a:	f000 b857 	b.w	800520c <_write_r>

0800515e <__sseek>:
 800515e:	b510      	push	{r4, lr}
 8005160:	460c      	mov	r4, r1
 8005162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005166:	f000 f82d 	bl	80051c4 <_lseek_r>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	bf15      	itete	ne
 8005170:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005172:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005176:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800517a:	81a3      	strheq	r3, [r4, #12]
 800517c:	bf18      	it	ne
 800517e:	81a3      	strhne	r3, [r4, #12]
 8005180:	bd10      	pop	{r4, pc}

08005182 <__sclose>:
 8005182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005186:	f000 b80d 	b.w	80051a4 <_close_r>

0800518a <memset>:
 800518a:	4402      	add	r2, r0
 800518c:	4603      	mov	r3, r0
 800518e:	4293      	cmp	r3, r2
 8005190:	d100      	bne.n	8005194 <memset+0xa>
 8005192:	4770      	bx	lr
 8005194:	f803 1b01 	strb.w	r1, [r3], #1
 8005198:	e7f9      	b.n	800518e <memset+0x4>
	...

0800519c <_localeconv_r>:
 800519c:	4800      	ldr	r0, [pc, #0]	@ (80051a0 <_localeconv_r+0x4>)
 800519e:	4770      	bx	lr
 80051a0:	2000015c 	.word	0x2000015c

080051a4 <_close_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	4d06      	ldr	r5, [pc, #24]	@ (80051c0 <_close_r+0x1c>)
 80051a8:	2300      	movs	r3, #0
 80051aa:	4604      	mov	r4, r0
 80051ac:	4608      	mov	r0, r1
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	f7fc ffc2 	bl	8002138 <_close>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_close_r+0x1a>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_close_r+0x1a>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	200003f0 	.word	0x200003f0

080051c4 <_lseek_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d07      	ldr	r5, [pc, #28]	@ (80051e4 <_lseek_r+0x20>)
 80051c8:	4604      	mov	r4, r0
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	602a      	str	r2, [r5, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7fc ffd7 	bl	8002186 <_lseek>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_lseek_r+0x1e>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_lseek_r+0x1e>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	200003f0 	.word	0x200003f0

080051e8 <_read_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	@ (8005208 <_read_r+0x20>)
 80051ec:	4604      	mov	r4, r0
 80051ee:	4608      	mov	r0, r1
 80051f0:	4611      	mov	r1, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	602a      	str	r2, [r5, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fc ff65 	bl	80020c6 <_read>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_read_r+0x1e>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_read_r+0x1e>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200003f0 	.word	0x200003f0

0800520c <_write_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	@ (800522c <_write_r+0x20>)
 8005210:	4604      	mov	r4, r0
 8005212:	4608      	mov	r0, r1
 8005214:	4611      	mov	r1, r2
 8005216:	2200      	movs	r2, #0
 8005218:	602a      	str	r2, [r5, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f7fc ff70 	bl	8002100 <_write>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_write_r+0x1e>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_write_r+0x1e>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	200003f0 	.word	0x200003f0

08005230 <__errno>:
 8005230:	4b01      	ldr	r3, [pc, #4]	@ (8005238 <__errno+0x8>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	2000001c 	.word	0x2000001c

0800523c <__libc_init_array>:
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	4d0d      	ldr	r5, [pc, #52]	@ (8005274 <__libc_init_array+0x38>)
 8005240:	4c0d      	ldr	r4, [pc, #52]	@ (8005278 <__libc_init_array+0x3c>)
 8005242:	1b64      	subs	r4, r4, r5
 8005244:	10a4      	asrs	r4, r4, #2
 8005246:	2600      	movs	r6, #0
 8005248:	42a6      	cmp	r6, r4
 800524a:	d109      	bne.n	8005260 <__libc_init_array+0x24>
 800524c:	4d0b      	ldr	r5, [pc, #44]	@ (800527c <__libc_init_array+0x40>)
 800524e:	4c0c      	ldr	r4, [pc, #48]	@ (8005280 <__libc_init_array+0x44>)
 8005250:	f003 fb78 	bl	8008944 <_init>
 8005254:	1b64      	subs	r4, r4, r5
 8005256:	10a4      	asrs	r4, r4, #2
 8005258:	2600      	movs	r6, #0
 800525a:	42a6      	cmp	r6, r4
 800525c:	d105      	bne.n	800526a <__libc_init_array+0x2e>
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	f855 3b04 	ldr.w	r3, [r5], #4
 8005264:	4798      	blx	r3
 8005266:	3601      	adds	r6, #1
 8005268:	e7ee      	b.n	8005248 <__libc_init_array+0xc>
 800526a:	f855 3b04 	ldr.w	r3, [r5], #4
 800526e:	4798      	blx	r3
 8005270:	3601      	adds	r6, #1
 8005272:	e7f2      	b.n	800525a <__libc_init_array+0x1e>
 8005274:	0800a86c 	.word	0x0800a86c
 8005278:	0800a86c 	.word	0x0800a86c
 800527c:	0800a86c 	.word	0x0800a86c
 8005280:	0800a870 	.word	0x0800a870

08005284 <__retarget_lock_init_recursive>:
 8005284:	4770      	bx	lr

08005286 <__retarget_lock_acquire_recursive>:
 8005286:	4770      	bx	lr

08005288 <__retarget_lock_release_recursive>:
 8005288:	4770      	bx	lr
	...

0800528c <nanf>:
 800528c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005294 <nanf+0x8>
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	7fc00000 	.word	0x7fc00000

08005298 <quorem>:
 8005298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	6903      	ldr	r3, [r0, #16]
 800529e:	690c      	ldr	r4, [r1, #16]
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	4607      	mov	r7, r0
 80052a4:	db7e      	blt.n	80053a4 <quorem+0x10c>
 80052a6:	3c01      	subs	r4, #1
 80052a8:	f101 0814 	add.w	r8, r1, #20
 80052ac:	00a3      	lsls	r3, r4, #2
 80052ae:	f100 0514 	add.w	r5, r0, #20
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052c2:	3301      	adds	r3, #1
 80052c4:	429a      	cmp	r2, r3
 80052c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80052ce:	d32e      	bcc.n	800532e <quorem+0x96>
 80052d0:	f04f 0a00 	mov.w	sl, #0
 80052d4:	46c4      	mov	ip, r8
 80052d6:	46ae      	mov	lr, r5
 80052d8:	46d3      	mov	fp, sl
 80052da:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052de:	b298      	uxth	r0, r3
 80052e0:	fb06 a000 	mla	r0, r6, r0, sl
 80052e4:	0c02      	lsrs	r2, r0, #16
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	fb06 2303 	mla	r3, r6, r3, r2
 80052ec:	f8de 2000 	ldr.w	r2, [lr]
 80052f0:	b280      	uxth	r0, r0
 80052f2:	b292      	uxth	r2, r2
 80052f4:	1a12      	subs	r2, r2, r0
 80052f6:	445a      	add	r2, fp
 80052f8:	f8de 0000 	ldr.w	r0, [lr]
 80052fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005300:	b29b      	uxth	r3, r3
 8005302:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005306:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800530a:	b292      	uxth	r2, r2
 800530c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005310:	45e1      	cmp	r9, ip
 8005312:	f84e 2b04 	str.w	r2, [lr], #4
 8005316:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800531a:	d2de      	bcs.n	80052da <quorem+0x42>
 800531c:	9b00      	ldr	r3, [sp, #0]
 800531e:	58eb      	ldr	r3, [r5, r3]
 8005320:	b92b      	cbnz	r3, 800532e <quorem+0x96>
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	3b04      	subs	r3, #4
 8005326:	429d      	cmp	r5, r3
 8005328:	461a      	mov	r2, r3
 800532a:	d32f      	bcc.n	800538c <quorem+0xf4>
 800532c:	613c      	str	r4, [r7, #16]
 800532e:	4638      	mov	r0, r7
 8005330:	f001 f9c6 	bl	80066c0 <__mcmp>
 8005334:	2800      	cmp	r0, #0
 8005336:	db25      	blt.n	8005384 <quorem+0xec>
 8005338:	4629      	mov	r1, r5
 800533a:	2000      	movs	r0, #0
 800533c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005340:	f8d1 c000 	ldr.w	ip, [r1]
 8005344:	fa1f fe82 	uxth.w	lr, r2
 8005348:	fa1f f38c 	uxth.w	r3, ip
 800534c:	eba3 030e 	sub.w	r3, r3, lr
 8005350:	4403      	add	r3, r0
 8005352:	0c12      	lsrs	r2, r2, #16
 8005354:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005358:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800535c:	b29b      	uxth	r3, r3
 800535e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005362:	45c1      	cmp	r9, r8
 8005364:	f841 3b04 	str.w	r3, [r1], #4
 8005368:	ea4f 4022 	mov.w	r0, r2, asr #16
 800536c:	d2e6      	bcs.n	800533c <quorem+0xa4>
 800536e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005376:	b922      	cbnz	r2, 8005382 <quorem+0xea>
 8005378:	3b04      	subs	r3, #4
 800537a:	429d      	cmp	r5, r3
 800537c:	461a      	mov	r2, r3
 800537e:	d30b      	bcc.n	8005398 <quorem+0x100>
 8005380:	613c      	str	r4, [r7, #16]
 8005382:	3601      	adds	r6, #1
 8005384:	4630      	mov	r0, r6
 8005386:	b003      	add	sp, #12
 8005388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	3b04      	subs	r3, #4
 8005390:	2a00      	cmp	r2, #0
 8005392:	d1cb      	bne.n	800532c <quorem+0x94>
 8005394:	3c01      	subs	r4, #1
 8005396:	e7c6      	b.n	8005326 <quorem+0x8e>
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	3b04      	subs	r3, #4
 800539c:	2a00      	cmp	r2, #0
 800539e:	d1ef      	bne.n	8005380 <quorem+0xe8>
 80053a0:	3c01      	subs	r4, #1
 80053a2:	e7ea      	b.n	800537a <quorem+0xe2>
 80053a4:	2000      	movs	r0, #0
 80053a6:	e7ee      	b.n	8005386 <quorem+0xee>

080053a8 <_dtoa_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	69c7      	ldr	r7, [r0, #28]
 80053ae:	b097      	sub	sp, #92	@ 0x5c
 80053b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80053b4:	ec55 4b10 	vmov	r4, r5, d0
 80053b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80053ba:	9107      	str	r1, [sp, #28]
 80053bc:	4681      	mov	r9, r0
 80053be:	920c      	str	r2, [sp, #48]	@ 0x30
 80053c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80053c2:	b97f      	cbnz	r7, 80053e4 <_dtoa_r+0x3c>
 80053c4:	2010      	movs	r0, #16
 80053c6:	f000 fe09 	bl	8005fdc <malloc>
 80053ca:	4602      	mov	r2, r0
 80053cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80053d0:	b920      	cbnz	r0, 80053dc <_dtoa_r+0x34>
 80053d2:	4ba9      	ldr	r3, [pc, #676]	@ (8005678 <_dtoa_r+0x2d0>)
 80053d4:	21ef      	movs	r1, #239	@ 0xef
 80053d6:	48a9      	ldr	r0, [pc, #676]	@ (800567c <_dtoa_r+0x2d4>)
 80053d8:	f002 fe12 	bl	8008000 <__assert_func>
 80053dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80053e0:	6007      	str	r7, [r0, #0]
 80053e2:	60c7      	str	r7, [r0, #12]
 80053e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	b159      	cbz	r1, 8005404 <_dtoa_r+0x5c>
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	604a      	str	r2, [r1, #4]
 80053f0:	2301      	movs	r3, #1
 80053f2:	4093      	lsls	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
 80053f6:	4648      	mov	r0, r9
 80053f8:	f000 fee6 	bl	80061c8 <_Bfree>
 80053fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	1e2b      	subs	r3, r5, #0
 8005406:	bfb9      	ittee	lt
 8005408:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800540c:	9305      	strlt	r3, [sp, #20]
 800540e:	2300      	movge	r3, #0
 8005410:	6033      	strge	r3, [r6, #0]
 8005412:	9f05      	ldr	r7, [sp, #20]
 8005414:	4b9a      	ldr	r3, [pc, #616]	@ (8005680 <_dtoa_r+0x2d8>)
 8005416:	bfbc      	itt	lt
 8005418:	2201      	movlt	r2, #1
 800541a:	6032      	strlt	r2, [r6, #0]
 800541c:	43bb      	bics	r3, r7
 800541e:	d112      	bne.n	8005446 <_dtoa_r+0x9e>
 8005420:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005422:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800542c:	4323      	orrs	r3, r4
 800542e:	f000 855a 	beq.w	8005ee6 <_dtoa_r+0xb3e>
 8005432:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005434:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005694 <_dtoa_r+0x2ec>
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 855c 	beq.w	8005ef6 <_dtoa_r+0xb4e>
 800543e:	f10a 0303 	add.w	r3, sl, #3
 8005442:	f000 bd56 	b.w	8005ef2 <_dtoa_r+0xb4a>
 8005446:	ed9d 7b04 	vldr	d7, [sp, #16]
 800544a:	2200      	movs	r2, #0
 800544c:	ec51 0b17 	vmov	r0, r1, d7
 8005450:	2300      	movs	r3, #0
 8005452:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005456:	f7fb fb57 	bl	8000b08 <__aeabi_dcmpeq>
 800545a:	4680      	mov	r8, r0
 800545c:	b158      	cbz	r0, 8005476 <_dtoa_r+0xce>
 800545e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005460:	2301      	movs	r3, #1
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005466:	b113      	cbz	r3, 800546e <_dtoa_r+0xc6>
 8005468:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800546a:	4b86      	ldr	r3, [pc, #536]	@ (8005684 <_dtoa_r+0x2dc>)
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005698 <_dtoa_r+0x2f0>
 8005472:	f000 bd40 	b.w	8005ef6 <_dtoa_r+0xb4e>
 8005476:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800547a:	aa14      	add	r2, sp, #80	@ 0x50
 800547c:	a915      	add	r1, sp, #84	@ 0x54
 800547e:	4648      	mov	r0, r9
 8005480:	f001 fa3e 	bl	8006900 <__d2b>
 8005484:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005488:	9002      	str	r0, [sp, #8]
 800548a:	2e00      	cmp	r6, #0
 800548c:	d078      	beq.n	8005580 <_dtoa_r+0x1d8>
 800548e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005490:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800549c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054a8:	4619      	mov	r1, r3
 80054aa:	2200      	movs	r2, #0
 80054ac:	4b76      	ldr	r3, [pc, #472]	@ (8005688 <_dtoa_r+0x2e0>)
 80054ae:	f7fa ff0b 	bl	80002c8 <__aeabi_dsub>
 80054b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005660 <_dtoa_r+0x2b8>)
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f7fb f8be 	bl	8000638 <__aeabi_dmul>
 80054bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005668 <_dtoa_r+0x2c0>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f7fa ff03 	bl	80002cc <__adddf3>
 80054c6:	4604      	mov	r4, r0
 80054c8:	4630      	mov	r0, r6
 80054ca:	460d      	mov	r5, r1
 80054cc:	f7fb f84a 	bl	8000564 <__aeabi_i2d>
 80054d0:	a367      	add	r3, pc, #412	@ (adr r3, 8005670 <_dtoa_r+0x2c8>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f7fb f8af 	bl	8000638 <__aeabi_dmul>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fa fef3 	bl	80002cc <__adddf3>
 80054e6:	4604      	mov	r4, r0
 80054e8:	460d      	mov	r5, r1
 80054ea:	f7fb fb55 	bl	8000b98 <__aeabi_d2iz>
 80054ee:	2200      	movs	r2, #0
 80054f0:	4607      	mov	r7, r0
 80054f2:	2300      	movs	r3, #0
 80054f4:	4620      	mov	r0, r4
 80054f6:	4629      	mov	r1, r5
 80054f8:	f7fb fb10 	bl	8000b1c <__aeabi_dcmplt>
 80054fc:	b140      	cbz	r0, 8005510 <_dtoa_r+0x168>
 80054fe:	4638      	mov	r0, r7
 8005500:	f7fb f830 	bl	8000564 <__aeabi_i2d>
 8005504:	4622      	mov	r2, r4
 8005506:	462b      	mov	r3, r5
 8005508:	f7fb fafe 	bl	8000b08 <__aeabi_dcmpeq>
 800550c:	b900      	cbnz	r0, 8005510 <_dtoa_r+0x168>
 800550e:	3f01      	subs	r7, #1
 8005510:	2f16      	cmp	r7, #22
 8005512:	d852      	bhi.n	80055ba <_dtoa_r+0x212>
 8005514:	4b5d      	ldr	r3, [pc, #372]	@ (800568c <_dtoa_r+0x2e4>)
 8005516:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005522:	f7fb fafb 	bl	8000b1c <__aeabi_dcmplt>
 8005526:	2800      	cmp	r0, #0
 8005528:	d049      	beq.n	80055be <_dtoa_r+0x216>
 800552a:	3f01      	subs	r7, #1
 800552c:	2300      	movs	r3, #0
 800552e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005530:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005532:	1b9b      	subs	r3, r3, r6
 8005534:	1e5a      	subs	r2, r3, #1
 8005536:	bf45      	ittet	mi
 8005538:	f1c3 0301 	rsbmi	r3, r3, #1
 800553c:	9300      	strmi	r3, [sp, #0]
 800553e:	2300      	movpl	r3, #0
 8005540:	2300      	movmi	r3, #0
 8005542:	9206      	str	r2, [sp, #24]
 8005544:	bf54      	ite	pl
 8005546:	9300      	strpl	r3, [sp, #0]
 8005548:	9306      	strmi	r3, [sp, #24]
 800554a:	2f00      	cmp	r7, #0
 800554c:	db39      	blt.n	80055c2 <_dtoa_r+0x21a>
 800554e:	9b06      	ldr	r3, [sp, #24]
 8005550:	970d      	str	r7, [sp, #52]	@ 0x34
 8005552:	443b      	add	r3, r7
 8005554:	9306      	str	r3, [sp, #24]
 8005556:	2300      	movs	r3, #0
 8005558:	9308      	str	r3, [sp, #32]
 800555a:	9b07      	ldr	r3, [sp, #28]
 800555c:	2b09      	cmp	r3, #9
 800555e:	d863      	bhi.n	8005628 <_dtoa_r+0x280>
 8005560:	2b05      	cmp	r3, #5
 8005562:	bfc4      	itt	gt
 8005564:	3b04      	subgt	r3, #4
 8005566:	9307      	strgt	r3, [sp, #28]
 8005568:	9b07      	ldr	r3, [sp, #28]
 800556a:	f1a3 0302 	sub.w	r3, r3, #2
 800556e:	bfcc      	ite	gt
 8005570:	2400      	movgt	r4, #0
 8005572:	2401      	movle	r4, #1
 8005574:	2b03      	cmp	r3, #3
 8005576:	d863      	bhi.n	8005640 <_dtoa_r+0x298>
 8005578:	e8df f003 	tbb	[pc, r3]
 800557c:	2b375452 	.word	0x2b375452
 8005580:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005584:	441e      	add	r6, r3
 8005586:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800558a:	2b20      	cmp	r3, #32
 800558c:	bfc1      	itttt	gt
 800558e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005592:	409f      	lslgt	r7, r3
 8005594:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005598:	fa24 f303 	lsrgt.w	r3, r4, r3
 800559c:	bfd6      	itet	le
 800559e:	f1c3 0320 	rsble	r3, r3, #32
 80055a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80055a6:	fa04 f003 	lslle.w	r0, r4, r3
 80055aa:	f7fa ffcb 	bl	8000544 <__aeabi_ui2d>
 80055ae:	2201      	movs	r2, #1
 80055b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055b4:	3e01      	subs	r6, #1
 80055b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80055b8:	e776      	b.n	80054a8 <_dtoa_r+0x100>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e7b7      	b.n	800552e <_dtoa_r+0x186>
 80055be:	9010      	str	r0, [sp, #64]	@ 0x40
 80055c0:	e7b6      	b.n	8005530 <_dtoa_r+0x188>
 80055c2:	9b00      	ldr	r3, [sp, #0]
 80055c4:	1bdb      	subs	r3, r3, r7
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	427b      	negs	r3, r7
 80055ca:	9308      	str	r3, [sp, #32]
 80055cc:	2300      	movs	r3, #0
 80055ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80055d0:	e7c3      	b.n	800555a <_dtoa_r+0x1b2>
 80055d2:	2301      	movs	r3, #1
 80055d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80055d8:	eb07 0b03 	add.w	fp, r7, r3
 80055dc:	f10b 0301 	add.w	r3, fp, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	bfb8      	it	lt
 80055e6:	2301      	movlt	r3, #1
 80055e8:	e006      	b.n	80055f8 <_dtoa_r+0x250>
 80055ea:	2301      	movs	r3, #1
 80055ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	dd28      	ble.n	8005646 <_dtoa_r+0x29e>
 80055f4:	469b      	mov	fp, r3
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80055fc:	2100      	movs	r1, #0
 80055fe:	2204      	movs	r2, #4
 8005600:	f102 0514 	add.w	r5, r2, #20
 8005604:	429d      	cmp	r5, r3
 8005606:	d926      	bls.n	8005656 <_dtoa_r+0x2ae>
 8005608:	6041      	str	r1, [r0, #4]
 800560a:	4648      	mov	r0, r9
 800560c:	f000 fd9c 	bl	8006148 <_Balloc>
 8005610:	4682      	mov	sl, r0
 8005612:	2800      	cmp	r0, #0
 8005614:	d142      	bne.n	800569c <_dtoa_r+0x2f4>
 8005616:	4b1e      	ldr	r3, [pc, #120]	@ (8005690 <_dtoa_r+0x2e8>)
 8005618:	4602      	mov	r2, r0
 800561a:	f240 11af 	movw	r1, #431	@ 0x1af
 800561e:	e6da      	b.n	80053d6 <_dtoa_r+0x2e>
 8005620:	2300      	movs	r3, #0
 8005622:	e7e3      	b.n	80055ec <_dtoa_r+0x244>
 8005624:	2300      	movs	r3, #0
 8005626:	e7d5      	b.n	80055d4 <_dtoa_r+0x22c>
 8005628:	2401      	movs	r4, #1
 800562a:	2300      	movs	r3, #0
 800562c:	9307      	str	r3, [sp, #28]
 800562e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005630:	f04f 3bff 	mov.w	fp, #4294967295
 8005634:	2200      	movs	r2, #0
 8005636:	f8cd b00c 	str.w	fp, [sp, #12]
 800563a:	2312      	movs	r3, #18
 800563c:	920c      	str	r2, [sp, #48]	@ 0x30
 800563e:	e7db      	b.n	80055f8 <_dtoa_r+0x250>
 8005640:	2301      	movs	r3, #1
 8005642:	9309      	str	r3, [sp, #36]	@ 0x24
 8005644:	e7f4      	b.n	8005630 <_dtoa_r+0x288>
 8005646:	f04f 0b01 	mov.w	fp, #1
 800564a:	f8cd b00c 	str.w	fp, [sp, #12]
 800564e:	465b      	mov	r3, fp
 8005650:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005654:	e7d0      	b.n	80055f8 <_dtoa_r+0x250>
 8005656:	3101      	adds	r1, #1
 8005658:	0052      	lsls	r2, r2, #1
 800565a:	e7d1      	b.n	8005600 <_dtoa_r+0x258>
 800565c:	f3af 8000 	nop.w
 8005660:	636f4361 	.word	0x636f4361
 8005664:	3fd287a7 	.word	0x3fd287a7
 8005668:	8b60c8b3 	.word	0x8b60c8b3
 800566c:	3fc68a28 	.word	0x3fc68a28
 8005670:	509f79fb 	.word	0x509f79fb
 8005674:	3fd34413 	.word	0x3fd34413
 8005678:	0800a47e 	.word	0x0800a47e
 800567c:	0800a495 	.word	0x0800a495
 8005680:	7ff00000 	.word	0x7ff00000
 8005684:	0800a449 	.word	0x0800a449
 8005688:	3ff80000 	.word	0x3ff80000
 800568c:	0800a648 	.word	0x0800a648
 8005690:	0800a4ed 	.word	0x0800a4ed
 8005694:	0800a47a 	.word	0x0800a47a
 8005698:	0800a448 	.word	0x0800a448
 800569c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056a0:	6018      	str	r0, [r3, #0]
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	2b0e      	cmp	r3, #14
 80056a6:	f200 80a1 	bhi.w	80057ec <_dtoa_r+0x444>
 80056aa:	2c00      	cmp	r4, #0
 80056ac:	f000 809e 	beq.w	80057ec <_dtoa_r+0x444>
 80056b0:	2f00      	cmp	r7, #0
 80056b2:	dd33      	ble.n	800571c <_dtoa_r+0x374>
 80056b4:	4b9c      	ldr	r3, [pc, #624]	@ (8005928 <_dtoa_r+0x580>)
 80056b6:	f007 020f 	and.w	r2, r7, #15
 80056ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056be:	ed93 7b00 	vldr	d7, [r3]
 80056c2:	05f8      	lsls	r0, r7, #23
 80056c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80056c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056cc:	d516      	bpl.n	80056fc <_dtoa_r+0x354>
 80056ce:	4b97      	ldr	r3, [pc, #604]	@ (800592c <_dtoa_r+0x584>)
 80056d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056d8:	f7fb f8d8 	bl	800088c <__aeabi_ddiv>
 80056dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056e0:	f004 040f 	and.w	r4, r4, #15
 80056e4:	2603      	movs	r6, #3
 80056e6:	4d91      	ldr	r5, [pc, #580]	@ (800592c <_dtoa_r+0x584>)
 80056e8:	b954      	cbnz	r4, 8005700 <_dtoa_r+0x358>
 80056ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80056ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056f2:	f7fb f8cb 	bl	800088c <__aeabi_ddiv>
 80056f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056fa:	e028      	b.n	800574e <_dtoa_r+0x3a6>
 80056fc:	2602      	movs	r6, #2
 80056fe:	e7f2      	b.n	80056e6 <_dtoa_r+0x33e>
 8005700:	07e1      	lsls	r1, r4, #31
 8005702:	d508      	bpl.n	8005716 <_dtoa_r+0x36e>
 8005704:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005708:	e9d5 2300 	ldrd	r2, r3, [r5]
 800570c:	f7fa ff94 	bl	8000638 <__aeabi_dmul>
 8005710:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005714:	3601      	adds	r6, #1
 8005716:	1064      	asrs	r4, r4, #1
 8005718:	3508      	adds	r5, #8
 800571a:	e7e5      	b.n	80056e8 <_dtoa_r+0x340>
 800571c:	f000 80af 	beq.w	800587e <_dtoa_r+0x4d6>
 8005720:	427c      	negs	r4, r7
 8005722:	4b81      	ldr	r3, [pc, #516]	@ (8005928 <_dtoa_r+0x580>)
 8005724:	4d81      	ldr	r5, [pc, #516]	@ (800592c <_dtoa_r+0x584>)
 8005726:	f004 020f 	and.w	r2, r4, #15
 800572a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005736:	f7fa ff7f 	bl	8000638 <__aeabi_dmul>
 800573a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800573e:	1124      	asrs	r4, r4, #4
 8005740:	2300      	movs	r3, #0
 8005742:	2602      	movs	r6, #2
 8005744:	2c00      	cmp	r4, #0
 8005746:	f040 808f 	bne.w	8005868 <_dtoa_r+0x4c0>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1d3      	bne.n	80056f6 <_dtoa_r+0x34e>
 800574e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005750:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8094 	beq.w	8005882 <_dtoa_r+0x4da>
 800575a:	4b75      	ldr	r3, [pc, #468]	@ (8005930 <_dtoa_r+0x588>)
 800575c:	2200      	movs	r2, #0
 800575e:	4620      	mov	r0, r4
 8005760:	4629      	mov	r1, r5
 8005762:	f7fb f9db 	bl	8000b1c <__aeabi_dcmplt>
 8005766:	2800      	cmp	r0, #0
 8005768:	f000 808b 	beq.w	8005882 <_dtoa_r+0x4da>
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8087 	beq.w	8005882 <_dtoa_r+0x4da>
 8005774:	f1bb 0f00 	cmp.w	fp, #0
 8005778:	dd34      	ble.n	80057e4 <_dtoa_r+0x43c>
 800577a:	4620      	mov	r0, r4
 800577c:	4b6d      	ldr	r3, [pc, #436]	@ (8005934 <_dtoa_r+0x58c>)
 800577e:	2200      	movs	r2, #0
 8005780:	4629      	mov	r1, r5
 8005782:	f7fa ff59 	bl	8000638 <__aeabi_dmul>
 8005786:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800578a:	f107 38ff 	add.w	r8, r7, #4294967295
 800578e:	3601      	adds	r6, #1
 8005790:	465c      	mov	r4, fp
 8005792:	4630      	mov	r0, r6
 8005794:	f7fa fee6 	bl	8000564 <__aeabi_i2d>
 8005798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800579c:	f7fa ff4c 	bl	8000638 <__aeabi_dmul>
 80057a0:	4b65      	ldr	r3, [pc, #404]	@ (8005938 <_dtoa_r+0x590>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	f7fa fd92 	bl	80002cc <__adddf3>
 80057a8:	4605      	mov	r5, r0
 80057aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80057ae:	2c00      	cmp	r4, #0
 80057b0:	d16a      	bne.n	8005888 <_dtoa_r+0x4e0>
 80057b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057b6:	4b61      	ldr	r3, [pc, #388]	@ (800593c <_dtoa_r+0x594>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	f7fa fd85 	bl	80002c8 <__aeabi_dsub>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057c6:	462a      	mov	r2, r5
 80057c8:	4633      	mov	r3, r6
 80057ca:	f7fb f9c5 	bl	8000b58 <__aeabi_dcmpgt>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f040 8298 	bne.w	8005d04 <_dtoa_r+0x95c>
 80057d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d8:	462a      	mov	r2, r5
 80057da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057de:	f7fb f99d 	bl	8000b1c <__aeabi_dcmplt>
 80057e2:	bb38      	cbnz	r0, 8005834 <_dtoa_r+0x48c>
 80057e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80057e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f2c0 8157 	blt.w	8005aa2 <_dtoa_r+0x6fa>
 80057f4:	2f0e      	cmp	r7, #14
 80057f6:	f300 8154 	bgt.w	8005aa2 <_dtoa_r+0x6fa>
 80057fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005928 <_dtoa_r+0x580>)
 80057fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005800:	ed93 7b00 	vldr	d7, [r3]
 8005804:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005806:	2b00      	cmp	r3, #0
 8005808:	ed8d 7b00 	vstr	d7, [sp]
 800580c:	f280 80e5 	bge.w	80059da <_dtoa_r+0x632>
 8005810:	9b03      	ldr	r3, [sp, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f300 80e1 	bgt.w	80059da <_dtoa_r+0x632>
 8005818:	d10c      	bne.n	8005834 <_dtoa_r+0x48c>
 800581a:	4b48      	ldr	r3, [pc, #288]	@ (800593c <_dtoa_r+0x594>)
 800581c:	2200      	movs	r2, #0
 800581e:	ec51 0b17 	vmov	r0, r1, d7
 8005822:	f7fa ff09 	bl	8000638 <__aeabi_dmul>
 8005826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800582a:	f7fb f98b 	bl	8000b44 <__aeabi_dcmpge>
 800582e:	2800      	cmp	r0, #0
 8005830:	f000 8266 	beq.w	8005d00 <_dtoa_r+0x958>
 8005834:	2400      	movs	r4, #0
 8005836:	4625      	mov	r5, r4
 8005838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800583a:	4656      	mov	r6, sl
 800583c:	ea6f 0803 	mvn.w	r8, r3
 8005840:	2700      	movs	r7, #0
 8005842:	4621      	mov	r1, r4
 8005844:	4648      	mov	r0, r9
 8005846:	f000 fcbf 	bl	80061c8 <_Bfree>
 800584a:	2d00      	cmp	r5, #0
 800584c:	f000 80bd 	beq.w	80059ca <_dtoa_r+0x622>
 8005850:	b12f      	cbz	r7, 800585e <_dtoa_r+0x4b6>
 8005852:	42af      	cmp	r7, r5
 8005854:	d003      	beq.n	800585e <_dtoa_r+0x4b6>
 8005856:	4639      	mov	r1, r7
 8005858:	4648      	mov	r0, r9
 800585a:	f000 fcb5 	bl	80061c8 <_Bfree>
 800585e:	4629      	mov	r1, r5
 8005860:	4648      	mov	r0, r9
 8005862:	f000 fcb1 	bl	80061c8 <_Bfree>
 8005866:	e0b0      	b.n	80059ca <_dtoa_r+0x622>
 8005868:	07e2      	lsls	r2, r4, #31
 800586a:	d505      	bpl.n	8005878 <_dtoa_r+0x4d0>
 800586c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005870:	f7fa fee2 	bl	8000638 <__aeabi_dmul>
 8005874:	3601      	adds	r6, #1
 8005876:	2301      	movs	r3, #1
 8005878:	1064      	asrs	r4, r4, #1
 800587a:	3508      	adds	r5, #8
 800587c:	e762      	b.n	8005744 <_dtoa_r+0x39c>
 800587e:	2602      	movs	r6, #2
 8005880:	e765      	b.n	800574e <_dtoa_r+0x3a6>
 8005882:	9c03      	ldr	r4, [sp, #12]
 8005884:	46b8      	mov	r8, r7
 8005886:	e784      	b.n	8005792 <_dtoa_r+0x3ea>
 8005888:	4b27      	ldr	r3, [pc, #156]	@ (8005928 <_dtoa_r+0x580>)
 800588a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800588c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005890:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005894:	4454      	add	r4, sl
 8005896:	2900      	cmp	r1, #0
 8005898:	d054      	beq.n	8005944 <_dtoa_r+0x59c>
 800589a:	4929      	ldr	r1, [pc, #164]	@ (8005940 <_dtoa_r+0x598>)
 800589c:	2000      	movs	r0, #0
 800589e:	f7fa fff5 	bl	800088c <__aeabi_ddiv>
 80058a2:	4633      	mov	r3, r6
 80058a4:	462a      	mov	r2, r5
 80058a6:	f7fa fd0f 	bl	80002c8 <__aeabi_dsub>
 80058aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80058ae:	4656      	mov	r6, sl
 80058b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058b4:	f7fb f970 	bl	8000b98 <__aeabi_d2iz>
 80058b8:	4605      	mov	r5, r0
 80058ba:	f7fa fe53 	bl	8000564 <__aeabi_i2d>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c6:	f7fa fcff 	bl	80002c8 <__aeabi_dsub>
 80058ca:	3530      	adds	r5, #48	@ 0x30
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058d4:	f806 5b01 	strb.w	r5, [r6], #1
 80058d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80058dc:	f7fb f91e 	bl	8000b1c <__aeabi_dcmplt>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d172      	bne.n	80059ca <_dtoa_r+0x622>
 80058e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058e8:	4911      	ldr	r1, [pc, #68]	@ (8005930 <_dtoa_r+0x588>)
 80058ea:	2000      	movs	r0, #0
 80058ec:	f7fa fcec 	bl	80002c8 <__aeabi_dsub>
 80058f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80058f4:	f7fb f912 	bl	8000b1c <__aeabi_dcmplt>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	f040 80b4 	bne.w	8005a66 <_dtoa_r+0x6be>
 80058fe:	42a6      	cmp	r6, r4
 8005900:	f43f af70 	beq.w	80057e4 <_dtoa_r+0x43c>
 8005904:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005908:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <_dtoa_r+0x58c>)
 800590a:	2200      	movs	r2, #0
 800590c:	f7fa fe94 	bl	8000638 <__aeabi_dmul>
 8005910:	4b08      	ldr	r3, [pc, #32]	@ (8005934 <_dtoa_r+0x58c>)
 8005912:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005916:	2200      	movs	r2, #0
 8005918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800591c:	f7fa fe8c 	bl	8000638 <__aeabi_dmul>
 8005920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005924:	e7c4      	b.n	80058b0 <_dtoa_r+0x508>
 8005926:	bf00      	nop
 8005928:	0800a648 	.word	0x0800a648
 800592c:	0800a620 	.word	0x0800a620
 8005930:	3ff00000 	.word	0x3ff00000
 8005934:	40240000 	.word	0x40240000
 8005938:	401c0000 	.word	0x401c0000
 800593c:	40140000 	.word	0x40140000
 8005940:	3fe00000 	.word	0x3fe00000
 8005944:	4631      	mov	r1, r6
 8005946:	4628      	mov	r0, r5
 8005948:	f7fa fe76 	bl	8000638 <__aeabi_dmul>
 800594c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005950:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005952:	4656      	mov	r6, sl
 8005954:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005958:	f7fb f91e 	bl	8000b98 <__aeabi_d2iz>
 800595c:	4605      	mov	r5, r0
 800595e:	f7fa fe01 	bl	8000564 <__aeabi_i2d>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800596a:	f7fa fcad 	bl	80002c8 <__aeabi_dsub>
 800596e:	3530      	adds	r5, #48	@ 0x30
 8005970:	f806 5b01 	strb.w	r5, [r6], #1
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	42a6      	cmp	r6, r4
 800597a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	d124      	bne.n	80059ce <_dtoa_r+0x626>
 8005984:	4baf      	ldr	r3, [pc, #700]	@ (8005c44 <_dtoa_r+0x89c>)
 8005986:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800598a:	f7fa fc9f 	bl	80002cc <__adddf3>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005996:	f7fb f8df 	bl	8000b58 <__aeabi_dcmpgt>
 800599a:	2800      	cmp	r0, #0
 800599c:	d163      	bne.n	8005a66 <_dtoa_r+0x6be>
 800599e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059a2:	49a8      	ldr	r1, [pc, #672]	@ (8005c44 <_dtoa_r+0x89c>)
 80059a4:	2000      	movs	r0, #0
 80059a6:	f7fa fc8f 	bl	80002c8 <__aeabi_dsub>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059b2:	f7fb f8b3 	bl	8000b1c <__aeabi_dcmplt>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f43f af14 	beq.w	80057e4 <_dtoa_r+0x43c>
 80059bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80059be:	1e73      	subs	r3, r6, #1
 80059c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80059c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059c6:	2b30      	cmp	r3, #48	@ 0x30
 80059c8:	d0f8      	beq.n	80059bc <_dtoa_r+0x614>
 80059ca:	4647      	mov	r7, r8
 80059cc:	e03b      	b.n	8005a46 <_dtoa_r+0x69e>
 80059ce:	4b9e      	ldr	r3, [pc, #632]	@ (8005c48 <_dtoa_r+0x8a0>)
 80059d0:	f7fa fe32 	bl	8000638 <__aeabi_dmul>
 80059d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059d8:	e7bc      	b.n	8005954 <_dtoa_r+0x5ac>
 80059da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80059de:	4656      	mov	r6, sl
 80059e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059e4:	4620      	mov	r0, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	f7fa ff50 	bl	800088c <__aeabi_ddiv>
 80059ec:	f7fb f8d4 	bl	8000b98 <__aeabi_d2iz>
 80059f0:	4680      	mov	r8, r0
 80059f2:	f7fa fdb7 	bl	8000564 <__aeabi_i2d>
 80059f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059fa:	f7fa fe1d 	bl	8000638 <__aeabi_dmul>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a0a:	f7fa fc5d 	bl	80002c8 <__aeabi_dsub>
 8005a0e:	f806 4b01 	strb.w	r4, [r6], #1
 8005a12:	9d03      	ldr	r5, [sp, #12]
 8005a14:	eba6 040a 	sub.w	r4, r6, sl
 8005a18:	42a5      	cmp	r5, r4
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	d133      	bne.n	8005a88 <_dtoa_r+0x6e0>
 8005a20:	f7fa fc54 	bl	80002cc <__adddf3>
 8005a24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a28:	4604      	mov	r4, r0
 8005a2a:	460d      	mov	r5, r1
 8005a2c:	f7fb f894 	bl	8000b58 <__aeabi_dcmpgt>
 8005a30:	b9c0      	cbnz	r0, 8005a64 <_dtoa_r+0x6bc>
 8005a32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a36:	4620      	mov	r0, r4
 8005a38:	4629      	mov	r1, r5
 8005a3a:	f7fb f865 	bl	8000b08 <__aeabi_dcmpeq>
 8005a3e:	b110      	cbz	r0, 8005a46 <_dtoa_r+0x69e>
 8005a40:	f018 0f01 	tst.w	r8, #1
 8005a44:	d10e      	bne.n	8005a64 <_dtoa_r+0x6bc>
 8005a46:	9902      	ldr	r1, [sp, #8]
 8005a48:	4648      	mov	r0, r9
 8005a4a:	f000 fbbd 	bl	80061c8 <_Bfree>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	7033      	strb	r3, [r6, #0]
 8005a52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a54:	3701      	adds	r7, #1
 8005a56:	601f      	str	r7, [r3, #0]
 8005a58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 824b 	beq.w	8005ef6 <_dtoa_r+0xb4e>
 8005a60:	601e      	str	r6, [r3, #0]
 8005a62:	e248      	b.n	8005ef6 <_dtoa_r+0xb4e>
 8005a64:	46b8      	mov	r8, r7
 8005a66:	4633      	mov	r3, r6
 8005a68:	461e      	mov	r6, r3
 8005a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a6e:	2a39      	cmp	r2, #57	@ 0x39
 8005a70:	d106      	bne.n	8005a80 <_dtoa_r+0x6d8>
 8005a72:	459a      	cmp	sl, r3
 8005a74:	d1f8      	bne.n	8005a68 <_dtoa_r+0x6c0>
 8005a76:	2230      	movs	r2, #48	@ 0x30
 8005a78:	f108 0801 	add.w	r8, r8, #1
 8005a7c:	f88a 2000 	strb.w	r2, [sl]
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	3201      	adds	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	e7a0      	b.n	80059ca <_dtoa_r+0x622>
 8005a88:	4b6f      	ldr	r3, [pc, #444]	@ (8005c48 <_dtoa_r+0x8a0>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f7fa fdd4 	bl	8000638 <__aeabi_dmul>
 8005a90:	2200      	movs	r2, #0
 8005a92:	2300      	movs	r3, #0
 8005a94:	4604      	mov	r4, r0
 8005a96:	460d      	mov	r5, r1
 8005a98:	f7fb f836 	bl	8000b08 <__aeabi_dcmpeq>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d09f      	beq.n	80059e0 <_dtoa_r+0x638>
 8005aa0:	e7d1      	b.n	8005a46 <_dtoa_r+0x69e>
 8005aa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aa4:	2a00      	cmp	r2, #0
 8005aa6:	f000 80ea 	beq.w	8005c7e <_dtoa_r+0x8d6>
 8005aaa:	9a07      	ldr	r2, [sp, #28]
 8005aac:	2a01      	cmp	r2, #1
 8005aae:	f300 80cd 	bgt.w	8005c4c <_dtoa_r+0x8a4>
 8005ab2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ab4:	2a00      	cmp	r2, #0
 8005ab6:	f000 80c1 	beq.w	8005c3c <_dtoa_r+0x894>
 8005aba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005abe:	9c08      	ldr	r4, [sp, #32]
 8005ac0:	9e00      	ldr	r6, [sp, #0]
 8005ac2:	9a00      	ldr	r2, [sp, #0]
 8005ac4:	441a      	add	r2, r3
 8005ac6:	9200      	str	r2, [sp, #0]
 8005ac8:	9a06      	ldr	r2, [sp, #24]
 8005aca:	2101      	movs	r1, #1
 8005acc:	441a      	add	r2, r3
 8005ace:	4648      	mov	r0, r9
 8005ad0:	9206      	str	r2, [sp, #24]
 8005ad2:	f000 fc77 	bl	80063c4 <__i2b>
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	b166      	cbz	r6, 8005af4 <_dtoa_r+0x74c>
 8005ada:	9b06      	ldr	r3, [sp, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd09      	ble.n	8005af4 <_dtoa_r+0x74c>
 8005ae0:	42b3      	cmp	r3, r6
 8005ae2:	9a00      	ldr	r2, [sp, #0]
 8005ae4:	bfa8      	it	ge
 8005ae6:	4633      	movge	r3, r6
 8005ae8:	1ad2      	subs	r2, r2, r3
 8005aea:	9200      	str	r2, [sp, #0]
 8005aec:	9a06      	ldr	r2, [sp, #24]
 8005aee:	1af6      	subs	r6, r6, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	9306      	str	r3, [sp, #24]
 8005af4:	9b08      	ldr	r3, [sp, #32]
 8005af6:	b30b      	cbz	r3, 8005b3c <_dtoa_r+0x794>
 8005af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80c6 	beq.w	8005c8c <_dtoa_r+0x8e4>
 8005b00:	2c00      	cmp	r4, #0
 8005b02:	f000 80c0 	beq.w	8005c86 <_dtoa_r+0x8de>
 8005b06:	4629      	mov	r1, r5
 8005b08:	4622      	mov	r2, r4
 8005b0a:	4648      	mov	r0, r9
 8005b0c:	f000 fd12 	bl	8006534 <__pow5mult>
 8005b10:	9a02      	ldr	r2, [sp, #8]
 8005b12:	4601      	mov	r1, r0
 8005b14:	4605      	mov	r5, r0
 8005b16:	4648      	mov	r0, r9
 8005b18:	f000 fc6a 	bl	80063f0 <__multiply>
 8005b1c:	9902      	ldr	r1, [sp, #8]
 8005b1e:	4680      	mov	r8, r0
 8005b20:	4648      	mov	r0, r9
 8005b22:	f000 fb51 	bl	80061c8 <_Bfree>
 8005b26:	9b08      	ldr	r3, [sp, #32]
 8005b28:	1b1b      	subs	r3, r3, r4
 8005b2a:	9308      	str	r3, [sp, #32]
 8005b2c:	f000 80b1 	beq.w	8005c92 <_dtoa_r+0x8ea>
 8005b30:	9a08      	ldr	r2, [sp, #32]
 8005b32:	4641      	mov	r1, r8
 8005b34:	4648      	mov	r0, r9
 8005b36:	f000 fcfd 	bl	8006534 <__pow5mult>
 8005b3a:	9002      	str	r0, [sp, #8]
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	4648      	mov	r0, r9
 8005b40:	f000 fc40 	bl	80063c4 <__i2b>
 8005b44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b46:	4604      	mov	r4, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 81d8 	beq.w	8005efe <_dtoa_r+0xb56>
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4601      	mov	r1, r0
 8005b52:	4648      	mov	r0, r9
 8005b54:	f000 fcee 	bl	8006534 <__pow5mult>
 8005b58:	9b07      	ldr	r3, [sp, #28]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	f300 809f 	bgt.w	8005ca0 <_dtoa_r+0x8f8>
 8005b62:	9b04      	ldr	r3, [sp, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f040 8097 	bne.w	8005c98 <_dtoa_r+0x8f0>
 8005b6a:	9b05      	ldr	r3, [sp, #20]
 8005b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 8093 	bne.w	8005c9c <_dtoa_r+0x8f4>
 8005b76:	9b05      	ldr	r3, [sp, #20]
 8005b78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b7c:	0d1b      	lsrs	r3, r3, #20
 8005b7e:	051b      	lsls	r3, r3, #20
 8005b80:	b133      	cbz	r3, 8005b90 <_dtoa_r+0x7e8>
 8005b82:	9b00      	ldr	r3, [sp, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	9b06      	ldr	r3, [sp, #24]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	9306      	str	r3, [sp, #24]
 8005b8e:	2301      	movs	r3, #1
 8005b90:	9308      	str	r3, [sp, #32]
 8005b92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 81b8 	beq.w	8005f0a <_dtoa_r+0xb62>
 8005b9a:	6923      	ldr	r3, [r4, #16]
 8005b9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ba0:	6918      	ldr	r0, [r3, #16]
 8005ba2:	f000 fbc3 	bl	800632c <__hi0bits>
 8005ba6:	f1c0 0020 	rsb	r0, r0, #32
 8005baa:	9b06      	ldr	r3, [sp, #24]
 8005bac:	4418      	add	r0, r3
 8005bae:	f010 001f 	ands.w	r0, r0, #31
 8005bb2:	f000 8082 	beq.w	8005cba <_dtoa_r+0x912>
 8005bb6:	f1c0 0320 	rsb	r3, r0, #32
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	dd73      	ble.n	8005ca6 <_dtoa_r+0x8fe>
 8005bbe:	9b00      	ldr	r3, [sp, #0]
 8005bc0:	f1c0 001c 	rsb	r0, r0, #28
 8005bc4:	4403      	add	r3, r0
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	9b06      	ldr	r3, [sp, #24]
 8005bca:	4403      	add	r3, r0
 8005bcc:	4406      	add	r6, r0
 8005bce:	9306      	str	r3, [sp, #24]
 8005bd0:	9b00      	ldr	r3, [sp, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd05      	ble.n	8005be2 <_dtoa_r+0x83a>
 8005bd6:	9902      	ldr	r1, [sp, #8]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4648      	mov	r0, r9
 8005bdc:	f000 fd04 	bl	80065e8 <__lshift>
 8005be0:	9002      	str	r0, [sp, #8]
 8005be2:	9b06      	ldr	r3, [sp, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dd05      	ble.n	8005bf4 <_dtoa_r+0x84c>
 8005be8:	4621      	mov	r1, r4
 8005bea:	461a      	mov	r2, r3
 8005bec:	4648      	mov	r0, r9
 8005bee:	f000 fcfb 	bl	80065e8 <__lshift>
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d061      	beq.n	8005cbe <_dtoa_r+0x916>
 8005bfa:	9802      	ldr	r0, [sp, #8]
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	f000 fd5f 	bl	80066c0 <__mcmp>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	da5b      	bge.n	8005cbe <_dtoa_r+0x916>
 8005c06:	2300      	movs	r3, #0
 8005c08:	9902      	ldr	r1, [sp, #8]
 8005c0a:	220a      	movs	r2, #10
 8005c0c:	4648      	mov	r0, r9
 8005c0e:	f000 fafd 	bl	800620c <__multadd>
 8005c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c14:	9002      	str	r0, [sp, #8]
 8005c16:	f107 38ff 	add.w	r8, r7, #4294967295
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8177 	beq.w	8005f0e <_dtoa_r+0xb66>
 8005c20:	4629      	mov	r1, r5
 8005c22:	2300      	movs	r3, #0
 8005c24:	220a      	movs	r2, #10
 8005c26:	4648      	mov	r0, r9
 8005c28:	f000 faf0 	bl	800620c <__multadd>
 8005c2c:	f1bb 0f00 	cmp.w	fp, #0
 8005c30:	4605      	mov	r5, r0
 8005c32:	dc6f      	bgt.n	8005d14 <_dtoa_r+0x96c>
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	dc49      	bgt.n	8005cce <_dtoa_r+0x926>
 8005c3a:	e06b      	b.n	8005d14 <_dtoa_r+0x96c>
 8005c3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c42:	e73c      	b.n	8005abe <_dtoa_r+0x716>
 8005c44:	3fe00000 	.word	0x3fe00000
 8005c48:	40240000 	.word	0x40240000
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	1e5c      	subs	r4, r3, #1
 8005c50:	9b08      	ldr	r3, [sp, #32]
 8005c52:	42a3      	cmp	r3, r4
 8005c54:	db09      	blt.n	8005c6a <_dtoa_r+0x8c2>
 8005c56:	1b1c      	subs	r4, r3, r4
 8005c58:	9b03      	ldr	r3, [sp, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f6bf af30 	bge.w	8005ac0 <_dtoa_r+0x718>
 8005c60:	9b00      	ldr	r3, [sp, #0]
 8005c62:	9a03      	ldr	r2, [sp, #12]
 8005c64:	1a9e      	subs	r6, r3, r2
 8005c66:	2300      	movs	r3, #0
 8005c68:	e72b      	b.n	8005ac2 <_dtoa_r+0x71a>
 8005c6a:	9b08      	ldr	r3, [sp, #32]
 8005c6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c6e:	9408      	str	r4, [sp, #32]
 8005c70:	1ae3      	subs	r3, r4, r3
 8005c72:	441a      	add	r2, r3
 8005c74:	9e00      	ldr	r6, [sp, #0]
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	920d      	str	r2, [sp, #52]	@ 0x34
 8005c7a:	2400      	movs	r4, #0
 8005c7c:	e721      	b.n	8005ac2 <_dtoa_r+0x71a>
 8005c7e:	9c08      	ldr	r4, [sp, #32]
 8005c80:	9e00      	ldr	r6, [sp, #0]
 8005c82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005c84:	e728      	b.n	8005ad8 <_dtoa_r+0x730>
 8005c86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005c8a:	e751      	b.n	8005b30 <_dtoa_r+0x788>
 8005c8c:	9a08      	ldr	r2, [sp, #32]
 8005c8e:	9902      	ldr	r1, [sp, #8]
 8005c90:	e750      	b.n	8005b34 <_dtoa_r+0x78c>
 8005c92:	f8cd 8008 	str.w	r8, [sp, #8]
 8005c96:	e751      	b.n	8005b3c <_dtoa_r+0x794>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e779      	b.n	8005b90 <_dtoa_r+0x7e8>
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	e777      	b.n	8005b90 <_dtoa_r+0x7e8>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9308      	str	r3, [sp, #32]
 8005ca4:	e779      	b.n	8005b9a <_dtoa_r+0x7f2>
 8005ca6:	d093      	beq.n	8005bd0 <_dtoa_r+0x828>
 8005ca8:	9a00      	ldr	r2, [sp, #0]
 8005caa:	331c      	adds	r3, #28
 8005cac:	441a      	add	r2, r3
 8005cae:	9200      	str	r2, [sp, #0]
 8005cb0:	9a06      	ldr	r2, [sp, #24]
 8005cb2:	441a      	add	r2, r3
 8005cb4:	441e      	add	r6, r3
 8005cb6:	9206      	str	r2, [sp, #24]
 8005cb8:	e78a      	b.n	8005bd0 <_dtoa_r+0x828>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	e7f4      	b.n	8005ca8 <_dtoa_r+0x900>
 8005cbe:	9b03      	ldr	r3, [sp, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	46b8      	mov	r8, r7
 8005cc4:	dc20      	bgt.n	8005d08 <_dtoa_r+0x960>
 8005cc6:	469b      	mov	fp, r3
 8005cc8:	9b07      	ldr	r3, [sp, #28]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	dd1e      	ble.n	8005d0c <_dtoa_r+0x964>
 8005cce:	f1bb 0f00 	cmp.w	fp, #0
 8005cd2:	f47f adb1 	bne.w	8005838 <_dtoa_r+0x490>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	465b      	mov	r3, fp
 8005cda:	2205      	movs	r2, #5
 8005cdc:	4648      	mov	r0, r9
 8005cde:	f000 fa95 	bl	800620c <__multadd>
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	9802      	ldr	r0, [sp, #8]
 8005ce8:	f000 fcea 	bl	80066c0 <__mcmp>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	f77f ada3 	ble.w	8005838 <_dtoa_r+0x490>
 8005cf2:	4656      	mov	r6, sl
 8005cf4:	2331      	movs	r3, #49	@ 0x31
 8005cf6:	f806 3b01 	strb.w	r3, [r6], #1
 8005cfa:	f108 0801 	add.w	r8, r8, #1
 8005cfe:	e59f      	b.n	8005840 <_dtoa_r+0x498>
 8005d00:	9c03      	ldr	r4, [sp, #12]
 8005d02:	46b8      	mov	r8, r7
 8005d04:	4625      	mov	r5, r4
 8005d06:	e7f4      	b.n	8005cf2 <_dtoa_r+0x94a>
 8005d08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8101 	beq.w	8005f16 <_dtoa_r+0xb6e>
 8005d14:	2e00      	cmp	r6, #0
 8005d16:	dd05      	ble.n	8005d24 <_dtoa_r+0x97c>
 8005d18:	4629      	mov	r1, r5
 8005d1a:	4632      	mov	r2, r6
 8005d1c:	4648      	mov	r0, r9
 8005d1e:	f000 fc63 	bl	80065e8 <__lshift>
 8005d22:	4605      	mov	r5, r0
 8005d24:	9b08      	ldr	r3, [sp, #32]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d05c      	beq.n	8005de4 <_dtoa_r+0xa3c>
 8005d2a:	6869      	ldr	r1, [r5, #4]
 8005d2c:	4648      	mov	r0, r9
 8005d2e:	f000 fa0b 	bl	8006148 <_Balloc>
 8005d32:	4606      	mov	r6, r0
 8005d34:	b928      	cbnz	r0, 8005d42 <_dtoa_r+0x99a>
 8005d36:	4b82      	ldr	r3, [pc, #520]	@ (8005f40 <_dtoa_r+0xb98>)
 8005d38:	4602      	mov	r2, r0
 8005d3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d3e:	f7ff bb4a 	b.w	80053d6 <_dtoa_r+0x2e>
 8005d42:	692a      	ldr	r2, [r5, #16]
 8005d44:	3202      	adds	r2, #2
 8005d46:	0092      	lsls	r2, r2, #2
 8005d48:	f105 010c 	add.w	r1, r5, #12
 8005d4c:	300c      	adds	r0, #12
 8005d4e:	f002 f93f 	bl	8007fd0 <memcpy>
 8005d52:	2201      	movs	r2, #1
 8005d54:	4631      	mov	r1, r6
 8005d56:	4648      	mov	r0, r9
 8005d58:	f000 fc46 	bl	80065e8 <__lshift>
 8005d5c:	f10a 0301 	add.w	r3, sl, #1
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	eb0a 030b 	add.w	r3, sl, fp
 8005d66:	9308      	str	r3, [sp, #32]
 8005d68:	9b04      	ldr	r3, [sp, #16]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	462f      	mov	r7, r5
 8005d70:	9306      	str	r3, [sp, #24]
 8005d72:	4605      	mov	r5, r0
 8005d74:	9b00      	ldr	r3, [sp, #0]
 8005d76:	9802      	ldr	r0, [sp, #8]
 8005d78:	4621      	mov	r1, r4
 8005d7a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d7e:	f7ff fa8b 	bl	8005298 <quorem>
 8005d82:	4603      	mov	r3, r0
 8005d84:	3330      	adds	r3, #48	@ 0x30
 8005d86:	9003      	str	r0, [sp, #12]
 8005d88:	4639      	mov	r1, r7
 8005d8a:	9802      	ldr	r0, [sp, #8]
 8005d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d8e:	f000 fc97 	bl	80066c0 <__mcmp>
 8005d92:	462a      	mov	r2, r5
 8005d94:	9004      	str	r0, [sp, #16]
 8005d96:	4621      	mov	r1, r4
 8005d98:	4648      	mov	r0, r9
 8005d9a:	f000 fcad 	bl	80066f8 <__mdiff>
 8005d9e:	68c2      	ldr	r2, [r0, #12]
 8005da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da2:	4606      	mov	r6, r0
 8005da4:	bb02      	cbnz	r2, 8005de8 <_dtoa_r+0xa40>
 8005da6:	4601      	mov	r1, r0
 8005da8:	9802      	ldr	r0, [sp, #8]
 8005daa:	f000 fc89 	bl	80066c0 <__mcmp>
 8005dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db0:	4602      	mov	r2, r0
 8005db2:	4631      	mov	r1, r6
 8005db4:	4648      	mov	r0, r9
 8005db6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dba:	f000 fa05 	bl	80061c8 <_Bfree>
 8005dbe:	9b07      	ldr	r3, [sp, #28]
 8005dc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005dc2:	9e00      	ldr	r6, [sp, #0]
 8005dc4:	ea42 0103 	orr.w	r1, r2, r3
 8005dc8:	9b06      	ldr	r3, [sp, #24]
 8005dca:	4319      	orrs	r1, r3
 8005dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dce:	d10d      	bne.n	8005dec <_dtoa_r+0xa44>
 8005dd0:	2b39      	cmp	r3, #57	@ 0x39
 8005dd2:	d027      	beq.n	8005e24 <_dtoa_r+0xa7c>
 8005dd4:	9a04      	ldr	r2, [sp, #16]
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	dd01      	ble.n	8005dde <_dtoa_r+0xa36>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	3331      	adds	r3, #49	@ 0x31
 8005dde:	f88b 3000 	strb.w	r3, [fp]
 8005de2:	e52e      	b.n	8005842 <_dtoa_r+0x49a>
 8005de4:	4628      	mov	r0, r5
 8005de6:	e7b9      	b.n	8005d5c <_dtoa_r+0x9b4>
 8005de8:	2201      	movs	r2, #1
 8005dea:	e7e2      	b.n	8005db2 <_dtoa_r+0xa0a>
 8005dec:	9904      	ldr	r1, [sp, #16]
 8005dee:	2900      	cmp	r1, #0
 8005df0:	db04      	blt.n	8005dfc <_dtoa_r+0xa54>
 8005df2:	9807      	ldr	r0, [sp, #28]
 8005df4:	4301      	orrs	r1, r0
 8005df6:	9806      	ldr	r0, [sp, #24]
 8005df8:	4301      	orrs	r1, r0
 8005dfa:	d120      	bne.n	8005e3e <_dtoa_r+0xa96>
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	ddee      	ble.n	8005dde <_dtoa_r+0xa36>
 8005e00:	9902      	ldr	r1, [sp, #8]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2201      	movs	r2, #1
 8005e06:	4648      	mov	r0, r9
 8005e08:	f000 fbee 	bl	80065e8 <__lshift>
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	9002      	str	r0, [sp, #8]
 8005e10:	f000 fc56 	bl	80066c0 <__mcmp>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	9b00      	ldr	r3, [sp, #0]
 8005e18:	dc02      	bgt.n	8005e20 <_dtoa_r+0xa78>
 8005e1a:	d1e0      	bne.n	8005dde <_dtoa_r+0xa36>
 8005e1c:	07da      	lsls	r2, r3, #31
 8005e1e:	d5de      	bpl.n	8005dde <_dtoa_r+0xa36>
 8005e20:	2b39      	cmp	r3, #57	@ 0x39
 8005e22:	d1da      	bne.n	8005dda <_dtoa_r+0xa32>
 8005e24:	2339      	movs	r3, #57	@ 0x39
 8005e26:	f88b 3000 	strb.w	r3, [fp]
 8005e2a:	4633      	mov	r3, r6
 8005e2c:	461e      	mov	r6, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e34:	2a39      	cmp	r2, #57	@ 0x39
 8005e36:	d04e      	beq.n	8005ed6 <_dtoa_r+0xb2e>
 8005e38:	3201      	adds	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	e501      	b.n	8005842 <_dtoa_r+0x49a>
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	dd03      	ble.n	8005e4a <_dtoa_r+0xaa2>
 8005e42:	2b39      	cmp	r3, #57	@ 0x39
 8005e44:	d0ee      	beq.n	8005e24 <_dtoa_r+0xa7c>
 8005e46:	3301      	adds	r3, #1
 8005e48:	e7c9      	b.n	8005dde <_dtoa_r+0xa36>
 8005e4a:	9a00      	ldr	r2, [sp, #0]
 8005e4c:	9908      	ldr	r1, [sp, #32]
 8005e4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e52:	428a      	cmp	r2, r1
 8005e54:	d028      	beq.n	8005ea8 <_dtoa_r+0xb00>
 8005e56:	9902      	ldr	r1, [sp, #8]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	220a      	movs	r2, #10
 8005e5c:	4648      	mov	r0, r9
 8005e5e:	f000 f9d5 	bl	800620c <__multadd>
 8005e62:	42af      	cmp	r7, r5
 8005e64:	9002      	str	r0, [sp, #8]
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	f04f 020a 	mov.w	r2, #10
 8005e6e:	4639      	mov	r1, r7
 8005e70:	4648      	mov	r0, r9
 8005e72:	d107      	bne.n	8005e84 <_dtoa_r+0xadc>
 8005e74:	f000 f9ca 	bl	800620c <__multadd>
 8005e78:	4607      	mov	r7, r0
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	9b00      	ldr	r3, [sp, #0]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	e777      	b.n	8005d74 <_dtoa_r+0x9cc>
 8005e84:	f000 f9c2 	bl	800620c <__multadd>
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	220a      	movs	r2, #10
 8005e90:	4648      	mov	r0, r9
 8005e92:	f000 f9bb 	bl	800620c <__multadd>
 8005e96:	4605      	mov	r5, r0
 8005e98:	e7f0      	b.n	8005e7c <_dtoa_r+0xad4>
 8005e9a:	f1bb 0f00 	cmp.w	fp, #0
 8005e9e:	bfcc      	ite	gt
 8005ea0:	465e      	movgt	r6, fp
 8005ea2:	2601      	movle	r6, #1
 8005ea4:	4456      	add	r6, sl
 8005ea6:	2700      	movs	r7, #0
 8005ea8:	9902      	ldr	r1, [sp, #8]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	2201      	movs	r2, #1
 8005eae:	4648      	mov	r0, r9
 8005eb0:	f000 fb9a 	bl	80065e8 <__lshift>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	9002      	str	r0, [sp, #8]
 8005eb8:	f000 fc02 	bl	80066c0 <__mcmp>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	dcb4      	bgt.n	8005e2a <_dtoa_r+0xa82>
 8005ec0:	d102      	bne.n	8005ec8 <_dtoa_r+0xb20>
 8005ec2:	9b00      	ldr	r3, [sp, #0]
 8005ec4:	07db      	lsls	r3, r3, #31
 8005ec6:	d4b0      	bmi.n	8005e2a <_dtoa_r+0xa82>
 8005ec8:	4633      	mov	r3, r6
 8005eca:	461e      	mov	r6, r3
 8005ecc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ed0:	2a30      	cmp	r2, #48	@ 0x30
 8005ed2:	d0fa      	beq.n	8005eca <_dtoa_r+0xb22>
 8005ed4:	e4b5      	b.n	8005842 <_dtoa_r+0x49a>
 8005ed6:	459a      	cmp	sl, r3
 8005ed8:	d1a8      	bne.n	8005e2c <_dtoa_r+0xa84>
 8005eda:	2331      	movs	r3, #49	@ 0x31
 8005edc:	f108 0801 	add.w	r8, r8, #1
 8005ee0:	f88a 3000 	strb.w	r3, [sl]
 8005ee4:	e4ad      	b.n	8005842 <_dtoa_r+0x49a>
 8005ee6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ee8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005f44 <_dtoa_r+0xb9c>
 8005eec:	b11b      	cbz	r3, 8005ef6 <_dtoa_r+0xb4e>
 8005eee:	f10a 0308 	add.w	r3, sl, #8
 8005ef2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	b017      	add	sp, #92	@ 0x5c
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	9b07      	ldr	r3, [sp, #28]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	f77f ae2e 	ble.w	8005b62 <_dtoa_r+0x7ba>
 8005f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f08:	9308      	str	r3, [sp, #32]
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	e64d      	b.n	8005baa <_dtoa_r+0x802>
 8005f0e:	f1bb 0f00 	cmp.w	fp, #0
 8005f12:	f77f aed9 	ble.w	8005cc8 <_dtoa_r+0x920>
 8005f16:	4656      	mov	r6, sl
 8005f18:	9802      	ldr	r0, [sp, #8]
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	f7ff f9bc 	bl	8005298 <quorem>
 8005f20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005f24:	f806 3b01 	strb.w	r3, [r6], #1
 8005f28:	eba6 020a 	sub.w	r2, r6, sl
 8005f2c:	4593      	cmp	fp, r2
 8005f2e:	ddb4      	ble.n	8005e9a <_dtoa_r+0xaf2>
 8005f30:	9902      	ldr	r1, [sp, #8]
 8005f32:	2300      	movs	r3, #0
 8005f34:	220a      	movs	r2, #10
 8005f36:	4648      	mov	r0, r9
 8005f38:	f000 f968 	bl	800620c <__multadd>
 8005f3c:	9002      	str	r0, [sp, #8]
 8005f3e:	e7eb      	b.n	8005f18 <_dtoa_r+0xb70>
 8005f40:	0800a4ed 	.word	0x0800a4ed
 8005f44:	0800a471 	.word	0x0800a471

08005f48 <_free_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d041      	beq.n	8005fd4 <_free_r+0x8c>
 8005f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f54:	1f0c      	subs	r4, r1, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bfb8      	it	lt
 8005f5a:	18e4      	addlt	r4, r4, r3
 8005f5c:	f000 f8e8 	bl	8006130 <__malloc_lock>
 8005f60:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd8 <_free_r+0x90>)
 8005f62:	6813      	ldr	r3, [r2, #0]
 8005f64:	b933      	cbnz	r3, 8005f74 <_free_r+0x2c>
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	6014      	str	r4, [r2, #0]
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f70:	f000 b8e4 	b.w	800613c <__malloc_unlock>
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d908      	bls.n	8005f8a <_free_r+0x42>
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	1821      	adds	r1, r4, r0
 8005f7c:	428b      	cmp	r3, r1
 8005f7e:	bf01      	itttt	eq
 8005f80:	6819      	ldreq	r1, [r3, #0]
 8005f82:	685b      	ldreq	r3, [r3, #4]
 8005f84:	1809      	addeq	r1, r1, r0
 8005f86:	6021      	streq	r1, [r4, #0]
 8005f88:	e7ed      	b.n	8005f66 <_free_r+0x1e>
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	b10b      	cbz	r3, 8005f94 <_free_r+0x4c>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d9fa      	bls.n	8005f8a <_free_r+0x42>
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	1850      	adds	r0, r2, r1
 8005f98:	42a0      	cmp	r0, r4
 8005f9a:	d10b      	bne.n	8005fb4 <_free_r+0x6c>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	4401      	add	r1, r0
 8005fa0:	1850      	adds	r0, r2, r1
 8005fa2:	4283      	cmp	r3, r0
 8005fa4:	6011      	str	r1, [r2, #0]
 8005fa6:	d1e0      	bne.n	8005f6a <_free_r+0x22>
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	6053      	str	r3, [r2, #4]
 8005fae:	4408      	add	r0, r1
 8005fb0:	6010      	str	r0, [r2, #0]
 8005fb2:	e7da      	b.n	8005f6a <_free_r+0x22>
 8005fb4:	d902      	bls.n	8005fbc <_free_r+0x74>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	602b      	str	r3, [r5, #0]
 8005fba:	e7d6      	b.n	8005f6a <_free_r+0x22>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	1821      	adds	r1, r4, r0
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	bf04      	itt	eq
 8005fc4:	6819      	ldreq	r1, [r3, #0]
 8005fc6:	685b      	ldreq	r3, [r3, #4]
 8005fc8:	6063      	str	r3, [r4, #4]
 8005fca:	bf04      	itt	eq
 8005fcc:	1809      	addeq	r1, r1, r0
 8005fce:	6021      	streq	r1, [r4, #0]
 8005fd0:	6054      	str	r4, [r2, #4]
 8005fd2:	e7ca      	b.n	8005f6a <_free_r+0x22>
 8005fd4:	bd38      	pop	{r3, r4, r5, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200003fc 	.word	0x200003fc

08005fdc <malloc>:
 8005fdc:	4b02      	ldr	r3, [pc, #8]	@ (8005fe8 <malloc+0xc>)
 8005fde:	4601      	mov	r1, r0
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	f000 b825 	b.w	8006030 <_malloc_r>
 8005fe6:	bf00      	nop
 8005fe8:	2000001c 	.word	0x2000001c

08005fec <sbrk_aligned>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4e0f      	ldr	r6, [pc, #60]	@ (800602c <sbrk_aligned+0x40>)
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	6831      	ldr	r1, [r6, #0]
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	b911      	cbnz	r1, 8005ffe <sbrk_aligned+0x12>
 8005ff8:	f001 ffda 	bl	8007fb0 <_sbrk_r>
 8005ffc:	6030      	str	r0, [r6, #0]
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f001 ffd5 	bl	8007fb0 <_sbrk_r>
 8006006:	1c43      	adds	r3, r0, #1
 8006008:	d103      	bne.n	8006012 <sbrk_aligned+0x26>
 800600a:	f04f 34ff 	mov.w	r4, #4294967295
 800600e:	4620      	mov	r0, r4
 8006010:	bd70      	pop	{r4, r5, r6, pc}
 8006012:	1cc4      	adds	r4, r0, #3
 8006014:	f024 0403 	bic.w	r4, r4, #3
 8006018:	42a0      	cmp	r0, r4
 800601a:	d0f8      	beq.n	800600e <sbrk_aligned+0x22>
 800601c:	1a21      	subs	r1, r4, r0
 800601e:	4628      	mov	r0, r5
 8006020:	f001 ffc6 	bl	8007fb0 <_sbrk_r>
 8006024:	3001      	adds	r0, #1
 8006026:	d1f2      	bne.n	800600e <sbrk_aligned+0x22>
 8006028:	e7ef      	b.n	800600a <sbrk_aligned+0x1e>
 800602a:	bf00      	nop
 800602c:	200003f8 	.word	0x200003f8

08006030 <_malloc_r>:
 8006030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006034:	1ccd      	adds	r5, r1, #3
 8006036:	f025 0503 	bic.w	r5, r5, #3
 800603a:	3508      	adds	r5, #8
 800603c:	2d0c      	cmp	r5, #12
 800603e:	bf38      	it	cc
 8006040:	250c      	movcc	r5, #12
 8006042:	2d00      	cmp	r5, #0
 8006044:	4606      	mov	r6, r0
 8006046:	db01      	blt.n	800604c <_malloc_r+0x1c>
 8006048:	42a9      	cmp	r1, r5
 800604a:	d904      	bls.n	8006056 <_malloc_r+0x26>
 800604c:	230c      	movs	r3, #12
 800604e:	6033      	str	r3, [r6, #0]
 8006050:	2000      	movs	r0, #0
 8006052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800612c <_malloc_r+0xfc>
 800605a:	f000 f869 	bl	8006130 <__malloc_lock>
 800605e:	f8d8 3000 	ldr.w	r3, [r8]
 8006062:	461c      	mov	r4, r3
 8006064:	bb44      	cbnz	r4, 80060b8 <_malloc_r+0x88>
 8006066:	4629      	mov	r1, r5
 8006068:	4630      	mov	r0, r6
 800606a:	f7ff ffbf 	bl	8005fec <sbrk_aligned>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	4604      	mov	r4, r0
 8006072:	d158      	bne.n	8006126 <_malloc_r+0xf6>
 8006074:	f8d8 4000 	ldr.w	r4, [r8]
 8006078:	4627      	mov	r7, r4
 800607a:	2f00      	cmp	r7, #0
 800607c:	d143      	bne.n	8006106 <_malloc_r+0xd6>
 800607e:	2c00      	cmp	r4, #0
 8006080:	d04b      	beq.n	800611a <_malloc_r+0xea>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	4639      	mov	r1, r7
 8006086:	4630      	mov	r0, r6
 8006088:	eb04 0903 	add.w	r9, r4, r3
 800608c:	f001 ff90 	bl	8007fb0 <_sbrk_r>
 8006090:	4581      	cmp	r9, r0
 8006092:	d142      	bne.n	800611a <_malloc_r+0xea>
 8006094:	6821      	ldr	r1, [r4, #0]
 8006096:	1a6d      	subs	r5, r5, r1
 8006098:	4629      	mov	r1, r5
 800609a:	4630      	mov	r0, r6
 800609c:	f7ff ffa6 	bl	8005fec <sbrk_aligned>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d03a      	beq.n	800611a <_malloc_r+0xea>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	442b      	add	r3, r5
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	f8d8 3000 	ldr.w	r3, [r8]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	bb62      	cbnz	r2, 800610c <_malloc_r+0xdc>
 80060b2:	f8c8 7000 	str.w	r7, [r8]
 80060b6:	e00f      	b.n	80060d8 <_malloc_r+0xa8>
 80060b8:	6822      	ldr	r2, [r4, #0]
 80060ba:	1b52      	subs	r2, r2, r5
 80060bc:	d420      	bmi.n	8006100 <_malloc_r+0xd0>
 80060be:	2a0b      	cmp	r2, #11
 80060c0:	d917      	bls.n	80060f2 <_malloc_r+0xc2>
 80060c2:	1961      	adds	r1, r4, r5
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	6025      	str	r5, [r4, #0]
 80060c8:	bf18      	it	ne
 80060ca:	6059      	strne	r1, [r3, #4]
 80060cc:	6863      	ldr	r3, [r4, #4]
 80060ce:	bf08      	it	eq
 80060d0:	f8c8 1000 	streq.w	r1, [r8]
 80060d4:	5162      	str	r2, [r4, r5]
 80060d6:	604b      	str	r3, [r1, #4]
 80060d8:	4630      	mov	r0, r6
 80060da:	f000 f82f 	bl	800613c <__malloc_unlock>
 80060de:	f104 000b 	add.w	r0, r4, #11
 80060e2:	1d23      	adds	r3, r4, #4
 80060e4:	f020 0007 	bic.w	r0, r0, #7
 80060e8:	1ac2      	subs	r2, r0, r3
 80060ea:	bf1c      	itt	ne
 80060ec:	1a1b      	subne	r3, r3, r0
 80060ee:	50a3      	strne	r3, [r4, r2]
 80060f0:	e7af      	b.n	8006052 <_malloc_r+0x22>
 80060f2:	6862      	ldr	r2, [r4, #4]
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	bf0c      	ite	eq
 80060f8:	f8c8 2000 	streq.w	r2, [r8]
 80060fc:	605a      	strne	r2, [r3, #4]
 80060fe:	e7eb      	b.n	80060d8 <_malloc_r+0xa8>
 8006100:	4623      	mov	r3, r4
 8006102:	6864      	ldr	r4, [r4, #4]
 8006104:	e7ae      	b.n	8006064 <_malloc_r+0x34>
 8006106:	463c      	mov	r4, r7
 8006108:	687f      	ldr	r7, [r7, #4]
 800610a:	e7b6      	b.n	800607a <_malloc_r+0x4a>
 800610c:	461a      	mov	r2, r3
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	42a3      	cmp	r3, r4
 8006112:	d1fb      	bne.n	800610c <_malloc_r+0xdc>
 8006114:	2300      	movs	r3, #0
 8006116:	6053      	str	r3, [r2, #4]
 8006118:	e7de      	b.n	80060d8 <_malloc_r+0xa8>
 800611a:	230c      	movs	r3, #12
 800611c:	6033      	str	r3, [r6, #0]
 800611e:	4630      	mov	r0, r6
 8006120:	f000 f80c 	bl	800613c <__malloc_unlock>
 8006124:	e794      	b.n	8006050 <_malloc_r+0x20>
 8006126:	6005      	str	r5, [r0, #0]
 8006128:	e7d6      	b.n	80060d8 <_malloc_r+0xa8>
 800612a:	bf00      	nop
 800612c:	200003fc 	.word	0x200003fc

08006130 <__malloc_lock>:
 8006130:	4801      	ldr	r0, [pc, #4]	@ (8006138 <__malloc_lock+0x8>)
 8006132:	f7ff b8a8 	b.w	8005286 <__retarget_lock_acquire_recursive>
 8006136:	bf00      	nop
 8006138:	200003f4 	.word	0x200003f4

0800613c <__malloc_unlock>:
 800613c:	4801      	ldr	r0, [pc, #4]	@ (8006144 <__malloc_unlock+0x8>)
 800613e:	f7ff b8a3 	b.w	8005288 <__retarget_lock_release_recursive>
 8006142:	bf00      	nop
 8006144:	200003f4 	.word	0x200003f4

08006148 <_Balloc>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	69c6      	ldr	r6, [r0, #28]
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	b976      	cbnz	r6, 8006170 <_Balloc+0x28>
 8006152:	2010      	movs	r0, #16
 8006154:	f7ff ff42 	bl	8005fdc <malloc>
 8006158:	4602      	mov	r2, r0
 800615a:	61e0      	str	r0, [r4, #28]
 800615c:	b920      	cbnz	r0, 8006168 <_Balloc+0x20>
 800615e:	4b18      	ldr	r3, [pc, #96]	@ (80061c0 <_Balloc+0x78>)
 8006160:	4818      	ldr	r0, [pc, #96]	@ (80061c4 <_Balloc+0x7c>)
 8006162:	216b      	movs	r1, #107	@ 0x6b
 8006164:	f001 ff4c 	bl	8008000 <__assert_func>
 8006168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800616c:	6006      	str	r6, [r0, #0]
 800616e:	60c6      	str	r6, [r0, #12]
 8006170:	69e6      	ldr	r6, [r4, #28]
 8006172:	68f3      	ldr	r3, [r6, #12]
 8006174:	b183      	cbz	r3, 8006198 <_Balloc+0x50>
 8006176:	69e3      	ldr	r3, [r4, #28]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800617e:	b9b8      	cbnz	r0, 80061b0 <_Balloc+0x68>
 8006180:	2101      	movs	r1, #1
 8006182:	fa01 f605 	lsl.w	r6, r1, r5
 8006186:	1d72      	adds	r2, r6, #5
 8006188:	0092      	lsls	r2, r2, #2
 800618a:	4620      	mov	r0, r4
 800618c:	f001 ff56 	bl	800803c <_calloc_r>
 8006190:	b160      	cbz	r0, 80061ac <_Balloc+0x64>
 8006192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006196:	e00e      	b.n	80061b6 <_Balloc+0x6e>
 8006198:	2221      	movs	r2, #33	@ 0x21
 800619a:	2104      	movs	r1, #4
 800619c:	4620      	mov	r0, r4
 800619e:	f001 ff4d 	bl	800803c <_calloc_r>
 80061a2:	69e3      	ldr	r3, [r4, #28]
 80061a4:	60f0      	str	r0, [r6, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e4      	bne.n	8006176 <_Balloc+0x2e>
 80061ac:	2000      	movs	r0, #0
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	6802      	ldr	r2, [r0, #0]
 80061b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061b6:	2300      	movs	r3, #0
 80061b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061bc:	e7f7      	b.n	80061ae <_Balloc+0x66>
 80061be:	bf00      	nop
 80061c0:	0800a47e 	.word	0x0800a47e
 80061c4:	0800a4fe 	.word	0x0800a4fe

080061c8 <_Bfree>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	69c6      	ldr	r6, [r0, #28]
 80061cc:	4605      	mov	r5, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	b976      	cbnz	r6, 80061f0 <_Bfree+0x28>
 80061d2:	2010      	movs	r0, #16
 80061d4:	f7ff ff02 	bl	8005fdc <malloc>
 80061d8:	4602      	mov	r2, r0
 80061da:	61e8      	str	r0, [r5, #28]
 80061dc:	b920      	cbnz	r0, 80061e8 <_Bfree+0x20>
 80061de:	4b09      	ldr	r3, [pc, #36]	@ (8006204 <_Bfree+0x3c>)
 80061e0:	4809      	ldr	r0, [pc, #36]	@ (8006208 <_Bfree+0x40>)
 80061e2:	218f      	movs	r1, #143	@ 0x8f
 80061e4:	f001 ff0c 	bl	8008000 <__assert_func>
 80061e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061ec:	6006      	str	r6, [r0, #0]
 80061ee:	60c6      	str	r6, [r0, #12]
 80061f0:	b13c      	cbz	r4, 8006202 <_Bfree+0x3a>
 80061f2:	69eb      	ldr	r3, [r5, #28]
 80061f4:	6862      	ldr	r2, [r4, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061fc:	6021      	str	r1, [r4, #0]
 80061fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	0800a47e 	.word	0x0800a47e
 8006208:	0800a4fe 	.word	0x0800a4fe

0800620c <__multadd>:
 800620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006210:	690d      	ldr	r5, [r1, #16]
 8006212:	4607      	mov	r7, r0
 8006214:	460c      	mov	r4, r1
 8006216:	461e      	mov	r6, r3
 8006218:	f101 0c14 	add.w	ip, r1, #20
 800621c:	2000      	movs	r0, #0
 800621e:	f8dc 3000 	ldr.w	r3, [ip]
 8006222:	b299      	uxth	r1, r3
 8006224:	fb02 6101 	mla	r1, r2, r1, r6
 8006228:	0c1e      	lsrs	r6, r3, #16
 800622a:	0c0b      	lsrs	r3, r1, #16
 800622c:	fb02 3306 	mla	r3, r2, r6, r3
 8006230:	b289      	uxth	r1, r1
 8006232:	3001      	adds	r0, #1
 8006234:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006238:	4285      	cmp	r5, r0
 800623a:	f84c 1b04 	str.w	r1, [ip], #4
 800623e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006242:	dcec      	bgt.n	800621e <__multadd+0x12>
 8006244:	b30e      	cbz	r6, 800628a <__multadd+0x7e>
 8006246:	68a3      	ldr	r3, [r4, #8]
 8006248:	42ab      	cmp	r3, r5
 800624a:	dc19      	bgt.n	8006280 <__multadd+0x74>
 800624c:	6861      	ldr	r1, [r4, #4]
 800624e:	4638      	mov	r0, r7
 8006250:	3101      	adds	r1, #1
 8006252:	f7ff ff79 	bl	8006148 <_Balloc>
 8006256:	4680      	mov	r8, r0
 8006258:	b928      	cbnz	r0, 8006266 <__multadd+0x5a>
 800625a:	4602      	mov	r2, r0
 800625c:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <__multadd+0x84>)
 800625e:	480d      	ldr	r0, [pc, #52]	@ (8006294 <__multadd+0x88>)
 8006260:	21ba      	movs	r1, #186	@ 0xba
 8006262:	f001 fecd 	bl	8008000 <__assert_func>
 8006266:	6922      	ldr	r2, [r4, #16]
 8006268:	3202      	adds	r2, #2
 800626a:	f104 010c 	add.w	r1, r4, #12
 800626e:	0092      	lsls	r2, r2, #2
 8006270:	300c      	adds	r0, #12
 8006272:	f001 fead 	bl	8007fd0 <memcpy>
 8006276:	4621      	mov	r1, r4
 8006278:	4638      	mov	r0, r7
 800627a:	f7ff ffa5 	bl	80061c8 <_Bfree>
 800627e:	4644      	mov	r4, r8
 8006280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006284:	3501      	adds	r5, #1
 8006286:	615e      	str	r6, [r3, #20]
 8006288:	6125      	str	r5, [r4, #16]
 800628a:	4620      	mov	r0, r4
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006290:	0800a4ed 	.word	0x0800a4ed
 8006294:	0800a4fe 	.word	0x0800a4fe

08006298 <__s2b>:
 8006298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800629c:	460c      	mov	r4, r1
 800629e:	4615      	mov	r5, r2
 80062a0:	461f      	mov	r7, r3
 80062a2:	2209      	movs	r2, #9
 80062a4:	3308      	adds	r3, #8
 80062a6:	4606      	mov	r6, r0
 80062a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062ac:	2100      	movs	r1, #0
 80062ae:	2201      	movs	r2, #1
 80062b0:	429a      	cmp	r2, r3
 80062b2:	db09      	blt.n	80062c8 <__s2b+0x30>
 80062b4:	4630      	mov	r0, r6
 80062b6:	f7ff ff47 	bl	8006148 <_Balloc>
 80062ba:	b940      	cbnz	r0, 80062ce <__s2b+0x36>
 80062bc:	4602      	mov	r2, r0
 80062be:	4b19      	ldr	r3, [pc, #100]	@ (8006324 <__s2b+0x8c>)
 80062c0:	4819      	ldr	r0, [pc, #100]	@ (8006328 <__s2b+0x90>)
 80062c2:	21d3      	movs	r1, #211	@ 0xd3
 80062c4:	f001 fe9c 	bl	8008000 <__assert_func>
 80062c8:	0052      	lsls	r2, r2, #1
 80062ca:	3101      	adds	r1, #1
 80062cc:	e7f0      	b.n	80062b0 <__s2b+0x18>
 80062ce:	9b08      	ldr	r3, [sp, #32]
 80062d0:	6143      	str	r3, [r0, #20]
 80062d2:	2d09      	cmp	r5, #9
 80062d4:	f04f 0301 	mov.w	r3, #1
 80062d8:	6103      	str	r3, [r0, #16]
 80062da:	dd16      	ble.n	800630a <__s2b+0x72>
 80062dc:	f104 0909 	add.w	r9, r4, #9
 80062e0:	46c8      	mov	r8, r9
 80062e2:	442c      	add	r4, r5
 80062e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80062e8:	4601      	mov	r1, r0
 80062ea:	3b30      	subs	r3, #48	@ 0x30
 80062ec:	220a      	movs	r2, #10
 80062ee:	4630      	mov	r0, r6
 80062f0:	f7ff ff8c 	bl	800620c <__multadd>
 80062f4:	45a0      	cmp	r8, r4
 80062f6:	d1f5      	bne.n	80062e4 <__s2b+0x4c>
 80062f8:	f1a5 0408 	sub.w	r4, r5, #8
 80062fc:	444c      	add	r4, r9
 80062fe:	1b2d      	subs	r5, r5, r4
 8006300:	1963      	adds	r3, r4, r5
 8006302:	42bb      	cmp	r3, r7
 8006304:	db04      	blt.n	8006310 <__s2b+0x78>
 8006306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630a:	340a      	adds	r4, #10
 800630c:	2509      	movs	r5, #9
 800630e:	e7f6      	b.n	80062fe <__s2b+0x66>
 8006310:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006314:	4601      	mov	r1, r0
 8006316:	3b30      	subs	r3, #48	@ 0x30
 8006318:	220a      	movs	r2, #10
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff ff76 	bl	800620c <__multadd>
 8006320:	e7ee      	b.n	8006300 <__s2b+0x68>
 8006322:	bf00      	nop
 8006324:	0800a4ed 	.word	0x0800a4ed
 8006328:	0800a4fe 	.word	0x0800a4fe

0800632c <__hi0bits>:
 800632c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006330:	4603      	mov	r3, r0
 8006332:	bf36      	itet	cc
 8006334:	0403      	lslcc	r3, r0, #16
 8006336:	2000      	movcs	r0, #0
 8006338:	2010      	movcc	r0, #16
 800633a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800633e:	bf3c      	itt	cc
 8006340:	021b      	lslcc	r3, r3, #8
 8006342:	3008      	addcc	r0, #8
 8006344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006348:	bf3c      	itt	cc
 800634a:	011b      	lslcc	r3, r3, #4
 800634c:	3004      	addcc	r0, #4
 800634e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006352:	bf3c      	itt	cc
 8006354:	009b      	lslcc	r3, r3, #2
 8006356:	3002      	addcc	r0, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	db05      	blt.n	8006368 <__hi0bits+0x3c>
 800635c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006360:	f100 0001 	add.w	r0, r0, #1
 8006364:	bf08      	it	eq
 8006366:	2020      	moveq	r0, #32
 8006368:	4770      	bx	lr

0800636a <__lo0bits>:
 800636a:	6803      	ldr	r3, [r0, #0]
 800636c:	4602      	mov	r2, r0
 800636e:	f013 0007 	ands.w	r0, r3, #7
 8006372:	d00b      	beq.n	800638c <__lo0bits+0x22>
 8006374:	07d9      	lsls	r1, r3, #31
 8006376:	d421      	bmi.n	80063bc <__lo0bits+0x52>
 8006378:	0798      	lsls	r0, r3, #30
 800637a:	bf49      	itett	mi
 800637c:	085b      	lsrmi	r3, r3, #1
 800637e:	089b      	lsrpl	r3, r3, #2
 8006380:	2001      	movmi	r0, #1
 8006382:	6013      	strmi	r3, [r2, #0]
 8006384:	bf5c      	itt	pl
 8006386:	6013      	strpl	r3, [r2, #0]
 8006388:	2002      	movpl	r0, #2
 800638a:	4770      	bx	lr
 800638c:	b299      	uxth	r1, r3
 800638e:	b909      	cbnz	r1, 8006394 <__lo0bits+0x2a>
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	2010      	movs	r0, #16
 8006394:	b2d9      	uxtb	r1, r3
 8006396:	b909      	cbnz	r1, 800639c <__lo0bits+0x32>
 8006398:	3008      	adds	r0, #8
 800639a:	0a1b      	lsrs	r3, r3, #8
 800639c:	0719      	lsls	r1, r3, #28
 800639e:	bf04      	itt	eq
 80063a0:	091b      	lsreq	r3, r3, #4
 80063a2:	3004      	addeq	r0, #4
 80063a4:	0799      	lsls	r1, r3, #30
 80063a6:	bf04      	itt	eq
 80063a8:	089b      	lsreq	r3, r3, #2
 80063aa:	3002      	addeq	r0, #2
 80063ac:	07d9      	lsls	r1, r3, #31
 80063ae:	d403      	bmi.n	80063b8 <__lo0bits+0x4e>
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	f100 0001 	add.w	r0, r0, #1
 80063b6:	d003      	beq.n	80063c0 <__lo0bits+0x56>
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4770      	bx	lr
 80063bc:	2000      	movs	r0, #0
 80063be:	4770      	bx	lr
 80063c0:	2020      	movs	r0, #32
 80063c2:	4770      	bx	lr

080063c4 <__i2b>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	460c      	mov	r4, r1
 80063c8:	2101      	movs	r1, #1
 80063ca:	f7ff febd 	bl	8006148 <_Balloc>
 80063ce:	4602      	mov	r2, r0
 80063d0:	b928      	cbnz	r0, 80063de <__i2b+0x1a>
 80063d2:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <__i2b+0x24>)
 80063d4:	4805      	ldr	r0, [pc, #20]	@ (80063ec <__i2b+0x28>)
 80063d6:	f240 1145 	movw	r1, #325	@ 0x145
 80063da:	f001 fe11 	bl	8008000 <__assert_func>
 80063de:	2301      	movs	r3, #1
 80063e0:	6144      	str	r4, [r0, #20]
 80063e2:	6103      	str	r3, [r0, #16]
 80063e4:	bd10      	pop	{r4, pc}
 80063e6:	bf00      	nop
 80063e8:	0800a4ed 	.word	0x0800a4ed
 80063ec:	0800a4fe 	.word	0x0800a4fe

080063f0 <__multiply>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	4617      	mov	r7, r2
 80063f6:	690a      	ldr	r2, [r1, #16]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	bfa8      	it	ge
 80063fe:	463b      	movge	r3, r7
 8006400:	4689      	mov	r9, r1
 8006402:	bfa4      	itt	ge
 8006404:	460f      	movge	r7, r1
 8006406:	4699      	movge	r9, r3
 8006408:	693d      	ldr	r5, [r7, #16]
 800640a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	eb05 060a 	add.w	r6, r5, sl
 8006416:	42b3      	cmp	r3, r6
 8006418:	b085      	sub	sp, #20
 800641a:	bfb8      	it	lt
 800641c:	3101      	addlt	r1, #1
 800641e:	f7ff fe93 	bl	8006148 <_Balloc>
 8006422:	b930      	cbnz	r0, 8006432 <__multiply+0x42>
 8006424:	4602      	mov	r2, r0
 8006426:	4b41      	ldr	r3, [pc, #260]	@ (800652c <__multiply+0x13c>)
 8006428:	4841      	ldr	r0, [pc, #260]	@ (8006530 <__multiply+0x140>)
 800642a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800642e:	f001 fde7 	bl	8008000 <__assert_func>
 8006432:	f100 0414 	add.w	r4, r0, #20
 8006436:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800643a:	4623      	mov	r3, r4
 800643c:	2200      	movs	r2, #0
 800643e:	4573      	cmp	r3, lr
 8006440:	d320      	bcc.n	8006484 <__multiply+0x94>
 8006442:	f107 0814 	add.w	r8, r7, #20
 8006446:	f109 0114 	add.w	r1, r9, #20
 800644a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800644e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	1beb      	subs	r3, r5, r7
 8006456:	3b15      	subs	r3, #21
 8006458:	f023 0303 	bic.w	r3, r3, #3
 800645c:	3304      	adds	r3, #4
 800645e:	3715      	adds	r7, #21
 8006460:	42bd      	cmp	r5, r7
 8006462:	bf38      	it	cc
 8006464:	2304      	movcc	r3, #4
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	9b02      	ldr	r3, [sp, #8]
 800646a:	9103      	str	r1, [sp, #12]
 800646c:	428b      	cmp	r3, r1
 800646e:	d80c      	bhi.n	800648a <__multiply+0x9a>
 8006470:	2e00      	cmp	r6, #0
 8006472:	dd03      	ble.n	800647c <__multiply+0x8c>
 8006474:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006478:	2b00      	cmp	r3, #0
 800647a:	d055      	beq.n	8006528 <__multiply+0x138>
 800647c:	6106      	str	r6, [r0, #16]
 800647e:	b005      	add	sp, #20
 8006480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006484:	f843 2b04 	str.w	r2, [r3], #4
 8006488:	e7d9      	b.n	800643e <__multiply+0x4e>
 800648a:	f8b1 a000 	ldrh.w	sl, [r1]
 800648e:	f1ba 0f00 	cmp.w	sl, #0
 8006492:	d01f      	beq.n	80064d4 <__multiply+0xe4>
 8006494:	46c4      	mov	ip, r8
 8006496:	46a1      	mov	r9, r4
 8006498:	2700      	movs	r7, #0
 800649a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800649e:	f8d9 3000 	ldr.w	r3, [r9]
 80064a2:	fa1f fb82 	uxth.w	fp, r2
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80064ac:	443b      	add	r3, r7
 80064ae:	f8d9 7000 	ldr.w	r7, [r9]
 80064b2:	0c12      	lsrs	r2, r2, #16
 80064b4:	0c3f      	lsrs	r7, r7, #16
 80064b6:	fb0a 7202 	mla	r2, sl, r2, r7
 80064ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064c4:	4565      	cmp	r5, ip
 80064c6:	f849 3b04 	str.w	r3, [r9], #4
 80064ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80064ce:	d8e4      	bhi.n	800649a <__multiply+0xaa>
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	50e7      	str	r7, [r4, r3]
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80064da:	3104      	adds	r1, #4
 80064dc:	f1b9 0f00 	cmp.w	r9, #0
 80064e0:	d020      	beq.n	8006524 <__multiply+0x134>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	4647      	mov	r7, r8
 80064e6:	46a4      	mov	ip, r4
 80064e8:	f04f 0a00 	mov.w	sl, #0
 80064ec:	f8b7 b000 	ldrh.w	fp, [r7]
 80064f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80064f4:	fb09 220b 	mla	r2, r9, fp, r2
 80064f8:	4452      	add	r2, sl
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006500:	f84c 3b04 	str.w	r3, [ip], #4
 8006504:	f857 3b04 	ldr.w	r3, [r7], #4
 8006508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800650c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006510:	fb09 330a 	mla	r3, r9, sl, r3
 8006514:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006518:	42bd      	cmp	r5, r7
 800651a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800651e:	d8e5      	bhi.n	80064ec <__multiply+0xfc>
 8006520:	9a01      	ldr	r2, [sp, #4]
 8006522:	50a3      	str	r3, [r4, r2]
 8006524:	3404      	adds	r4, #4
 8006526:	e79f      	b.n	8006468 <__multiply+0x78>
 8006528:	3e01      	subs	r6, #1
 800652a:	e7a1      	b.n	8006470 <__multiply+0x80>
 800652c:	0800a4ed 	.word	0x0800a4ed
 8006530:	0800a4fe 	.word	0x0800a4fe

08006534 <__pow5mult>:
 8006534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006538:	4615      	mov	r5, r2
 800653a:	f012 0203 	ands.w	r2, r2, #3
 800653e:	4607      	mov	r7, r0
 8006540:	460e      	mov	r6, r1
 8006542:	d007      	beq.n	8006554 <__pow5mult+0x20>
 8006544:	4c25      	ldr	r4, [pc, #148]	@ (80065dc <__pow5mult+0xa8>)
 8006546:	3a01      	subs	r2, #1
 8006548:	2300      	movs	r3, #0
 800654a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800654e:	f7ff fe5d 	bl	800620c <__multadd>
 8006552:	4606      	mov	r6, r0
 8006554:	10ad      	asrs	r5, r5, #2
 8006556:	d03d      	beq.n	80065d4 <__pow5mult+0xa0>
 8006558:	69fc      	ldr	r4, [r7, #28]
 800655a:	b97c      	cbnz	r4, 800657c <__pow5mult+0x48>
 800655c:	2010      	movs	r0, #16
 800655e:	f7ff fd3d 	bl	8005fdc <malloc>
 8006562:	4602      	mov	r2, r0
 8006564:	61f8      	str	r0, [r7, #28]
 8006566:	b928      	cbnz	r0, 8006574 <__pow5mult+0x40>
 8006568:	4b1d      	ldr	r3, [pc, #116]	@ (80065e0 <__pow5mult+0xac>)
 800656a:	481e      	ldr	r0, [pc, #120]	@ (80065e4 <__pow5mult+0xb0>)
 800656c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006570:	f001 fd46 	bl	8008000 <__assert_func>
 8006574:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006578:	6004      	str	r4, [r0, #0]
 800657a:	60c4      	str	r4, [r0, #12]
 800657c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006584:	b94c      	cbnz	r4, 800659a <__pow5mult+0x66>
 8006586:	f240 2171 	movw	r1, #625	@ 0x271
 800658a:	4638      	mov	r0, r7
 800658c:	f7ff ff1a 	bl	80063c4 <__i2b>
 8006590:	2300      	movs	r3, #0
 8006592:	f8c8 0008 	str.w	r0, [r8, #8]
 8006596:	4604      	mov	r4, r0
 8006598:	6003      	str	r3, [r0, #0]
 800659a:	f04f 0900 	mov.w	r9, #0
 800659e:	07eb      	lsls	r3, r5, #31
 80065a0:	d50a      	bpl.n	80065b8 <__pow5mult+0x84>
 80065a2:	4631      	mov	r1, r6
 80065a4:	4622      	mov	r2, r4
 80065a6:	4638      	mov	r0, r7
 80065a8:	f7ff ff22 	bl	80063f0 <__multiply>
 80065ac:	4631      	mov	r1, r6
 80065ae:	4680      	mov	r8, r0
 80065b0:	4638      	mov	r0, r7
 80065b2:	f7ff fe09 	bl	80061c8 <_Bfree>
 80065b6:	4646      	mov	r6, r8
 80065b8:	106d      	asrs	r5, r5, #1
 80065ba:	d00b      	beq.n	80065d4 <__pow5mult+0xa0>
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	b938      	cbnz	r0, 80065d0 <__pow5mult+0x9c>
 80065c0:	4622      	mov	r2, r4
 80065c2:	4621      	mov	r1, r4
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7ff ff13 	bl	80063f0 <__multiply>
 80065ca:	6020      	str	r0, [r4, #0]
 80065cc:	f8c0 9000 	str.w	r9, [r0]
 80065d0:	4604      	mov	r4, r0
 80065d2:	e7e4      	b.n	800659e <__pow5mult+0x6a>
 80065d4:	4630      	mov	r0, r6
 80065d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065da:	bf00      	nop
 80065dc:	0800a610 	.word	0x0800a610
 80065e0:	0800a47e 	.word	0x0800a47e
 80065e4:	0800a4fe 	.word	0x0800a4fe

080065e8 <__lshift>:
 80065e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	460c      	mov	r4, r1
 80065ee:	6849      	ldr	r1, [r1, #4]
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	4607      	mov	r7, r0
 80065fa:	4691      	mov	r9, r2
 80065fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006600:	f108 0601 	add.w	r6, r8, #1
 8006604:	42b3      	cmp	r3, r6
 8006606:	db0b      	blt.n	8006620 <__lshift+0x38>
 8006608:	4638      	mov	r0, r7
 800660a:	f7ff fd9d 	bl	8006148 <_Balloc>
 800660e:	4605      	mov	r5, r0
 8006610:	b948      	cbnz	r0, 8006626 <__lshift+0x3e>
 8006612:	4602      	mov	r2, r0
 8006614:	4b28      	ldr	r3, [pc, #160]	@ (80066b8 <__lshift+0xd0>)
 8006616:	4829      	ldr	r0, [pc, #164]	@ (80066bc <__lshift+0xd4>)
 8006618:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800661c:	f001 fcf0 	bl	8008000 <__assert_func>
 8006620:	3101      	adds	r1, #1
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	e7ee      	b.n	8006604 <__lshift+0x1c>
 8006626:	2300      	movs	r3, #0
 8006628:	f100 0114 	add.w	r1, r0, #20
 800662c:	f100 0210 	add.w	r2, r0, #16
 8006630:	4618      	mov	r0, r3
 8006632:	4553      	cmp	r3, sl
 8006634:	db33      	blt.n	800669e <__lshift+0xb6>
 8006636:	6920      	ldr	r0, [r4, #16]
 8006638:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800663c:	f104 0314 	add.w	r3, r4, #20
 8006640:	f019 091f 	ands.w	r9, r9, #31
 8006644:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006648:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800664c:	d02b      	beq.n	80066a6 <__lshift+0xbe>
 800664e:	f1c9 0e20 	rsb	lr, r9, #32
 8006652:	468a      	mov	sl, r1
 8006654:	2200      	movs	r2, #0
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	fa00 f009 	lsl.w	r0, r0, r9
 800665c:	4310      	orrs	r0, r2
 800665e:	f84a 0b04 	str.w	r0, [sl], #4
 8006662:	f853 2b04 	ldr.w	r2, [r3], #4
 8006666:	459c      	cmp	ip, r3
 8006668:	fa22 f20e 	lsr.w	r2, r2, lr
 800666c:	d8f3      	bhi.n	8006656 <__lshift+0x6e>
 800666e:	ebac 0304 	sub.w	r3, ip, r4
 8006672:	3b15      	subs	r3, #21
 8006674:	f023 0303 	bic.w	r3, r3, #3
 8006678:	3304      	adds	r3, #4
 800667a:	f104 0015 	add.w	r0, r4, #21
 800667e:	4560      	cmp	r0, ip
 8006680:	bf88      	it	hi
 8006682:	2304      	movhi	r3, #4
 8006684:	50ca      	str	r2, [r1, r3]
 8006686:	b10a      	cbz	r2, 800668c <__lshift+0xa4>
 8006688:	f108 0602 	add.w	r6, r8, #2
 800668c:	3e01      	subs	r6, #1
 800668e:	4638      	mov	r0, r7
 8006690:	612e      	str	r6, [r5, #16]
 8006692:	4621      	mov	r1, r4
 8006694:	f7ff fd98 	bl	80061c8 <_Bfree>
 8006698:	4628      	mov	r0, r5
 800669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669e:	f842 0f04 	str.w	r0, [r2, #4]!
 80066a2:	3301      	adds	r3, #1
 80066a4:	e7c5      	b.n	8006632 <__lshift+0x4a>
 80066a6:	3904      	subs	r1, #4
 80066a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80066b0:	459c      	cmp	ip, r3
 80066b2:	d8f9      	bhi.n	80066a8 <__lshift+0xc0>
 80066b4:	e7ea      	b.n	800668c <__lshift+0xa4>
 80066b6:	bf00      	nop
 80066b8:	0800a4ed 	.word	0x0800a4ed
 80066bc:	0800a4fe 	.word	0x0800a4fe

080066c0 <__mcmp>:
 80066c0:	690a      	ldr	r2, [r1, #16]
 80066c2:	4603      	mov	r3, r0
 80066c4:	6900      	ldr	r0, [r0, #16]
 80066c6:	1a80      	subs	r0, r0, r2
 80066c8:	b530      	push	{r4, r5, lr}
 80066ca:	d10e      	bne.n	80066ea <__mcmp+0x2a>
 80066cc:	3314      	adds	r3, #20
 80066ce:	3114      	adds	r1, #20
 80066d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80066d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066e0:	4295      	cmp	r5, r2
 80066e2:	d003      	beq.n	80066ec <__mcmp+0x2c>
 80066e4:	d205      	bcs.n	80066f2 <__mcmp+0x32>
 80066e6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ea:	bd30      	pop	{r4, r5, pc}
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d3f3      	bcc.n	80066d8 <__mcmp+0x18>
 80066f0:	e7fb      	b.n	80066ea <__mcmp+0x2a>
 80066f2:	2001      	movs	r0, #1
 80066f4:	e7f9      	b.n	80066ea <__mcmp+0x2a>
	...

080066f8 <__mdiff>:
 80066f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	4689      	mov	r9, r1
 80066fe:	4606      	mov	r6, r0
 8006700:	4611      	mov	r1, r2
 8006702:	4648      	mov	r0, r9
 8006704:	4614      	mov	r4, r2
 8006706:	f7ff ffdb 	bl	80066c0 <__mcmp>
 800670a:	1e05      	subs	r5, r0, #0
 800670c:	d112      	bne.n	8006734 <__mdiff+0x3c>
 800670e:	4629      	mov	r1, r5
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff fd19 	bl	8006148 <_Balloc>
 8006716:	4602      	mov	r2, r0
 8006718:	b928      	cbnz	r0, 8006726 <__mdiff+0x2e>
 800671a:	4b3f      	ldr	r3, [pc, #252]	@ (8006818 <__mdiff+0x120>)
 800671c:	f240 2137 	movw	r1, #567	@ 0x237
 8006720:	483e      	ldr	r0, [pc, #248]	@ (800681c <__mdiff+0x124>)
 8006722:	f001 fc6d 	bl	8008000 <__assert_func>
 8006726:	2301      	movs	r3, #1
 8006728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800672c:	4610      	mov	r0, r2
 800672e:	b003      	add	sp, #12
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	bfbc      	itt	lt
 8006736:	464b      	movlt	r3, r9
 8006738:	46a1      	movlt	r9, r4
 800673a:	4630      	mov	r0, r6
 800673c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006740:	bfba      	itte	lt
 8006742:	461c      	movlt	r4, r3
 8006744:	2501      	movlt	r5, #1
 8006746:	2500      	movge	r5, #0
 8006748:	f7ff fcfe 	bl	8006148 <_Balloc>
 800674c:	4602      	mov	r2, r0
 800674e:	b918      	cbnz	r0, 8006758 <__mdiff+0x60>
 8006750:	4b31      	ldr	r3, [pc, #196]	@ (8006818 <__mdiff+0x120>)
 8006752:	f240 2145 	movw	r1, #581	@ 0x245
 8006756:	e7e3      	b.n	8006720 <__mdiff+0x28>
 8006758:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800675c:	6926      	ldr	r6, [r4, #16]
 800675e:	60c5      	str	r5, [r0, #12]
 8006760:	f109 0310 	add.w	r3, r9, #16
 8006764:	f109 0514 	add.w	r5, r9, #20
 8006768:	f104 0e14 	add.w	lr, r4, #20
 800676c:	f100 0b14 	add.w	fp, r0, #20
 8006770:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006774:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	46d9      	mov	r9, fp
 800677c:	f04f 0c00 	mov.w	ip, #0
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006786:	f853 af04 	ldr.w	sl, [r3, #4]!
 800678a:	9301      	str	r3, [sp, #4]
 800678c:	fa1f f38a 	uxth.w	r3, sl
 8006790:	4619      	mov	r1, r3
 8006792:	b283      	uxth	r3, r0
 8006794:	1acb      	subs	r3, r1, r3
 8006796:	0c00      	lsrs	r0, r0, #16
 8006798:	4463      	add	r3, ip
 800679a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800679e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067a8:	4576      	cmp	r6, lr
 80067aa:	f849 3b04 	str.w	r3, [r9], #4
 80067ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067b2:	d8e5      	bhi.n	8006780 <__mdiff+0x88>
 80067b4:	1b33      	subs	r3, r6, r4
 80067b6:	3b15      	subs	r3, #21
 80067b8:	f023 0303 	bic.w	r3, r3, #3
 80067bc:	3415      	adds	r4, #21
 80067be:	3304      	adds	r3, #4
 80067c0:	42a6      	cmp	r6, r4
 80067c2:	bf38      	it	cc
 80067c4:	2304      	movcc	r3, #4
 80067c6:	441d      	add	r5, r3
 80067c8:	445b      	add	r3, fp
 80067ca:	461e      	mov	r6, r3
 80067cc:	462c      	mov	r4, r5
 80067ce:	4544      	cmp	r4, r8
 80067d0:	d30e      	bcc.n	80067f0 <__mdiff+0xf8>
 80067d2:	f108 0103 	add.w	r1, r8, #3
 80067d6:	1b49      	subs	r1, r1, r5
 80067d8:	f021 0103 	bic.w	r1, r1, #3
 80067dc:	3d03      	subs	r5, #3
 80067de:	45a8      	cmp	r8, r5
 80067e0:	bf38      	it	cc
 80067e2:	2100      	movcc	r1, #0
 80067e4:	440b      	add	r3, r1
 80067e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067ea:	b191      	cbz	r1, 8006812 <__mdiff+0x11a>
 80067ec:	6117      	str	r7, [r2, #16]
 80067ee:	e79d      	b.n	800672c <__mdiff+0x34>
 80067f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80067f4:	46e6      	mov	lr, ip
 80067f6:	0c08      	lsrs	r0, r1, #16
 80067f8:	fa1c fc81 	uxtah	ip, ip, r1
 80067fc:	4471      	add	r1, lr
 80067fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006802:	b289      	uxth	r1, r1
 8006804:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006808:	f846 1b04 	str.w	r1, [r6], #4
 800680c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006810:	e7dd      	b.n	80067ce <__mdiff+0xd6>
 8006812:	3f01      	subs	r7, #1
 8006814:	e7e7      	b.n	80067e6 <__mdiff+0xee>
 8006816:	bf00      	nop
 8006818:	0800a4ed 	.word	0x0800a4ed
 800681c:	0800a4fe 	.word	0x0800a4fe

08006820 <__ulp>:
 8006820:	b082      	sub	sp, #8
 8006822:	ed8d 0b00 	vstr	d0, [sp]
 8006826:	9a01      	ldr	r2, [sp, #4]
 8006828:	4b0f      	ldr	r3, [pc, #60]	@ (8006868 <__ulp+0x48>)
 800682a:	4013      	ands	r3, r2
 800682c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006830:	2b00      	cmp	r3, #0
 8006832:	dc08      	bgt.n	8006846 <__ulp+0x26>
 8006834:	425b      	negs	r3, r3
 8006836:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800683a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800683e:	da04      	bge.n	800684a <__ulp+0x2a>
 8006840:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006844:	4113      	asrs	r3, r2
 8006846:	2200      	movs	r2, #0
 8006848:	e008      	b.n	800685c <__ulp+0x3c>
 800684a:	f1a2 0314 	sub.w	r3, r2, #20
 800684e:	2b1e      	cmp	r3, #30
 8006850:	bfda      	itte	le
 8006852:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006856:	40da      	lsrle	r2, r3
 8006858:	2201      	movgt	r2, #1
 800685a:	2300      	movs	r3, #0
 800685c:	4619      	mov	r1, r3
 800685e:	4610      	mov	r0, r2
 8006860:	ec41 0b10 	vmov	d0, r0, r1
 8006864:	b002      	add	sp, #8
 8006866:	4770      	bx	lr
 8006868:	7ff00000 	.word	0x7ff00000

0800686c <__b2d>:
 800686c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006870:	6906      	ldr	r6, [r0, #16]
 8006872:	f100 0814 	add.w	r8, r0, #20
 8006876:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800687a:	1f37      	subs	r7, r6, #4
 800687c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006880:	4610      	mov	r0, r2
 8006882:	f7ff fd53 	bl	800632c <__hi0bits>
 8006886:	f1c0 0320 	rsb	r3, r0, #32
 800688a:	280a      	cmp	r0, #10
 800688c:	600b      	str	r3, [r1, #0]
 800688e:	491b      	ldr	r1, [pc, #108]	@ (80068fc <__b2d+0x90>)
 8006890:	dc15      	bgt.n	80068be <__b2d+0x52>
 8006892:	f1c0 0c0b 	rsb	ip, r0, #11
 8006896:	fa22 f30c 	lsr.w	r3, r2, ip
 800689a:	45b8      	cmp	r8, r7
 800689c:	ea43 0501 	orr.w	r5, r3, r1
 80068a0:	bf34      	ite	cc
 80068a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80068a6:	2300      	movcs	r3, #0
 80068a8:	3015      	adds	r0, #21
 80068aa:	fa02 f000 	lsl.w	r0, r2, r0
 80068ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80068b2:	4303      	orrs	r3, r0
 80068b4:	461c      	mov	r4, r3
 80068b6:	ec45 4b10 	vmov	d0, r4, r5
 80068ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068be:	45b8      	cmp	r8, r7
 80068c0:	bf3a      	itte	cc
 80068c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80068c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80068ca:	2300      	movcs	r3, #0
 80068cc:	380b      	subs	r0, #11
 80068ce:	d012      	beq.n	80068f6 <__b2d+0x8a>
 80068d0:	f1c0 0120 	rsb	r1, r0, #32
 80068d4:	fa23 f401 	lsr.w	r4, r3, r1
 80068d8:	4082      	lsls	r2, r0
 80068da:	4322      	orrs	r2, r4
 80068dc:	4547      	cmp	r7, r8
 80068de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80068e2:	bf8c      	ite	hi
 80068e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80068e8:	2200      	movls	r2, #0
 80068ea:	4083      	lsls	r3, r0
 80068ec:	40ca      	lsrs	r2, r1
 80068ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80068f2:	4313      	orrs	r3, r2
 80068f4:	e7de      	b.n	80068b4 <__b2d+0x48>
 80068f6:	ea42 0501 	orr.w	r5, r2, r1
 80068fa:	e7db      	b.n	80068b4 <__b2d+0x48>
 80068fc:	3ff00000 	.word	0x3ff00000

08006900 <__d2b>:
 8006900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006904:	460f      	mov	r7, r1
 8006906:	2101      	movs	r1, #1
 8006908:	ec59 8b10 	vmov	r8, r9, d0
 800690c:	4616      	mov	r6, r2
 800690e:	f7ff fc1b 	bl	8006148 <_Balloc>
 8006912:	4604      	mov	r4, r0
 8006914:	b930      	cbnz	r0, 8006924 <__d2b+0x24>
 8006916:	4602      	mov	r2, r0
 8006918:	4b23      	ldr	r3, [pc, #140]	@ (80069a8 <__d2b+0xa8>)
 800691a:	4824      	ldr	r0, [pc, #144]	@ (80069ac <__d2b+0xac>)
 800691c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006920:	f001 fb6e 	bl	8008000 <__assert_func>
 8006924:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800692c:	b10d      	cbz	r5, 8006932 <__d2b+0x32>
 800692e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	f1b8 0300 	subs.w	r3, r8, #0
 8006938:	d023      	beq.n	8006982 <__d2b+0x82>
 800693a:	4668      	mov	r0, sp
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	f7ff fd14 	bl	800636a <__lo0bits>
 8006942:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006946:	b1d0      	cbz	r0, 800697e <__d2b+0x7e>
 8006948:	f1c0 0320 	rsb	r3, r0, #32
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	430b      	orrs	r3, r1
 8006952:	40c2      	lsrs	r2, r0
 8006954:	6163      	str	r3, [r4, #20]
 8006956:	9201      	str	r2, [sp, #4]
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	61a3      	str	r3, [r4, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	bf0c      	ite	eq
 8006960:	2201      	moveq	r2, #1
 8006962:	2202      	movne	r2, #2
 8006964:	6122      	str	r2, [r4, #16]
 8006966:	b1a5      	cbz	r5, 8006992 <__d2b+0x92>
 8006968:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800696c:	4405      	add	r5, r0
 800696e:	603d      	str	r5, [r7, #0]
 8006970:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006974:	6030      	str	r0, [r6, #0]
 8006976:	4620      	mov	r0, r4
 8006978:	b003      	add	sp, #12
 800697a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800697e:	6161      	str	r1, [r4, #20]
 8006980:	e7ea      	b.n	8006958 <__d2b+0x58>
 8006982:	a801      	add	r0, sp, #4
 8006984:	f7ff fcf1 	bl	800636a <__lo0bits>
 8006988:	9b01      	ldr	r3, [sp, #4]
 800698a:	6163      	str	r3, [r4, #20]
 800698c:	3020      	adds	r0, #32
 800698e:	2201      	movs	r2, #1
 8006990:	e7e8      	b.n	8006964 <__d2b+0x64>
 8006992:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006996:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800699a:	6038      	str	r0, [r7, #0]
 800699c:	6918      	ldr	r0, [r3, #16]
 800699e:	f7ff fcc5 	bl	800632c <__hi0bits>
 80069a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069a6:	e7e5      	b.n	8006974 <__d2b+0x74>
 80069a8:	0800a4ed 	.word	0x0800a4ed
 80069ac:	0800a4fe 	.word	0x0800a4fe

080069b0 <__ratio>:
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	b085      	sub	sp, #20
 80069b6:	e9cd 1000 	strd	r1, r0, [sp]
 80069ba:	a902      	add	r1, sp, #8
 80069bc:	f7ff ff56 	bl	800686c <__b2d>
 80069c0:	9800      	ldr	r0, [sp, #0]
 80069c2:	a903      	add	r1, sp, #12
 80069c4:	ec55 4b10 	vmov	r4, r5, d0
 80069c8:	f7ff ff50 	bl	800686c <__b2d>
 80069cc:	9b01      	ldr	r3, [sp, #4]
 80069ce:	6919      	ldr	r1, [r3, #16]
 80069d0:	9b00      	ldr	r3, [sp, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	1ac9      	subs	r1, r1, r3
 80069d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80069da:	1a9b      	subs	r3, r3, r2
 80069dc:	ec5b ab10 	vmov	sl, fp, d0
 80069e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bfce      	itee	gt
 80069e8:	462a      	movgt	r2, r5
 80069ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80069ee:	465a      	movle	r2, fp
 80069f0:	462f      	mov	r7, r5
 80069f2:	46d9      	mov	r9, fp
 80069f4:	bfcc      	ite	gt
 80069f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80069fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80069fe:	464b      	mov	r3, r9
 8006a00:	4652      	mov	r2, sl
 8006a02:	4620      	mov	r0, r4
 8006a04:	4639      	mov	r1, r7
 8006a06:	f7f9 ff41 	bl	800088c <__aeabi_ddiv>
 8006a0a:	ec41 0b10 	vmov	d0, r0, r1
 8006a0e:	b005      	add	sp, #20
 8006a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a14 <__copybits>:
 8006a14:	3901      	subs	r1, #1
 8006a16:	b570      	push	{r4, r5, r6, lr}
 8006a18:	1149      	asrs	r1, r1, #5
 8006a1a:	6914      	ldr	r4, [r2, #16]
 8006a1c:	3101      	adds	r1, #1
 8006a1e:	f102 0314 	add.w	r3, r2, #20
 8006a22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a2a:	1f05      	subs	r5, r0, #4
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d30c      	bcc.n	8006a4a <__copybits+0x36>
 8006a30:	1aa3      	subs	r3, r4, r2
 8006a32:	3b11      	subs	r3, #17
 8006a34:	f023 0303 	bic.w	r3, r3, #3
 8006a38:	3211      	adds	r2, #17
 8006a3a:	42a2      	cmp	r2, r4
 8006a3c:	bf88      	it	hi
 8006a3e:	2300      	movhi	r3, #0
 8006a40:	4418      	add	r0, r3
 8006a42:	2300      	movs	r3, #0
 8006a44:	4288      	cmp	r0, r1
 8006a46:	d305      	bcc.n	8006a54 <__copybits+0x40>
 8006a48:	bd70      	pop	{r4, r5, r6, pc}
 8006a4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006a4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006a52:	e7eb      	b.n	8006a2c <__copybits+0x18>
 8006a54:	f840 3b04 	str.w	r3, [r0], #4
 8006a58:	e7f4      	b.n	8006a44 <__copybits+0x30>

08006a5a <__any_on>:
 8006a5a:	f100 0214 	add.w	r2, r0, #20
 8006a5e:	6900      	ldr	r0, [r0, #16]
 8006a60:	114b      	asrs	r3, r1, #5
 8006a62:	4298      	cmp	r0, r3
 8006a64:	b510      	push	{r4, lr}
 8006a66:	db11      	blt.n	8006a8c <__any_on+0x32>
 8006a68:	dd0a      	ble.n	8006a80 <__any_on+0x26>
 8006a6a:	f011 011f 	ands.w	r1, r1, #31
 8006a6e:	d007      	beq.n	8006a80 <__any_on+0x26>
 8006a70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006a74:	fa24 f001 	lsr.w	r0, r4, r1
 8006a78:	fa00 f101 	lsl.w	r1, r0, r1
 8006a7c:	428c      	cmp	r4, r1
 8006a7e:	d10b      	bne.n	8006a98 <__any_on+0x3e>
 8006a80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d803      	bhi.n	8006a90 <__any_on+0x36>
 8006a88:	2000      	movs	r0, #0
 8006a8a:	bd10      	pop	{r4, pc}
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	e7f7      	b.n	8006a80 <__any_on+0x26>
 8006a90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a94:	2900      	cmp	r1, #0
 8006a96:	d0f5      	beq.n	8006a84 <__any_on+0x2a>
 8006a98:	2001      	movs	r0, #1
 8006a9a:	e7f6      	b.n	8006a8a <__any_on+0x30>

08006a9c <sulp>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	460d      	mov	r5, r1
 8006aa2:	ec45 4b10 	vmov	d0, r4, r5
 8006aa6:	4616      	mov	r6, r2
 8006aa8:	f7ff feba 	bl	8006820 <__ulp>
 8006aac:	ec51 0b10 	vmov	r0, r1, d0
 8006ab0:	b17e      	cbz	r6, 8006ad2 <sulp+0x36>
 8006ab2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ab6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	dd09      	ble.n	8006ad2 <sulp+0x36>
 8006abe:	051b      	lsls	r3, r3, #20
 8006ac0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ac4:	2400      	movs	r4, #0
 8006ac6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006aca:	4622      	mov	r2, r4
 8006acc:	462b      	mov	r3, r5
 8006ace:	f7f9 fdb3 	bl	8000638 <__aeabi_dmul>
 8006ad2:	ec41 0b10 	vmov	d0, r0, r1
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}

08006ad8 <_strtod_l>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	b09f      	sub	sp, #124	@ 0x7c
 8006ade:	460c      	mov	r4, r1
 8006ae0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006ae6:	9005      	str	r0, [sp, #20]
 8006ae8:	f04f 0a00 	mov.w	sl, #0
 8006aec:	f04f 0b00 	mov.w	fp, #0
 8006af0:	460a      	mov	r2, r1
 8006af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006af4:	7811      	ldrb	r1, [r2, #0]
 8006af6:	292b      	cmp	r1, #43	@ 0x2b
 8006af8:	d04a      	beq.n	8006b90 <_strtod_l+0xb8>
 8006afa:	d838      	bhi.n	8006b6e <_strtod_l+0x96>
 8006afc:	290d      	cmp	r1, #13
 8006afe:	d832      	bhi.n	8006b66 <_strtod_l+0x8e>
 8006b00:	2908      	cmp	r1, #8
 8006b02:	d832      	bhi.n	8006b6a <_strtod_l+0x92>
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d03b      	beq.n	8006b80 <_strtod_l+0xa8>
 8006b08:	2200      	movs	r2, #0
 8006b0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b0e:	782a      	ldrb	r2, [r5, #0]
 8006b10:	2a30      	cmp	r2, #48	@ 0x30
 8006b12:	f040 80b2 	bne.w	8006c7a <_strtod_l+0x1a2>
 8006b16:	786a      	ldrb	r2, [r5, #1]
 8006b18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b1c:	2a58      	cmp	r2, #88	@ 0x58
 8006b1e:	d16e      	bne.n	8006bfe <_strtod_l+0x126>
 8006b20:	9302      	str	r3, [sp, #8]
 8006b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	4a8f      	ldr	r2, [pc, #572]	@ (8006d68 <_strtod_l+0x290>)
 8006b2c:	9805      	ldr	r0, [sp, #20]
 8006b2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b30:	a919      	add	r1, sp, #100	@ 0x64
 8006b32:	f001 faff 	bl	8008134 <__gethex>
 8006b36:	f010 060f 	ands.w	r6, r0, #15
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	d005      	beq.n	8006b4a <_strtod_l+0x72>
 8006b3e:	2e06      	cmp	r6, #6
 8006b40:	d128      	bne.n	8006b94 <_strtod_l+0xbc>
 8006b42:	3501      	adds	r5, #1
 8006b44:	2300      	movs	r3, #0
 8006b46:	9519      	str	r5, [sp, #100]	@ 0x64
 8006b48:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 858e 	bne.w	800766e <_strtod_l+0xb96>
 8006b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b54:	b1cb      	cbz	r3, 8006b8a <_strtod_l+0xb2>
 8006b56:	4652      	mov	r2, sl
 8006b58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006b5c:	ec43 2b10 	vmov	d0, r2, r3
 8006b60:	b01f      	add	sp, #124	@ 0x7c
 8006b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b66:	2920      	cmp	r1, #32
 8006b68:	d1ce      	bne.n	8006b08 <_strtod_l+0x30>
 8006b6a:	3201      	adds	r2, #1
 8006b6c:	e7c1      	b.n	8006af2 <_strtod_l+0x1a>
 8006b6e:	292d      	cmp	r1, #45	@ 0x2d
 8006b70:	d1ca      	bne.n	8006b08 <_strtod_l+0x30>
 8006b72:	2101      	movs	r1, #1
 8006b74:	910e      	str	r1, [sp, #56]	@ 0x38
 8006b76:	1c51      	adds	r1, r2, #1
 8006b78:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b7a:	7852      	ldrb	r2, [r2, #1]
 8006b7c:	2a00      	cmp	r2, #0
 8006b7e:	d1c5      	bne.n	8006b0c <_strtod_l+0x34>
 8006b80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b82:	9419      	str	r4, [sp, #100]	@ 0x64
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f040 8570 	bne.w	800766a <_strtod_l+0xb92>
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	465b      	mov	r3, fp
 8006b8e:	e7e5      	b.n	8006b5c <_strtod_l+0x84>
 8006b90:	2100      	movs	r1, #0
 8006b92:	e7ef      	b.n	8006b74 <_strtod_l+0x9c>
 8006b94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006b96:	b13a      	cbz	r2, 8006ba8 <_strtod_l+0xd0>
 8006b98:	2135      	movs	r1, #53	@ 0x35
 8006b9a:	a81c      	add	r0, sp, #112	@ 0x70
 8006b9c:	f7ff ff3a 	bl	8006a14 <__copybits>
 8006ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ba2:	9805      	ldr	r0, [sp, #20]
 8006ba4:	f7ff fb10 	bl	80061c8 <_Bfree>
 8006ba8:	3e01      	subs	r6, #1
 8006baa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006bac:	2e04      	cmp	r6, #4
 8006bae:	d806      	bhi.n	8006bbe <_strtod_l+0xe6>
 8006bb0:	e8df f006 	tbb	[pc, r6]
 8006bb4:	201d0314 	.word	0x201d0314
 8006bb8:	14          	.byte	0x14
 8006bb9:	00          	.byte	0x00
 8006bba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006bbe:	05e1      	lsls	r1, r4, #23
 8006bc0:	bf48      	it	mi
 8006bc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bca:	0d1b      	lsrs	r3, r3, #20
 8006bcc:	051b      	lsls	r3, r3, #20
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1bb      	bne.n	8006b4a <_strtod_l+0x72>
 8006bd2:	f7fe fb2d 	bl	8005230 <__errno>
 8006bd6:	2322      	movs	r3, #34	@ 0x22
 8006bd8:	6003      	str	r3, [r0, #0]
 8006bda:	e7b6      	b.n	8006b4a <_strtod_l+0x72>
 8006bdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006be0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006be4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006be8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006bec:	e7e7      	b.n	8006bbe <_strtod_l+0xe6>
 8006bee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006d70 <_strtod_l+0x298>
 8006bf2:	e7e4      	b.n	8006bbe <_strtod_l+0xe6>
 8006bf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006bf8:	f04f 3aff 	mov.w	sl, #4294967295
 8006bfc:	e7df      	b.n	8006bbe <_strtod_l+0xe6>
 8006bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	2b30      	cmp	r3, #48	@ 0x30
 8006c08:	d0f9      	beq.n	8006bfe <_strtod_l+0x126>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d09d      	beq.n	8006b4a <_strtod_l+0x72>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	2700      	movs	r7, #0
 8006c12:	9308      	str	r3, [sp, #32]
 8006c14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c16:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c18:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006c1a:	46b9      	mov	r9, r7
 8006c1c:	220a      	movs	r2, #10
 8006c1e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c20:	7805      	ldrb	r5, [r0, #0]
 8006c22:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006c26:	b2d9      	uxtb	r1, r3
 8006c28:	2909      	cmp	r1, #9
 8006c2a:	d928      	bls.n	8006c7e <_strtod_l+0x1a6>
 8006c2c:	494f      	ldr	r1, [pc, #316]	@ (8006d6c <_strtod_l+0x294>)
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f001 f9ac 	bl	8007f8c <strncmp>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d032      	beq.n	8006c9e <_strtod_l+0x1c6>
 8006c38:	2000      	movs	r0, #0
 8006c3a:	462a      	mov	r2, r5
 8006c3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c3e:	464d      	mov	r5, r9
 8006c40:	4603      	mov	r3, r0
 8006c42:	2a65      	cmp	r2, #101	@ 0x65
 8006c44:	d001      	beq.n	8006c4a <_strtod_l+0x172>
 8006c46:	2a45      	cmp	r2, #69	@ 0x45
 8006c48:	d114      	bne.n	8006c74 <_strtod_l+0x19c>
 8006c4a:	b91d      	cbnz	r5, 8006c54 <_strtod_l+0x17c>
 8006c4c:	9a08      	ldr	r2, [sp, #32]
 8006c4e:	4302      	orrs	r2, r0
 8006c50:	d096      	beq.n	8006b80 <_strtod_l+0xa8>
 8006c52:	2500      	movs	r5, #0
 8006c54:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006c56:	1c62      	adds	r2, r4, #1
 8006c58:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c5a:	7862      	ldrb	r2, [r4, #1]
 8006c5c:	2a2b      	cmp	r2, #43	@ 0x2b
 8006c5e:	d07a      	beq.n	8006d56 <_strtod_l+0x27e>
 8006c60:	2a2d      	cmp	r2, #45	@ 0x2d
 8006c62:	d07e      	beq.n	8006d62 <_strtod_l+0x28a>
 8006c64:	f04f 0c00 	mov.w	ip, #0
 8006c68:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006c6c:	2909      	cmp	r1, #9
 8006c6e:	f240 8085 	bls.w	8006d7c <_strtod_l+0x2a4>
 8006c72:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c74:	f04f 0800 	mov.w	r8, #0
 8006c78:	e0a5      	b.n	8006dc6 <_strtod_l+0x2ee>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e7c8      	b.n	8006c10 <_strtod_l+0x138>
 8006c7e:	f1b9 0f08 	cmp.w	r9, #8
 8006c82:	bfd8      	it	le
 8006c84:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006c86:	f100 0001 	add.w	r0, r0, #1
 8006c8a:	bfda      	itte	le
 8006c8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c90:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006c92:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006c96:	f109 0901 	add.w	r9, r9, #1
 8006c9a:	9019      	str	r0, [sp, #100]	@ 0x64
 8006c9c:	e7bf      	b.n	8006c1e <_strtod_l+0x146>
 8006c9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ca4:	785a      	ldrb	r2, [r3, #1]
 8006ca6:	f1b9 0f00 	cmp.w	r9, #0
 8006caa:	d03b      	beq.n	8006d24 <_strtod_l+0x24c>
 8006cac:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cae:	464d      	mov	r5, r9
 8006cb0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006cb4:	2b09      	cmp	r3, #9
 8006cb6:	d912      	bls.n	8006cde <_strtod_l+0x206>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e7c2      	b.n	8006c42 <_strtod_l+0x16a>
 8006cbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cc2:	785a      	ldrb	r2, [r3, #1]
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	2a30      	cmp	r2, #48	@ 0x30
 8006cc8:	d0f8      	beq.n	8006cbc <_strtod_l+0x1e4>
 8006cca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	f200 84d2 	bhi.w	8007678 <_strtod_l+0xba0>
 8006cd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cd6:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cd8:	2000      	movs	r0, #0
 8006cda:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cdc:	4605      	mov	r5, r0
 8006cde:	3a30      	subs	r2, #48	@ 0x30
 8006ce0:	f100 0301 	add.w	r3, r0, #1
 8006ce4:	d018      	beq.n	8006d18 <_strtod_l+0x240>
 8006ce6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ce8:	4419      	add	r1, r3
 8006cea:	910a      	str	r1, [sp, #40]	@ 0x28
 8006cec:	462e      	mov	r6, r5
 8006cee:	f04f 0e0a 	mov.w	lr, #10
 8006cf2:	1c71      	adds	r1, r6, #1
 8006cf4:	eba1 0c05 	sub.w	ip, r1, r5
 8006cf8:	4563      	cmp	r3, ip
 8006cfa:	dc15      	bgt.n	8006d28 <_strtod_l+0x250>
 8006cfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006d00:	182b      	adds	r3, r5, r0
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	f105 0501 	add.w	r5, r5, #1
 8006d08:	4405      	add	r5, r0
 8006d0a:	dc1a      	bgt.n	8006d42 <_strtod_l+0x26a>
 8006d0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d0e:	230a      	movs	r3, #10
 8006d10:	fb03 2301 	mla	r3, r3, r1, r2
 8006d14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d16:	2300      	movs	r3, #0
 8006d18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d1a:	1c51      	adds	r1, r2, #1
 8006d1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d1e:	7852      	ldrb	r2, [r2, #1]
 8006d20:	4618      	mov	r0, r3
 8006d22:	e7c5      	b.n	8006cb0 <_strtod_l+0x1d8>
 8006d24:	4648      	mov	r0, r9
 8006d26:	e7ce      	b.n	8006cc6 <_strtod_l+0x1ee>
 8006d28:	2e08      	cmp	r6, #8
 8006d2a:	dc05      	bgt.n	8006d38 <_strtod_l+0x260>
 8006d2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006d2e:	fb0e f606 	mul.w	r6, lr, r6
 8006d32:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006d34:	460e      	mov	r6, r1
 8006d36:	e7dc      	b.n	8006cf2 <_strtod_l+0x21a>
 8006d38:	2910      	cmp	r1, #16
 8006d3a:	bfd8      	it	le
 8006d3c:	fb0e f707 	mulle.w	r7, lr, r7
 8006d40:	e7f8      	b.n	8006d34 <_strtod_l+0x25c>
 8006d42:	2b0f      	cmp	r3, #15
 8006d44:	bfdc      	itt	le
 8006d46:	230a      	movle	r3, #10
 8006d48:	fb03 2707 	mlale	r7, r3, r7, r2
 8006d4c:	e7e3      	b.n	8006d16 <_strtod_l+0x23e>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d52:	2301      	movs	r3, #1
 8006d54:	e77a      	b.n	8006c4c <_strtod_l+0x174>
 8006d56:	f04f 0c00 	mov.w	ip, #0
 8006d5a:	1ca2      	adds	r2, r4, #2
 8006d5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d5e:	78a2      	ldrb	r2, [r4, #2]
 8006d60:	e782      	b.n	8006c68 <_strtod_l+0x190>
 8006d62:	f04f 0c01 	mov.w	ip, #1
 8006d66:	e7f8      	b.n	8006d5a <_strtod_l+0x282>
 8006d68:	0800a724 	.word	0x0800a724
 8006d6c:	0800a557 	.word	0x0800a557
 8006d70:	7ff00000 	.word	0x7ff00000
 8006d74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d76:	1c51      	adds	r1, r2, #1
 8006d78:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d7a:	7852      	ldrb	r2, [r2, #1]
 8006d7c:	2a30      	cmp	r2, #48	@ 0x30
 8006d7e:	d0f9      	beq.n	8006d74 <_strtod_l+0x29c>
 8006d80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006d84:	2908      	cmp	r1, #8
 8006d86:	f63f af75 	bhi.w	8006c74 <_strtod_l+0x19c>
 8006d8a:	3a30      	subs	r2, #48	@ 0x30
 8006d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006d92:	f04f 080a 	mov.w	r8, #10
 8006d96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d98:	1c56      	adds	r6, r2, #1
 8006d9a:	9619      	str	r6, [sp, #100]	@ 0x64
 8006d9c:	7852      	ldrb	r2, [r2, #1]
 8006d9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006da2:	f1be 0f09 	cmp.w	lr, #9
 8006da6:	d939      	bls.n	8006e1c <_strtod_l+0x344>
 8006da8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006daa:	1a76      	subs	r6, r6, r1
 8006dac:	2e08      	cmp	r6, #8
 8006dae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006db2:	dc03      	bgt.n	8006dbc <_strtod_l+0x2e4>
 8006db4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006db6:	4588      	cmp	r8, r1
 8006db8:	bfa8      	it	ge
 8006dba:	4688      	movge	r8, r1
 8006dbc:	f1bc 0f00 	cmp.w	ip, #0
 8006dc0:	d001      	beq.n	8006dc6 <_strtod_l+0x2ee>
 8006dc2:	f1c8 0800 	rsb	r8, r8, #0
 8006dc6:	2d00      	cmp	r5, #0
 8006dc8:	d14e      	bne.n	8006e68 <_strtod_l+0x390>
 8006dca:	9908      	ldr	r1, [sp, #32]
 8006dcc:	4308      	orrs	r0, r1
 8006dce:	f47f aebc 	bne.w	8006b4a <_strtod_l+0x72>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f47f aed4 	bne.w	8006b80 <_strtod_l+0xa8>
 8006dd8:	2a69      	cmp	r2, #105	@ 0x69
 8006dda:	d028      	beq.n	8006e2e <_strtod_l+0x356>
 8006ddc:	dc25      	bgt.n	8006e2a <_strtod_l+0x352>
 8006dde:	2a49      	cmp	r2, #73	@ 0x49
 8006de0:	d025      	beq.n	8006e2e <_strtod_l+0x356>
 8006de2:	2a4e      	cmp	r2, #78	@ 0x4e
 8006de4:	f47f aecc 	bne.w	8006b80 <_strtod_l+0xa8>
 8006de8:	499a      	ldr	r1, [pc, #616]	@ (8007054 <_strtod_l+0x57c>)
 8006dea:	a819      	add	r0, sp, #100	@ 0x64
 8006dec:	f001 fbc4 	bl	8008578 <__match>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	f43f aec5 	beq.w	8006b80 <_strtod_l+0xa8>
 8006df6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b28      	cmp	r3, #40	@ 0x28
 8006dfc:	d12e      	bne.n	8006e5c <_strtod_l+0x384>
 8006dfe:	4996      	ldr	r1, [pc, #600]	@ (8007058 <_strtod_l+0x580>)
 8006e00:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e02:	a819      	add	r0, sp, #100	@ 0x64
 8006e04:	f001 fbcc 	bl	80085a0 <__hexnan>
 8006e08:	2805      	cmp	r0, #5
 8006e0a:	d127      	bne.n	8006e5c <_strtod_l+0x384>
 8006e0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e0e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e12:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e16:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e1a:	e696      	b.n	8006b4a <_strtod_l+0x72>
 8006e1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e1e:	fb08 2101 	mla	r1, r8, r1, r2
 8006e22:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e26:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e28:	e7b5      	b.n	8006d96 <_strtod_l+0x2be>
 8006e2a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006e2c:	e7da      	b.n	8006de4 <_strtod_l+0x30c>
 8006e2e:	498b      	ldr	r1, [pc, #556]	@ (800705c <_strtod_l+0x584>)
 8006e30:	a819      	add	r0, sp, #100	@ 0x64
 8006e32:	f001 fba1 	bl	8008578 <__match>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f43f aea2 	beq.w	8006b80 <_strtod_l+0xa8>
 8006e3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e3e:	4988      	ldr	r1, [pc, #544]	@ (8007060 <_strtod_l+0x588>)
 8006e40:	3b01      	subs	r3, #1
 8006e42:	a819      	add	r0, sp, #100	@ 0x64
 8006e44:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e46:	f001 fb97 	bl	8008578 <__match>
 8006e4a:	b910      	cbnz	r0, 8006e52 <_strtod_l+0x37a>
 8006e4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e4e:	3301      	adds	r3, #1
 8006e50:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e52:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007070 <_strtod_l+0x598>
 8006e56:	f04f 0a00 	mov.w	sl, #0
 8006e5a:	e676      	b.n	8006b4a <_strtod_l+0x72>
 8006e5c:	4881      	ldr	r0, [pc, #516]	@ (8007064 <_strtod_l+0x58c>)
 8006e5e:	f001 f8c7 	bl	8007ff0 <nan>
 8006e62:	ec5b ab10 	vmov	sl, fp, d0
 8006e66:	e670      	b.n	8006b4a <_strtod_l+0x72>
 8006e68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006e6c:	eba8 0303 	sub.w	r3, r8, r3
 8006e70:	f1b9 0f00 	cmp.w	r9, #0
 8006e74:	bf08      	it	eq
 8006e76:	46a9      	moveq	r9, r5
 8006e78:	2d10      	cmp	r5, #16
 8006e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7c:	462c      	mov	r4, r5
 8006e7e:	bfa8      	it	ge
 8006e80:	2410      	movge	r4, #16
 8006e82:	f7f9 fb5f 	bl	8000544 <__aeabi_ui2d>
 8006e86:	2d09      	cmp	r5, #9
 8006e88:	4682      	mov	sl, r0
 8006e8a:	468b      	mov	fp, r1
 8006e8c:	dc13      	bgt.n	8006eb6 <_strtod_l+0x3de>
 8006e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f43f ae5a 	beq.w	8006b4a <_strtod_l+0x72>
 8006e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e98:	dd78      	ble.n	8006f8c <_strtod_l+0x4b4>
 8006e9a:	2b16      	cmp	r3, #22
 8006e9c:	dc5f      	bgt.n	8006f5e <_strtod_l+0x486>
 8006e9e:	4972      	ldr	r1, [pc, #456]	@ (8007068 <_strtod_l+0x590>)
 8006ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea8:	4652      	mov	r2, sl
 8006eaa:	465b      	mov	r3, fp
 8006eac:	f7f9 fbc4 	bl	8000638 <__aeabi_dmul>
 8006eb0:	4682      	mov	sl, r0
 8006eb2:	468b      	mov	fp, r1
 8006eb4:	e649      	b.n	8006b4a <_strtod_l+0x72>
 8006eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8007068 <_strtod_l+0x590>)
 8006eb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ebc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ec0:	f7f9 fbba 	bl	8000638 <__aeabi_dmul>
 8006ec4:	4682      	mov	sl, r0
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	468b      	mov	fp, r1
 8006eca:	f7f9 fb3b 	bl	8000544 <__aeabi_ui2d>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	f7f9 f9f9 	bl	80002cc <__adddf3>
 8006eda:	2d0f      	cmp	r5, #15
 8006edc:	4682      	mov	sl, r0
 8006ede:	468b      	mov	fp, r1
 8006ee0:	ddd5      	ble.n	8006e8e <_strtod_l+0x3b6>
 8006ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee4:	1b2c      	subs	r4, r5, r4
 8006ee6:	441c      	add	r4, r3
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	f340 8093 	ble.w	8007014 <_strtod_l+0x53c>
 8006eee:	f014 030f 	ands.w	r3, r4, #15
 8006ef2:	d00a      	beq.n	8006f0a <_strtod_l+0x432>
 8006ef4:	495c      	ldr	r1, [pc, #368]	@ (8007068 <_strtod_l+0x590>)
 8006ef6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006efa:	4652      	mov	r2, sl
 8006efc:	465b      	mov	r3, fp
 8006efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f02:	f7f9 fb99 	bl	8000638 <__aeabi_dmul>
 8006f06:	4682      	mov	sl, r0
 8006f08:	468b      	mov	fp, r1
 8006f0a:	f034 040f 	bics.w	r4, r4, #15
 8006f0e:	d073      	beq.n	8006ff8 <_strtod_l+0x520>
 8006f10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f14:	dd49      	ble.n	8006faa <_strtod_l+0x4d2>
 8006f16:	2400      	movs	r4, #0
 8006f18:	46a0      	mov	r8, r4
 8006f1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f1c:	46a1      	mov	r9, r4
 8006f1e:	9a05      	ldr	r2, [sp, #20]
 8006f20:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007070 <_strtod_l+0x598>
 8006f24:	2322      	movs	r3, #34	@ 0x22
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	f04f 0a00 	mov.w	sl, #0
 8006f2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f43f ae0b 	beq.w	8006b4a <_strtod_l+0x72>
 8006f34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f36:	9805      	ldr	r0, [sp, #20]
 8006f38:	f7ff f946 	bl	80061c8 <_Bfree>
 8006f3c:	9805      	ldr	r0, [sp, #20]
 8006f3e:	4649      	mov	r1, r9
 8006f40:	f7ff f942 	bl	80061c8 <_Bfree>
 8006f44:	9805      	ldr	r0, [sp, #20]
 8006f46:	4641      	mov	r1, r8
 8006f48:	f7ff f93e 	bl	80061c8 <_Bfree>
 8006f4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f4e:	9805      	ldr	r0, [sp, #20]
 8006f50:	f7ff f93a 	bl	80061c8 <_Bfree>
 8006f54:	9805      	ldr	r0, [sp, #20]
 8006f56:	4621      	mov	r1, r4
 8006f58:	f7ff f936 	bl	80061c8 <_Bfree>
 8006f5c:	e5f5      	b.n	8006b4a <_strtod_l+0x72>
 8006f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006f64:	4293      	cmp	r3, r2
 8006f66:	dbbc      	blt.n	8006ee2 <_strtod_l+0x40a>
 8006f68:	4c3f      	ldr	r4, [pc, #252]	@ (8007068 <_strtod_l+0x590>)
 8006f6a:	f1c5 050f 	rsb	r5, r5, #15
 8006f6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f72:	4652      	mov	r2, sl
 8006f74:	465b      	mov	r3, fp
 8006f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f7a:	f7f9 fb5d 	bl	8000638 <__aeabi_dmul>
 8006f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f80:	1b5d      	subs	r5, r3, r5
 8006f82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006f86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006f8a:	e78f      	b.n	8006eac <_strtod_l+0x3d4>
 8006f8c:	3316      	adds	r3, #22
 8006f8e:	dba8      	blt.n	8006ee2 <_strtod_l+0x40a>
 8006f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f92:	eba3 0808 	sub.w	r8, r3, r8
 8006f96:	4b34      	ldr	r3, [pc, #208]	@ (8007068 <_strtod_l+0x590>)
 8006f98:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006f9c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006fa0:	4650      	mov	r0, sl
 8006fa2:	4659      	mov	r1, fp
 8006fa4:	f7f9 fc72 	bl	800088c <__aeabi_ddiv>
 8006fa8:	e782      	b.n	8006eb0 <_strtod_l+0x3d8>
 8006faa:	2300      	movs	r3, #0
 8006fac:	4f2f      	ldr	r7, [pc, #188]	@ (800706c <_strtod_l+0x594>)
 8006fae:	1124      	asrs	r4, r4, #4
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	4659      	mov	r1, fp
 8006fb4:	461e      	mov	r6, r3
 8006fb6:	2c01      	cmp	r4, #1
 8006fb8:	dc21      	bgt.n	8006ffe <_strtod_l+0x526>
 8006fba:	b10b      	cbz	r3, 8006fc0 <_strtod_l+0x4e8>
 8006fbc:	4682      	mov	sl, r0
 8006fbe:	468b      	mov	fp, r1
 8006fc0:	492a      	ldr	r1, [pc, #168]	@ (800706c <_strtod_l+0x594>)
 8006fc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006fc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006fca:	4652      	mov	r2, sl
 8006fcc:	465b      	mov	r3, fp
 8006fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd2:	f7f9 fb31 	bl	8000638 <__aeabi_dmul>
 8006fd6:	4b26      	ldr	r3, [pc, #152]	@ (8007070 <_strtod_l+0x598>)
 8006fd8:	460a      	mov	r2, r1
 8006fda:	400b      	ands	r3, r1
 8006fdc:	4925      	ldr	r1, [pc, #148]	@ (8007074 <_strtod_l+0x59c>)
 8006fde:	428b      	cmp	r3, r1
 8006fe0:	4682      	mov	sl, r0
 8006fe2:	d898      	bhi.n	8006f16 <_strtod_l+0x43e>
 8006fe4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006fe8:	428b      	cmp	r3, r1
 8006fea:	bf86      	itte	hi
 8006fec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007078 <_strtod_l+0x5a0>
 8006ff0:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ff4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9308      	str	r3, [sp, #32]
 8006ffc:	e076      	b.n	80070ec <_strtod_l+0x614>
 8006ffe:	07e2      	lsls	r2, r4, #31
 8007000:	d504      	bpl.n	800700c <_strtod_l+0x534>
 8007002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007006:	f7f9 fb17 	bl	8000638 <__aeabi_dmul>
 800700a:	2301      	movs	r3, #1
 800700c:	3601      	adds	r6, #1
 800700e:	1064      	asrs	r4, r4, #1
 8007010:	3708      	adds	r7, #8
 8007012:	e7d0      	b.n	8006fb6 <_strtod_l+0x4de>
 8007014:	d0f0      	beq.n	8006ff8 <_strtod_l+0x520>
 8007016:	4264      	negs	r4, r4
 8007018:	f014 020f 	ands.w	r2, r4, #15
 800701c:	d00a      	beq.n	8007034 <_strtod_l+0x55c>
 800701e:	4b12      	ldr	r3, [pc, #72]	@ (8007068 <_strtod_l+0x590>)
 8007020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007024:	4650      	mov	r0, sl
 8007026:	4659      	mov	r1, fp
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	f7f9 fc2e 	bl	800088c <__aeabi_ddiv>
 8007030:	4682      	mov	sl, r0
 8007032:	468b      	mov	fp, r1
 8007034:	1124      	asrs	r4, r4, #4
 8007036:	d0df      	beq.n	8006ff8 <_strtod_l+0x520>
 8007038:	2c1f      	cmp	r4, #31
 800703a:	dd1f      	ble.n	800707c <_strtod_l+0x5a4>
 800703c:	2400      	movs	r4, #0
 800703e:	46a0      	mov	r8, r4
 8007040:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007042:	46a1      	mov	r9, r4
 8007044:	9a05      	ldr	r2, [sp, #20]
 8007046:	2322      	movs	r3, #34	@ 0x22
 8007048:	f04f 0a00 	mov.w	sl, #0
 800704c:	f04f 0b00 	mov.w	fp, #0
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e76b      	b.n	8006f2c <_strtod_l+0x454>
 8007054:	0800a445 	.word	0x0800a445
 8007058:	0800a710 	.word	0x0800a710
 800705c:	0800a43d 	.word	0x0800a43d
 8007060:	0800a474 	.word	0x0800a474
 8007064:	0800a5ad 	.word	0x0800a5ad
 8007068:	0800a648 	.word	0x0800a648
 800706c:	0800a620 	.word	0x0800a620
 8007070:	7ff00000 	.word	0x7ff00000
 8007074:	7ca00000 	.word	0x7ca00000
 8007078:	7fefffff 	.word	0x7fefffff
 800707c:	f014 0310 	ands.w	r3, r4, #16
 8007080:	bf18      	it	ne
 8007082:	236a      	movne	r3, #106	@ 0x6a
 8007084:	4ea9      	ldr	r6, [pc, #676]	@ (800732c <_strtod_l+0x854>)
 8007086:	9308      	str	r3, [sp, #32]
 8007088:	4650      	mov	r0, sl
 800708a:	4659      	mov	r1, fp
 800708c:	2300      	movs	r3, #0
 800708e:	07e7      	lsls	r7, r4, #31
 8007090:	d504      	bpl.n	800709c <_strtod_l+0x5c4>
 8007092:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007096:	f7f9 facf 	bl	8000638 <__aeabi_dmul>
 800709a:	2301      	movs	r3, #1
 800709c:	1064      	asrs	r4, r4, #1
 800709e:	f106 0608 	add.w	r6, r6, #8
 80070a2:	d1f4      	bne.n	800708e <_strtod_l+0x5b6>
 80070a4:	b10b      	cbz	r3, 80070aa <_strtod_l+0x5d2>
 80070a6:	4682      	mov	sl, r0
 80070a8:	468b      	mov	fp, r1
 80070aa:	9b08      	ldr	r3, [sp, #32]
 80070ac:	b1b3      	cbz	r3, 80070dc <_strtod_l+0x604>
 80070ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80070b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	4659      	mov	r1, fp
 80070ba:	dd0f      	ble.n	80070dc <_strtod_l+0x604>
 80070bc:	2b1f      	cmp	r3, #31
 80070be:	dd56      	ble.n	800716e <_strtod_l+0x696>
 80070c0:	2b34      	cmp	r3, #52	@ 0x34
 80070c2:	bfde      	ittt	le
 80070c4:	f04f 33ff 	movle.w	r3, #4294967295
 80070c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80070cc:	4093      	lslle	r3, r2
 80070ce:	f04f 0a00 	mov.w	sl, #0
 80070d2:	bfcc      	ite	gt
 80070d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80070d8:	ea03 0b01 	andle.w	fp, r3, r1
 80070dc:	2200      	movs	r2, #0
 80070de:	2300      	movs	r3, #0
 80070e0:	4650      	mov	r0, sl
 80070e2:	4659      	mov	r1, fp
 80070e4:	f7f9 fd10 	bl	8000b08 <__aeabi_dcmpeq>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d1a7      	bne.n	800703c <_strtod_l+0x564>
 80070ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80070f2:	9805      	ldr	r0, [sp, #20]
 80070f4:	462b      	mov	r3, r5
 80070f6:	464a      	mov	r2, r9
 80070f8:	f7ff f8ce 	bl	8006298 <__s2b>
 80070fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80070fe:	2800      	cmp	r0, #0
 8007100:	f43f af09 	beq.w	8006f16 <_strtod_l+0x43e>
 8007104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007108:	2a00      	cmp	r2, #0
 800710a:	eba3 0308 	sub.w	r3, r3, r8
 800710e:	bfa8      	it	ge
 8007110:	2300      	movge	r3, #0
 8007112:	9312      	str	r3, [sp, #72]	@ 0x48
 8007114:	2400      	movs	r4, #0
 8007116:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800711a:	9316      	str	r3, [sp, #88]	@ 0x58
 800711c:	46a0      	mov	r8, r4
 800711e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007120:	9805      	ldr	r0, [sp, #20]
 8007122:	6859      	ldr	r1, [r3, #4]
 8007124:	f7ff f810 	bl	8006148 <_Balloc>
 8007128:	4681      	mov	r9, r0
 800712a:	2800      	cmp	r0, #0
 800712c:	f43f aef7 	beq.w	8006f1e <_strtod_l+0x446>
 8007130:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	3202      	adds	r2, #2
 8007136:	f103 010c 	add.w	r1, r3, #12
 800713a:	0092      	lsls	r2, r2, #2
 800713c:	300c      	adds	r0, #12
 800713e:	f000 ff47 	bl	8007fd0 <memcpy>
 8007142:	ec4b ab10 	vmov	d0, sl, fp
 8007146:	9805      	ldr	r0, [sp, #20]
 8007148:	aa1c      	add	r2, sp, #112	@ 0x70
 800714a:	a91b      	add	r1, sp, #108	@ 0x6c
 800714c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007150:	f7ff fbd6 	bl	8006900 <__d2b>
 8007154:	901a      	str	r0, [sp, #104]	@ 0x68
 8007156:	2800      	cmp	r0, #0
 8007158:	f43f aee1 	beq.w	8006f1e <_strtod_l+0x446>
 800715c:	9805      	ldr	r0, [sp, #20]
 800715e:	2101      	movs	r1, #1
 8007160:	f7ff f930 	bl	80063c4 <__i2b>
 8007164:	4680      	mov	r8, r0
 8007166:	b948      	cbnz	r0, 800717c <_strtod_l+0x6a4>
 8007168:	f04f 0800 	mov.w	r8, #0
 800716c:	e6d7      	b.n	8006f1e <_strtod_l+0x446>
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	ea03 0a0a 	and.w	sl, r3, sl
 800717a:	e7af      	b.n	80070dc <_strtod_l+0x604>
 800717c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800717e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007180:	2d00      	cmp	r5, #0
 8007182:	bfab      	itete	ge
 8007184:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007186:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007188:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800718a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800718c:	bfac      	ite	ge
 800718e:	18ef      	addge	r7, r5, r3
 8007190:	1b5e      	sublt	r6, r3, r5
 8007192:	9b08      	ldr	r3, [sp, #32]
 8007194:	1aed      	subs	r5, r5, r3
 8007196:	4415      	add	r5, r2
 8007198:	4b65      	ldr	r3, [pc, #404]	@ (8007330 <_strtod_l+0x858>)
 800719a:	3d01      	subs	r5, #1
 800719c:	429d      	cmp	r5, r3
 800719e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80071a2:	da50      	bge.n	8007246 <_strtod_l+0x76e>
 80071a4:	1b5b      	subs	r3, r3, r5
 80071a6:	2b1f      	cmp	r3, #31
 80071a8:	eba2 0203 	sub.w	r2, r2, r3
 80071ac:	f04f 0101 	mov.w	r1, #1
 80071b0:	dc3d      	bgt.n	800722e <_strtod_l+0x756>
 80071b2:	fa01 f303 	lsl.w	r3, r1, r3
 80071b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071b8:	2300      	movs	r3, #0
 80071ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80071bc:	18bd      	adds	r5, r7, r2
 80071be:	9b08      	ldr	r3, [sp, #32]
 80071c0:	42af      	cmp	r7, r5
 80071c2:	4416      	add	r6, r2
 80071c4:	441e      	add	r6, r3
 80071c6:	463b      	mov	r3, r7
 80071c8:	bfa8      	it	ge
 80071ca:	462b      	movge	r3, r5
 80071cc:	42b3      	cmp	r3, r6
 80071ce:	bfa8      	it	ge
 80071d0:	4633      	movge	r3, r6
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bfc2      	ittt	gt
 80071d6:	1aed      	subgt	r5, r5, r3
 80071d8:	1af6      	subgt	r6, r6, r3
 80071da:	1aff      	subgt	r7, r7, r3
 80071dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071de:	2b00      	cmp	r3, #0
 80071e0:	dd16      	ble.n	8007210 <_strtod_l+0x738>
 80071e2:	4641      	mov	r1, r8
 80071e4:	9805      	ldr	r0, [sp, #20]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f7ff f9a4 	bl	8006534 <__pow5mult>
 80071ec:	4680      	mov	r8, r0
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d0ba      	beq.n	8007168 <_strtod_l+0x690>
 80071f2:	4601      	mov	r1, r0
 80071f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80071f6:	9805      	ldr	r0, [sp, #20]
 80071f8:	f7ff f8fa 	bl	80063f0 <__multiply>
 80071fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f ae8d 	beq.w	8006f1e <_strtod_l+0x446>
 8007204:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007206:	9805      	ldr	r0, [sp, #20]
 8007208:	f7fe ffde 	bl	80061c8 <_Bfree>
 800720c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800720e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007210:	2d00      	cmp	r5, #0
 8007212:	dc1d      	bgt.n	8007250 <_strtod_l+0x778>
 8007214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	dd23      	ble.n	8007262 <_strtod_l+0x78a>
 800721a:	4649      	mov	r1, r9
 800721c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800721e:	9805      	ldr	r0, [sp, #20]
 8007220:	f7ff f988 	bl	8006534 <__pow5mult>
 8007224:	4681      	mov	r9, r0
 8007226:	b9e0      	cbnz	r0, 8007262 <_strtod_l+0x78a>
 8007228:	f04f 0900 	mov.w	r9, #0
 800722c:	e677      	b.n	8006f1e <_strtod_l+0x446>
 800722e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007232:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007236:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800723a:	35e2      	adds	r5, #226	@ 0xe2
 800723c:	fa01 f305 	lsl.w	r3, r1, r5
 8007240:	9310      	str	r3, [sp, #64]	@ 0x40
 8007242:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007244:	e7ba      	b.n	80071bc <_strtod_l+0x6e4>
 8007246:	2300      	movs	r3, #0
 8007248:	9310      	str	r3, [sp, #64]	@ 0x40
 800724a:	2301      	movs	r3, #1
 800724c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800724e:	e7b5      	b.n	80071bc <_strtod_l+0x6e4>
 8007250:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007252:	9805      	ldr	r0, [sp, #20]
 8007254:	462a      	mov	r2, r5
 8007256:	f7ff f9c7 	bl	80065e8 <__lshift>
 800725a:	901a      	str	r0, [sp, #104]	@ 0x68
 800725c:	2800      	cmp	r0, #0
 800725e:	d1d9      	bne.n	8007214 <_strtod_l+0x73c>
 8007260:	e65d      	b.n	8006f1e <_strtod_l+0x446>
 8007262:	2e00      	cmp	r6, #0
 8007264:	dd07      	ble.n	8007276 <_strtod_l+0x79e>
 8007266:	4649      	mov	r1, r9
 8007268:	9805      	ldr	r0, [sp, #20]
 800726a:	4632      	mov	r2, r6
 800726c:	f7ff f9bc 	bl	80065e8 <__lshift>
 8007270:	4681      	mov	r9, r0
 8007272:	2800      	cmp	r0, #0
 8007274:	d0d8      	beq.n	8007228 <_strtod_l+0x750>
 8007276:	2f00      	cmp	r7, #0
 8007278:	dd08      	ble.n	800728c <_strtod_l+0x7b4>
 800727a:	4641      	mov	r1, r8
 800727c:	9805      	ldr	r0, [sp, #20]
 800727e:	463a      	mov	r2, r7
 8007280:	f7ff f9b2 	bl	80065e8 <__lshift>
 8007284:	4680      	mov	r8, r0
 8007286:	2800      	cmp	r0, #0
 8007288:	f43f ae49 	beq.w	8006f1e <_strtod_l+0x446>
 800728c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800728e:	9805      	ldr	r0, [sp, #20]
 8007290:	464a      	mov	r2, r9
 8007292:	f7ff fa31 	bl	80066f8 <__mdiff>
 8007296:	4604      	mov	r4, r0
 8007298:	2800      	cmp	r0, #0
 800729a:	f43f ae40 	beq.w	8006f1e <_strtod_l+0x446>
 800729e:	68c3      	ldr	r3, [r0, #12]
 80072a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072a2:	2300      	movs	r3, #0
 80072a4:	60c3      	str	r3, [r0, #12]
 80072a6:	4641      	mov	r1, r8
 80072a8:	f7ff fa0a 	bl	80066c0 <__mcmp>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	da45      	bge.n	800733c <_strtod_l+0x864>
 80072b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072b2:	ea53 030a 	orrs.w	r3, r3, sl
 80072b6:	d16b      	bne.n	8007390 <_strtod_l+0x8b8>
 80072b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d167      	bne.n	8007390 <_strtod_l+0x8b8>
 80072c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072c4:	0d1b      	lsrs	r3, r3, #20
 80072c6:	051b      	lsls	r3, r3, #20
 80072c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80072cc:	d960      	bls.n	8007390 <_strtod_l+0x8b8>
 80072ce:	6963      	ldr	r3, [r4, #20]
 80072d0:	b913      	cbnz	r3, 80072d8 <_strtod_l+0x800>
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	dd5b      	ble.n	8007390 <_strtod_l+0x8b8>
 80072d8:	4621      	mov	r1, r4
 80072da:	2201      	movs	r2, #1
 80072dc:	9805      	ldr	r0, [sp, #20]
 80072de:	f7ff f983 	bl	80065e8 <__lshift>
 80072e2:	4641      	mov	r1, r8
 80072e4:	4604      	mov	r4, r0
 80072e6:	f7ff f9eb 	bl	80066c0 <__mcmp>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	dd50      	ble.n	8007390 <_strtod_l+0x8b8>
 80072ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072f2:	9a08      	ldr	r2, [sp, #32]
 80072f4:	0d1b      	lsrs	r3, r3, #20
 80072f6:	051b      	lsls	r3, r3, #20
 80072f8:	2a00      	cmp	r2, #0
 80072fa:	d06a      	beq.n	80073d2 <_strtod_l+0x8fa>
 80072fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007300:	d867      	bhi.n	80073d2 <_strtod_l+0x8fa>
 8007302:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007306:	f67f ae9d 	bls.w	8007044 <_strtod_l+0x56c>
 800730a:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <_strtod_l+0x85c>)
 800730c:	4650      	mov	r0, sl
 800730e:	4659      	mov	r1, fp
 8007310:	2200      	movs	r2, #0
 8007312:	f7f9 f991 	bl	8000638 <__aeabi_dmul>
 8007316:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <_strtod_l+0x860>)
 8007318:	400b      	ands	r3, r1
 800731a:	4682      	mov	sl, r0
 800731c:	468b      	mov	fp, r1
 800731e:	2b00      	cmp	r3, #0
 8007320:	f47f ae08 	bne.w	8006f34 <_strtod_l+0x45c>
 8007324:	9a05      	ldr	r2, [sp, #20]
 8007326:	2322      	movs	r3, #34	@ 0x22
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	e603      	b.n	8006f34 <_strtod_l+0x45c>
 800732c:	0800a738 	.word	0x0800a738
 8007330:	fffffc02 	.word	0xfffffc02
 8007334:	39500000 	.word	0x39500000
 8007338:	7ff00000 	.word	0x7ff00000
 800733c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007340:	d165      	bne.n	800740e <_strtod_l+0x936>
 8007342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007348:	b35a      	cbz	r2, 80073a2 <_strtod_l+0x8ca>
 800734a:	4a9f      	ldr	r2, [pc, #636]	@ (80075c8 <_strtod_l+0xaf0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d12b      	bne.n	80073a8 <_strtod_l+0x8d0>
 8007350:	9b08      	ldr	r3, [sp, #32]
 8007352:	4651      	mov	r1, sl
 8007354:	b303      	cbz	r3, 8007398 <_strtod_l+0x8c0>
 8007356:	4b9d      	ldr	r3, [pc, #628]	@ (80075cc <_strtod_l+0xaf4>)
 8007358:	465a      	mov	r2, fp
 800735a:	4013      	ands	r3, r2
 800735c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007360:	f04f 32ff 	mov.w	r2, #4294967295
 8007364:	d81b      	bhi.n	800739e <_strtod_l+0x8c6>
 8007366:	0d1b      	lsrs	r3, r3, #20
 8007368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	4299      	cmp	r1, r3
 8007372:	d119      	bne.n	80073a8 <_strtod_l+0x8d0>
 8007374:	4b96      	ldr	r3, [pc, #600]	@ (80075d0 <_strtod_l+0xaf8>)
 8007376:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007378:	429a      	cmp	r2, r3
 800737a:	d102      	bne.n	8007382 <_strtod_l+0x8aa>
 800737c:	3101      	adds	r1, #1
 800737e:	f43f adce 	beq.w	8006f1e <_strtod_l+0x446>
 8007382:	4b92      	ldr	r3, [pc, #584]	@ (80075cc <_strtod_l+0xaf4>)
 8007384:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007386:	401a      	ands	r2, r3
 8007388:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800738c:	f04f 0a00 	mov.w	sl, #0
 8007390:	9b08      	ldr	r3, [sp, #32]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1b9      	bne.n	800730a <_strtod_l+0x832>
 8007396:	e5cd      	b.n	8006f34 <_strtod_l+0x45c>
 8007398:	f04f 33ff 	mov.w	r3, #4294967295
 800739c:	e7e8      	b.n	8007370 <_strtod_l+0x898>
 800739e:	4613      	mov	r3, r2
 80073a0:	e7e6      	b.n	8007370 <_strtod_l+0x898>
 80073a2:	ea53 030a 	orrs.w	r3, r3, sl
 80073a6:	d0a2      	beq.n	80072ee <_strtod_l+0x816>
 80073a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073aa:	b1db      	cbz	r3, 80073e4 <_strtod_l+0x90c>
 80073ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073ae:	4213      	tst	r3, r2
 80073b0:	d0ee      	beq.n	8007390 <_strtod_l+0x8b8>
 80073b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073b4:	9a08      	ldr	r2, [sp, #32]
 80073b6:	4650      	mov	r0, sl
 80073b8:	4659      	mov	r1, fp
 80073ba:	b1bb      	cbz	r3, 80073ec <_strtod_l+0x914>
 80073bc:	f7ff fb6e 	bl	8006a9c <sulp>
 80073c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073c4:	ec53 2b10 	vmov	r2, r3, d0
 80073c8:	f7f8 ff80 	bl	80002cc <__adddf3>
 80073cc:	4682      	mov	sl, r0
 80073ce:	468b      	mov	fp, r1
 80073d0:	e7de      	b.n	8007390 <_strtod_l+0x8b8>
 80073d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80073d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80073da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80073de:	f04f 3aff 	mov.w	sl, #4294967295
 80073e2:	e7d5      	b.n	8007390 <_strtod_l+0x8b8>
 80073e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073e6:	ea13 0f0a 	tst.w	r3, sl
 80073ea:	e7e1      	b.n	80073b0 <_strtod_l+0x8d8>
 80073ec:	f7ff fb56 	bl	8006a9c <sulp>
 80073f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073f4:	ec53 2b10 	vmov	r2, r3, d0
 80073f8:	f7f8 ff66 	bl	80002c8 <__aeabi_dsub>
 80073fc:	2200      	movs	r2, #0
 80073fe:	2300      	movs	r3, #0
 8007400:	4682      	mov	sl, r0
 8007402:	468b      	mov	fp, r1
 8007404:	f7f9 fb80 	bl	8000b08 <__aeabi_dcmpeq>
 8007408:	2800      	cmp	r0, #0
 800740a:	d0c1      	beq.n	8007390 <_strtod_l+0x8b8>
 800740c:	e61a      	b.n	8007044 <_strtod_l+0x56c>
 800740e:	4641      	mov	r1, r8
 8007410:	4620      	mov	r0, r4
 8007412:	f7ff facd 	bl	80069b0 <__ratio>
 8007416:	ec57 6b10 	vmov	r6, r7, d0
 800741a:	2200      	movs	r2, #0
 800741c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fb84 	bl	8000b30 <__aeabi_dcmple>
 8007428:	2800      	cmp	r0, #0
 800742a:	d06f      	beq.n	800750c <_strtod_l+0xa34>
 800742c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d17a      	bne.n	8007528 <_strtod_l+0xa50>
 8007432:	f1ba 0f00 	cmp.w	sl, #0
 8007436:	d158      	bne.n	80074ea <_strtod_l+0xa12>
 8007438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800743a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800743e:	2b00      	cmp	r3, #0
 8007440:	d15a      	bne.n	80074f8 <_strtod_l+0xa20>
 8007442:	4b64      	ldr	r3, [pc, #400]	@ (80075d4 <_strtod_l+0xafc>)
 8007444:	2200      	movs	r2, #0
 8007446:	4630      	mov	r0, r6
 8007448:	4639      	mov	r1, r7
 800744a:	f7f9 fb67 	bl	8000b1c <__aeabi_dcmplt>
 800744e:	2800      	cmp	r0, #0
 8007450:	d159      	bne.n	8007506 <_strtod_l+0xa2e>
 8007452:	4630      	mov	r0, r6
 8007454:	4639      	mov	r1, r7
 8007456:	4b60      	ldr	r3, [pc, #384]	@ (80075d8 <_strtod_l+0xb00>)
 8007458:	2200      	movs	r2, #0
 800745a:	f7f9 f8ed 	bl	8000638 <__aeabi_dmul>
 800745e:	4606      	mov	r6, r0
 8007460:	460f      	mov	r7, r1
 8007462:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007466:	9606      	str	r6, [sp, #24]
 8007468:	9307      	str	r3, [sp, #28]
 800746a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800746e:	4d57      	ldr	r5, [pc, #348]	@ (80075cc <_strtod_l+0xaf4>)
 8007470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007476:	401d      	ands	r5, r3
 8007478:	4b58      	ldr	r3, [pc, #352]	@ (80075dc <_strtod_l+0xb04>)
 800747a:	429d      	cmp	r5, r3
 800747c:	f040 80b2 	bne.w	80075e4 <_strtod_l+0xb0c>
 8007480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007482:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007486:	ec4b ab10 	vmov	d0, sl, fp
 800748a:	f7ff f9c9 	bl	8006820 <__ulp>
 800748e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007492:	ec51 0b10 	vmov	r0, r1, d0
 8007496:	f7f9 f8cf 	bl	8000638 <__aeabi_dmul>
 800749a:	4652      	mov	r2, sl
 800749c:	465b      	mov	r3, fp
 800749e:	f7f8 ff15 	bl	80002cc <__adddf3>
 80074a2:	460b      	mov	r3, r1
 80074a4:	4949      	ldr	r1, [pc, #292]	@ (80075cc <_strtod_l+0xaf4>)
 80074a6:	4a4e      	ldr	r2, [pc, #312]	@ (80075e0 <_strtod_l+0xb08>)
 80074a8:	4019      	ands	r1, r3
 80074aa:	4291      	cmp	r1, r2
 80074ac:	4682      	mov	sl, r0
 80074ae:	d942      	bls.n	8007536 <_strtod_l+0xa5e>
 80074b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074b2:	4b47      	ldr	r3, [pc, #284]	@ (80075d0 <_strtod_l+0xaf8>)
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d103      	bne.n	80074c0 <_strtod_l+0x9e8>
 80074b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074ba:	3301      	adds	r3, #1
 80074bc:	f43f ad2f 	beq.w	8006f1e <_strtod_l+0x446>
 80074c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80075d0 <_strtod_l+0xaf8>
 80074c4:	f04f 3aff 	mov.w	sl, #4294967295
 80074c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074ca:	9805      	ldr	r0, [sp, #20]
 80074cc:	f7fe fe7c 	bl	80061c8 <_Bfree>
 80074d0:	9805      	ldr	r0, [sp, #20]
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7fe fe78 	bl	80061c8 <_Bfree>
 80074d8:	9805      	ldr	r0, [sp, #20]
 80074da:	4641      	mov	r1, r8
 80074dc:	f7fe fe74 	bl	80061c8 <_Bfree>
 80074e0:	9805      	ldr	r0, [sp, #20]
 80074e2:	4621      	mov	r1, r4
 80074e4:	f7fe fe70 	bl	80061c8 <_Bfree>
 80074e8:	e619      	b.n	800711e <_strtod_l+0x646>
 80074ea:	f1ba 0f01 	cmp.w	sl, #1
 80074ee:	d103      	bne.n	80074f8 <_strtod_l+0xa20>
 80074f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f43f ada6 	beq.w	8007044 <_strtod_l+0x56c>
 80074f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80075a8 <_strtod_l+0xad0>
 80074fc:	4f35      	ldr	r7, [pc, #212]	@ (80075d4 <_strtod_l+0xafc>)
 80074fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007502:	2600      	movs	r6, #0
 8007504:	e7b1      	b.n	800746a <_strtod_l+0x992>
 8007506:	4f34      	ldr	r7, [pc, #208]	@ (80075d8 <_strtod_l+0xb00>)
 8007508:	2600      	movs	r6, #0
 800750a:	e7aa      	b.n	8007462 <_strtod_l+0x98a>
 800750c:	4b32      	ldr	r3, [pc, #200]	@ (80075d8 <_strtod_l+0xb00>)
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	2200      	movs	r2, #0
 8007514:	f7f9 f890 	bl	8000638 <__aeabi_dmul>
 8007518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800751a:	4606      	mov	r6, r0
 800751c:	460f      	mov	r7, r1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d09f      	beq.n	8007462 <_strtod_l+0x98a>
 8007522:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007526:	e7a0      	b.n	800746a <_strtod_l+0x992>
 8007528:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80075b0 <_strtod_l+0xad8>
 800752c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007530:	ec57 6b17 	vmov	r6, r7, d7
 8007534:	e799      	b.n	800746a <_strtod_l+0x992>
 8007536:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800753a:	9b08      	ldr	r3, [sp, #32]
 800753c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1c1      	bne.n	80074c8 <_strtod_l+0x9f0>
 8007544:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007548:	0d1b      	lsrs	r3, r3, #20
 800754a:	051b      	lsls	r3, r3, #20
 800754c:	429d      	cmp	r5, r3
 800754e:	d1bb      	bne.n	80074c8 <_strtod_l+0x9f0>
 8007550:	4630      	mov	r0, r6
 8007552:	4639      	mov	r1, r7
 8007554:	f7f9 fbd0 	bl	8000cf8 <__aeabi_d2lz>
 8007558:	f7f9 f840 	bl	80005dc <__aeabi_l2d>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f8 feb0 	bl	80002c8 <__aeabi_dsub>
 8007568:	460b      	mov	r3, r1
 800756a:	4602      	mov	r2, r0
 800756c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007570:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007576:	ea46 060a 	orr.w	r6, r6, sl
 800757a:	431e      	orrs	r6, r3
 800757c:	d06f      	beq.n	800765e <_strtod_l+0xb86>
 800757e:	a30e      	add	r3, pc, #56	@ (adr r3, 80075b8 <_strtod_l+0xae0>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7f9 faca 	bl	8000b1c <__aeabi_dcmplt>
 8007588:	2800      	cmp	r0, #0
 800758a:	f47f acd3 	bne.w	8006f34 <_strtod_l+0x45c>
 800758e:	a30c      	add	r3, pc, #48	@ (adr r3, 80075c0 <_strtod_l+0xae8>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007598:	f7f9 fade 	bl	8000b58 <__aeabi_dcmpgt>
 800759c:	2800      	cmp	r0, #0
 800759e:	d093      	beq.n	80074c8 <_strtod_l+0x9f0>
 80075a0:	e4c8      	b.n	8006f34 <_strtod_l+0x45c>
 80075a2:	bf00      	nop
 80075a4:	f3af 8000 	nop.w
 80075a8:	00000000 	.word	0x00000000
 80075ac:	bff00000 	.word	0xbff00000
 80075b0:	00000000 	.word	0x00000000
 80075b4:	3ff00000 	.word	0x3ff00000
 80075b8:	94a03595 	.word	0x94a03595
 80075bc:	3fdfffff 	.word	0x3fdfffff
 80075c0:	35afe535 	.word	0x35afe535
 80075c4:	3fe00000 	.word	0x3fe00000
 80075c8:	000fffff 	.word	0x000fffff
 80075cc:	7ff00000 	.word	0x7ff00000
 80075d0:	7fefffff 	.word	0x7fefffff
 80075d4:	3ff00000 	.word	0x3ff00000
 80075d8:	3fe00000 	.word	0x3fe00000
 80075dc:	7fe00000 	.word	0x7fe00000
 80075e0:	7c9fffff 	.word	0x7c9fffff
 80075e4:	9b08      	ldr	r3, [sp, #32]
 80075e6:	b323      	cbz	r3, 8007632 <_strtod_l+0xb5a>
 80075e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80075ec:	d821      	bhi.n	8007632 <_strtod_l+0xb5a>
 80075ee:	a328      	add	r3, pc, #160	@ (adr r3, 8007690 <_strtod_l+0xbb8>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	4630      	mov	r0, r6
 80075f6:	4639      	mov	r1, r7
 80075f8:	f7f9 fa9a 	bl	8000b30 <__aeabi_dcmple>
 80075fc:	b1a0      	cbz	r0, 8007628 <_strtod_l+0xb50>
 80075fe:	4639      	mov	r1, r7
 8007600:	4630      	mov	r0, r6
 8007602:	f7f9 faf1 	bl	8000be8 <__aeabi_d2uiz>
 8007606:	2801      	cmp	r0, #1
 8007608:	bf38      	it	cc
 800760a:	2001      	movcc	r0, #1
 800760c:	f7f8 ff9a 	bl	8000544 <__aeabi_ui2d>
 8007610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007612:	4606      	mov	r6, r0
 8007614:	460f      	mov	r7, r1
 8007616:	b9fb      	cbnz	r3, 8007658 <_strtod_l+0xb80>
 8007618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800761c:	9014      	str	r0, [sp, #80]	@ 0x50
 800761e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007620:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007624:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800762a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800762e:	1b5b      	subs	r3, r3, r5
 8007630:	9311      	str	r3, [sp, #68]	@ 0x44
 8007632:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007636:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800763a:	f7ff f8f1 	bl	8006820 <__ulp>
 800763e:	4650      	mov	r0, sl
 8007640:	ec53 2b10 	vmov	r2, r3, d0
 8007644:	4659      	mov	r1, fp
 8007646:	f7f8 fff7 	bl	8000638 <__aeabi_dmul>
 800764a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800764e:	f7f8 fe3d 	bl	80002cc <__adddf3>
 8007652:	4682      	mov	sl, r0
 8007654:	468b      	mov	fp, r1
 8007656:	e770      	b.n	800753a <_strtod_l+0xa62>
 8007658:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800765c:	e7e0      	b.n	8007620 <_strtod_l+0xb48>
 800765e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007698 <_strtod_l+0xbc0>)
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f7f9 fa5a 	bl	8000b1c <__aeabi_dcmplt>
 8007668:	e798      	b.n	800759c <_strtod_l+0xac4>
 800766a:	2300      	movs	r3, #0
 800766c:	930e      	str	r3, [sp, #56]	@ 0x38
 800766e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	f7ff ba6d 	b.w	8006b52 <_strtod_l+0x7a>
 8007678:	2a65      	cmp	r2, #101	@ 0x65
 800767a:	f43f ab68 	beq.w	8006d4e <_strtod_l+0x276>
 800767e:	2a45      	cmp	r2, #69	@ 0x45
 8007680:	f43f ab65 	beq.w	8006d4e <_strtod_l+0x276>
 8007684:	2301      	movs	r3, #1
 8007686:	f7ff bba0 	b.w	8006dca <_strtod_l+0x2f2>
 800768a:	bf00      	nop
 800768c:	f3af 8000 	nop.w
 8007690:	ffc00000 	.word	0xffc00000
 8007694:	41dfffff 	.word	0x41dfffff
 8007698:	94a03595 	.word	0x94a03595
 800769c:	3fcfffff 	.word	0x3fcfffff

080076a0 <_strtod_r>:
 80076a0:	4b01      	ldr	r3, [pc, #4]	@ (80076a8 <_strtod_r+0x8>)
 80076a2:	f7ff ba19 	b.w	8006ad8 <_strtod_l>
 80076a6:	bf00      	nop
 80076a8:	2000006c 	.word	0x2000006c

080076ac <_strtol_l.isra.0>:
 80076ac:	2b24      	cmp	r3, #36	@ 0x24
 80076ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b2:	4686      	mov	lr, r0
 80076b4:	4690      	mov	r8, r2
 80076b6:	d801      	bhi.n	80076bc <_strtol_l.isra.0+0x10>
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d106      	bne.n	80076ca <_strtol_l.isra.0+0x1e>
 80076bc:	f7fd fdb8 	bl	8005230 <__errno>
 80076c0:	2316      	movs	r3, #22
 80076c2:	6003      	str	r3, [r0, #0]
 80076c4:	2000      	movs	r0, #0
 80076c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ca:	4834      	ldr	r0, [pc, #208]	@ (800779c <_strtol_l.isra.0+0xf0>)
 80076cc:	460d      	mov	r5, r1
 80076ce:	462a      	mov	r2, r5
 80076d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076d4:	5d06      	ldrb	r6, [r0, r4]
 80076d6:	f016 0608 	ands.w	r6, r6, #8
 80076da:	d1f8      	bne.n	80076ce <_strtol_l.isra.0+0x22>
 80076dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80076de:	d110      	bne.n	8007702 <_strtol_l.isra.0+0x56>
 80076e0:	782c      	ldrb	r4, [r5, #0]
 80076e2:	2601      	movs	r6, #1
 80076e4:	1c95      	adds	r5, r2, #2
 80076e6:	f033 0210 	bics.w	r2, r3, #16
 80076ea:	d115      	bne.n	8007718 <_strtol_l.isra.0+0x6c>
 80076ec:	2c30      	cmp	r4, #48	@ 0x30
 80076ee:	d10d      	bne.n	800770c <_strtol_l.isra.0+0x60>
 80076f0:	782a      	ldrb	r2, [r5, #0]
 80076f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80076f6:	2a58      	cmp	r2, #88	@ 0x58
 80076f8:	d108      	bne.n	800770c <_strtol_l.isra.0+0x60>
 80076fa:	786c      	ldrb	r4, [r5, #1]
 80076fc:	3502      	adds	r5, #2
 80076fe:	2310      	movs	r3, #16
 8007700:	e00a      	b.n	8007718 <_strtol_l.isra.0+0x6c>
 8007702:	2c2b      	cmp	r4, #43	@ 0x2b
 8007704:	bf04      	itt	eq
 8007706:	782c      	ldrbeq	r4, [r5, #0]
 8007708:	1c95      	addeq	r5, r2, #2
 800770a:	e7ec      	b.n	80076e6 <_strtol_l.isra.0+0x3a>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f6      	bne.n	80076fe <_strtol_l.isra.0+0x52>
 8007710:	2c30      	cmp	r4, #48	@ 0x30
 8007712:	bf14      	ite	ne
 8007714:	230a      	movne	r3, #10
 8007716:	2308      	moveq	r3, #8
 8007718:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800771c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007720:	2200      	movs	r2, #0
 8007722:	fbbc f9f3 	udiv	r9, ip, r3
 8007726:	4610      	mov	r0, r2
 8007728:	fb03 ca19 	mls	sl, r3, r9, ip
 800772c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007730:	2f09      	cmp	r7, #9
 8007732:	d80f      	bhi.n	8007754 <_strtol_l.isra.0+0xa8>
 8007734:	463c      	mov	r4, r7
 8007736:	42a3      	cmp	r3, r4
 8007738:	dd1b      	ble.n	8007772 <_strtol_l.isra.0+0xc6>
 800773a:	1c57      	adds	r7, r2, #1
 800773c:	d007      	beq.n	800774e <_strtol_l.isra.0+0xa2>
 800773e:	4581      	cmp	r9, r0
 8007740:	d314      	bcc.n	800776c <_strtol_l.isra.0+0xc0>
 8007742:	d101      	bne.n	8007748 <_strtol_l.isra.0+0x9c>
 8007744:	45a2      	cmp	sl, r4
 8007746:	db11      	blt.n	800776c <_strtol_l.isra.0+0xc0>
 8007748:	fb00 4003 	mla	r0, r0, r3, r4
 800774c:	2201      	movs	r2, #1
 800774e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007752:	e7eb      	b.n	800772c <_strtol_l.isra.0+0x80>
 8007754:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007758:	2f19      	cmp	r7, #25
 800775a:	d801      	bhi.n	8007760 <_strtol_l.isra.0+0xb4>
 800775c:	3c37      	subs	r4, #55	@ 0x37
 800775e:	e7ea      	b.n	8007736 <_strtol_l.isra.0+0x8a>
 8007760:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007764:	2f19      	cmp	r7, #25
 8007766:	d804      	bhi.n	8007772 <_strtol_l.isra.0+0xc6>
 8007768:	3c57      	subs	r4, #87	@ 0x57
 800776a:	e7e4      	b.n	8007736 <_strtol_l.isra.0+0x8a>
 800776c:	f04f 32ff 	mov.w	r2, #4294967295
 8007770:	e7ed      	b.n	800774e <_strtol_l.isra.0+0xa2>
 8007772:	1c53      	adds	r3, r2, #1
 8007774:	d108      	bne.n	8007788 <_strtol_l.isra.0+0xdc>
 8007776:	2322      	movs	r3, #34	@ 0x22
 8007778:	f8ce 3000 	str.w	r3, [lr]
 800777c:	4660      	mov	r0, ip
 800777e:	f1b8 0f00 	cmp.w	r8, #0
 8007782:	d0a0      	beq.n	80076c6 <_strtol_l.isra.0+0x1a>
 8007784:	1e69      	subs	r1, r5, #1
 8007786:	e006      	b.n	8007796 <_strtol_l.isra.0+0xea>
 8007788:	b106      	cbz	r6, 800778c <_strtol_l.isra.0+0xe0>
 800778a:	4240      	negs	r0, r0
 800778c:	f1b8 0f00 	cmp.w	r8, #0
 8007790:	d099      	beq.n	80076c6 <_strtol_l.isra.0+0x1a>
 8007792:	2a00      	cmp	r2, #0
 8007794:	d1f6      	bne.n	8007784 <_strtol_l.isra.0+0xd8>
 8007796:	f8c8 1000 	str.w	r1, [r8]
 800779a:	e794      	b.n	80076c6 <_strtol_l.isra.0+0x1a>
 800779c:	0800a761 	.word	0x0800a761

080077a0 <_strtol_r>:
 80077a0:	f7ff bf84 	b.w	80076ac <_strtol_l.isra.0>

080077a4 <__ssputs_r>:
 80077a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a8:	688e      	ldr	r6, [r1, #8]
 80077aa:	461f      	mov	r7, r3
 80077ac:	42be      	cmp	r6, r7
 80077ae:	680b      	ldr	r3, [r1, #0]
 80077b0:	4682      	mov	sl, r0
 80077b2:	460c      	mov	r4, r1
 80077b4:	4690      	mov	r8, r2
 80077b6:	d82d      	bhi.n	8007814 <__ssputs_r+0x70>
 80077b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077c0:	d026      	beq.n	8007810 <__ssputs_r+0x6c>
 80077c2:	6965      	ldr	r5, [r4, #20]
 80077c4:	6909      	ldr	r1, [r1, #16]
 80077c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077ca:	eba3 0901 	sub.w	r9, r3, r1
 80077ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077d2:	1c7b      	adds	r3, r7, #1
 80077d4:	444b      	add	r3, r9
 80077d6:	106d      	asrs	r5, r5, #1
 80077d8:	429d      	cmp	r5, r3
 80077da:	bf38      	it	cc
 80077dc:	461d      	movcc	r5, r3
 80077de:	0553      	lsls	r3, r2, #21
 80077e0:	d527      	bpl.n	8007832 <__ssputs_r+0x8e>
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7fe fc24 	bl	8006030 <_malloc_r>
 80077e8:	4606      	mov	r6, r0
 80077ea:	b360      	cbz	r0, 8007846 <__ssputs_r+0xa2>
 80077ec:	6921      	ldr	r1, [r4, #16]
 80077ee:	464a      	mov	r2, r9
 80077f0:	f000 fbee 	bl	8007fd0 <memcpy>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	6126      	str	r6, [r4, #16]
 8007802:	6165      	str	r5, [r4, #20]
 8007804:	444e      	add	r6, r9
 8007806:	eba5 0509 	sub.w	r5, r5, r9
 800780a:	6026      	str	r6, [r4, #0]
 800780c:	60a5      	str	r5, [r4, #8]
 800780e:	463e      	mov	r6, r7
 8007810:	42be      	cmp	r6, r7
 8007812:	d900      	bls.n	8007816 <__ssputs_r+0x72>
 8007814:	463e      	mov	r6, r7
 8007816:	6820      	ldr	r0, [r4, #0]
 8007818:	4632      	mov	r2, r6
 800781a:	4641      	mov	r1, r8
 800781c:	f000 fb9c 	bl	8007f58 <memmove>
 8007820:	68a3      	ldr	r3, [r4, #8]
 8007822:	1b9b      	subs	r3, r3, r6
 8007824:	60a3      	str	r3, [r4, #8]
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	4433      	add	r3, r6
 800782a:	6023      	str	r3, [r4, #0]
 800782c:	2000      	movs	r0, #0
 800782e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007832:	462a      	mov	r2, r5
 8007834:	f000 ff61 	bl	80086fa <_realloc_r>
 8007838:	4606      	mov	r6, r0
 800783a:	2800      	cmp	r0, #0
 800783c:	d1e0      	bne.n	8007800 <__ssputs_r+0x5c>
 800783e:	6921      	ldr	r1, [r4, #16]
 8007840:	4650      	mov	r0, sl
 8007842:	f7fe fb81 	bl	8005f48 <_free_r>
 8007846:	230c      	movs	r3, #12
 8007848:	f8ca 3000 	str.w	r3, [sl]
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	e7e9      	b.n	800782e <__ssputs_r+0x8a>
	...

0800785c <_svfiprintf_r>:
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	4698      	mov	r8, r3
 8007862:	898b      	ldrh	r3, [r1, #12]
 8007864:	061b      	lsls	r3, r3, #24
 8007866:	b09d      	sub	sp, #116	@ 0x74
 8007868:	4607      	mov	r7, r0
 800786a:	460d      	mov	r5, r1
 800786c:	4614      	mov	r4, r2
 800786e:	d510      	bpl.n	8007892 <_svfiprintf_r+0x36>
 8007870:	690b      	ldr	r3, [r1, #16]
 8007872:	b973      	cbnz	r3, 8007892 <_svfiprintf_r+0x36>
 8007874:	2140      	movs	r1, #64	@ 0x40
 8007876:	f7fe fbdb 	bl	8006030 <_malloc_r>
 800787a:	6028      	str	r0, [r5, #0]
 800787c:	6128      	str	r0, [r5, #16]
 800787e:	b930      	cbnz	r0, 800788e <_svfiprintf_r+0x32>
 8007880:	230c      	movs	r3, #12
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	f04f 30ff 	mov.w	r0, #4294967295
 8007888:	b01d      	add	sp, #116	@ 0x74
 800788a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788e:	2340      	movs	r3, #64	@ 0x40
 8007890:	616b      	str	r3, [r5, #20]
 8007892:	2300      	movs	r3, #0
 8007894:	9309      	str	r3, [sp, #36]	@ 0x24
 8007896:	2320      	movs	r3, #32
 8007898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800789c:	f8cd 800c 	str.w	r8, [sp, #12]
 80078a0:	2330      	movs	r3, #48	@ 0x30
 80078a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a40 <_svfiprintf_r+0x1e4>
 80078a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078aa:	f04f 0901 	mov.w	r9, #1
 80078ae:	4623      	mov	r3, r4
 80078b0:	469a      	mov	sl, r3
 80078b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078b6:	b10a      	cbz	r2, 80078bc <_svfiprintf_r+0x60>
 80078b8:	2a25      	cmp	r2, #37	@ 0x25
 80078ba:	d1f9      	bne.n	80078b0 <_svfiprintf_r+0x54>
 80078bc:	ebba 0b04 	subs.w	fp, sl, r4
 80078c0:	d00b      	beq.n	80078da <_svfiprintf_r+0x7e>
 80078c2:	465b      	mov	r3, fp
 80078c4:	4622      	mov	r2, r4
 80078c6:	4629      	mov	r1, r5
 80078c8:	4638      	mov	r0, r7
 80078ca:	f7ff ff6b 	bl	80077a4 <__ssputs_r>
 80078ce:	3001      	adds	r0, #1
 80078d0:	f000 80a7 	beq.w	8007a22 <_svfiprintf_r+0x1c6>
 80078d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078d6:	445a      	add	r2, fp
 80078d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80078da:	f89a 3000 	ldrb.w	r3, [sl]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 809f 	beq.w	8007a22 <_svfiprintf_r+0x1c6>
 80078e4:	2300      	movs	r3, #0
 80078e6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ee:	f10a 0a01 	add.w	sl, sl, #1
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	9307      	str	r3, [sp, #28]
 80078f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80078fc:	4654      	mov	r4, sl
 80078fe:	2205      	movs	r2, #5
 8007900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007904:	484e      	ldr	r0, [pc, #312]	@ (8007a40 <_svfiprintf_r+0x1e4>)
 8007906:	f7f8 fc83 	bl	8000210 <memchr>
 800790a:	9a04      	ldr	r2, [sp, #16]
 800790c:	b9d8      	cbnz	r0, 8007946 <_svfiprintf_r+0xea>
 800790e:	06d0      	lsls	r0, r2, #27
 8007910:	bf44      	itt	mi
 8007912:	2320      	movmi	r3, #32
 8007914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007918:	0711      	lsls	r1, r2, #28
 800791a:	bf44      	itt	mi
 800791c:	232b      	movmi	r3, #43	@ 0x2b
 800791e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007922:	f89a 3000 	ldrb.w	r3, [sl]
 8007926:	2b2a      	cmp	r3, #42	@ 0x2a
 8007928:	d015      	beq.n	8007956 <_svfiprintf_r+0xfa>
 800792a:	9a07      	ldr	r2, [sp, #28]
 800792c:	4654      	mov	r4, sl
 800792e:	2000      	movs	r0, #0
 8007930:	f04f 0c0a 	mov.w	ip, #10
 8007934:	4621      	mov	r1, r4
 8007936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800793a:	3b30      	subs	r3, #48	@ 0x30
 800793c:	2b09      	cmp	r3, #9
 800793e:	d94b      	bls.n	80079d8 <_svfiprintf_r+0x17c>
 8007940:	b1b0      	cbz	r0, 8007970 <_svfiprintf_r+0x114>
 8007942:	9207      	str	r2, [sp, #28]
 8007944:	e014      	b.n	8007970 <_svfiprintf_r+0x114>
 8007946:	eba0 0308 	sub.w	r3, r0, r8
 800794a:	fa09 f303 	lsl.w	r3, r9, r3
 800794e:	4313      	orrs	r3, r2
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	46a2      	mov	sl, r4
 8007954:	e7d2      	b.n	80078fc <_svfiprintf_r+0xa0>
 8007956:	9b03      	ldr	r3, [sp, #12]
 8007958:	1d19      	adds	r1, r3, #4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	9103      	str	r1, [sp, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	bfbb      	ittet	lt
 8007962:	425b      	neglt	r3, r3
 8007964:	f042 0202 	orrlt.w	r2, r2, #2
 8007968:	9307      	strge	r3, [sp, #28]
 800796a:	9307      	strlt	r3, [sp, #28]
 800796c:	bfb8      	it	lt
 800796e:	9204      	strlt	r2, [sp, #16]
 8007970:	7823      	ldrb	r3, [r4, #0]
 8007972:	2b2e      	cmp	r3, #46	@ 0x2e
 8007974:	d10a      	bne.n	800798c <_svfiprintf_r+0x130>
 8007976:	7863      	ldrb	r3, [r4, #1]
 8007978:	2b2a      	cmp	r3, #42	@ 0x2a
 800797a:	d132      	bne.n	80079e2 <_svfiprintf_r+0x186>
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	1d1a      	adds	r2, r3, #4
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	9203      	str	r2, [sp, #12]
 8007984:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007988:	3402      	adds	r4, #2
 800798a:	9305      	str	r3, [sp, #20]
 800798c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a50 <_svfiprintf_r+0x1f4>
 8007990:	7821      	ldrb	r1, [r4, #0]
 8007992:	2203      	movs	r2, #3
 8007994:	4650      	mov	r0, sl
 8007996:	f7f8 fc3b 	bl	8000210 <memchr>
 800799a:	b138      	cbz	r0, 80079ac <_svfiprintf_r+0x150>
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	eba0 000a 	sub.w	r0, r0, sl
 80079a2:	2240      	movs	r2, #64	@ 0x40
 80079a4:	4082      	lsls	r2, r0
 80079a6:	4313      	orrs	r3, r2
 80079a8:	3401      	adds	r4, #1
 80079aa:	9304      	str	r3, [sp, #16]
 80079ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b0:	4824      	ldr	r0, [pc, #144]	@ (8007a44 <_svfiprintf_r+0x1e8>)
 80079b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079b6:	2206      	movs	r2, #6
 80079b8:	f7f8 fc2a 	bl	8000210 <memchr>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d036      	beq.n	8007a2e <_svfiprintf_r+0x1d2>
 80079c0:	4b21      	ldr	r3, [pc, #132]	@ (8007a48 <_svfiprintf_r+0x1ec>)
 80079c2:	bb1b      	cbnz	r3, 8007a0c <_svfiprintf_r+0x1b0>
 80079c4:	9b03      	ldr	r3, [sp, #12]
 80079c6:	3307      	adds	r3, #7
 80079c8:	f023 0307 	bic.w	r3, r3, #7
 80079cc:	3308      	adds	r3, #8
 80079ce:	9303      	str	r3, [sp, #12]
 80079d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d2:	4433      	add	r3, r6
 80079d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079d6:	e76a      	b.n	80078ae <_svfiprintf_r+0x52>
 80079d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80079dc:	460c      	mov	r4, r1
 80079de:	2001      	movs	r0, #1
 80079e0:	e7a8      	b.n	8007934 <_svfiprintf_r+0xd8>
 80079e2:	2300      	movs	r3, #0
 80079e4:	3401      	adds	r4, #1
 80079e6:	9305      	str	r3, [sp, #20]
 80079e8:	4619      	mov	r1, r3
 80079ea:	f04f 0c0a 	mov.w	ip, #10
 80079ee:	4620      	mov	r0, r4
 80079f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079f4:	3a30      	subs	r2, #48	@ 0x30
 80079f6:	2a09      	cmp	r2, #9
 80079f8:	d903      	bls.n	8007a02 <_svfiprintf_r+0x1a6>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0c6      	beq.n	800798c <_svfiprintf_r+0x130>
 80079fe:	9105      	str	r1, [sp, #20]
 8007a00:	e7c4      	b.n	800798c <_svfiprintf_r+0x130>
 8007a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a06:	4604      	mov	r4, r0
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e7f0      	b.n	80079ee <_svfiprintf_r+0x192>
 8007a0c:	ab03      	add	r3, sp, #12
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	462a      	mov	r2, r5
 8007a12:	4b0e      	ldr	r3, [pc, #56]	@ (8007a4c <_svfiprintf_r+0x1f0>)
 8007a14:	a904      	add	r1, sp, #16
 8007a16:	4638      	mov	r0, r7
 8007a18:	f7fc fcba 	bl	8004390 <_printf_float>
 8007a1c:	1c42      	adds	r2, r0, #1
 8007a1e:	4606      	mov	r6, r0
 8007a20:	d1d6      	bne.n	80079d0 <_svfiprintf_r+0x174>
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	065b      	lsls	r3, r3, #25
 8007a26:	f53f af2d 	bmi.w	8007884 <_svfiprintf_r+0x28>
 8007a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a2c:	e72c      	b.n	8007888 <_svfiprintf_r+0x2c>
 8007a2e:	ab03      	add	r3, sp, #12
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	462a      	mov	r2, r5
 8007a34:	4b05      	ldr	r3, [pc, #20]	@ (8007a4c <_svfiprintf_r+0x1f0>)
 8007a36:	a904      	add	r1, sp, #16
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7fc ff41 	bl	80048c0 <_printf_i>
 8007a3e:	e7ed      	b.n	8007a1c <_svfiprintf_r+0x1c0>
 8007a40:	0800a559 	.word	0x0800a559
 8007a44:	0800a563 	.word	0x0800a563
 8007a48:	08004391 	.word	0x08004391
 8007a4c:	080077a5 	.word	0x080077a5
 8007a50:	0800a55f 	.word	0x0800a55f

08007a54 <__sfputc_r>:
 8007a54:	6893      	ldr	r3, [r2, #8]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	b410      	push	{r4}
 8007a5c:	6093      	str	r3, [r2, #8]
 8007a5e:	da08      	bge.n	8007a72 <__sfputc_r+0x1e>
 8007a60:	6994      	ldr	r4, [r2, #24]
 8007a62:	42a3      	cmp	r3, r4
 8007a64:	db01      	blt.n	8007a6a <__sfputc_r+0x16>
 8007a66:	290a      	cmp	r1, #10
 8007a68:	d103      	bne.n	8007a72 <__sfputc_r+0x1e>
 8007a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a6e:	f000 b9df 	b.w	8007e30 <__swbuf_r>
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	1c58      	adds	r0, r3, #1
 8007a76:	6010      	str	r0, [r2, #0]
 8007a78:	7019      	strb	r1, [r3, #0]
 8007a7a:	4608      	mov	r0, r1
 8007a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <__sfputs_r>:
 8007a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a84:	4606      	mov	r6, r0
 8007a86:	460f      	mov	r7, r1
 8007a88:	4614      	mov	r4, r2
 8007a8a:	18d5      	adds	r5, r2, r3
 8007a8c:	42ac      	cmp	r4, r5
 8007a8e:	d101      	bne.n	8007a94 <__sfputs_r+0x12>
 8007a90:	2000      	movs	r0, #0
 8007a92:	e007      	b.n	8007aa4 <__sfputs_r+0x22>
 8007a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a98:	463a      	mov	r2, r7
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff ffda 	bl	8007a54 <__sfputc_r>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d1f3      	bne.n	8007a8c <__sfputs_r+0xa>
 8007aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007aa8 <_vfiprintf_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	460d      	mov	r5, r1
 8007aae:	b09d      	sub	sp, #116	@ 0x74
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	4698      	mov	r8, r3
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	b118      	cbz	r0, 8007ac0 <_vfiprintf_r+0x18>
 8007ab8:	6a03      	ldr	r3, [r0, #32]
 8007aba:	b90b      	cbnz	r3, 8007ac0 <_vfiprintf_r+0x18>
 8007abc:	f7fd fab8 	bl	8005030 <__sinit>
 8007ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ac2:	07d9      	lsls	r1, r3, #31
 8007ac4:	d405      	bmi.n	8007ad2 <_vfiprintf_r+0x2a>
 8007ac6:	89ab      	ldrh	r3, [r5, #12]
 8007ac8:	059a      	lsls	r2, r3, #22
 8007aca:	d402      	bmi.n	8007ad2 <_vfiprintf_r+0x2a>
 8007acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ace:	f7fd fbda 	bl	8005286 <__retarget_lock_acquire_recursive>
 8007ad2:	89ab      	ldrh	r3, [r5, #12]
 8007ad4:	071b      	lsls	r3, r3, #28
 8007ad6:	d501      	bpl.n	8007adc <_vfiprintf_r+0x34>
 8007ad8:	692b      	ldr	r3, [r5, #16]
 8007ada:	b99b      	cbnz	r3, 8007b04 <_vfiprintf_r+0x5c>
 8007adc:	4629      	mov	r1, r5
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f000 f9e4 	bl	8007eac <__swsetup_r>
 8007ae4:	b170      	cbz	r0, 8007b04 <_vfiprintf_r+0x5c>
 8007ae6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ae8:	07dc      	lsls	r4, r3, #31
 8007aea:	d504      	bpl.n	8007af6 <_vfiprintf_r+0x4e>
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	b01d      	add	sp, #116	@ 0x74
 8007af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af6:	89ab      	ldrh	r3, [r5, #12]
 8007af8:	0598      	lsls	r0, r3, #22
 8007afa:	d4f7      	bmi.n	8007aec <_vfiprintf_r+0x44>
 8007afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007afe:	f7fd fbc3 	bl	8005288 <__retarget_lock_release_recursive>
 8007b02:	e7f3      	b.n	8007aec <_vfiprintf_r+0x44>
 8007b04:	2300      	movs	r3, #0
 8007b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b08:	2320      	movs	r3, #32
 8007b0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b12:	2330      	movs	r3, #48	@ 0x30
 8007b14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007cc4 <_vfiprintf_r+0x21c>
 8007b18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b1c:	f04f 0901 	mov.w	r9, #1
 8007b20:	4623      	mov	r3, r4
 8007b22:	469a      	mov	sl, r3
 8007b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b28:	b10a      	cbz	r2, 8007b2e <_vfiprintf_r+0x86>
 8007b2a:	2a25      	cmp	r2, #37	@ 0x25
 8007b2c:	d1f9      	bne.n	8007b22 <_vfiprintf_r+0x7a>
 8007b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b32:	d00b      	beq.n	8007b4c <_vfiprintf_r+0xa4>
 8007b34:	465b      	mov	r3, fp
 8007b36:	4622      	mov	r2, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7ff ffa1 	bl	8007a82 <__sfputs_r>
 8007b40:	3001      	adds	r0, #1
 8007b42:	f000 80a7 	beq.w	8007c94 <_vfiprintf_r+0x1ec>
 8007b46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b48:	445a      	add	r2, fp
 8007b4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 809f 	beq.w	8007c94 <_vfiprintf_r+0x1ec>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b60:	f10a 0a01 	add.w	sl, sl, #1
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	9307      	str	r3, [sp, #28]
 8007b68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b6e:	4654      	mov	r4, sl
 8007b70:	2205      	movs	r2, #5
 8007b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b76:	4853      	ldr	r0, [pc, #332]	@ (8007cc4 <_vfiprintf_r+0x21c>)
 8007b78:	f7f8 fb4a 	bl	8000210 <memchr>
 8007b7c:	9a04      	ldr	r2, [sp, #16]
 8007b7e:	b9d8      	cbnz	r0, 8007bb8 <_vfiprintf_r+0x110>
 8007b80:	06d1      	lsls	r1, r2, #27
 8007b82:	bf44      	itt	mi
 8007b84:	2320      	movmi	r3, #32
 8007b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b8a:	0713      	lsls	r3, r2, #28
 8007b8c:	bf44      	itt	mi
 8007b8e:	232b      	movmi	r3, #43	@ 0x2b
 8007b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b94:	f89a 3000 	ldrb.w	r3, [sl]
 8007b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b9a:	d015      	beq.n	8007bc8 <_vfiprintf_r+0x120>
 8007b9c:	9a07      	ldr	r2, [sp, #28]
 8007b9e:	4654      	mov	r4, sl
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f04f 0c0a 	mov.w	ip, #10
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bac:	3b30      	subs	r3, #48	@ 0x30
 8007bae:	2b09      	cmp	r3, #9
 8007bb0:	d94b      	bls.n	8007c4a <_vfiprintf_r+0x1a2>
 8007bb2:	b1b0      	cbz	r0, 8007be2 <_vfiprintf_r+0x13a>
 8007bb4:	9207      	str	r2, [sp, #28]
 8007bb6:	e014      	b.n	8007be2 <_vfiprintf_r+0x13a>
 8007bb8:	eba0 0308 	sub.w	r3, r0, r8
 8007bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	46a2      	mov	sl, r4
 8007bc6:	e7d2      	b.n	8007b6e <_vfiprintf_r+0xc6>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	1d19      	adds	r1, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	9103      	str	r1, [sp, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfbb      	ittet	lt
 8007bd4:	425b      	neglt	r3, r3
 8007bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bda:	9307      	strge	r3, [sp, #28]
 8007bdc:	9307      	strlt	r3, [sp, #28]
 8007bde:	bfb8      	it	lt
 8007be0:	9204      	strlt	r2, [sp, #16]
 8007be2:	7823      	ldrb	r3, [r4, #0]
 8007be4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007be6:	d10a      	bne.n	8007bfe <_vfiprintf_r+0x156>
 8007be8:	7863      	ldrb	r3, [r4, #1]
 8007bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bec:	d132      	bne.n	8007c54 <_vfiprintf_r+0x1ac>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	1d1a      	adds	r2, r3, #4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	9203      	str	r2, [sp, #12]
 8007bf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bfa:	3402      	adds	r4, #2
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007cd4 <_vfiprintf_r+0x22c>
 8007c02:	7821      	ldrb	r1, [r4, #0]
 8007c04:	2203      	movs	r2, #3
 8007c06:	4650      	mov	r0, sl
 8007c08:	f7f8 fb02 	bl	8000210 <memchr>
 8007c0c:	b138      	cbz	r0, 8007c1e <_vfiprintf_r+0x176>
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	eba0 000a 	sub.w	r0, r0, sl
 8007c14:	2240      	movs	r2, #64	@ 0x40
 8007c16:	4082      	lsls	r2, r0
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	3401      	adds	r4, #1
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c22:	4829      	ldr	r0, [pc, #164]	@ (8007cc8 <_vfiprintf_r+0x220>)
 8007c24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c28:	2206      	movs	r2, #6
 8007c2a:	f7f8 faf1 	bl	8000210 <memchr>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d03f      	beq.n	8007cb2 <_vfiprintf_r+0x20a>
 8007c32:	4b26      	ldr	r3, [pc, #152]	@ (8007ccc <_vfiprintf_r+0x224>)
 8007c34:	bb1b      	cbnz	r3, 8007c7e <_vfiprintf_r+0x1d6>
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	3307      	adds	r3, #7
 8007c3a:	f023 0307 	bic.w	r3, r3, #7
 8007c3e:	3308      	adds	r3, #8
 8007c40:	9303      	str	r3, [sp, #12]
 8007c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c44:	443b      	add	r3, r7
 8007c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c48:	e76a      	b.n	8007b20 <_vfiprintf_r+0x78>
 8007c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c4e:	460c      	mov	r4, r1
 8007c50:	2001      	movs	r0, #1
 8007c52:	e7a8      	b.n	8007ba6 <_vfiprintf_r+0xfe>
 8007c54:	2300      	movs	r3, #0
 8007c56:	3401      	adds	r4, #1
 8007c58:	9305      	str	r3, [sp, #20]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	f04f 0c0a 	mov.w	ip, #10
 8007c60:	4620      	mov	r0, r4
 8007c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c66:	3a30      	subs	r2, #48	@ 0x30
 8007c68:	2a09      	cmp	r2, #9
 8007c6a:	d903      	bls.n	8007c74 <_vfiprintf_r+0x1cc>
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0c6      	beq.n	8007bfe <_vfiprintf_r+0x156>
 8007c70:	9105      	str	r1, [sp, #20]
 8007c72:	e7c4      	b.n	8007bfe <_vfiprintf_r+0x156>
 8007c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c78:	4604      	mov	r4, r0
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e7f0      	b.n	8007c60 <_vfiprintf_r+0x1b8>
 8007c7e:	ab03      	add	r3, sp, #12
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4b12      	ldr	r3, [pc, #72]	@ (8007cd0 <_vfiprintf_r+0x228>)
 8007c86:	a904      	add	r1, sp, #16
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7fc fb81 	bl	8004390 <_printf_float>
 8007c8e:	4607      	mov	r7, r0
 8007c90:	1c78      	adds	r0, r7, #1
 8007c92:	d1d6      	bne.n	8007c42 <_vfiprintf_r+0x19a>
 8007c94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c96:	07d9      	lsls	r1, r3, #31
 8007c98:	d405      	bmi.n	8007ca6 <_vfiprintf_r+0x1fe>
 8007c9a:	89ab      	ldrh	r3, [r5, #12]
 8007c9c:	059a      	lsls	r2, r3, #22
 8007c9e:	d402      	bmi.n	8007ca6 <_vfiprintf_r+0x1fe>
 8007ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ca2:	f7fd faf1 	bl	8005288 <__retarget_lock_release_recursive>
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	065b      	lsls	r3, r3, #25
 8007caa:	f53f af1f 	bmi.w	8007aec <_vfiprintf_r+0x44>
 8007cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cb0:	e71e      	b.n	8007af0 <_vfiprintf_r+0x48>
 8007cb2:	ab03      	add	r3, sp, #12
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	4b05      	ldr	r3, [pc, #20]	@ (8007cd0 <_vfiprintf_r+0x228>)
 8007cba:	a904      	add	r1, sp, #16
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7fc fdff 	bl	80048c0 <_printf_i>
 8007cc2:	e7e4      	b.n	8007c8e <_vfiprintf_r+0x1e6>
 8007cc4:	0800a559 	.word	0x0800a559
 8007cc8:	0800a563 	.word	0x0800a563
 8007ccc:	08004391 	.word	0x08004391
 8007cd0:	08007a83 	.word	0x08007a83
 8007cd4:	0800a55f 	.word	0x0800a55f

08007cd8 <__sflush_r>:
 8007cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce0:	0716      	lsls	r6, r2, #28
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	d454      	bmi.n	8007d92 <__sflush_r+0xba>
 8007ce8:	684b      	ldr	r3, [r1, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dc02      	bgt.n	8007cf4 <__sflush_r+0x1c>
 8007cee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dd48      	ble.n	8007d86 <__sflush_r+0xae>
 8007cf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	d045      	beq.n	8007d86 <__sflush_r+0xae>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d00:	682f      	ldr	r7, [r5, #0]
 8007d02:	6a21      	ldr	r1, [r4, #32]
 8007d04:	602b      	str	r3, [r5, #0]
 8007d06:	d030      	beq.n	8007d6a <__sflush_r+0x92>
 8007d08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	0759      	lsls	r1, r3, #29
 8007d0e:	d505      	bpl.n	8007d1c <__sflush_r+0x44>
 8007d10:	6863      	ldr	r3, [r4, #4]
 8007d12:	1ad2      	subs	r2, r2, r3
 8007d14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d16:	b10b      	cbz	r3, 8007d1c <__sflush_r+0x44>
 8007d18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d1a:	1ad2      	subs	r2, r2, r3
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d20:	6a21      	ldr	r1, [r4, #32]
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b0      	blx	r6
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	d106      	bne.n	8007d3a <__sflush_r+0x62>
 8007d2c:	6829      	ldr	r1, [r5, #0]
 8007d2e:	291d      	cmp	r1, #29
 8007d30:	d82b      	bhi.n	8007d8a <__sflush_r+0xb2>
 8007d32:	4a2a      	ldr	r2, [pc, #168]	@ (8007ddc <__sflush_r+0x104>)
 8007d34:	40ca      	lsrs	r2, r1
 8007d36:	07d6      	lsls	r6, r2, #31
 8007d38:	d527      	bpl.n	8007d8a <__sflush_r+0xb2>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	6062      	str	r2, [r4, #4]
 8007d3e:	04d9      	lsls	r1, r3, #19
 8007d40:	6922      	ldr	r2, [r4, #16]
 8007d42:	6022      	str	r2, [r4, #0]
 8007d44:	d504      	bpl.n	8007d50 <__sflush_r+0x78>
 8007d46:	1c42      	adds	r2, r0, #1
 8007d48:	d101      	bne.n	8007d4e <__sflush_r+0x76>
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	b903      	cbnz	r3, 8007d50 <__sflush_r+0x78>
 8007d4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d52:	602f      	str	r7, [r5, #0]
 8007d54:	b1b9      	cbz	r1, 8007d86 <__sflush_r+0xae>
 8007d56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	d002      	beq.n	8007d64 <__sflush_r+0x8c>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f7fe f8f2 	bl	8005f48 <_free_r>
 8007d64:	2300      	movs	r3, #0
 8007d66:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d68:	e00d      	b.n	8007d86 <__sflush_r+0xae>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b0      	blx	r6
 8007d70:	4602      	mov	r2, r0
 8007d72:	1c50      	adds	r0, r2, #1
 8007d74:	d1c9      	bne.n	8007d0a <__sflush_r+0x32>
 8007d76:	682b      	ldr	r3, [r5, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0c6      	beq.n	8007d0a <__sflush_r+0x32>
 8007d7c:	2b1d      	cmp	r3, #29
 8007d7e:	d001      	beq.n	8007d84 <__sflush_r+0xac>
 8007d80:	2b16      	cmp	r3, #22
 8007d82:	d11e      	bne.n	8007dc2 <__sflush_r+0xea>
 8007d84:	602f      	str	r7, [r5, #0]
 8007d86:	2000      	movs	r0, #0
 8007d88:	e022      	b.n	8007dd0 <__sflush_r+0xf8>
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8e:	b21b      	sxth	r3, r3
 8007d90:	e01b      	b.n	8007dca <__sflush_r+0xf2>
 8007d92:	690f      	ldr	r7, [r1, #16]
 8007d94:	2f00      	cmp	r7, #0
 8007d96:	d0f6      	beq.n	8007d86 <__sflush_r+0xae>
 8007d98:	0793      	lsls	r3, r2, #30
 8007d9a:	680e      	ldr	r6, [r1, #0]
 8007d9c:	bf08      	it	eq
 8007d9e:	694b      	ldreq	r3, [r1, #20]
 8007da0:	600f      	str	r7, [r1, #0]
 8007da2:	bf18      	it	ne
 8007da4:	2300      	movne	r3, #0
 8007da6:	eba6 0807 	sub.w	r8, r6, r7
 8007daa:	608b      	str	r3, [r1, #8]
 8007dac:	f1b8 0f00 	cmp.w	r8, #0
 8007db0:	dde9      	ble.n	8007d86 <__sflush_r+0xae>
 8007db2:	6a21      	ldr	r1, [r4, #32]
 8007db4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007db6:	4643      	mov	r3, r8
 8007db8:	463a      	mov	r2, r7
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b0      	blx	r6
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	dc08      	bgt.n	8007dd4 <__sflush_r+0xfc>
 8007dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd4:	4407      	add	r7, r0
 8007dd6:	eba8 0800 	sub.w	r8, r8, r0
 8007dda:	e7e7      	b.n	8007dac <__sflush_r+0xd4>
 8007ddc:	20400001 	.word	0x20400001

08007de0 <_fflush_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	690b      	ldr	r3, [r1, #16]
 8007de4:	4605      	mov	r5, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b913      	cbnz	r3, 8007df0 <_fflush_r+0x10>
 8007dea:	2500      	movs	r5, #0
 8007dec:	4628      	mov	r0, r5
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	b118      	cbz	r0, 8007dfa <_fflush_r+0x1a>
 8007df2:	6a03      	ldr	r3, [r0, #32]
 8007df4:	b90b      	cbnz	r3, 8007dfa <_fflush_r+0x1a>
 8007df6:	f7fd f91b 	bl	8005030 <__sinit>
 8007dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0f3      	beq.n	8007dea <_fflush_r+0xa>
 8007e02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e04:	07d0      	lsls	r0, r2, #31
 8007e06:	d404      	bmi.n	8007e12 <_fflush_r+0x32>
 8007e08:	0599      	lsls	r1, r3, #22
 8007e0a:	d402      	bmi.n	8007e12 <_fflush_r+0x32>
 8007e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e0e:	f7fd fa3a 	bl	8005286 <__retarget_lock_acquire_recursive>
 8007e12:	4628      	mov	r0, r5
 8007e14:	4621      	mov	r1, r4
 8007e16:	f7ff ff5f 	bl	8007cd8 <__sflush_r>
 8007e1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e1c:	07da      	lsls	r2, r3, #31
 8007e1e:	4605      	mov	r5, r0
 8007e20:	d4e4      	bmi.n	8007dec <_fflush_r+0xc>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	059b      	lsls	r3, r3, #22
 8007e26:	d4e1      	bmi.n	8007dec <_fflush_r+0xc>
 8007e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e2a:	f7fd fa2d 	bl	8005288 <__retarget_lock_release_recursive>
 8007e2e:	e7dd      	b.n	8007dec <_fflush_r+0xc>

08007e30 <__swbuf_r>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	460e      	mov	r6, r1
 8007e34:	4614      	mov	r4, r2
 8007e36:	4605      	mov	r5, r0
 8007e38:	b118      	cbz	r0, 8007e42 <__swbuf_r+0x12>
 8007e3a:	6a03      	ldr	r3, [r0, #32]
 8007e3c:	b90b      	cbnz	r3, 8007e42 <__swbuf_r+0x12>
 8007e3e:	f7fd f8f7 	bl	8005030 <__sinit>
 8007e42:	69a3      	ldr	r3, [r4, #24]
 8007e44:	60a3      	str	r3, [r4, #8]
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	071a      	lsls	r2, r3, #28
 8007e4a:	d501      	bpl.n	8007e50 <__swbuf_r+0x20>
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	b943      	cbnz	r3, 8007e62 <__swbuf_r+0x32>
 8007e50:	4621      	mov	r1, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f82a 	bl	8007eac <__swsetup_r>
 8007e58:	b118      	cbz	r0, 8007e62 <__swbuf_r+0x32>
 8007e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e5e:	4638      	mov	r0, r7
 8007e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	1a98      	subs	r0, r3, r2
 8007e68:	6963      	ldr	r3, [r4, #20]
 8007e6a:	b2f6      	uxtb	r6, r6
 8007e6c:	4283      	cmp	r3, r0
 8007e6e:	4637      	mov	r7, r6
 8007e70:	dc05      	bgt.n	8007e7e <__swbuf_r+0x4e>
 8007e72:	4621      	mov	r1, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	f7ff ffb3 	bl	8007de0 <_fflush_r>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d1ed      	bne.n	8007e5a <__swbuf_r+0x2a>
 8007e7e:	68a3      	ldr	r3, [r4, #8]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	60a3      	str	r3, [r4, #8]
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	6022      	str	r2, [r4, #0]
 8007e8a:	701e      	strb	r6, [r3, #0]
 8007e8c:	6962      	ldr	r2, [r4, #20]
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d004      	beq.n	8007e9e <__swbuf_r+0x6e>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	07db      	lsls	r3, r3, #31
 8007e98:	d5e1      	bpl.n	8007e5e <__swbuf_r+0x2e>
 8007e9a:	2e0a      	cmp	r6, #10
 8007e9c:	d1df      	bne.n	8007e5e <__swbuf_r+0x2e>
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f7ff ff9d 	bl	8007de0 <_fflush_r>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d0d9      	beq.n	8007e5e <__swbuf_r+0x2e>
 8007eaa:	e7d6      	b.n	8007e5a <__swbuf_r+0x2a>

08007eac <__swsetup_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4b29      	ldr	r3, [pc, #164]	@ (8007f54 <__swsetup_r+0xa8>)
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	6818      	ldr	r0, [r3, #0]
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	b118      	cbz	r0, 8007ec0 <__swsetup_r+0x14>
 8007eb8:	6a03      	ldr	r3, [r0, #32]
 8007eba:	b90b      	cbnz	r3, 8007ec0 <__swsetup_r+0x14>
 8007ebc:	f7fd f8b8 	bl	8005030 <__sinit>
 8007ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec4:	0719      	lsls	r1, r3, #28
 8007ec6:	d422      	bmi.n	8007f0e <__swsetup_r+0x62>
 8007ec8:	06da      	lsls	r2, r3, #27
 8007eca:	d407      	bmi.n	8007edc <__swsetup_r+0x30>
 8007ecc:	2209      	movs	r2, #9
 8007ece:	602a      	str	r2, [r5, #0]
 8007ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eda:	e033      	b.n	8007f44 <__swsetup_r+0x98>
 8007edc:	0758      	lsls	r0, r3, #29
 8007ede:	d512      	bpl.n	8007f06 <__swsetup_r+0x5a>
 8007ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ee2:	b141      	cbz	r1, 8007ef6 <__swsetup_r+0x4a>
 8007ee4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ee8:	4299      	cmp	r1, r3
 8007eea:	d002      	beq.n	8007ef2 <__swsetup_r+0x46>
 8007eec:	4628      	mov	r0, r5
 8007eee:	f7fe f82b 	bl	8005f48 <_free_r>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007efc:	81a3      	strh	r3, [r4, #12]
 8007efe:	2300      	movs	r3, #0
 8007f00:	6063      	str	r3, [r4, #4]
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	f043 0308 	orr.w	r3, r3, #8
 8007f0c:	81a3      	strh	r3, [r4, #12]
 8007f0e:	6923      	ldr	r3, [r4, #16]
 8007f10:	b94b      	cbnz	r3, 8007f26 <__swsetup_r+0x7a>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f1c:	d003      	beq.n	8007f26 <__swsetup_r+0x7a>
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 fc5d 	bl	80087e0 <__smakebuf_r>
 8007f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f2a:	f013 0201 	ands.w	r2, r3, #1
 8007f2e:	d00a      	beq.n	8007f46 <__swsetup_r+0x9a>
 8007f30:	2200      	movs	r2, #0
 8007f32:	60a2      	str	r2, [r4, #8]
 8007f34:	6962      	ldr	r2, [r4, #20]
 8007f36:	4252      	negs	r2, r2
 8007f38:	61a2      	str	r2, [r4, #24]
 8007f3a:	6922      	ldr	r2, [r4, #16]
 8007f3c:	b942      	cbnz	r2, 8007f50 <__swsetup_r+0xa4>
 8007f3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f42:	d1c5      	bne.n	8007ed0 <__swsetup_r+0x24>
 8007f44:	bd38      	pop	{r3, r4, r5, pc}
 8007f46:	0799      	lsls	r1, r3, #30
 8007f48:	bf58      	it	pl
 8007f4a:	6962      	ldrpl	r2, [r4, #20]
 8007f4c:	60a2      	str	r2, [r4, #8]
 8007f4e:	e7f4      	b.n	8007f3a <__swsetup_r+0x8e>
 8007f50:	2000      	movs	r0, #0
 8007f52:	e7f7      	b.n	8007f44 <__swsetup_r+0x98>
 8007f54:	2000001c 	.word	0x2000001c

08007f58 <memmove>:
 8007f58:	4288      	cmp	r0, r1
 8007f5a:	b510      	push	{r4, lr}
 8007f5c:	eb01 0402 	add.w	r4, r1, r2
 8007f60:	d902      	bls.n	8007f68 <memmove+0x10>
 8007f62:	4284      	cmp	r4, r0
 8007f64:	4623      	mov	r3, r4
 8007f66:	d807      	bhi.n	8007f78 <memmove+0x20>
 8007f68:	1e43      	subs	r3, r0, #1
 8007f6a:	42a1      	cmp	r1, r4
 8007f6c:	d008      	beq.n	8007f80 <memmove+0x28>
 8007f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f76:	e7f8      	b.n	8007f6a <memmove+0x12>
 8007f78:	4402      	add	r2, r0
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	428a      	cmp	r2, r1
 8007f7e:	d100      	bne.n	8007f82 <memmove+0x2a>
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f8a:	e7f7      	b.n	8007f7c <memmove+0x24>

08007f8c <strncmp>:
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	b16a      	cbz	r2, 8007fac <strncmp+0x20>
 8007f90:	3901      	subs	r1, #1
 8007f92:	1884      	adds	r4, r0, r2
 8007f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d103      	bne.n	8007fa8 <strncmp+0x1c>
 8007fa0:	42a0      	cmp	r0, r4
 8007fa2:	d001      	beq.n	8007fa8 <strncmp+0x1c>
 8007fa4:	2a00      	cmp	r2, #0
 8007fa6:	d1f5      	bne.n	8007f94 <strncmp+0x8>
 8007fa8:	1ad0      	subs	r0, r2, r3
 8007faa:	bd10      	pop	{r4, pc}
 8007fac:	4610      	mov	r0, r2
 8007fae:	e7fc      	b.n	8007faa <strncmp+0x1e>

08007fb0 <_sbrk_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d06      	ldr	r5, [pc, #24]	@ (8007fcc <_sbrk_r+0x1c>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7fa f8f0 	bl	80021a0 <_sbrk>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_sbrk_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_sbrk_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	200003f0 	.word	0x200003f0

08007fd0 <memcpy>:
 8007fd0:	440a      	add	r2, r1
 8007fd2:	4291      	cmp	r1, r2
 8007fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fd8:	d100      	bne.n	8007fdc <memcpy+0xc>
 8007fda:	4770      	bx	lr
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fe6:	4291      	cmp	r1, r2
 8007fe8:	d1f9      	bne.n	8007fde <memcpy+0xe>
 8007fea:	bd10      	pop	{r4, pc}
 8007fec:	0000      	movs	r0, r0
	...

08007ff0 <nan>:
 8007ff0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ff8 <nan+0x8>
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	00000000 	.word	0x00000000
 8007ffc:	7ff80000 	.word	0x7ff80000

08008000 <__assert_func>:
 8008000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008002:	4614      	mov	r4, r2
 8008004:	461a      	mov	r2, r3
 8008006:	4b09      	ldr	r3, [pc, #36]	@ (800802c <__assert_func+0x2c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4605      	mov	r5, r0
 800800c:	68d8      	ldr	r0, [r3, #12]
 800800e:	b14c      	cbz	r4, 8008024 <__assert_func+0x24>
 8008010:	4b07      	ldr	r3, [pc, #28]	@ (8008030 <__assert_func+0x30>)
 8008012:	9100      	str	r1, [sp, #0]
 8008014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008018:	4906      	ldr	r1, [pc, #24]	@ (8008034 <__assert_func+0x34>)
 800801a:	462b      	mov	r3, r5
 800801c:	f000 fba8 	bl	8008770 <fiprintf>
 8008020:	f000 fc3c 	bl	800889c <abort>
 8008024:	4b04      	ldr	r3, [pc, #16]	@ (8008038 <__assert_func+0x38>)
 8008026:	461c      	mov	r4, r3
 8008028:	e7f3      	b.n	8008012 <__assert_func+0x12>
 800802a:	bf00      	nop
 800802c:	2000001c 	.word	0x2000001c
 8008030:	0800a572 	.word	0x0800a572
 8008034:	0800a57f 	.word	0x0800a57f
 8008038:	0800a5ad 	.word	0x0800a5ad

0800803c <_calloc_r>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	fba1 5402 	umull	r5, r4, r1, r2
 8008042:	b934      	cbnz	r4, 8008052 <_calloc_r+0x16>
 8008044:	4629      	mov	r1, r5
 8008046:	f7fd fff3 	bl	8006030 <_malloc_r>
 800804a:	4606      	mov	r6, r0
 800804c:	b928      	cbnz	r0, 800805a <_calloc_r+0x1e>
 800804e:	4630      	mov	r0, r6
 8008050:	bd70      	pop	{r4, r5, r6, pc}
 8008052:	220c      	movs	r2, #12
 8008054:	6002      	str	r2, [r0, #0]
 8008056:	2600      	movs	r6, #0
 8008058:	e7f9      	b.n	800804e <_calloc_r+0x12>
 800805a:	462a      	mov	r2, r5
 800805c:	4621      	mov	r1, r4
 800805e:	f7fd f894 	bl	800518a <memset>
 8008062:	e7f4      	b.n	800804e <_calloc_r+0x12>

08008064 <rshift>:
 8008064:	6903      	ldr	r3, [r0, #16]
 8008066:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800806a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800806e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008072:	f100 0414 	add.w	r4, r0, #20
 8008076:	dd45      	ble.n	8008104 <rshift+0xa0>
 8008078:	f011 011f 	ands.w	r1, r1, #31
 800807c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008080:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008084:	d10c      	bne.n	80080a0 <rshift+0x3c>
 8008086:	f100 0710 	add.w	r7, r0, #16
 800808a:	4629      	mov	r1, r5
 800808c:	42b1      	cmp	r1, r6
 800808e:	d334      	bcc.n	80080fa <rshift+0x96>
 8008090:	1a9b      	subs	r3, r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	1eea      	subs	r2, r5, #3
 8008096:	4296      	cmp	r6, r2
 8008098:	bf38      	it	cc
 800809a:	2300      	movcc	r3, #0
 800809c:	4423      	add	r3, r4
 800809e:	e015      	b.n	80080cc <rshift+0x68>
 80080a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80080a4:	f1c1 0820 	rsb	r8, r1, #32
 80080a8:	40cf      	lsrs	r7, r1
 80080aa:	f105 0e04 	add.w	lr, r5, #4
 80080ae:	46a1      	mov	r9, r4
 80080b0:	4576      	cmp	r6, lr
 80080b2:	46f4      	mov	ip, lr
 80080b4:	d815      	bhi.n	80080e2 <rshift+0x7e>
 80080b6:	1a9a      	subs	r2, r3, r2
 80080b8:	0092      	lsls	r2, r2, #2
 80080ba:	3a04      	subs	r2, #4
 80080bc:	3501      	adds	r5, #1
 80080be:	42ae      	cmp	r6, r5
 80080c0:	bf38      	it	cc
 80080c2:	2200      	movcc	r2, #0
 80080c4:	18a3      	adds	r3, r4, r2
 80080c6:	50a7      	str	r7, [r4, r2]
 80080c8:	b107      	cbz	r7, 80080cc <rshift+0x68>
 80080ca:	3304      	adds	r3, #4
 80080cc:	1b1a      	subs	r2, r3, r4
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80080d4:	bf08      	it	eq
 80080d6:	2300      	moveq	r3, #0
 80080d8:	6102      	str	r2, [r0, #16]
 80080da:	bf08      	it	eq
 80080dc:	6143      	streq	r3, [r0, #20]
 80080de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080e2:	f8dc c000 	ldr.w	ip, [ip]
 80080e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80080ea:	ea4c 0707 	orr.w	r7, ip, r7
 80080ee:	f849 7b04 	str.w	r7, [r9], #4
 80080f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080f6:	40cf      	lsrs	r7, r1
 80080f8:	e7da      	b.n	80080b0 <rshift+0x4c>
 80080fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80080fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008102:	e7c3      	b.n	800808c <rshift+0x28>
 8008104:	4623      	mov	r3, r4
 8008106:	e7e1      	b.n	80080cc <rshift+0x68>

08008108 <__hexdig_fun>:
 8008108:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800810c:	2b09      	cmp	r3, #9
 800810e:	d802      	bhi.n	8008116 <__hexdig_fun+0xe>
 8008110:	3820      	subs	r0, #32
 8008112:	b2c0      	uxtb	r0, r0
 8008114:	4770      	bx	lr
 8008116:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800811a:	2b05      	cmp	r3, #5
 800811c:	d801      	bhi.n	8008122 <__hexdig_fun+0x1a>
 800811e:	3847      	subs	r0, #71	@ 0x47
 8008120:	e7f7      	b.n	8008112 <__hexdig_fun+0xa>
 8008122:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008126:	2b05      	cmp	r3, #5
 8008128:	d801      	bhi.n	800812e <__hexdig_fun+0x26>
 800812a:	3827      	subs	r0, #39	@ 0x27
 800812c:	e7f1      	b.n	8008112 <__hexdig_fun+0xa>
 800812e:	2000      	movs	r0, #0
 8008130:	4770      	bx	lr
	...

08008134 <__gethex>:
 8008134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008138:	b085      	sub	sp, #20
 800813a:	468a      	mov	sl, r1
 800813c:	9302      	str	r3, [sp, #8]
 800813e:	680b      	ldr	r3, [r1, #0]
 8008140:	9001      	str	r0, [sp, #4]
 8008142:	4690      	mov	r8, r2
 8008144:	1c9c      	adds	r4, r3, #2
 8008146:	46a1      	mov	r9, r4
 8008148:	f814 0b01 	ldrb.w	r0, [r4], #1
 800814c:	2830      	cmp	r0, #48	@ 0x30
 800814e:	d0fa      	beq.n	8008146 <__gethex+0x12>
 8008150:	eba9 0303 	sub.w	r3, r9, r3
 8008154:	f1a3 0b02 	sub.w	fp, r3, #2
 8008158:	f7ff ffd6 	bl	8008108 <__hexdig_fun>
 800815c:	4605      	mov	r5, r0
 800815e:	2800      	cmp	r0, #0
 8008160:	d168      	bne.n	8008234 <__gethex+0x100>
 8008162:	49a0      	ldr	r1, [pc, #640]	@ (80083e4 <__gethex+0x2b0>)
 8008164:	2201      	movs	r2, #1
 8008166:	4648      	mov	r0, r9
 8008168:	f7ff ff10 	bl	8007f8c <strncmp>
 800816c:	4607      	mov	r7, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	d167      	bne.n	8008242 <__gethex+0x10e>
 8008172:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008176:	4626      	mov	r6, r4
 8008178:	f7ff ffc6 	bl	8008108 <__hexdig_fun>
 800817c:	2800      	cmp	r0, #0
 800817e:	d062      	beq.n	8008246 <__gethex+0x112>
 8008180:	4623      	mov	r3, r4
 8008182:	7818      	ldrb	r0, [r3, #0]
 8008184:	2830      	cmp	r0, #48	@ 0x30
 8008186:	4699      	mov	r9, r3
 8008188:	f103 0301 	add.w	r3, r3, #1
 800818c:	d0f9      	beq.n	8008182 <__gethex+0x4e>
 800818e:	f7ff ffbb 	bl	8008108 <__hexdig_fun>
 8008192:	fab0 f580 	clz	r5, r0
 8008196:	096d      	lsrs	r5, r5, #5
 8008198:	f04f 0b01 	mov.w	fp, #1
 800819c:	464a      	mov	r2, r9
 800819e:	4616      	mov	r6, r2
 80081a0:	3201      	adds	r2, #1
 80081a2:	7830      	ldrb	r0, [r6, #0]
 80081a4:	f7ff ffb0 	bl	8008108 <__hexdig_fun>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d1f8      	bne.n	800819e <__gethex+0x6a>
 80081ac:	498d      	ldr	r1, [pc, #564]	@ (80083e4 <__gethex+0x2b0>)
 80081ae:	2201      	movs	r2, #1
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff feeb 	bl	8007f8c <strncmp>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d13f      	bne.n	800823a <__gethex+0x106>
 80081ba:	b944      	cbnz	r4, 80081ce <__gethex+0x9a>
 80081bc:	1c74      	adds	r4, r6, #1
 80081be:	4622      	mov	r2, r4
 80081c0:	4616      	mov	r6, r2
 80081c2:	3201      	adds	r2, #1
 80081c4:	7830      	ldrb	r0, [r6, #0]
 80081c6:	f7ff ff9f 	bl	8008108 <__hexdig_fun>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d1f8      	bne.n	80081c0 <__gethex+0x8c>
 80081ce:	1ba4      	subs	r4, r4, r6
 80081d0:	00a7      	lsls	r7, r4, #2
 80081d2:	7833      	ldrb	r3, [r6, #0]
 80081d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80081d8:	2b50      	cmp	r3, #80	@ 0x50
 80081da:	d13e      	bne.n	800825a <__gethex+0x126>
 80081dc:	7873      	ldrb	r3, [r6, #1]
 80081de:	2b2b      	cmp	r3, #43	@ 0x2b
 80081e0:	d033      	beq.n	800824a <__gethex+0x116>
 80081e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80081e4:	d034      	beq.n	8008250 <__gethex+0x11c>
 80081e6:	1c71      	adds	r1, r6, #1
 80081e8:	2400      	movs	r4, #0
 80081ea:	7808      	ldrb	r0, [r1, #0]
 80081ec:	f7ff ff8c 	bl	8008108 <__hexdig_fun>
 80081f0:	1e43      	subs	r3, r0, #1
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b18      	cmp	r3, #24
 80081f6:	d830      	bhi.n	800825a <__gethex+0x126>
 80081f8:	f1a0 0210 	sub.w	r2, r0, #16
 80081fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008200:	f7ff ff82 	bl	8008108 <__hexdig_fun>
 8008204:	f100 3cff 	add.w	ip, r0, #4294967295
 8008208:	fa5f fc8c 	uxtb.w	ip, ip
 800820c:	f1bc 0f18 	cmp.w	ip, #24
 8008210:	f04f 030a 	mov.w	r3, #10
 8008214:	d91e      	bls.n	8008254 <__gethex+0x120>
 8008216:	b104      	cbz	r4, 800821a <__gethex+0xe6>
 8008218:	4252      	negs	r2, r2
 800821a:	4417      	add	r7, r2
 800821c:	f8ca 1000 	str.w	r1, [sl]
 8008220:	b1ed      	cbz	r5, 800825e <__gethex+0x12a>
 8008222:	f1bb 0f00 	cmp.w	fp, #0
 8008226:	bf0c      	ite	eq
 8008228:	2506      	moveq	r5, #6
 800822a:	2500      	movne	r5, #0
 800822c:	4628      	mov	r0, r5
 800822e:	b005      	add	sp, #20
 8008230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	2500      	movs	r5, #0
 8008236:	462c      	mov	r4, r5
 8008238:	e7b0      	b.n	800819c <__gethex+0x68>
 800823a:	2c00      	cmp	r4, #0
 800823c:	d1c7      	bne.n	80081ce <__gethex+0x9a>
 800823e:	4627      	mov	r7, r4
 8008240:	e7c7      	b.n	80081d2 <__gethex+0x9e>
 8008242:	464e      	mov	r6, r9
 8008244:	462f      	mov	r7, r5
 8008246:	2501      	movs	r5, #1
 8008248:	e7c3      	b.n	80081d2 <__gethex+0x9e>
 800824a:	2400      	movs	r4, #0
 800824c:	1cb1      	adds	r1, r6, #2
 800824e:	e7cc      	b.n	80081ea <__gethex+0xb6>
 8008250:	2401      	movs	r4, #1
 8008252:	e7fb      	b.n	800824c <__gethex+0x118>
 8008254:	fb03 0002 	mla	r0, r3, r2, r0
 8008258:	e7ce      	b.n	80081f8 <__gethex+0xc4>
 800825a:	4631      	mov	r1, r6
 800825c:	e7de      	b.n	800821c <__gethex+0xe8>
 800825e:	eba6 0309 	sub.w	r3, r6, r9
 8008262:	3b01      	subs	r3, #1
 8008264:	4629      	mov	r1, r5
 8008266:	2b07      	cmp	r3, #7
 8008268:	dc0a      	bgt.n	8008280 <__gethex+0x14c>
 800826a:	9801      	ldr	r0, [sp, #4]
 800826c:	f7fd ff6c 	bl	8006148 <_Balloc>
 8008270:	4604      	mov	r4, r0
 8008272:	b940      	cbnz	r0, 8008286 <__gethex+0x152>
 8008274:	4b5c      	ldr	r3, [pc, #368]	@ (80083e8 <__gethex+0x2b4>)
 8008276:	4602      	mov	r2, r0
 8008278:	21e4      	movs	r1, #228	@ 0xe4
 800827a:	485c      	ldr	r0, [pc, #368]	@ (80083ec <__gethex+0x2b8>)
 800827c:	f7ff fec0 	bl	8008000 <__assert_func>
 8008280:	3101      	adds	r1, #1
 8008282:	105b      	asrs	r3, r3, #1
 8008284:	e7ef      	b.n	8008266 <__gethex+0x132>
 8008286:	f100 0a14 	add.w	sl, r0, #20
 800828a:	2300      	movs	r3, #0
 800828c:	4655      	mov	r5, sl
 800828e:	469b      	mov	fp, r3
 8008290:	45b1      	cmp	r9, r6
 8008292:	d337      	bcc.n	8008304 <__gethex+0x1d0>
 8008294:	f845 bb04 	str.w	fp, [r5], #4
 8008298:	eba5 050a 	sub.w	r5, r5, sl
 800829c:	10ad      	asrs	r5, r5, #2
 800829e:	6125      	str	r5, [r4, #16]
 80082a0:	4658      	mov	r0, fp
 80082a2:	f7fe f843 	bl	800632c <__hi0bits>
 80082a6:	016d      	lsls	r5, r5, #5
 80082a8:	f8d8 6000 	ldr.w	r6, [r8]
 80082ac:	1a2d      	subs	r5, r5, r0
 80082ae:	42b5      	cmp	r5, r6
 80082b0:	dd54      	ble.n	800835c <__gethex+0x228>
 80082b2:	1bad      	subs	r5, r5, r6
 80082b4:	4629      	mov	r1, r5
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7fe fbcf 	bl	8006a5a <__any_on>
 80082bc:	4681      	mov	r9, r0
 80082be:	b178      	cbz	r0, 80082e0 <__gethex+0x1ac>
 80082c0:	1e6b      	subs	r3, r5, #1
 80082c2:	1159      	asrs	r1, r3, #5
 80082c4:	f003 021f 	and.w	r2, r3, #31
 80082c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80082cc:	f04f 0901 	mov.w	r9, #1
 80082d0:	fa09 f202 	lsl.w	r2, r9, r2
 80082d4:	420a      	tst	r2, r1
 80082d6:	d003      	beq.n	80082e0 <__gethex+0x1ac>
 80082d8:	454b      	cmp	r3, r9
 80082da:	dc36      	bgt.n	800834a <__gethex+0x216>
 80082dc:	f04f 0902 	mov.w	r9, #2
 80082e0:	4629      	mov	r1, r5
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7ff febe 	bl	8008064 <rshift>
 80082e8:	442f      	add	r7, r5
 80082ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082ee:	42bb      	cmp	r3, r7
 80082f0:	da42      	bge.n	8008378 <__gethex+0x244>
 80082f2:	9801      	ldr	r0, [sp, #4]
 80082f4:	4621      	mov	r1, r4
 80082f6:	f7fd ff67 	bl	80061c8 <_Bfree>
 80082fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082fc:	2300      	movs	r3, #0
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	25a3      	movs	r5, #163	@ 0xa3
 8008302:	e793      	b.n	800822c <__gethex+0xf8>
 8008304:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008308:	2a2e      	cmp	r2, #46	@ 0x2e
 800830a:	d012      	beq.n	8008332 <__gethex+0x1fe>
 800830c:	2b20      	cmp	r3, #32
 800830e:	d104      	bne.n	800831a <__gethex+0x1e6>
 8008310:	f845 bb04 	str.w	fp, [r5], #4
 8008314:	f04f 0b00 	mov.w	fp, #0
 8008318:	465b      	mov	r3, fp
 800831a:	7830      	ldrb	r0, [r6, #0]
 800831c:	9303      	str	r3, [sp, #12]
 800831e:	f7ff fef3 	bl	8008108 <__hexdig_fun>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	f000 000f 	and.w	r0, r0, #15
 8008328:	4098      	lsls	r0, r3
 800832a:	ea4b 0b00 	orr.w	fp, fp, r0
 800832e:	3304      	adds	r3, #4
 8008330:	e7ae      	b.n	8008290 <__gethex+0x15c>
 8008332:	45b1      	cmp	r9, r6
 8008334:	d8ea      	bhi.n	800830c <__gethex+0x1d8>
 8008336:	492b      	ldr	r1, [pc, #172]	@ (80083e4 <__gethex+0x2b0>)
 8008338:	9303      	str	r3, [sp, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	4630      	mov	r0, r6
 800833e:	f7ff fe25 	bl	8007f8c <strncmp>
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	2800      	cmp	r0, #0
 8008346:	d1e1      	bne.n	800830c <__gethex+0x1d8>
 8008348:	e7a2      	b.n	8008290 <__gethex+0x15c>
 800834a:	1ea9      	subs	r1, r5, #2
 800834c:	4620      	mov	r0, r4
 800834e:	f7fe fb84 	bl	8006a5a <__any_on>
 8008352:	2800      	cmp	r0, #0
 8008354:	d0c2      	beq.n	80082dc <__gethex+0x1a8>
 8008356:	f04f 0903 	mov.w	r9, #3
 800835a:	e7c1      	b.n	80082e0 <__gethex+0x1ac>
 800835c:	da09      	bge.n	8008372 <__gethex+0x23e>
 800835e:	1b75      	subs	r5, r6, r5
 8008360:	4621      	mov	r1, r4
 8008362:	9801      	ldr	r0, [sp, #4]
 8008364:	462a      	mov	r2, r5
 8008366:	f7fe f93f 	bl	80065e8 <__lshift>
 800836a:	1b7f      	subs	r7, r7, r5
 800836c:	4604      	mov	r4, r0
 800836e:	f100 0a14 	add.w	sl, r0, #20
 8008372:	f04f 0900 	mov.w	r9, #0
 8008376:	e7b8      	b.n	80082ea <__gethex+0x1b6>
 8008378:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800837c:	42bd      	cmp	r5, r7
 800837e:	dd6f      	ble.n	8008460 <__gethex+0x32c>
 8008380:	1bed      	subs	r5, r5, r7
 8008382:	42ae      	cmp	r6, r5
 8008384:	dc34      	bgt.n	80083f0 <__gethex+0x2bc>
 8008386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d022      	beq.n	80083d4 <__gethex+0x2a0>
 800838e:	2b03      	cmp	r3, #3
 8008390:	d024      	beq.n	80083dc <__gethex+0x2a8>
 8008392:	2b01      	cmp	r3, #1
 8008394:	d115      	bne.n	80083c2 <__gethex+0x28e>
 8008396:	42ae      	cmp	r6, r5
 8008398:	d113      	bne.n	80083c2 <__gethex+0x28e>
 800839a:	2e01      	cmp	r6, #1
 800839c:	d10b      	bne.n	80083b6 <__gethex+0x282>
 800839e:	9a02      	ldr	r2, [sp, #8]
 80083a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	2301      	movs	r3, #1
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	f8ca 3000 	str.w	r3, [sl]
 80083ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083b0:	2562      	movs	r5, #98	@ 0x62
 80083b2:	601c      	str	r4, [r3, #0]
 80083b4:	e73a      	b.n	800822c <__gethex+0xf8>
 80083b6:	1e71      	subs	r1, r6, #1
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7fe fb4e 	bl	8006a5a <__any_on>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d1ed      	bne.n	800839e <__gethex+0x26a>
 80083c2:	9801      	ldr	r0, [sp, #4]
 80083c4:	4621      	mov	r1, r4
 80083c6:	f7fd feff 	bl	80061c8 <_Bfree>
 80083ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083cc:	2300      	movs	r3, #0
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	2550      	movs	r5, #80	@ 0x50
 80083d2:	e72b      	b.n	800822c <__gethex+0xf8>
 80083d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f3      	bne.n	80083c2 <__gethex+0x28e>
 80083da:	e7e0      	b.n	800839e <__gethex+0x26a>
 80083dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1dd      	bne.n	800839e <__gethex+0x26a>
 80083e2:	e7ee      	b.n	80083c2 <__gethex+0x28e>
 80083e4:	0800a557 	.word	0x0800a557
 80083e8:	0800a4ed 	.word	0x0800a4ed
 80083ec:	0800a5ae 	.word	0x0800a5ae
 80083f0:	1e6f      	subs	r7, r5, #1
 80083f2:	f1b9 0f00 	cmp.w	r9, #0
 80083f6:	d130      	bne.n	800845a <__gethex+0x326>
 80083f8:	b127      	cbz	r7, 8008404 <__gethex+0x2d0>
 80083fa:	4639      	mov	r1, r7
 80083fc:	4620      	mov	r0, r4
 80083fe:	f7fe fb2c 	bl	8006a5a <__any_on>
 8008402:	4681      	mov	r9, r0
 8008404:	117a      	asrs	r2, r7, #5
 8008406:	2301      	movs	r3, #1
 8008408:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800840c:	f007 071f 	and.w	r7, r7, #31
 8008410:	40bb      	lsls	r3, r7
 8008412:	4213      	tst	r3, r2
 8008414:	4629      	mov	r1, r5
 8008416:	4620      	mov	r0, r4
 8008418:	bf18      	it	ne
 800841a:	f049 0902 	orrne.w	r9, r9, #2
 800841e:	f7ff fe21 	bl	8008064 <rshift>
 8008422:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008426:	1b76      	subs	r6, r6, r5
 8008428:	2502      	movs	r5, #2
 800842a:	f1b9 0f00 	cmp.w	r9, #0
 800842e:	d047      	beq.n	80084c0 <__gethex+0x38c>
 8008430:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008434:	2b02      	cmp	r3, #2
 8008436:	d015      	beq.n	8008464 <__gethex+0x330>
 8008438:	2b03      	cmp	r3, #3
 800843a:	d017      	beq.n	800846c <__gethex+0x338>
 800843c:	2b01      	cmp	r3, #1
 800843e:	d109      	bne.n	8008454 <__gethex+0x320>
 8008440:	f019 0f02 	tst.w	r9, #2
 8008444:	d006      	beq.n	8008454 <__gethex+0x320>
 8008446:	f8da 3000 	ldr.w	r3, [sl]
 800844a:	ea49 0903 	orr.w	r9, r9, r3
 800844e:	f019 0f01 	tst.w	r9, #1
 8008452:	d10e      	bne.n	8008472 <__gethex+0x33e>
 8008454:	f045 0510 	orr.w	r5, r5, #16
 8008458:	e032      	b.n	80084c0 <__gethex+0x38c>
 800845a:	f04f 0901 	mov.w	r9, #1
 800845e:	e7d1      	b.n	8008404 <__gethex+0x2d0>
 8008460:	2501      	movs	r5, #1
 8008462:	e7e2      	b.n	800842a <__gethex+0x2f6>
 8008464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008466:	f1c3 0301 	rsb	r3, r3, #1
 800846a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800846c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0f0      	beq.n	8008454 <__gethex+0x320>
 8008472:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008476:	f104 0314 	add.w	r3, r4, #20
 800847a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800847e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008482:	f04f 0c00 	mov.w	ip, #0
 8008486:	4618      	mov	r0, r3
 8008488:	f853 2b04 	ldr.w	r2, [r3], #4
 800848c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008490:	d01b      	beq.n	80084ca <__gethex+0x396>
 8008492:	3201      	adds	r2, #1
 8008494:	6002      	str	r2, [r0, #0]
 8008496:	2d02      	cmp	r5, #2
 8008498:	f104 0314 	add.w	r3, r4, #20
 800849c:	d13c      	bne.n	8008518 <__gethex+0x3e4>
 800849e:	f8d8 2000 	ldr.w	r2, [r8]
 80084a2:	3a01      	subs	r2, #1
 80084a4:	42b2      	cmp	r2, r6
 80084a6:	d109      	bne.n	80084bc <__gethex+0x388>
 80084a8:	1171      	asrs	r1, r6, #5
 80084aa:	2201      	movs	r2, #1
 80084ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084b0:	f006 061f 	and.w	r6, r6, #31
 80084b4:	fa02 f606 	lsl.w	r6, r2, r6
 80084b8:	421e      	tst	r6, r3
 80084ba:	d13a      	bne.n	8008532 <__gethex+0x3fe>
 80084bc:	f045 0520 	orr.w	r5, r5, #32
 80084c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084c2:	601c      	str	r4, [r3, #0]
 80084c4:	9b02      	ldr	r3, [sp, #8]
 80084c6:	601f      	str	r7, [r3, #0]
 80084c8:	e6b0      	b.n	800822c <__gethex+0xf8>
 80084ca:	4299      	cmp	r1, r3
 80084cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80084d0:	d8d9      	bhi.n	8008486 <__gethex+0x352>
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	459b      	cmp	fp, r3
 80084d6:	db17      	blt.n	8008508 <__gethex+0x3d4>
 80084d8:	6861      	ldr	r1, [r4, #4]
 80084da:	9801      	ldr	r0, [sp, #4]
 80084dc:	3101      	adds	r1, #1
 80084de:	f7fd fe33 	bl	8006148 <_Balloc>
 80084e2:	4681      	mov	r9, r0
 80084e4:	b918      	cbnz	r0, 80084ee <__gethex+0x3ba>
 80084e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008550 <__gethex+0x41c>)
 80084e8:	4602      	mov	r2, r0
 80084ea:	2184      	movs	r1, #132	@ 0x84
 80084ec:	e6c5      	b.n	800827a <__gethex+0x146>
 80084ee:	6922      	ldr	r2, [r4, #16]
 80084f0:	3202      	adds	r2, #2
 80084f2:	f104 010c 	add.w	r1, r4, #12
 80084f6:	0092      	lsls	r2, r2, #2
 80084f8:	300c      	adds	r0, #12
 80084fa:	f7ff fd69 	bl	8007fd0 <memcpy>
 80084fe:	4621      	mov	r1, r4
 8008500:	9801      	ldr	r0, [sp, #4]
 8008502:	f7fd fe61 	bl	80061c8 <_Bfree>
 8008506:	464c      	mov	r4, r9
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008510:	6122      	str	r2, [r4, #16]
 8008512:	2201      	movs	r2, #1
 8008514:	615a      	str	r2, [r3, #20]
 8008516:	e7be      	b.n	8008496 <__gethex+0x362>
 8008518:	6922      	ldr	r2, [r4, #16]
 800851a:	455a      	cmp	r2, fp
 800851c:	dd0b      	ble.n	8008536 <__gethex+0x402>
 800851e:	2101      	movs	r1, #1
 8008520:	4620      	mov	r0, r4
 8008522:	f7ff fd9f 	bl	8008064 <rshift>
 8008526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800852a:	3701      	adds	r7, #1
 800852c:	42bb      	cmp	r3, r7
 800852e:	f6ff aee0 	blt.w	80082f2 <__gethex+0x1be>
 8008532:	2501      	movs	r5, #1
 8008534:	e7c2      	b.n	80084bc <__gethex+0x388>
 8008536:	f016 061f 	ands.w	r6, r6, #31
 800853a:	d0fa      	beq.n	8008532 <__gethex+0x3fe>
 800853c:	4453      	add	r3, sl
 800853e:	f1c6 0620 	rsb	r6, r6, #32
 8008542:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008546:	f7fd fef1 	bl	800632c <__hi0bits>
 800854a:	42b0      	cmp	r0, r6
 800854c:	dbe7      	blt.n	800851e <__gethex+0x3ea>
 800854e:	e7f0      	b.n	8008532 <__gethex+0x3fe>
 8008550:	0800a4ed 	.word	0x0800a4ed

08008554 <L_shift>:
 8008554:	f1c2 0208 	rsb	r2, r2, #8
 8008558:	0092      	lsls	r2, r2, #2
 800855a:	b570      	push	{r4, r5, r6, lr}
 800855c:	f1c2 0620 	rsb	r6, r2, #32
 8008560:	6843      	ldr	r3, [r0, #4]
 8008562:	6804      	ldr	r4, [r0, #0]
 8008564:	fa03 f506 	lsl.w	r5, r3, r6
 8008568:	432c      	orrs	r4, r5
 800856a:	40d3      	lsrs	r3, r2
 800856c:	6004      	str	r4, [r0, #0]
 800856e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008572:	4288      	cmp	r0, r1
 8008574:	d3f4      	bcc.n	8008560 <L_shift+0xc>
 8008576:	bd70      	pop	{r4, r5, r6, pc}

08008578 <__match>:
 8008578:	b530      	push	{r4, r5, lr}
 800857a:	6803      	ldr	r3, [r0, #0]
 800857c:	3301      	adds	r3, #1
 800857e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008582:	b914      	cbnz	r4, 800858a <__match+0x12>
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	2001      	movs	r0, #1
 8008588:	bd30      	pop	{r4, r5, pc}
 800858a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800858e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008592:	2d19      	cmp	r5, #25
 8008594:	bf98      	it	ls
 8008596:	3220      	addls	r2, #32
 8008598:	42a2      	cmp	r2, r4
 800859a:	d0f0      	beq.n	800857e <__match+0x6>
 800859c:	2000      	movs	r0, #0
 800859e:	e7f3      	b.n	8008588 <__match+0x10>

080085a0 <__hexnan>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	680b      	ldr	r3, [r1, #0]
 80085a6:	6801      	ldr	r1, [r0, #0]
 80085a8:	115e      	asrs	r6, r3, #5
 80085aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80085ae:	f013 031f 	ands.w	r3, r3, #31
 80085b2:	b087      	sub	sp, #28
 80085b4:	bf18      	it	ne
 80085b6:	3604      	addne	r6, #4
 80085b8:	2500      	movs	r5, #0
 80085ba:	1f37      	subs	r7, r6, #4
 80085bc:	4682      	mov	sl, r0
 80085be:	4690      	mov	r8, r2
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80085c6:	46b9      	mov	r9, r7
 80085c8:	463c      	mov	r4, r7
 80085ca:	9502      	str	r5, [sp, #8]
 80085cc:	46ab      	mov	fp, r5
 80085ce:	784a      	ldrb	r2, [r1, #1]
 80085d0:	1c4b      	adds	r3, r1, #1
 80085d2:	9303      	str	r3, [sp, #12]
 80085d4:	b342      	cbz	r2, 8008628 <__hexnan+0x88>
 80085d6:	4610      	mov	r0, r2
 80085d8:	9105      	str	r1, [sp, #20]
 80085da:	9204      	str	r2, [sp, #16]
 80085dc:	f7ff fd94 	bl	8008108 <__hexdig_fun>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d151      	bne.n	8008688 <__hexnan+0xe8>
 80085e4:	9a04      	ldr	r2, [sp, #16]
 80085e6:	9905      	ldr	r1, [sp, #20]
 80085e8:	2a20      	cmp	r2, #32
 80085ea:	d818      	bhi.n	800861e <__hexnan+0x7e>
 80085ec:	9b02      	ldr	r3, [sp, #8]
 80085ee:	459b      	cmp	fp, r3
 80085f0:	dd13      	ble.n	800861a <__hexnan+0x7a>
 80085f2:	454c      	cmp	r4, r9
 80085f4:	d206      	bcs.n	8008604 <__hexnan+0x64>
 80085f6:	2d07      	cmp	r5, #7
 80085f8:	dc04      	bgt.n	8008604 <__hexnan+0x64>
 80085fa:	462a      	mov	r2, r5
 80085fc:	4649      	mov	r1, r9
 80085fe:	4620      	mov	r0, r4
 8008600:	f7ff ffa8 	bl	8008554 <L_shift>
 8008604:	4544      	cmp	r4, r8
 8008606:	d952      	bls.n	80086ae <__hexnan+0x10e>
 8008608:	2300      	movs	r3, #0
 800860a:	f1a4 0904 	sub.w	r9, r4, #4
 800860e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008612:	f8cd b008 	str.w	fp, [sp, #8]
 8008616:	464c      	mov	r4, r9
 8008618:	461d      	mov	r5, r3
 800861a:	9903      	ldr	r1, [sp, #12]
 800861c:	e7d7      	b.n	80085ce <__hexnan+0x2e>
 800861e:	2a29      	cmp	r2, #41	@ 0x29
 8008620:	d157      	bne.n	80086d2 <__hexnan+0x132>
 8008622:	3102      	adds	r1, #2
 8008624:	f8ca 1000 	str.w	r1, [sl]
 8008628:	f1bb 0f00 	cmp.w	fp, #0
 800862c:	d051      	beq.n	80086d2 <__hexnan+0x132>
 800862e:	454c      	cmp	r4, r9
 8008630:	d206      	bcs.n	8008640 <__hexnan+0xa0>
 8008632:	2d07      	cmp	r5, #7
 8008634:	dc04      	bgt.n	8008640 <__hexnan+0xa0>
 8008636:	462a      	mov	r2, r5
 8008638:	4649      	mov	r1, r9
 800863a:	4620      	mov	r0, r4
 800863c:	f7ff ff8a 	bl	8008554 <L_shift>
 8008640:	4544      	cmp	r4, r8
 8008642:	d936      	bls.n	80086b2 <__hexnan+0x112>
 8008644:	f1a8 0204 	sub.w	r2, r8, #4
 8008648:	4623      	mov	r3, r4
 800864a:	f853 1b04 	ldr.w	r1, [r3], #4
 800864e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008652:	429f      	cmp	r7, r3
 8008654:	d2f9      	bcs.n	800864a <__hexnan+0xaa>
 8008656:	1b3b      	subs	r3, r7, r4
 8008658:	f023 0303 	bic.w	r3, r3, #3
 800865c:	3304      	adds	r3, #4
 800865e:	3401      	adds	r4, #1
 8008660:	3e03      	subs	r6, #3
 8008662:	42b4      	cmp	r4, r6
 8008664:	bf88      	it	hi
 8008666:	2304      	movhi	r3, #4
 8008668:	4443      	add	r3, r8
 800866a:	2200      	movs	r2, #0
 800866c:	f843 2b04 	str.w	r2, [r3], #4
 8008670:	429f      	cmp	r7, r3
 8008672:	d2fb      	bcs.n	800866c <__hexnan+0xcc>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	b91b      	cbnz	r3, 8008680 <__hexnan+0xe0>
 8008678:	4547      	cmp	r7, r8
 800867a:	d128      	bne.n	80086ce <__hexnan+0x12e>
 800867c:	2301      	movs	r3, #1
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	2005      	movs	r0, #5
 8008682:	b007      	add	sp, #28
 8008684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008688:	3501      	adds	r5, #1
 800868a:	2d08      	cmp	r5, #8
 800868c:	f10b 0b01 	add.w	fp, fp, #1
 8008690:	dd06      	ble.n	80086a0 <__hexnan+0x100>
 8008692:	4544      	cmp	r4, r8
 8008694:	d9c1      	bls.n	800861a <__hexnan+0x7a>
 8008696:	2300      	movs	r3, #0
 8008698:	f844 3c04 	str.w	r3, [r4, #-4]
 800869c:	2501      	movs	r5, #1
 800869e:	3c04      	subs	r4, #4
 80086a0:	6822      	ldr	r2, [r4, #0]
 80086a2:	f000 000f 	and.w	r0, r0, #15
 80086a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80086aa:	6020      	str	r0, [r4, #0]
 80086ac:	e7b5      	b.n	800861a <__hexnan+0x7a>
 80086ae:	2508      	movs	r5, #8
 80086b0:	e7b3      	b.n	800861a <__hexnan+0x7a>
 80086b2:	9b01      	ldr	r3, [sp, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0dd      	beq.n	8008674 <__hexnan+0xd4>
 80086b8:	f1c3 0320 	rsb	r3, r3, #32
 80086bc:	f04f 32ff 	mov.w	r2, #4294967295
 80086c0:	40da      	lsrs	r2, r3
 80086c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80086c6:	4013      	ands	r3, r2
 80086c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80086cc:	e7d2      	b.n	8008674 <__hexnan+0xd4>
 80086ce:	3f04      	subs	r7, #4
 80086d0:	e7d0      	b.n	8008674 <__hexnan+0xd4>
 80086d2:	2004      	movs	r0, #4
 80086d4:	e7d5      	b.n	8008682 <__hexnan+0xe2>

080086d6 <__ascii_mbtowc>:
 80086d6:	b082      	sub	sp, #8
 80086d8:	b901      	cbnz	r1, 80086dc <__ascii_mbtowc+0x6>
 80086da:	a901      	add	r1, sp, #4
 80086dc:	b142      	cbz	r2, 80086f0 <__ascii_mbtowc+0x1a>
 80086de:	b14b      	cbz	r3, 80086f4 <__ascii_mbtowc+0x1e>
 80086e0:	7813      	ldrb	r3, [r2, #0]
 80086e2:	600b      	str	r3, [r1, #0]
 80086e4:	7812      	ldrb	r2, [r2, #0]
 80086e6:	1e10      	subs	r0, r2, #0
 80086e8:	bf18      	it	ne
 80086ea:	2001      	movne	r0, #1
 80086ec:	b002      	add	sp, #8
 80086ee:	4770      	bx	lr
 80086f0:	4610      	mov	r0, r2
 80086f2:	e7fb      	b.n	80086ec <__ascii_mbtowc+0x16>
 80086f4:	f06f 0001 	mvn.w	r0, #1
 80086f8:	e7f8      	b.n	80086ec <__ascii_mbtowc+0x16>

080086fa <_realloc_r>:
 80086fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fe:	4607      	mov	r7, r0
 8008700:	4614      	mov	r4, r2
 8008702:	460d      	mov	r5, r1
 8008704:	b921      	cbnz	r1, 8008710 <_realloc_r+0x16>
 8008706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800870a:	4611      	mov	r1, r2
 800870c:	f7fd bc90 	b.w	8006030 <_malloc_r>
 8008710:	b92a      	cbnz	r2, 800871e <_realloc_r+0x24>
 8008712:	f7fd fc19 	bl	8005f48 <_free_r>
 8008716:	4625      	mov	r5, r4
 8008718:	4628      	mov	r0, r5
 800871a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800871e:	f000 f8c4 	bl	80088aa <_malloc_usable_size_r>
 8008722:	4284      	cmp	r4, r0
 8008724:	4606      	mov	r6, r0
 8008726:	d802      	bhi.n	800872e <_realloc_r+0x34>
 8008728:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800872c:	d8f4      	bhi.n	8008718 <_realloc_r+0x1e>
 800872e:	4621      	mov	r1, r4
 8008730:	4638      	mov	r0, r7
 8008732:	f7fd fc7d 	bl	8006030 <_malloc_r>
 8008736:	4680      	mov	r8, r0
 8008738:	b908      	cbnz	r0, 800873e <_realloc_r+0x44>
 800873a:	4645      	mov	r5, r8
 800873c:	e7ec      	b.n	8008718 <_realloc_r+0x1e>
 800873e:	42b4      	cmp	r4, r6
 8008740:	4622      	mov	r2, r4
 8008742:	4629      	mov	r1, r5
 8008744:	bf28      	it	cs
 8008746:	4632      	movcs	r2, r6
 8008748:	f7ff fc42 	bl	8007fd0 <memcpy>
 800874c:	4629      	mov	r1, r5
 800874e:	4638      	mov	r0, r7
 8008750:	f7fd fbfa 	bl	8005f48 <_free_r>
 8008754:	e7f1      	b.n	800873a <_realloc_r+0x40>

08008756 <__ascii_wctomb>:
 8008756:	4603      	mov	r3, r0
 8008758:	4608      	mov	r0, r1
 800875a:	b141      	cbz	r1, 800876e <__ascii_wctomb+0x18>
 800875c:	2aff      	cmp	r2, #255	@ 0xff
 800875e:	d904      	bls.n	800876a <__ascii_wctomb+0x14>
 8008760:	228a      	movs	r2, #138	@ 0x8a
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	4770      	bx	lr
 800876a:	700a      	strb	r2, [r1, #0]
 800876c:	2001      	movs	r0, #1
 800876e:	4770      	bx	lr

08008770 <fiprintf>:
 8008770:	b40e      	push	{r1, r2, r3}
 8008772:	b503      	push	{r0, r1, lr}
 8008774:	4601      	mov	r1, r0
 8008776:	ab03      	add	r3, sp, #12
 8008778:	4805      	ldr	r0, [pc, #20]	@ (8008790 <fiprintf+0x20>)
 800877a:	f853 2b04 	ldr.w	r2, [r3], #4
 800877e:	6800      	ldr	r0, [r0, #0]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	f7ff f991 	bl	8007aa8 <_vfiprintf_r>
 8008786:	b002      	add	sp, #8
 8008788:	f85d eb04 	ldr.w	lr, [sp], #4
 800878c:	b003      	add	sp, #12
 800878e:	4770      	bx	lr
 8008790:	2000001c 	.word	0x2000001c

08008794 <__swhatbuf_r>:
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	460c      	mov	r4, r1
 8008798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879c:	2900      	cmp	r1, #0
 800879e:	b096      	sub	sp, #88	@ 0x58
 80087a0:	4615      	mov	r5, r2
 80087a2:	461e      	mov	r6, r3
 80087a4:	da0d      	bge.n	80087c2 <__swhatbuf_r+0x2e>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087ac:	f04f 0100 	mov.w	r1, #0
 80087b0:	bf14      	ite	ne
 80087b2:	2340      	movne	r3, #64	@ 0x40
 80087b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087b8:	2000      	movs	r0, #0
 80087ba:	6031      	str	r1, [r6, #0]
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	b016      	add	sp, #88	@ 0x58
 80087c0:	bd70      	pop	{r4, r5, r6, pc}
 80087c2:	466a      	mov	r2, sp
 80087c4:	f000 f848 	bl	8008858 <_fstat_r>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	dbec      	blt.n	80087a6 <__swhatbuf_r+0x12>
 80087cc:	9901      	ldr	r1, [sp, #4]
 80087ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087d6:	4259      	negs	r1, r3
 80087d8:	4159      	adcs	r1, r3
 80087da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087de:	e7eb      	b.n	80087b8 <__swhatbuf_r+0x24>

080087e0 <__smakebuf_r>:
 80087e0:	898b      	ldrh	r3, [r1, #12]
 80087e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087e4:	079d      	lsls	r5, r3, #30
 80087e6:	4606      	mov	r6, r0
 80087e8:	460c      	mov	r4, r1
 80087ea:	d507      	bpl.n	80087fc <__smakebuf_r+0x1c>
 80087ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	6123      	str	r3, [r4, #16]
 80087f4:	2301      	movs	r3, #1
 80087f6:	6163      	str	r3, [r4, #20]
 80087f8:	b003      	add	sp, #12
 80087fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fc:	ab01      	add	r3, sp, #4
 80087fe:	466a      	mov	r2, sp
 8008800:	f7ff ffc8 	bl	8008794 <__swhatbuf_r>
 8008804:	9f00      	ldr	r7, [sp, #0]
 8008806:	4605      	mov	r5, r0
 8008808:	4639      	mov	r1, r7
 800880a:	4630      	mov	r0, r6
 800880c:	f7fd fc10 	bl	8006030 <_malloc_r>
 8008810:	b948      	cbnz	r0, 8008826 <__smakebuf_r+0x46>
 8008812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008816:	059a      	lsls	r2, r3, #22
 8008818:	d4ee      	bmi.n	80087f8 <__smakebuf_r+0x18>
 800881a:	f023 0303 	bic.w	r3, r3, #3
 800881e:	f043 0302 	orr.w	r3, r3, #2
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	e7e2      	b.n	80087ec <__smakebuf_r+0xc>
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	6020      	str	r0, [r4, #0]
 800882a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800882e:	81a3      	strh	r3, [r4, #12]
 8008830:	9b01      	ldr	r3, [sp, #4]
 8008832:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008836:	b15b      	cbz	r3, 8008850 <__smakebuf_r+0x70>
 8008838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800883c:	4630      	mov	r0, r6
 800883e:	f000 f81d 	bl	800887c <_isatty_r>
 8008842:	b128      	cbz	r0, 8008850 <__smakebuf_r+0x70>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	f023 0303 	bic.w	r3, r3, #3
 800884a:	f043 0301 	orr.w	r3, r3, #1
 800884e:	81a3      	strh	r3, [r4, #12]
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	431d      	orrs	r5, r3
 8008854:	81a5      	strh	r5, [r4, #12]
 8008856:	e7cf      	b.n	80087f8 <__smakebuf_r+0x18>

08008858 <_fstat_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d07      	ldr	r5, [pc, #28]	@ (8008878 <_fstat_r+0x20>)
 800885c:	2300      	movs	r3, #0
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	4611      	mov	r1, r2
 8008864:	602b      	str	r3, [r5, #0]
 8008866:	f7f9 fc73 	bl	8002150 <_fstat>
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	d102      	bne.n	8008874 <_fstat_r+0x1c>
 800886e:	682b      	ldr	r3, [r5, #0]
 8008870:	b103      	cbz	r3, 8008874 <_fstat_r+0x1c>
 8008872:	6023      	str	r3, [r4, #0]
 8008874:	bd38      	pop	{r3, r4, r5, pc}
 8008876:	bf00      	nop
 8008878:	200003f0 	.word	0x200003f0

0800887c <_isatty_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d06      	ldr	r5, [pc, #24]	@ (8008898 <_isatty_r+0x1c>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	f7f9 fc72 	bl	8002170 <_isatty>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_isatty_r+0x1a>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_isatty_r+0x1a>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	200003f0 	.word	0x200003f0

0800889c <abort>:
 800889c:	b508      	push	{r3, lr}
 800889e:	2006      	movs	r0, #6
 80088a0:	f000 f834 	bl	800890c <raise>
 80088a4:	2001      	movs	r0, #1
 80088a6:	f7f9 fc03 	bl	80020b0 <_exit>

080088aa <_malloc_usable_size_r>:
 80088aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ae:	1f18      	subs	r0, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bfbc      	itt	lt
 80088b4:	580b      	ldrlt	r3, [r1, r0]
 80088b6:	18c0      	addlt	r0, r0, r3
 80088b8:	4770      	bx	lr

080088ba <_raise_r>:
 80088ba:	291f      	cmp	r1, #31
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4605      	mov	r5, r0
 80088c0:	460c      	mov	r4, r1
 80088c2:	d904      	bls.n	80088ce <_raise_r+0x14>
 80088c4:	2316      	movs	r3, #22
 80088c6:	6003      	str	r3, [r0, #0]
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	bd38      	pop	{r3, r4, r5, pc}
 80088ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088d0:	b112      	cbz	r2, 80088d8 <_raise_r+0x1e>
 80088d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088d6:	b94b      	cbnz	r3, 80088ec <_raise_r+0x32>
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 f831 	bl	8008940 <_getpid_r>
 80088de:	4622      	mov	r2, r4
 80088e0:	4601      	mov	r1, r0
 80088e2:	4628      	mov	r0, r5
 80088e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088e8:	f000 b818 	b.w	800891c <_kill_r>
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d00a      	beq.n	8008906 <_raise_r+0x4c>
 80088f0:	1c59      	adds	r1, r3, #1
 80088f2:	d103      	bne.n	80088fc <_raise_r+0x42>
 80088f4:	2316      	movs	r3, #22
 80088f6:	6003      	str	r3, [r0, #0]
 80088f8:	2001      	movs	r0, #1
 80088fa:	e7e7      	b.n	80088cc <_raise_r+0x12>
 80088fc:	2100      	movs	r1, #0
 80088fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008902:	4620      	mov	r0, r4
 8008904:	4798      	blx	r3
 8008906:	2000      	movs	r0, #0
 8008908:	e7e0      	b.n	80088cc <_raise_r+0x12>
	...

0800890c <raise>:
 800890c:	4b02      	ldr	r3, [pc, #8]	@ (8008918 <raise+0xc>)
 800890e:	4601      	mov	r1, r0
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	f7ff bfd2 	b.w	80088ba <_raise_r>
 8008916:	bf00      	nop
 8008918:	2000001c 	.word	0x2000001c

0800891c <_kill_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4d07      	ldr	r5, [pc, #28]	@ (800893c <_kill_r+0x20>)
 8008920:	2300      	movs	r3, #0
 8008922:	4604      	mov	r4, r0
 8008924:	4608      	mov	r0, r1
 8008926:	4611      	mov	r1, r2
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	f7f9 fbb1 	bl	8002090 <_kill>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d102      	bne.n	8008938 <_kill_r+0x1c>
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	b103      	cbz	r3, 8008938 <_kill_r+0x1c>
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	bf00      	nop
 800893c:	200003f0 	.word	0x200003f0

08008940 <_getpid_r>:
 8008940:	f7f9 bb9e 	b.w	8002080 <_getpid>

08008944 <_init>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	bf00      	nop
 8008948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894a:	bc08      	pop	{r3}
 800894c:	469e      	mov	lr, r3
 800894e:	4770      	bx	lr

08008950 <_fini>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr
