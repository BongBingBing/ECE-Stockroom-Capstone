
test_cases.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c90  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08008dd0  08008dd0  00009dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009334  08009334  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009334  08009334  0000a334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800933c  0800933c  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800933c  0800933c  0000a33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009340  08009340  0000a340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009344  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001dc  08009520  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08009520  0000b3dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b888  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e98  00000000  00000000  00016a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00018928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b6  00000000  00000000  00019490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017695  00000000  00000000  00019d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d90e  00000000  00000000  000313db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea78  00000000  00000000  0003ece9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  000cd7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000d1f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08008db8 	.word	0x08008db8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08008db8 	.word	0x08008db8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_f2iz>:
 8001054:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001058:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800105c:	d30f      	bcc.n	800107e <__aeabi_f2iz+0x2a>
 800105e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001066:	d90d      	bls.n	8001084 <__aeabi_f2iz+0x30>
 8001068:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800106c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001070:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001074:	fa23 f002 	lsr.w	r0, r3, r2
 8001078:	bf18      	it	ne
 800107a:	4240      	negne	r0, r0
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2iz+0x3a>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d105      	bne.n	800109a <__aeabi_f2iz+0x46>
 800108e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001092:	bf08      	it	eq
 8001094:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr

080010a0 <__aeabi_ldivmod>:
 80010a0:	b97b      	cbnz	r3, 80010c2 <__aeabi_ldivmod+0x22>
 80010a2:	b972      	cbnz	r2, 80010c2 <__aeabi_ldivmod+0x22>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bfbe      	ittt	lt
 80010a8:	2000      	movlt	r0, #0
 80010aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80010ae:	e006      	blt.n	80010be <__aeabi_ldivmod+0x1e>
 80010b0:	bf08      	it	eq
 80010b2:	2800      	cmpeq	r0, #0
 80010b4:	bf1c      	itt	ne
 80010b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80010ba:	f04f 30ff 	movne.w	r0, #4294967295
 80010be:	f000 b9e9 	b.w	8001494 <__aeabi_idiv0>
 80010c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80010c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010ca:	2900      	cmp	r1, #0
 80010cc:	db09      	blt.n	80010e2 <__aeabi_ldivmod+0x42>
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db1a      	blt.n	8001108 <__aeabi_ldivmod+0x68>
 80010d2:	f000 f883 	bl	80011dc <__udivmoddi4>
 80010d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010de:	b004      	add	sp, #16
 80010e0:	4770      	bx	lr
 80010e2:	4240      	negs	r0, r0
 80010e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db1b      	blt.n	8001124 <__aeabi_ldivmod+0x84>
 80010ec:	f000 f876 	bl	80011dc <__udivmoddi4>
 80010f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010f8:	b004      	add	sp, #16
 80010fa:	4240      	negs	r0, r0
 80010fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001100:	4252      	negs	r2, r2
 8001102:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001106:	4770      	bx	lr
 8001108:	4252      	negs	r2, r2
 800110a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800110e:	f000 f865 	bl	80011dc <__udivmoddi4>
 8001112:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800111a:	b004      	add	sp, #16
 800111c:	4240      	negs	r0, r0
 800111e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001122:	4770      	bx	lr
 8001124:	4252      	negs	r2, r2
 8001126:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800112a:	f000 f857 	bl	80011dc <__udivmoddi4>
 800112e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001132:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001136:	b004      	add	sp, #16
 8001138:	4252      	negs	r2, r2
 800113a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800113e:	4770      	bx	lr

08001140 <__aeabi_uldivmod>:
 8001140:	b953      	cbnz	r3, 8001158 <__aeabi_uldivmod+0x18>
 8001142:	b94a      	cbnz	r2, 8001158 <__aeabi_uldivmod+0x18>
 8001144:	2900      	cmp	r1, #0
 8001146:	bf08      	it	eq
 8001148:	2800      	cmpeq	r0, #0
 800114a:	bf1c      	itt	ne
 800114c:	f04f 31ff 	movne.w	r1, #4294967295
 8001150:	f04f 30ff 	movne.w	r0, #4294967295
 8001154:	f000 b99e 	b.w	8001494 <__aeabi_idiv0>
 8001158:	f1ad 0c08 	sub.w	ip, sp, #8
 800115c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001160:	f000 f83c 	bl	80011dc <__udivmoddi4>
 8001164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	2300      	movs	r3, #0
 8001176:	4604      	mov	r4, r0
 8001178:	460d      	mov	r5, r1
 800117a:	f7ff fc37 	bl	80009ec <__aeabi_dcmplt>
 800117e:	b928      	cbnz	r0, 800118c <__aeabi_d2lz+0x1c>
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001188:	f000 b80a 	b.w	80011a0 <__aeabi_d2ulz>
 800118c:	4620      	mov	r0, r4
 800118e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001192:	f000 f805 	bl	80011a0 <__aeabi_d2ulz>
 8001196:	4240      	negs	r0, r0
 8001198:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800119c:	bd38      	pop	{r3, r4, r5, pc}
 800119e:	bf00      	nop

080011a0 <__aeabi_d2ulz>:
 80011a0:	b5d0      	push	{r4, r6, r7, lr}
 80011a2:	2200      	movs	r2, #0
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <__aeabi_d2ulz+0x34>)
 80011a6:	4606      	mov	r6, r0
 80011a8:	460f      	mov	r7, r1
 80011aa:	f7ff f9ad 	bl	8000508 <__aeabi_dmul>
 80011ae:	f7ff fc83 	bl	8000ab8 <__aeabi_d2uiz>
 80011b2:	4604      	mov	r4, r0
 80011b4:	f7ff f92e 	bl	8000414 <__aeabi_ui2d>
 80011b8:	2200      	movs	r2, #0
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <__aeabi_d2ulz+0x38>)
 80011bc:	f7ff f9a4 	bl	8000508 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4630      	mov	r0, r6
 80011c6:	4639      	mov	r1, r7
 80011c8:	f7fe ffe6 	bl	8000198 <__aeabi_dsub>
 80011cc:	f7ff fc74 	bl	8000ab8 <__aeabi_d2uiz>
 80011d0:	4621      	mov	r1, r4
 80011d2:	bdd0      	pop	{r4, r6, r7, pc}
 80011d4:	3df00000 	.word	0x3df00000
 80011d8:	41f00000 	.word	0x41f00000

080011dc <__udivmoddi4>:
 80011dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011e0:	9d08      	ldr	r5, [sp, #32]
 80011e2:	460c      	mov	r4, r1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d14e      	bne.n	8001286 <__udivmoddi4+0xaa>
 80011e8:	4694      	mov	ip, r2
 80011ea:	458c      	cmp	ip, r1
 80011ec:	4686      	mov	lr, r0
 80011ee:	fab2 f282 	clz	r2, r2
 80011f2:	d962      	bls.n	80012ba <__udivmoddi4+0xde>
 80011f4:	b14a      	cbz	r2, 800120a <__udivmoddi4+0x2e>
 80011f6:	f1c2 0320 	rsb	r3, r2, #32
 80011fa:	4091      	lsls	r1, r2
 80011fc:	fa20 f303 	lsr.w	r3, r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	4319      	orrs	r1, r3
 8001206:	fa00 fe02 	lsl.w	lr, r0, r2
 800120a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800120e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001212:	fb07 1114 	mls	r1, r7, r4, r1
 8001216:	fa1f f68c 	uxth.w	r6, ip
 800121a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800121e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001222:	fb04 f106 	mul.w	r1, r4, r6
 8001226:	4299      	cmp	r1, r3
 8001228:	d90a      	bls.n	8001240 <__udivmoddi4+0x64>
 800122a:	eb1c 0303 	adds.w	r3, ip, r3
 800122e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001232:	f080 8110 	bcs.w	8001456 <__udivmoddi4+0x27a>
 8001236:	4299      	cmp	r1, r3
 8001238:	f240 810d 	bls.w	8001456 <__udivmoddi4+0x27a>
 800123c:	3c02      	subs	r4, #2
 800123e:	4463      	add	r3, ip
 8001240:	1a59      	subs	r1, r3, r1
 8001242:	fbb1 f0f7 	udiv	r0, r1, r7
 8001246:	fb07 1110 	mls	r1, r7, r0, r1
 800124a:	fb00 f606 	mul.w	r6, r0, r6
 800124e:	fa1f f38e 	uxth.w	r3, lr
 8001252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001256:	429e      	cmp	r6, r3
 8001258:	d90a      	bls.n	8001270 <__udivmoddi4+0x94>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001262:	f080 80fa 	bcs.w	800145a <__udivmoddi4+0x27e>
 8001266:	429e      	cmp	r6, r3
 8001268:	f240 80f7 	bls.w	800145a <__udivmoddi4+0x27e>
 800126c:	4463      	add	r3, ip
 800126e:	3802      	subs	r0, #2
 8001270:	2100      	movs	r1, #0
 8001272:	1b9b      	subs	r3, r3, r6
 8001274:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001278:	b11d      	cbz	r5, 8001282 <__udivmoddi4+0xa6>
 800127a:	40d3      	lsrs	r3, r2
 800127c:	2200      	movs	r2, #0
 800127e:	e9c5 3200 	strd	r3, r2, [r5]
 8001282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001286:	428b      	cmp	r3, r1
 8001288:	d905      	bls.n	8001296 <__udivmoddi4+0xba>
 800128a:	b10d      	cbz	r5, 8001290 <__udivmoddi4+0xb4>
 800128c:	e9c5 0100 	strd	r0, r1, [r5]
 8001290:	2100      	movs	r1, #0
 8001292:	4608      	mov	r0, r1
 8001294:	e7f5      	b.n	8001282 <__udivmoddi4+0xa6>
 8001296:	fab3 f183 	clz	r1, r3
 800129a:	2900      	cmp	r1, #0
 800129c:	d146      	bne.n	800132c <__udivmoddi4+0x150>
 800129e:	42a3      	cmp	r3, r4
 80012a0:	d302      	bcc.n	80012a8 <__udivmoddi4+0xcc>
 80012a2:	4290      	cmp	r0, r2
 80012a4:	f0c0 80ee 	bcc.w	8001484 <__udivmoddi4+0x2a8>
 80012a8:	1a86      	subs	r6, r0, r2
 80012aa:	eb64 0303 	sbc.w	r3, r4, r3
 80012ae:	2001      	movs	r0, #1
 80012b0:	2d00      	cmp	r5, #0
 80012b2:	d0e6      	beq.n	8001282 <__udivmoddi4+0xa6>
 80012b4:	e9c5 6300 	strd	r6, r3, [r5]
 80012b8:	e7e3      	b.n	8001282 <__udivmoddi4+0xa6>
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	f040 808f 	bne.w	80013de <__udivmoddi4+0x202>
 80012c0:	eba1 040c 	sub.w	r4, r1, ip
 80012c4:	2101      	movs	r1, #1
 80012c6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ca:	fa1f f78c 	uxth.w	r7, ip
 80012ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80012d2:	fb08 4416 	mls	r4, r8, r6, r4
 80012d6:	fb07 f006 	mul.w	r0, r7, r6
 80012da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012e2:	4298      	cmp	r0, r3
 80012e4:	d908      	bls.n	80012f8 <__udivmoddi4+0x11c>
 80012e6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80012ee:	d202      	bcs.n	80012f6 <__udivmoddi4+0x11a>
 80012f0:	4298      	cmp	r0, r3
 80012f2:	f200 80cb 	bhi.w	800148c <__udivmoddi4+0x2b0>
 80012f6:	4626      	mov	r6, r4
 80012f8:	1a1c      	subs	r4, r3, r0
 80012fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80012fe:	fb08 4410 	mls	r4, r8, r0, r4
 8001302:	fb00 f707 	mul.w	r7, r0, r7
 8001306:	fa1f f38e 	uxth.w	r3, lr
 800130a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800130e:	429f      	cmp	r7, r3
 8001310:	d908      	bls.n	8001324 <__udivmoddi4+0x148>
 8001312:	eb1c 0303 	adds.w	r3, ip, r3
 8001316:	f100 34ff 	add.w	r4, r0, #4294967295
 800131a:	d202      	bcs.n	8001322 <__udivmoddi4+0x146>
 800131c:	429f      	cmp	r7, r3
 800131e:	f200 80ae 	bhi.w	800147e <__udivmoddi4+0x2a2>
 8001322:	4620      	mov	r0, r4
 8001324:	1bdb      	subs	r3, r3, r7
 8001326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800132a:	e7a5      	b.n	8001278 <__udivmoddi4+0x9c>
 800132c:	f1c1 0720 	rsb	r7, r1, #32
 8001330:	408b      	lsls	r3, r1
 8001332:	fa22 fc07 	lsr.w	ip, r2, r7
 8001336:	ea4c 0c03 	orr.w	ip, ip, r3
 800133a:	fa24 f607 	lsr.w	r6, r4, r7
 800133e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001342:	fbb6 f8f9 	udiv	r8, r6, r9
 8001346:	fa1f fe8c 	uxth.w	lr, ip
 800134a:	fb09 6618 	mls	r6, r9, r8, r6
 800134e:	fa20 f307 	lsr.w	r3, r0, r7
 8001352:	408c      	lsls	r4, r1
 8001354:	fa00 fa01 	lsl.w	sl, r0, r1
 8001358:	fb08 f00e 	mul.w	r0, r8, lr
 800135c:	431c      	orrs	r4, r3
 800135e:	0c23      	lsrs	r3, r4, #16
 8001360:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001364:	4298      	cmp	r0, r3
 8001366:	fa02 f201 	lsl.w	r2, r2, r1
 800136a:	d90a      	bls.n	8001382 <__udivmoddi4+0x1a6>
 800136c:	eb1c 0303 	adds.w	r3, ip, r3
 8001370:	f108 36ff 	add.w	r6, r8, #4294967295
 8001374:	f080 8081 	bcs.w	800147a <__udivmoddi4+0x29e>
 8001378:	4298      	cmp	r0, r3
 800137a:	d97e      	bls.n	800147a <__udivmoddi4+0x29e>
 800137c:	f1a8 0802 	sub.w	r8, r8, #2
 8001380:	4463      	add	r3, ip
 8001382:	1a1e      	subs	r6, r3, r0
 8001384:	fbb6 f3f9 	udiv	r3, r6, r9
 8001388:	fb09 6613 	mls	r6, r9, r3, r6
 800138c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001390:	b2a4      	uxth	r4, r4
 8001392:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001396:	45a6      	cmp	lr, r4
 8001398:	d908      	bls.n	80013ac <__udivmoddi4+0x1d0>
 800139a:	eb1c 0404 	adds.w	r4, ip, r4
 800139e:	f103 30ff 	add.w	r0, r3, #4294967295
 80013a2:	d266      	bcs.n	8001472 <__udivmoddi4+0x296>
 80013a4:	45a6      	cmp	lr, r4
 80013a6:	d964      	bls.n	8001472 <__udivmoddi4+0x296>
 80013a8:	3b02      	subs	r3, #2
 80013aa:	4464      	add	r4, ip
 80013ac:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013b0:	fba0 8302 	umull	r8, r3, r0, r2
 80013b4:	eba4 040e 	sub.w	r4, r4, lr
 80013b8:	429c      	cmp	r4, r3
 80013ba:	46c6      	mov	lr, r8
 80013bc:	461e      	mov	r6, r3
 80013be:	d350      	bcc.n	8001462 <__udivmoddi4+0x286>
 80013c0:	d04d      	beq.n	800145e <__udivmoddi4+0x282>
 80013c2:	b155      	cbz	r5, 80013da <__udivmoddi4+0x1fe>
 80013c4:	ebba 030e 	subs.w	r3, sl, lr
 80013c8:	eb64 0406 	sbc.w	r4, r4, r6
 80013cc:	fa04 f707 	lsl.w	r7, r4, r7
 80013d0:	40cb      	lsrs	r3, r1
 80013d2:	431f      	orrs	r7, r3
 80013d4:	40cc      	lsrs	r4, r1
 80013d6:	e9c5 7400 	strd	r7, r4, [r5]
 80013da:	2100      	movs	r1, #0
 80013dc:	e751      	b.n	8001282 <__udivmoddi4+0xa6>
 80013de:	fa0c fc02 	lsl.w	ip, ip, r2
 80013e2:	f1c2 0320 	rsb	r3, r2, #32
 80013e6:	40d9      	lsrs	r1, r3
 80013e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013ec:	fa20 f303 	lsr.w	r3, r0, r3
 80013f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80013f4:	fbb1 f0f8 	udiv	r0, r1, r8
 80013f8:	fb08 1110 	mls	r1, r8, r0, r1
 80013fc:	4094      	lsls	r4, r2
 80013fe:	431c      	orrs	r4, r3
 8001400:	fa1f f78c 	uxth.w	r7, ip
 8001404:	0c23      	lsrs	r3, r4, #16
 8001406:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800140a:	fb00 f107 	mul.w	r1, r0, r7
 800140e:	4299      	cmp	r1, r3
 8001410:	d908      	bls.n	8001424 <__udivmoddi4+0x248>
 8001412:	eb1c 0303 	adds.w	r3, ip, r3
 8001416:	f100 36ff 	add.w	r6, r0, #4294967295
 800141a:	d22c      	bcs.n	8001476 <__udivmoddi4+0x29a>
 800141c:	4299      	cmp	r1, r3
 800141e:	d92a      	bls.n	8001476 <__udivmoddi4+0x29a>
 8001420:	3802      	subs	r0, #2
 8001422:	4463      	add	r3, ip
 8001424:	1a5b      	subs	r3, r3, r1
 8001426:	fbb3 f1f8 	udiv	r1, r3, r8
 800142a:	fb08 3311 	mls	r3, r8, r1, r3
 800142e:	b2a4      	uxth	r4, r4
 8001430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001434:	fb01 f307 	mul.w	r3, r1, r7
 8001438:	42a3      	cmp	r3, r4
 800143a:	d908      	bls.n	800144e <__udivmoddi4+0x272>
 800143c:	eb1c 0404 	adds.w	r4, ip, r4
 8001440:	f101 36ff 	add.w	r6, r1, #4294967295
 8001444:	d213      	bcs.n	800146e <__udivmoddi4+0x292>
 8001446:	42a3      	cmp	r3, r4
 8001448:	d911      	bls.n	800146e <__udivmoddi4+0x292>
 800144a:	3902      	subs	r1, #2
 800144c:	4464      	add	r4, ip
 800144e:	1ae4      	subs	r4, r4, r3
 8001450:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001454:	e73b      	b.n	80012ce <__udivmoddi4+0xf2>
 8001456:	4604      	mov	r4, r0
 8001458:	e6f2      	b.n	8001240 <__udivmoddi4+0x64>
 800145a:	4608      	mov	r0, r1
 800145c:	e708      	b.n	8001270 <__udivmoddi4+0x94>
 800145e:	45c2      	cmp	sl, r8
 8001460:	d2af      	bcs.n	80013c2 <__udivmoddi4+0x1e6>
 8001462:	ebb8 0e02 	subs.w	lr, r8, r2
 8001466:	eb63 060c 	sbc.w	r6, r3, ip
 800146a:	3801      	subs	r0, #1
 800146c:	e7a9      	b.n	80013c2 <__udivmoddi4+0x1e6>
 800146e:	4631      	mov	r1, r6
 8001470:	e7ed      	b.n	800144e <__udivmoddi4+0x272>
 8001472:	4603      	mov	r3, r0
 8001474:	e79a      	b.n	80013ac <__udivmoddi4+0x1d0>
 8001476:	4630      	mov	r0, r6
 8001478:	e7d4      	b.n	8001424 <__udivmoddi4+0x248>
 800147a:	46b0      	mov	r8, r6
 800147c:	e781      	b.n	8001382 <__udivmoddi4+0x1a6>
 800147e:	4463      	add	r3, ip
 8001480:	3802      	subs	r0, #2
 8001482:	e74f      	b.n	8001324 <__udivmoddi4+0x148>
 8001484:	4606      	mov	r6, r0
 8001486:	4623      	mov	r3, r4
 8001488:	4608      	mov	r0, r1
 800148a:	e711      	b.n	80012b0 <__udivmoddi4+0xd4>
 800148c:	3e02      	subs	r6, #2
 800148e:	4463      	add	r3, ip
 8001490:	e732      	b.n	80012f8 <__udivmoddi4+0x11c>
 8001492:	bf00      	nop

08001494 <__aeabi_idiv0>:
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a39      	ldr	r2, [pc, #228]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a33      	ldr	r2, [pc, #204]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014cc:	f043 0320 	orr.w	r3, r3, #32
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a27      	ldr	r2, [pc, #156]	@ (8001598 <MX_GPIO_Init+0x100>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	61d3      	str	r3, [r2, #28]
 8001502:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <MX_GPIO_Init+0x100>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2120      	movs	r1, #32
 8001512:	4822      	ldr	r0, [pc, #136]	@ (800159c <MX_GPIO_Init+0x104>)
 8001514:	f000 ffbd 	bl	8002492 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2120      	movs	r1, #32
 800151c:	4820      	ldr	r0, [pc, #128]	@ (80015a0 <MX_GPIO_Init+0x108>)
 800151e:	f000 ffb8 	bl	8002492 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001528:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	481a      	ldr	r0, [pc, #104]	@ (80015a4 <MX_GPIO_Init+0x10c>)
 800153a:	f000 fe03 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800153e:	2320      	movs	r3, #32
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4811      	ldr	r0, [pc, #68]	@ (800159c <MX_GPIO_Init+0x104>)
 8001556:	f000 fdf5 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800155a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	480b      	ldr	r0, [pc, #44]	@ (800159c <MX_GPIO_Init+0x104>)
 8001570:	f000 fde8 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001574:	2320      	movs	r3, #32
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <MX_GPIO_Init+0x108>)
 800158c:	f000 fdda 	bl	8002144 <HAL_GPIO_Init>

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	@ 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020800 	.word	0x40020800

080015a8 <_write>:
#define DT_PORT GPIOA
#define SCK_PIN GPIO_PIN_5
#define SCK_PORT GPIOB

//Code to enable printf statements
int _write(int file, char *data, int len) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <_write+0x28>)
 80015c0:	f002 f87c 	bl	80036bc <HAL_UART_Transmit>
    return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000244 	.word	0x20000244

080015d4 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <__io_getchar+0x48>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <__io_getchar+0x48>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015f4:	1df9      	adds	r1, r7, #7
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	2201      	movs	r2, #1
 80015fc:	4807      	ldr	r0, [pc, #28]	@ (800161c <__io_getchar+0x48>)
 80015fe:	f002 f8e0 	bl	80037c2 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001602:	1df9      	adds	r1, r7, #7
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	2201      	movs	r2, #1
 800160a:	4804      	ldr	r0, [pc, #16]	@ (800161c <__io_getchar+0x48>)
 800160c:	f002 f856 	bl	80036bc <HAL_UART_Transmit>
  return ch;
 8001610:	79fb      	ldrb	r3, [r7, #7]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000244 	.word	0x20000244

08001620 <microDelay>:

void microDelay(uint16_t delay)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <microDelay+0x2c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8001632:	bf00      	nop
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <microDelay+0x2c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3f9      	bcc.n	8001634 <microDelay+0x14>
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	20000204 	.word	0x20000204

08001650 <getHX711>:

int32_t getHX711(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 800165a:	f000 fc63 	bl	8001f24 <HAL_GetTick>
 800165e:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8001660:	e008      	b.n	8001674 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8001662:	f000 fc5f 	bl	8001f24 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2bc8      	cmp	r3, #200	@ 0xc8
 800166e:	d901      	bls.n	8001674 <getHX711+0x24>
      return 0;
 8001670:	2300      	movs	r3, #0
 8001672:	e047      	b.n	8001704 <getHX711+0xb4>
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8001674:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001678:	4824      	ldr	r0, [pc, #144]	@ (800170c <getHX711+0xbc>)
 800167a:	f000 fef3 	bl	8002464 <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d0ee      	beq.n	8001662 <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8001684:	2300      	movs	r3, #0
 8001686:	72fb      	strb	r3, [r7, #11]
 8001688:	e023      	b.n	80016d2 <getHX711+0x82>
  {
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	2120      	movs	r1, #32
 800168e:	4820      	ldr	r0, [pc, #128]	@ (8001710 <getHX711+0xc0>)
 8001690:	f000 feff 	bl	8002492 <HAL_GPIO_WritePin>
    microDelay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff ffc3 	bl	8001620 <microDelay>
    data = data << 1;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2120      	movs	r1, #32
 80016a4:	481a      	ldr	r0, [pc, #104]	@ (8001710 <getHX711+0xc0>)
 80016a6:	f000 fef4 	bl	8002492 <HAL_GPIO_WritePin>
    microDelay(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff ffb8 	bl	8001620 <microDelay>
    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 80016b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b4:	4815      	ldr	r0, [pc, #84]	@ (800170c <getHX711+0xbc>)
 80016b6:	f000 fed5 	bl	8002464 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <getHX711+0x76>
      data ++;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80016c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	72fb      	strb	r3, [r7, #11]
 80016d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016d6:	2b17      	cmp	r3, #23
 80016d8:	ddd7      	ble.n	800168a <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80016e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2120      	movs	r1, #32
 80016e6:	480a      	ldr	r0, [pc, #40]	@ (8001710 <getHX711+0xc0>)
 80016e8:	f000 fed3 	bl	8002492 <HAL_GPIO_WritePin>
  microDelay(1);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff ff97 	bl	8001620 <microDelay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	4806      	ldr	r0, [pc, #24]	@ (8001710 <getHX711+0xc0>)
 80016f8:	f000 fecb 	bl	8002492 <HAL_GPIO_WritePin>
  microDelay(1);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff ff8f 	bl	8001620 <microDelay>
  return data;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400

08001714 <weigh>:

int weigh()
{
 8001714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001718:	b088      	sub	sp, #32
 800171a:	af00      	add	r7, sp, #0
  int64_t  total = 0;
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 150;
 8001728:	2396      	movs	r3, #150	@ 0x96
 800172a:	613b      	str	r3, [r7, #16]
  int milligram;
  float coefficient;
  for(uint16_t i=0 ; i<samples ; i++)
 800172c:	2300      	movs	r3, #0
 800172e:	82fb      	strh	r3, [r7, #22]
 8001730:	e010      	b.n	8001754 <weigh+0x40>
  {
      total += getHX711();
 8001732:	f7ff ff8d 	bl	8001650 <getHX711>
 8001736:	4603      	mov	r3, r0
 8001738:	17da      	asrs	r2, r3, #31
 800173a:	461c      	mov	r4, r3
 800173c:	4615      	mov	r5, r2
 800173e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001742:	eb12 0804 	adds.w	r8, r2, r4
 8001746:	eb43 0905 	adc.w	r9, r3, r5
 800174a:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 800174e:	8afb      	ldrh	r3, [r7, #22]
 8001750:	3301      	adds	r3, #1
 8001752:	82fb      	strh	r3, [r7, #22]
 8001754:	8afb      	ldrh	r3, [r7, #22]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	dcea      	bgt.n	8001732 <weigh+0x1e>
  }
  int32_t average = (int32_t)(total / samples);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	17da      	asrs	r2, r3, #31
 8001760:	469a      	mov	sl, r3
 8001762:	4693      	mov	fp, r2
 8001764:	4652      	mov	r2, sl
 8001766:	465b      	mov	r3, fp
 8001768:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800176c:	f7ff fc98 	bl	80010a0 <__aeabi_ldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
  coefficient = knownOriginal / knownHX711;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <weigh+0xb0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <weigh+0xb4>)
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fbca 	bl	8000f1c <__aeabi_fdiv>
 8001788:	4603      	mov	r3, r0
 800178a:	60bb      	str	r3, [r7, #8]
  milligram = (int)((average - tare)*1000)*coefficient;
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <weigh+0xb8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fab5 	bl	8000d0c <__aeabi_i2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb04 	bl	8000db4 <__aeabi_fmul>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fc50 	bl	8001054 <__aeabi_f2iz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	607b      	str	r3, [r7, #4]
  return milligram;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000004 	.word	0x20000004
 80017cc:	200001f8 	.word	0x200001f8

080017d0 <weighRaw>:

int32_t weighRaw()
{
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
  int64_t  total = 0;
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  samples = 150;
 80017e4:	2396      	movs	r3, #150	@ 0x96
 80017e6:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	81fb      	strh	r3, [r7, #14]
 80017ec:	e010      	b.n	8001810 <weighRaw+0x40>
  {
      total += getHX711();
 80017ee:	f7ff ff2f 	bl	8001650 <getHX711>
 80017f2:	4603      	mov	r3, r0
 80017f4:	17da      	asrs	r2, r3, #31
 80017f6:	461c      	mov	r4, r3
 80017f8:	4615      	mov	r5, r2
 80017fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017fe:	eb12 0804 	adds.w	r8, r2, r4
 8001802:	eb43 0905 	adc.w	r9, r3, r5
 8001806:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 800180a:	89fb      	ldrh	r3, [r7, #14]
 800180c:	3301      	adds	r3, #1
 800180e:	81fb      	strh	r3, [r7, #14]
 8001810:	89fb      	ldrh	r3, [r7, #14]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	dcea      	bgt.n	80017ee <weighRaw+0x1e>
  }
  int32_t average = (int32_t)(total / samples);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	17da      	asrs	r2, r3, #31
 800181c:	469a      	mov	sl, r3
 800181e:	4693      	mov	fp, r2
 8001820:	4652      	mov	r2, sl
 8001822:	465b      	mov	r3, fp
 8001824:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001828:	f7ff fc3a 	bl	80010a0 <__aeabi_ldivmod>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4613      	mov	r3, r2
 8001832:	607b      	str	r3, [r7, #4]
  return average;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001840 <setTare>:
/**
  * @brief  The application entry point.
  * @retval int
  */

void setTare(){
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
	printf("Gathering initial Tare of Load Cell...\n\r");
 8001846:	4813      	ldr	r0, [pc, #76]	@ (8001894 <setTare+0x54>)
 8001848:	f003 f8ce 	bl	80049e8 <iprintf>

	for(uint16_t i = 0; i < 4; i++){
 800184c:	2300      	movs	r3, #0
 800184e:	81fb      	strh	r3, [r7, #14]
 8001850:	e00c      	b.n	800186c <setTare+0x2c>
		int weight_temp = weighRaw();
 8001852:	f7ff ffbd 	bl	80017d0 <weighRaw>
 8001856:	6078      	str	r0, [r7, #4]
		printf("%d\n\r", weight_temp);
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	480f      	ldr	r0, [pc, #60]	@ (8001898 <setTare+0x58>)
 800185c:	f003 f8c4 	bl	80049e8 <iprintf>
		HAL_Delay(10);
 8001860:	200a      	movs	r0, #10
 8001862:	f000 fb69 	bl	8001f38 <HAL_Delay>
	for(uint16_t i = 0; i < 4; i++){
 8001866:	89fb      	ldrh	r3, [r7, #14]
 8001868:	3301      	adds	r3, #1
 800186a:	81fb      	strh	r3, [r7, #14]
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d9ef      	bls.n	8001852 <setTare+0x12>
	}

	HAL_Delay(100);
 8001872:	2064      	movs	r0, #100	@ 0x64
 8001874:	f000 fb60 	bl	8001f38 <HAL_Delay>
	int weight_tare = weighRaw();
 8001878:	f7ff ffaa 	bl	80017d0 <weighRaw>
 800187c:	60b8      	str	r0, [r7, #8]

	tare = weight_tare;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <setTare+0x5c>)
 8001882:	6013      	str	r3, [r2, #0]

	printf("Tare Set: %d\n\r", weight_tare);
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <setTare+0x60>)
 8001888:	f003 f8ae 	bl	80049e8 <iprintf>
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	08008dd0 	.word	0x08008dd0
 8001898:	08008dfc 	.word	0x08008dfc
 800189c:	200001f8 	.word	0x200001f8
 80018a0:	08008e04 	.word	0x08008e04

080018a4 <setOffset>:

void setOffset(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
	printf("Input the weight of the object in miligrams\n\r");
 80018aa:	4814      	ldr	r0, [pc, #80]	@ (80018fc <setOffset+0x58>)
 80018ac:	f003 f89c 	bl	80049e8 <iprintf>
	float tempOffsetWeight = 0;
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
	scanf("%f", &tempOffsetWeight);
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4811      	ldr	r0, [pc, #68]	@ (8001900 <setOffset+0x5c>)
 80018bc:	f003 f8a6 	bl	8004a0c <iscanf>

	knownOriginal = tempOffsetWeight;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <setOffset+0x60>)
 80018c4:	6013      	str	r3, [r2, #0]

	printf("Setting weight of the HX711 readable weight...\n\r");
 80018c6:	4810      	ldr	r0, [pc, #64]	@ (8001908 <setOffset+0x64>)
 80018c8:	f003 f88e 	bl	80049e8 <iprintf>

	HAL_Delay(10);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f000 fb33 	bl	8001f38 <HAL_Delay>
	int weight_offset = weighRaw();
 80018d2:	f7ff ff7d 	bl	80017d0 <weighRaw>
 80018d6:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 80018d8:	200a      	movs	r0, #10
 80018da:	f000 fb2d 	bl	8001f38 <HAL_Delay>

	printf("Read weight: %d\n\r", weight_offset);
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	480a      	ldr	r0, [pc, #40]	@ (800190c <setOffset+0x68>)
 80018e2:	f003 f881 	bl	80049e8 <iprintf>
	knownHX711 = weight_offset;
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fa10 	bl	8000d0c <__aeabi_i2f>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <setOffset+0x6c>)
 80018f0:	6013      	str	r3, [r2, #0]

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	08008e14 	.word	0x08008e14
 8001900:	08008e44 	.word	0x08008e44
 8001904:	20000000 	.word	0x20000000
 8001908:	08008e48 	.word	0x08008e48
 800190c:	08008e7c 	.word	0x08008e7c
 8001910:	20000004 	.word	0x20000004

08001914 <main>:

int main(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */

	//disables internal buffering for input stream for scanf
	setvbuf(stdin, NULL, _IONBF, 0);
 8001918:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <main+0x80>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6858      	ldr	r0, [r3, #4]
 800191e:	2300      	movs	r3, #0
 8001920:	2202      	movs	r2, #2
 8001922:	2100      	movs	r1, #0
 8001924:	f003 f884 	bl	8004a30 <setvbuf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001928:	f000 fa97 	bl	8001e5a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800192c:	f000 f83e 	bl	80019ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001930:	f7ff fdb2 	bl	8001498 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001934:	f000 f9fe 	bl	8001d34 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001938:	f000 f994 	bl	8001c64 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	printf("Hello from STM32 UART!\n\r");
 800193c:	4816      	ldr	r0, [pc, #88]	@ (8001998 <main+0x84>)
 800193e:	f003 f853 	bl	80049e8 <iprintf>

	HAL_TIM_Base_Start(&htim2);
 8001942:	4816      	ldr	r0, [pc, #88]	@ (800199c <main+0x88>)
 8001944:	f001 fbf4 	bl	8003130 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	2120      	movs	r1, #32
 800194c:	4814      	ldr	r0, [pc, #80]	@ (80019a0 <main+0x8c>)
 800194e:	f000 fda0 	bl	8002492 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001952:	200a      	movs	r0, #10
 8001954:	f000 faf0 	bl	8001f38 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2120      	movs	r1, #32
 800195c:	4810      	ldr	r0, [pc, #64]	@ (80019a0 <main+0x8c>)
 800195e:	f000 fd98 	bl	8002492 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001962:	200a      	movs	r0, #10
 8001964:	f000 fae8 	bl	8001f38 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	setTare();
 8001968:	f7ff ff6a 	bl	8001840 <setTare>
	setOffset();
 800196c:	f7ff ff9a 	bl	80018a4 <setOffset>


	while (1){
		weight = weigh();
 8001970:	f7ff fed0 	bl	8001714 <weigh>
 8001974:	4603      	mov	r3, r0
 8001976:	4a0b      	ldr	r2, [pc, #44]	@ (80019a4 <main+0x90>)
 8001978:	6013      	str	r3, [r2, #0]

		printf("weight = %d\n\r", weight);
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <main+0x90>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4619      	mov	r1, r3
 8001980:	4809      	ldr	r0, [pc, #36]	@ (80019a8 <main+0x94>)
 8001982:	f003 f831 	bl	80049e8 <iprintf>
		HAL_Delay(1000);
 8001986:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800198a:	f000 fad5 	bl	8001f38 <HAL_Delay>
		weight = weigh();
 800198e:	bf00      	nop
 8001990:	e7ee      	b.n	8001970 <main+0x5c>
 8001992:	bf00      	nop
 8001994:	20000020 	.word	0x20000020
 8001998:	08008e90 	.word	0x08008e90
 800199c:	20000204 	.word	0x20000204
 80019a0:	40020400 	.word	0x40020400
 80019a4:	200001fc 	.word	0x200001fc
 80019a8:	08008eac 	.word	0x08008eac

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b092      	sub	sp, #72	@ 0x48
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2234      	movs	r2, #52	@ 0x34
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f94f 	bl	8004c5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	463b      	mov	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <SystemClock_Config+0x98>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80019d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <SystemClock_Config+0x98>)
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019dc:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019de:	2302      	movs	r3, #2
 80019e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e2:	2301      	movs	r3, #1
 80019e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e6:	2310      	movs	r3, #16
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ee:	2300      	movs	r3, #0
 80019f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80019f2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80019f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80019f8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80019fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fd5e 	bl	80024c4 <HAL_RCC_OscConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a0e:	f000 f81b 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a12:	230f      	movs	r3, #15
 8001a14:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a16:	2303      	movs	r3, #3
 8001a18:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 f87a 	bl	8002b24 <HAL_RCC_ClockConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a36:	f000 f807 	bl	8001a48 <Error_Handler>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3748      	adds	r7, #72	@ 0x48
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40007000 	.word	0x40007000

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <Error_Handler+0x8>

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_MspInit+0x5c>)
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <HAL_MspInit+0x5c>)
 8001a60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a64:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_MspInit+0x5c>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_MspInit+0x5c>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab0 <HAL_MspInit+0x5c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_MspInit+0x5c>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_MspInit+0x5c>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <HAL_MspInit+0x5c>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a94:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a96:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <HAL_MspInit+0x5c>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aa2:	2007      	movs	r0, #7
 8001aa4:	f000 fb1a 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <NMI_Handler+0x4>

08001abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <MemManage_Handler+0x4>

08001acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b04:	f000 f9fc 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return 1;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <_kill>:

int _kill(int pid, int sig)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b24:	f003 f8ee 	bl	8004d04 <__errno>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2216      	movs	r2, #22
 8001b2c:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_exit>:

void _exit (int status)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b42:	f04f 31ff 	mov.w	r1, #4294967295
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffe7 	bl	8001b1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <_exit+0x12>

08001b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e00a      	b.n	8001b78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b62:	f7ff fd37 	bl	80015d4 <__io_getchar>
 8001b66:	4601      	mov	r1, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60ba      	str	r2, [r7, #8]
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbf0      	blt.n	8001b62 <_read+0x12>
  }

  return len;
 8001b80:	687b      	ldr	r3, [r7, #4]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb0:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_isatty>:

int _isatty(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
	...

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	@ (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f003 f872 	bl	8004d04 <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	@ (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20014000 	.word	0x20014000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	20000200 	.word	0x20000200
 8001c54:	200003e0 	.word	0x200003e0

08001c58 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <MX_TIM2_Init+0x94>)
 8001c82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <MX_TIM2_Init+0x94>)
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <MX_TIM2_Init+0x94>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c94:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <MX_TIM2_Init+0x94>)
 8001c96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <MX_TIM2_Init+0x94>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <MX_TIM2_Init+0x94>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ca8:	4813      	ldr	r0, [pc, #76]	@ (8001cf8 <MX_TIM2_Init+0x94>)
 8001caa:	f001 fa01 	bl	80030b0 <HAL_TIM_Base_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001cb4:	f7ff fec8 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480c      	ldr	r0, [pc, #48]	@ (8001cf8 <MX_TIM2_Init+0x94>)
 8001cc6:	f001 fa7d 	bl	80031c4 <HAL_TIM_ConfigClockSource>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001cd0:	f7ff feba 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <MX_TIM2_Init+0x94>)
 8001ce2:	f001 fc3d 	bl	8003560 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cec:	f7ff feac 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000204 	.word	0x20000204

08001cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0c:	d10b      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <HAL_TIM_Base_MspInit+0x34>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	4a07      	ldr	r2, [pc, #28]	@ (8001d30 <HAL_TIM_Base_MspInit+0x34>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6253      	str	r3, [r2, #36]	@ 0x24
 8001d1a:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_TIM_Base_MspInit+0x34>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40023800 	.word	0x40023800

08001d34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <MX_USART2_UART_Init+0x50>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d6c:	f001 fc56 	bl	800361c <HAL_UART_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d76:	f7ff fe67 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000244 	.word	0x20000244
 8001d84:	40004400 	.word	0x40004400

08001d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a17      	ldr	r2, [pc, #92]	@ (8001e04 <HAL_UART_MspInit+0x7c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d127      	bne.n	8001dfa <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <HAL_UART_MspInit+0x80>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	4a16      	ldr	r2, [pc, #88]	@ (8001e08 <HAL_UART_MspInit+0x80>)
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db4:	6253      	str	r3, [r2, #36]	@ 0x24
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_UART_MspInit+0x80>)
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <HAL_UART_MspInit+0x80>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a10      	ldr	r2, [pc, #64]	@ (8001e08 <HAL_UART_MspInit+0x80>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <HAL_UART_MspInit+0x80>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dda:	230c      	movs	r3, #12
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dea:	2307      	movs	r3, #7
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <HAL_UART_MspInit+0x84>)
 8001df6:	f000 f9a5 	bl	8002144 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	@ 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40004400 	.word	0x40004400
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000

08001e10 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e10:	f7ff ff22 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e14:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e16:	490c      	ldr	r1, [pc, #48]	@ (8001e48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e18:	4a0c      	ldr	r2, [pc, #48]	@ (8001e4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e1c:	e002      	b.n	8001e24 <LoopCopyDataInit>

08001e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e22:	3304      	adds	r3, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e28:	d3f9      	bcc.n	8001e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2a:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e2c:	4c09      	ldr	r4, [pc, #36]	@ (8001e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e30:	e001      	b.n	8001e36 <LoopFillZerobss>

08001e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e34:	3204      	adds	r2, #4

08001e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e38:	d3fb      	bcc.n	8001e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e3a:	f002 ff69 	bl	8004d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e3e:	f7ff fd69 	bl	8001914 <main>
  bx lr
 8001e42:	4770      	bx	lr
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e4c:	08009344 	.word	0x08009344
  ldr r2, =_sbss
 8001e50:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e54:	200003dc 	.word	0x200003dc

08001e58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC1_IRQHandler>

08001e5a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f939 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 f80e 	bl	8001e8c <HAL_InitTick>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	71fb      	strb	r3, [r7, #7]
 8001e7a:	e001      	b.n	8001e80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e7c:	f7ff fdea 	bl	8001a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e80:	79fb      	ldrb	r3, [r7, #7]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e98:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <HAL_InitTick+0x68>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d022      	beq.n	8001ee6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_InitTick+0x6c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <HAL_InitTick+0x68>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f938 	bl	800212a <HAL_SYSTICK_Config>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10f      	bne.n	8001ee0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	d809      	bhi.n	8001eda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ece:	f000 f910 	bl	80020f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <HAL_InitTick+0x70>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e007      	b.n	8001eea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e004      	b.n	8001eea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e001      	b.n	8001eea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	2000000c 	.word	0x2000000c

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_IncTick+0x1c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_IncTick+0x20>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a03      	ldr	r2, [pc, #12]	@ (8001f1c <HAL_IncTick+0x1c>)
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2000028c 	.word	0x2000028c
 8001f20:	20000010 	.word	0x20000010

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b02      	ldr	r3, [pc, #8]	@ (8001f34 <HAL_GetTick+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	2000028c 	.word	0x2000028c

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff fff0 	bl	8001f24 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d004      	beq.n	8001f5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <HAL_Delay+0x40>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f5c:	bf00      	nop
 8001f5e:	f7ff ffe1 	bl	8001f24 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d8f7      	bhi.n	8001f5e <HAL_Delay+0x26>
  {
  }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000010 	.word	0x20000010

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	@ (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	@ (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	@ 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	@ 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff90 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff49 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff5e 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff90 	bl	8002034 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5f 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffb0 	bl	8002098 <SysTick_Config>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800215a:	e160      	b.n	800241e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8152 	beq.w	8002418 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d005      	beq.n	800218c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002188:	2b02      	cmp	r3, #2
 800218a:	d130      	bne.n	80021ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80021c2:	2201      	movs	r2, #1
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	f003 0201 	and.w	r2, r3, #1
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d017      	beq.n	800222a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d123      	bne.n	800227e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3208      	adds	r2, #8
 800223e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002242:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	08da      	lsrs	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	6939      	ldr	r1, [r7, #16]
 800227a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0203 	and.w	r2, r3, #3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80ac 	beq.w	8002418 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c0:	4b5e      	ldr	r3, [pc, #376]	@ (800243c <HAL_GPIO_Init+0x2f8>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4a5d      	ldr	r2, [pc, #372]	@ (800243c <HAL_GPIO_Init+0x2f8>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6213      	str	r3, [r2, #32]
 80022cc:	4b5b      	ldr	r3, [pc, #364]	@ (800243c <HAL_GPIO_Init+0x2f8>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80022d8:	4a59      	ldr	r2, [pc, #356]	@ (8002440 <HAL_GPIO_Init+0x2fc>)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a51      	ldr	r2, [pc, #324]	@ (8002444 <HAL_GPIO_Init+0x300>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d025      	beq.n	8002350 <HAL_GPIO_Init+0x20c>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a50      	ldr	r2, [pc, #320]	@ (8002448 <HAL_GPIO_Init+0x304>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d01f      	beq.n	800234c <HAL_GPIO_Init+0x208>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a4f      	ldr	r2, [pc, #316]	@ (800244c <HAL_GPIO_Init+0x308>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d019      	beq.n	8002348 <HAL_GPIO_Init+0x204>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a4e      	ldr	r2, [pc, #312]	@ (8002450 <HAL_GPIO_Init+0x30c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_GPIO_Init+0x200>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a4d      	ldr	r2, [pc, #308]	@ (8002454 <HAL_GPIO_Init+0x310>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00d      	beq.n	8002340 <HAL_GPIO_Init+0x1fc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a4c      	ldr	r2, [pc, #304]	@ (8002458 <HAL_GPIO_Init+0x314>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d007      	beq.n	800233c <HAL_GPIO_Init+0x1f8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a4b      	ldr	r2, [pc, #300]	@ (800245c <HAL_GPIO_Init+0x318>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_GPIO_Init+0x1f4>
 8002334:	2306      	movs	r3, #6
 8002336:	e00c      	b.n	8002352 <HAL_GPIO_Init+0x20e>
 8002338:	2307      	movs	r3, #7
 800233a:	e00a      	b.n	8002352 <HAL_GPIO_Init+0x20e>
 800233c:	2305      	movs	r3, #5
 800233e:	e008      	b.n	8002352 <HAL_GPIO_Init+0x20e>
 8002340:	2304      	movs	r3, #4
 8002342:	e006      	b.n	8002352 <HAL_GPIO_Init+0x20e>
 8002344:	2303      	movs	r3, #3
 8002346:	e004      	b.n	8002352 <HAL_GPIO_Init+0x20e>
 8002348:	2302      	movs	r3, #2
 800234a:	e002      	b.n	8002352 <HAL_GPIO_Init+0x20e>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_GPIO_Init+0x20e>
 8002350:	2300      	movs	r3, #0
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	f002 0203 	and.w	r2, r2, #3
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	4093      	lsls	r3, r2
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002362:	4937      	ldr	r1, [pc, #220]	@ (8002440 <HAL_GPIO_Init+0x2fc>)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002370:	4b3b      	ldr	r3, [pc, #236]	@ (8002460 <HAL_GPIO_Init+0x31c>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002394:	4a32      	ldr	r2, [pc, #200]	@ (8002460 <HAL_GPIO_Init+0x31c>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239a:	4b31      	ldr	r3, [pc, #196]	@ (8002460 <HAL_GPIO_Init+0x31c>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023be:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <HAL_GPIO_Init+0x31c>)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c4:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <HAL_GPIO_Init+0x31c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <HAL_GPIO_Init+0x31c>)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002460 <HAL_GPIO_Init+0x31c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002412:	4a13      	ldr	r2, [pc, #76]	@ (8002460 <HAL_GPIO_Init+0x31c>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	f47f ae97 	bne.w	800215c <HAL_GPIO_Init+0x18>
  }
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40010000 	.word	0x40010000
 8002444:	40020000 	.word	0x40020000
 8002448:	40020400 	.word	0x40020400
 800244c:	40020800 	.word	0x40020800
 8002450:	40020c00 	.word	0x40020c00
 8002454:	40021000 	.word	0x40021000
 8002458:	40021400 	.word	0x40021400
 800245c:	40021800 	.word	0x40021800
 8002460:	40010400 	.word	0x40010400

08002464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	887b      	ldrh	r3, [r7, #2]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e001      	b.n	8002486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	807b      	strh	r3, [r7, #2]
 800249e:	4613      	mov	r3, r2
 80024a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024a2:	787b      	ldrb	r3, [r7, #1]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80024ae:	e003      	b.n	80024b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	041a      	lsls	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e31d      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	4b94      	ldr	r3, [pc, #592]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e0:	4b91      	ldr	r3, [pc, #580]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d07b      	beq.n	80025ee <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d006      	beq.n	800250a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d10f      	bne.n	8002522 <HAL_RCC_OscConfig+0x5e>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002508:	d10b      	bne.n	8002522 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250a:	4b87      	ldr	r3, [pc, #540]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d06a      	beq.n	80025ec <HAL_RCC_OscConfig+0x128>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d166      	bne.n	80025ec <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e2f7      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d106      	bne.n	8002538 <HAL_RCC_OscConfig+0x74>
 800252a:	4b7f      	ldr	r3, [pc, #508]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a7e      	ldr	r2, [pc, #504]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e02d      	b.n	8002594 <HAL_RCC_OscConfig+0xd0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x96>
 8002540:	4b79      	ldr	r3, [pc, #484]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a78      	ldr	r2, [pc, #480]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b76      	ldr	r3, [pc, #472]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a75      	ldr	r2, [pc, #468]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0xd0>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b05      	cmp	r3, #5
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0xb8>
 8002562:	4b71      	ldr	r3, [pc, #452]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a70      	ldr	r2, [pc, #448]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b6e      	ldr	r3, [pc, #440]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6d      	ldr	r2, [pc, #436]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0xd0>
 800257c:	4b6a      	ldr	r3, [pc, #424]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a69      	ldr	r2, [pc, #420]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b67      	ldr	r3, [pc, #412]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a66      	ldr	r2, [pc, #408]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff fcc2 	bl	8001f24 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff fcbe 	bl	8001f24 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	@ 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e2ad      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0xe0>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fcae 	bl	8001f24 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff fcaa 	bl	8001f24 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e299      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025de:	4b52      	ldr	r3, [pc, #328]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x108>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d05a      	beq.n	80026b0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d005      	beq.n	800260c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d119      	bne.n	800263a <HAL_RCC_OscConfig+0x176>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d116      	bne.n	800263a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260c:	4b46      	ldr	r3, [pc, #280]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_OscConfig+0x160>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e276      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4b40      	ldr	r3, [pc, #256]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	493d      	ldr	r1, [pc, #244]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002638:	e03a      	b.n	80026b0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d020      	beq.n	8002684 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002642:	4b3a      	ldr	r3, [pc, #232]	@ (800272c <HAL_RCC_OscConfig+0x268>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fc6c 	bl	8001f24 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff fc68 	bl	8001f24 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e257      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002662:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b2e      	ldr	r3, [pc, #184]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	492a      	ldr	r1, [pc, #168]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
 8002682:	e015      	b.n	80026b0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002684:	4b29      	ldr	r3, [pc, #164]	@ (800272c <HAL_RCC_OscConfig+0x268>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff fc4b 	bl	8001f24 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002692:	f7ff fc47 	bl	8001f24 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e236      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a4:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80b8 	beq.w	800282e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d170      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c4:	4b18      	ldr	r3, [pc, #96]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_OscConfig+0x218>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e21a      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d921      	bls.n	8002730 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fc7d 	bl	8002ff0 <RCC_SetFlashLatencyFromMSIRange>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e208      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4906      	ldr	r1, [pc, #24]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002712:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	061b      	lsls	r3, r3, #24
 8002720:	4901      	ldr	r1, [pc, #4]	@ (8002728 <HAL_RCC_OscConfig+0x264>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
 8002726:	e020      	b.n	800276a <HAL_RCC_OscConfig+0x2a6>
 8002728:	40023800 	.word	0x40023800
 800272c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002730:	4b99      	ldr	r3, [pc, #612]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4996      	ldr	r1, [pc, #600]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002742:	4b95      	ldr	r3, [pc, #596]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	061b      	lsls	r3, r3, #24
 8002750:	4991      	ldr	r1, [pc, #580]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fc48 	bl	8002ff0 <RCC_SetFlashLatencyFromMSIRange>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1d3      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	0b5b      	lsrs	r3, r3, #13
 8002770:	3301      	adds	r3, #1
 8002772:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800277a:	4a87      	ldr	r2, [pc, #540]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 800277c:	6892      	ldr	r2, [r2, #8]
 800277e:	0912      	lsrs	r2, r2, #4
 8002780:	f002 020f 	and.w	r2, r2, #15
 8002784:	4985      	ldr	r1, [pc, #532]	@ (800299c <HAL_RCC_OscConfig+0x4d8>)
 8002786:	5c8a      	ldrb	r2, [r1, r2]
 8002788:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800278a:	4a85      	ldr	r2, [pc, #532]	@ (80029a0 <HAL_RCC_OscConfig+0x4dc>)
 800278c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800278e:	4b85      	ldr	r3, [pc, #532]	@ (80029a4 <HAL_RCC_OscConfig+0x4e0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fb7a 	bl	8001e8c <HAL_InitTick>
 8002798:	4603      	mov	r3, r0
 800279a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d045      	beq.n	800282e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	e1b5      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d029      	beq.n	8002802 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027ae:	4b7e      	ldr	r3, [pc, #504]	@ (80029a8 <HAL_RCC_OscConfig+0x4e4>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff fbb6 	bl	8001f24 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027bc:	f7ff fbb2 	bl	8001f24 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1a1      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027ce:	4b72      	ldr	r3, [pc, #456]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027da:	4b6f      	ldr	r3, [pc, #444]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	496c      	ldr	r1, [pc, #432]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	4967      	ldr	r1, [pc, #412]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002802:	4b69      	ldr	r3, [pc, #420]	@ (80029a8 <HAL_RCC_OscConfig+0x4e4>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff fb8c 	bl	8001f24 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002810:	f7ff fb88 	bl	8001f24 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e177      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002822:	4b5d      	ldr	r3, [pc, #372]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d030      	beq.n	800289c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002842:	4b5a      	ldr	r3, [pc, #360]	@ (80029ac <HAL_RCC_OscConfig+0x4e8>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002848:	f7ff fb6c 	bl	8001f24 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002850:	f7ff fb68 	bl	8001f24 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e157      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002862:	4b4d      	ldr	r3, [pc, #308]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x38c>
 800286e:	e015      	b.n	800289c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002870:	4b4e      	ldr	r3, [pc, #312]	@ (80029ac <HAL_RCC_OscConfig+0x4e8>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7ff fb55 	bl	8001f24 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287e:	f7ff fb51 	bl	8001f24 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e140      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002890:	4b41      	ldr	r3, [pc, #260]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80b5 	beq.w	8002a14 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	4b37      	ldr	r3, [pc, #220]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	4a36      	ldr	r2, [pc, #216]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	6253      	str	r3, [r2, #36]	@ 0x24
 80028c6:	4b34      	ldr	r3, [pc, #208]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b36      	ldr	r3, [pc, #216]	@ (80029b0 <HAL_RCC_OscConfig+0x4ec>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b33      	ldr	r3, [pc, #204]	@ (80029b0 <HAL_RCC_OscConfig+0x4ec>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a32      	ldr	r2, [pc, #200]	@ (80029b0 <HAL_RCC_OscConfig+0x4ec>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7ff fb19 	bl	8001f24 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7ff fb15 	bl	8001f24 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	@ 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e104      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b29      	ldr	r3, [pc, #164]	@ (80029b0 <HAL_RCC_OscConfig+0x4ec>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x466>
 800291c:	4b1e      	ldr	r3, [pc, #120]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 800291e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002920:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002926:	6353      	str	r3, [r2, #52]	@ 0x34
 8002928:	e02d      	b.n	8002986 <HAL_RCC_OscConfig+0x4c2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x488>
 8002932:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002936:	4a18      	ldr	r2, [pc, #96]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800293c:	6353      	str	r3, [r2, #52]	@ 0x34
 800293e:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002942:	4a15      	ldr	r2, [pc, #84]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002944:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002948:	6353      	str	r3, [r2, #52]	@ 0x34
 800294a:	e01c      	b.n	8002986 <HAL_RCC_OscConfig+0x4c2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d10c      	bne.n	800296e <HAL_RCC_OscConfig+0x4aa>
 8002954:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002958:	4a0f      	ldr	r2, [pc, #60]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 800295a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800295e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002960:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002964:	4a0c      	ldr	r2, [pc, #48]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296a:	6353      	str	r3, [r2, #52]	@ 0x34
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0x4c2>
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002972:	4a09      	ldr	r2, [pc, #36]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002978:	6353      	str	r3, [r2, #52]	@ 0x34
 800297a:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 800297c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297e:	4a06      	ldr	r2, [pc, #24]	@ (8002998 <HAL_RCC_OscConfig+0x4d4>)
 8002980:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002984:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d024      	beq.n	80029d8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7ff fac9 	bl	8001f24 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002994:	e019      	b.n	80029ca <HAL_RCC_OscConfig+0x506>
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	08008ed4 	.word	0x08008ed4
 80029a0:	20000008 	.word	0x20000008
 80029a4:	2000000c 	.word	0x2000000c
 80029a8:	42470020 	.word	0x42470020
 80029ac:	42470680 	.word	0x42470680
 80029b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7ff fab6 	bl	8001f24 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0a3      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ca:	4b54      	ldr	r3, [pc, #336]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 80029cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ee      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4f0>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d8:	f7ff faa4 	bl	8001f24 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7ff faa0 	bl	8001f24 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e08d      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 80029f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ee      	bne.n	80029e0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a02:	7ffb      	ldrb	r3, [r7, #31]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	4a43      	ldr	r2, [pc, #268]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d079      	beq.n	8002b10 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d056      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d13b      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_RCC_OscConfig+0x65c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff fa78 	bl	8001f24 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a38:	f7ff fa74 	bl	8001f24 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e063      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a56:	4b31      	ldr	r3, [pc, #196]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	4319      	orrs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	492b      	ldr	r1, [pc, #172]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <HAL_RCC_OscConfig+0x65c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7ff fa53 	bl	8001f24 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a82:	f7ff fa4f 	bl	8001f24 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e03e      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a94:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x5be>
 8002aa0:	e036      	b.n	8002b10 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b20 <HAL_RCC_OscConfig+0x65c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fa3c 	bl	8001f24 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7ff fa38 	bl	8001f24 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e027      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ac2:	4b16      	ldr	r3, [pc, #88]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x5ec>
 8002ace:	e01f      	b.n	8002b10 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e01a      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <HAL_RCC_OscConfig+0x658>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d106      	bne.n	8002b0c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	42470060 	.word	0x42470060

08002b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e11a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b8f      	ldr	r3, [pc, #572]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d919      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x34>
 8002b4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a89      	ldr	r2, [pc, #548]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b87      	ldr	r3, [pc, #540]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 0201 	bic.w	r2, r3, #1
 8002b60:	4985      	ldr	r1, [pc, #532]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b68:	4b83      	ldr	r3, [pc, #524]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0f9      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b86:	4b7d      	ldr	r3, [pc, #500]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	497a      	ldr	r1, [pc, #488]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 808e 	beq.w	8002cc2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bae:	4b73      	ldr	r3, [pc, #460]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d121      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0d7      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d115      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0cb      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bde:	4b67      	ldr	r3, [pc, #412]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0bf      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bee:	4b63      	ldr	r3, [pc, #396]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0b7      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f023 0203 	bic.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	495c      	ldr	r1, [pc, #368]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c10:	f7ff f988 	bl	8001f24 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d112      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f7ff f980 	bl	8001f24 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e09b      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c36:	4b51      	ldr	r3, [pc, #324]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d1ee      	bne.n	8002c20 <HAL_RCC_ClockConfig+0xfc>
 8002c42:	e03e      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d112      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4e:	f7ff f969 	bl	8001f24 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e084      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c64:	4b45      	ldr	r3, [pc, #276]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d1ee      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x12a>
 8002c70:	e027      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d11d      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7c:	f7ff f952 	bl	8001f24 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e06d      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c92:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d1ee      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x158>
 8002c9e:	e010      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7ff f940 	bl	8001f24 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e05b      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cb6:	4b31      	ldr	r3, [pc, #196]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ee      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d219      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d105      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1be>
 8002cd6:	4b28      	ldr	r3, [pc, #160]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a27      	ldr	r2, [pc, #156]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b25      	ldr	r3, [pc, #148]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0201 	bic.w	r2, r3, #1
 8002cea:	4923      	ldr	r1, [pc, #140]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b21      	ldr	r3, [pc, #132]	@ (8002d78 <HAL_RCC_ClockConfig+0x254>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e034      	b.n	8002d6e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4917      	ldr	r1, [pc, #92]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2e:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490f      	ldr	r1, [pc, #60]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f823 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <HAL_RCC_ClockConfig+0x258>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490b      	ldr	r1, [pc, #44]	@ (8002d80 <HAL_RCC_ClockConfig+0x25c>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <HAL_RCC_ClockConfig+0x264>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f892 	bl	8001e8c <HAL_InitTick>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023c00 	.word	0x40023c00
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	08008ed4 	.word	0x08008ed4
 8002d84:	20000008 	.word	0x20000008
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d90:	b092      	sub	sp, #72	@ 0x48
 8002d92:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d94:	4b79      	ldr	r3, [pc, #484]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d00d      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	f200 80d5 	bhi.w	8002f54 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d002      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x28>
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x2e>
 8002db2:	e0cf      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b72      	ldr	r3, [pc, #456]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002db6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002db8:	e0da      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dba:	4b72      	ldr	r3, [pc, #456]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002dbc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002dbe:	e0d7      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002dca:	5c9b      	ldrb	r3, [r3, r2]
 8002dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dd0:	0d9b      	lsrs	r3, r3, #22
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dda:	4b68      	ldr	r3, [pc, #416]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d05d      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de8:	2200      	movs	r2, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	4611      	mov	r1, r2
 8002dee:	4604      	mov	r4, r0
 8002df0:	460d      	mov	r5, r1
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	1a51      	subs	r1, r2, r1
 8002e0e:	6139      	str	r1, [r7, #16]
 8002e10:	4629      	mov	r1, r5
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e24:	4659      	mov	r1, fp
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	4651      	mov	r1, sl
 8002e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e2e:	4651      	mov	r1, sl
 8002e30:	018a      	lsls	r2, r1, #6
 8002e32:	46d4      	mov	ip, sl
 8002e34:	ebb2 080c 	subs.w	r8, r2, ip
 8002e38:	4659      	mov	r1, fp
 8002e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e52:	4690      	mov	r8, r2
 8002e54:	4699      	mov	r9, r3
 8002e56:	4623      	mov	r3, r4
 8002e58:	eb18 0303 	adds.w	r3, r8, r3
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	462b      	mov	r3, r5
 8002e60:	eb49 0303 	adc.w	r3, r9, r3
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e72:	4629      	mov	r1, r5
 8002e74:	024b      	lsls	r3, r1, #9
 8002e76:	4620      	mov	r0, r4
 8002e78:	4629      	mov	r1, r5
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002e80:	4601      	mov	r1, r0
 8002e82:	024a      	lsls	r2, r1, #9
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e94:	f7fe f954 	bl	8001140 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea0:	e055      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002eaa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eae:	4642      	mov	r2, r8
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	0159      	lsls	r1, r3, #5
 8002ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec0:	0150      	lsls	r0, r2, #5
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	46c4      	mov	ip, r8
 8002ec8:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002ecc:	4640      	mov	r0, r8
 8002ece:	4649      	mov	r1, r9
 8002ed0:	468c      	mov	ip, r1
 8002ed2:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ee2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ee6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eea:	ebb2 040a 	subs.w	r4, r2, sl
 8002eee:	eb63 050b 	sbc.w	r5, r3, fp
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	00eb      	lsls	r3, r5, #3
 8002efc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f00:	00e2      	lsls	r2, r4, #3
 8002f02:	4614      	mov	r4, r2
 8002f04:	461d      	mov	r5, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	18e3      	adds	r3, r4, r3
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	eb45 0303 	adc.w	r3, r5, r3
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f20:	4629      	mov	r1, r5
 8002f22:	028b      	lsls	r3, r1, #10
 8002f24:	4620      	mov	r0, r4
 8002f26:	4629      	mov	r1, r5
 8002f28:	4604      	mov	r4, r0
 8002f2a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002f2e:	4601      	mov	r1, r0
 8002f30:	028a      	lsls	r2, r1, #10
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f38:	2200      	movs	r2, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	61fa      	str	r2, [r7, #28]
 8002f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f42:	f7fe f8fd 	bl	8001140 <__aeabi_uldivmod>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8002f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f50:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002f52:	e00d      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	0b5b      	lsrs	r3, r3, #13
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	3301      	adds	r3, #1
 8002f64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002f6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3748      	adds	r7, #72	@ 0x48
 8002f76:	46bd      	mov	sp, r7
 8002f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	007a1200 	.word	0x007a1200
 8002f88:	08008ec8 	.word	0x08008ec8

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b02      	ldr	r3, [pc, #8]	@ (8002f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	20000008 	.word	0x20000008

08002fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fa4:	f7ff fff2 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	4903      	ldr	r1, [pc, #12]	@ (8002fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	08008ee4 	.word	0x08008ee4

08002fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fcc:	f7ff ffde 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	0adb      	lsrs	r3, r3, #11
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4903      	ldr	r1, [pc, #12]	@ (8002fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	08008ee4 	.word	0x08008ee4

08002ff0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ffc:	4b29      	ldr	r3, [pc, #164]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d12c      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003008:	4b26      	ldr	r3, [pc, #152]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003014:	4b24      	ldr	r3, [pc, #144]	@ (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e016      	b.n	800304e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003020:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800302a:	6253      	str	r3, [r2, #36]	@ 0x24
 800302c:	4b1d      	ldr	r3, [pc, #116]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003040:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003042:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	4a17      	ldr	r2, [pc, #92]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003054:	d105      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800305c:	d101      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800305e:	2301      	movs	r3, #1
 8003060:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003068:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0f      	ldr	r2, [pc, #60]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b0d      	ldr	r3, [pc, #52]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 0201 	bic.w	r2, r3, #1
 800307c:	490b      	ldr	r1, [pc, #44]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	429a      	cmp	r2, r3
 8003090:	d001      	beq.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40007000 	.word	0x40007000
 80030ac:	40023c00 	.word	0x40023c00

080030b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e031      	b.n	8003126 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe fe10 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f000 f930 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d001      	beq.n	8003148 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003158:	d00e      	beq.n	8003178 <HAL_TIM_Base_Start+0x48>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a16      	ldr	r2, [pc, #88]	@ (80031b8 <HAL_TIM_Base_Start+0x88>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_TIM_Base_Start+0x48>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a14      	ldr	r2, [pc, #80]	@ (80031bc <HAL_TIM_Base_Start+0x8c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_TIM_Base_Start+0x48>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a13      	ldr	r2, [pc, #76]	@ (80031c0 <HAL_TIM_Base_Start+0x90>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d111      	bne.n	800319c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b06      	cmp	r3, #6
 8003188:	d010      	beq.n	80031ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	e007      	b.n	80031ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40010800 	.word	0x40010800

080031c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_ConfigClockSource+0x1c>
 80031dc:	2302      	movs	r3, #2
 80031de:	e0b4      	b.n	800334a <HAL_TIM_ConfigClockSource+0x186>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003218:	d03e      	beq.n	8003298 <HAL_TIM_ConfigClockSource+0xd4>
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321e:	f200 8087 	bhi.w	8003330 <HAL_TIM_ConfigClockSource+0x16c>
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003226:	f000 8086 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x172>
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322e:	d87f      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x16c>
 8003230:	2b70      	cmp	r3, #112	@ 0x70
 8003232:	d01a      	beq.n	800326a <HAL_TIM_ConfigClockSource+0xa6>
 8003234:	2b70      	cmp	r3, #112	@ 0x70
 8003236:	d87b      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x16c>
 8003238:	2b60      	cmp	r3, #96	@ 0x60
 800323a:	d050      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x11a>
 800323c:	2b60      	cmp	r3, #96	@ 0x60
 800323e:	d877      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x16c>
 8003240:	2b50      	cmp	r3, #80	@ 0x50
 8003242:	d03c      	beq.n	80032be <HAL_TIM_ConfigClockSource+0xfa>
 8003244:	2b50      	cmp	r3, #80	@ 0x50
 8003246:	d873      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x16c>
 8003248:	2b40      	cmp	r3, #64	@ 0x40
 800324a:	d058      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x13a>
 800324c:	2b40      	cmp	r3, #64	@ 0x40
 800324e:	d86f      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x16c>
 8003250:	2b30      	cmp	r3, #48	@ 0x30
 8003252:	d064      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15a>
 8003254:	2b30      	cmp	r3, #48	@ 0x30
 8003256:	d86b      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b20      	cmp	r3, #32
 800325a:	d060      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15a>
 800325c:	2b20      	cmp	r3, #32
 800325e:	d867      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d05c      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15a>
 8003264:	2b10      	cmp	r3, #16
 8003266:	d05a      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15a>
 8003268:	e062      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800327a:	f000 f952 	bl	8003522 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800328c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	609a      	str	r2, [r3, #8]
      break;
 8003296:	e04f      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032a8:	f000 f93b 	bl	8003522 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032ba:	609a      	str	r2, [r3, #8]
      break;
 80032bc:	e03c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	461a      	mov	r2, r3
 80032cc:	f000 f8b2 	bl	8003434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2150      	movs	r1, #80	@ 0x50
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f909 	bl	80034ee <TIM_ITRx_SetConfig>
      break;
 80032dc:	e02c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ea:	461a      	mov	r2, r3
 80032ec:	f000 f8d0 	bl	8003490 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2160      	movs	r1, #96	@ 0x60
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f8f9 	bl	80034ee <TIM_ITRx_SetConfig>
      break;
 80032fc:	e01c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330a:	461a      	mov	r2, r3
 800330c:	f000 f892 	bl	8003434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2140      	movs	r1, #64	@ 0x40
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f8e9 	bl	80034ee <TIM_ITRx_SetConfig>
      break;
 800331c:	e00c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f000 f8e0 	bl	80034ee <TIM_ITRx_SetConfig>
      break;
 800332e:	e003      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      break;
 8003334:	e000      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800336a:	d00f      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a2b      	ldr	r2, [pc, #172]	@ (800341c <TIM_Base_SetConfig+0xc8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a2a      	ldr	r2, [pc, #168]	@ (8003420 <TIM_Base_SetConfig+0xcc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a29      	ldr	r2, [pc, #164]	@ (8003424 <TIM_Base_SetConfig+0xd0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a28      	ldr	r2, [pc, #160]	@ (8003428 <TIM_Base_SetConfig+0xd4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a4:	d017      	beq.n	80033d6 <TIM_Base_SetConfig+0x82>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <TIM_Base_SetConfig+0xc8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <TIM_Base_SetConfig+0x82>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <TIM_Base_SetConfig+0xcc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00f      	beq.n	80033d6 <TIM_Base_SetConfig+0x82>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003424 <TIM_Base_SetConfig+0xd0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <TIM_Base_SetConfig+0x82>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a19      	ldr	r2, [pc, #100]	@ (8003428 <TIM_Base_SetConfig+0xd4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <TIM_Base_SetConfig+0x82>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a18      	ldr	r2, [pc, #96]	@ (800342c <TIM_Base_SetConfig+0xd8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_Base_SetConfig+0x82>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a17      	ldr	r2, [pc, #92]	@ (8003430 <TIM_Base_SetConfig+0xdc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d108      	bne.n	80033e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	615a      	str	r2, [r3, #20]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800
 8003424:	40000c00 	.word	0x40000c00
 8003428:	40010800 	.word	0x40010800
 800342c:	40010c00 	.word	0x40010c00
 8003430:	40011000 	.word	0x40011000

08003434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0201 	bic.w	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800345e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f023 030a 	bic.w	r3, r3, #10
 8003470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f023 0210 	bic.w	r2, r3, #16
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	031b      	lsls	r3, r3, #12
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	621a      	str	r2, [r3, #32]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	f043 0307 	orr.w	r3, r3, #7
 8003510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003522:	b480      	push	{r7}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800353c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	021a      	lsls	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	431a      	orrs	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4313      	orrs	r3, r2
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	609a      	str	r2, [r3, #8]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003574:	2302      	movs	r3, #2
 8003576:	e046      	b.n	8003606 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800359e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ba:	d00e      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a13      	ldr	r2, [pc, #76]	@ (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a12      	ldr	r2, [pc, #72]	@ (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a10      	ldr	r2, [pc, #64]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d10c      	bne.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40010800 	.word	0x40010800

0800361c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e042      	b.n	80036b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fe fba0 	bl	8001d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	@ 0x24
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800365e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f9af 	bl	80039c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	@ 0x28
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d16d      	bne.n	80037b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_UART_Transmit+0x2c>
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e066      	b.n	80037ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2221      	movs	r2, #33	@ 0x21
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036fa:	f7fe fc13 	bl	8001f24 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003714:	d108      	bne.n	8003728 <HAL_UART_Transmit+0x6c>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	e003      	b.n	8003730 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800372c:	2300      	movs	r3, #0
 800372e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003730:	e02a      	b.n	8003788 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	2180      	movs	r1, #128	@ 0x80
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f8d2 	bl	80038e6 <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e036      	b.n	80037ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	3302      	adds	r3, #2
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	e007      	b.n	800377a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	3301      	adds	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1cf      	bne.n	8003732 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2140      	movs	r1, #64	@ 0x40
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f8a2 	bl	80038e6 <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e006      	b.n	80037ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b08a      	sub	sp, #40	@ 0x28
 80037c6:	af02      	add	r7, sp, #8
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d17c      	bne.n	80038dc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_UART_Receive+0x2c>
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e075      	b.n	80038de <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2222      	movs	r2, #34	@ 0x22
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003806:	f7fe fb8d 	bl	8001f24 <HAL_GetTick>
 800380a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	88fa      	ldrh	r2, [r7, #6]
 8003816:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003820:	d108      	bne.n	8003834 <HAL_UART_Receive+0x72>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d104      	bne.n	8003834 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	e003      	b.n	800383c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800383c:	e043      	b.n	80038c6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	2120      	movs	r1, #32
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f84c 	bl	80038e6 <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e042      	b.n	80038de <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10c      	bne.n	8003878 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386a:	b29a      	uxth	r2, r3
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	3302      	adds	r3, #2
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e01f      	b.n	80038b8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003880:	d007      	beq.n	8003892 <HAL_UART_Receive+0xd0>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <HAL_UART_Receive+0xde>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e008      	b.n	80038b2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1b6      	bne.n	800383e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b090      	sub	sp, #64	@ 0x40
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f6:	e050      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d04c      	beq.n	800399a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <UART_WaitOnFlagUntilTimeout+0x30>
 8003906:	f7fe fb0d 	bl	8001f24 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003912:	429a      	cmp	r2, r3
 8003914:	d241      	bcs.n	800399a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003936:	637a      	str	r2, [r7, #52]	@ 0x34
 8003938:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800393c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e5      	bne.n	8003916 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	613b      	str	r3, [r7, #16]
   return(result);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800396a:	623a      	str	r2, [r7, #32]
 800396c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	69f9      	ldr	r1, [r7, #28]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	61bb      	str	r3, [r7, #24]
   return(result);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e5      	bne.n	800394a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e00f      	b.n	80039ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d09f      	beq.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3740      	adds	r7, #64	@ 0x40
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003a04:	f023 030c 	bic.w	r3, r3, #12
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a55      	ldr	r2, [pc, #340]	@ (8003b84 <UART_SetConfig+0x1c0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d103      	bne.n	8003a3a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a32:	f7ff fac9 	bl	8002fc8 <HAL_RCC_GetPCLK2Freq>
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	e002      	b.n	8003a40 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a3a:	f7ff fab1 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8003a3e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a48:	d14c      	bne.n	8003ae4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	4a49      	ldr	r2, [pc, #292]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	0119      	lsls	r1, r3, #4
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009a      	lsls	r2, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a80:	4b41      	ldr	r3, [pc, #260]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003a82:	fba3 0302 	umull	r0, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	2064      	movs	r0, #100	@ 0x64
 8003a8a:	fb00 f303 	mul.w	r3, r0, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	3332      	adds	r3, #50	@ 0x32
 8003a94:	4a3c      	ldr	r2, [pc, #240]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003aa2:	4419      	add	r1, r3
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009a      	lsls	r2, r3, #2
 8003aae:	441a      	add	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aba:	4b33      	ldr	r3, [pc, #204]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003abc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	2064      	movs	r0, #100	@ 0x64
 8003ac4:	fb00 f303 	mul.w	r3, r0, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	3332      	adds	r3, #50	@ 0x32
 8003ace:	4a2e      	ldr	r2, [pc, #184]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	f003 0207 	and.w	r2, r3, #7
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	440a      	add	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ae2:	e04a      	b.n	8003b7a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009a      	lsls	r2, r3, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	4a23      	ldr	r2, [pc, #140]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	0119      	lsls	r1, r3, #4
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009a      	lsls	r2, r3, #2
 8003b0e:	441a      	add	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003b1c:	fba3 0302 	umull	r0, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	2064      	movs	r0, #100	@ 0x64
 8003b24:	fb00 f303 	mul.w	r3, r0, r3
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	3332      	adds	r3, #50	@ 0x32
 8003b2e:	4a16      	ldr	r2, [pc, #88]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b3a:	4419      	add	r1, r3
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	009a      	lsls	r2, r3, #2
 8003b46:	441a      	add	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003b54:	fba3 0302 	umull	r0, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2064      	movs	r0, #100	@ 0x64
 8003b5c:	fb00 f303 	mul.w	r3, r0, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	3332      	adds	r3, #50	@ 0x32
 8003b66:	4a08      	ldr	r2, [pc, #32]	@ (8003b88 <UART_SetConfig+0x1c4>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	440a      	add	r2, r1
 8003b78:	609a      	str	r2, [r3, #8]
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40013800 	.word	0x40013800
 8003b88:	51eb851f 	.word	0x51eb851f

08003b8c <__cvt>:
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b92:	461d      	mov	r5, r3
 8003b94:	bfbb      	ittet	lt
 8003b96:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003b9a:	461d      	movlt	r5, r3
 8003b9c:	2300      	movge	r3, #0
 8003b9e:	232d      	movlt	r3, #45	@ 0x2d
 8003ba0:	b088      	sub	sp, #32
 8003ba2:	4614      	mov	r4, r2
 8003ba4:	bfb8      	it	lt
 8003ba6:	4614      	movlt	r4, r2
 8003ba8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003baa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003bac:	7013      	strb	r3, [r2, #0]
 8003bae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003bb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003bb4:	f023 0820 	bic.w	r8, r3, #32
 8003bb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003bbc:	d005      	beq.n	8003bca <__cvt+0x3e>
 8003bbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003bc2:	d100      	bne.n	8003bc6 <__cvt+0x3a>
 8003bc4:	3601      	adds	r6, #1
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e000      	b.n	8003bcc <__cvt+0x40>
 8003bca:	2303      	movs	r3, #3
 8003bcc:	aa07      	add	r2, sp, #28
 8003bce:	9204      	str	r2, [sp, #16]
 8003bd0:	aa06      	add	r2, sp, #24
 8003bd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003bd6:	e9cd 3600 	strd	r3, r6, [sp]
 8003bda:	4622      	mov	r2, r4
 8003bdc:	462b      	mov	r3, r5
 8003bde:	f001 f95b 	bl	8004e98 <_dtoa_r>
 8003be2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003be6:	4607      	mov	r7, r0
 8003be8:	d119      	bne.n	8003c1e <__cvt+0x92>
 8003bea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003bec:	07db      	lsls	r3, r3, #31
 8003bee:	d50e      	bpl.n	8003c0e <__cvt+0x82>
 8003bf0:	eb00 0906 	add.w	r9, r0, r6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f7fc feec 	bl	80009d8 <__aeabi_dcmpeq>
 8003c00:	b108      	cbz	r0, 8003c06 <__cvt+0x7a>
 8003c02:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c06:	2230      	movs	r2, #48	@ 0x30
 8003c08:	9b07      	ldr	r3, [sp, #28]
 8003c0a:	454b      	cmp	r3, r9
 8003c0c:	d31e      	bcc.n	8003c4c <__cvt+0xc0>
 8003c0e:	4638      	mov	r0, r7
 8003c10:	9b07      	ldr	r3, [sp, #28]
 8003c12:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003c14:	1bdb      	subs	r3, r3, r7
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	b008      	add	sp, #32
 8003c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c22:	eb00 0906 	add.w	r9, r0, r6
 8003c26:	d1e5      	bne.n	8003bf4 <__cvt+0x68>
 8003c28:	7803      	ldrb	r3, [r0, #0]
 8003c2a:	2b30      	cmp	r3, #48	@ 0x30
 8003c2c:	d10a      	bne.n	8003c44 <__cvt+0xb8>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2300      	movs	r3, #0
 8003c32:	4620      	mov	r0, r4
 8003c34:	4629      	mov	r1, r5
 8003c36:	f7fc fecf 	bl	80009d8 <__aeabi_dcmpeq>
 8003c3a:	b918      	cbnz	r0, 8003c44 <__cvt+0xb8>
 8003c3c:	f1c6 0601 	rsb	r6, r6, #1
 8003c40:	f8ca 6000 	str.w	r6, [sl]
 8003c44:	f8da 3000 	ldr.w	r3, [sl]
 8003c48:	4499      	add	r9, r3
 8003c4a:	e7d3      	b.n	8003bf4 <__cvt+0x68>
 8003c4c:	1c59      	adds	r1, r3, #1
 8003c4e:	9107      	str	r1, [sp, #28]
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	e7d9      	b.n	8003c08 <__cvt+0x7c>

08003c54 <__exponent>:
 8003c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c56:	2900      	cmp	r1, #0
 8003c58:	bfb6      	itet	lt
 8003c5a:	232d      	movlt	r3, #45	@ 0x2d
 8003c5c:	232b      	movge	r3, #43	@ 0x2b
 8003c5e:	4249      	neglt	r1, r1
 8003c60:	2909      	cmp	r1, #9
 8003c62:	7002      	strb	r2, [r0, #0]
 8003c64:	7043      	strb	r3, [r0, #1]
 8003c66:	dd29      	ble.n	8003cbc <__exponent+0x68>
 8003c68:	f10d 0307 	add.w	r3, sp, #7
 8003c6c:	461d      	mov	r5, r3
 8003c6e:	270a      	movs	r7, #10
 8003c70:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c74:	461a      	mov	r2, r3
 8003c76:	fb07 1416 	mls	r4, r7, r6, r1
 8003c7a:	3430      	adds	r4, #48	@ 0x30
 8003c7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c80:	460c      	mov	r4, r1
 8003c82:	2c63      	cmp	r4, #99	@ 0x63
 8003c84:	4631      	mov	r1, r6
 8003c86:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c8a:	dcf1      	bgt.n	8003c70 <__exponent+0x1c>
 8003c8c:	3130      	adds	r1, #48	@ 0x30
 8003c8e:	1e94      	subs	r4, r2, #2
 8003c90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c94:	4623      	mov	r3, r4
 8003c96:	1c41      	adds	r1, r0, #1
 8003c98:	42ab      	cmp	r3, r5
 8003c9a:	d30a      	bcc.n	8003cb2 <__exponent+0x5e>
 8003c9c:	f10d 0309 	add.w	r3, sp, #9
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	42ac      	cmp	r4, r5
 8003ca4:	bf88      	it	hi
 8003ca6:	2300      	movhi	r3, #0
 8003ca8:	3302      	adds	r3, #2
 8003caa:	4403      	add	r3, r0
 8003cac:	1a18      	subs	r0, r3, r0
 8003cae:	b003      	add	sp, #12
 8003cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003cb6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003cba:	e7ed      	b.n	8003c98 <__exponent+0x44>
 8003cbc:	2330      	movs	r3, #48	@ 0x30
 8003cbe:	3130      	adds	r1, #48	@ 0x30
 8003cc0:	7083      	strb	r3, [r0, #2]
 8003cc2:	70c1      	strb	r1, [r0, #3]
 8003cc4:	1d03      	adds	r3, r0, #4
 8003cc6:	e7f1      	b.n	8003cac <__exponent+0x58>

08003cc8 <_printf_float>:
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	b091      	sub	sp, #68	@ 0x44
 8003cce:	460c      	mov	r4, r1
 8003cd0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003cd4:	4616      	mov	r6, r2
 8003cd6:	461f      	mov	r7, r3
 8003cd8:	4605      	mov	r5, r0
 8003cda:	f000 ffc9 	bl	8004c70 <_localeconv_r>
 8003cde:	6803      	ldr	r3, [r0, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	9308      	str	r3, [sp, #32]
 8003ce4:	f7fc fa4c 	bl	8000180 <strlen>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	930e      	str	r3, [sp, #56]	@ 0x38
 8003cec:	f8d8 3000 	ldr.w	r3, [r8]
 8003cf0:	9009      	str	r0, [sp, #36]	@ 0x24
 8003cf2:	3307      	adds	r3, #7
 8003cf4:	f023 0307 	bic.w	r3, r3, #7
 8003cf8:	f103 0208 	add.w	r2, r3, #8
 8003cfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d00:	f8d4 b000 	ldr.w	fp, [r4]
 8003d04:	f8c8 2000 	str.w	r2, [r8]
 8003d08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d12:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003d16:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003d22:	4b9c      	ldr	r3, [pc, #624]	@ (8003f94 <_printf_float+0x2cc>)
 8003d24:	f7fc fe8a 	bl	8000a3c <__aeabi_dcmpun>
 8003d28:	bb70      	cbnz	r0, 8003d88 <_printf_float+0xc0>
 8003d2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d32:	4b98      	ldr	r3, [pc, #608]	@ (8003f94 <_printf_float+0x2cc>)
 8003d34:	f7fc fe64 	bl	8000a00 <__aeabi_dcmple>
 8003d38:	bb30      	cbnz	r0, 8003d88 <_printf_float+0xc0>
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	4640      	mov	r0, r8
 8003d40:	4649      	mov	r1, r9
 8003d42:	f7fc fe53 	bl	80009ec <__aeabi_dcmplt>
 8003d46:	b110      	cbz	r0, 8003d4e <_printf_float+0x86>
 8003d48:	232d      	movs	r3, #45	@ 0x2d
 8003d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d4e:	4a92      	ldr	r2, [pc, #584]	@ (8003f98 <_printf_float+0x2d0>)
 8003d50:	4b92      	ldr	r3, [pc, #584]	@ (8003f9c <_printf_float+0x2d4>)
 8003d52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003d56:	bf94      	ite	ls
 8003d58:	4690      	movls	r8, r2
 8003d5a:	4698      	movhi	r8, r3
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	f04f 0900 	mov.w	r9, #0
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	f02b 0304 	bic.w	r3, fp, #4
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	4633      	mov	r3, r6
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	4628      	mov	r0, r5
 8003d70:	9700      	str	r7, [sp, #0]
 8003d72:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003d74:	f000 f9d4 	bl	8004120 <_printf_common>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	f040 8090 	bne.w	8003e9e <_printf_float+0x1d6>
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d82:	b011      	add	sp, #68	@ 0x44
 8003d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d88:	4642      	mov	r2, r8
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	4640      	mov	r0, r8
 8003d8e:	4649      	mov	r1, r9
 8003d90:	f7fc fe54 	bl	8000a3c <__aeabi_dcmpun>
 8003d94:	b148      	cbz	r0, 8003daa <_printf_float+0xe2>
 8003d96:	464b      	mov	r3, r9
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bfb8      	it	lt
 8003d9c:	232d      	movlt	r3, #45	@ 0x2d
 8003d9e:	4a80      	ldr	r2, [pc, #512]	@ (8003fa0 <_printf_float+0x2d8>)
 8003da0:	bfb8      	it	lt
 8003da2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003da6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa4 <_printf_float+0x2dc>)
 8003da8:	e7d3      	b.n	8003d52 <_printf_float+0x8a>
 8003daa:	6863      	ldr	r3, [r4, #4]
 8003dac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	d13f      	bne.n	8003e34 <_printf_float+0x16c>
 8003db4:	2306      	movs	r3, #6
 8003db6:	6063      	str	r3, [r4, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003dbe:	6023      	str	r3, [r4, #0]
 8003dc0:	9206      	str	r2, [sp, #24]
 8003dc2:	aa0e      	add	r2, sp, #56	@ 0x38
 8003dc4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003dc8:	aa0d      	add	r2, sp, #52	@ 0x34
 8003dca:	9203      	str	r2, [sp, #12]
 8003dcc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003dd0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003dd4:	6863      	ldr	r3, [r4, #4]
 8003dd6:	4642      	mov	r2, r8
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4628      	mov	r0, r5
 8003ddc:	464b      	mov	r3, r9
 8003dde:	910a      	str	r1, [sp, #40]	@ 0x28
 8003de0:	f7ff fed4 	bl	8003b8c <__cvt>
 8003de4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003de6:	4680      	mov	r8, r0
 8003de8:	2947      	cmp	r1, #71	@ 0x47
 8003dea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003dec:	d128      	bne.n	8003e40 <_printf_float+0x178>
 8003dee:	1cc8      	adds	r0, r1, #3
 8003df0:	db02      	blt.n	8003df8 <_printf_float+0x130>
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	4299      	cmp	r1, r3
 8003df6:	dd40      	ble.n	8003e7a <_printf_float+0x1b2>
 8003df8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003dfc:	fa5f fa8a 	uxtb.w	sl, sl
 8003e00:	4652      	mov	r2, sl
 8003e02:	3901      	subs	r1, #1
 8003e04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e08:	910d      	str	r1, [sp, #52]	@ 0x34
 8003e0a:	f7ff ff23 	bl	8003c54 <__exponent>
 8003e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e10:	4681      	mov	r9, r0
 8003e12:	1813      	adds	r3, r2, r0
 8003e14:	2a01      	cmp	r2, #1
 8003e16:	6123      	str	r3, [r4, #16]
 8003e18:	dc02      	bgt.n	8003e20 <_printf_float+0x158>
 8003e1a:	6822      	ldr	r2, [r4, #0]
 8003e1c:	07d2      	lsls	r2, r2, #31
 8003e1e:	d501      	bpl.n	8003e24 <_printf_float+0x15c>
 8003e20:	3301      	adds	r3, #1
 8003e22:	6123      	str	r3, [r4, #16]
 8003e24:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d09e      	beq.n	8003d6a <_printf_float+0xa2>
 8003e2c:	232d      	movs	r3, #45	@ 0x2d
 8003e2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e32:	e79a      	b.n	8003d6a <_printf_float+0xa2>
 8003e34:	2947      	cmp	r1, #71	@ 0x47
 8003e36:	d1bf      	bne.n	8003db8 <_printf_float+0xf0>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1bd      	bne.n	8003db8 <_printf_float+0xf0>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e7ba      	b.n	8003db6 <_printf_float+0xee>
 8003e40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e44:	d9dc      	bls.n	8003e00 <_printf_float+0x138>
 8003e46:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003e4a:	d118      	bne.n	8003e7e <_printf_float+0x1b6>
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	6863      	ldr	r3, [r4, #4]
 8003e50:	dd0b      	ble.n	8003e6a <_printf_float+0x1a2>
 8003e52:	6121      	str	r1, [r4, #16]
 8003e54:	b913      	cbnz	r3, 8003e5c <_printf_float+0x194>
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	07d0      	lsls	r0, r2, #31
 8003e5a:	d502      	bpl.n	8003e62 <_printf_float+0x19a>
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	440b      	add	r3, r1
 8003e60:	6123      	str	r3, [r4, #16]
 8003e62:	f04f 0900 	mov.w	r9, #0
 8003e66:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e68:	e7dc      	b.n	8003e24 <_printf_float+0x15c>
 8003e6a:	b913      	cbnz	r3, 8003e72 <_printf_float+0x1aa>
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	07d2      	lsls	r2, r2, #31
 8003e70:	d501      	bpl.n	8003e76 <_printf_float+0x1ae>
 8003e72:	3302      	adds	r3, #2
 8003e74:	e7f4      	b.n	8003e60 <_printf_float+0x198>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e7f2      	b.n	8003e60 <_printf_float+0x198>
 8003e7a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003e7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e80:	4299      	cmp	r1, r3
 8003e82:	db05      	blt.n	8003e90 <_printf_float+0x1c8>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	6121      	str	r1, [r4, #16]
 8003e88:	07d8      	lsls	r0, r3, #31
 8003e8a:	d5ea      	bpl.n	8003e62 <_printf_float+0x19a>
 8003e8c:	1c4b      	adds	r3, r1, #1
 8003e8e:	e7e7      	b.n	8003e60 <_printf_float+0x198>
 8003e90:	2900      	cmp	r1, #0
 8003e92:	bfcc      	ite	gt
 8003e94:	2201      	movgt	r2, #1
 8003e96:	f1c1 0202 	rsble	r2, r1, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	e7e0      	b.n	8003e60 <_printf_float+0x198>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	055a      	lsls	r2, r3, #21
 8003ea2:	d407      	bmi.n	8003eb4 <_printf_float+0x1ec>
 8003ea4:	6923      	ldr	r3, [r4, #16]
 8003ea6:	4642      	mov	r2, r8
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4628      	mov	r0, r5
 8003eac:	47b8      	blx	r7
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d12b      	bne.n	8003f0a <_printf_float+0x242>
 8003eb2:	e764      	b.n	8003d7e <_printf_float+0xb6>
 8003eb4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003eb8:	f240 80dc 	bls.w	8004074 <_printf_float+0x3ac>
 8003ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f7fc fd88 	bl	80009d8 <__aeabi_dcmpeq>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d033      	beq.n	8003f34 <_printf_float+0x26c>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	4631      	mov	r1, r6
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	4a35      	ldr	r2, [pc, #212]	@ (8003fa8 <_printf_float+0x2e0>)
 8003ed4:	47b8      	blx	r7
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f43f af51 	beq.w	8003d7e <_printf_float+0xb6>
 8003edc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003ee0:	4543      	cmp	r3, r8
 8003ee2:	db02      	blt.n	8003eea <_printf_float+0x222>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	07d8      	lsls	r0, r3, #31
 8003ee8:	d50f      	bpl.n	8003f0a <_printf_float+0x242>
 8003eea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003eee:	4631      	mov	r1, r6
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	47b8      	blx	r7
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	f43f af42 	beq.w	8003d7e <_printf_float+0xb6>
 8003efa:	f04f 0900 	mov.w	r9, #0
 8003efe:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f02:	f104 0a1a 	add.w	sl, r4, #26
 8003f06:	45c8      	cmp	r8, r9
 8003f08:	dc09      	bgt.n	8003f1e <_printf_float+0x256>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	079b      	lsls	r3, r3, #30
 8003f0e:	f100 8102 	bmi.w	8004116 <_printf_float+0x44e>
 8003f12:	68e0      	ldr	r0, [r4, #12]
 8003f14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f16:	4298      	cmp	r0, r3
 8003f18:	bfb8      	it	lt
 8003f1a:	4618      	movlt	r0, r3
 8003f1c:	e731      	b.n	8003d82 <_printf_float+0xba>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4652      	mov	r2, sl
 8003f22:	4631      	mov	r1, r6
 8003f24:	4628      	mov	r0, r5
 8003f26:	47b8      	blx	r7
 8003f28:	3001      	adds	r0, #1
 8003f2a:	f43f af28 	beq.w	8003d7e <_printf_float+0xb6>
 8003f2e:	f109 0901 	add.w	r9, r9, #1
 8003f32:	e7e8      	b.n	8003f06 <_printf_float+0x23e>
 8003f34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	dc38      	bgt.n	8003fac <_printf_float+0x2e4>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	4628      	mov	r0, r5
 8003f40:	4a19      	ldr	r2, [pc, #100]	@ (8003fa8 <_printf_float+0x2e0>)
 8003f42:	47b8      	blx	r7
 8003f44:	3001      	adds	r0, #1
 8003f46:	f43f af1a 	beq.w	8003d7e <_printf_float+0xb6>
 8003f4a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003f4e:	ea59 0303 	orrs.w	r3, r9, r3
 8003f52:	d102      	bne.n	8003f5a <_printf_float+0x292>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	07d9      	lsls	r1, r3, #31
 8003f58:	d5d7      	bpl.n	8003f0a <_printf_float+0x242>
 8003f5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4628      	mov	r0, r5
 8003f62:	47b8      	blx	r7
 8003f64:	3001      	adds	r0, #1
 8003f66:	f43f af0a 	beq.w	8003d7e <_printf_float+0xb6>
 8003f6a:	f04f 0a00 	mov.w	sl, #0
 8003f6e:	f104 0b1a 	add.w	fp, r4, #26
 8003f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f74:	425b      	negs	r3, r3
 8003f76:	4553      	cmp	r3, sl
 8003f78:	dc01      	bgt.n	8003f7e <_printf_float+0x2b6>
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	e793      	b.n	8003ea6 <_printf_float+0x1de>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	465a      	mov	r2, fp
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	f43f aef8 	beq.w	8003d7e <_printf_float+0xb6>
 8003f8e:	f10a 0a01 	add.w	sl, sl, #1
 8003f92:	e7ee      	b.n	8003f72 <_printf_float+0x2aa>
 8003f94:	7fefffff 	.word	0x7fefffff
 8003f98:	08008eec 	.word	0x08008eec
 8003f9c:	08008ef0 	.word	0x08008ef0
 8003fa0:	08008ef4 	.word	0x08008ef4
 8003fa4:	08008ef8 	.word	0x08008ef8
 8003fa8:	08009288 	.word	0x08009288
 8003fac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003fb2:	4553      	cmp	r3, sl
 8003fb4:	bfa8      	it	ge
 8003fb6:	4653      	movge	r3, sl
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	4699      	mov	r9, r3
 8003fbc:	dc36      	bgt.n	800402c <_printf_float+0x364>
 8003fbe:	f04f 0b00 	mov.w	fp, #0
 8003fc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fc6:	f104 021a 	add.w	r2, r4, #26
 8003fca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8003fce:	eba3 0309 	sub.w	r3, r3, r9
 8003fd2:	455b      	cmp	r3, fp
 8003fd4:	dc31      	bgt.n	800403a <_printf_float+0x372>
 8003fd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fd8:	459a      	cmp	sl, r3
 8003fda:	dc3a      	bgt.n	8004052 <_printf_float+0x38a>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	07da      	lsls	r2, r3, #31
 8003fe0:	d437      	bmi.n	8004052 <_printf_float+0x38a>
 8003fe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fe4:	ebaa 0903 	sub.w	r9, sl, r3
 8003fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fea:	ebaa 0303 	sub.w	r3, sl, r3
 8003fee:	4599      	cmp	r9, r3
 8003ff0:	bfa8      	it	ge
 8003ff2:	4699      	movge	r9, r3
 8003ff4:	f1b9 0f00 	cmp.w	r9, #0
 8003ff8:	dc33      	bgt.n	8004062 <_printf_float+0x39a>
 8003ffa:	f04f 0800 	mov.w	r8, #0
 8003ffe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004002:	f104 0b1a 	add.w	fp, r4, #26
 8004006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004008:	ebaa 0303 	sub.w	r3, sl, r3
 800400c:	eba3 0309 	sub.w	r3, r3, r9
 8004010:	4543      	cmp	r3, r8
 8004012:	f77f af7a 	ble.w	8003f0a <_printf_float+0x242>
 8004016:	2301      	movs	r3, #1
 8004018:	465a      	mov	r2, fp
 800401a:	4631      	mov	r1, r6
 800401c:	4628      	mov	r0, r5
 800401e:	47b8      	blx	r7
 8004020:	3001      	adds	r0, #1
 8004022:	f43f aeac 	beq.w	8003d7e <_printf_float+0xb6>
 8004026:	f108 0801 	add.w	r8, r8, #1
 800402a:	e7ec      	b.n	8004006 <_printf_float+0x33e>
 800402c:	4642      	mov	r2, r8
 800402e:	4631      	mov	r1, r6
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	d1c2      	bne.n	8003fbe <_printf_float+0x2f6>
 8004038:	e6a1      	b.n	8003d7e <_printf_float+0xb6>
 800403a:	2301      	movs	r3, #1
 800403c:	4631      	mov	r1, r6
 800403e:	4628      	mov	r0, r5
 8004040:	920a      	str	r2, [sp, #40]	@ 0x28
 8004042:	47b8      	blx	r7
 8004044:	3001      	adds	r0, #1
 8004046:	f43f ae9a 	beq.w	8003d7e <_printf_float+0xb6>
 800404a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800404c:	f10b 0b01 	add.w	fp, fp, #1
 8004050:	e7bb      	b.n	8003fca <_printf_float+0x302>
 8004052:	4631      	mov	r1, r6
 8004054:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004058:	4628      	mov	r0, r5
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	d1c0      	bne.n	8003fe2 <_printf_float+0x31a>
 8004060:	e68d      	b.n	8003d7e <_printf_float+0xb6>
 8004062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004064:	464b      	mov	r3, r9
 8004066:	4631      	mov	r1, r6
 8004068:	4628      	mov	r0, r5
 800406a:	4442      	add	r2, r8
 800406c:	47b8      	blx	r7
 800406e:	3001      	adds	r0, #1
 8004070:	d1c3      	bne.n	8003ffa <_printf_float+0x332>
 8004072:	e684      	b.n	8003d7e <_printf_float+0xb6>
 8004074:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004078:	f1ba 0f01 	cmp.w	sl, #1
 800407c:	dc01      	bgt.n	8004082 <_printf_float+0x3ba>
 800407e:	07db      	lsls	r3, r3, #31
 8004080:	d536      	bpl.n	80040f0 <_printf_float+0x428>
 8004082:	2301      	movs	r3, #1
 8004084:	4642      	mov	r2, r8
 8004086:	4631      	mov	r1, r6
 8004088:	4628      	mov	r0, r5
 800408a:	47b8      	blx	r7
 800408c:	3001      	adds	r0, #1
 800408e:	f43f ae76 	beq.w	8003d7e <_printf_float+0xb6>
 8004092:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004096:	4631      	mov	r1, r6
 8004098:	4628      	mov	r0, r5
 800409a:	47b8      	blx	r7
 800409c:	3001      	adds	r0, #1
 800409e:	f43f ae6e 	beq.w	8003d7e <_printf_float+0xb6>
 80040a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040a6:	2200      	movs	r2, #0
 80040a8:	2300      	movs	r3, #0
 80040aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040ae:	f7fc fc93 	bl	80009d8 <__aeabi_dcmpeq>
 80040b2:	b9c0      	cbnz	r0, 80040e6 <_printf_float+0x41e>
 80040b4:	4653      	mov	r3, sl
 80040b6:	f108 0201 	add.w	r2, r8, #1
 80040ba:	4631      	mov	r1, r6
 80040bc:	4628      	mov	r0, r5
 80040be:	47b8      	blx	r7
 80040c0:	3001      	adds	r0, #1
 80040c2:	d10c      	bne.n	80040de <_printf_float+0x416>
 80040c4:	e65b      	b.n	8003d7e <_printf_float+0xb6>
 80040c6:	2301      	movs	r3, #1
 80040c8:	465a      	mov	r2, fp
 80040ca:	4631      	mov	r1, r6
 80040cc:	4628      	mov	r0, r5
 80040ce:	47b8      	blx	r7
 80040d0:	3001      	adds	r0, #1
 80040d2:	f43f ae54 	beq.w	8003d7e <_printf_float+0xb6>
 80040d6:	f108 0801 	add.w	r8, r8, #1
 80040da:	45d0      	cmp	r8, sl
 80040dc:	dbf3      	blt.n	80040c6 <_printf_float+0x3fe>
 80040de:	464b      	mov	r3, r9
 80040e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040e4:	e6e0      	b.n	8003ea8 <_printf_float+0x1e0>
 80040e6:	f04f 0800 	mov.w	r8, #0
 80040ea:	f104 0b1a 	add.w	fp, r4, #26
 80040ee:	e7f4      	b.n	80040da <_printf_float+0x412>
 80040f0:	2301      	movs	r3, #1
 80040f2:	4642      	mov	r2, r8
 80040f4:	e7e1      	b.n	80040ba <_printf_float+0x3f2>
 80040f6:	2301      	movs	r3, #1
 80040f8:	464a      	mov	r2, r9
 80040fa:	4631      	mov	r1, r6
 80040fc:	4628      	mov	r0, r5
 80040fe:	47b8      	blx	r7
 8004100:	3001      	adds	r0, #1
 8004102:	f43f ae3c 	beq.w	8003d7e <_printf_float+0xb6>
 8004106:	f108 0801 	add.w	r8, r8, #1
 800410a:	68e3      	ldr	r3, [r4, #12]
 800410c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800410e:	1a5b      	subs	r3, r3, r1
 8004110:	4543      	cmp	r3, r8
 8004112:	dcf0      	bgt.n	80040f6 <_printf_float+0x42e>
 8004114:	e6fd      	b.n	8003f12 <_printf_float+0x24a>
 8004116:	f04f 0800 	mov.w	r8, #0
 800411a:	f104 0919 	add.w	r9, r4, #25
 800411e:	e7f4      	b.n	800410a <_printf_float+0x442>

08004120 <_printf_common>:
 8004120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004124:	4616      	mov	r6, r2
 8004126:	4698      	mov	r8, r3
 8004128:	688a      	ldr	r2, [r1, #8]
 800412a:	690b      	ldr	r3, [r1, #16]
 800412c:	4607      	mov	r7, r0
 800412e:	4293      	cmp	r3, r2
 8004130:	bfb8      	it	lt
 8004132:	4613      	movlt	r3, r2
 8004134:	6033      	str	r3, [r6, #0]
 8004136:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800413a:	460c      	mov	r4, r1
 800413c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004140:	b10a      	cbz	r2, 8004146 <_printf_common+0x26>
 8004142:	3301      	adds	r3, #1
 8004144:	6033      	str	r3, [r6, #0]
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	0699      	lsls	r1, r3, #26
 800414a:	bf42      	ittt	mi
 800414c:	6833      	ldrmi	r3, [r6, #0]
 800414e:	3302      	addmi	r3, #2
 8004150:	6033      	strmi	r3, [r6, #0]
 8004152:	6825      	ldr	r5, [r4, #0]
 8004154:	f015 0506 	ands.w	r5, r5, #6
 8004158:	d106      	bne.n	8004168 <_printf_common+0x48>
 800415a:	f104 0a19 	add.w	sl, r4, #25
 800415e:	68e3      	ldr	r3, [r4, #12]
 8004160:	6832      	ldr	r2, [r6, #0]
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	42ab      	cmp	r3, r5
 8004166:	dc2b      	bgt.n	80041c0 <_printf_common+0xa0>
 8004168:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	3b00      	subs	r3, #0
 8004170:	bf18      	it	ne
 8004172:	2301      	movne	r3, #1
 8004174:	0692      	lsls	r2, r2, #26
 8004176:	d430      	bmi.n	80041da <_printf_common+0xba>
 8004178:	4641      	mov	r1, r8
 800417a:	4638      	mov	r0, r7
 800417c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004180:	47c8      	blx	r9
 8004182:	3001      	adds	r0, #1
 8004184:	d023      	beq.n	80041ce <_printf_common+0xae>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	6922      	ldr	r2, [r4, #16]
 800418a:	f003 0306 	and.w	r3, r3, #6
 800418e:	2b04      	cmp	r3, #4
 8004190:	bf14      	ite	ne
 8004192:	2500      	movne	r5, #0
 8004194:	6833      	ldreq	r3, [r6, #0]
 8004196:	f04f 0600 	mov.w	r6, #0
 800419a:	bf08      	it	eq
 800419c:	68e5      	ldreq	r5, [r4, #12]
 800419e:	f104 041a 	add.w	r4, r4, #26
 80041a2:	bf08      	it	eq
 80041a4:	1aed      	subeq	r5, r5, r3
 80041a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80041aa:	bf08      	it	eq
 80041ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041b0:	4293      	cmp	r3, r2
 80041b2:	bfc4      	itt	gt
 80041b4:	1a9b      	subgt	r3, r3, r2
 80041b6:	18ed      	addgt	r5, r5, r3
 80041b8:	42b5      	cmp	r5, r6
 80041ba:	d11a      	bne.n	80041f2 <_printf_common+0xd2>
 80041bc:	2000      	movs	r0, #0
 80041be:	e008      	b.n	80041d2 <_printf_common+0xb2>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4652      	mov	r2, sl
 80041c4:	4641      	mov	r1, r8
 80041c6:	4638      	mov	r0, r7
 80041c8:	47c8      	blx	r9
 80041ca:	3001      	adds	r0, #1
 80041cc:	d103      	bne.n	80041d6 <_printf_common+0xb6>
 80041ce:	f04f 30ff 	mov.w	r0, #4294967295
 80041d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d6:	3501      	adds	r5, #1
 80041d8:	e7c1      	b.n	800415e <_printf_common+0x3e>
 80041da:	2030      	movs	r0, #48	@ 0x30
 80041dc:	18e1      	adds	r1, r4, r3
 80041de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041e8:	4422      	add	r2, r4
 80041ea:	3302      	adds	r3, #2
 80041ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041f0:	e7c2      	b.n	8004178 <_printf_common+0x58>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4622      	mov	r2, r4
 80041f6:	4641      	mov	r1, r8
 80041f8:	4638      	mov	r0, r7
 80041fa:	47c8      	blx	r9
 80041fc:	3001      	adds	r0, #1
 80041fe:	d0e6      	beq.n	80041ce <_printf_common+0xae>
 8004200:	3601      	adds	r6, #1
 8004202:	e7d9      	b.n	80041b8 <_printf_common+0x98>

08004204 <_printf_i>:
 8004204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004208:	7e0f      	ldrb	r7, [r1, #24]
 800420a:	4691      	mov	r9, r2
 800420c:	2f78      	cmp	r7, #120	@ 0x78
 800420e:	4680      	mov	r8, r0
 8004210:	460c      	mov	r4, r1
 8004212:	469a      	mov	sl, r3
 8004214:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800421a:	d807      	bhi.n	800422c <_printf_i+0x28>
 800421c:	2f62      	cmp	r7, #98	@ 0x62
 800421e:	d80a      	bhi.n	8004236 <_printf_i+0x32>
 8004220:	2f00      	cmp	r7, #0
 8004222:	f000 80d3 	beq.w	80043cc <_printf_i+0x1c8>
 8004226:	2f58      	cmp	r7, #88	@ 0x58
 8004228:	f000 80ba 	beq.w	80043a0 <_printf_i+0x19c>
 800422c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004234:	e03a      	b.n	80042ac <_printf_i+0xa8>
 8004236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800423a:	2b15      	cmp	r3, #21
 800423c:	d8f6      	bhi.n	800422c <_printf_i+0x28>
 800423e:	a101      	add	r1, pc, #4	@ (adr r1, 8004244 <_printf_i+0x40>)
 8004240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004244:	0800429d 	.word	0x0800429d
 8004248:	080042b1 	.word	0x080042b1
 800424c:	0800422d 	.word	0x0800422d
 8004250:	0800422d 	.word	0x0800422d
 8004254:	0800422d 	.word	0x0800422d
 8004258:	0800422d 	.word	0x0800422d
 800425c:	080042b1 	.word	0x080042b1
 8004260:	0800422d 	.word	0x0800422d
 8004264:	0800422d 	.word	0x0800422d
 8004268:	0800422d 	.word	0x0800422d
 800426c:	0800422d 	.word	0x0800422d
 8004270:	080043b3 	.word	0x080043b3
 8004274:	080042db 	.word	0x080042db
 8004278:	0800436d 	.word	0x0800436d
 800427c:	0800422d 	.word	0x0800422d
 8004280:	0800422d 	.word	0x0800422d
 8004284:	080043d5 	.word	0x080043d5
 8004288:	0800422d 	.word	0x0800422d
 800428c:	080042db 	.word	0x080042db
 8004290:	0800422d 	.word	0x0800422d
 8004294:	0800422d 	.word	0x0800422d
 8004298:	08004375 	.word	0x08004375
 800429c:	6833      	ldr	r3, [r6, #0]
 800429e:	1d1a      	adds	r2, r3, #4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6032      	str	r2, [r6, #0]
 80042a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042ac:	2301      	movs	r3, #1
 80042ae:	e09e      	b.n	80043ee <_printf_i+0x1ea>
 80042b0:	6833      	ldr	r3, [r6, #0]
 80042b2:	6820      	ldr	r0, [r4, #0]
 80042b4:	1d19      	adds	r1, r3, #4
 80042b6:	6031      	str	r1, [r6, #0]
 80042b8:	0606      	lsls	r6, r0, #24
 80042ba:	d501      	bpl.n	80042c0 <_printf_i+0xbc>
 80042bc:	681d      	ldr	r5, [r3, #0]
 80042be:	e003      	b.n	80042c8 <_printf_i+0xc4>
 80042c0:	0645      	lsls	r5, r0, #25
 80042c2:	d5fb      	bpl.n	80042bc <_printf_i+0xb8>
 80042c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042c8:	2d00      	cmp	r5, #0
 80042ca:	da03      	bge.n	80042d4 <_printf_i+0xd0>
 80042cc:	232d      	movs	r3, #45	@ 0x2d
 80042ce:	426d      	negs	r5, r5
 80042d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042d4:	230a      	movs	r3, #10
 80042d6:	4859      	ldr	r0, [pc, #356]	@ (800443c <_printf_i+0x238>)
 80042d8:	e011      	b.n	80042fe <_printf_i+0xfa>
 80042da:	6821      	ldr	r1, [r4, #0]
 80042dc:	6833      	ldr	r3, [r6, #0]
 80042de:	0608      	lsls	r0, r1, #24
 80042e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80042e4:	d402      	bmi.n	80042ec <_printf_i+0xe8>
 80042e6:	0649      	lsls	r1, r1, #25
 80042e8:	bf48      	it	mi
 80042ea:	b2ad      	uxthmi	r5, r5
 80042ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80042ee:	6033      	str	r3, [r6, #0]
 80042f0:	bf14      	ite	ne
 80042f2:	230a      	movne	r3, #10
 80042f4:	2308      	moveq	r3, #8
 80042f6:	4851      	ldr	r0, [pc, #324]	@ (800443c <_printf_i+0x238>)
 80042f8:	2100      	movs	r1, #0
 80042fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042fe:	6866      	ldr	r6, [r4, #4]
 8004300:	2e00      	cmp	r6, #0
 8004302:	bfa8      	it	ge
 8004304:	6821      	ldrge	r1, [r4, #0]
 8004306:	60a6      	str	r6, [r4, #8]
 8004308:	bfa4      	itt	ge
 800430a:	f021 0104 	bicge.w	r1, r1, #4
 800430e:	6021      	strge	r1, [r4, #0]
 8004310:	b90d      	cbnz	r5, 8004316 <_printf_i+0x112>
 8004312:	2e00      	cmp	r6, #0
 8004314:	d04b      	beq.n	80043ae <_printf_i+0x1aa>
 8004316:	4616      	mov	r6, r2
 8004318:	fbb5 f1f3 	udiv	r1, r5, r3
 800431c:	fb03 5711 	mls	r7, r3, r1, r5
 8004320:	5dc7      	ldrb	r7, [r0, r7]
 8004322:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004326:	462f      	mov	r7, r5
 8004328:	42bb      	cmp	r3, r7
 800432a:	460d      	mov	r5, r1
 800432c:	d9f4      	bls.n	8004318 <_printf_i+0x114>
 800432e:	2b08      	cmp	r3, #8
 8004330:	d10b      	bne.n	800434a <_printf_i+0x146>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	07df      	lsls	r7, r3, #31
 8004336:	d508      	bpl.n	800434a <_printf_i+0x146>
 8004338:	6923      	ldr	r3, [r4, #16]
 800433a:	6861      	ldr	r1, [r4, #4]
 800433c:	4299      	cmp	r1, r3
 800433e:	bfde      	ittt	le
 8004340:	2330      	movle	r3, #48	@ 0x30
 8004342:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004346:	f106 36ff 	addle.w	r6, r6, #4294967295
 800434a:	1b92      	subs	r2, r2, r6
 800434c:	6122      	str	r2, [r4, #16]
 800434e:	464b      	mov	r3, r9
 8004350:	4621      	mov	r1, r4
 8004352:	4640      	mov	r0, r8
 8004354:	f8cd a000 	str.w	sl, [sp]
 8004358:	aa03      	add	r2, sp, #12
 800435a:	f7ff fee1 	bl	8004120 <_printf_common>
 800435e:	3001      	adds	r0, #1
 8004360:	d14a      	bne.n	80043f8 <_printf_i+0x1f4>
 8004362:	f04f 30ff 	mov.w	r0, #4294967295
 8004366:	b004      	add	sp, #16
 8004368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	f043 0320 	orr.w	r3, r3, #32
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	2778      	movs	r7, #120	@ 0x78
 8004376:	4832      	ldr	r0, [pc, #200]	@ (8004440 <_printf_i+0x23c>)
 8004378:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	061f      	lsls	r7, r3, #24
 8004382:	f851 5b04 	ldr.w	r5, [r1], #4
 8004386:	d402      	bmi.n	800438e <_printf_i+0x18a>
 8004388:	065f      	lsls	r7, r3, #25
 800438a:	bf48      	it	mi
 800438c:	b2ad      	uxthmi	r5, r5
 800438e:	6031      	str	r1, [r6, #0]
 8004390:	07d9      	lsls	r1, r3, #31
 8004392:	bf44      	itt	mi
 8004394:	f043 0320 	orrmi.w	r3, r3, #32
 8004398:	6023      	strmi	r3, [r4, #0]
 800439a:	b11d      	cbz	r5, 80043a4 <_printf_i+0x1a0>
 800439c:	2310      	movs	r3, #16
 800439e:	e7ab      	b.n	80042f8 <_printf_i+0xf4>
 80043a0:	4826      	ldr	r0, [pc, #152]	@ (800443c <_printf_i+0x238>)
 80043a2:	e7e9      	b.n	8004378 <_printf_i+0x174>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	f023 0320 	bic.w	r3, r3, #32
 80043aa:	6023      	str	r3, [r4, #0]
 80043ac:	e7f6      	b.n	800439c <_printf_i+0x198>
 80043ae:	4616      	mov	r6, r2
 80043b0:	e7bd      	b.n	800432e <_printf_i+0x12a>
 80043b2:	6833      	ldr	r3, [r6, #0]
 80043b4:	6825      	ldr	r5, [r4, #0]
 80043b6:	1d18      	adds	r0, r3, #4
 80043b8:	6961      	ldr	r1, [r4, #20]
 80043ba:	6030      	str	r0, [r6, #0]
 80043bc:	062e      	lsls	r6, r5, #24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	d501      	bpl.n	80043c6 <_printf_i+0x1c2>
 80043c2:	6019      	str	r1, [r3, #0]
 80043c4:	e002      	b.n	80043cc <_printf_i+0x1c8>
 80043c6:	0668      	lsls	r0, r5, #25
 80043c8:	d5fb      	bpl.n	80043c2 <_printf_i+0x1be>
 80043ca:	8019      	strh	r1, [r3, #0]
 80043cc:	2300      	movs	r3, #0
 80043ce:	4616      	mov	r6, r2
 80043d0:	6123      	str	r3, [r4, #16]
 80043d2:	e7bc      	b.n	800434e <_printf_i+0x14a>
 80043d4:	6833      	ldr	r3, [r6, #0]
 80043d6:	2100      	movs	r1, #0
 80043d8:	1d1a      	adds	r2, r3, #4
 80043da:	6032      	str	r2, [r6, #0]
 80043dc:	681e      	ldr	r6, [r3, #0]
 80043de:	6862      	ldr	r2, [r4, #4]
 80043e0:	4630      	mov	r0, r6
 80043e2:	f000 fcbc 	bl	8004d5e <memchr>
 80043e6:	b108      	cbz	r0, 80043ec <_printf_i+0x1e8>
 80043e8:	1b80      	subs	r0, r0, r6
 80043ea:	6060      	str	r0, [r4, #4]
 80043ec:	6863      	ldr	r3, [r4, #4]
 80043ee:	6123      	str	r3, [r4, #16]
 80043f0:	2300      	movs	r3, #0
 80043f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043f6:	e7aa      	b.n	800434e <_printf_i+0x14a>
 80043f8:	4632      	mov	r2, r6
 80043fa:	4649      	mov	r1, r9
 80043fc:	4640      	mov	r0, r8
 80043fe:	6923      	ldr	r3, [r4, #16]
 8004400:	47d0      	blx	sl
 8004402:	3001      	adds	r0, #1
 8004404:	d0ad      	beq.n	8004362 <_printf_i+0x15e>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	079b      	lsls	r3, r3, #30
 800440a:	d413      	bmi.n	8004434 <_printf_i+0x230>
 800440c:	68e0      	ldr	r0, [r4, #12]
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	4298      	cmp	r0, r3
 8004412:	bfb8      	it	lt
 8004414:	4618      	movlt	r0, r3
 8004416:	e7a6      	b.n	8004366 <_printf_i+0x162>
 8004418:	2301      	movs	r3, #1
 800441a:	4632      	mov	r2, r6
 800441c:	4649      	mov	r1, r9
 800441e:	4640      	mov	r0, r8
 8004420:	47d0      	blx	sl
 8004422:	3001      	adds	r0, #1
 8004424:	d09d      	beq.n	8004362 <_printf_i+0x15e>
 8004426:	3501      	adds	r5, #1
 8004428:	68e3      	ldr	r3, [r4, #12]
 800442a:	9903      	ldr	r1, [sp, #12]
 800442c:	1a5b      	subs	r3, r3, r1
 800442e:	42ab      	cmp	r3, r5
 8004430:	dcf2      	bgt.n	8004418 <_printf_i+0x214>
 8004432:	e7eb      	b.n	800440c <_printf_i+0x208>
 8004434:	2500      	movs	r5, #0
 8004436:	f104 0619 	add.w	r6, r4, #25
 800443a:	e7f5      	b.n	8004428 <_printf_i+0x224>
 800443c:	08008efc 	.word	0x08008efc
 8004440:	08008f0d 	.word	0x08008f0d

08004444 <_scanf_float>:
 8004444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004448:	b087      	sub	sp, #28
 800444a:	9303      	str	r3, [sp, #12]
 800444c:	688b      	ldr	r3, [r1, #8]
 800444e:	4617      	mov	r7, r2
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004456:	bf82      	ittt	hi
 8004458:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800445c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004460:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004464:	460a      	mov	r2, r1
 8004466:	f04f 0500 	mov.w	r5, #0
 800446a:	bf88      	it	hi
 800446c:	608b      	strhi	r3, [r1, #8]
 800446e:	680b      	ldr	r3, [r1, #0]
 8004470:	4680      	mov	r8, r0
 8004472:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004476:	f842 3b1c 	str.w	r3, [r2], #28
 800447a:	460c      	mov	r4, r1
 800447c:	bf98      	it	ls
 800447e:	f04f 0b00 	movls.w	fp, #0
 8004482:	4616      	mov	r6, r2
 8004484:	46aa      	mov	sl, r5
 8004486:	46a9      	mov	r9, r5
 8004488:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800448c:	9201      	str	r2, [sp, #4]
 800448e:	9502      	str	r5, [sp, #8]
 8004490:	68a2      	ldr	r2, [r4, #8]
 8004492:	b152      	cbz	r2, 80044aa <_scanf_float+0x66>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b4e      	cmp	r3, #78	@ 0x4e
 800449a:	d865      	bhi.n	8004568 <_scanf_float+0x124>
 800449c:	2b40      	cmp	r3, #64	@ 0x40
 800449e:	d83d      	bhi.n	800451c <_scanf_float+0xd8>
 80044a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80044a4:	b2c8      	uxtb	r0, r1
 80044a6:	280e      	cmp	r0, #14
 80044a8:	d93b      	bls.n	8004522 <_scanf_float+0xde>
 80044aa:	f1b9 0f00 	cmp.w	r9, #0
 80044ae:	d003      	beq.n	80044b8 <_scanf_float+0x74>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044bc:	f1ba 0f01 	cmp.w	sl, #1
 80044c0:	f200 8118 	bhi.w	80046f4 <_scanf_float+0x2b0>
 80044c4:	9b01      	ldr	r3, [sp, #4]
 80044c6:	429e      	cmp	r6, r3
 80044c8:	f200 8109 	bhi.w	80046de <_scanf_float+0x29a>
 80044cc:	2001      	movs	r0, #1
 80044ce:	b007      	add	sp, #28
 80044d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80044d8:	2a0d      	cmp	r2, #13
 80044da:	d8e6      	bhi.n	80044aa <_scanf_float+0x66>
 80044dc:	a101      	add	r1, pc, #4	@ (adr r1, 80044e4 <_scanf_float+0xa0>)
 80044de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	0800462b 	.word	0x0800462b
 80044e8:	080044ab 	.word	0x080044ab
 80044ec:	080044ab 	.word	0x080044ab
 80044f0:	080044ab 	.word	0x080044ab
 80044f4:	0800468b 	.word	0x0800468b
 80044f8:	08004663 	.word	0x08004663
 80044fc:	080044ab 	.word	0x080044ab
 8004500:	080044ab 	.word	0x080044ab
 8004504:	08004639 	.word	0x08004639
 8004508:	080044ab 	.word	0x080044ab
 800450c:	080044ab 	.word	0x080044ab
 8004510:	080044ab 	.word	0x080044ab
 8004514:	080044ab 	.word	0x080044ab
 8004518:	080045f1 	.word	0x080045f1
 800451c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004520:	e7da      	b.n	80044d8 <_scanf_float+0x94>
 8004522:	290e      	cmp	r1, #14
 8004524:	d8c1      	bhi.n	80044aa <_scanf_float+0x66>
 8004526:	a001      	add	r0, pc, #4	@ (adr r0, 800452c <_scanf_float+0xe8>)
 8004528:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800452c:	080045e1 	.word	0x080045e1
 8004530:	080044ab 	.word	0x080044ab
 8004534:	080045e1 	.word	0x080045e1
 8004538:	08004677 	.word	0x08004677
 800453c:	080044ab 	.word	0x080044ab
 8004540:	08004589 	.word	0x08004589
 8004544:	080045c7 	.word	0x080045c7
 8004548:	080045c7 	.word	0x080045c7
 800454c:	080045c7 	.word	0x080045c7
 8004550:	080045c7 	.word	0x080045c7
 8004554:	080045c7 	.word	0x080045c7
 8004558:	080045c7 	.word	0x080045c7
 800455c:	080045c7 	.word	0x080045c7
 8004560:	080045c7 	.word	0x080045c7
 8004564:	080045c7 	.word	0x080045c7
 8004568:	2b6e      	cmp	r3, #110	@ 0x6e
 800456a:	d809      	bhi.n	8004580 <_scanf_float+0x13c>
 800456c:	2b60      	cmp	r3, #96	@ 0x60
 800456e:	d8b1      	bhi.n	80044d4 <_scanf_float+0x90>
 8004570:	2b54      	cmp	r3, #84	@ 0x54
 8004572:	d07b      	beq.n	800466c <_scanf_float+0x228>
 8004574:	2b59      	cmp	r3, #89	@ 0x59
 8004576:	d198      	bne.n	80044aa <_scanf_float+0x66>
 8004578:	2d07      	cmp	r5, #7
 800457a:	d196      	bne.n	80044aa <_scanf_float+0x66>
 800457c:	2508      	movs	r5, #8
 800457e:	e02c      	b.n	80045da <_scanf_float+0x196>
 8004580:	2b74      	cmp	r3, #116	@ 0x74
 8004582:	d073      	beq.n	800466c <_scanf_float+0x228>
 8004584:	2b79      	cmp	r3, #121	@ 0x79
 8004586:	e7f6      	b.n	8004576 <_scanf_float+0x132>
 8004588:	6821      	ldr	r1, [r4, #0]
 800458a:	05c8      	lsls	r0, r1, #23
 800458c:	d51b      	bpl.n	80045c6 <_scanf_float+0x182>
 800458e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004592:	6021      	str	r1, [r4, #0]
 8004594:	f109 0901 	add.w	r9, r9, #1
 8004598:	f1bb 0f00 	cmp.w	fp, #0
 800459c:	d003      	beq.n	80045a6 <_scanf_float+0x162>
 800459e:	3201      	adds	r2, #1
 80045a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80045a4:	60a2      	str	r2, [r4, #8]
 80045a6:	68a3      	ldr	r3, [r4, #8]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	3301      	adds	r3, #1
 80045b0:	6123      	str	r3, [r4, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	f340 8087 	ble.w	80046cc <_scanf_float+0x288>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	e764      	b.n	8004490 <_scanf_float+0x4c>
 80045c6:	eb1a 0105 	adds.w	r1, sl, r5
 80045ca:	f47f af6e 	bne.w	80044aa <_scanf_float+0x66>
 80045ce:	460d      	mov	r5, r1
 80045d0:	468a      	mov	sl, r1
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80045d8:	6022      	str	r2, [r4, #0]
 80045da:	f806 3b01 	strb.w	r3, [r6], #1
 80045de:	e7e2      	b.n	80045a6 <_scanf_float+0x162>
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	0610      	lsls	r0, r2, #24
 80045e4:	f57f af61 	bpl.w	80044aa <_scanf_float+0x66>
 80045e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045ec:	6022      	str	r2, [r4, #0]
 80045ee:	e7f4      	b.n	80045da <_scanf_float+0x196>
 80045f0:	f1ba 0f00 	cmp.w	sl, #0
 80045f4:	d10e      	bne.n	8004614 <_scanf_float+0x1d0>
 80045f6:	f1b9 0f00 	cmp.w	r9, #0
 80045fa:	d10e      	bne.n	800461a <_scanf_float+0x1d6>
 80045fc:	6822      	ldr	r2, [r4, #0]
 80045fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004602:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004606:	d108      	bne.n	800461a <_scanf_float+0x1d6>
 8004608:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800460c:	f04f 0a01 	mov.w	sl, #1
 8004610:	6022      	str	r2, [r4, #0]
 8004612:	e7e2      	b.n	80045da <_scanf_float+0x196>
 8004614:	f1ba 0f02 	cmp.w	sl, #2
 8004618:	d055      	beq.n	80046c6 <_scanf_float+0x282>
 800461a:	2d01      	cmp	r5, #1
 800461c:	d002      	beq.n	8004624 <_scanf_float+0x1e0>
 800461e:	2d04      	cmp	r5, #4
 8004620:	f47f af43 	bne.w	80044aa <_scanf_float+0x66>
 8004624:	3501      	adds	r5, #1
 8004626:	b2ed      	uxtb	r5, r5
 8004628:	e7d7      	b.n	80045da <_scanf_float+0x196>
 800462a:	f1ba 0f01 	cmp.w	sl, #1
 800462e:	f47f af3c 	bne.w	80044aa <_scanf_float+0x66>
 8004632:	f04f 0a02 	mov.w	sl, #2
 8004636:	e7d0      	b.n	80045da <_scanf_float+0x196>
 8004638:	b97d      	cbnz	r5, 800465a <_scanf_float+0x216>
 800463a:	f1b9 0f00 	cmp.w	r9, #0
 800463e:	f47f af37 	bne.w	80044b0 <_scanf_float+0x6c>
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004648:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800464c:	f040 8103 	bne.w	8004856 <_scanf_float+0x412>
 8004650:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004654:	2501      	movs	r5, #1
 8004656:	6022      	str	r2, [r4, #0]
 8004658:	e7bf      	b.n	80045da <_scanf_float+0x196>
 800465a:	2d03      	cmp	r5, #3
 800465c:	d0e2      	beq.n	8004624 <_scanf_float+0x1e0>
 800465e:	2d05      	cmp	r5, #5
 8004660:	e7de      	b.n	8004620 <_scanf_float+0x1dc>
 8004662:	2d02      	cmp	r5, #2
 8004664:	f47f af21 	bne.w	80044aa <_scanf_float+0x66>
 8004668:	2503      	movs	r5, #3
 800466a:	e7b6      	b.n	80045da <_scanf_float+0x196>
 800466c:	2d06      	cmp	r5, #6
 800466e:	f47f af1c 	bne.w	80044aa <_scanf_float+0x66>
 8004672:	2507      	movs	r5, #7
 8004674:	e7b1      	b.n	80045da <_scanf_float+0x196>
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	0591      	lsls	r1, r2, #22
 800467a:	f57f af16 	bpl.w	80044aa <_scanf_float+0x66>
 800467e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004682:	6022      	str	r2, [r4, #0]
 8004684:	f8cd 9008 	str.w	r9, [sp, #8]
 8004688:	e7a7      	b.n	80045da <_scanf_float+0x196>
 800468a:	6822      	ldr	r2, [r4, #0]
 800468c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004690:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004694:	d006      	beq.n	80046a4 <_scanf_float+0x260>
 8004696:	0550      	lsls	r0, r2, #21
 8004698:	f57f af07 	bpl.w	80044aa <_scanf_float+0x66>
 800469c:	f1b9 0f00 	cmp.w	r9, #0
 80046a0:	f000 80d9 	beq.w	8004856 <_scanf_float+0x412>
 80046a4:	0591      	lsls	r1, r2, #22
 80046a6:	bf58      	it	pl
 80046a8:	9902      	ldrpl	r1, [sp, #8]
 80046aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80046ae:	bf58      	it	pl
 80046b0:	eba9 0101 	subpl.w	r1, r9, r1
 80046b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80046b8:	f04f 0900 	mov.w	r9, #0
 80046bc:	bf58      	it	pl
 80046be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80046c2:	6022      	str	r2, [r4, #0]
 80046c4:	e789      	b.n	80045da <_scanf_float+0x196>
 80046c6:	f04f 0a03 	mov.w	sl, #3
 80046ca:	e786      	b.n	80045da <_scanf_float+0x196>
 80046cc:	4639      	mov	r1, r7
 80046ce:	4640      	mov	r0, r8
 80046d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80046d4:	4798      	blx	r3
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f43f aeda 	beq.w	8004490 <_scanf_float+0x4c>
 80046dc:	e6e5      	b.n	80044aa <_scanf_float+0x66>
 80046de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046e2:	463a      	mov	r2, r7
 80046e4:	4640      	mov	r0, r8
 80046e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046ea:	4798      	blx	r3
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	e6e7      	b.n	80044c4 <_scanf_float+0x80>
 80046f4:	1e6b      	subs	r3, r5, #1
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d824      	bhi.n	8004744 <_scanf_float+0x300>
 80046fa:	2d02      	cmp	r5, #2
 80046fc:	d836      	bhi.n	800476c <_scanf_float+0x328>
 80046fe:	9b01      	ldr	r3, [sp, #4]
 8004700:	429e      	cmp	r6, r3
 8004702:	f67f aee3 	bls.w	80044cc <_scanf_float+0x88>
 8004706:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800470a:	463a      	mov	r2, r7
 800470c:	4640      	mov	r0, r8
 800470e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004712:	4798      	blx	r3
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	3b01      	subs	r3, #1
 8004718:	6123      	str	r3, [r4, #16]
 800471a:	e7f0      	b.n	80046fe <_scanf_float+0x2ba>
 800471c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004720:	463a      	mov	r2, r7
 8004722:	4640      	mov	r0, r8
 8004724:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004728:	4798      	blx	r3
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	3b01      	subs	r3, #1
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004734:	fa5f fa8a 	uxtb.w	sl, sl
 8004738:	f1ba 0f02 	cmp.w	sl, #2
 800473c:	d1ee      	bne.n	800471c <_scanf_float+0x2d8>
 800473e:	3d03      	subs	r5, #3
 8004740:	b2ed      	uxtb	r5, r5
 8004742:	1b76      	subs	r6, r6, r5
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	05da      	lsls	r2, r3, #23
 8004748:	d530      	bpl.n	80047ac <_scanf_float+0x368>
 800474a:	055b      	lsls	r3, r3, #21
 800474c:	d511      	bpl.n	8004772 <_scanf_float+0x32e>
 800474e:	9b01      	ldr	r3, [sp, #4]
 8004750:	429e      	cmp	r6, r3
 8004752:	f67f aebb 	bls.w	80044cc <_scanf_float+0x88>
 8004756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800475a:	463a      	mov	r2, r7
 800475c:	4640      	mov	r0, r8
 800475e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004762:	4798      	blx	r3
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	3b01      	subs	r3, #1
 8004768:	6123      	str	r3, [r4, #16]
 800476a:	e7f0      	b.n	800474e <_scanf_float+0x30a>
 800476c:	46aa      	mov	sl, r5
 800476e:	46b3      	mov	fp, r6
 8004770:	e7de      	b.n	8004730 <_scanf_float+0x2ec>
 8004772:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004776:	6923      	ldr	r3, [r4, #16]
 8004778:	2965      	cmp	r1, #101	@ 0x65
 800477a:	f103 33ff 	add.w	r3, r3, #4294967295
 800477e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004782:	6123      	str	r3, [r4, #16]
 8004784:	d00c      	beq.n	80047a0 <_scanf_float+0x35c>
 8004786:	2945      	cmp	r1, #69	@ 0x45
 8004788:	d00a      	beq.n	80047a0 <_scanf_float+0x35c>
 800478a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800478e:	463a      	mov	r2, r7
 8004790:	4640      	mov	r0, r8
 8004792:	4798      	blx	r3
 8004794:	6923      	ldr	r3, [r4, #16]
 8004796:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800479a:	3b01      	subs	r3, #1
 800479c:	1eb5      	subs	r5, r6, #2
 800479e:	6123      	str	r3, [r4, #16]
 80047a0:	463a      	mov	r2, r7
 80047a2:	4640      	mov	r0, r8
 80047a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047a8:	4798      	blx	r3
 80047aa:	462e      	mov	r6, r5
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	f012 0210 	ands.w	r2, r2, #16
 80047b2:	d001      	beq.n	80047b8 <_scanf_float+0x374>
 80047b4:	2000      	movs	r0, #0
 80047b6:	e68a      	b.n	80044ce <_scanf_float+0x8a>
 80047b8:	7032      	strb	r2, [r6, #0]
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c4:	d11c      	bne.n	8004800 <_scanf_float+0x3bc>
 80047c6:	9b02      	ldr	r3, [sp, #8]
 80047c8:	454b      	cmp	r3, r9
 80047ca:	eba3 0209 	sub.w	r2, r3, r9
 80047ce:	d123      	bne.n	8004818 <_scanf_float+0x3d4>
 80047d0:	2200      	movs	r2, #0
 80047d2:	4640      	mov	r0, r8
 80047d4:	9901      	ldr	r1, [sp, #4]
 80047d6:	f002 fcc7 	bl	8007168 <_strtod_r>
 80047da:	9b03      	ldr	r3, [sp, #12]
 80047dc:	6825      	ldr	r5, [r4, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f015 0f02 	tst.w	r5, #2
 80047e4:	4606      	mov	r6, r0
 80047e6:	460f      	mov	r7, r1
 80047e8:	f103 0204 	add.w	r2, r3, #4
 80047ec:	d01f      	beq.n	800482e <_scanf_float+0x3ea>
 80047ee:	9903      	ldr	r1, [sp, #12]
 80047f0:	600a      	str	r2, [r1, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	e9c3 6700 	strd	r6, r7, [r3]
 80047f8:	68e3      	ldr	r3, [r4, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60e3      	str	r3, [r4, #12]
 80047fe:	e7d9      	b.n	80047b4 <_scanf_float+0x370>
 8004800:	9b04      	ldr	r3, [sp, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0e4      	beq.n	80047d0 <_scanf_float+0x38c>
 8004806:	9905      	ldr	r1, [sp, #20]
 8004808:	230a      	movs	r3, #10
 800480a:	4640      	mov	r0, r8
 800480c:	3101      	adds	r1, #1
 800480e:	f002 fd2b 	bl	8007268 <_strtol_r>
 8004812:	9b04      	ldr	r3, [sp, #16]
 8004814:	9e05      	ldr	r6, [sp, #20]
 8004816:	1ac2      	subs	r2, r0, r3
 8004818:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800481c:	429e      	cmp	r6, r3
 800481e:	bf28      	it	cs
 8004820:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004824:	4630      	mov	r0, r6
 8004826:	490d      	ldr	r1, [pc, #52]	@ (800485c <_scanf_float+0x418>)
 8004828:	f000 f9b6 	bl	8004b98 <siprintf>
 800482c:	e7d0      	b.n	80047d0 <_scanf_float+0x38c>
 800482e:	076d      	lsls	r5, r5, #29
 8004830:	d4dd      	bmi.n	80047ee <_scanf_float+0x3aa>
 8004832:	9d03      	ldr	r5, [sp, #12]
 8004834:	602a      	str	r2, [r5, #0]
 8004836:	681d      	ldr	r5, [r3, #0]
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	f7fc f8fe 	bl	8000a3c <__aeabi_dcmpun>
 8004840:	b120      	cbz	r0, 800484c <_scanf_float+0x408>
 8004842:	4807      	ldr	r0, [pc, #28]	@ (8004860 <_scanf_float+0x41c>)
 8004844:	f000 fa9a 	bl	8004d7c <nanf>
 8004848:	6028      	str	r0, [r5, #0]
 800484a:	e7d5      	b.n	80047f8 <_scanf_float+0x3b4>
 800484c:	4630      	mov	r0, r6
 800484e:	4639      	mov	r1, r7
 8004850:	f7fc f952 	bl	8000af8 <__aeabi_d2f>
 8004854:	e7f8      	b.n	8004848 <_scanf_float+0x404>
 8004856:	f04f 0900 	mov.w	r9, #0
 800485a:	e62d      	b.n	80044b8 <_scanf_float+0x74>
 800485c:	08008f1e 	.word	0x08008f1e
 8004860:	080092d0 	.word	0x080092d0

08004864 <std>:
 8004864:	2300      	movs	r3, #0
 8004866:	b510      	push	{r4, lr}
 8004868:	4604      	mov	r4, r0
 800486a:	e9c0 3300 	strd	r3, r3, [r0]
 800486e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004872:	6083      	str	r3, [r0, #8]
 8004874:	8181      	strh	r1, [r0, #12]
 8004876:	6643      	str	r3, [r0, #100]	@ 0x64
 8004878:	81c2      	strh	r2, [r0, #14]
 800487a:	6183      	str	r3, [r0, #24]
 800487c:	4619      	mov	r1, r3
 800487e:	2208      	movs	r2, #8
 8004880:	305c      	adds	r0, #92	@ 0x5c
 8004882:	f000 f9ec 	bl	8004c5e <memset>
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <std+0x58>)
 8004888:	6224      	str	r4, [r4, #32]
 800488a:	6263      	str	r3, [r4, #36]	@ 0x24
 800488c:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <std+0x5c>)
 800488e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004890:	4b0c      	ldr	r3, [pc, #48]	@ (80048c4 <std+0x60>)
 8004892:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <std+0x64>)
 8004896:	6323      	str	r3, [r4, #48]	@ 0x30
 8004898:	4b0c      	ldr	r3, [pc, #48]	@ (80048cc <std+0x68>)
 800489a:	429c      	cmp	r4, r3
 800489c:	d006      	beq.n	80048ac <std+0x48>
 800489e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048a2:	4294      	cmp	r4, r2
 80048a4:	d002      	beq.n	80048ac <std+0x48>
 80048a6:	33d0      	adds	r3, #208	@ 0xd0
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d105      	bne.n	80048b8 <std+0x54>
 80048ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b4:	f000 ba50 	b.w	8004d58 <__retarget_lock_init_recursive>
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	bf00      	nop
 80048bc:	08004bd9 	.word	0x08004bd9
 80048c0:	08004bfb 	.word	0x08004bfb
 80048c4:	08004c33 	.word	0x08004c33
 80048c8:	08004c57 	.word	0x08004c57
 80048cc:	20000290 	.word	0x20000290

080048d0 <stdio_exit_handler>:
 80048d0:	4a02      	ldr	r2, [pc, #8]	@ (80048dc <stdio_exit_handler+0xc>)
 80048d2:	4903      	ldr	r1, [pc, #12]	@ (80048e0 <stdio_exit_handler+0x10>)
 80048d4:	4803      	ldr	r0, [pc, #12]	@ (80048e4 <stdio_exit_handler+0x14>)
 80048d6:	f000 b869 	b.w	80049ac <_fwalk_sglue>
 80048da:	bf00      	nop
 80048dc:	20000014 	.word	0x20000014
 80048e0:	08007e95 	.word	0x08007e95
 80048e4:	20000024 	.word	0x20000024

080048e8 <cleanup_stdio>:
 80048e8:	6841      	ldr	r1, [r0, #4]
 80048ea:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <cleanup_stdio+0x34>)
 80048ec:	b510      	push	{r4, lr}
 80048ee:	4299      	cmp	r1, r3
 80048f0:	4604      	mov	r4, r0
 80048f2:	d001      	beq.n	80048f8 <cleanup_stdio+0x10>
 80048f4:	f003 face 	bl	8007e94 <_fflush_r>
 80048f8:	68a1      	ldr	r1, [r4, #8]
 80048fa:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <cleanup_stdio+0x38>)
 80048fc:	4299      	cmp	r1, r3
 80048fe:	d002      	beq.n	8004906 <cleanup_stdio+0x1e>
 8004900:	4620      	mov	r0, r4
 8004902:	f003 fac7 	bl	8007e94 <_fflush_r>
 8004906:	68e1      	ldr	r1, [r4, #12]
 8004908:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <cleanup_stdio+0x3c>)
 800490a:	4299      	cmp	r1, r3
 800490c:	d004      	beq.n	8004918 <cleanup_stdio+0x30>
 800490e:	4620      	mov	r0, r4
 8004910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004914:	f003 babe 	b.w	8007e94 <_fflush_r>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	bf00      	nop
 800491c:	20000290 	.word	0x20000290
 8004920:	200002f8 	.word	0x200002f8
 8004924:	20000360 	.word	0x20000360

08004928 <global_stdio_init.part.0>:
 8004928:	b510      	push	{r4, lr}
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <global_stdio_init.part.0+0x30>)
 800492c:	4c0b      	ldr	r4, [pc, #44]	@ (800495c <global_stdio_init.part.0+0x34>)
 800492e:	4a0c      	ldr	r2, [pc, #48]	@ (8004960 <global_stdio_init.part.0+0x38>)
 8004930:	4620      	mov	r0, r4
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	2104      	movs	r1, #4
 8004936:	2200      	movs	r2, #0
 8004938:	f7ff ff94 	bl	8004864 <std>
 800493c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004940:	2201      	movs	r2, #1
 8004942:	2109      	movs	r1, #9
 8004944:	f7ff ff8e 	bl	8004864 <std>
 8004948:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800494c:	2202      	movs	r2, #2
 800494e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004952:	2112      	movs	r1, #18
 8004954:	f7ff bf86 	b.w	8004864 <std>
 8004958:	200003c8 	.word	0x200003c8
 800495c:	20000290 	.word	0x20000290
 8004960:	080048d1 	.word	0x080048d1

08004964 <__sfp_lock_acquire>:
 8004964:	4801      	ldr	r0, [pc, #4]	@ (800496c <__sfp_lock_acquire+0x8>)
 8004966:	f000 b9f8 	b.w	8004d5a <__retarget_lock_acquire_recursive>
 800496a:	bf00      	nop
 800496c:	200003d1 	.word	0x200003d1

08004970 <__sfp_lock_release>:
 8004970:	4801      	ldr	r0, [pc, #4]	@ (8004978 <__sfp_lock_release+0x8>)
 8004972:	f000 b9f3 	b.w	8004d5c <__retarget_lock_release_recursive>
 8004976:	bf00      	nop
 8004978:	200003d1 	.word	0x200003d1

0800497c <__sinit>:
 800497c:	b510      	push	{r4, lr}
 800497e:	4604      	mov	r4, r0
 8004980:	f7ff fff0 	bl	8004964 <__sfp_lock_acquire>
 8004984:	6a23      	ldr	r3, [r4, #32]
 8004986:	b11b      	cbz	r3, 8004990 <__sinit+0x14>
 8004988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800498c:	f7ff bff0 	b.w	8004970 <__sfp_lock_release>
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <__sinit+0x28>)
 8004992:	6223      	str	r3, [r4, #32]
 8004994:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <__sinit+0x2c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f5      	bne.n	8004988 <__sinit+0xc>
 800499c:	f7ff ffc4 	bl	8004928 <global_stdio_init.part.0>
 80049a0:	e7f2      	b.n	8004988 <__sinit+0xc>
 80049a2:	bf00      	nop
 80049a4:	080048e9 	.word	0x080048e9
 80049a8:	200003c8 	.word	0x200003c8

080049ac <_fwalk_sglue>:
 80049ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b0:	4607      	mov	r7, r0
 80049b2:	4688      	mov	r8, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	2600      	movs	r6, #0
 80049b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049bc:	f1b9 0901 	subs.w	r9, r9, #1
 80049c0:	d505      	bpl.n	80049ce <_fwalk_sglue+0x22>
 80049c2:	6824      	ldr	r4, [r4, #0]
 80049c4:	2c00      	cmp	r4, #0
 80049c6:	d1f7      	bne.n	80049b8 <_fwalk_sglue+0xc>
 80049c8:	4630      	mov	r0, r6
 80049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d907      	bls.n	80049e4 <_fwalk_sglue+0x38>
 80049d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049d8:	3301      	adds	r3, #1
 80049da:	d003      	beq.n	80049e4 <_fwalk_sglue+0x38>
 80049dc:	4629      	mov	r1, r5
 80049de:	4638      	mov	r0, r7
 80049e0:	47c0      	blx	r8
 80049e2:	4306      	orrs	r6, r0
 80049e4:	3568      	adds	r5, #104	@ 0x68
 80049e6:	e7e9      	b.n	80049bc <_fwalk_sglue+0x10>

080049e8 <iprintf>:
 80049e8:	b40f      	push	{r0, r1, r2, r3}
 80049ea:	b507      	push	{r0, r1, r2, lr}
 80049ec:	4906      	ldr	r1, [pc, #24]	@ (8004a08 <iprintf+0x20>)
 80049ee:	ab04      	add	r3, sp, #16
 80049f0:	6808      	ldr	r0, [r1, #0]
 80049f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f6:	6881      	ldr	r1, [r0, #8]
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	f002 fdb7 	bl	800756c <_vfiprintf_r>
 80049fe:	b003      	add	sp, #12
 8004a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a04:	b004      	add	sp, #16
 8004a06:	4770      	bx	lr
 8004a08:	20000020 	.word	0x20000020

08004a0c <iscanf>:
 8004a0c:	b40f      	push	{r0, r1, r2, r3}
 8004a0e:	b507      	push	{r0, r1, r2, lr}
 8004a10:	4906      	ldr	r1, [pc, #24]	@ (8004a2c <iscanf+0x20>)
 8004a12:	ab04      	add	r3, sp, #16
 8004a14:	6808      	ldr	r0, [r1, #0]
 8004a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a1a:	6841      	ldr	r1, [r0, #4]
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	f003 f859 	bl	8007ad4 <_vfiscanf_r>
 8004a22:	b003      	add	sp, #12
 8004a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a28:	b004      	add	sp, #16
 8004a2a:	4770      	bx	lr
 8004a2c:	20000020 	.word	0x20000020

08004a30 <setvbuf>:
 8004a30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a34:	461d      	mov	r5, r3
 8004a36:	4b57      	ldr	r3, [pc, #348]	@ (8004b94 <setvbuf+0x164>)
 8004a38:	4604      	mov	r4, r0
 8004a3a:	681f      	ldr	r7, [r3, #0]
 8004a3c:	460e      	mov	r6, r1
 8004a3e:	4690      	mov	r8, r2
 8004a40:	b127      	cbz	r7, 8004a4c <setvbuf+0x1c>
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	b913      	cbnz	r3, 8004a4c <setvbuf+0x1c>
 8004a46:	4638      	mov	r0, r7
 8004a48:	f7ff ff98 	bl	800497c <__sinit>
 8004a4c:	f1b8 0f02 	cmp.w	r8, #2
 8004a50:	d006      	beq.n	8004a60 <setvbuf+0x30>
 8004a52:	f1b8 0f01 	cmp.w	r8, #1
 8004a56:	f200 809a 	bhi.w	8004b8e <setvbuf+0x15e>
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	f2c0 8097 	blt.w	8004b8e <setvbuf+0x15e>
 8004a60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a62:	07d9      	lsls	r1, r3, #31
 8004a64:	d405      	bmi.n	8004a72 <setvbuf+0x42>
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	059a      	lsls	r2, r3, #22
 8004a6a:	d402      	bmi.n	8004a72 <setvbuf+0x42>
 8004a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a6e:	f000 f974 	bl	8004d5a <__retarget_lock_acquire_recursive>
 8004a72:	4621      	mov	r1, r4
 8004a74:	4638      	mov	r0, r7
 8004a76:	f003 fa0d 	bl	8007e94 <_fflush_r>
 8004a7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a7c:	b141      	cbz	r1, 8004a90 <setvbuf+0x60>
 8004a7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a82:	4299      	cmp	r1, r3
 8004a84:	d002      	beq.n	8004a8c <setvbuf+0x5c>
 8004a86:	4638      	mov	r0, r7
 8004a88:	f000 ffce 	bl	8005a28 <_free_r>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a90:	2300      	movs	r3, #0
 8004a92:	61a3      	str	r3, [r4, #24]
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	061b      	lsls	r3, r3, #24
 8004a9a:	d503      	bpl.n	8004aa4 <setvbuf+0x74>
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	6921      	ldr	r1, [r4, #16]
 8004aa0:	f000 ffc2 	bl	8005a28 <_free_r>
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	f1b8 0f02 	cmp.w	r8, #2
 8004aaa:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	d061      	beq.n	8004b7a <setvbuf+0x14a>
 8004ab6:	ab01      	add	r3, sp, #4
 8004ab8:	466a      	mov	r2, sp
 8004aba:	4621      	mov	r1, r4
 8004abc:	4638      	mov	r0, r7
 8004abe:	f003 fa11 	bl	8007ee4 <__swhatbuf_r>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	4318      	orrs	r0, r3
 8004ac6:	81a0      	strh	r0, [r4, #12]
 8004ac8:	bb2d      	cbnz	r5, 8004b16 <setvbuf+0xe6>
 8004aca:	9d00      	ldr	r5, [sp, #0]
 8004acc:	4628      	mov	r0, r5
 8004ace:	f000 fff3 	bl	8005ab8 <malloc>
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d152      	bne.n	8004b7e <setvbuf+0x14e>
 8004ad8:	f8dd 9000 	ldr.w	r9, [sp]
 8004adc:	45a9      	cmp	r9, r5
 8004ade:	d140      	bne.n	8004b62 <setvbuf+0x132>
 8004ae0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ae8:	f043 0202 	orr.w	r2, r3, #2
 8004aec:	81a2      	strh	r2, [r4, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	60a2      	str	r2, [r4, #8]
 8004af2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	6122      	str	r2, [r4, #16]
 8004afa:	2201      	movs	r2, #1
 8004afc:	6162      	str	r2, [r4, #20]
 8004afe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b00:	07d6      	lsls	r6, r2, #31
 8004b02:	d404      	bmi.n	8004b0e <setvbuf+0xde>
 8004b04:	0598      	lsls	r0, r3, #22
 8004b06:	d402      	bmi.n	8004b0e <setvbuf+0xde>
 8004b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b0a:	f000 f927 	bl	8004d5c <__retarget_lock_release_recursive>
 8004b0e:	4628      	mov	r0, r5
 8004b10:	b003      	add	sp, #12
 8004b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	d0d8      	beq.n	8004acc <setvbuf+0x9c>
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	b913      	cbnz	r3, 8004b24 <setvbuf+0xf4>
 8004b1e:	4638      	mov	r0, r7
 8004b20:	f7ff ff2c 	bl	800497c <__sinit>
 8004b24:	f1b8 0f01 	cmp.w	r8, #1
 8004b28:	bf08      	it	eq
 8004b2a:	89a3      	ldrheq	r3, [r4, #12]
 8004b2c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004b30:	bf04      	itt	eq
 8004b32:	f043 0301 	orreq.w	r3, r3, #1
 8004b36:	81a3      	strheq	r3, [r4, #12]
 8004b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3c:	6026      	str	r6, [r4, #0]
 8004b3e:	f013 0208 	ands.w	r2, r3, #8
 8004b42:	d01e      	beq.n	8004b82 <setvbuf+0x152>
 8004b44:	07d9      	lsls	r1, r3, #31
 8004b46:	bf41      	itttt	mi
 8004b48:	2200      	movmi	r2, #0
 8004b4a:	426d      	negmi	r5, r5
 8004b4c:	60a2      	strmi	r2, [r4, #8]
 8004b4e:	61a5      	strmi	r5, [r4, #24]
 8004b50:	bf58      	it	pl
 8004b52:	60a5      	strpl	r5, [r4, #8]
 8004b54:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b56:	07d2      	lsls	r2, r2, #31
 8004b58:	d401      	bmi.n	8004b5e <setvbuf+0x12e>
 8004b5a:	059b      	lsls	r3, r3, #22
 8004b5c:	d513      	bpl.n	8004b86 <setvbuf+0x156>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	e7d5      	b.n	8004b0e <setvbuf+0xde>
 8004b62:	4648      	mov	r0, r9
 8004b64:	f000 ffa8 	bl	8005ab8 <malloc>
 8004b68:	4606      	mov	r6, r0
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d0b8      	beq.n	8004ae0 <setvbuf+0xb0>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	464d      	mov	r5, r9
 8004b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b76:	81a3      	strh	r3, [r4, #12]
 8004b78:	e7cf      	b.n	8004b1a <setvbuf+0xea>
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	e7b2      	b.n	8004ae4 <setvbuf+0xb4>
 8004b7e:	46a9      	mov	r9, r5
 8004b80:	e7f5      	b.n	8004b6e <setvbuf+0x13e>
 8004b82:	60a2      	str	r2, [r4, #8]
 8004b84:	e7e6      	b.n	8004b54 <setvbuf+0x124>
 8004b86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b88:	f000 f8e8 	bl	8004d5c <__retarget_lock_release_recursive>
 8004b8c:	e7e7      	b.n	8004b5e <setvbuf+0x12e>
 8004b8e:	f04f 35ff 	mov.w	r5, #4294967295
 8004b92:	e7bc      	b.n	8004b0e <setvbuf+0xde>
 8004b94:	20000020 	.word	0x20000020

08004b98 <siprintf>:
 8004b98:	b40e      	push	{r1, r2, r3}
 8004b9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b9e:	b500      	push	{lr}
 8004ba0:	b09c      	sub	sp, #112	@ 0x70
 8004ba2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ba4:	9002      	str	r0, [sp, #8]
 8004ba6:	9006      	str	r0, [sp, #24]
 8004ba8:	9107      	str	r1, [sp, #28]
 8004baa:	9104      	str	r1, [sp, #16]
 8004bac:	4808      	ldr	r0, [pc, #32]	@ (8004bd0 <siprintf+0x38>)
 8004bae:	4909      	ldr	r1, [pc, #36]	@ (8004bd4 <siprintf+0x3c>)
 8004bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb4:	9105      	str	r1, [sp, #20]
 8004bb6:	6800      	ldr	r0, [r0, #0]
 8004bb8:	a902      	add	r1, sp, #8
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	f002 fbb2 	bl	8007324 <_svfiprintf_r>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	9b02      	ldr	r3, [sp, #8]
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	b01c      	add	sp, #112	@ 0x70
 8004bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bcc:	b003      	add	sp, #12
 8004bce:	4770      	bx	lr
 8004bd0:	20000020 	.word	0x20000020
 8004bd4:	ffff0208 	.word	0xffff0208

08004bd8 <__sread>:
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	460c      	mov	r4, r1
 8004bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be0:	f000 f86c 	bl	8004cbc <_read_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	bfab      	itete	ge
 8004be8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004bea:	89a3      	ldrhlt	r3, [r4, #12]
 8004bec:	181b      	addge	r3, r3, r0
 8004bee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bf2:	bfac      	ite	ge
 8004bf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bf6:	81a3      	strhlt	r3, [r4, #12]
 8004bf8:	bd10      	pop	{r4, pc}

08004bfa <__swrite>:
 8004bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfe:	461f      	mov	r7, r3
 8004c00:	898b      	ldrh	r3, [r1, #12]
 8004c02:	4605      	mov	r5, r0
 8004c04:	05db      	lsls	r3, r3, #23
 8004c06:	460c      	mov	r4, r1
 8004c08:	4616      	mov	r6, r2
 8004c0a:	d505      	bpl.n	8004c18 <__swrite+0x1e>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	f000 f840 	bl	8004c98 <_lseek_r>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	4628      	mov	r0, r5
 8004c24:	463b      	mov	r3, r7
 8004c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2e:	f000 b857 	b.w	8004ce0 <_write_r>

08004c32 <__sseek>:
 8004c32:	b510      	push	{r4, lr}
 8004c34:	460c      	mov	r4, r1
 8004c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3a:	f000 f82d 	bl	8004c98 <_lseek_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	bf15      	itete	ne
 8004c44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c4e:	81a3      	strheq	r3, [r4, #12]
 8004c50:	bf18      	it	ne
 8004c52:	81a3      	strhne	r3, [r4, #12]
 8004c54:	bd10      	pop	{r4, pc}

08004c56 <__sclose>:
 8004c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5a:	f000 b80d 	b.w	8004c78 <_close_r>

08004c5e <memset>:
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4402      	add	r2, r0
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d100      	bne.n	8004c68 <memset+0xa>
 8004c66:	4770      	bx	lr
 8004c68:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6c:	e7f9      	b.n	8004c62 <memset+0x4>
	...

08004c70 <_localeconv_r>:
 8004c70:	4800      	ldr	r0, [pc, #0]	@ (8004c74 <_localeconv_r+0x4>)
 8004c72:	4770      	bx	lr
 8004c74:	20000160 	.word	0x20000160

08004c78 <_close_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4d05      	ldr	r5, [pc, #20]	@ (8004c94 <_close_r+0x1c>)
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	f7fc ff81 	bl	8001b8a <_close>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_close_r+0x1a>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_close_r+0x1a>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	200003cc 	.word	0x200003cc

08004c98 <_lseek_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4d05      	ldr	r5, [pc, #20]	@ (8004cb8 <_lseek_r+0x20>)
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fc ff93 	bl	8001bd2 <_lseek>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_lseek_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_lseek_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200003cc 	.word	0x200003cc

08004cbc <_read_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4d05      	ldr	r5, [pc, #20]	@ (8004cdc <_read_r+0x20>)
 8004cc8:	602a      	str	r2, [r5, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f7fc ff40 	bl	8001b50 <_read>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_read_r+0x1e>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_read_r+0x1e>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	200003cc 	.word	0x200003cc

08004ce0 <_write_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	2200      	movs	r2, #0
 8004cea:	4d05      	ldr	r5, [pc, #20]	@ (8004d00 <_write_r+0x20>)
 8004cec:	602a      	str	r2, [r5, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f7fc fc5a 	bl	80015a8 <_write>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_write_r+0x1e>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_write_r+0x1e>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	200003cc 	.word	0x200003cc

08004d04 <__errno>:
 8004d04:	4b01      	ldr	r3, [pc, #4]	@ (8004d0c <__errno+0x8>)
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000020 	.word	0x20000020

08004d10 <__libc_init_array>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	2600      	movs	r6, #0
 8004d14:	4d0c      	ldr	r5, [pc, #48]	@ (8004d48 <__libc_init_array+0x38>)
 8004d16:	4c0d      	ldr	r4, [pc, #52]	@ (8004d4c <__libc_init_array+0x3c>)
 8004d18:	1b64      	subs	r4, r4, r5
 8004d1a:	10a4      	asrs	r4, r4, #2
 8004d1c:	42a6      	cmp	r6, r4
 8004d1e:	d109      	bne.n	8004d34 <__libc_init_array+0x24>
 8004d20:	f004 f84a 	bl	8008db8 <_init>
 8004d24:	2600      	movs	r6, #0
 8004d26:	4d0a      	ldr	r5, [pc, #40]	@ (8004d50 <__libc_init_array+0x40>)
 8004d28:	4c0a      	ldr	r4, [pc, #40]	@ (8004d54 <__libc_init_array+0x44>)
 8004d2a:	1b64      	subs	r4, r4, r5
 8004d2c:	10a4      	asrs	r4, r4, #2
 8004d2e:	42a6      	cmp	r6, r4
 8004d30:	d105      	bne.n	8004d3e <__libc_init_array+0x2e>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d38:	4798      	blx	r3
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7ee      	b.n	8004d1c <__libc_init_array+0xc>
 8004d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d42:	4798      	blx	r3
 8004d44:	3601      	adds	r6, #1
 8004d46:	e7f2      	b.n	8004d2e <__libc_init_array+0x1e>
 8004d48:	0800933c 	.word	0x0800933c
 8004d4c:	0800933c 	.word	0x0800933c
 8004d50:	0800933c 	.word	0x0800933c
 8004d54:	08009340 	.word	0x08009340

08004d58 <__retarget_lock_init_recursive>:
 8004d58:	4770      	bx	lr

08004d5a <__retarget_lock_acquire_recursive>:
 8004d5a:	4770      	bx	lr

08004d5c <__retarget_lock_release_recursive>:
 8004d5c:	4770      	bx	lr

08004d5e <memchr>:
 8004d5e:	4603      	mov	r3, r0
 8004d60:	b510      	push	{r4, lr}
 8004d62:	b2c9      	uxtb	r1, r1
 8004d64:	4402      	add	r2, r0
 8004d66:	4293      	cmp	r3, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	d101      	bne.n	8004d70 <memchr+0x12>
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e003      	b.n	8004d78 <memchr+0x1a>
 8004d70:	7804      	ldrb	r4, [r0, #0]
 8004d72:	3301      	adds	r3, #1
 8004d74:	428c      	cmp	r4, r1
 8004d76:	d1f6      	bne.n	8004d66 <memchr+0x8>
 8004d78:	bd10      	pop	{r4, pc}
	...

08004d7c <nanf>:
 8004d7c:	4800      	ldr	r0, [pc, #0]	@ (8004d80 <nanf+0x4>)
 8004d7e:	4770      	bx	lr
 8004d80:	7fc00000 	.word	0x7fc00000

08004d84 <quorem>:
 8004d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d88:	6903      	ldr	r3, [r0, #16]
 8004d8a:	690c      	ldr	r4, [r1, #16]
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	42a3      	cmp	r3, r4
 8004d90:	db7e      	blt.n	8004e90 <quorem+0x10c>
 8004d92:	3c01      	subs	r4, #1
 8004d94:	00a3      	lsls	r3, r4, #2
 8004d96:	f100 0514 	add.w	r5, r0, #20
 8004d9a:	f101 0814 	add.w	r8, r1, #20
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004daa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dae:	3301      	adds	r3, #1
 8004db0:	429a      	cmp	r2, r3
 8004db2:	fbb2 f6f3 	udiv	r6, r2, r3
 8004db6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004dba:	d32e      	bcc.n	8004e1a <quorem+0x96>
 8004dbc:	f04f 0a00 	mov.w	sl, #0
 8004dc0:	46c4      	mov	ip, r8
 8004dc2:	46ae      	mov	lr, r5
 8004dc4:	46d3      	mov	fp, sl
 8004dc6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004dca:	b298      	uxth	r0, r3
 8004dcc:	fb06 a000 	mla	r0, r6, r0, sl
 8004dd0:	0c1b      	lsrs	r3, r3, #16
 8004dd2:	0c02      	lsrs	r2, r0, #16
 8004dd4:	fb06 2303 	mla	r3, r6, r3, r2
 8004dd8:	f8de 2000 	ldr.w	r2, [lr]
 8004ddc:	b280      	uxth	r0, r0
 8004dde:	b292      	uxth	r2, r2
 8004de0:	1a12      	subs	r2, r2, r0
 8004de2:	445a      	add	r2, fp
 8004de4:	f8de 0000 	ldr.w	r0, [lr]
 8004de8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004df2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004df6:	b292      	uxth	r2, r2
 8004df8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004dfc:	45e1      	cmp	r9, ip
 8004dfe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004e02:	f84e 2b04 	str.w	r2, [lr], #4
 8004e06:	d2de      	bcs.n	8004dc6 <quorem+0x42>
 8004e08:	9b00      	ldr	r3, [sp, #0]
 8004e0a:	58eb      	ldr	r3, [r5, r3]
 8004e0c:	b92b      	cbnz	r3, 8004e1a <quorem+0x96>
 8004e0e:	9b01      	ldr	r3, [sp, #4]
 8004e10:	3b04      	subs	r3, #4
 8004e12:	429d      	cmp	r5, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	d32f      	bcc.n	8004e78 <quorem+0xf4>
 8004e18:	613c      	str	r4, [r7, #16]
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	f001 f9c4 	bl	80061a8 <__mcmp>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	db25      	blt.n	8004e70 <quorem+0xec>
 8004e24:	4629      	mov	r1, r5
 8004e26:	2000      	movs	r0, #0
 8004e28:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e2c:	f8d1 c000 	ldr.w	ip, [r1]
 8004e30:	fa1f fe82 	uxth.w	lr, r2
 8004e34:	fa1f f38c 	uxth.w	r3, ip
 8004e38:	eba3 030e 	sub.w	r3, r3, lr
 8004e3c:	4403      	add	r3, r0
 8004e3e:	0c12      	lsrs	r2, r2, #16
 8004e40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004e44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e4e:	45c1      	cmp	r9, r8
 8004e50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e54:	f841 3b04 	str.w	r3, [r1], #4
 8004e58:	d2e6      	bcs.n	8004e28 <quorem+0xa4>
 8004e5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e62:	b922      	cbnz	r2, 8004e6e <quorem+0xea>
 8004e64:	3b04      	subs	r3, #4
 8004e66:	429d      	cmp	r5, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	d30b      	bcc.n	8004e84 <quorem+0x100>
 8004e6c:	613c      	str	r4, [r7, #16]
 8004e6e:	3601      	adds	r6, #1
 8004e70:	4630      	mov	r0, r6
 8004e72:	b003      	add	sp, #12
 8004e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	3b04      	subs	r3, #4
 8004e7c:	2a00      	cmp	r2, #0
 8004e7e:	d1cb      	bne.n	8004e18 <quorem+0x94>
 8004e80:	3c01      	subs	r4, #1
 8004e82:	e7c6      	b.n	8004e12 <quorem+0x8e>
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	3b04      	subs	r3, #4
 8004e88:	2a00      	cmp	r2, #0
 8004e8a:	d1ef      	bne.n	8004e6c <quorem+0xe8>
 8004e8c:	3c01      	subs	r4, #1
 8004e8e:	e7ea      	b.n	8004e66 <quorem+0xe2>
 8004e90:	2000      	movs	r0, #0
 8004e92:	e7ee      	b.n	8004e72 <quorem+0xee>
 8004e94:	0000      	movs	r0, r0
	...

08004e98 <_dtoa_r>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	461d      	mov	r5, r3
 8004ea0:	69c7      	ldr	r7, [r0, #28]
 8004ea2:	b097      	sub	sp, #92	@ 0x5c
 8004ea4:	4683      	mov	fp, r0
 8004ea6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004eaa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004eac:	b97f      	cbnz	r7, 8004ece <_dtoa_r+0x36>
 8004eae:	2010      	movs	r0, #16
 8004eb0:	f000 fe02 	bl	8005ab8 <malloc>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	f8cb 001c 	str.w	r0, [fp, #28]
 8004eba:	b920      	cbnz	r0, 8004ec6 <_dtoa_r+0x2e>
 8004ebc:	21ef      	movs	r1, #239	@ 0xef
 8004ebe:	4ba8      	ldr	r3, [pc, #672]	@ (8005160 <_dtoa_r+0x2c8>)
 8004ec0:	48a8      	ldr	r0, [pc, #672]	@ (8005164 <_dtoa_r+0x2cc>)
 8004ec2:	f003 fae9 	bl	8008498 <__assert_func>
 8004ec6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004eca:	6007      	str	r7, [r0, #0]
 8004ecc:	60c7      	str	r7, [r0, #12]
 8004ece:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	b159      	cbz	r1, 8004eee <_dtoa_r+0x56>
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4093      	lsls	r3, r2
 8004edc:	604a      	str	r2, [r1, #4]
 8004ede:	608b      	str	r3, [r1, #8]
 8004ee0:	4658      	mov	r0, fp
 8004ee2:	f000 fedf 	bl	8005ca4 <_Bfree>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	1e2b      	subs	r3, r5, #0
 8004ef0:	bfaf      	iteee	ge
 8004ef2:	2300      	movge	r3, #0
 8004ef4:	2201      	movlt	r2, #1
 8004ef6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004efa:	9303      	strlt	r3, [sp, #12]
 8004efc:	bfa8      	it	ge
 8004efe:	6033      	strge	r3, [r6, #0]
 8004f00:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f04:	4b98      	ldr	r3, [pc, #608]	@ (8005168 <_dtoa_r+0x2d0>)
 8004f06:	bfb8      	it	lt
 8004f08:	6032      	strlt	r2, [r6, #0]
 8004f0a:	ea33 0308 	bics.w	r3, r3, r8
 8004f0e:	d112      	bne.n	8004f36 <_dtoa_r+0x9e>
 8004f10:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004f14:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004f1c:	4323      	orrs	r3, r4
 8004f1e:	f000 8550 	beq.w	80059c2 <_dtoa_r+0xb2a>
 8004f22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f24:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800516c <_dtoa_r+0x2d4>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8552 	beq.w	80059d2 <_dtoa_r+0xb3a>
 8004f2e:	f10a 0303 	add.w	r3, sl, #3
 8004f32:	f000 bd4c 	b.w	80059ce <_dtoa_r+0xb36>
 8004f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004f3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f42:	2200      	movs	r2, #0
 8004f44:	2300      	movs	r3, #0
 8004f46:	f7fb fd47 	bl	80009d8 <__aeabi_dcmpeq>
 8004f4a:	4607      	mov	r7, r0
 8004f4c:	b158      	cbz	r0, 8004f66 <_dtoa_r+0xce>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f56:	b113      	cbz	r3, 8004f5e <_dtoa_r+0xc6>
 8004f58:	4b85      	ldr	r3, [pc, #532]	@ (8005170 <_dtoa_r+0x2d8>)
 8004f5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005174 <_dtoa_r+0x2dc>
 8004f62:	f000 bd36 	b.w	80059d2 <_dtoa_r+0xb3a>
 8004f66:	ab14      	add	r3, sp, #80	@ 0x50
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	ab15      	add	r3, sp, #84	@ 0x54
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	4658      	mov	r0, fp
 8004f70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004f74:	f001 fa30 	bl	80063d8 <__d2b>
 8004f78:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004f7c:	4681      	mov	r9, r0
 8004f7e:	2e00      	cmp	r6, #0
 8004f80:	d077      	beq.n	8005072 <_dtoa_r+0x1da>
 8004f82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f88:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f90:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f94:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f98:	9712      	str	r7, [sp, #72]	@ 0x48
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4b76      	ldr	r3, [pc, #472]	@ (8005178 <_dtoa_r+0x2e0>)
 8004fa0:	f7fb f8fa 	bl	8000198 <__aeabi_dsub>
 8004fa4:	a368      	add	r3, pc, #416	@ (adr r3, 8005148 <_dtoa_r+0x2b0>)
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f7fb faad 	bl	8000508 <__aeabi_dmul>
 8004fae:	a368      	add	r3, pc, #416	@ (adr r3, 8005150 <_dtoa_r+0x2b8>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f7fb f8f2 	bl	800019c <__adddf3>
 8004fb8:	4604      	mov	r4, r0
 8004fba:	4630      	mov	r0, r6
 8004fbc:	460d      	mov	r5, r1
 8004fbe:	f7fb fa39 	bl	8000434 <__aeabi_i2d>
 8004fc2:	a365      	add	r3, pc, #404	@ (adr r3, 8005158 <_dtoa_r+0x2c0>)
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f7fb fa9e 	bl	8000508 <__aeabi_dmul>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f7fb f8e2 	bl	800019c <__adddf3>
 8004fd8:	4604      	mov	r4, r0
 8004fda:	460d      	mov	r5, r1
 8004fdc:	f7fb fd44 	bl	8000a68 <__aeabi_d2iz>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4607      	mov	r7, r0
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	4629      	mov	r1, r5
 8004fea:	f7fb fcff 	bl	80009ec <__aeabi_dcmplt>
 8004fee:	b140      	cbz	r0, 8005002 <_dtoa_r+0x16a>
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f7fb fa1f 	bl	8000434 <__aeabi_i2d>
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	462b      	mov	r3, r5
 8004ffa:	f7fb fced 	bl	80009d8 <__aeabi_dcmpeq>
 8004ffe:	b900      	cbnz	r0, 8005002 <_dtoa_r+0x16a>
 8005000:	3f01      	subs	r7, #1
 8005002:	2f16      	cmp	r7, #22
 8005004:	d853      	bhi.n	80050ae <_dtoa_r+0x216>
 8005006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800500a:	4b5c      	ldr	r3, [pc, #368]	@ (800517c <_dtoa_r+0x2e4>)
 800500c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb fcea 	bl	80009ec <__aeabi_dcmplt>
 8005018:	2800      	cmp	r0, #0
 800501a:	d04a      	beq.n	80050b2 <_dtoa_r+0x21a>
 800501c:	2300      	movs	r3, #0
 800501e:	3f01      	subs	r7, #1
 8005020:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005022:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005024:	1b9b      	subs	r3, r3, r6
 8005026:	1e5a      	subs	r2, r3, #1
 8005028:	bf46      	itte	mi
 800502a:	f1c3 0801 	rsbmi	r8, r3, #1
 800502e:	2300      	movmi	r3, #0
 8005030:	f04f 0800 	movpl.w	r8, #0
 8005034:	9209      	str	r2, [sp, #36]	@ 0x24
 8005036:	bf48      	it	mi
 8005038:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800503a:	2f00      	cmp	r7, #0
 800503c:	db3b      	blt.n	80050b6 <_dtoa_r+0x21e>
 800503e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005040:	970e      	str	r7, [sp, #56]	@ 0x38
 8005042:	443b      	add	r3, r7
 8005044:	9309      	str	r3, [sp, #36]	@ 0x24
 8005046:	2300      	movs	r3, #0
 8005048:	930a      	str	r3, [sp, #40]	@ 0x28
 800504a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800504c:	2b09      	cmp	r3, #9
 800504e:	d866      	bhi.n	800511e <_dtoa_r+0x286>
 8005050:	2b05      	cmp	r3, #5
 8005052:	bfc4      	itt	gt
 8005054:	3b04      	subgt	r3, #4
 8005056:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005058:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800505a:	bfc8      	it	gt
 800505c:	2400      	movgt	r4, #0
 800505e:	f1a3 0302 	sub.w	r3, r3, #2
 8005062:	bfd8      	it	le
 8005064:	2401      	movle	r4, #1
 8005066:	2b03      	cmp	r3, #3
 8005068:	d864      	bhi.n	8005134 <_dtoa_r+0x29c>
 800506a:	e8df f003 	tbb	[pc, r3]
 800506e:	382b      	.short	0x382b
 8005070:	5636      	.short	0x5636
 8005072:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005076:	441e      	add	r6, r3
 8005078:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800507c:	2b20      	cmp	r3, #32
 800507e:	bfc1      	itttt	gt
 8005080:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005084:	fa08 f803 	lslgt.w	r8, r8, r3
 8005088:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800508c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005090:	bfd6      	itet	le
 8005092:	f1c3 0320 	rsble	r3, r3, #32
 8005096:	ea48 0003 	orrgt.w	r0, r8, r3
 800509a:	fa04 f003 	lslle.w	r0, r4, r3
 800509e:	f7fb f9b9 	bl	8000414 <__aeabi_ui2d>
 80050a2:	2201      	movs	r2, #1
 80050a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80050a8:	3e01      	subs	r6, #1
 80050aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80050ac:	e775      	b.n	8004f9a <_dtoa_r+0x102>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e7b6      	b.n	8005020 <_dtoa_r+0x188>
 80050b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80050b4:	e7b5      	b.n	8005022 <_dtoa_r+0x18a>
 80050b6:	427b      	negs	r3, r7
 80050b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80050ba:	2300      	movs	r3, #0
 80050bc:	eba8 0807 	sub.w	r8, r8, r7
 80050c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80050c2:	e7c2      	b.n	800504a <_dtoa_r+0x1b2>
 80050c4:	2300      	movs	r3, #0
 80050c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	dc35      	bgt.n	800513a <_dtoa_r+0x2a2>
 80050ce:	2301      	movs	r3, #1
 80050d0:	461a      	mov	r2, r3
 80050d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80050d6:	9221      	str	r2, [sp, #132]	@ 0x84
 80050d8:	e00b      	b.n	80050f2 <_dtoa_r+0x25a>
 80050da:	2301      	movs	r3, #1
 80050dc:	e7f3      	b.n	80050c6 <_dtoa_r+0x22e>
 80050de:	2300      	movs	r3, #0
 80050e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	9308      	str	r3, [sp, #32]
 80050e8:	3301      	adds	r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	9307      	str	r3, [sp, #28]
 80050ee:	bfb8      	it	lt
 80050f0:	2301      	movlt	r3, #1
 80050f2:	2100      	movs	r1, #0
 80050f4:	2204      	movs	r2, #4
 80050f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80050fa:	f102 0514 	add.w	r5, r2, #20
 80050fe:	429d      	cmp	r5, r3
 8005100:	d91f      	bls.n	8005142 <_dtoa_r+0x2aa>
 8005102:	6041      	str	r1, [r0, #4]
 8005104:	4658      	mov	r0, fp
 8005106:	f000 fd8d 	bl	8005c24 <_Balloc>
 800510a:	4682      	mov	sl, r0
 800510c:	2800      	cmp	r0, #0
 800510e:	d139      	bne.n	8005184 <_dtoa_r+0x2ec>
 8005110:	4602      	mov	r2, r0
 8005112:	f240 11af 	movw	r1, #431	@ 0x1af
 8005116:	4b1a      	ldr	r3, [pc, #104]	@ (8005180 <_dtoa_r+0x2e8>)
 8005118:	e6d2      	b.n	8004ec0 <_dtoa_r+0x28>
 800511a:	2301      	movs	r3, #1
 800511c:	e7e0      	b.n	80050e0 <_dtoa_r+0x248>
 800511e:	2401      	movs	r4, #1
 8005120:	2300      	movs	r3, #0
 8005122:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005124:	9320      	str	r3, [sp, #128]	@ 0x80
 8005126:	f04f 33ff 	mov.w	r3, #4294967295
 800512a:	2200      	movs	r2, #0
 800512c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005130:	2312      	movs	r3, #18
 8005132:	e7d0      	b.n	80050d6 <_dtoa_r+0x23e>
 8005134:	2301      	movs	r3, #1
 8005136:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005138:	e7f5      	b.n	8005126 <_dtoa_r+0x28e>
 800513a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800513c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005140:	e7d7      	b.n	80050f2 <_dtoa_r+0x25a>
 8005142:	3101      	adds	r1, #1
 8005144:	0052      	lsls	r2, r2, #1
 8005146:	e7d8      	b.n	80050fa <_dtoa_r+0x262>
 8005148:	636f4361 	.word	0x636f4361
 800514c:	3fd287a7 	.word	0x3fd287a7
 8005150:	8b60c8b3 	.word	0x8b60c8b3
 8005154:	3fc68a28 	.word	0x3fc68a28
 8005158:	509f79fb 	.word	0x509f79fb
 800515c:	3fd34413 	.word	0x3fd34413
 8005160:	08008f30 	.word	0x08008f30
 8005164:	08008f47 	.word	0x08008f47
 8005168:	7ff00000 	.word	0x7ff00000
 800516c:	08008f2c 	.word	0x08008f2c
 8005170:	08009289 	.word	0x08009289
 8005174:	08009288 	.word	0x08009288
 8005178:	3ff80000 	.word	0x3ff80000
 800517c:	08009040 	.word	0x08009040
 8005180:	08008f9f 	.word	0x08008f9f
 8005184:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005188:	6018      	str	r0, [r3, #0]
 800518a:	9b07      	ldr	r3, [sp, #28]
 800518c:	2b0e      	cmp	r3, #14
 800518e:	f200 80a4 	bhi.w	80052da <_dtoa_r+0x442>
 8005192:	2c00      	cmp	r4, #0
 8005194:	f000 80a1 	beq.w	80052da <_dtoa_r+0x442>
 8005198:	2f00      	cmp	r7, #0
 800519a:	dd33      	ble.n	8005204 <_dtoa_r+0x36c>
 800519c:	4b86      	ldr	r3, [pc, #536]	@ (80053b8 <_dtoa_r+0x520>)
 800519e:	f007 020f 	and.w	r2, r7, #15
 80051a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a6:	05f8      	lsls	r0, r7, #23
 80051a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80051b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80051b4:	d516      	bpl.n	80051e4 <_dtoa_r+0x34c>
 80051b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051ba:	4b80      	ldr	r3, [pc, #512]	@ (80053bc <_dtoa_r+0x524>)
 80051bc:	2603      	movs	r6, #3
 80051be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051c2:	f7fb facb 	bl	800075c <__aeabi_ddiv>
 80051c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ca:	f004 040f 	and.w	r4, r4, #15
 80051ce:	4d7b      	ldr	r5, [pc, #492]	@ (80053bc <_dtoa_r+0x524>)
 80051d0:	b954      	cbnz	r4, 80051e8 <_dtoa_r+0x350>
 80051d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051da:	f7fb fabf 	bl	800075c <__aeabi_ddiv>
 80051de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051e2:	e028      	b.n	8005236 <_dtoa_r+0x39e>
 80051e4:	2602      	movs	r6, #2
 80051e6:	e7f2      	b.n	80051ce <_dtoa_r+0x336>
 80051e8:	07e1      	lsls	r1, r4, #31
 80051ea:	d508      	bpl.n	80051fe <_dtoa_r+0x366>
 80051ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051f4:	f7fb f988 	bl	8000508 <__aeabi_dmul>
 80051f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051fc:	3601      	adds	r6, #1
 80051fe:	1064      	asrs	r4, r4, #1
 8005200:	3508      	adds	r5, #8
 8005202:	e7e5      	b.n	80051d0 <_dtoa_r+0x338>
 8005204:	f000 80d2 	beq.w	80053ac <_dtoa_r+0x514>
 8005208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800520c:	427c      	negs	r4, r7
 800520e:	4b6a      	ldr	r3, [pc, #424]	@ (80053b8 <_dtoa_r+0x520>)
 8005210:	f004 020f 	and.w	r2, r4, #15
 8005214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f7fb f974 	bl	8000508 <__aeabi_dmul>
 8005220:	2602      	movs	r6, #2
 8005222:	2300      	movs	r3, #0
 8005224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005228:	4d64      	ldr	r5, [pc, #400]	@ (80053bc <_dtoa_r+0x524>)
 800522a:	1124      	asrs	r4, r4, #4
 800522c:	2c00      	cmp	r4, #0
 800522e:	f040 80b2 	bne.w	8005396 <_dtoa_r+0x4fe>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1d3      	bne.n	80051de <_dtoa_r+0x346>
 8005236:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800523a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80b7 	beq.w	80053b0 <_dtoa_r+0x518>
 8005242:	2200      	movs	r2, #0
 8005244:	4620      	mov	r0, r4
 8005246:	4629      	mov	r1, r5
 8005248:	4b5d      	ldr	r3, [pc, #372]	@ (80053c0 <_dtoa_r+0x528>)
 800524a:	f7fb fbcf 	bl	80009ec <__aeabi_dcmplt>
 800524e:	2800      	cmp	r0, #0
 8005250:	f000 80ae 	beq.w	80053b0 <_dtoa_r+0x518>
 8005254:	9b07      	ldr	r3, [sp, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80aa 	beq.w	80053b0 <_dtoa_r+0x518>
 800525c:	9b08      	ldr	r3, [sp, #32]
 800525e:	2b00      	cmp	r3, #0
 8005260:	dd37      	ble.n	80052d2 <_dtoa_r+0x43a>
 8005262:	1e7b      	subs	r3, r7, #1
 8005264:	4620      	mov	r0, r4
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	2200      	movs	r2, #0
 800526a:	4629      	mov	r1, r5
 800526c:	4b55      	ldr	r3, [pc, #340]	@ (80053c4 <_dtoa_r+0x52c>)
 800526e:	f7fb f94b 	bl	8000508 <__aeabi_dmul>
 8005272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005276:	9c08      	ldr	r4, [sp, #32]
 8005278:	3601      	adds	r6, #1
 800527a:	4630      	mov	r0, r6
 800527c:	f7fb f8da 	bl	8000434 <__aeabi_i2d>
 8005280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005284:	f7fb f940 	bl	8000508 <__aeabi_dmul>
 8005288:	2200      	movs	r2, #0
 800528a:	4b4f      	ldr	r3, [pc, #316]	@ (80053c8 <_dtoa_r+0x530>)
 800528c:	f7fa ff86 	bl	800019c <__adddf3>
 8005290:	4605      	mov	r5, r0
 8005292:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005296:	2c00      	cmp	r4, #0
 8005298:	f040 809a 	bne.w	80053d0 <_dtoa_r+0x538>
 800529c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	4b4a      	ldr	r3, [pc, #296]	@ (80053cc <_dtoa_r+0x534>)
 80052a4:	f7fa ff78 	bl	8000198 <__aeabi_dsub>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052b0:	462a      	mov	r2, r5
 80052b2:	4633      	mov	r3, r6
 80052b4:	f7fb fbb8 	bl	8000a28 <__aeabi_dcmpgt>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	f040 828e 	bne.w	80057da <_dtoa_r+0x942>
 80052be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c2:	462a      	mov	r2, r5
 80052c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80052c8:	f7fb fb90 	bl	80009ec <__aeabi_dcmplt>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f040 8127 	bne.w	8005520 <_dtoa_r+0x688>
 80052d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80052d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80052da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f2c0 8163 	blt.w	80055a8 <_dtoa_r+0x710>
 80052e2:	2f0e      	cmp	r7, #14
 80052e4:	f300 8160 	bgt.w	80055a8 <_dtoa_r+0x710>
 80052e8:	4b33      	ldr	r3, [pc, #204]	@ (80053b8 <_dtoa_r+0x520>)
 80052ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da03      	bge.n	8005304 <_dtoa_r+0x46c>
 80052fc:	9b07      	ldr	r3, [sp, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f340 8100 	ble.w	8005504 <_dtoa_r+0x66c>
 8005304:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005308:	4656      	mov	r6, sl
 800530a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	f7fb fa23 	bl	800075c <__aeabi_ddiv>
 8005316:	f7fb fba7 	bl	8000a68 <__aeabi_d2iz>
 800531a:	4680      	mov	r8, r0
 800531c:	f7fb f88a 	bl	8000434 <__aeabi_i2d>
 8005320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005324:	f7fb f8f0 	bl	8000508 <__aeabi_dmul>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4620      	mov	r0, r4
 800532e:	4629      	mov	r1, r5
 8005330:	f7fa ff32 	bl	8000198 <__aeabi_dsub>
 8005334:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005338:	9d07      	ldr	r5, [sp, #28]
 800533a:	f806 4b01 	strb.w	r4, [r6], #1
 800533e:	eba6 040a 	sub.w	r4, r6, sl
 8005342:	42a5      	cmp	r5, r4
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	f040 8116 	bne.w	8005578 <_dtoa_r+0x6e0>
 800534c:	f7fa ff26 	bl	800019c <__adddf3>
 8005350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005354:	4604      	mov	r4, r0
 8005356:	460d      	mov	r5, r1
 8005358:	f7fb fb66 	bl	8000a28 <__aeabi_dcmpgt>
 800535c:	2800      	cmp	r0, #0
 800535e:	f040 80f8 	bne.w	8005552 <_dtoa_r+0x6ba>
 8005362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005366:	4620      	mov	r0, r4
 8005368:	4629      	mov	r1, r5
 800536a:	f7fb fb35 	bl	80009d8 <__aeabi_dcmpeq>
 800536e:	b118      	cbz	r0, 8005378 <_dtoa_r+0x4e0>
 8005370:	f018 0f01 	tst.w	r8, #1
 8005374:	f040 80ed 	bne.w	8005552 <_dtoa_r+0x6ba>
 8005378:	4649      	mov	r1, r9
 800537a:	4658      	mov	r0, fp
 800537c:	f000 fc92 	bl	8005ca4 <_Bfree>
 8005380:	2300      	movs	r3, #0
 8005382:	7033      	strb	r3, [r6, #0]
 8005384:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005386:	3701      	adds	r7, #1
 8005388:	601f      	str	r7, [r3, #0]
 800538a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8320 	beq.w	80059d2 <_dtoa_r+0xb3a>
 8005392:	601e      	str	r6, [r3, #0]
 8005394:	e31d      	b.n	80059d2 <_dtoa_r+0xb3a>
 8005396:	07e2      	lsls	r2, r4, #31
 8005398:	d505      	bpl.n	80053a6 <_dtoa_r+0x50e>
 800539a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800539e:	f7fb f8b3 	bl	8000508 <__aeabi_dmul>
 80053a2:	2301      	movs	r3, #1
 80053a4:	3601      	adds	r6, #1
 80053a6:	1064      	asrs	r4, r4, #1
 80053a8:	3508      	adds	r5, #8
 80053aa:	e73f      	b.n	800522c <_dtoa_r+0x394>
 80053ac:	2602      	movs	r6, #2
 80053ae:	e742      	b.n	8005236 <_dtoa_r+0x39e>
 80053b0:	9c07      	ldr	r4, [sp, #28]
 80053b2:	9704      	str	r7, [sp, #16]
 80053b4:	e761      	b.n	800527a <_dtoa_r+0x3e2>
 80053b6:	bf00      	nop
 80053b8:	08009040 	.word	0x08009040
 80053bc:	08009018 	.word	0x08009018
 80053c0:	3ff00000 	.word	0x3ff00000
 80053c4:	40240000 	.word	0x40240000
 80053c8:	401c0000 	.word	0x401c0000
 80053cc:	40140000 	.word	0x40140000
 80053d0:	4b70      	ldr	r3, [pc, #448]	@ (8005594 <_dtoa_r+0x6fc>)
 80053d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80053d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053dc:	4454      	add	r4, sl
 80053de:	2900      	cmp	r1, #0
 80053e0:	d045      	beq.n	800546e <_dtoa_r+0x5d6>
 80053e2:	2000      	movs	r0, #0
 80053e4:	496c      	ldr	r1, [pc, #432]	@ (8005598 <_dtoa_r+0x700>)
 80053e6:	f7fb f9b9 	bl	800075c <__aeabi_ddiv>
 80053ea:	4633      	mov	r3, r6
 80053ec:	462a      	mov	r2, r5
 80053ee:	f7fa fed3 	bl	8000198 <__aeabi_dsub>
 80053f2:	4656      	mov	r6, sl
 80053f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053fc:	f7fb fb34 	bl	8000a68 <__aeabi_d2iz>
 8005400:	4605      	mov	r5, r0
 8005402:	f7fb f817 	bl	8000434 <__aeabi_i2d>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800540e:	f7fa fec3 	bl	8000198 <__aeabi_dsub>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	3530      	adds	r5, #48	@ 0x30
 8005418:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800541c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005420:	f806 5b01 	strb.w	r5, [r6], #1
 8005424:	f7fb fae2 	bl	80009ec <__aeabi_dcmplt>
 8005428:	2800      	cmp	r0, #0
 800542a:	d163      	bne.n	80054f4 <_dtoa_r+0x65c>
 800542c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005430:	2000      	movs	r0, #0
 8005432:	495a      	ldr	r1, [pc, #360]	@ (800559c <_dtoa_r+0x704>)
 8005434:	f7fa feb0 	bl	8000198 <__aeabi_dsub>
 8005438:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800543c:	f7fb fad6 	bl	80009ec <__aeabi_dcmplt>
 8005440:	2800      	cmp	r0, #0
 8005442:	f040 8087 	bne.w	8005554 <_dtoa_r+0x6bc>
 8005446:	42a6      	cmp	r6, r4
 8005448:	f43f af43 	beq.w	80052d2 <_dtoa_r+0x43a>
 800544c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005450:	2200      	movs	r2, #0
 8005452:	4b53      	ldr	r3, [pc, #332]	@ (80055a0 <_dtoa_r+0x708>)
 8005454:	f7fb f858 	bl	8000508 <__aeabi_dmul>
 8005458:	2200      	movs	r2, #0
 800545a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800545e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005462:	4b4f      	ldr	r3, [pc, #316]	@ (80055a0 <_dtoa_r+0x708>)
 8005464:	f7fb f850 	bl	8000508 <__aeabi_dmul>
 8005468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800546c:	e7c4      	b.n	80053f8 <_dtoa_r+0x560>
 800546e:	4631      	mov	r1, r6
 8005470:	4628      	mov	r0, r5
 8005472:	f7fb f849 	bl	8000508 <__aeabi_dmul>
 8005476:	4656      	mov	r6, sl
 8005478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800547c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800547e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005482:	f7fb faf1 	bl	8000a68 <__aeabi_d2iz>
 8005486:	4605      	mov	r5, r0
 8005488:	f7fa ffd4 	bl	8000434 <__aeabi_i2d>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005494:	f7fa fe80 	bl	8000198 <__aeabi_dsub>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	3530      	adds	r5, #48	@ 0x30
 800549e:	f806 5b01 	strb.w	r5, [r6], #1
 80054a2:	42a6      	cmp	r6, r4
 80054a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	d124      	bne.n	80054f8 <_dtoa_r+0x660>
 80054ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80054b2:	4b39      	ldr	r3, [pc, #228]	@ (8005598 <_dtoa_r+0x700>)
 80054b4:	f7fa fe72 	bl	800019c <__adddf3>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054c0:	f7fb fab2 	bl	8000a28 <__aeabi_dcmpgt>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d145      	bne.n	8005554 <_dtoa_r+0x6bc>
 80054c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054cc:	2000      	movs	r0, #0
 80054ce:	4932      	ldr	r1, [pc, #200]	@ (8005598 <_dtoa_r+0x700>)
 80054d0:	f7fa fe62 	bl	8000198 <__aeabi_dsub>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054dc:	f7fb fa86 	bl	80009ec <__aeabi_dcmplt>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	f43f aef6 	beq.w	80052d2 <_dtoa_r+0x43a>
 80054e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80054e8:	1e73      	subs	r3, r6, #1
 80054ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054f0:	2b30      	cmp	r3, #48	@ 0x30
 80054f2:	d0f8      	beq.n	80054e6 <_dtoa_r+0x64e>
 80054f4:	9f04      	ldr	r7, [sp, #16]
 80054f6:	e73f      	b.n	8005378 <_dtoa_r+0x4e0>
 80054f8:	4b29      	ldr	r3, [pc, #164]	@ (80055a0 <_dtoa_r+0x708>)
 80054fa:	f7fb f805 	bl	8000508 <__aeabi_dmul>
 80054fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005502:	e7bc      	b.n	800547e <_dtoa_r+0x5e6>
 8005504:	d10c      	bne.n	8005520 <_dtoa_r+0x688>
 8005506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800550a:	2200      	movs	r2, #0
 800550c:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <_dtoa_r+0x70c>)
 800550e:	f7fa fffb 	bl	8000508 <__aeabi_dmul>
 8005512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005516:	f7fb fa7d 	bl	8000a14 <__aeabi_dcmpge>
 800551a:	2800      	cmp	r0, #0
 800551c:	f000 815b 	beq.w	80057d6 <_dtoa_r+0x93e>
 8005520:	2400      	movs	r4, #0
 8005522:	4625      	mov	r5, r4
 8005524:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005526:	4656      	mov	r6, sl
 8005528:	43db      	mvns	r3, r3
 800552a:	9304      	str	r3, [sp, #16]
 800552c:	2700      	movs	r7, #0
 800552e:	4621      	mov	r1, r4
 8005530:	4658      	mov	r0, fp
 8005532:	f000 fbb7 	bl	8005ca4 <_Bfree>
 8005536:	2d00      	cmp	r5, #0
 8005538:	d0dc      	beq.n	80054f4 <_dtoa_r+0x65c>
 800553a:	b12f      	cbz	r7, 8005548 <_dtoa_r+0x6b0>
 800553c:	42af      	cmp	r7, r5
 800553e:	d003      	beq.n	8005548 <_dtoa_r+0x6b0>
 8005540:	4639      	mov	r1, r7
 8005542:	4658      	mov	r0, fp
 8005544:	f000 fbae 	bl	8005ca4 <_Bfree>
 8005548:	4629      	mov	r1, r5
 800554a:	4658      	mov	r0, fp
 800554c:	f000 fbaa 	bl	8005ca4 <_Bfree>
 8005550:	e7d0      	b.n	80054f4 <_dtoa_r+0x65c>
 8005552:	9704      	str	r7, [sp, #16]
 8005554:	4633      	mov	r3, r6
 8005556:	461e      	mov	r6, r3
 8005558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800555c:	2a39      	cmp	r2, #57	@ 0x39
 800555e:	d107      	bne.n	8005570 <_dtoa_r+0x6d8>
 8005560:	459a      	cmp	sl, r3
 8005562:	d1f8      	bne.n	8005556 <_dtoa_r+0x6be>
 8005564:	9a04      	ldr	r2, [sp, #16]
 8005566:	3201      	adds	r2, #1
 8005568:	9204      	str	r2, [sp, #16]
 800556a:	2230      	movs	r2, #48	@ 0x30
 800556c:	f88a 2000 	strb.w	r2, [sl]
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	3201      	adds	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e7bd      	b.n	80054f4 <_dtoa_r+0x65c>
 8005578:	2200      	movs	r2, #0
 800557a:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <_dtoa_r+0x708>)
 800557c:	f7fa ffc4 	bl	8000508 <__aeabi_dmul>
 8005580:	2200      	movs	r2, #0
 8005582:	2300      	movs	r3, #0
 8005584:	4604      	mov	r4, r0
 8005586:	460d      	mov	r5, r1
 8005588:	f7fb fa26 	bl	80009d8 <__aeabi_dcmpeq>
 800558c:	2800      	cmp	r0, #0
 800558e:	f43f aebc 	beq.w	800530a <_dtoa_r+0x472>
 8005592:	e6f1      	b.n	8005378 <_dtoa_r+0x4e0>
 8005594:	08009040 	.word	0x08009040
 8005598:	3fe00000 	.word	0x3fe00000
 800559c:	3ff00000 	.word	0x3ff00000
 80055a0:	40240000 	.word	0x40240000
 80055a4:	40140000 	.word	0x40140000
 80055a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	f000 80db 	beq.w	8005766 <_dtoa_r+0x8ce>
 80055b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80055b2:	2a01      	cmp	r2, #1
 80055b4:	f300 80bf 	bgt.w	8005736 <_dtoa_r+0x89e>
 80055b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	f000 80b7 	beq.w	800572e <_dtoa_r+0x896>
 80055c0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80055c4:	4646      	mov	r6, r8
 80055c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80055c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055ca:	2101      	movs	r1, #1
 80055cc:	441a      	add	r2, r3
 80055ce:	4658      	mov	r0, fp
 80055d0:	4498      	add	r8, r3
 80055d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80055d4:	f000 fc64 	bl	8005ea0 <__i2b>
 80055d8:	4605      	mov	r5, r0
 80055da:	b15e      	cbz	r6, 80055f4 <_dtoa_r+0x75c>
 80055dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dd08      	ble.n	80055f4 <_dtoa_r+0x75c>
 80055e2:	42b3      	cmp	r3, r6
 80055e4:	bfa8      	it	ge
 80055e6:	4633      	movge	r3, r6
 80055e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055ea:	eba8 0803 	sub.w	r8, r8, r3
 80055ee:	1af6      	subs	r6, r6, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055f6:	b1f3      	cbz	r3, 8005636 <_dtoa_r+0x79e>
 80055f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80b7 	beq.w	800576e <_dtoa_r+0x8d6>
 8005600:	b18c      	cbz	r4, 8005626 <_dtoa_r+0x78e>
 8005602:	4629      	mov	r1, r5
 8005604:	4622      	mov	r2, r4
 8005606:	4658      	mov	r0, fp
 8005608:	f000 fd08 	bl	800601c <__pow5mult>
 800560c:	464a      	mov	r2, r9
 800560e:	4601      	mov	r1, r0
 8005610:	4605      	mov	r5, r0
 8005612:	4658      	mov	r0, fp
 8005614:	f000 fc5a 	bl	8005ecc <__multiply>
 8005618:	4649      	mov	r1, r9
 800561a:	9004      	str	r0, [sp, #16]
 800561c:	4658      	mov	r0, fp
 800561e:	f000 fb41 	bl	8005ca4 <_Bfree>
 8005622:	9b04      	ldr	r3, [sp, #16]
 8005624:	4699      	mov	r9, r3
 8005626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005628:	1b1a      	subs	r2, r3, r4
 800562a:	d004      	beq.n	8005636 <_dtoa_r+0x79e>
 800562c:	4649      	mov	r1, r9
 800562e:	4658      	mov	r0, fp
 8005630:	f000 fcf4 	bl	800601c <__pow5mult>
 8005634:	4681      	mov	r9, r0
 8005636:	2101      	movs	r1, #1
 8005638:	4658      	mov	r0, fp
 800563a:	f000 fc31 	bl	8005ea0 <__i2b>
 800563e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005640:	4604      	mov	r4, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 81c9 	beq.w	80059da <_dtoa_r+0xb42>
 8005648:	461a      	mov	r2, r3
 800564a:	4601      	mov	r1, r0
 800564c:	4658      	mov	r0, fp
 800564e:	f000 fce5 	bl	800601c <__pow5mult>
 8005652:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005654:	4604      	mov	r4, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	f300 808f 	bgt.w	800577a <_dtoa_r+0x8e2>
 800565c:	9b02      	ldr	r3, [sp, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 8087 	bne.w	8005772 <_dtoa_r+0x8da>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800566a:	2b00      	cmp	r3, #0
 800566c:	f040 8083 	bne.w	8005776 <_dtoa_r+0x8de>
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005676:	0d1b      	lsrs	r3, r3, #20
 8005678:	051b      	lsls	r3, r3, #20
 800567a:	b12b      	cbz	r3, 8005688 <_dtoa_r+0x7f0>
 800567c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800567e:	f108 0801 	add.w	r8, r8, #1
 8005682:	3301      	adds	r3, #1
 8005684:	9309      	str	r3, [sp, #36]	@ 0x24
 8005686:	2301      	movs	r3, #1
 8005688:	930a      	str	r3, [sp, #40]	@ 0x28
 800568a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 81aa 	beq.w	80059e6 <_dtoa_r+0xb4e>
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005698:	6918      	ldr	r0, [r3, #16]
 800569a:	f000 fbb5 	bl	8005e08 <__hi0bits>
 800569e:	f1c0 0020 	rsb	r0, r0, #32
 80056a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056a4:	4418      	add	r0, r3
 80056a6:	f010 001f 	ands.w	r0, r0, #31
 80056aa:	d071      	beq.n	8005790 <_dtoa_r+0x8f8>
 80056ac:	f1c0 0320 	rsb	r3, r0, #32
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	dd65      	ble.n	8005780 <_dtoa_r+0x8e8>
 80056b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b6:	f1c0 001c 	rsb	r0, r0, #28
 80056ba:	4403      	add	r3, r0
 80056bc:	4480      	add	r8, r0
 80056be:	4406      	add	r6, r0
 80056c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c2:	f1b8 0f00 	cmp.w	r8, #0
 80056c6:	dd05      	ble.n	80056d4 <_dtoa_r+0x83c>
 80056c8:	4649      	mov	r1, r9
 80056ca:	4642      	mov	r2, r8
 80056cc:	4658      	mov	r0, fp
 80056ce:	f000 fcff 	bl	80060d0 <__lshift>
 80056d2:	4681      	mov	r9, r0
 80056d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dd05      	ble.n	80056e6 <_dtoa_r+0x84e>
 80056da:	4621      	mov	r1, r4
 80056dc:	461a      	mov	r2, r3
 80056de:	4658      	mov	r0, fp
 80056e0:	f000 fcf6 	bl	80060d0 <__lshift>
 80056e4:	4604      	mov	r4, r0
 80056e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d053      	beq.n	8005794 <_dtoa_r+0x8fc>
 80056ec:	4621      	mov	r1, r4
 80056ee:	4648      	mov	r0, r9
 80056f0:	f000 fd5a 	bl	80061a8 <__mcmp>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	da4d      	bge.n	8005794 <_dtoa_r+0x8fc>
 80056f8:	1e7b      	subs	r3, r7, #1
 80056fa:	4649      	mov	r1, r9
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	220a      	movs	r2, #10
 8005700:	2300      	movs	r3, #0
 8005702:	4658      	mov	r0, fp
 8005704:	f000 faf0 	bl	8005ce8 <__multadd>
 8005708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800570a:	4681      	mov	r9, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 816c 	beq.w	80059ea <_dtoa_r+0xb52>
 8005712:	2300      	movs	r3, #0
 8005714:	4629      	mov	r1, r5
 8005716:	220a      	movs	r2, #10
 8005718:	4658      	mov	r0, fp
 800571a:	f000 fae5 	bl	8005ce8 <__multadd>
 800571e:	9b08      	ldr	r3, [sp, #32]
 8005720:	4605      	mov	r5, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	dc61      	bgt.n	80057ea <_dtoa_r+0x952>
 8005726:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005728:	2b02      	cmp	r3, #2
 800572a:	dc3b      	bgt.n	80057a4 <_dtoa_r+0x90c>
 800572c:	e05d      	b.n	80057ea <_dtoa_r+0x952>
 800572e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005730:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005734:	e746      	b.n	80055c4 <_dtoa_r+0x72c>
 8005736:	9b07      	ldr	r3, [sp, #28]
 8005738:	1e5c      	subs	r4, r3, #1
 800573a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800573c:	42a3      	cmp	r3, r4
 800573e:	bfbf      	itttt	lt
 8005740:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005742:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005744:	1ae3      	sublt	r3, r4, r3
 8005746:	18d2      	addlt	r2, r2, r3
 8005748:	bfa8      	it	ge
 800574a:	1b1c      	subge	r4, r3, r4
 800574c:	9b07      	ldr	r3, [sp, #28]
 800574e:	bfbe      	ittt	lt
 8005750:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005752:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005754:	2400      	movlt	r4, #0
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfb5      	itete	lt
 800575a:	eba8 0603 	sublt.w	r6, r8, r3
 800575e:	4646      	movge	r6, r8
 8005760:	2300      	movlt	r3, #0
 8005762:	9b07      	ldrge	r3, [sp, #28]
 8005764:	e730      	b.n	80055c8 <_dtoa_r+0x730>
 8005766:	4646      	mov	r6, r8
 8005768:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800576a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800576c:	e735      	b.n	80055da <_dtoa_r+0x742>
 800576e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005770:	e75c      	b.n	800562c <_dtoa_r+0x794>
 8005772:	2300      	movs	r3, #0
 8005774:	e788      	b.n	8005688 <_dtoa_r+0x7f0>
 8005776:	9b02      	ldr	r3, [sp, #8]
 8005778:	e786      	b.n	8005688 <_dtoa_r+0x7f0>
 800577a:	2300      	movs	r3, #0
 800577c:	930a      	str	r3, [sp, #40]	@ 0x28
 800577e:	e788      	b.n	8005692 <_dtoa_r+0x7fa>
 8005780:	d09f      	beq.n	80056c2 <_dtoa_r+0x82a>
 8005782:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005784:	331c      	adds	r3, #28
 8005786:	441a      	add	r2, r3
 8005788:	4498      	add	r8, r3
 800578a:	441e      	add	r6, r3
 800578c:	9209      	str	r2, [sp, #36]	@ 0x24
 800578e:	e798      	b.n	80056c2 <_dtoa_r+0x82a>
 8005790:	4603      	mov	r3, r0
 8005792:	e7f6      	b.n	8005782 <_dtoa_r+0x8ea>
 8005794:	9b07      	ldr	r3, [sp, #28]
 8005796:	9704      	str	r7, [sp, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	dc20      	bgt.n	80057de <_dtoa_r+0x946>
 800579c:	9308      	str	r3, [sp, #32]
 800579e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	dd1e      	ble.n	80057e2 <_dtoa_r+0x94a>
 80057a4:	9b08      	ldr	r3, [sp, #32]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f47f aebc 	bne.w	8005524 <_dtoa_r+0x68c>
 80057ac:	4621      	mov	r1, r4
 80057ae:	2205      	movs	r2, #5
 80057b0:	4658      	mov	r0, fp
 80057b2:	f000 fa99 	bl	8005ce8 <__multadd>
 80057b6:	4601      	mov	r1, r0
 80057b8:	4604      	mov	r4, r0
 80057ba:	4648      	mov	r0, r9
 80057bc:	f000 fcf4 	bl	80061a8 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f77f aeaf 	ble.w	8005524 <_dtoa_r+0x68c>
 80057c6:	2331      	movs	r3, #49	@ 0x31
 80057c8:	4656      	mov	r6, sl
 80057ca:	f806 3b01 	strb.w	r3, [r6], #1
 80057ce:	9b04      	ldr	r3, [sp, #16]
 80057d0:	3301      	adds	r3, #1
 80057d2:	9304      	str	r3, [sp, #16]
 80057d4:	e6aa      	b.n	800552c <_dtoa_r+0x694>
 80057d6:	9c07      	ldr	r4, [sp, #28]
 80057d8:	9704      	str	r7, [sp, #16]
 80057da:	4625      	mov	r5, r4
 80057dc:	e7f3      	b.n	80057c6 <_dtoa_r+0x92e>
 80057de:	9b07      	ldr	r3, [sp, #28]
 80057e0:	9308      	str	r3, [sp, #32]
 80057e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8104 	beq.w	80059f2 <_dtoa_r+0xb5a>
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	dd05      	ble.n	80057fa <_dtoa_r+0x962>
 80057ee:	4629      	mov	r1, r5
 80057f0:	4632      	mov	r2, r6
 80057f2:	4658      	mov	r0, fp
 80057f4:	f000 fc6c 	bl	80060d0 <__lshift>
 80057f8:	4605      	mov	r5, r0
 80057fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05a      	beq.n	80058b6 <_dtoa_r+0xa1e>
 8005800:	4658      	mov	r0, fp
 8005802:	6869      	ldr	r1, [r5, #4]
 8005804:	f000 fa0e 	bl	8005c24 <_Balloc>
 8005808:	4606      	mov	r6, r0
 800580a:	b928      	cbnz	r0, 8005818 <_dtoa_r+0x980>
 800580c:	4602      	mov	r2, r0
 800580e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005812:	4b83      	ldr	r3, [pc, #524]	@ (8005a20 <_dtoa_r+0xb88>)
 8005814:	f7ff bb54 	b.w	8004ec0 <_dtoa_r+0x28>
 8005818:	692a      	ldr	r2, [r5, #16]
 800581a:	f105 010c 	add.w	r1, r5, #12
 800581e:	3202      	adds	r2, #2
 8005820:	0092      	lsls	r2, r2, #2
 8005822:	300c      	adds	r0, #12
 8005824:	f002 fe24 	bl	8008470 <memcpy>
 8005828:	2201      	movs	r2, #1
 800582a:	4631      	mov	r1, r6
 800582c:	4658      	mov	r0, fp
 800582e:	f000 fc4f 	bl	80060d0 <__lshift>
 8005832:	462f      	mov	r7, r5
 8005834:	4605      	mov	r5, r0
 8005836:	f10a 0301 	add.w	r3, sl, #1
 800583a:	9307      	str	r3, [sp, #28]
 800583c:	9b08      	ldr	r3, [sp, #32]
 800583e:	4453      	add	r3, sl
 8005840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005842:	9b02      	ldr	r3, [sp, #8]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	930a      	str	r3, [sp, #40]	@ 0x28
 800584a:	9b07      	ldr	r3, [sp, #28]
 800584c:	4621      	mov	r1, r4
 800584e:	3b01      	subs	r3, #1
 8005850:	4648      	mov	r0, r9
 8005852:	9302      	str	r3, [sp, #8]
 8005854:	f7ff fa96 	bl	8004d84 <quorem>
 8005858:	4639      	mov	r1, r7
 800585a:	9008      	str	r0, [sp, #32]
 800585c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005860:	4648      	mov	r0, r9
 8005862:	f000 fca1 	bl	80061a8 <__mcmp>
 8005866:	462a      	mov	r2, r5
 8005868:	9009      	str	r0, [sp, #36]	@ 0x24
 800586a:	4621      	mov	r1, r4
 800586c:	4658      	mov	r0, fp
 800586e:	f000 fcb7 	bl	80061e0 <__mdiff>
 8005872:	68c2      	ldr	r2, [r0, #12]
 8005874:	4606      	mov	r6, r0
 8005876:	bb02      	cbnz	r2, 80058ba <_dtoa_r+0xa22>
 8005878:	4601      	mov	r1, r0
 800587a:	4648      	mov	r0, r9
 800587c:	f000 fc94 	bl	80061a8 <__mcmp>
 8005880:	4602      	mov	r2, r0
 8005882:	4631      	mov	r1, r6
 8005884:	4658      	mov	r0, fp
 8005886:	920c      	str	r2, [sp, #48]	@ 0x30
 8005888:	f000 fa0c 	bl	8005ca4 <_Bfree>
 800588c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800588e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005890:	9e07      	ldr	r6, [sp, #28]
 8005892:	ea43 0102 	orr.w	r1, r3, r2
 8005896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005898:	4319      	orrs	r1, r3
 800589a:	d110      	bne.n	80058be <_dtoa_r+0xa26>
 800589c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058a0:	d029      	beq.n	80058f6 <_dtoa_r+0xa5e>
 80058a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dd02      	ble.n	80058ae <_dtoa_r+0xa16>
 80058a8:	9b08      	ldr	r3, [sp, #32]
 80058aa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80058ae:	9b02      	ldr	r3, [sp, #8]
 80058b0:	f883 8000 	strb.w	r8, [r3]
 80058b4:	e63b      	b.n	800552e <_dtoa_r+0x696>
 80058b6:	4628      	mov	r0, r5
 80058b8:	e7bb      	b.n	8005832 <_dtoa_r+0x99a>
 80058ba:	2201      	movs	r2, #1
 80058bc:	e7e1      	b.n	8005882 <_dtoa_r+0x9ea>
 80058be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	db04      	blt.n	80058ce <_dtoa_r+0xa36>
 80058c4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80058c6:	430b      	orrs	r3, r1
 80058c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80058ca:	430b      	orrs	r3, r1
 80058cc:	d120      	bne.n	8005910 <_dtoa_r+0xa78>
 80058ce:	2a00      	cmp	r2, #0
 80058d0:	dded      	ble.n	80058ae <_dtoa_r+0xa16>
 80058d2:	4649      	mov	r1, r9
 80058d4:	2201      	movs	r2, #1
 80058d6:	4658      	mov	r0, fp
 80058d8:	f000 fbfa 	bl	80060d0 <__lshift>
 80058dc:	4621      	mov	r1, r4
 80058de:	4681      	mov	r9, r0
 80058e0:	f000 fc62 	bl	80061a8 <__mcmp>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	dc03      	bgt.n	80058f0 <_dtoa_r+0xa58>
 80058e8:	d1e1      	bne.n	80058ae <_dtoa_r+0xa16>
 80058ea:	f018 0f01 	tst.w	r8, #1
 80058ee:	d0de      	beq.n	80058ae <_dtoa_r+0xa16>
 80058f0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058f4:	d1d8      	bne.n	80058a8 <_dtoa_r+0xa10>
 80058f6:	2339      	movs	r3, #57	@ 0x39
 80058f8:	9a02      	ldr	r2, [sp, #8]
 80058fa:	7013      	strb	r3, [r2, #0]
 80058fc:	4633      	mov	r3, r6
 80058fe:	461e      	mov	r6, r3
 8005900:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005904:	3b01      	subs	r3, #1
 8005906:	2a39      	cmp	r2, #57	@ 0x39
 8005908:	d052      	beq.n	80059b0 <_dtoa_r+0xb18>
 800590a:	3201      	adds	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e60e      	b.n	800552e <_dtoa_r+0x696>
 8005910:	2a00      	cmp	r2, #0
 8005912:	dd07      	ble.n	8005924 <_dtoa_r+0xa8c>
 8005914:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005918:	d0ed      	beq.n	80058f6 <_dtoa_r+0xa5e>
 800591a:	9a02      	ldr	r2, [sp, #8]
 800591c:	f108 0301 	add.w	r3, r8, #1
 8005920:	7013      	strb	r3, [r2, #0]
 8005922:	e604      	b.n	800552e <_dtoa_r+0x696>
 8005924:	9b07      	ldr	r3, [sp, #28]
 8005926:	9a07      	ldr	r2, [sp, #28]
 8005928:	f803 8c01 	strb.w	r8, [r3, #-1]
 800592c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800592e:	4293      	cmp	r3, r2
 8005930:	d028      	beq.n	8005984 <_dtoa_r+0xaec>
 8005932:	4649      	mov	r1, r9
 8005934:	2300      	movs	r3, #0
 8005936:	220a      	movs	r2, #10
 8005938:	4658      	mov	r0, fp
 800593a:	f000 f9d5 	bl	8005ce8 <__multadd>
 800593e:	42af      	cmp	r7, r5
 8005940:	4681      	mov	r9, r0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	f04f 020a 	mov.w	r2, #10
 800594a:	4639      	mov	r1, r7
 800594c:	4658      	mov	r0, fp
 800594e:	d107      	bne.n	8005960 <_dtoa_r+0xac8>
 8005950:	f000 f9ca 	bl	8005ce8 <__multadd>
 8005954:	4607      	mov	r7, r0
 8005956:	4605      	mov	r5, r0
 8005958:	9b07      	ldr	r3, [sp, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	9307      	str	r3, [sp, #28]
 800595e:	e774      	b.n	800584a <_dtoa_r+0x9b2>
 8005960:	f000 f9c2 	bl	8005ce8 <__multadd>
 8005964:	4629      	mov	r1, r5
 8005966:	4607      	mov	r7, r0
 8005968:	2300      	movs	r3, #0
 800596a:	220a      	movs	r2, #10
 800596c:	4658      	mov	r0, fp
 800596e:	f000 f9bb 	bl	8005ce8 <__multadd>
 8005972:	4605      	mov	r5, r0
 8005974:	e7f0      	b.n	8005958 <_dtoa_r+0xac0>
 8005976:	9b08      	ldr	r3, [sp, #32]
 8005978:	2700      	movs	r7, #0
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfcc      	ite	gt
 800597e:	461e      	movgt	r6, r3
 8005980:	2601      	movle	r6, #1
 8005982:	4456      	add	r6, sl
 8005984:	4649      	mov	r1, r9
 8005986:	2201      	movs	r2, #1
 8005988:	4658      	mov	r0, fp
 800598a:	f000 fba1 	bl	80060d0 <__lshift>
 800598e:	4621      	mov	r1, r4
 8005990:	4681      	mov	r9, r0
 8005992:	f000 fc09 	bl	80061a8 <__mcmp>
 8005996:	2800      	cmp	r0, #0
 8005998:	dcb0      	bgt.n	80058fc <_dtoa_r+0xa64>
 800599a:	d102      	bne.n	80059a2 <_dtoa_r+0xb0a>
 800599c:	f018 0f01 	tst.w	r8, #1
 80059a0:	d1ac      	bne.n	80058fc <_dtoa_r+0xa64>
 80059a2:	4633      	mov	r3, r6
 80059a4:	461e      	mov	r6, r3
 80059a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059aa:	2a30      	cmp	r2, #48	@ 0x30
 80059ac:	d0fa      	beq.n	80059a4 <_dtoa_r+0xb0c>
 80059ae:	e5be      	b.n	800552e <_dtoa_r+0x696>
 80059b0:	459a      	cmp	sl, r3
 80059b2:	d1a4      	bne.n	80058fe <_dtoa_r+0xa66>
 80059b4:	9b04      	ldr	r3, [sp, #16]
 80059b6:	3301      	adds	r3, #1
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	2331      	movs	r3, #49	@ 0x31
 80059bc:	f88a 3000 	strb.w	r3, [sl]
 80059c0:	e5b5      	b.n	800552e <_dtoa_r+0x696>
 80059c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80059c4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005a24 <_dtoa_r+0xb8c>
 80059c8:	b11b      	cbz	r3, 80059d2 <_dtoa_r+0xb3a>
 80059ca:	f10a 0308 	add.w	r3, sl, #8
 80059ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	4650      	mov	r0, sl
 80059d4:	b017      	add	sp, #92	@ 0x5c
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059dc:	2b01      	cmp	r3, #1
 80059de:	f77f ae3d 	ble.w	800565c <_dtoa_r+0x7c4>
 80059e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80059e6:	2001      	movs	r0, #1
 80059e8:	e65b      	b.n	80056a2 <_dtoa_r+0x80a>
 80059ea:	9b08      	ldr	r3, [sp, #32]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f77f aed6 	ble.w	800579e <_dtoa_r+0x906>
 80059f2:	4656      	mov	r6, sl
 80059f4:	4621      	mov	r1, r4
 80059f6:	4648      	mov	r0, r9
 80059f8:	f7ff f9c4 	bl	8004d84 <quorem>
 80059fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005a00:	9b08      	ldr	r3, [sp, #32]
 8005a02:	f806 8b01 	strb.w	r8, [r6], #1
 8005a06:	eba6 020a 	sub.w	r2, r6, sl
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	ddb3      	ble.n	8005976 <_dtoa_r+0xade>
 8005a0e:	4649      	mov	r1, r9
 8005a10:	2300      	movs	r3, #0
 8005a12:	220a      	movs	r2, #10
 8005a14:	4658      	mov	r0, fp
 8005a16:	f000 f967 	bl	8005ce8 <__multadd>
 8005a1a:	4681      	mov	r9, r0
 8005a1c:	e7ea      	b.n	80059f4 <_dtoa_r+0xb5c>
 8005a1e:	bf00      	nop
 8005a20:	08008f9f 	.word	0x08008f9f
 8005a24:	08008f23 	.word	0x08008f23

08005a28 <_free_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	d040      	beq.n	8005ab2 <_free_r+0x8a>
 8005a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a34:	1f0c      	subs	r4, r1, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bfb8      	it	lt
 8005a3a:	18e4      	addlt	r4, r4, r3
 8005a3c:	f000 f8e6 	bl	8005c0c <__malloc_lock>
 8005a40:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <_free_r+0x8c>)
 8005a42:	6813      	ldr	r3, [r2, #0]
 8005a44:	b933      	cbnz	r3, 8005a54 <_free_r+0x2c>
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	6014      	str	r4, [r2, #0]
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a50:	f000 b8e2 	b.w	8005c18 <__malloc_unlock>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d908      	bls.n	8005a6a <_free_r+0x42>
 8005a58:	6820      	ldr	r0, [r4, #0]
 8005a5a:	1821      	adds	r1, r4, r0
 8005a5c:	428b      	cmp	r3, r1
 8005a5e:	bf01      	itttt	eq
 8005a60:	6819      	ldreq	r1, [r3, #0]
 8005a62:	685b      	ldreq	r3, [r3, #4]
 8005a64:	1809      	addeq	r1, r1, r0
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	e7ed      	b.n	8005a46 <_free_r+0x1e>
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b10b      	cbz	r3, 8005a74 <_free_r+0x4c>
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d9fa      	bls.n	8005a6a <_free_r+0x42>
 8005a74:	6811      	ldr	r1, [r2, #0]
 8005a76:	1850      	adds	r0, r2, r1
 8005a78:	42a0      	cmp	r0, r4
 8005a7a:	d10b      	bne.n	8005a94 <_free_r+0x6c>
 8005a7c:	6820      	ldr	r0, [r4, #0]
 8005a7e:	4401      	add	r1, r0
 8005a80:	1850      	adds	r0, r2, r1
 8005a82:	4283      	cmp	r3, r0
 8005a84:	6011      	str	r1, [r2, #0]
 8005a86:	d1e0      	bne.n	8005a4a <_free_r+0x22>
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4408      	add	r0, r1
 8005a8e:	6010      	str	r0, [r2, #0]
 8005a90:	6053      	str	r3, [r2, #4]
 8005a92:	e7da      	b.n	8005a4a <_free_r+0x22>
 8005a94:	d902      	bls.n	8005a9c <_free_r+0x74>
 8005a96:	230c      	movs	r3, #12
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	e7d6      	b.n	8005a4a <_free_r+0x22>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	1821      	adds	r1, r4, r0
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	bf01      	itttt	eq
 8005aa4:	6819      	ldreq	r1, [r3, #0]
 8005aa6:	685b      	ldreq	r3, [r3, #4]
 8005aa8:	1809      	addeq	r1, r1, r0
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6063      	str	r3, [r4, #4]
 8005aae:	6054      	str	r4, [r2, #4]
 8005ab0:	e7cb      	b.n	8005a4a <_free_r+0x22>
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	200003d8 	.word	0x200003d8

08005ab8 <malloc>:
 8005ab8:	4b02      	ldr	r3, [pc, #8]	@ (8005ac4 <malloc+0xc>)
 8005aba:	4601      	mov	r1, r0
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	f000 b825 	b.w	8005b0c <_malloc_r>
 8005ac2:	bf00      	nop
 8005ac4:	20000020 	.word	0x20000020

08005ac8 <sbrk_aligned>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4e0f      	ldr	r6, [pc, #60]	@ (8005b08 <sbrk_aligned+0x40>)
 8005acc:	460c      	mov	r4, r1
 8005ace:	6831      	ldr	r1, [r6, #0]
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	b911      	cbnz	r1, 8005ada <sbrk_aligned+0x12>
 8005ad4:	f002 fcbc 	bl	8008450 <_sbrk_r>
 8005ad8:	6030      	str	r0, [r6, #0]
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f002 fcb7 	bl	8008450 <_sbrk_r>
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	d103      	bne.n	8005aee <sbrk_aligned+0x26>
 8005ae6:	f04f 34ff 	mov.w	r4, #4294967295
 8005aea:	4620      	mov	r0, r4
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	1cc4      	adds	r4, r0, #3
 8005af0:	f024 0403 	bic.w	r4, r4, #3
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d0f8      	beq.n	8005aea <sbrk_aligned+0x22>
 8005af8:	1a21      	subs	r1, r4, r0
 8005afa:	4628      	mov	r0, r5
 8005afc:	f002 fca8 	bl	8008450 <_sbrk_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d1f2      	bne.n	8005aea <sbrk_aligned+0x22>
 8005b04:	e7ef      	b.n	8005ae6 <sbrk_aligned+0x1e>
 8005b06:	bf00      	nop
 8005b08:	200003d4 	.word	0x200003d4

08005b0c <_malloc_r>:
 8005b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b10:	1ccd      	adds	r5, r1, #3
 8005b12:	f025 0503 	bic.w	r5, r5, #3
 8005b16:	3508      	adds	r5, #8
 8005b18:	2d0c      	cmp	r5, #12
 8005b1a:	bf38      	it	cc
 8005b1c:	250c      	movcc	r5, #12
 8005b1e:	2d00      	cmp	r5, #0
 8005b20:	4606      	mov	r6, r0
 8005b22:	db01      	blt.n	8005b28 <_malloc_r+0x1c>
 8005b24:	42a9      	cmp	r1, r5
 8005b26:	d904      	bls.n	8005b32 <_malloc_r+0x26>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	6033      	str	r3, [r6, #0]
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c08 <_malloc_r+0xfc>
 8005b36:	f000 f869 	bl	8005c0c <__malloc_lock>
 8005b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b3e:	461c      	mov	r4, r3
 8005b40:	bb44      	cbnz	r4, 8005b94 <_malloc_r+0x88>
 8005b42:	4629      	mov	r1, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff ffbf 	bl	8005ac8 <sbrk_aligned>
 8005b4a:	1c43      	adds	r3, r0, #1
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	d158      	bne.n	8005c02 <_malloc_r+0xf6>
 8005b50:	f8d8 4000 	ldr.w	r4, [r8]
 8005b54:	4627      	mov	r7, r4
 8005b56:	2f00      	cmp	r7, #0
 8005b58:	d143      	bne.n	8005be2 <_malloc_r+0xd6>
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	d04b      	beq.n	8005bf6 <_malloc_r+0xea>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	4639      	mov	r1, r7
 8005b62:	4630      	mov	r0, r6
 8005b64:	eb04 0903 	add.w	r9, r4, r3
 8005b68:	f002 fc72 	bl	8008450 <_sbrk_r>
 8005b6c:	4581      	cmp	r9, r0
 8005b6e:	d142      	bne.n	8005bf6 <_malloc_r+0xea>
 8005b70:	6821      	ldr	r1, [r4, #0]
 8005b72:	4630      	mov	r0, r6
 8005b74:	1a6d      	subs	r5, r5, r1
 8005b76:	4629      	mov	r1, r5
 8005b78:	f7ff ffa6 	bl	8005ac8 <sbrk_aligned>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d03a      	beq.n	8005bf6 <_malloc_r+0xea>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	442b      	add	r3, r5
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	bb62      	cbnz	r2, 8005be8 <_malloc_r+0xdc>
 8005b8e:	f8c8 7000 	str.w	r7, [r8]
 8005b92:	e00f      	b.n	8005bb4 <_malloc_r+0xa8>
 8005b94:	6822      	ldr	r2, [r4, #0]
 8005b96:	1b52      	subs	r2, r2, r5
 8005b98:	d420      	bmi.n	8005bdc <_malloc_r+0xd0>
 8005b9a:	2a0b      	cmp	r2, #11
 8005b9c:	d917      	bls.n	8005bce <_malloc_r+0xc2>
 8005b9e:	1961      	adds	r1, r4, r5
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	6025      	str	r5, [r4, #0]
 8005ba4:	bf18      	it	ne
 8005ba6:	6059      	strne	r1, [r3, #4]
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	bf08      	it	eq
 8005bac:	f8c8 1000 	streq.w	r1, [r8]
 8005bb0:	5162      	str	r2, [r4, r5]
 8005bb2:	604b      	str	r3, [r1, #4]
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 f82f 	bl	8005c18 <__malloc_unlock>
 8005bba:	f104 000b 	add.w	r0, r4, #11
 8005bbe:	1d23      	adds	r3, r4, #4
 8005bc0:	f020 0007 	bic.w	r0, r0, #7
 8005bc4:	1ac2      	subs	r2, r0, r3
 8005bc6:	bf1c      	itt	ne
 8005bc8:	1a1b      	subne	r3, r3, r0
 8005bca:	50a3      	strne	r3, [r4, r2]
 8005bcc:	e7af      	b.n	8005b2e <_malloc_r+0x22>
 8005bce:	6862      	ldr	r2, [r4, #4]
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	bf0c      	ite	eq
 8005bd4:	f8c8 2000 	streq.w	r2, [r8]
 8005bd8:	605a      	strne	r2, [r3, #4]
 8005bda:	e7eb      	b.n	8005bb4 <_malloc_r+0xa8>
 8005bdc:	4623      	mov	r3, r4
 8005bde:	6864      	ldr	r4, [r4, #4]
 8005be0:	e7ae      	b.n	8005b40 <_malloc_r+0x34>
 8005be2:	463c      	mov	r4, r7
 8005be4:	687f      	ldr	r7, [r7, #4]
 8005be6:	e7b6      	b.n	8005b56 <_malloc_r+0x4a>
 8005be8:	461a      	mov	r2, r3
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d1fb      	bne.n	8005be8 <_malloc_r+0xdc>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6053      	str	r3, [r2, #4]
 8005bf4:	e7de      	b.n	8005bb4 <_malloc_r+0xa8>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	6033      	str	r3, [r6, #0]
 8005bfc:	f000 f80c 	bl	8005c18 <__malloc_unlock>
 8005c00:	e794      	b.n	8005b2c <_malloc_r+0x20>
 8005c02:	6005      	str	r5, [r0, #0]
 8005c04:	e7d6      	b.n	8005bb4 <_malloc_r+0xa8>
 8005c06:	bf00      	nop
 8005c08:	200003d8 	.word	0x200003d8

08005c0c <__malloc_lock>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	@ (8005c14 <__malloc_lock+0x8>)
 8005c0e:	f7ff b8a4 	b.w	8004d5a <__retarget_lock_acquire_recursive>
 8005c12:	bf00      	nop
 8005c14:	200003d0 	.word	0x200003d0

08005c18 <__malloc_unlock>:
 8005c18:	4801      	ldr	r0, [pc, #4]	@ (8005c20 <__malloc_unlock+0x8>)
 8005c1a:	f7ff b89f 	b.w	8004d5c <__retarget_lock_release_recursive>
 8005c1e:	bf00      	nop
 8005c20:	200003d0 	.word	0x200003d0

08005c24 <_Balloc>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	69c6      	ldr	r6, [r0, #28]
 8005c28:	4604      	mov	r4, r0
 8005c2a:	460d      	mov	r5, r1
 8005c2c:	b976      	cbnz	r6, 8005c4c <_Balloc+0x28>
 8005c2e:	2010      	movs	r0, #16
 8005c30:	f7ff ff42 	bl	8005ab8 <malloc>
 8005c34:	4602      	mov	r2, r0
 8005c36:	61e0      	str	r0, [r4, #28]
 8005c38:	b920      	cbnz	r0, 8005c44 <_Balloc+0x20>
 8005c3a:	216b      	movs	r1, #107	@ 0x6b
 8005c3c:	4b17      	ldr	r3, [pc, #92]	@ (8005c9c <_Balloc+0x78>)
 8005c3e:	4818      	ldr	r0, [pc, #96]	@ (8005ca0 <_Balloc+0x7c>)
 8005c40:	f002 fc2a 	bl	8008498 <__assert_func>
 8005c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c48:	6006      	str	r6, [r0, #0]
 8005c4a:	60c6      	str	r6, [r0, #12]
 8005c4c:	69e6      	ldr	r6, [r4, #28]
 8005c4e:	68f3      	ldr	r3, [r6, #12]
 8005c50:	b183      	cbz	r3, 8005c74 <_Balloc+0x50>
 8005c52:	69e3      	ldr	r3, [r4, #28]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c5a:	b9b8      	cbnz	r0, 8005c8c <_Balloc+0x68>
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c62:	1d72      	adds	r2, r6, #5
 8005c64:	4620      	mov	r0, r4
 8005c66:	0092      	lsls	r2, r2, #2
 8005c68:	f002 fc34 	bl	80084d4 <_calloc_r>
 8005c6c:	b160      	cbz	r0, 8005c88 <_Balloc+0x64>
 8005c6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c72:	e00e      	b.n	8005c92 <_Balloc+0x6e>
 8005c74:	2221      	movs	r2, #33	@ 0x21
 8005c76:	2104      	movs	r1, #4
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f002 fc2b 	bl	80084d4 <_calloc_r>
 8005c7e:	69e3      	ldr	r3, [r4, #28]
 8005c80:	60f0      	str	r0, [r6, #12]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e4      	bne.n	8005c52 <_Balloc+0x2e>
 8005c88:	2000      	movs	r0, #0
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	6802      	ldr	r2, [r0, #0]
 8005c8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c92:	2300      	movs	r3, #0
 8005c94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c98:	e7f7      	b.n	8005c8a <_Balloc+0x66>
 8005c9a:	bf00      	nop
 8005c9c:	08008f30 	.word	0x08008f30
 8005ca0:	08008fb0 	.word	0x08008fb0

08005ca4 <_Bfree>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	69c6      	ldr	r6, [r0, #28]
 8005ca8:	4605      	mov	r5, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	b976      	cbnz	r6, 8005ccc <_Bfree+0x28>
 8005cae:	2010      	movs	r0, #16
 8005cb0:	f7ff ff02 	bl	8005ab8 <malloc>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	61e8      	str	r0, [r5, #28]
 8005cb8:	b920      	cbnz	r0, 8005cc4 <_Bfree+0x20>
 8005cba:	218f      	movs	r1, #143	@ 0x8f
 8005cbc:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <_Bfree+0x3c>)
 8005cbe:	4809      	ldr	r0, [pc, #36]	@ (8005ce4 <_Bfree+0x40>)
 8005cc0:	f002 fbea 	bl	8008498 <__assert_func>
 8005cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cc8:	6006      	str	r6, [r0, #0]
 8005cca:	60c6      	str	r6, [r0, #12]
 8005ccc:	b13c      	cbz	r4, 8005cde <_Bfree+0x3a>
 8005cce:	69eb      	ldr	r3, [r5, #28]
 8005cd0:	6862      	ldr	r2, [r4, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cd8:	6021      	str	r1, [r4, #0]
 8005cda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	08008f30 	.word	0x08008f30
 8005ce4:	08008fb0 	.word	0x08008fb0

08005ce8 <__multadd>:
 8005ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cec:	4607      	mov	r7, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	461e      	mov	r6, r3
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	690d      	ldr	r5, [r1, #16]
 8005cf6:	f101 0c14 	add.w	ip, r1, #20
 8005cfa:	f8dc 3000 	ldr.w	r3, [ip]
 8005cfe:	3001      	adds	r0, #1
 8005d00:	b299      	uxth	r1, r3
 8005d02:	fb02 6101 	mla	r1, r2, r1, r6
 8005d06:	0c1e      	lsrs	r6, r3, #16
 8005d08:	0c0b      	lsrs	r3, r1, #16
 8005d0a:	fb02 3306 	mla	r3, r2, r6, r3
 8005d0e:	b289      	uxth	r1, r1
 8005d10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d14:	4285      	cmp	r5, r0
 8005d16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005d1e:	dcec      	bgt.n	8005cfa <__multadd+0x12>
 8005d20:	b30e      	cbz	r6, 8005d66 <__multadd+0x7e>
 8005d22:	68a3      	ldr	r3, [r4, #8]
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dc19      	bgt.n	8005d5c <__multadd+0x74>
 8005d28:	6861      	ldr	r1, [r4, #4]
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	3101      	adds	r1, #1
 8005d2e:	f7ff ff79 	bl	8005c24 <_Balloc>
 8005d32:	4680      	mov	r8, r0
 8005d34:	b928      	cbnz	r0, 8005d42 <__multadd+0x5a>
 8005d36:	4602      	mov	r2, r0
 8005d38:	21ba      	movs	r1, #186	@ 0xba
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d6c <__multadd+0x84>)
 8005d3c:	480c      	ldr	r0, [pc, #48]	@ (8005d70 <__multadd+0x88>)
 8005d3e:	f002 fbab 	bl	8008498 <__assert_func>
 8005d42:	6922      	ldr	r2, [r4, #16]
 8005d44:	f104 010c 	add.w	r1, r4, #12
 8005d48:	3202      	adds	r2, #2
 8005d4a:	0092      	lsls	r2, r2, #2
 8005d4c:	300c      	adds	r0, #12
 8005d4e:	f002 fb8f 	bl	8008470 <memcpy>
 8005d52:	4621      	mov	r1, r4
 8005d54:	4638      	mov	r0, r7
 8005d56:	f7ff ffa5 	bl	8005ca4 <_Bfree>
 8005d5a:	4644      	mov	r4, r8
 8005d5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d60:	3501      	adds	r5, #1
 8005d62:	615e      	str	r6, [r3, #20]
 8005d64:	6125      	str	r5, [r4, #16]
 8005d66:	4620      	mov	r0, r4
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6c:	08008f9f 	.word	0x08008f9f
 8005d70:	08008fb0 	.word	0x08008fb0

08005d74 <__s2b>:
 8005d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d78:	4615      	mov	r5, r2
 8005d7a:	2209      	movs	r2, #9
 8005d7c:	461f      	mov	r7, r3
 8005d7e:	3308      	adds	r3, #8
 8005d80:	460c      	mov	r4, r1
 8005d82:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d86:	4606      	mov	r6, r0
 8005d88:	2201      	movs	r2, #1
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	db09      	blt.n	8005da4 <__s2b+0x30>
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff ff47 	bl	8005c24 <_Balloc>
 8005d96:	b940      	cbnz	r0, 8005daa <__s2b+0x36>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	21d3      	movs	r1, #211	@ 0xd3
 8005d9c:	4b18      	ldr	r3, [pc, #96]	@ (8005e00 <__s2b+0x8c>)
 8005d9e:	4819      	ldr	r0, [pc, #100]	@ (8005e04 <__s2b+0x90>)
 8005da0:	f002 fb7a 	bl	8008498 <__assert_func>
 8005da4:	0052      	lsls	r2, r2, #1
 8005da6:	3101      	adds	r1, #1
 8005da8:	e7f0      	b.n	8005d8c <__s2b+0x18>
 8005daa:	9b08      	ldr	r3, [sp, #32]
 8005dac:	2d09      	cmp	r5, #9
 8005dae:	6143      	str	r3, [r0, #20]
 8005db0:	f04f 0301 	mov.w	r3, #1
 8005db4:	6103      	str	r3, [r0, #16]
 8005db6:	dd16      	ble.n	8005de6 <__s2b+0x72>
 8005db8:	f104 0909 	add.w	r9, r4, #9
 8005dbc:	46c8      	mov	r8, r9
 8005dbe:	442c      	add	r4, r5
 8005dc0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005dc4:	4601      	mov	r1, r0
 8005dc6:	220a      	movs	r2, #10
 8005dc8:	4630      	mov	r0, r6
 8005dca:	3b30      	subs	r3, #48	@ 0x30
 8005dcc:	f7ff ff8c 	bl	8005ce8 <__multadd>
 8005dd0:	45a0      	cmp	r8, r4
 8005dd2:	d1f5      	bne.n	8005dc0 <__s2b+0x4c>
 8005dd4:	f1a5 0408 	sub.w	r4, r5, #8
 8005dd8:	444c      	add	r4, r9
 8005dda:	1b2d      	subs	r5, r5, r4
 8005ddc:	1963      	adds	r3, r4, r5
 8005dde:	42bb      	cmp	r3, r7
 8005de0:	db04      	blt.n	8005dec <__s2b+0x78>
 8005de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de6:	2509      	movs	r5, #9
 8005de8:	340a      	adds	r4, #10
 8005dea:	e7f6      	b.n	8005dda <__s2b+0x66>
 8005dec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005df0:	4601      	mov	r1, r0
 8005df2:	220a      	movs	r2, #10
 8005df4:	4630      	mov	r0, r6
 8005df6:	3b30      	subs	r3, #48	@ 0x30
 8005df8:	f7ff ff76 	bl	8005ce8 <__multadd>
 8005dfc:	e7ee      	b.n	8005ddc <__s2b+0x68>
 8005dfe:	bf00      	nop
 8005e00:	08008f9f 	.word	0x08008f9f
 8005e04:	08008fb0 	.word	0x08008fb0

08005e08 <__hi0bits>:
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e0e:	bf3a      	itte	cc
 8005e10:	0403      	lslcc	r3, r0, #16
 8005e12:	2010      	movcc	r0, #16
 8005e14:	2000      	movcs	r0, #0
 8005e16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e1a:	bf3c      	itt	cc
 8005e1c:	021b      	lslcc	r3, r3, #8
 8005e1e:	3008      	addcc	r0, #8
 8005e20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e24:	bf3c      	itt	cc
 8005e26:	011b      	lslcc	r3, r3, #4
 8005e28:	3004      	addcc	r0, #4
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2e:	bf3c      	itt	cc
 8005e30:	009b      	lslcc	r3, r3, #2
 8005e32:	3002      	addcc	r0, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	db05      	blt.n	8005e44 <__hi0bits+0x3c>
 8005e38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005e3c:	f100 0001 	add.w	r0, r0, #1
 8005e40:	bf08      	it	eq
 8005e42:	2020      	moveq	r0, #32
 8005e44:	4770      	bx	lr

08005e46 <__lo0bits>:
 8005e46:	6803      	ldr	r3, [r0, #0]
 8005e48:	4602      	mov	r2, r0
 8005e4a:	f013 0007 	ands.w	r0, r3, #7
 8005e4e:	d00b      	beq.n	8005e68 <__lo0bits+0x22>
 8005e50:	07d9      	lsls	r1, r3, #31
 8005e52:	d421      	bmi.n	8005e98 <__lo0bits+0x52>
 8005e54:	0798      	lsls	r0, r3, #30
 8005e56:	bf49      	itett	mi
 8005e58:	085b      	lsrmi	r3, r3, #1
 8005e5a:	089b      	lsrpl	r3, r3, #2
 8005e5c:	2001      	movmi	r0, #1
 8005e5e:	6013      	strmi	r3, [r2, #0]
 8005e60:	bf5c      	itt	pl
 8005e62:	2002      	movpl	r0, #2
 8005e64:	6013      	strpl	r3, [r2, #0]
 8005e66:	4770      	bx	lr
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	b909      	cbnz	r1, 8005e70 <__lo0bits+0x2a>
 8005e6c:	2010      	movs	r0, #16
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	b2d9      	uxtb	r1, r3
 8005e72:	b909      	cbnz	r1, 8005e78 <__lo0bits+0x32>
 8005e74:	3008      	adds	r0, #8
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	0719      	lsls	r1, r3, #28
 8005e7a:	bf04      	itt	eq
 8005e7c:	091b      	lsreq	r3, r3, #4
 8005e7e:	3004      	addeq	r0, #4
 8005e80:	0799      	lsls	r1, r3, #30
 8005e82:	bf04      	itt	eq
 8005e84:	089b      	lsreq	r3, r3, #2
 8005e86:	3002      	addeq	r0, #2
 8005e88:	07d9      	lsls	r1, r3, #31
 8005e8a:	d403      	bmi.n	8005e94 <__lo0bits+0x4e>
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	f100 0001 	add.w	r0, r0, #1
 8005e92:	d003      	beq.n	8005e9c <__lo0bits+0x56>
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4770      	bx	lr
 8005e98:	2000      	movs	r0, #0
 8005e9a:	4770      	bx	lr
 8005e9c:	2020      	movs	r0, #32
 8005e9e:	4770      	bx	lr

08005ea0 <__i2b>:
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	f7ff febd 	bl	8005c24 <_Balloc>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	b928      	cbnz	r0, 8005eba <__i2b+0x1a>
 8005eae:	f240 1145 	movw	r1, #325	@ 0x145
 8005eb2:	4b04      	ldr	r3, [pc, #16]	@ (8005ec4 <__i2b+0x24>)
 8005eb4:	4804      	ldr	r0, [pc, #16]	@ (8005ec8 <__i2b+0x28>)
 8005eb6:	f002 faef 	bl	8008498 <__assert_func>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	6144      	str	r4, [r0, #20]
 8005ebe:	6103      	str	r3, [r0, #16]
 8005ec0:	bd10      	pop	{r4, pc}
 8005ec2:	bf00      	nop
 8005ec4:	08008f9f 	.word	0x08008f9f
 8005ec8:	08008fb0 	.word	0x08008fb0

08005ecc <__multiply>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	690a      	ldr	r2, [r1, #16]
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	460f      	mov	r7, r1
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	bfa2      	ittt	ge
 8005edc:	4623      	movge	r3, r4
 8005ede:	460c      	movge	r4, r1
 8005ee0:	461f      	movge	r7, r3
 8005ee2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005ee6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005eea:	68a3      	ldr	r3, [r4, #8]
 8005eec:	6861      	ldr	r1, [r4, #4]
 8005eee:	eb0a 0609 	add.w	r6, sl, r9
 8005ef2:	42b3      	cmp	r3, r6
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	bfb8      	it	lt
 8005ef8:	3101      	addlt	r1, #1
 8005efa:	f7ff fe93 	bl	8005c24 <_Balloc>
 8005efe:	b930      	cbnz	r0, 8005f0e <__multiply+0x42>
 8005f00:	4602      	mov	r2, r0
 8005f02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005f06:	4b43      	ldr	r3, [pc, #268]	@ (8006014 <__multiply+0x148>)
 8005f08:	4843      	ldr	r0, [pc, #268]	@ (8006018 <__multiply+0x14c>)
 8005f0a:	f002 fac5 	bl	8008498 <__assert_func>
 8005f0e:	f100 0514 	add.w	r5, r0, #20
 8005f12:	462b      	mov	r3, r5
 8005f14:	2200      	movs	r2, #0
 8005f16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f1a:	4543      	cmp	r3, r8
 8005f1c:	d321      	bcc.n	8005f62 <__multiply+0x96>
 8005f1e:	f107 0114 	add.w	r1, r7, #20
 8005f22:	f104 0214 	add.w	r2, r4, #20
 8005f26:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005f2a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005f2e:	9302      	str	r3, [sp, #8]
 8005f30:	1b13      	subs	r3, r2, r4
 8005f32:	3b15      	subs	r3, #21
 8005f34:	f023 0303 	bic.w	r3, r3, #3
 8005f38:	3304      	adds	r3, #4
 8005f3a:	f104 0715 	add.w	r7, r4, #21
 8005f3e:	42ba      	cmp	r2, r7
 8005f40:	bf38      	it	cc
 8005f42:	2304      	movcc	r3, #4
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	9b02      	ldr	r3, [sp, #8]
 8005f48:	9103      	str	r1, [sp, #12]
 8005f4a:	428b      	cmp	r3, r1
 8005f4c:	d80c      	bhi.n	8005f68 <__multiply+0x9c>
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	dd03      	ble.n	8005f5a <__multiply+0x8e>
 8005f52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d05a      	beq.n	8006010 <__multiply+0x144>
 8005f5a:	6106      	str	r6, [r0, #16]
 8005f5c:	b005      	add	sp, #20
 8005f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f62:	f843 2b04 	str.w	r2, [r3], #4
 8005f66:	e7d8      	b.n	8005f1a <__multiply+0x4e>
 8005f68:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f6c:	f1ba 0f00 	cmp.w	sl, #0
 8005f70:	d023      	beq.n	8005fba <__multiply+0xee>
 8005f72:	46a9      	mov	r9, r5
 8005f74:	f04f 0c00 	mov.w	ip, #0
 8005f78:	f104 0e14 	add.w	lr, r4, #20
 8005f7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005f80:	f8d9 3000 	ldr.w	r3, [r9]
 8005f84:	fa1f fb87 	uxth.w	fp, r7
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f8e:	4463      	add	r3, ip
 8005f90:	f8d9 c000 	ldr.w	ip, [r9]
 8005f94:	0c3f      	lsrs	r7, r7, #16
 8005f96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f9a:	fb0a c707 	mla	r7, sl, r7, ip
 8005f9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005fa8:	4572      	cmp	r2, lr
 8005faa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005fae:	f849 3b04 	str.w	r3, [r9], #4
 8005fb2:	d8e3      	bhi.n	8005f7c <__multiply+0xb0>
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	f845 c003 	str.w	ip, [r5, r3]
 8005fba:	9b03      	ldr	r3, [sp, #12]
 8005fbc:	3104      	adds	r1, #4
 8005fbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005fc2:	f1b9 0f00 	cmp.w	r9, #0
 8005fc6:	d021      	beq.n	800600c <__multiply+0x140>
 8005fc8:	46ae      	mov	lr, r5
 8005fca:	f04f 0a00 	mov.w	sl, #0
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	f104 0c14 	add.w	ip, r4, #20
 8005fd4:	f8bc b000 	ldrh.w	fp, [ip]
 8005fd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	fb09 770b 	mla	r7, r9, fp, r7
 8005fe2:	4457      	add	r7, sl
 8005fe4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005fe8:	f84e 3b04 	str.w	r3, [lr], #4
 8005fec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ff0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ff4:	f8be 3000 	ldrh.w	r3, [lr]
 8005ff8:	4562      	cmp	r2, ip
 8005ffa:	fb09 330a 	mla	r3, r9, sl, r3
 8005ffe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006002:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006006:	d8e5      	bhi.n	8005fd4 <__multiply+0x108>
 8006008:	9f01      	ldr	r7, [sp, #4]
 800600a:	51eb      	str	r3, [r5, r7]
 800600c:	3504      	adds	r5, #4
 800600e:	e79a      	b.n	8005f46 <__multiply+0x7a>
 8006010:	3e01      	subs	r6, #1
 8006012:	e79c      	b.n	8005f4e <__multiply+0x82>
 8006014:	08008f9f 	.word	0x08008f9f
 8006018:	08008fb0 	.word	0x08008fb0

0800601c <__pow5mult>:
 800601c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006020:	4615      	mov	r5, r2
 8006022:	f012 0203 	ands.w	r2, r2, #3
 8006026:	4607      	mov	r7, r0
 8006028:	460e      	mov	r6, r1
 800602a:	d007      	beq.n	800603c <__pow5mult+0x20>
 800602c:	4c25      	ldr	r4, [pc, #148]	@ (80060c4 <__pow5mult+0xa8>)
 800602e:	3a01      	subs	r2, #1
 8006030:	2300      	movs	r3, #0
 8006032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006036:	f7ff fe57 	bl	8005ce8 <__multadd>
 800603a:	4606      	mov	r6, r0
 800603c:	10ad      	asrs	r5, r5, #2
 800603e:	d03d      	beq.n	80060bc <__pow5mult+0xa0>
 8006040:	69fc      	ldr	r4, [r7, #28]
 8006042:	b97c      	cbnz	r4, 8006064 <__pow5mult+0x48>
 8006044:	2010      	movs	r0, #16
 8006046:	f7ff fd37 	bl	8005ab8 <malloc>
 800604a:	4602      	mov	r2, r0
 800604c:	61f8      	str	r0, [r7, #28]
 800604e:	b928      	cbnz	r0, 800605c <__pow5mult+0x40>
 8006050:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006054:	4b1c      	ldr	r3, [pc, #112]	@ (80060c8 <__pow5mult+0xac>)
 8006056:	481d      	ldr	r0, [pc, #116]	@ (80060cc <__pow5mult+0xb0>)
 8006058:	f002 fa1e 	bl	8008498 <__assert_func>
 800605c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006060:	6004      	str	r4, [r0, #0]
 8006062:	60c4      	str	r4, [r0, #12]
 8006064:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800606c:	b94c      	cbnz	r4, 8006082 <__pow5mult+0x66>
 800606e:	f240 2171 	movw	r1, #625	@ 0x271
 8006072:	4638      	mov	r0, r7
 8006074:	f7ff ff14 	bl	8005ea0 <__i2b>
 8006078:	2300      	movs	r3, #0
 800607a:	4604      	mov	r4, r0
 800607c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006080:	6003      	str	r3, [r0, #0]
 8006082:	f04f 0900 	mov.w	r9, #0
 8006086:	07eb      	lsls	r3, r5, #31
 8006088:	d50a      	bpl.n	80060a0 <__pow5mult+0x84>
 800608a:	4631      	mov	r1, r6
 800608c:	4622      	mov	r2, r4
 800608e:	4638      	mov	r0, r7
 8006090:	f7ff ff1c 	bl	8005ecc <__multiply>
 8006094:	4680      	mov	r8, r0
 8006096:	4631      	mov	r1, r6
 8006098:	4638      	mov	r0, r7
 800609a:	f7ff fe03 	bl	8005ca4 <_Bfree>
 800609e:	4646      	mov	r6, r8
 80060a0:	106d      	asrs	r5, r5, #1
 80060a2:	d00b      	beq.n	80060bc <__pow5mult+0xa0>
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	b938      	cbnz	r0, 80060b8 <__pow5mult+0x9c>
 80060a8:	4622      	mov	r2, r4
 80060aa:	4621      	mov	r1, r4
 80060ac:	4638      	mov	r0, r7
 80060ae:	f7ff ff0d 	bl	8005ecc <__multiply>
 80060b2:	6020      	str	r0, [r4, #0]
 80060b4:	f8c0 9000 	str.w	r9, [r0]
 80060b8:	4604      	mov	r4, r0
 80060ba:	e7e4      	b.n	8006086 <__pow5mult+0x6a>
 80060bc:	4630      	mov	r0, r6
 80060be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c2:	bf00      	nop
 80060c4:	0800900c 	.word	0x0800900c
 80060c8:	08008f30 	.word	0x08008f30
 80060cc:	08008fb0 	.word	0x08008fb0

080060d0 <__lshift>:
 80060d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	460c      	mov	r4, r1
 80060d6:	4607      	mov	r7, r0
 80060d8:	4691      	mov	r9, r2
 80060da:	6923      	ldr	r3, [r4, #16]
 80060dc:	6849      	ldr	r1, [r1, #4]
 80060de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060e2:	68a3      	ldr	r3, [r4, #8]
 80060e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060e8:	f108 0601 	add.w	r6, r8, #1
 80060ec:	42b3      	cmp	r3, r6
 80060ee:	db0b      	blt.n	8006108 <__lshift+0x38>
 80060f0:	4638      	mov	r0, r7
 80060f2:	f7ff fd97 	bl	8005c24 <_Balloc>
 80060f6:	4605      	mov	r5, r0
 80060f8:	b948      	cbnz	r0, 800610e <__lshift+0x3e>
 80060fa:	4602      	mov	r2, r0
 80060fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006100:	4b27      	ldr	r3, [pc, #156]	@ (80061a0 <__lshift+0xd0>)
 8006102:	4828      	ldr	r0, [pc, #160]	@ (80061a4 <__lshift+0xd4>)
 8006104:	f002 f9c8 	bl	8008498 <__assert_func>
 8006108:	3101      	adds	r1, #1
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	e7ee      	b.n	80060ec <__lshift+0x1c>
 800610e:	2300      	movs	r3, #0
 8006110:	f100 0114 	add.w	r1, r0, #20
 8006114:	f100 0210 	add.w	r2, r0, #16
 8006118:	4618      	mov	r0, r3
 800611a:	4553      	cmp	r3, sl
 800611c:	db33      	blt.n	8006186 <__lshift+0xb6>
 800611e:	6920      	ldr	r0, [r4, #16]
 8006120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006124:	f104 0314 	add.w	r3, r4, #20
 8006128:	f019 091f 	ands.w	r9, r9, #31
 800612c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006130:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006134:	d02b      	beq.n	800618e <__lshift+0xbe>
 8006136:	468a      	mov	sl, r1
 8006138:	2200      	movs	r2, #0
 800613a:	f1c9 0e20 	rsb	lr, r9, #32
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	fa00 f009 	lsl.w	r0, r0, r9
 8006144:	4310      	orrs	r0, r2
 8006146:	f84a 0b04 	str.w	r0, [sl], #4
 800614a:	f853 2b04 	ldr.w	r2, [r3], #4
 800614e:	459c      	cmp	ip, r3
 8006150:	fa22 f20e 	lsr.w	r2, r2, lr
 8006154:	d8f3      	bhi.n	800613e <__lshift+0x6e>
 8006156:	ebac 0304 	sub.w	r3, ip, r4
 800615a:	3b15      	subs	r3, #21
 800615c:	f023 0303 	bic.w	r3, r3, #3
 8006160:	3304      	adds	r3, #4
 8006162:	f104 0015 	add.w	r0, r4, #21
 8006166:	4584      	cmp	ip, r0
 8006168:	bf38      	it	cc
 800616a:	2304      	movcc	r3, #4
 800616c:	50ca      	str	r2, [r1, r3]
 800616e:	b10a      	cbz	r2, 8006174 <__lshift+0xa4>
 8006170:	f108 0602 	add.w	r6, r8, #2
 8006174:	3e01      	subs	r6, #1
 8006176:	4638      	mov	r0, r7
 8006178:	4621      	mov	r1, r4
 800617a:	612e      	str	r6, [r5, #16]
 800617c:	f7ff fd92 	bl	8005ca4 <_Bfree>
 8006180:	4628      	mov	r0, r5
 8006182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006186:	f842 0f04 	str.w	r0, [r2, #4]!
 800618a:	3301      	adds	r3, #1
 800618c:	e7c5      	b.n	800611a <__lshift+0x4a>
 800618e:	3904      	subs	r1, #4
 8006190:	f853 2b04 	ldr.w	r2, [r3], #4
 8006194:	459c      	cmp	ip, r3
 8006196:	f841 2f04 	str.w	r2, [r1, #4]!
 800619a:	d8f9      	bhi.n	8006190 <__lshift+0xc0>
 800619c:	e7ea      	b.n	8006174 <__lshift+0xa4>
 800619e:	bf00      	nop
 80061a0:	08008f9f 	.word	0x08008f9f
 80061a4:	08008fb0 	.word	0x08008fb0

080061a8 <__mcmp>:
 80061a8:	4603      	mov	r3, r0
 80061aa:	690a      	ldr	r2, [r1, #16]
 80061ac:	6900      	ldr	r0, [r0, #16]
 80061ae:	b530      	push	{r4, r5, lr}
 80061b0:	1a80      	subs	r0, r0, r2
 80061b2:	d10e      	bne.n	80061d2 <__mcmp+0x2a>
 80061b4:	3314      	adds	r3, #20
 80061b6:	3114      	adds	r1, #20
 80061b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061c8:	4295      	cmp	r5, r2
 80061ca:	d003      	beq.n	80061d4 <__mcmp+0x2c>
 80061cc:	d205      	bcs.n	80061da <__mcmp+0x32>
 80061ce:	f04f 30ff 	mov.w	r0, #4294967295
 80061d2:	bd30      	pop	{r4, r5, pc}
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d3f3      	bcc.n	80061c0 <__mcmp+0x18>
 80061d8:	e7fb      	b.n	80061d2 <__mcmp+0x2a>
 80061da:	2001      	movs	r0, #1
 80061dc:	e7f9      	b.n	80061d2 <__mcmp+0x2a>
	...

080061e0 <__mdiff>:
 80061e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	4689      	mov	r9, r1
 80061e6:	4606      	mov	r6, r0
 80061e8:	4611      	mov	r1, r2
 80061ea:	4648      	mov	r0, r9
 80061ec:	4614      	mov	r4, r2
 80061ee:	f7ff ffdb 	bl	80061a8 <__mcmp>
 80061f2:	1e05      	subs	r5, r0, #0
 80061f4:	d112      	bne.n	800621c <__mdiff+0x3c>
 80061f6:	4629      	mov	r1, r5
 80061f8:	4630      	mov	r0, r6
 80061fa:	f7ff fd13 	bl	8005c24 <_Balloc>
 80061fe:	4602      	mov	r2, r0
 8006200:	b928      	cbnz	r0, 800620e <__mdiff+0x2e>
 8006202:	f240 2137 	movw	r1, #567	@ 0x237
 8006206:	4b3e      	ldr	r3, [pc, #248]	@ (8006300 <__mdiff+0x120>)
 8006208:	483e      	ldr	r0, [pc, #248]	@ (8006304 <__mdiff+0x124>)
 800620a:	f002 f945 	bl	8008498 <__assert_func>
 800620e:	2301      	movs	r3, #1
 8006210:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006214:	4610      	mov	r0, r2
 8006216:	b003      	add	sp, #12
 8006218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621c:	bfbc      	itt	lt
 800621e:	464b      	movlt	r3, r9
 8006220:	46a1      	movlt	r9, r4
 8006222:	4630      	mov	r0, r6
 8006224:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006228:	bfba      	itte	lt
 800622a:	461c      	movlt	r4, r3
 800622c:	2501      	movlt	r5, #1
 800622e:	2500      	movge	r5, #0
 8006230:	f7ff fcf8 	bl	8005c24 <_Balloc>
 8006234:	4602      	mov	r2, r0
 8006236:	b918      	cbnz	r0, 8006240 <__mdiff+0x60>
 8006238:	f240 2145 	movw	r1, #581	@ 0x245
 800623c:	4b30      	ldr	r3, [pc, #192]	@ (8006300 <__mdiff+0x120>)
 800623e:	e7e3      	b.n	8006208 <__mdiff+0x28>
 8006240:	f100 0b14 	add.w	fp, r0, #20
 8006244:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006248:	f109 0310 	add.w	r3, r9, #16
 800624c:	60c5      	str	r5, [r0, #12]
 800624e:	f04f 0c00 	mov.w	ip, #0
 8006252:	f109 0514 	add.w	r5, r9, #20
 8006256:	46d9      	mov	r9, fp
 8006258:	6926      	ldr	r6, [r4, #16]
 800625a:	f104 0e14 	add.w	lr, r4, #20
 800625e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006262:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	9b01      	ldr	r3, [sp, #4]
 800626a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800626e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006272:	b281      	uxth	r1, r0
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	fa1f f38a 	uxth.w	r3, sl
 800627a:	1a5b      	subs	r3, r3, r1
 800627c:	0c00      	lsrs	r0, r0, #16
 800627e:	4463      	add	r3, ip
 8006280:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006284:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800628e:	4576      	cmp	r6, lr
 8006290:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006294:	f849 3b04 	str.w	r3, [r9], #4
 8006298:	d8e6      	bhi.n	8006268 <__mdiff+0x88>
 800629a:	1b33      	subs	r3, r6, r4
 800629c:	3b15      	subs	r3, #21
 800629e:	f023 0303 	bic.w	r3, r3, #3
 80062a2:	3415      	adds	r4, #21
 80062a4:	3304      	adds	r3, #4
 80062a6:	42a6      	cmp	r6, r4
 80062a8:	bf38      	it	cc
 80062aa:	2304      	movcc	r3, #4
 80062ac:	441d      	add	r5, r3
 80062ae:	445b      	add	r3, fp
 80062b0:	461e      	mov	r6, r3
 80062b2:	462c      	mov	r4, r5
 80062b4:	4544      	cmp	r4, r8
 80062b6:	d30e      	bcc.n	80062d6 <__mdiff+0xf6>
 80062b8:	f108 0103 	add.w	r1, r8, #3
 80062bc:	1b49      	subs	r1, r1, r5
 80062be:	f021 0103 	bic.w	r1, r1, #3
 80062c2:	3d03      	subs	r5, #3
 80062c4:	45a8      	cmp	r8, r5
 80062c6:	bf38      	it	cc
 80062c8:	2100      	movcc	r1, #0
 80062ca:	440b      	add	r3, r1
 80062cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062d0:	b199      	cbz	r1, 80062fa <__mdiff+0x11a>
 80062d2:	6117      	str	r7, [r2, #16]
 80062d4:	e79e      	b.n	8006214 <__mdiff+0x34>
 80062d6:	46e6      	mov	lr, ip
 80062d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80062dc:	fa1f fc81 	uxth.w	ip, r1
 80062e0:	44f4      	add	ip, lr
 80062e2:	0c08      	lsrs	r0, r1, #16
 80062e4:	4471      	add	r1, lr
 80062e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80062ea:	b289      	uxth	r1, r1
 80062ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80062f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80062f4:	f846 1b04 	str.w	r1, [r6], #4
 80062f8:	e7dc      	b.n	80062b4 <__mdiff+0xd4>
 80062fa:	3f01      	subs	r7, #1
 80062fc:	e7e6      	b.n	80062cc <__mdiff+0xec>
 80062fe:	bf00      	nop
 8006300:	08008f9f 	.word	0x08008f9f
 8006304:	08008fb0 	.word	0x08008fb0

08006308 <__ulp>:
 8006308:	4b0e      	ldr	r3, [pc, #56]	@ (8006344 <__ulp+0x3c>)
 800630a:	400b      	ands	r3, r1
 800630c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006310:	2b00      	cmp	r3, #0
 8006312:	dc08      	bgt.n	8006326 <__ulp+0x1e>
 8006314:	425b      	negs	r3, r3
 8006316:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800631a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800631e:	da04      	bge.n	800632a <__ulp+0x22>
 8006320:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006324:	4113      	asrs	r3, r2
 8006326:	2200      	movs	r2, #0
 8006328:	e008      	b.n	800633c <__ulp+0x34>
 800632a:	f1a2 0314 	sub.w	r3, r2, #20
 800632e:	2b1e      	cmp	r3, #30
 8006330:	bfd6      	itet	le
 8006332:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006336:	2201      	movgt	r2, #1
 8006338:	40da      	lsrle	r2, r3
 800633a:	2300      	movs	r3, #0
 800633c:	4619      	mov	r1, r3
 800633e:	4610      	mov	r0, r2
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	7ff00000 	.word	0x7ff00000

08006348 <__b2d>:
 8006348:	6902      	ldr	r2, [r0, #16]
 800634a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634c:	f100 0614 	add.w	r6, r0, #20
 8006350:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006354:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006358:	4f1e      	ldr	r7, [pc, #120]	@ (80063d4 <__b2d+0x8c>)
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff fd54 	bl	8005e08 <__hi0bits>
 8006360:	4603      	mov	r3, r0
 8006362:	f1c0 0020 	rsb	r0, r0, #32
 8006366:	2b0a      	cmp	r3, #10
 8006368:	f1a2 0504 	sub.w	r5, r2, #4
 800636c:	6008      	str	r0, [r1, #0]
 800636e:	dc12      	bgt.n	8006396 <__b2d+0x4e>
 8006370:	42ae      	cmp	r6, r5
 8006372:	bf2c      	ite	cs
 8006374:	2200      	movcs	r2, #0
 8006376:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800637a:	f1c3 0c0b 	rsb	ip, r3, #11
 800637e:	3315      	adds	r3, #21
 8006380:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006384:	fa04 f303 	lsl.w	r3, r4, r3
 8006388:	fa22 f20c 	lsr.w	r2, r2, ip
 800638c:	ea4e 0107 	orr.w	r1, lr, r7
 8006390:	431a      	orrs	r2, r3
 8006392:	4610      	mov	r0, r2
 8006394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006396:	42ae      	cmp	r6, r5
 8006398:	bf36      	itet	cc
 800639a:	f1a2 0508 	subcc.w	r5, r2, #8
 800639e:	2200      	movcs	r2, #0
 80063a0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80063a4:	3b0b      	subs	r3, #11
 80063a6:	d012      	beq.n	80063ce <__b2d+0x86>
 80063a8:	f1c3 0720 	rsb	r7, r3, #32
 80063ac:	fa22 f107 	lsr.w	r1, r2, r7
 80063b0:	409c      	lsls	r4, r3
 80063b2:	430c      	orrs	r4, r1
 80063b4:	42b5      	cmp	r5, r6
 80063b6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80063ba:	bf94      	ite	ls
 80063bc:	2400      	movls	r4, #0
 80063be:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80063c2:	409a      	lsls	r2, r3
 80063c4:	40fc      	lsrs	r4, r7
 80063c6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80063ca:	4322      	orrs	r2, r4
 80063cc:	e7e1      	b.n	8006392 <__b2d+0x4a>
 80063ce:	ea44 0107 	orr.w	r1, r4, r7
 80063d2:	e7de      	b.n	8006392 <__b2d+0x4a>
 80063d4:	3ff00000 	.word	0x3ff00000

080063d8 <__d2b>:
 80063d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80063dc:	2101      	movs	r1, #1
 80063de:	4690      	mov	r8, r2
 80063e0:	4699      	mov	r9, r3
 80063e2:	9e08      	ldr	r6, [sp, #32]
 80063e4:	f7ff fc1e 	bl	8005c24 <_Balloc>
 80063e8:	4604      	mov	r4, r0
 80063ea:	b930      	cbnz	r0, 80063fa <__d2b+0x22>
 80063ec:	4602      	mov	r2, r0
 80063ee:	f240 310f 	movw	r1, #783	@ 0x30f
 80063f2:	4b23      	ldr	r3, [pc, #140]	@ (8006480 <__d2b+0xa8>)
 80063f4:	4823      	ldr	r0, [pc, #140]	@ (8006484 <__d2b+0xac>)
 80063f6:	f002 f84f 	bl	8008498 <__assert_func>
 80063fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006402:	b10d      	cbz	r5, 8006408 <__d2b+0x30>
 8006404:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	f1b8 0300 	subs.w	r3, r8, #0
 800640e:	d024      	beq.n	800645a <__d2b+0x82>
 8006410:	4668      	mov	r0, sp
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	f7ff fd17 	bl	8005e46 <__lo0bits>
 8006418:	e9dd 1200 	ldrd	r1, r2, [sp]
 800641c:	b1d8      	cbz	r0, 8006456 <__d2b+0x7e>
 800641e:	f1c0 0320 	rsb	r3, r0, #32
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	430b      	orrs	r3, r1
 8006428:	40c2      	lsrs	r2, r0
 800642a:	6163      	str	r3, [r4, #20]
 800642c:	9201      	str	r2, [sp, #4]
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	bf0c      	ite	eq
 8006434:	2201      	moveq	r2, #1
 8006436:	2202      	movne	r2, #2
 8006438:	61a3      	str	r3, [r4, #24]
 800643a:	6122      	str	r2, [r4, #16]
 800643c:	b1ad      	cbz	r5, 800646a <__d2b+0x92>
 800643e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006442:	4405      	add	r5, r0
 8006444:	6035      	str	r5, [r6, #0]
 8006446:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800644a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644c:	6018      	str	r0, [r3, #0]
 800644e:	4620      	mov	r0, r4
 8006450:	b002      	add	sp, #8
 8006452:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006456:	6161      	str	r1, [r4, #20]
 8006458:	e7e9      	b.n	800642e <__d2b+0x56>
 800645a:	a801      	add	r0, sp, #4
 800645c:	f7ff fcf3 	bl	8005e46 <__lo0bits>
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	6163      	str	r3, [r4, #20]
 8006466:	3020      	adds	r0, #32
 8006468:	e7e7      	b.n	800643a <__d2b+0x62>
 800646a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800646e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006472:	6030      	str	r0, [r6, #0]
 8006474:	6918      	ldr	r0, [r3, #16]
 8006476:	f7ff fcc7 	bl	8005e08 <__hi0bits>
 800647a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800647e:	e7e4      	b.n	800644a <__d2b+0x72>
 8006480:	08008f9f 	.word	0x08008f9f
 8006484:	08008fb0 	.word	0x08008fb0

08006488 <__ratio>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	b085      	sub	sp, #20
 800648e:	e9cd 1000 	strd	r1, r0, [sp]
 8006492:	a902      	add	r1, sp, #8
 8006494:	f7ff ff58 	bl	8006348 <__b2d>
 8006498:	468b      	mov	fp, r1
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	9800      	ldr	r0, [sp, #0]
 80064a0:	a903      	add	r1, sp, #12
 80064a2:	f7ff ff51 	bl	8006348 <__b2d>
 80064a6:	460d      	mov	r5, r1
 80064a8:	9b01      	ldr	r3, [sp, #4]
 80064aa:	4689      	mov	r9, r1
 80064ac:	6919      	ldr	r1, [r3, #16]
 80064ae:	9b00      	ldr	r3, [sp, #0]
 80064b0:	4604      	mov	r4, r0
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	4630      	mov	r0, r6
 80064b6:	1ac9      	subs	r1, r1, r3
 80064b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bfcd      	iteet	gt
 80064c6:	463a      	movgt	r2, r7
 80064c8:	462a      	movle	r2, r5
 80064ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80064ce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80064d2:	bfd8      	it	le
 80064d4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80064d8:	464b      	mov	r3, r9
 80064da:	4622      	mov	r2, r4
 80064dc:	4659      	mov	r1, fp
 80064de:	f7fa f93d 	bl	800075c <__aeabi_ddiv>
 80064e2:	b005      	add	sp, #20
 80064e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064e8 <__copybits>:
 80064e8:	3901      	subs	r1, #1
 80064ea:	b570      	push	{r4, r5, r6, lr}
 80064ec:	1149      	asrs	r1, r1, #5
 80064ee:	6914      	ldr	r4, [r2, #16]
 80064f0:	3101      	adds	r1, #1
 80064f2:	f102 0314 	add.w	r3, r2, #20
 80064f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064fe:	1f05      	subs	r5, r0, #4
 8006500:	42a3      	cmp	r3, r4
 8006502:	d30c      	bcc.n	800651e <__copybits+0x36>
 8006504:	1aa3      	subs	r3, r4, r2
 8006506:	3b11      	subs	r3, #17
 8006508:	f023 0303 	bic.w	r3, r3, #3
 800650c:	3211      	adds	r2, #17
 800650e:	42a2      	cmp	r2, r4
 8006510:	bf88      	it	hi
 8006512:	2300      	movhi	r3, #0
 8006514:	4418      	add	r0, r3
 8006516:	2300      	movs	r3, #0
 8006518:	4288      	cmp	r0, r1
 800651a:	d305      	bcc.n	8006528 <__copybits+0x40>
 800651c:	bd70      	pop	{r4, r5, r6, pc}
 800651e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006522:	f845 6f04 	str.w	r6, [r5, #4]!
 8006526:	e7eb      	b.n	8006500 <__copybits+0x18>
 8006528:	f840 3b04 	str.w	r3, [r0], #4
 800652c:	e7f4      	b.n	8006518 <__copybits+0x30>

0800652e <__any_on>:
 800652e:	f100 0214 	add.w	r2, r0, #20
 8006532:	6900      	ldr	r0, [r0, #16]
 8006534:	114b      	asrs	r3, r1, #5
 8006536:	4298      	cmp	r0, r3
 8006538:	b510      	push	{r4, lr}
 800653a:	db11      	blt.n	8006560 <__any_on+0x32>
 800653c:	dd0a      	ble.n	8006554 <__any_on+0x26>
 800653e:	f011 011f 	ands.w	r1, r1, #31
 8006542:	d007      	beq.n	8006554 <__any_on+0x26>
 8006544:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006548:	fa24 f001 	lsr.w	r0, r4, r1
 800654c:	fa00 f101 	lsl.w	r1, r0, r1
 8006550:	428c      	cmp	r4, r1
 8006552:	d10b      	bne.n	800656c <__any_on+0x3e>
 8006554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006558:	4293      	cmp	r3, r2
 800655a:	d803      	bhi.n	8006564 <__any_on+0x36>
 800655c:	2000      	movs	r0, #0
 800655e:	bd10      	pop	{r4, pc}
 8006560:	4603      	mov	r3, r0
 8006562:	e7f7      	b.n	8006554 <__any_on+0x26>
 8006564:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006568:	2900      	cmp	r1, #0
 800656a:	d0f5      	beq.n	8006558 <__any_on+0x2a>
 800656c:	2001      	movs	r0, #1
 800656e:	e7f6      	b.n	800655e <__any_on+0x30>

08006570 <sulp>:
 8006570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006574:	460f      	mov	r7, r1
 8006576:	4690      	mov	r8, r2
 8006578:	f7ff fec6 	bl	8006308 <__ulp>
 800657c:	4604      	mov	r4, r0
 800657e:	460d      	mov	r5, r1
 8006580:	f1b8 0f00 	cmp.w	r8, #0
 8006584:	d011      	beq.n	80065aa <sulp+0x3a>
 8006586:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800658a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800658e:	2b00      	cmp	r3, #0
 8006590:	dd0b      	ble.n	80065aa <sulp+0x3a>
 8006592:	2400      	movs	r4, #0
 8006594:	051b      	lsls	r3, r3, #20
 8006596:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800659a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800659e:	4622      	mov	r2, r4
 80065a0:	462b      	mov	r3, r5
 80065a2:	f7f9 ffb1 	bl	8000508 <__aeabi_dmul>
 80065a6:	4604      	mov	r4, r0
 80065a8:	460d      	mov	r5, r1
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b2:	0000      	movs	r0, r0
 80065b4:	0000      	movs	r0, r0
	...

080065b8 <_strtod_l>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	b09f      	sub	sp, #124	@ 0x7c
 80065be:	9217      	str	r2, [sp, #92]	@ 0x5c
 80065c0:	2200      	movs	r2, #0
 80065c2:	460c      	mov	r4, r1
 80065c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80065c6:	f04f 0a00 	mov.w	sl, #0
 80065ca:	f04f 0b00 	mov.w	fp, #0
 80065ce:	460a      	mov	r2, r1
 80065d0:	9005      	str	r0, [sp, #20]
 80065d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80065d4:	7811      	ldrb	r1, [r2, #0]
 80065d6:	292b      	cmp	r1, #43	@ 0x2b
 80065d8:	d048      	beq.n	800666c <_strtod_l+0xb4>
 80065da:	d836      	bhi.n	800664a <_strtod_l+0x92>
 80065dc:	290d      	cmp	r1, #13
 80065de:	d830      	bhi.n	8006642 <_strtod_l+0x8a>
 80065e0:	2908      	cmp	r1, #8
 80065e2:	d830      	bhi.n	8006646 <_strtod_l+0x8e>
 80065e4:	2900      	cmp	r1, #0
 80065e6:	d039      	beq.n	800665c <_strtod_l+0xa4>
 80065e8:	2200      	movs	r2, #0
 80065ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80065ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80065ee:	782a      	ldrb	r2, [r5, #0]
 80065f0:	2a30      	cmp	r2, #48	@ 0x30
 80065f2:	f040 80b1 	bne.w	8006758 <_strtod_l+0x1a0>
 80065f6:	786a      	ldrb	r2, [r5, #1]
 80065f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065fc:	2a58      	cmp	r2, #88	@ 0x58
 80065fe:	d16c      	bne.n	80066da <_strtod_l+0x122>
 8006600:	9302      	str	r3, [sp, #8]
 8006602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006604:	4a8e      	ldr	r2, [pc, #568]	@ (8006840 <_strtod_l+0x288>)
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	ab1a      	add	r3, sp, #104	@ 0x68
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	9805      	ldr	r0, [sp, #20]
 800660e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006610:	a919      	add	r1, sp, #100	@ 0x64
 8006612:	f001 ffdb 	bl	80085cc <__gethex>
 8006616:	f010 060f 	ands.w	r6, r0, #15
 800661a:	4604      	mov	r4, r0
 800661c:	d005      	beq.n	800662a <_strtod_l+0x72>
 800661e:	2e06      	cmp	r6, #6
 8006620:	d126      	bne.n	8006670 <_strtod_l+0xb8>
 8006622:	2300      	movs	r3, #0
 8006624:	3501      	adds	r5, #1
 8006626:	9519      	str	r5, [sp, #100]	@ 0x64
 8006628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800662a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 8584 	bne.w	800713a <_strtod_l+0xb82>
 8006632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006634:	b1bb      	cbz	r3, 8006666 <_strtod_l+0xae>
 8006636:	4650      	mov	r0, sl
 8006638:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800663c:	b01f      	add	sp, #124	@ 0x7c
 800663e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006642:	2920      	cmp	r1, #32
 8006644:	d1d0      	bne.n	80065e8 <_strtod_l+0x30>
 8006646:	3201      	adds	r2, #1
 8006648:	e7c3      	b.n	80065d2 <_strtod_l+0x1a>
 800664a:	292d      	cmp	r1, #45	@ 0x2d
 800664c:	d1cc      	bne.n	80065e8 <_strtod_l+0x30>
 800664e:	2101      	movs	r1, #1
 8006650:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006652:	1c51      	adds	r1, r2, #1
 8006654:	9119      	str	r1, [sp, #100]	@ 0x64
 8006656:	7852      	ldrb	r2, [r2, #1]
 8006658:	2a00      	cmp	r2, #0
 800665a:	d1c7      	bne.n	80065ec <_strtod_l+0x34>
 800665c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800665e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 8568 	bne.w	8007136 <_strtod_l+0xb7e>
 8006666:	4650      	mov	r0, sl
 8006668:	4659      	mov	r1, fp
 800666a:	e7e7      	b.n	800663c <_strtod_l+0x84>
 800666c:	2100      	movs	r1, #0
 800666e:	e7ef      	b.n	8006650 <_strtod_l+0x98>
 8006670:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006672:	b13a      	cbz	r2, 8006684 <_strtod_l+0xcc>
 8006674:	2135      	movs	r1, #53	@ 0x35
 8006676:	a81c      	add	r0, sp, #112	@ 0x70
 8006678:	f7ff ff36 	bl	80064e8 <__copybits>
 800667c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800667e:	9805      	ldr	r0, [sp, #20]
 8006680:	f7ff fb10 	bl	8005ca4 <_Bfree>
 8006684:	3e01      	subs	r6, #1
 8006686:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006688:	2e04      	cmp	r6, #4
 800668a:	d806      	bhi.n	800669a <_strtod_l+0xe2>
 800668c:	e8df f006 	tbb	[pc, r6]
 8006690:	201d0314 	.word	0x201d0314
 8006694:	14          	.byte	0x14
 8006695:	00          	.byte	0x00
 8006696:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800669a:	05e1      	lsls	r1, r4, #23
 800669c:	bf48      	it	mi
 800669e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80066a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066a6:	0d1b      	lsrs	r3, r3, #20
 80066a8:	051b      	lsls	r3, r3, #20
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1bd      	bne.n	800662a <_strtod_l+0x72>
 80066ae:	f7fe fb29 	bl	8004d04 <__errno>
 80066b2:	2322      	movs	r3, #34	@ 0x22
 80066b4:	6003      	str	r3, [r0, #0]
 80066b6:	e7b8      	b.n	800662a <_strtod_l+0x72>
 80066b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80066bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80066c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80066c4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80066c8:	e7e7      	b.n	800669a <_strtod_l+0xe2>
 80066ca:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006844 <_strtod_l+0x28c>
 80066ce:	e7e4      	b.n	800669a <_strtod_l+0xe2>
 80066d0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80066d4:	f04f 3aff 	mov.w	sl, #4294967295
 80066d8:	e7df      	b.n	800669a <_strtod_l+0xe2>
 80066da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	9219      	str	r2, [sp, #100]	@ 0x64
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b30      	cmp	r3, #48	@ 0x30
 80066e4:	d0f9      	beq.n	80066da <_strtod_l+0x122>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d09f      	beq.n	800662a <_strtod_l+0x72>
 80066ea:	2301      	movs	r3, #1
 80066ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066f0:	220a      	movs	r2, #10
 80066f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80066f4:	2300      	movs	r3, #0
 80066f6:	461f      	mov	r7, r3
 80066f8:	9308      	str	r3, [sp, #32]
 80066fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80066fc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80066fe:	7805      	ldrb	r5, [r0, #0]
 8006700:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006704:	b2d9      	uxtb	r1, r3
 8006706:	2909      	cmp	r1, #9
 8006708:	d928      	bls.n	800675c <_strtod_l+0x1a4>
 800670a:	2201      	movs	r2, #1
 800670c:	494e      	ldr	r1, [pc, #312]	@ (8006848 <_strtod_l+0x290>)
 800670e:	f001 fe6b 	bl	80083e8 <strncmp>
 8006712:	2800      	cmp	r0, #0
 8006714:	d032      	beq.n	800677c <_strtod_l+0x1c4>
 8006716:	2000      	movs	r0, #0
 8006718:	462a      	mov	r2, r5
 800671a:	4681      	mov	r9, r0
 800671c:	463d      	mov	r5, r7
 800671e:	4603      	mov	r3, r0
 8006720:	2a65      	cmp	r2, #101	@ 0x65
 8006722:	d001      	beq.n	8006728 <_strtod_l+0x170>
 8006724:	2a45      	cmp	r2, #69	@ 0x45
 8006726:	d114      	bne.n	8006752 <_strtod_l+0x19a>
 8006728:	b91d      	cbnz	r5, 8006732 <_strtod_l+0x17a>
 800672a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800672c:	4302      	orrs	r2, r0
 800672e:	d095      	beq.n	800665c <_strtod_l+0xa4>
 8006730:	2500      	movs	r5, #0
 8006732:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006734:	1c62      	adds	r2, r4, #1
 8006736:	9219      	str	r2, [sp, #100]	@ 0x64
 8006738:	7862      	ldrb	r2, [r4, #1]
 800673a:	2a2b      	cmp	r2, #43	@ 0x2b
 800673c:	d077      	beq.n	800682e <_strtod_l+0x276>
 800673e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006740:	d07b      	beq.n	800683a <_strtod_l+0x282>
 8006742:	f04f 0c00 	mov.w	ip, #0
 8006746:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800674a:	2909      	cmp	r1, #9
 800674c:	f240 8082 	bls.w	8006854 <_strtod_l+0x29c>
 8006750:	9419      	str	r4, [sp, #100]	@ 0x64
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	e0a2      	b.n	800689e <_strtod_l+0x2e6>
 8006758:	2300      	movs	r3, #0
 800675a:	e7c7      	b.n	80066ec <_strtod_l+0x134>
 800675c:	2f08      	cmp	r7, #8
 800675e:	bfd5      	itete	le
 8006760:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006762:	9908      	ldrgt	r1, [sp, #32]
 8006764:	fb02 3301 	mlale	r3, r2, r1, r3
 8006768:	fb02 3301 	mlagt	r3, r2, r1, r3
 800676c:	f100 0001 	add.w	r0, r0, #1
 8006770:	bfd4      	ite	le
 8006772:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006774:	9308      	strgt	r3, [sp, #32]
 8006776:	3701      	adds	r7, #1
 8006778:	9019      	str	r0, [sp, #100]	@ 0x64
 800677a:	e7bf      	b.n	80066fc <_strtod_l+0x144>
 800677c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	9219      	str	r2, [sp, #100]	@ 0x64
 8006782:	785a      	ldrb	r2, [r3, #1]
 8006784:	b37f      	cbz	r7, 80067e6 <_strtod_l+0x22e>
 8006786:	4681      	mov	r9, r0
 8006788:	463d      	mov	r5, r7
 800678a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800678e:	2b09      	cmp	r3, #9
 8006790:	d912      	bls.n	80067b8 <_strtod_l+0x200>
 8006792:	2301      	movs	r3, #1
 8006794:	e7c4      	b.n	8006720 <_strtod_l+0x168>
 8006796:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006798:	3001      	adds	r0, #1
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	9219      	str	r2, [sp, #100]	@ 0x64
 800679e:	785a      	ldrb	r2, [r3, #1]
 80067a0:	2a30      	cmp	r2, #48	@ 0x30
 80067a2:	d0f8      	beq.n	8006796 <_strtod_l+0x1de>
 80067a4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	f200 84cb 	bhi.w	8007144 <_strtod_l+0xb8c>
 80067ae:	4681      	mov	r9, r0
 80067b0:	2000      	movs	r0, #0
 80067b2:	4605      	mov	r5, r0
 80067b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80067b8:	3a30      	subs	r2, #48	@ 0x30
 80067ba:	f100 0301 	add.w	r3, r0, #1
 80067be:	d02a      	beq.n	8006816 <_strtod_l+0x25e>
 80067c0:	4499      	add	r9, r3
 80067c2:	210a      	movs	r1, #10
 80067c4:	462b      	mov	r3, r5
 80067c6:	eb00 0c05 	add.w	ip, r0, r5
 80067ca:	4563      	cmp	r3, ip
 80067cc:	d10d      	bne.n	80067ea <_strtod_l+0x232>
 80067ce:	1c69      	adds	r1, r5, #1
 80067d0:	4401      	add	r1, r0
 80067d2:	4428      	add	r0, r5
 80067d4:	2808      	cmp	r0, #8
 80067d6:	dc16      	bgt.n	8006806 <_strtod_l+0x24e>
 80067d8:	230a      	movs	r3, #10
 80067da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80067dc:	fb03 2300 	mla	r3, r3, r0, r2
 80067e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80067e2:	2300      	movs	r3, #0
 80067e4:	e018      	b.n	8006818 <_strtod_l+0x260>
 80067e6:	4638      	mov	r0, r7
 80067e8:	e7da      	b.n	80067a0 <_strtod_l+0x1e8>
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	f103 0301 	add.w	r3, r3, #1
 80067f0:	dc03      	bgt.n	80067fa <_strtod_l+0x242>
 80067f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80067f4:	434e      	muls	r6, r1
 80067f6:	960a      	str	r6, [sp, #40]	@ 0x28
 80067f8:	e7e7      	b.n	80067ca <_strtod_l+0x212>
 80067fa:	2b10      	cmp	r3, #16
 80067fc:	bfde      	ittt	le
 80067fe:	9e08      	ldrle	r6, [sp, #32]
 8006800:	434e      	mulle	r6, r1
 8006802:	9608      	strle	r6, [sp, #32]
 8006804:	e7e1      	b.n	80067ca <_strtod_l+0x212>
 8006806:	280f      	cmp	r0, #15
 8006808:	dceb      	bgt.n	80067e2 <_strtod_l+0x22a>
 800680a:	230a      	movs	r3, #10
 800680c:	9808      	ldr	r0, [sp, #32]
 800680e:	fb03 2300 	mla	r3, r3, r0, r2
 8006812:	9308      	str	r3, [sp, #32]
 8006814:	e7e5      	b.n	80067e2 <_strtod_l+0x22a>
 8006816:	4629      	mov	r1, r5
 8006818:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800681a:	460d      	mov	r5, r1
 800681c:	1c50      	adds	r0, r2, #1
 800681e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006820:	7852      	ldrb	r2, [r2, #1]
 8006822:	4618      	mov	r0, r3
 8006824:	e7b1      	b.n	800678a <_strtod_l+0x1d2>
 8006826:	f04f 0900 	mov.w	r9, #0
 800682a:	2301      	movs	r3, #1
 800682c:	e77d      	b.n	800672a <_strtod_l+0x172>
 800682e:	f04f 0c00 	mov.w	ip, #0
 8006832:	1ca2      	adds	r2, r4, #2
 8006834:	9219      	str	r2, [sp, #100]	@ 0x64
 8006836:	78a2      	ldrb	r2, [r4, #2]
 8006838:	e785      	b.n	8006746 <_strtod_l+0x18e>
 800683a:	f04f 0c01 	mov.w	ip, #1
 800683e:	e7f8      	b.n	8006832 <_strtod_l+0x27a>
 8006840:	08009120 	.word	0x08009120
 8006844:	7ff00000 	.word	0x7ff00000
 8006848:	08009108 	.word	0x08009108
 800684c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800684e:	1c51      	adds	r1, r2, #1
 8006850:	9119      	str	r1, [sp, #100]	@ 0x64
 8006852:	7852      	ldrb	r2, [r2, #1]
 8006854:	2a30      	cmp	r2, #48	@ 0x30
 8006856:	d0f9      	beq.n	800684c <_strtod_l+0x294>
 8006858:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800685c:	2908      	cmp	r1, #8
 800685e:	f63f af78 	bhi.w	8006752 <_strtod_l+0x19a>
 8006862:	f04f 080a 	mov.w	r8, #10
 8006866:	3a30      	subs	r2, #48	@ 0x30
 8006868:	920e      	str	r2, [sp, #56]	@ 0x38
 800686a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800686c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800686e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006870:	1c56      	adds	r6, r2, #1
 8006872:	9619      	str	r6, [sp, #100]	@ 0x64
 8006874:	7852      	ldrb	r2, [r2, #1]
 8006876:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800687a:	f1be 0f09 	cmp.w	lr, #9
 800687e:	d939      	bls.n	80068f4 <_strtod_l+0x33c>
 8006880:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006882:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006886:	1a76      	subs	r6, r6, r1
 8006888:	2e08      	cmp	r6, #8
 800688a:	dc03      	bgt.n	8006894 <_strtod_l+0x2dc>
 800688c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800688e:	4588      	cmp	r8, r1
 8006890:	bfa8      	it	ge
 8006892:	4688      	movge	r8, r1
 8006894:	f1bc 0f00 	cmp.w	ip, #0
 8006898:	d001      	beq.n	800689e <_strtod_l+0x2e6>
 800689a:	f1c8 0800 	rsb	r8, r8, #0
 800689e:	2d00      	cmp	r5, #0
 80068a0:	d14e      	bne.n	8006940 <_strtod_l+0x388>
 80068a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068a4:	4308      	orrs	r0, r1
 80068a6:	f47f aec0 	bne.w	800662a <_strtod_l+0x72>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f47f aed6 	bne.w	800665c <_strtod_l+0xa4>
 80068b0:	2a69      	cmp	r2, #105	@ 0x69
 80068b2:	d028      	beq.n	8006906 <_strtod_l+0x34e>
 80068b4:	dc25      	bgt.n	8006902 <_strtod_l+0x34a>
 80068b6:	2a49      	cmp	r2, #73	@ 0x49
 80068b8:	d025      	beq.n	8006906 <_strtod_l+0x34e>
 80068ba:	2a4e      	cmp	r2, #78	@ 0x4e
 80068bc:	f47f aece 	bne.w	800665c <_strtod_l+0xa4>
 80068c0:	499a      	ldr	r1, [pc, #616]	@ (8006b2c <_strtod_l+0x574>)
 80068c2:	a819      	add	r0, sp, #100	@ 0x64
 80068c4:	f002 f8a4 	bl	8008a10 <__match>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f43f aec7 	beq.w	800665c <_strtod_l+0xa4>
 80068ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b28      	cmp	r3, #40	@ 0x28
 80068d4:	d12e      	bne.n	8006934 <_strtod_l+0x37c>
 80068d6:	4996      	ldr	r1, [pc, #600]	@ (8006b30 <_strtod_l+0x578>)
 80068d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80068da:	a819      	add	r0, sp, #100	@ 0x64
 80068dc:	f002 f8ac 	bl	8008a38 <__hexnan>
 80068e0:	2805      	cmp	r0, #5
 80068e2:	d127      	bne.n	8006934 <_strtod_l+0x37c>
 80068e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80068e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80068ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80068ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80068f2:	e69a      	b.n	800662a <_strtod_l+0x72>
 80068f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80068f6:	fb08 2101 	mla	r1, r8, r1, r2
 80068fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80068fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8006900:	e7b5      	b.n	800686e <_strtod_l+0x2b6>
 8006902:	2a6e      	cmp	r2, #110	@ 0x6e
 8006904:	e7da      	b.n	80068bc <_strtod_l+0x304>
 8006906:	498b      	ldr	r1, [pc, #556]	@ (8006b34 <_strtod_l+0x57c>)
 8006908:	a819      	add	r0, sp, #100	@ 0x64
 800690a:	f002 f881 	bl	8008a10 <__match>
 800690e:	2800      	cmp	r0, #0
 8006910:	f43f aea4 	beq.w	800665c <_strtod_l+0xa4>
 8006914:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006916:	4988      	ldr	r1, [pc, #544]	@ (8006b38 <_strtod_l+0x580>)
 8006918:	3b01      	subs	r3, #1
 800691a:	a819      	add	r0, sp, #100	@ 0x64
 800691c:	9319      	str	r3, [sp, #100]	@ 0x64
 800691e:	f002 f877 	bl	8008a10 <__match>
 8006922:	b910      	cbnz	r0, 800692a <_strtod_l+0x372>
 8006924:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006926:	3301      	adds	r3, #1
 8006928:	9319      	str	r3, [sp, #100]	@ 0x64
 800692a:	f04f 0a00 	mov.w	sl, #0
 800692e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006b3c <_strtod_l+0x584>
 8006932:	e67a      	b.n	800662a <_strtod_l+0x72>
 8006934:	4882      	ldr	r0, [pc, #520]	@ (8006b40 <_strtod_l+0x588>)
 8006936:	f001 fda9 	bl	800848c <nan>
 800693a:	4682      	mov	sl, r0
 800693c:	468b      	mov	fp, r1
 800693e:	e674      	b.n	800662a <_strtod_l+0x72>
 8006940:	eba8 0309 	sub.w	r3, r8, r9
 8006944:	2f00      	cmp	r7, #0
 8006946:	bf08      	it	eq
 8006948:	462f      	moveq	r7, r5
 800694a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800694c:	2d10      	cmp	r5, #16
 800694e:	462c      	mov	r4, r5
 8006950:	9309      	str	r3, [sp, #36]	@ 0x24
 8006952:	bfa8      	it	ge
 8006954:	2410      	movge	r4, #16
 8006956:	f7f9 fd5d 	bl	8000414 <__aeabi_ui2d>
 800695a:	2d09      	cmp	r5, #9
 800695c:	4682      	mov	sl, r0
 800695e:	468b      	mov	fp, r1
 8006960:	dc11      	bgt.n	8006986 <_strtod_l+0x3ce>
 8006962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	f43f ae60 	beq.w	800662a <_strtod_l+0x72>
 800696a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696c:	dd76      	ble.n	8006a5c <_strtod_l+0x4a4>
 800696e:	2b16      	cmp	r3, #22
 8006970:	dc5d      	bgt.n	8006a2e <_strtod_l+0x476>
 8006972:	4974      	ldr	r1, [pc, #464]	@ (8006b44 <_strtod_l+0x58c>)
 8006974:	4652      	mov	r2, sl
 8006976:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800697a:	465b      	mov	r3, fp
 800697c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006980:	f7f9 fdc2 	bl	8000508 <__aeabi_dmul>
 8006984:	e7d9      	b.n	800693a <_strtod_l+0x382>
 8006986:	4b6f      	ldr	r3, [pc, #444]	@ (8006b44 <_strtod_l+0x58c>)
 8006988:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800698c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006990:	f7f9 fdba 	bl	8000508 <__aeabi_dmul>
 8006994:	4682      	mov	sl, r0
 8006996:	9808      	ldr	r0, [sp, #32]
 8006998:	468b      	mov	fp, r1
 800699a:	f7f9 fd3b 	bl	8000414 <__aeabi_ui2d>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4650      	mov	r0, sl
 80069a4:	4659      	mov	r1, fp
 80069a6:	f7f9 fbf9 	bl	800019c <__adddf3>
 80069aa:	2d0f      	cmp	r5, #15
 80069ac:	4682      	mov	sl, r0
 80069ae:	468b      	mov	fp, r1
 80069b0:	ddd7      	ble.n	8006962 <_strtod_l+0x3aa>
 80069b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b4:	1b2c      	subs	r4, r5, r4
 80069b6:	441c      	add	r4, r3
 80069b8:	2c00      	cmp	r4, #0
 80069ba:	f340 8096 	ble.w	8006aea <_strtod_l+0x532>
 80069be:	f014 030f 	ands.w	r3, r4, #15
 80069c2:	d00a      	beq.n	80069da <_strtod_l+0x422>
 80069c4:	495f      	ldr	r1, [pc, #380]	@ (8006b44 <_strtod_l+0x58c>)
 80069c6:	4652      	mov	r2, sl
 80069c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d0:	465b      	mov	r3, fp
 80069d2:	f7f9 fd99 	bl	8000508 <__aeabi_dmul>
 80069d6:	4682      	mov	sl, r0
 80069d8:	468b      	mov	fp, r1
 80069da:	f034 040f 	bics.w	r4, r4, #15
 80069de:	d073      	beq.n	8006ac8 <_strtod_l+0x510>
 80069e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80069e4:	dd48      	ble.n	8006a78 <_strtod_l+0x4c0>
 80069e6:	2400      	movs	r4, #0
 80069e8:	46a0      	mov	r8, r4
 80069ea:	46a1      	mov	r9, r4
 80069ec:	940a      	str	r4, [sp, #40]	@ 0x28
 80069ee:	2322      	movs	r3, #34	@ 0x22
 80069f0:	f04f 0a00 	mov.w	sl, #0
 80069f4:	9a05      	ldr	r2, [sp, #20]
 80069f6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006b3c <_strtod_l+0x584>
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f43f ae13 	beq.w	800662a <_strtod_l+0x72>
 8006a04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a06:	9805      	ldr	r0, [sp, #20]
 8006a08:	f7ff f94c 	bl	8005ca4 <_Bfree>
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	9805      	ldr	r0, [sp, #20]
 8006a10:	f7ff f948 	bl	8005ca4 <_Bfree>
 8006a14:	4641      	mov	r1, r8
 8006a16:	9805      	ldr	r0, [sp, #20]
 8006a18:	f7ff f944 	bl	8005ca4 <_Bfree>
 8006a1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a1e:	9805      	ldr	r0, [sp, #20]
 8006a20:	f7ff f940 	bl	8005ca4 <_Bfree>
 8006a24:	4621      	mov	r1, r4
 8006a26:	9805      	ldr	r0, [sp, #20]
 8006a28:	f7ff f93c 	bl	8005ca4 <_Bfree>
 8006a2c:	e5fd      	b.n	800662a <_strtod_l+0x72>
 8006a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006a34:	4293      	cmp	r3, r2
 8006a36:	dbbc      	blt.n	80069b2 <_strtod_l+0x3fa>
 8006a38:	4c42      	ldr	r4, [pc, #264]	@ (8006b44 <_strtod_l+0x58c>)
 8006a3a:	f1c5 050f 	rsb	r5, r5, #15
 8006a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a42:	4652      	mov	r2, sl
 8006a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a48:	465b      	mov	r3, fp
 8006a4a:	f7f9 fd5d 	bl	8000508 <__aeabi_dmul>
 8006a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a50:	1b5d      	subs	r5, r3, r5
 8006a52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a5a:	e791      	b.n	8006980 <_strtod_l+0x3c8>
 8006a5c:	3316      	adds	r3, #22
 8006a5e:	dba8      	blt.n	80069b2 <_strtod_l+0x3fa>
 8006a60:	4b38      	ldr	r3, [pc, #224]	@ (8006b44 <_strtod_l+0x58c>)
 8006a62:	eba9 0808 	sub.w	r8, r9, r8
 8006a66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006a6a:	4650      	mov	r0, sl
 8006a6c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006a70:	4659      	mov	r1, fp
 8006a72:	f7f9 fe73 	bl	800075c <__aeabi_ddiv>
 8006a76:	e760      	b.n	800693a <_strtod_l+0x382>
 8006a78:	4b33      	ldr	r3, [pc, #204]	@ (8006b48 <_strtod_l+0x590>)
 8006a7a:	4650      	mov	r0, sl
 8006a7c:	9308      	str	r3, [sp, #32]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	4659      	mov	r1, fp
 8006a82:	461e      	mov	r6, r3
 8006a84:	1124      	asrs	r4, r4, #4
 8006a86:	2c01      	cmp	r4, #1
 8006a88:	dc21      	bgt.n	8006ace <_strtod_l+0x516>
 8006a8a:	b10b      	cbz	r3, 8006a90 <_strtod_l+0x4d8>
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	468b      	mov	fp, r1
 8006a90:	492d      	ldr	r1, [pc, #180]	@ (8006b48 <_strtod_l+0x590>)
 8006a92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006a96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006a9a:	4652      	mov	r2, sl
 8006a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa0:	465b      	mov	r3, fp
 8006aa2:	f7f9 fd31 	bl	8000508 <__aeabi_dmul>
 8006aa6:	4b25      	ldr	r3, [pc, #148]	@ (8006b3c <_strtod_l+0x584>)
 8006aa8:	460a      	mov	r2, r1
 8006aaa:	400b      	ands	r3, r1
 8006aac:	4927      	ldr	r1, [pc, #156]	@ (8006b4c <_strtod_l+0x594>)
 8006aae:	4682      	mov	sl, r0
 8006ab0:	428b      	cmp	r3, r1
 8006ab2:	d898      	bhi.n	80069e6 <_strtod_l+0x42e>
 8006ab4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	bf86      	itte	hi
 8006abc:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ac0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006b50 <_strtod_l+0x598>
 8006ac4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9308      	str	r3, [sp, #32]
 8006acc:	e07a      	b.n	8006bc4 <_strtod_l+0x60c>
 8006ace:	07e2      	lsls	r2, r4, #31
 8006ad0:	d505      	bpl.n	8006ade <_strtod_l+0x526>
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f7f9 fd16 	bl	8000508 <__aeabi_dmul>
 8006adc:	2301      	movs	r3, #1
 8006ade:	9a08      	ldr	r2, [sp, #32]
 8006ae0:	3601      	adds	r6, #1
 8006ae2:	3208      	adds	r2, #8
 8006ae4:	1064      	asrs	r4, r4, #1
 8006ae6:	9208      	str	r2, [sp, #32]
 8006ae8:	e7cd      	b.n	8006a86 <_strtod_l+0x4ce>
 8006aea:	d0ed      	beq.n	8006ac8 <_strtod_l+0x510>
 8006aec:	4264      	negs	r4, r4
 8006aee:	f014 020f 	ands.w	r2, r4, #15
 8006af2:	d00a      	beq.n	8006b0a <_strtod_l+0x552>
 8006af4:	4b13      	ldr	r3, [pc, #76]	@ (8006b44 <_strtod_l+0x58c>)
 8006af6:	4650      	mov	r0, sl
 8006af8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006afc:	4659      	mov	r1, fp
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fe2b 	bl	800075c <__aeabi_ddiv>
 8006b06:	4682      	mov	sl, r0
 8006b08:	468b      	mov	fp, r1
 8006b0a:	1124      	asrs	r4, r4, #4
 8006b0c:	d0dc      	beq.n	8006ac8 <_strtod_l+0x510>
 8006b0e:	2c1f      	cmp	r4, #31
 8006b10:	dd20      	ble.n	8006b54 <_strtod_l+0x59c>
 8006b12:	2400      	movs	r4, #0
 8006b14:	46a0      	mov	r8, r4
 8006b16:	46a1      	mov	r9, r4
 8006b18:	940a      	str	r4, [sp, #40]	@ 0x28
 8006b1a:	2322      	movs	r3, #34	@ 0x22
 8006b1c:	9a05      	ldr	r2, [sp, #20]
 8006b1e:	f04f 0a00 	mov.w	sl, #0
 8006b22:	f04f 0b00 	mov.w	fp, #0
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	e768      	b.n	80069fc <_strtod_l+0x444>
 8006b2a:	bf00      	nop
 8006b2c:	08008ef9 	.word	0x08008ef9
 8006b30:	0800910c 	.word	0x0800910c
 8006b34:	08008ef1 	.word	0x08008ef1
 8006b38:	08008f26 	.word	0x08008f26
 8006b3c:	7ff00000 	.word	0x7ff00000
 8006b40:	080092d0 	.word	0x080092d0
 8006b44:	08009040 	.word	0x08009040
 8006b48:	08009018 	.word	0x08009018
 8006b4c:	7ca00000 	.word	0x7ca00000
 8006b50:	7fefffff 	.word	0x7fefffff
 8006b54:	f014 0310 	ands.w	r3, r4, #16
 8006b58:	bf18      	it	ne
 8006b5a:	236a      	movne	r3, #106	@ 0x6a
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	9308      	str	r3, [sp, #32]
 8006b60:	4659      	mov	r1, fp
 8006b62:	2300      	movs	r3, #0
 8006b64:	4ea9      	ldr	r6, [pc, #676]	@ (8006e0c <_strtod_l+0x854>)
 8006b66:	07e2      	lsls	r2, r4, #31
 8006b68:	d504      	bpl.n	8006b74 <_strtod_l+0x5bc>
 8006b6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b6e:	f7f9 fccb 	bl	8000508 <__aeabi_dmul>
 8006b72:	2301      	movs	r3, #1
 8006b74:	1064      	asrs	r4, r4, #1
 8006b76:	f106 0608 	add.w	r6, r6, #8
 8006b7a:	d1f4      	bne.n	8006b66 <_strtod_l+0x5ae>
 8006b7c:	b10b      	cbz	r3, 8006b82 <_strtod_l+0x5ca>
 8006b7e:	4682      	mov	sl, r0
 8006b80:	468b      	mov	fp, r1
 8006b82:	9b08      	ldr	r3, [sp, #32]
 8006b84:	b1b3      	cbz	r3, 8006bb4 <_strtod_l+0x5fc>
 8006b86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	4659      	mov	r1, fp
 8006b92:	dd0f      	ble.n	8006bb4 <_strtod_l+0x5fc>
 8006b94:	2b1f      	cmp	r3, #31
 8006b96:	dd57      	ble.n	8006c48 <_strtod_l+0x690>
 8006b98:	2b34      	cmp	r3, #52	@ 0x34
 8006b9a:	bfd8      	it	le
 8006b9c:	f04f 33ff 	movle.w	r3, #4294967295
 8006ba0:	f04f 0a00 	mov.w	sl, #0
 8006ba4:	bfcf      	iteee	gt
 8006ba6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006baa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006bae:	4093      	lslle	r3, r2
 8006bb0:	ea03 0b01 	andle.w	fp, r3, r1
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	4650      	mov	r0, sl
 8006bba:	4659      	mov	r1, fp
 8006bbc:	f7f9 ff0c 	bl	80009d8 <__aeabi_dcmpeq>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d1a6      	bne.n	8006b12 <_strtod_l+0x55a>
 8006bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bc6:	463a      	mov	r2, r7
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006bcc:	462b      	mov	r3, r5
 8006bce:	9805      	ldr	r0, [sp, #20]
 8006bd0:	f7ff f8d0 	bl	8005d74 <__s2b>
 8006bd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f43f af05 	beq.w	80069e6 <_strtod_l+0x42e>
 8006bdc:	2400      	movs	r4, #0
 8006bde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006be0:	eba9 0308 	sub.w	r3, r9, r8
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	bfa8      	it	ge
 8006be8:	2300      	movge	r3, #0
 8006bea:	46a0      	mov	r8, r4
 8006bec:	9312      	str	r3, [sp, #72]	@ 0x48
 8006bee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006bf2:	9316      	str	r3, [sp, #88]	@ 0x58
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bf6:	9805      	ldr	r0, [sp, #20]
 8006bf8:	6859      	ldr	r1, [r3, #4]
 8006bfa:	f7ff f813 	bl	8005c24 <_Balloc>
 8006bfe:	4681      	mov	r9, r0
 8006c00:	2800      	cmp	r0, #0
 8006c02:	f43f aef4 	beq.w	80069ee <_strtod_l+0x436>
 8006c06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c08:	300c      	adds	r0, #12
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	f103 010c 	add.w	r1, r3, #12
 8006c10:	3202      	adds	r2, #2
 8006c12:	0092      	lsls	r2, r2, #2
 8006c14:	f001 fc2c 	bl	8008470 <memcpy>
 8006c18:	ab1c      	add	r3, sp, #112	@ 0x70
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	4652      	mov	r2, sl
 8006c22:	465b      	mov	r3, fp
 8006c24:	9805      	ldr	r0, [sp, #20]
 8006c26:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006c2a:	f7ff fbd5 	bl	80063d8 <__d2b>
 8006c2e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006c30:	2800      	cmp	r0, #0
 8006c32:	f43f aedc 	beq.w	80069ee <_strtod_l+0x436>
 8006c36:	2101      	movs	r1, #1
 8006c38:	9805      	ldr	r0, [sp, #20]
 8006c3a:	f7ff f931 	bl	8005ea0 <__i2b>
 8006c3e:	4680      	mov	r8, r0
 8006c40:	b948      	cbnz	r0, 8006c56 <_strtod_l+0x69e>
 8006c42:	f04f 0800 	mov.w	r8, #0
 8006c46:	e6d2      	b.n	80069ee <_strtod_l+0x436>
 8006c48:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c50:	ea03 0a0a 	and.w	sl, r3, sl
 8006c54:	e7ae      	b.n	8006bb4 <_strtod_l+0x5fc>
 8006c56:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006c58:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	bfab      	itete	ge
 8006c5e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006c60:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006c62:	18ef      	addge	r7, r5, r3
 8006c64:	1b5e      	sublt	r6, r3, r5
 8006c66:	9b08      	ldr	r3, [sp, #32]
 8006c68:	bfa8      	it	ge
 8006c6a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006c6c:	eba5 0503 	sub.w	r5, r5, r3
 8006c70:	4415      	add	r5, r2
 8006c72:	4b67      	ldr	r3, [pc, #412]	@ (8006e10 <_strtod_l+0x858>)
 8006c74:	f105 35ff 	add.w	r5, r5, #4294967295
 8006c78:	bfb8      	it	lt
 8006c7a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006c7c:	429d      	cmp	r5, r3
 8006c7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c82:	da50      	bge.n	8006d26 <_strtod_l+0x76e>
 8006c84:	1b5b      	subs	r3, r3, r5
 8006c86:	2b1f      	cmp	r3, #31
 8006c88:	f04f 0101 	mov.w	r1, #1
 8006c8c:	eba2 0203 	sub.w	r2, r2, r3
 8006c90:	dc3d      	bgt.n	8006d0e <_strtod_l+0x756>
 8006c92:	fa01 f303 	lsl.w	r3, r1, r3
 8006c96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c9c:	18bd      	adds	r5, r7, r2
 8006c9e:	9b08      	ldr	r3, [sp, #32]
 8006ca0:	42af      	cmp	r7, r5
 8006ca2:	4416      	add	r6, r2
 8006ca4:	441e      	add	r6, r3
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	bfa8      	it	ge
 8006caa:	462b      	movge	r3, r5
 8006cac:	42b3      	cmp	r3, r6
 8006cae:	bfa8      	it	ge
 8006cb0:	4633      	movge	r3, r6
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfc2      	ittt	gt
 8006cb6:	1aed      	subgt	r5, r5, r3
 8006cb8:	1af6      	subgt	r6, r6, r3
 8006cba:	1aff      	subgt	r7, r7, r3
 8006cbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd16      	ble.n	8006cf0 <_strtod_l+0x738>
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	9805      	ldr	r0, [sp, #20]
 8006cc8:	f7ff f9a8 	bl	800601c <__pow5mult>
 8006ccc:	4680      	mov	r8, r0
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d0b7      	beq.n	8006c42 <_strtod_l+0x68a>
 8006cd2:	4601      	mov	r1, r0
 8006cd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006cd6:	9805      	ldr	r0, [sp, #20]
 8006cd8:	f7ff f8f8 	bl	8005ecc <__multiply>
 8006cdc:	900e      	str	r0, [sp, #56]	@ 0x38
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f43f ae85 	beq.w	80069ee <_strtod_l+0x436>
 8006ce4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ce6:	9805      	ldr	r0, [sp, #20]
 8006ce8:	f7fe ffdc 	bl	8005ca4 <_Bfree>
 8006cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cee:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cf0:	2d00      	cmp	r5, #0
 8006cf2:	dc1d      	bgt.n	8006d30 <_strtod_l+0x778>
 8006cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	dd23      	ble.n	8006d42 <_strtod_l+0x78a>
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006cfe:	9805      	ldr	r0, [sp, #20]
 8006d00:	f7ff f98c 	bl	800601c <__pow5mult>
 8006d04:	4681      	mov	r9, r0
 8006d06:	b9e0      	cbnz	r0, 8006d42 <_strtod_l+0x78a>
 8006d08:	f04f 0900 	mov.w	r9, #0
 8006d0c:	e66f      	b.n	80069ee <_strtod_l+0x436>
 8006d0e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006d12:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006d16:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006d1a:	35e2      	adds	r5, #226	@ 0xe2
 8006d1c:	fa01 f305 	lsl.w	r3, r1, r5
 8006d20:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d22:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006d24:	e7ba      	b.n	8006c9c <_strtod_l+0x6e4>
 8006d26:	2300      	movs	r3, #0
 8006d28:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d2e:	e7b5      	b.n	8006c9c <_strtod_l+0x6e4>
 8006d30:	462a      	mov	r2, r5
 8006d32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d34:	9805      	ldr	r0, [sp, #20]
 8006d36:	f7ff f9cb 	bl	80060d0 <__lshift>
 8006d3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d1d9      	bne.n	8006cf4 <_strtod_l+0x73c>
 8006d40:	e655      	b.n	80069ee <_strtod_l+0x436>
 8006d42:	2e00      	cmp	r6, #0
 8006d44:	dd07      	ble.n	8006d56 <_strtod_l+0x79e>
 8006d46:	4649      	mov	r1, r9
 8006d48:	4632      	mov	r2, r6
 8006d4a:	9805      	ldr	r0, [sp, #20]
 8006d4c:	f7ff f9c0 	bl	80060d0 <__lshift>
 8006d50:	4681      	mov	r9, r0
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d0d8      	beq.n	8006d08 <_strtod_l+0x750>
 8006d56:	2f00      	cmp	r7, #0
 8006d58:	dd08      	ble.n	8006d6c <_strtod_l+0x7b4>
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	463a      	mov	r2, r7
 8006d5e:	9805      	ldr	r0, [sp, #20]
 8006d60:	f7ff f9b6 	bl	80060d0 <__lshift>
 8006d64:	4680      	mov	r8, r0
 8006d66:	2800      	cmp	r0, #0
 8006d68:	f43f ae41 	beq.w	80069ee <_strtod_l+0x436>
 8006d6c:	464a      	mov	r2, r9
 8006d6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d70:	9805      	ldr	r0, [sp, #20]
 8006d72:	f7ff fa35 	bl	80061e0 <__mdiff>
 8006d76:	4604      	mov	r4, r0
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	f43f ae38 	beq.w	80069ee <_strtod_l+0x436>
 8006d7e:	68c3      	ldr	r3, [r0, #12]
 8006d80:	4641      	mov	r1, r8
 8006d82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d84:	2300      	movs	r3, #0
 8006d86:	60c3      	str	r3, [r0, #12]
 8006d88:	f7ff fa0e 	bl	80061a8 <__mcmp>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	da45      	bge.n	8006e1c <_strtod_l+0x864>
 8006d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d92:	ea53 030a 	orrs.w	r3, r3, sl
 8006d96:	d16b      	bne.n	8006e70 <_strtod_l+0x8b8>
 8006d98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d167      	bne.n	8006e70 <_strtod_l+0x8b8>
 8006da0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006da4:	0d1b      	lsrs	r3, r3, #20
 8006da6:	051b      	lsls	r3, r3, #20
 8006da8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006dac:	d960      	bls.n	8006e70 <_strtod_l+0x8b8>
 8006dae:	6963      	ldr	r3, [r4, #20]
 8006db0:	b913      	cbnz	r3, 8006db8 <_strtod_l+0x800>
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	dd5b      	ble.n	8006e70 <_strtod_l+0x8b8>
 8006db8:	4621      	mov	r1, r4
 8006dba:	2201      	movs	r2, #1
 8006dbc:	9805      	ldr	r0, [sp, #20]
 8006dbe:	f7ff f987 	bl	80060d0 <__lshift>
 8006dc2:	4641      	mov	r1, r8
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	f7ff f9ef 	bl	80061a8 <__mcmp>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	dd50      	ble.n	8006e70 <_strtod_l+0x8b8>
 8006dce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006dd2:	9a08      	ldr	r2, [sp, #32]
 8006dd4:	0d1b      	lsrs	r3, r3, #20
 8006dd6:	051b      	lsls	r3, r3, #20
 8006dd8:	2a00      	cmp	r2, #0
 8006dda:	d06a      	beq.n	8006eb2 <_strtod_l+0x8fa>
 8006ddc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006de0:	d867      	bhi.n	8006eb2 <_strtod_l+0x8fa>
 8006de2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006de6:	f67f ae98 	bls.w	8006b1a <_strtod_l+0x562>
 8006dea:	4650      	mov	r0, sl
 8006dec:	4659      	mov	r1, fp
 8006dee:	4b09      	ldr	r3, [pc, #36]	@ (8006e14 <_strtod_l+0x85c>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	f7f9 fb89 	bl	8000508 <__aeabi_dmul>
 8006df6:	4b08      	ldr	r3, [pc, #32]	@ (8006e18 <_strtod_l+0x860>)
 8006df8:	4682      	mov	sl, r0
 8006dfa:	400b      	ands	r3, r1
 8006dfc:	468b      	mov	fp, r1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f47f ae00 	bne.w	8006a04 <_strtod_l+0x44c>
 8006e04:	2322      	movs	r3, #34	@ 0x22
 8006e06:	9a05      	ldr	r2, [sp, #20]
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	e5fb      	b.n	8006a04 <_strtod_l+0x44c>
 8006e0c:	08009138 	.word	0x08009138
 8006e10:	fffffc02 	.word	0xfffffc02
 8006e14:	39500000 	.word	0x39500000
 8006e18:	7ff00000 	.word	0x7ff00000
 8006e1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006e20:	d165      	bne.n	8006eee <_strtod_l+0x936>
 8006e22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006e24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e28:	b35a      	cbz	r2, 8006e82 <_strtod_l+0x8ca>
 8006e2a:	4a99      	ldr	r2, [pc, #612]	@ (8007090 <_strtod_l+0xad8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d12b      	bne.n	8006e88 <_strtod_l+0x8d0>
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	4651      	mov	r1, sl
 8006e34:	b303      	cbz	r3, 8006e78 <_strtod_l+0x8c0>
 8006e36:	465a      	mov	r2, fp
 8006e38:	4b96      	ldr	r3, [pc, #600]	@ (8007094 <_strtod_l+0xadc>)
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295
 8006e44:	d81b      	bhi.n	8006e7e <_strtod_l+0x8c6>
 8006e46:	0d1b      	lsrs	r3, r3, #20
 8006e48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e50:	4299      	cmp	r1, r3
 8006e52:	d119      	bne.n	8006e88 <_strtod_l+0x8d0>
 8006e54:	4b90      	ldr	r3, [pc, #576]	@ (8007098 <_strtod_l+0xae0>)
 8006e56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d102      	bne.n	8006e62 <_strtod_l+0x8aa>
 8006e5c:	3101      	adds	r1, #1
 8006e5e:	f43f adc6 	beq.w	80069ee <_strtod_l+0x436>
 8006e62:	f04f 0a00 	mov.w	sl, #0
 8006e66:	4b8b      	ldr	r3, [pc, #556]	@ (8007094 <_strtod_l+0xadc>)
 8006e68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e6a:	401a      	ands	r2, r3
 8006e6c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006e70:	9b08      	ldr	r3, [sp, #32]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1b9      	bne.n	8006dea <_strtod_l+0x832>
 8006e76:	e5c5      	b.n	8006a04 <_strtod_l+0x44c>
 8006e78:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7c:	e7e8      	b.n	8006e50 <_strtod_l+0x898>
 8006e7e:	4613      	mov	r3, r2
 8006e80:	e7e6      	b.n	8006e50 <_strtod_l+0x898>
 8006e82:	ea53 030a 	orrs.w	r3, r3, sl
 8006e86:	d0a2      	beq.n	8006dce <_strtod_l+0x816>
 8006e88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e8a:	b1db      	cbz	r3, 8006ec4 <_strtod_l+0x90c>
 8006e8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e8e:	4213      	tst	r3, r2
 8006e90:	d0ee      	beq.n	8006e70 <_strtod_l+0x8b8>
 8006e92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e94:	4650      	mov	r0, sl
 8006e96:	4659      	mov	r1, fp
 8006e98:	9a08      	ldr	r2, [sp, #32]
 8006e9a:	b1bb      	cbz	r3, 8006ecc <_strtod_l+0x914>
 8006e9c:	f7ff fb68 	bl	8006570 <sulp>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ea8:	f7f9 f978 	bl	800019c <__adddf3>
 8006eac:	4682      	mov	sl, r0
 8006eae:	468b      	mov	fp, r1
 8006eb0:	e7de      	b.n	8006e70 <_strtod_l+0x8b8>
 8006eb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006eb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006eba:	f04f 3aff 	mov.w	sl, #4294967295
 8006ebe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ec2:	e7d5      	b.n	8006e70 <_strtod_l+0x8b8>
 8006ec4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ec6:	ea13 0f0a 	tst.w	r3, sl
 8006eca:	e7e1      	b.n	8006e90 <_strtod_l+0x8d8>
 8006ecc:	f7ff fb50 	bl	8006570 <sulp>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ed8:	f7f9 f95e 	bl	8000198 <__aeabi_dsub>
 8006edc:	2200      	movs	r2, #0
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4682      	mov	sl, r0
 8006ee2:	468b      	mov	fp, r1
 8006ee4:	f7f9 fd78 	bl	80009d8 <__aeabi_dcmpeq>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d0c1      	beq.n	8006e70 <_strtod_l+0x8b8>
 8006eec:	e615      	b.n	8006b1a <_strtod_l+0x562>
 8006eee:	4641      	mov	r1, r8
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7ff fac9 	bl	8006488 <__ratio>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006efc:	4606      	mov	r6, r0
 8006efe:	460f      	mov	r7, r1
 8006f00:	f7f9 fd7e 	bl	8000a00 <__aeabi_dcmple>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d06d      	beq.n	8006fe4 <_strtod_l+0xa2c>
 8006f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d178      	bne.n	8007000 <_strtod_l+0xa48>
 8006f0e:	f1ba 0f00 	cmp.w	sl, #0
 8006f12:	d156      	bne.n	8006fc2 <_strtod_l+0xa0a>
 8006f14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d158      	bne.n	8006fd0 <_strtod_l+0xa18>
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4630      	mov	r0, r6
 8006f22:	4639      	mov	r1, r7
 8006f24:	4b5d      	ldr	r3, [pc, #372]	@ (800709c <_strtod_l+0xae4>)
 8006f26:	f7f9 fd61 	bl	80009ec <__aeabi_dcmplt>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d157      	bne.n	8006fde <_strtod_l+0xa26>
 8006f2e:	4630      	mov	r0, r6
 8006f30:	4639      	mov	r1, r7
 8006f32:	2200      	movs	r2, #0
 8006f34:	4b5a      	ldr	r3, [pc, #360]	@ (80070a0 <_strtod_l+0xae8>)
 8006f36:	f7f9 fae7 	bl	8000508 <__aeabi_dmul>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006f42:	9606      	str	r6, [sp, #24]
 8006f44:	9307      	str	r3, [sp, #28]
 8006f46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f4a:	4d52      	ldr	r5, [pc, #328]	@ (8007094 <_strtod_l+0xadc>)
 8006f4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f52:	401d      	ands	r5, r3
 8006f54:	4b53      	ldr	r3, [pc, #332]	@ (80070a4 <_strtod_l+0xaec>)
 8006f56:	429d      	cmp	r5, r3
 8006f58:	f040 80aa 	bne.w	80070b0 <_strtod_l+0xaf8>
 8006f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f5e:	4650      	mov	r0, sl
 8006f60:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006f64:	4659      	mov	r1, fp
 8006f66:	f7ff f9cf 	bl	8006308 <__ulp>
 8006f6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f6e:	f7f9 facb 	bl	8000508 <__aeabi_dmul>
 8006f72:	4652      	mov	r2, sl
 8006f74:	465b      	mov	r3, fp
 8006f76:	f7f9 f911 	bl	800019c <__adddf3>
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4945      	ldr	r1, [pc, #276]	@ (8007094 <_strtod_l+0xadc>)
 8006f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80070a8 <_strtod_l+0xaf0>)
 8006f80:	4019      	ands	r1, r3
 8006f82:	4291      	cmp	r1, r2
 8006f84:	4682      	mov	sl, r0
 8006f86:	d942      	bls.n	800700e <_strtod_l+0xa56>
 8006f88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f8a:	4b43      	ldr	r3, [pc, #268]	@ (8007098 <_strtod_l+0xae0>)
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d103      	bne.n	8006f98 <_strtod_l+0x9e0>
 8006f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f92:	3301      	adds	r3, #1
 8006f94:	f43f ad2b 	beq.w	80069ee <_strtod_l+0x436>
 8006f98:	f04f 3aff 	mov.w	sl, #4294967295
 8006f9c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007098 <_strtod_l+0xae0>
 8006fa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fa2:	9805      	ldr	r0, [sp, #20]
 8006fa4:	f7fe fe7e 	bl	8005ca4 <_Bfree>
 8006fa8:	4649      	mov	r1, r9
 8006faa:	9805      	ldr	r0, [sp, #20]
 8006fac:	f7fe fe7a 	bl	8005ca4 <_Bfree>
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	9805      	ldr	r0, [sp, #20]
 8006fb4:	f7fe fe76 	bl	8005ca4 <_Bfree>
 8006fb8:	4621      	mov	r1, r4
 8006fba:	9805      	ldr	r0, [sp, #20]
 8006fbc:	f7fe fe72 	bl	8005ca4 <_Bfree>
 8006fc0:	e618      	b.n	8006bf4 <_strtod_l+0x63c>
 8006fc2:	f1ba 0f01 	cmp.w	sl, #1
 8006fc6:	d103      	bne.n	8006fd0 <_strtod_l+0xa18>
 8006fc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f43f ada5 	beq.w	8006b1a <_strtod_l+0x562>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4b36      	ldr	r3, [pc, #216]	@ (80070ac <_strtod_l+0xaf4>)
 8006fd4:	2600      	movs	r6, #0
 8006fd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fda:	4f30      	ldr	r7, [pc, #192]	@ (800709c <_strtod_l+0xae4>)
 8006fdc:	e7b3      	b.n	8006f46 <_strtod_l+0x98e>
 8006fde:	2600      	movs	r6, #0
 8006fe0:	4f2f      	ldr	r7, [pc, #188]	@ (80070a0 <_strtod_l+0xae8>)
 8006fe2:	e7ac      	b.n	8006f3e <_strtod_l+0x986>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80070a0 <_strtod_l+0xae8>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	f7f9 fa8c 	bl	8000508 <__aeabi_dmul>
 8006ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460f      	mov	r7, r1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0a1      	beq.n	8006f3e <_strtod_l+0x986>
 8006ffa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006ffe:	e7a2      	b.n	8006f46 <_strtod_l+0x98e>
 8007000:	2200      	movs	r2, #0
 8007002:	4b26      	ldr	r3, [pc, #152]	@ (800709c <_strtod_l+0xae4>)
 8007004:	4616      	mov	r6, r2
 8007006:	461f      	mov	r7, r3
 8007008:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800700c:	e79b      	b.n	8006f46 <_strtod_l+0x98e>
 800700e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007012:	9b08      	ldr	r3, [sp, #32]
 8007014:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1c1      	bne.n	8006fa0 <_strtod_l+0x9e8>
 800701c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007020:	0d1b      	lsrs	r3, r3, #20
 8007022:	051b      	lsls	r3, r3, #20
 8007024:	429d      	cmp	r5, r3
 8007026:	d1bb      	bne.n	8006fa0 <_strtod_l+0x9e8>
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7fa f8a0 	bl	8001170 <__aeabi_d2lz>
 8007030:	f7f9 fa3c 	bl	80004ac <__aeabi_l2d>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4630      	mov	r0, r6
 800703a:	4639      	mov	r1, r7
 800703c:	f7f9 f8ac 	bl	8000198 <__aeabi_dsub>
 8007040:	460b      	mov	r3, r1
 8007042:	4602      	mov	r2, r0
 8007044:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007048:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800704c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800704e:	ea46 060a 	orr.w	r6, r6, sl
 8007052:	431e      	orrs	r6, r3
 8007054:	d069      	beq.n	800712a <_strtod_l+0xb72>
 8007056:	a30a      	add	r3, pc, #40	@ (adr r3, 8007080 <_strtod_l+0xac8>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f7f9 fcc6 	bl	80009ec <__aeabi_dcmplt>
 8007060:	2800      	cmp	r0, #0
 8007062:	f47f accf 	bne.w	8006a04 <_strtod_l+0x44c>
 8007066:	a308      	add	r3, pc, #32	@ (adr r3, 8007088 <_strtod_l+0xad0>)
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007070:	f7f9 fcda 	bl	8000a28 <__aeabi_dcmpgt>
 8007074:	2800      	cmp	r0, #0
 8007076:	d093      	beq.n	8006fa0 <_strtod_l+0x9e8>
 8007078:	e4c4      	b.n	8006a04 <_strtod_l+0x44c>
 800707a:	bf00      	nop
 800707c:	f3af 8000 	nop.w
 8007080:	94a03595 	.word	0x94a03595
 8007084:	3fdfffff 	.word	0x3fdfffff
 8007088:	35afe535 	.word	0x35afe535
 800708c:	3fe00000 	.word	0x3fe00000
 8007090:	000fffff 	.word	0x000fffff
 8007094:	7ff00000 	.word	0x7ff00000
 8007098:	7fefffff 	.word	0x7fefffff
 800709c:	3ff00000 	.word	0x3ff00000
 80070a0:	3fe00000 	.word	0x3fe00000
 80070a4:	7fe00000 	.word	0x7fe00000
 80070a8:	7c9fffff 	.word	0x7c9fffff
 80070ac:	bff00000 	.word	0xbff00000
 80070b0:	9b08      	ldr	r3, [sp, #32]
 80070b2:	b323      	cbz	r3, 80070fe <_strtod_l+0xb46>
 80070b4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80070b8:	d821      	bhi.n	80070fe <_strtod_l+0xb46>
 80070ba:	a327      	add	r3, pc, #156	@ (adr r3, 8007158 <_strtod_l+0xba0>)
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	f7f9 fc9c 	bl	8000a00 <__aeabi_dcmple>
 80070c8:	b1a0      	cbz	r0, 80070f4 <_strtod_l+0xb3c>
 80070ca:	4639      	mov	r1, r7
 80070cc:	4630      	mov	r0, r6
 80070ce:	f7f9 fcf3 	bl	8000ab8 <__aeabi_d2uiz>
 80070d2:	2801      	cmp	r0, #1
 80070d4:	bf38      	it	cc
 80070d6:	2001      	movcc	r0, #1
 80070d8:	f7f9 f99c 	bl	8000414 <__aeabi_ui2d>
 80070dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070de:	4606      	mov	r6, r0
 80070e0:	460f      	mov	r7, r1
 80070e2:	b9fb      	cbnz	r3, 8007124 <_strtod_l+0xb6c>
 80070e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80070e8:	9014      	str	r0, [sp, #80]	@ 0x50
 80070ea:	9315      	str	r3, [sp, #84]	@ 0x54
 80070ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80070f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80070f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070f6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80070fa:	1b5b      	subs	r3, r3, r5
 80070fc:	9311      	str	r3, [sp, #68]	@ 0x44
 80070fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007102:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007106:	f7ff f8ff 	bl	8006308 <__ulp>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4650      	mov	r0, sl
 8007110:	4659      	mov	r1, fp
 8007112:	f7f9 f9f9 	bl	8000508 <__aeabi_dmul>
 8007116:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800711a:	f7f9 f83f 	bl	800019c <__adddf3>
 800711e:	4682      	mov	sl, r0
 8007120:	468b      	mov	fp, r1
 8007122:	e776      	b.n	8007012 <_strtod_l+0xa5a>
 8007124:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007128:	e7e0      	b.n	80070ec <_strtod_l+0xb34>
 800712a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007160 <_strtod_l+0xba8>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f7f9 fc5c 	bl	80009ec <__aeabi_dcmplt>
 8007134:	e79e      	b.n	8007074 <_strtod_l+0xabc>
 8007136:	2300      	movs	r3, #0
 8007138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800713a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800713c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	f7ff ba77 	b.w	8006632 <_strtod_l+0x7a>
 8007144:	2a65      	cmp	r2, #101	@ 0x65
 8007146:	f43f ab6e 	beq.w	8006826 <_strtod_l+0x26e>
 800714a:	2a45      	cmp	r2, #69	@ 0x45
 800714c:	f43f ab6b 	beq.w	8006826 <_strtod_l+0x26e>
 8007150:	2301      	movs	r3, #1
 8007152:	f7ff bba6 	b.w	80068a2 <_strtod_l+0x2ea>
 8007156:	bf00      	nop
 8007158:	ffc00000 	.word	0xffc00000
 800715c:	41dfffff 	.word	0x41dfffff
 8007160:	94a03595 	.word	0x94a03595
 8007164:	3fcfffff 	.word	0x3fcfffff

08007168 <_strtod_r>:
 8007168:	4b01      	ldr	r3, [pc, #4]	@ (8007170 <_strtod_r+0x8>)
 800716a:	f7ff ba25 	b.w	80065b8 <_strtod_l>
 800716e:	bf00      	nop
 8007170:	20000070 	.word	0x20000070

08007174 <_strtol_l.constprop.0>:
 8007174:	2b24      	cmp	r3, #36	@ 0x24
 8007176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800717a:	4686      	mov	lr, r0
 800717c:	4690      	mov	r8, r2
 800717e:	d801      	bhi.n	8007184 <_strtol_l.constprop.0+0x10>
 8007180:	2b01      	cmp	r3, #1
 8007182:	d106      	bne.n	8007192 <_strtol_l.constprop.0+0x1e>
 8007184:	f7fd fdbe 	bl	8004d04 <__errno>
 8007188:	2316      	movs	r3, #22
 800718a:	6003      	str	r3, [r0, #0]
 800718c:	2000      	movs	r0, #0
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	460d      	mov	r5, r1
 8007194:	4833      	ldr	r0, [pc, #204]	@ (8007264 <_strtol_l.constprop.0+0xf0>)
 8007196:	462a      	mov	r2, r5
 8007198:	f815 4b01 	ldrb.w	r4, [r5], #1
 800719c:	5d06      	ldrb	r6, [r0, r4]
 800719e:	f016 0608 	ands.w	r6, r6, #8
 80071a2:	d1f8      	bne.n	8007196 <_strtol_l.constprop.0+0x22>
 80071a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80071a6:	d12d      	bne.n	8007204 <_strtol_l.constprop.0+0x90>
 80071a8:	2601      	movs	r6, #1
 80071aa:	782c      	ldrb	r4, [r5, #0]
 80071ac:	1c95      	adds	r5, r2, #2
 80071ae:	f033 0210 	bics.w	r2, r3, #16
 80071b2:	d109      	bne.n	80071c8 <_strtol_l.constprop.0+0x54>
 80071b4:	2c30      	cmp	r4, #48	@ 0x30
 80071b6:	d12a      	bne.n	800720e <_strtol_l.constprop.0+0x9a>
 80071b8:	782a      	ldrb	r2, [r5, #0]
 80071ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80071be:	2a58      	cmp	r2, #88	@ 0x58
 80071c0:	d125      	bne.n	800720e <_strtol_l.constprop.0+0x9a>
 80071c2:	2310      	movs	r3, #16
 80071c4:	786c      	ldrb	r4, [r5, #1]
 80071c6:	3502      	adds	r5, #2
 80071c8:	2200      	movs	r2, #0
 80071ca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80071ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80071d2:	fbbc f9f3 	udiv	r9, ip, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80071dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80071e0:	2f09      	cmp	r7, #9
 80071e2:	d81b      	bhi.n	800721c <_strtol_l.constprop.0+0xa8>
 80071e4:	463c      	mov	r4, r7
 80071e6:	42a3      	cmp	r3, r4
 80071e8:	dd27      	ble.n	800723a <_strtol_l.constprop.0+0xc6>
 80071ea:	1c57      	adds	r7, r2, #1
 80071ec:	d007      	beq.n	80071fe <_strtol_l.constprop.0+0x8a>
 80071ee:	4581      	cmp	r9, r0
 80071f0:	d320      	bcc.n	8007234 <_strtol_l.constprop.0+0xc0>
 80071f2:	d101      	bne.n	80071f8 <_strtol_l.constprop.0+0x84>
 80071f4:	45a2      	cmp	sl, r4
 80071f6:	db1d      	blt.n	8007234 <_strtol_l.constprop.0+0xc0>
 80071f8:	2201      	movs	r2, #1
 80071fa:	fb00 4003 	mla	r0, r0, r3, r4
 80071fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007202:	e7eb      	b.n	80071dc <_strtol_l.constprop.0+0x68>
 8007204:	2c2b      	cmp	r4, #43	@ 0x2b
 8007206:	bf04      	itt	eq
 8007208:	782c      	ldrbeq	r4, [r5, #0]
 800720a:	1c95      	addeq	r5, r2, #2
 800720c:	e7cf      	b.n	80071ae <_strtol_l.constprop.0+0x3a>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1da      	bne.n	80071c8 <_strtol_l.constprop.0+0x54>
 8007212:	2c30      	cmp	r4, #48	@ 0x30
 8007214:	bf0c      	ite	eq
 8007216:	2308      	moveq	r3, #8
 8007218:	230a      	movne	r3, #10
 800721a:	e7d5      	b.n	80071c8 <_strtol_l.constprop.0+0x54>
 800721c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007220:	2f19      	cmp	r7, #25
 8007222:	d801      	bhi.n	8007228 <_strtol_l.constprop.0+0xb4>
 8007224:	3c37      	subs	r4, #55	@ 0x37
 8007226:	e7de      	b.n	80071e6 <_strtol_l.constprop.0+0x72>
 8007228:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800722c:	2f19      	cmp	r7, #25
 800722e:	d804      	bhi.n	800723a <_strtol_l.constprop.0+0xc6>
 8007230:	3c57      	subs	r4, #87	@ 0x57
 8007232:	e7d8      	b.n	80071e6 <_strtol_l.constprop.0+0x72>
 8007234:	f04f 32ff 	mov.w	r2, #4294967295
 8007238:	e7e1      	b.n	80071fe <_strtol_l.constprop.0+0x8a>
 800723a:	1c53      	adds	r3, r2, #1
 800723c:	d108      	bne.n	8007250 <_strtol_l.constprop.0+0xdc>
 800723e:	2322      	movs	r3, #34	@ 0x22
 8007240:	4660      	mov	r0, ip
 8007242:	f8ce 3000 	str.w	r3, [lr]
 8007246:	f1b8 0f00 	cmp.w	r8, #0
 800724a:	d0a0      	beq.n	800718e <_strtol_l.constprop.0+0x1a>
 800724c:	1e69      	subs	r1, r5, #1
 800724e:	e006      	b.n	800725e <_strtol_l.constprop.0+0xea>
 8007250:	b106      	cbz	r6, 8007254 <_strtol_l.constprop.0+0xe0>
 8007252:	4240      	negs	r0, r0
 8007254:	f1b8 0f00 	cmp.w	r8, #0
 8007258:	d099      	beq.n	800718e <_strtol_l.constprop.0+0x1a>
 800725a:	2a00      	cmp	r2, #0
 800725c:	d1f6      	bne.n	800724c <_strtol_l.constprop.0+0xd8>
 800725e:	f8c8 1000 	str.w	r1, [r8]
 8007262:	e794      	b.n	800718e <_strtol_l.constprop.0+0x1a>
 8007264:	08009161 	.word	0x08009161

08007268 <_strtol_r>:
 8007268:	f7ff bf84 	b.w	8007174 <_strtol_l.constprop.0>

0800726c <__ssputs_r>:
 800726c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	461f      	mov	r7, r3
 8007272:	688e      	ldr	r6, [r1, #8]
 8007274:	4682      	mov	sl, r0
 8007276:	42be      	cmp	r6, r7
 8007278:	460c      	mov	r4, r1
 800727a:	4690      	mov	r8, r2
 800727c:	680b      	ldr	r3, [r1, #0]
 800727e:	d82d      	bhi.n	80072dc <__ssputs_r+0x70>
 8007280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007284:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007288:	d026      	beq.n	80072d8 <__ssputs_r+0x6c>
 800728a:	6965      	ldr	r5, [r4, #20]
 800728c:	6909      	ldr	r1, [r1, #16]
 800728e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007292:	eba3 0901 	sub.w	r9, r3, r1
 8007296:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800729a:	1c7b      	adds	r3, r7, #1
 800729c:	444b      	add	r3, r9
 800729e:	106d      	asrs	r5, r5, #1
 80072a0:	429d      	cmp	r5, r3
 80072a2:	bf38      	it	cc
 80072a4:	461d      	movcc	r5, r3
 80072a6:	0553      	lsls	r3, r2, #21
 80072a8:	d527      	bpl.n	80072fa <__ssputs_r+0x8e>
 80072aa:	4629      	mov	r1, r5
 80072ac:	f7fe fc2e 	bl	8005b0c <_malloc_r>
 80072b0:	4606      	mov	r6, r0
 80072b2:	b360      	cbz	r0, 800730e <__ssputs_r+0xa2>
 80072b4:	464a      	mov	r2, r9
 80072b6:	6921      	ldr	r1, [r4, #16]
 80072b8:	f001 f8da 	bl	8008470 <memcpy>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	6126      	str	r6, [r4, #16]
 80072ca:	444e      	add	r6, r9
 80072cc:	6026      	str	r6, [r4, #0]
 80072ce:	463e      	mov	r6, r7
 80072d0:	6165      	str	r5, [r4, #20]
 80072d2:	eba5 0509 	sub.w	r5, r5, r9
 80072d6:	60a5      	str	r5, [r4, #8]
 80072d8:	42be      	cmp	r6, r7
 80072da:	d900      	bls.n	80072de <__ssputs_r+0x72>
 80072dc:	463e      	mov	r6, r7
 80072de:	4632      	mov	r2, r6
 80072e0:	4641      	mov	r1, r8
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	f001 f866 	bl	80083b4 <memmove>
 80072e8:	2000      	movs	r0, #0
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	1b9b      	subs	r3, r3, r6
 80072ee:	60a3      	str	r3, [r4, #8]
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	4433      	add	r3, r6
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fa:	462a      	mov	r2, r5
 80072fc:	f001 fc49 	bl	8008b92 <_realloc_r>
 8007300:	4606      	mov	r6, r0
 8007302:	2800      	cmp	r0, #0
 8007304:	d1e0      	bne.n	80072c8 <__ssputs_r+0x5c>
 8007306:	4650      	mov	r0, sl
 8007308:	6921      	ldr	r1, [r4, #16]
 800730a:	f7fe fb8d 	bl	8005a28 <_free_r>
 800730e:	230c      	movs	r3, #12
 8007310:	f8ca 3000 	str.w	r3, [sl]
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f04f 30ff 	mov.w	r0, #4294967295
 800731a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	e7e9      	b.n	80072f6 <__ssputs_r+0x8a>
	...

08007324 <_svfiprintf_r>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	4698      	mov	r8, r3
 800732a:	898b      	ldrh	r3, [r1, #12]
 800732c:	4607      	mov	r7, r0
 800732e:	061b      	lsls	r3, r3, #24
 8007330:	460d      	mov	r5, r1
 8007332:	4614      	mov	r4, r2
 8007334:	b09d      	sub	sp, #116	@ 0x74
 8007336:	d510      	bpl.n	800735a <_svfiprintf_r+0x36>
 8007338:	690b      	ldr	r3, [r1, #16]
 800733a:	b973      	cbnz	r3, 800735a <_svfiprintf_r+0x36>
 800733c:	2140      	movs	r1, #64	@ 0x40
 800733e:	f7fe fbe5 	bl	8005b0c <_malloc_r>
 8007342:	6028      	str	r0, [r5, #0]
 8007344:	6128      	str	r0, [r5, #16]
 8007346:	b930      	cbnz	r0, 8007356 <_svfiprintf_r+0x32>
 8007348:	230c      	movs	r3, #12
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	b01d      	add	sp, #116	@ 0x74
 8007352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007356:	2340      	movs	r3, #64	@ 0x40
 8007358:	616b      	str	r3, [r5, #20]
 800735a:	2300      	movs	r3, #0
 800735c:	9309      	str	r3, [sp, #36]	@ 0x24
 800735e:	2320      	movs	r3, #32
 8007360:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007364:	2330      	movs	r3, #48	@ 0x30
 8007366:	f04f 0901 	mov.w	r9, #1
 800736a:	f8cd 800c 	str.w	r8, [sp, #12]
 800736e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007508 <_svfiprintf_r+0x1e4>
 8007372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007376:	4623      	mov	r3, r4
 8007378:	469a      	mov	sl, r3
 800737a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800737e:	b10a      	cbz	r2, 8007384 <_svfiprintf_r+0x60>
 8007380:	2a25      	cmp	r2, #37	@ 0x25
 8007382:	d1f9      	bne.n	8007378 <_svfiprintf_r+0x54>
 8007384:	ebba 0b04 	subs.w	fp, sl, r4
 8007388:	d00b      	beq.n	80073a2 <_svfiprintf_r+0x7e>
 800738a:	465b      	mov	r3, fp
 800738c:	4622      	mov	r2, r4
 800738e:	4629      	mov	r1, r5
 8007390:	4638      	mov	r0, r7
 8007392:	f7ff ff6b 	bl	800726c <__ssputs_r>
 8007396:	3001      	adds	r0, #1
 8007398:	f000 80a7 	beq.w	80074ea <_svfiprintf_r+0x1c6>
 800739c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800739e:	445a      	add	r2, fp
 80073a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073a2:	f89a 3000 	ldrb.w	r3, [sl]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 809f 	beq.w	80074ea <_svfiprintf_r+0x1c6>
 80073ac:	2300      	movs	r3, #0
 80073ae:	f04f 32ff 	mov.w	r2, #4294967295
 80073b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b6:	f10a 0a01 	add.w	sl, sl, #1
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	9307      	str	r3, [sp, #28]
 80073be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80073c4:	4654      	mov	r4, sl
 80073c6:	2205      	movs	r2, #5
 80073c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073cc:	484e      	ldr	r0, [pc, #312]	@ (8007508 <_svfiprintf_r+0x1e4>)
 80073ce:	f7fd fcc6 	bl	8004d5e <memchr>
 80073d2:	9a04      	ldr	r2, [sp, #16]
 80073d4:	b9d8      	cbnz	r0, 800740e <_svfiprintf_r+0xea>
 80073d6:	06d0      	lsls	r0, r2, #27
 80073d8:	bf44      	itt	mi
 80073da:	2320      	movmi	r3, #32
 80073dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e0:	0711      	lsls	r1, r2, #28
 80073e2:	bf44      	itt	mi
 80073e4:	232b      	movmi	r3, #43	@ 0x2b
 80073e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ea:	f89a 3000 	ldrb.w	r3, [sl]
 80073ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f0:	d015      	beq.n	800741e <_svfiprintf_r+0xfa>
 80073f2:	4654      	mov	r4, sl
 80073f4:	2000      	movs	r0, #0
 80073f6:	f04f 0c0a 	mov.w	ip, #10
 80073fa:	9a07      	ldr	r2, [sp, #28]
 80073fc:	4621      	mov	r1, r4
 80073fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007402:	3b30      	subs	r3, #48	@ 0x30
 8007404:	2b09      	cmp	r3, #9
 8007406:	d94b      	bls.n	80074a0 <_svfiprintf_r+0x17c>
 8007408:	b1b0      	cbz	r0, 8007438 <_svfiprintf_r+0x114>
 800740a:	9207      	str	r2, [sp, #28]
 800740c:	e014      	b.n	8007438 <_svfiprintf_r+0x114>
 800740e:	eba0 0308 	sub.w	r3, r0, r8
 8007412:	fa09 f303 	lsl.w	r3, r9, r3
 8007416:	4313      	orrs	r3, r2
 8007418:	46a2      	mov	sl, r4
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	e7d2      	b.n	80073c4 <_svfiprintf_r+0xa0>
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	1d19      	adds	r1, r3, #4
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	9103      	str	r1, [sp, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	bfbb      	ittet	lt
 800742a:	425b      	neglt	r3, r3
 800742c:	f042 0202 	orrlt.w	r2, r2, #2
 8007430:	9307      	strge	r3, [sp, #28]
 8007432:	9307      	strlt	r3, [sp, #28]
 8007434:	bfb8      	it	lt
 8007436:	9204      	strlt	r2, [sp, #16]
 8007438:	7823      	ldrb	r3, [r4, #0]
 800743a:	2b2e      	cmp	r3, #46	@ 0x2e
 800743c:	d10a      	bne.n	8007454 <_svfiprintf_r+0x130>
 800743e:	7863      	ldrb	r3, [r4, #1]
 8007440:	2b2a      	cmp	r3, #42	@ 0x2a
 8007442:	d132      	bne.n	80074aa <_svfiprintf_r+0x186>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	3402      	adds	r4, #2
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9203      	str	r2, [sp, #12]
 800744e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800750c <_svfiprintf_r+0x1e8>
 8007458:	2203      	movs	r2, #3
 800745a:	4650      	mov	r0, sl
 800745c:	7821      	ldrb	r1, [r4, #0]
 800745e:	f7fd fc7e 	bl	8004d5e <memchr>
 8007462:	b138      	cbz	r0, 8007474 <_svfiprintf_r+0x150>
 8007464:	2240      	movs	r2, #64	@ 0x40
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	eba0 000a 	sub.w	r0, r0, sl
 800746c:	4082      	lsls	r2, r0
 800746e:	4313      	orrs	r3, r2
 8007470:	3401      	adds	r4, #1
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007478:	2206      	movs	r2, #6
 800747a:	4825      	ldr	r0, [pc, #148]	@ (8007510 <_svfiprintf_r+0x1ec>)
 800747c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007480:	f7fd fc6d 	bl	8004d5e <memchr>
 8007484:	2800      	cmp	r0, #0
 8007486:	d036      	beq.n	80074f6 <_svfiprintf_r+0x1d2>
 8007488:	4b22      	ldr	r3, [pc, #136]	@ (8007514 <_svfiprintf_r+0x1f0>)
 800748a:	bb1b      	cbnz	r3, 80074d4 <_svfiprintf_r+0x1b0>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	3307      	adds	r3, #7
 8007490:	f023 0307 	bic.w	r3, r3, #7
 8007494:	3308      	adds	r3, #8
 8007496:	9303      	str	r3, [sp, #12]
 8007498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749a:	4433      	add	r3, r6
 800749c:	9309      	str	r3, [sp, #36]	@ 0x24
 800749e:	e76a      	b.n	8007376 <_svfiprintf_r+0x52>
 80074a0:	460c      	mov	r4, r1
 80074a2:	2001      	movs	r0, #1
 80074a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a8:	e7a8      	b.n	80073fc <_svfiprintf_r+0xd8>
 80074aa:	2300      	movs	r3, #0
 80074ac:	f04f 0c0a 	mov.w	ip, #10
 80074b0:	4619      	mov	r1, r3
 80074b2:	3401      	adds	r4, #1
 80074b4:	9305      	str	r3, [sp, #20]
 80074b6:	4620      	mov	r0, r4
 80074b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074bc:	3a30      	subs	r2, #48	@ 0x30
 80074be:	2a09      	cmp	r2, #9
 80074c0:	d903      	bls.n	80074ca <_svfiprintf_r+0x1a6>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0c6      	beq.n	8007454 <_svfiprintf_r+0x130>
 80074c6:	9105      	str	r1, [sp, #20]
 80074c8:	e7c4      	b.n	8007454 <_svfiprintf_r+0x130>
 80074ca:	4604      	mov	r4, r0
 80074cc:	2301      	movs	r3, #1
 80074ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d2:	e7f0      	b.n	80074b6 <_svfiprintf_r+0x192>
 80074d4:	ab03      	add	r3, sp, #12
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	462a      	mov	r2, r5
 80074da:	4638      	mov	r0, r7
 80074dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007518 <_svfiprintf_r+0x1f4>)
 80074de:	a904      	add	r1, sp, #16
 80074e0:	f7fc fbf2 	bl	8003cc8 <_printf_float>
 80074e4:	1c42      	adds	r2, r0, #1
 80074e6:	4606      	mov	r6, r0
 80074e8:	d1d6      	bne.n	8007498 <_svfiprintf_r+0x174>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	065b      	lsls	r3, r3, #25
 80074ee:	f53f af2d 	bmi.w	800734c <_svfiprintf_r+0x28>
 80074f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f4:	e72c      	b.n	8007350 <_svfiprintf_r+0x2c>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4638      	mov	r0, r7
 80074fe:	4b06      	ldr	r3, [pc, #24]	@ (8007518 <_svfiprintf_r+0x1f4>)
 8007500:	a904      	add	r1, sp, #16
 8007502:	f7fc fe7f 	bl	8004204 <_printf_i>
 8007506:	e7ed      	b.n	80074e4 <_svfiprintf_r+0x1c0>
 8007508:	08009261 	.word	0x08009261
 800750c:	08009267 	.word	0x08009267
 8007510:	0800926b 	.word	0x0800926b
 8007514:	08003cc9 	.word	0x08003cc9
 8007518:	0800726d 	.word	0x0800726d

0800751c <__sfputc_r>:
 800751c:	6893      	ldr	r3, [r2, #8]
 800751e:	b410      	push	{r4}
 8007520:	3b01      	subs	r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	6093      	str	r3, [r2, #8]
 8007526:	da07      	bge.n	8007538 <__sfputc_r+0x1c>
 8007528:	6994      	ldr	r4, [r2, #24]
 800752a:	42a3      	cmp	r3, r4
 800752c:	db01      	blt.n	8007532 <__sfputc_r+0x16>
 800752e:	290a      	cmp	r1, #10
 8007530:	d102      	bne.n	8007538 <__sfputc_r+0x1c>
 8007532:	bc10      	pop	{r4}
 8007534:	f000 beaa 	b.w	800828c <__swbuf_r>
 8007538:	6813      	ldr	r3, [r2, #0]
 800753a:	1c58      	adds	r0, r3, #1
 800753c:	6010      	str	r0, [r2, #0]
 800753e:	7019      	strb	r1, [r3, #0]
 8007540:	4608      	mov	r0, r1
 8007542:	bc10      	pop	{r4}
 8007544:	4770      	bx	lr

08007546 <__sfputs_r>:
 8007546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007548:	4606      	mov	r6, r0
 800754a:	460f      	mov	r7, r1
 800754c:	4614      	mov	r4, r2
 800754e:	18d5      	adds	r5, r2, r3
 8007550:	42ac      	cmp	r4, r5
 8007552:	d101      	bne.n	8007558 <__sfputs_r+0x12>
 8007554:	2000      	movs	r0, #0
 8007556:	e007      	b.n	8007568 <__sfputs_r+0x22>
 8007558:	463a      	mov	r2, r7
 800755a:	4630      	mov	r0, r6
 800755c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007560:	f7ff ffdc 	bl	800751c <__sfputc_r>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d1f3      	bne.n	8007550 <__sfputs_r+0xa>
 8007568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800756c <_vfiprintf_r>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	460d      	mov	r5, r1
 8007572:	4614      	mov	r4, r2
 8007574:	4698      	mov	r8, r3
 8007576:	4606      	mov	r6, r0
 8007578:	b09d      	sub	sp, #116	@ 0x74
 800757a:	b118      	cbz	r0, 8007584 <_vfiprintf_r+0x18>
 800757c:	6a03      	ldr	r3, [r0, #32]
 800757e:	b90b      	cbnz	r3, 8007584 <_vfiprintf_r+0x18>
 8007580:	f7fd f9fc 	bl	800497c <__sinit>
 8007584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007586:	07d9      	lsls	r1, r3, #31
 8007588:	d405      	bmi.n	8007596 <_vfiprintf_r+0x2a>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	059a      	lsls	r2, r3, #22
 800758e:	d402      	bmi.n	8007596 <_vfiprintf_r+0x2a>
 8007590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007592:	f7fd fbe2 	bl	8004d5a <__retarget_lock_acquire_recursive>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	071b      	lsls	r3, r3, #28
 800759a:	d501      	bpl.n	80075a0 <_vfiprintf_r+0x34>
 800759c:	692b      	ldr	r3, [r5, #16]
 800759e:	b99b      	cbnz	r3, 80075c8 <_vfiprintf_r+0x5c>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 feb0 	bl	8008308 <__swsetup_r>
 80075a8:	b170      	cbz	r0, 80075c8 <_vfiprintf_r+0x5c>
 80075aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ac:	07dc      	lsls	r4, r3, #31
 80075ae:	d504      	bpl.n	80075ba <_vfiprintf_r+0x4e>
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	b01d      	add	sp, #116	@ 0x74
 80075b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	0598      	lsls	r0, r3, #22
 80075be:	d4f7      	bmi.n	80075b0 <_vfiprintf_r+0x44>
 80075c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075c2:	f7fd fbcb 	bl	8004d5c <__retarget_lock_release_recursive>
 80075c6:	e7f3      	b.n	80075b0 <_vfiprintf_r+0x44>
 80075c8:	2300      	movs	r3, #0
 80075ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80075cc:	2320      	movs	r3, #32
 80075ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075d2:	2330      	movs	r3, #48	@ 0x30
 80075d4:	f04f 0901 	mov.w	r9, #1
 80075d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007788 <_vfiprintf_r+0x21c>
 80075e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075e4:	4623      	mov	r3, r4
 80075e6:	469a      	mov	sl, r3
 80075e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ec:	b10a      	cbz	r2, 80075f2 <_vfiprintf_r+0x86>
 80075ee:	2a25      	cmp	r2, #37	@ 0x25
 80075f0:	d1f9      	bne.n	80075e6 <_vfiprintf_r+0x7a>
 80075f2:	ebba 0b04 	subs.w	fp, sl, r4
 80075f6:	d00b      	beq.n	8007610 <_vfiprintf_r+0xa4>
 80075f8:	465b      	mov	r3, fp
 80075fa:	4622      	mov	r2, r4
 80075fc:	4629      	mov	r1, r5
 80075fe:	4630      	mov	r0, r6
 8007600:	f7ff ffa1 	bl	8007546 <__sfputs_r>
 8007604:	3001      	adds	r0, #1
 8007606:	f000 80a7 	beq.w	8007758 <_vfiprintf_r+0x1ec>
 800760a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800760c:	445a      	add	r2, fp
 800760e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007610:	f89a 3000 	ldrb.w	r3, [sl]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 809f 	beq.w	8007758 <_vfiprintf_r+0x1ec>
 800761a:	2300      	movs	r3, #0
 800761c:	f04f 32ff 	mov.w	r2, #4294967295
 8007620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007624:	f10a 0a01 	add.w	sl, sl, #1
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	9307      	str	r3, [sp, #28]
 800762c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007630:	931a      	str	r3, [sp, #104]	@ 0x68
 8007632:	4654      	mov	r4, sl
 8007634:	2205      	movs	r2, #5
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	4853      	ldr	r0, [pc, #332]	@ (8007788 <_vfiprintf_r+0x21c>)
 800763c:	f7fd fb8f 	bl	8004d5e <memchr>
 8007640:	9a04      	ldr	r2, [sp, #16]
 8007642:	b9d8      	cbnz	r0, 800767c <_vfiprintf_r+0x110>
 8007644:	06d1      	lsls	r1, r2, #27
 8007646:	bf44      	itt	mi
 8007648:	2320      	movmi	r3, #32
 800764a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800764e:	0713      	lsls	r3, r2, #28
 8007650:	bf44      	itt	mi
 8007652:	232b      	movmi	r3, #43	@ 0x2b
 8007654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007658:	f89a 3000 	ldrb.w	r3, [sl]
 800765c:	2b2a      	cmp	r3, #42	@ 0x2a
 800765e:	d015      	beq.n	800768c <_vfiprintf_r+0x120>
 8007660:	4654      	mov	r4, sl
 8007662:	2000      	movs	r0, #0
 8007664:	f04f 0c0a 	mov.w	ip, #10
 8007668:	9a07      	ldr	r2, [sp, #28]
 800766a:	4621      	mov	r1, r4
 800766c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007670:	3b30      	subs	r3, #48	@ 0x30
 8007672:	2b09      	cmp	r3, #9
 8007674:	d94b      	bls.n	800770e <_vfiprintf_r+0x1a2>
 8007676:	b1b0      	cbz	r0, 80076a6 <_vfiprintf_r+0x13a>
 8007678:	9207      	str	r2, [sp, #28]
 800767a:	e014      	b.n	80076a6 <_vfiprintf_r+0x13a>
 800767c:	eba0 0308 	sub.w	r3, r0, r8
 8007680:	fa09 f303 	lsl.w	r3, r9, r3
 8007684:	4313      	orrs	r3, r2
 8007686:	46a2      	mov	sl, r4
 8007688:	9304      	str	r3, [sp, #16]
 800768a:	e7d2      	b.n	8007632 <_vfiprintf_r+0xc6>
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	1d19      	adds	r1, r3, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	9103      	str	r1, [sp, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfbb      	ittet	lt
 8007698:	425b      	neglt	r3, r3
 800769a:	f042 0202 	orrlt.w	r2, r2, #2
 800769e:	9307      	strge	r3, [sp, #28]
 80076a0:	9307      	strlt	r3, [sp, #28]
 80076a2:	bfb8      	it	lt
 80076a4:	9204      	strlt	r2, [sp, #16]
 80076a6:	7823      	ldrb	r3, [r4, #0]
 80076a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80076aa:	d10a      	bne.n	80076c2 <_vfiprintf_r+0x156>
 80076ac:	7863      	ldrb	r3, [r4, #1]
 80076ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80076b0:	d132      	bne.n	8007718 <_vfiprintf_r+0x1ac>
 80076b2:	9b03      	ldr	r3, [sp, #12]
 80076b4:	3402      	adds	r4, #2
 80076b6:	1d1a      	adds	r2, r3, #4
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	9203      	str	r2, [sp, #12]
 80076bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800778c <_vfiprintf_r+0x220>
 80076c6:	2203      	movs	r2, #3
 80076c8:	4650      	mov	r0, sl
 80076ca:	7821      	ldrb	r1, [r4, #0]
 80076cc:	f7fd fb47 	bl	8004d5e <memchr>
 80076d0:	b138      	cbz	r0, 80076e2 <_vfiprintf_r+0x176>
 80076d2:	2240      	movs	r2, #64	@ 0x40
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	eba0 000a 	sub.w	r0, r0, sl
 80076da:	4082      	lsls	r2, r0
 80076dc:	4313      	orrs	r3, r2
 80076de:	3401      	adds	r4, #1
 80076e0:	9304      	str	r3, [sp, #16]
 80076e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e6:	2206      	movs	r2, #6
 80076e8:	4829      	ldr	r0, [pc, #164]	@ (8007790 <_vfiprintf_r+0x224>)
 80076ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076ee:	f7fd fb36 	bl	8004d5e <memchr>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d03f      	beq.n	8007776 <_vfiprintf_r+0x20a>
 80076f6:	4b27      	ldr	r3, [pc, #156]	@ (8007794 <_vfiprintf_r+0x228>)
 80076f8:	bb1b      	cbnz	r3, 8007742 <_vfiprintf_r+0x1d6>
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	3307      	adds	r3, #7
 80076fe:	f023 0307 	bic.w	r3, r3, #7
 8007702:	3308      	adds	r3, #8
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007708:	443b      	add	r3, r7
 800770a:	9309      	str	r3, [sp, #36]	@ 0x24
 800770c:	e76a      	b.n	80075e4 <_vfiprintf_r+0x78>
 800770e:	460c      	mov	r4, r1
 8007710:	2001      	movs	r0, #1
 8007712:	fb0c 3202 	mla	r2, ip, r2, r3
 8007716:	e7a8      	b.n	800766a <_vfiprintf_r+0xfe>
 8007718:	2300      	movs	r3, #0
 800771a:	f04f 0c0a 	mov.w	ip, #10
 800771e:	4619      	mov	r1, r3
 8007720:	3401      	adds	r4, #1
 8007722:	9305      	str	r3, [sp, #20]
 8007724:	4620      	mov	r0, r4
 8007726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800772a:	3a30      	subs	r2, #48	@ 0x30
 800772c:	2a09      	cmp	r2, #9
 800772e:	d903      	bls.n	8007738 <_vfiprintf_r+0x1cc>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0c6      	beq.n	80076c2 <_vfiprintf_r+0x156>
 8007734:	9105      	str	r1, [sp, #20]
 8007736:	e7c4      	b.n	80076c2 <_vfiprintf_r+0x156>
 8007738:	4604      	mov	r4, r0
 800773a:	2301      	movs	r3, #1
 800773c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007740:	e7f0      	b.n	8007724 <_vfiprintf_r+0x1b8>
 8007742:	ab03      	add	r3, sp, #12
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	462a      	mov	r2, r5
 8007748:	4630      	mov	r0, r6
 800774a:	4b13      	ldr	r3, [pc, #76]	@ (8007798 <_vfiprintf_r+0x22c>)
 800774c:	a904      	add	r1, sp, #16
 800774e:	f7fc fabb 	bl	8003cc8 <_printf_float>
 8007752:	4607      	mov	r7, r0
 8007754:	1c78      	adds	r0, r7, #1
 8007756:	d1d6      	bne.n	8007706 <_vfiprintf_r+0x19a>
 8007758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800775a:	07d9      	lsls	r1, r3, #31
 800775c:	d405      	bmi.n	800776a <_vfiprintf_r+0x1fe>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	059a      	lsls	r2, r3, #22
 8007762:	d402      	bmi.n	800776a <_vfiprintf_r+0x1fe>
 8007764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007766:	f7fd faf9 	bl	8004d5c <__retarget_lock_release_recursive>
 800776a:	89ab      	ldrh	r3, [r5, #12]
 800776c:	065b      	lsls	r3, r3, #25
 800776e:	f53f af1f 	bmi.w	80075b0 <_vfiprintf_r+0x44>
 8007772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007774:	e71e      	b.n	80075b4 <_vfiprintf_r+0x48>
 8007776:	ab03      	add	r3, sp, #12
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	462a      	mov	r2, r5
 800777c:	4630      	mov	r0, r6
 800777e:	4b06      	ldr	r3, [pc, #24]	@ (8007798 <_vfiprintf_r+0x22c>)
 8007780:	a904      	add	r1, sp, #16
 8007782:	f7fc fd3f 	bl	8004204 <_printf_i>
 8007786:	e7e4      	b.n	8007752 <_vfiprintf_r+0x1e6>
 8007788:	08009261 	.word	0x08009261
 800778c:	08009267 	.word	0x08009267
 8007790:	0800926b 	.word	0x0800926b
 8007794:	08003cc9 	.word	0x08003cc9
 8007798:	08007547 	.word	0x08007547

0800779c <__svfiscanf_r>:
 800779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	461d      	mov	r5, r3
 80077a2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80077a4:	4606      	mov	r6, r0
 80077a6:	07df      	lsls	r7, r3, #31
 80077a8:	460c      	mov	r4, r1
 80077aa:	4691      	mov	r9, r2
 80077ac:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80077b0:	d405      	bmi.n	80077be <__svfiscanf_r+0x22>
 80077b2:	898b      	ldrh	r3, [r1, #12]
 80077b4:	0598      	lsls	r0, r3, #22
 80077b6:	d402      	bmi.n	80077be <__svfiscanf_r+0x22>
 80077b8:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80077ba:	f7fd face 	bl	8004d5a <__retarget_lock_acquire_recursive>
 80077be:	2300      	movs	r3, #0
 80077c0:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 80077c4:	4ba7      	ldr	r3, [pc, #668]	@ (8007a64 <__svfiscanf_r+0x2c8>)
 80077c6:	f10d 0804 	add.w	r8, sp, #4
 80077ca:	93a0      	str	r3, [sp, #640]	@ 0x280
 80077cc:	4ba6      	ldr	r3, [pc, #664]	@ (8007a68 <__svfiscanf_r+0x2cc>)
 80077ce:	4fa7      	ldr	r7, [pc, #668]	@ (8007a6c <__svfiscanf_r+0x2d0>)
 80077d0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80077d4:	93a1      	str	r3, [sp, #644]	@ 0x284
 80077d6:	9500      	str	r5, [sp, #0]
 80077d8:	f899 3000 	ldrb.w	r3, [r9]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 816c 	beq.w	8007aba <__svfiscanf_r+0x31e>
 80077e2:	5cf9      	ldrb	r1, [r7, r3]
 80077e4:	f109 0501 	add.w	r5, r9, #1
 80077e8:	f011 0108 	ands.w	r1, r1, #8
 80077ec:	d019      	beq.n	8007822 <__svfiscanf_r+0x86>
 80077ee:	6863      	ldr	r3, [r4, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dd0f      	ble.n	8007814 <__svfiscanf_r+0x78>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	5cba      	ldrb	r2, [r7, r2]
 80077fa:	0711      	lsls	r1, r2, #28
 80077fc:	d401      	bmi.n	8007802 <__svfiscanf_r+0x66>
 80077fe:	46a9      	mov	r9, r5
 8007800:	e7ea      	b.n	80077d8 <__svfiscanf_r+0x3c>
 8007802:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007804:	3301      	adds	r3, #1
 8007806:	3201      	adds	r2, #1
 8007808:	9245      	str	r2, [sp, #276]	@ 0x114
 800780a:	6862      	ldr	r2, [r4, #4]
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	3a01      	subs	r2, #1
 8007810:	6062      	str	r2, [r4, #4]
 8007812:	e7ec      	b.n	80077ee <__svfiscanf_r+0x52>
 8007814:	4621      	mov	r1, r4
 8007816:	4630      	mov	r0, r6
 8007818:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800781a:	4798      	blx	r3
 800781c:	2800      	cmp	r0, #0
 800781e:	d0e9      	beq.n	80077f4 <__svfiscanf_r+0x58>
 8007820:	e7ed      	b.n	80077fe <__svfiscanf_r+0x62>
 8007822:	2b25      	cmp	r3, #37	@ 0x25
 8007824:	d012      	beq.n	800784c <__svfiscanf_r+0xb0>
 8007826:	4699      	mov	r9, r3
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f340 8095 	ble.w	800795a <__svfiscanf_r+0x1be>
 8007830:	6822      	ldr	r2, [r4, #0]
 8007832:	7813      	ldrb	r3, [r2, #0]
 8007834:	454b      	cmp	r3, r9
 8007836:	f040 8140 	bne.w	8007aba <__svfiscanf_r+0x31e>
 800783a:	6863      	ldr	r3, [r4, #4]
 800783c:	3201      	adds	r2, #1
 800783e:	3b01      	subs	r3, #1
 8007840:	6063      	str	r3, [r4, #4]
 8007842:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007844:	6022      	str	r2, [r4, #0]
 8007846:	3301      	adds	r3, #1
 8007848:	9345      	str	r3, [sp, #276]	@ 0x114
 800784a:	e7d8      	b.n	80077fe <__svfiscanf_r+0x62>
 800784c:	9141      	str	r1, [sp, #260]	@ 0x104
 800784e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007850:	f899 3001 	ldrb.w	r3, [r9, #1]
 8007854:	220a      	movs	r2, #10
 8007856:	2b2a      	cmp	r3, #42	@ 0x2a
 8007858:	bf02      	ittt	eq
 800785a:	2310      	moveq	r3, #16
 800785c:	f109 0502 	addeq.w	r5, r9, #2
 8007860:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007862:	46a9      	mov	r9, r5
 8007864:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007868:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800786c:	2b09      	cmp	r3, #9
 800786e:	d91f      	bls.n	80078b0 <__svfiscanf_r+0x114>
 8007870:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8007a70 <__svfiscanf_r+0x2d4>
 8007874:	2203      	movs	r2, #3
 8007876:	4650      	mov	r0, sl
 8007878:	f7fd fa71 	bl	8004d5e <memchr>
 800787c:	b138      	cbz	r0, 800788e <__svfiscanf_r+0xf2>
 800787e:	2301      	movs	r3, #1
 8007880:	464d      	mov	r5, r9
 8007882:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007884:	eba0 000a 	sub.w	r0, r0, sl
 8007888:	4083      	lsls	r3, r0
 800788a:	4313      	orrs	r3, r2
 800788c:	9341      	str	r3, [sp, #260]	@ 0x104
 800788e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007892:	2b78      	cmp	r3, #120	@ 0x78
 8007894:	d807      	bhi.n	80078a6 <__svfiscanf_r+0x10a>
 8007896:	2b57      	cmp	r3, #87	@ 0x57
 8007898:	d811      	bhi.n	80078be <__svfiscanf_r+0x122>
 800789a:	2b25      	cmp	r3, #37	@ 0x25
 800789c:	d0c3      	beq.n	8007826 <__svfiscanf_r+0x8a>
 800789e:	d857      	bhi.n	8007950 <__svfiscanf_r+0x1b4>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 80c1 	beq.w	8007a28 <__svfiscanf_r+0x28c>
 80078a6:	2303      	movs	r3, #3
 80078a8:	9347      	str	r3, [sp, #284]	@ 0x11c
 80078aa:	230a      	movs	r3, #10
 80078ac:	9342      	str	r3, [sp, #264]	@ 0x108
 80078ae:	e07e      	b.n	80079ae <__svfiscanf_r+0x212>
 80078b0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80078b2:	464d      	mov	r5, r9
 80078b4:	fb02 1103 	mla	r1, r2, r3, r1
 80078b8:	3930      	subs	r1, #48	@ 0x30
 80078ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80078bc:	e7d1      	b.n	8007862 <__svfiscanf_r+0xc6>
 80078be:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80078c2:	2a20      	cmp	r2, #32
 80078c4:	d8ef      	bhi.n	80078a6 <__svfiscanf_r+0x10a>
 80078c6:	a101      	add	r1, pc, #4	@ (adr r1, 80078cc <__svfiscanf_r+0x130>)
 80078c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078cc:	0800798d 	.word	0x0800798d
 80078d0:	080078a7 	.word	0x080078a7
 80078d4:	080078a7 	.word	0x080078a7
 80078d8:	080079e7 	.word	0x080079e7
 80078dc:	080078a7 	.word	0x080078a7
 80078e0:	080078a7 	.word	0x080078a7
 80078e4:	080078a7 	.word	0x080078a7
 80078e8:	080078a7 	.word	0x080078a7
 80078ec:	080078a7 	.word	0x080078a7
 80078f0:	080078a7 	.word	0x080078a7
 80078f4:	080078a7 	.word	0x080078a7
 80078f8:	080079fd 	.word	0x080079fd
 80078fc:	080079e3 	.word	0x080079e3
 8007900:	08007957 	.word	0x08007957
 8007904:	08007957 	.word	0x08007957
 8007908:	08007957 	.word	0x08007957
 800790c:	080078a7 	.word	0x080078a7
 8007910:	0800799f 	.word	0x0800799f
 8007914:	080078a7 	.word	0x080078a7
 8007918:	080078a7 	.word	0x080078a7
 800791c:	080078a7 	.word	0x080078a7
 8007920:	080078a7 	.word	0x080078a7
 8007924:	08007a0d 	.word	0x08007a0d
 8007928:	080079a7 	.word	0x080079a7
 800792c:	08007985 	.word	0x08007985
 8007930:	080078a7 	.word	0x080078a7
 8007934:	080078a7 	.word	0x080078a7
 8007938:	08007a09 	.word	0x08007a09
 800793c:	080078a7 	.word	0x080078a7
 8007940:	080079e3 	.word	0x080079e3
 8007944:	080078a7 	.word	0x080078a7
 8007948:	080078a7 	.word	0x080078a7
 800794c:	0800798d 	.word	0x0800798d
 8007950:	3b45      	subs	r3, #69	@ 0x45
 8007952:	2b02      	cmp	r3, #2
 8007954:	d8a7      	bhi.n	80078a6 <__svfiscanf_r+0x10a>
 8007956:	2305      	movs	r3, #5
 8007958:	e028      	b.n	80079ac <__svfiscanf_r+0x210>
 800795a:	4621      	mov	r1, r4
 800795c:	4630      	mov	r0, r6
 800795e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007960:	4798      	blx	r3
 8007962:	2800      	cmp	r0, #0
 8007964:	f43f af64 	beq.w	8007830 <__svfiscanf_r+0x94>
 8007968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800796a:	07da      	lsls	r2, r3, #31
 800796c:	f140 809d 	bpl.w	8007aaa <__svfiscanf_r+0x30e>
 8007970:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007972:	2800      	cmp	r0, #0
 8007974:	d061      	beq.n	8007a3a <__svfiscanf_r+0x29e>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	0659      	lsls	r1, r3, #25
 800797a:	d45e      	bmi.n	8007a3a <__svfiscanf_r+0x29e>
 800797c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8007980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007984:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007986:	f042 0220 	orr.w	r2, r2, #32
 800798a:	9241      	str	r2, [sp, #260]	@ 0x104
 800798c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800798e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007992:	9241      	str	r2, [sp, #260]	@ 0x104
 8007994:	2210      	movs	r2, #16
 8007996:	2b6e      	cmp	r3, #110	@ 0x6e
 8007998:	9242      	str	r2, [sp, #264]	@ 0x108
 800799a:	d902      	bls.n	80079a2 <__svfiscanf_r+0x206>
 800799c:	e005      	b.n	80079aa <__svfiscanf_r+0x20e>
 800799e:	2300      	movs	r3, #0
 80079a0:	9342      	str	r3, [sp, #264]	@ 0x108
 80079a2:	2303      	movs	r3, #3
 80079a4:	e002      	b.n	80079ac <__svfiscanf_r+0x210>
 80079a6:	2308      	movs	r3, #8
 80079a8:	9342      	str	r3, [sp, #264]	@ 0x108
 80079aa:	2304      	movs	r3, #4
 80079ac:	9347      	str	r3, [sp, #284]	@ 0x11c
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	dd45      	ble.n	8007a40 <__svfiscanf_r+0x2a4>
 80079b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80079b6:	0659      	lsls	r1, r3, #25
 80079b8:	d404      	bmi.n	80079c4 <__svfiscanf_r+0x228>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	781a      	ldrb	r2, [r3, #0]
 80079be:	5cba      	ldrb	r2, [r7, r2]
 80079c0:	0712      	lsls	r2, r2, #28
 80079c2:	d444      	bmi.n	8007a4e <__svfiscanf_r+0x2b2>
 80079c4:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	dc5b      	bgt.n	8007a82 <__svfiscanf_r+0x2e6>
 80079ca:	466b      	mov	r3, sp
 80079cc:	4622      	mov	r2, r4
 80079ce:	4630      	mov	r0, r6
 80079d0:	a941      	add	r1, sp, #260	@ 0x104
 80079d2:	f000 f893 	bl	8007afc <_scanf_chars>
 80079d6:	2801      	cmp	r0, #1
 80079d8:	d06f      	beq.n	8007aba <__svfiscanf_r+0x31e>
 80079da:	2802      	cmp	r0, #2
 80079dc:	f47f af0f 	bne.w	80077fe <__svfiscanf_r+0x62>
 80079e0:	e7c2      	b.n	8007968 <__svfiscanf_r+0x1cc>
 80079e2:	220a      	movs	r2, #10
 80079e4:	e7d7      	b.n	8007996 <__svfiscanf_r+0x1fa>
 80079e6:	4629      	mov	r1, r5
 80079e8:	4640      	mov	r0, r8
 80079ea:	f000 fb5f 	bl	80080ac <__sccl>
 80079ee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80079f0:	4605      	mov	r5, r0
 80079f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079f6:	9341      	str	r3, [sp, #260]	@ 0x104
 80079f8:	2301      	movs	r3, #1
 80079fa:	e7d7      	b.n	80079ac <__svfiscanf_r+0x210>
 80079fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80079fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a02:	9341      	str	r3, [sp, #260]	@ 0x104
 8007a04:	2300      	movs	r3, #0
 8007a06:	e7d1      	b.n	80079ac <__svfiscanf_r+0x210>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e7cf      	b.n	80079ac <__svfiscanf_r+0x210>
 8007a0c:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007a0e:	06c3      	lsls	r3, r0, #27
 8007a10:	f53f aef5 	bmi.w	80077fe <__svfiscanf_r+0x62>
 8007a14:	9b00      	ldr	r3, [sp, #0]
 8007a16:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007a18:	1d19      	adds	r1, r3, #4
 8007a1a:	9100      	str	r1, [sp, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	07c0      	lsls	r0, r0, #31
 8007a20:	bf4c      	ite	mi
 8007a22:	801a      	strhmi	r2, [r3, #0]
 8007a24:	601a      	strpl	r2, [r3, #0]
 8007a26:	e6ea      	b.n	80077fe <__svfiscanf_r+0x62>
 8007a28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a2a:	07de      	lsls	r6, r3, #31
 8007a2c:	d405      	bmi.n	8007a3a <__svfiscanf_r+0x29e>
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	059d      	lsls	r5, r3, #22
 8007a32:	d402      	bmi.n	8007a3a <__svfiscanf_r+0x29e>
 8007a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a36:	f7fd f991 	bl	8004d5c <__retarget_lock_release_recursive>
 8007a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3e:	e79d      	b.n	800797c <__svfiscanf_r+0x1e0>
 8007a40:	4621      	mov	r1, r4
 8007a42:	4630      	mov	r0, r6
 8007a44:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007a46:	4798      	blx	r3
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d0b3      	beq.n	80079b4 <__svfiscanf_r+0x218>
 8007a4c:	e78c      	b.n	8007968 <__svfiscanf_r+0x1cc>
 8007a4e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007a50:	3201      	adds	r2, #1
 8007a52:	9245      	str	r2, [sp, #276]	@ 0x114
 8007a54:	6862      	ldr	r2, [r4, #4]
 8007a56:	3a01      	subs	r2, #1
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	6062      	str	r2, [r4, #4]
 8007a5c:	dd0a      	ble.n	8007a74 <__svfiscanf_r+0x2d8>
 8007a5e:	3301      	adds	r3, #1
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	e7aa      	b.n	80079ba <__svfiscanf_r+0x21e>
 8007a64:	0800818f 	.word	0x0800818f
 8007a68:	08007fc5 	.word	0x08007fc5
 8007a6c:	08009161 	.word	0x08009161
 8007a70:	08009267 	.word	0x08009267
 8007a74:	4621      	mov	r1, r4
 8007a76:	4630      	mov	r0, r6
 8007a78:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007a7a:	4798      	blx	r3
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d09c      	beq.n	80079ba <__svfiscanf_r+0x21e>
 8007a80:	e772      	b.n	8007968 <__svfiscanf_r+0x1cc>
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	dc06      	bgt.n	8007a94 <__svfiscanf_r+0x2f8>
 8007a86:	466b      	mov	r3, sp
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	a941      	add	r1, sp, #260	@ 0x104
 8007a8e:	f000 f88f 	bl	8007bb0 <_scanf_i>
 8007a92:	e7a0      	b.n	80079d6 <__svfiscanf_r+0x23a>
 8007a94:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad0 <__svfiscanf_r+0x334>)
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f43f aeb1 	beq.w	80077fe <__svfiscanf_r+0x62>
 8007a9c:	466b      	mov	r3, sp
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	a941      	add	r1, sp, #260	@ 0x104
 8007aa4:	f7fc fcce 	bl	8004444 <_scanf_float>
 8007aa8:	e795      	b.n	80079d6 <__svfiscanf_r+0x23a>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	0598      	lsls	r0, r3, #22
 8007aae:	f53f af5f 	bmi.w	8007970 <__svfiscanf_r+0x1d4>
 8007ab2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ab4:	f7fd f952 	bl	8004d5c <__retarget_lock_release_recursive>
 8007ab8:	e75a      	b.n	8007970 <__svfiscanf_r+0x1d4>
 8007aba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007abc:	07da      	lsls	r2, r3, #31
 8007abe:	d405      	bmi.n	8007acc <__svfiscanf_r+0x330>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	059b      	lsls	r3, r3, #22
 8007ac4:	d402      	bmi.n	8007acc <__svfiscanf_r+0x330>
 8007ac6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ac8:	f7fd f948 	bl	8004d5c <__retarget_lock_release_recursive>
 8007acc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007ace:	e755      	b.n	800797c <__svfiscanf_r+0x1e0>
 8007ad0:	08004445 	.word	0x08004445

08007ad4 <_vfiscanf_r>:
 8007ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad8:	460d      	mov	r5, r1
 8007ada:	4616      	mov	r6, r2
 8007adc:	461f      	mov	r7, r3
 8007ade:	4604      	mov	r4, r0
 8007ae0:	b118      	cbz	r0, 8007aea <_vfiscanf_r+0x16>
 8007ae2:	6a03      	ldr	r3, [r0, #32]
 8007ae4:	b90b      	cbnz	r3, 8007aea <_vfiscanf_r+0x16>
 8007ae6:	f7fc ff49 	bl	800497c <__sinit>
 8007aea:	463b      	mov	r3, r7
 8007aec:	4632      	mov	r2, r6
 8007aee:	4629      	mov	r1, r5
 8007af0:	4620      	mov	r0, r4
 8007af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af6:	f7ff be51 	b.w	800779c <__svfiscanf_r>
	...

08007afc <_scanf_chars>:
 8007afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b00:	4615      	mov	r5, r2
 8007b02:	688a      	ldr	r2, [r1, #8]
 8007b04:	4680      	mov	r8, r0
 8007b06:	460c      	mov	r4, r1
 8007b08:	b932      	cbnz	r2, 8007b18 <_scanf_chars+0x1c>
 8007b0a:	698a      	ldr	r2, [r1, #24]
 8007b0c:	2a00      	cmp	r2, #0
 8007b0e:	bf14      	ite	ne
 8007b10:	f04f 32ff 	movne.w	r2, #4294967295
 8007b14:	2201      	moveq	r2, #1
 8007b16:	608a      	str	r2, [r1, #8]
 8007b18:	2700      	movs	r7, #0
 8007b1a:	6822      	ldr	r2, [r4, #0]
 8007b1c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8007bac <_scanf_chars+0xb0>
 8007b20:	06d1      	lsls	r1, r2, #27
 8007b22:	bf5f      	itttt	pl
 8007b24:	681a      	ldrpl	r2, [r3, #0]
 8007b26:	1d11      	addpl	r1, r2, #4
 8007b28:	6019      	strpl	r1, [r3, #0]
 8007b2a:	6816      	ldrpl	r6, [r2, #0]
 8007b2c:	69a0      	ldr	r0, [r4, #24]
 8007b2e:	b188      	cbz	r0, 8007b54 <_scanf_chars+0x58>
 8007b30:	2801      	cmp	r0, #1
 8007b32:	d107      	bne.n	8007b44 <_scanf_chars+0x48>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	6963      	ldr	r3, [r4, #20]
 8007b3a:	5c9b      	ldrb	r3, [r3, r2]
 8007b3c:	b953      	cbnz	r3, 8007b54 <_scanf_chars+0x58>
 8007b3e:	2f00      	cmp	r7, #0
 8007b40:	d031      	beq.n	8007ba6 <_scanf_chars+0xaa>
 8007b42:	e022      	b.n	8007b8a <_scanf_chars+0x8e>
 8007b44:	2802      	cmp	r0, #2
 8007b46:	d120      	bne.n	8007b8a <_scanf_chars+0x8e>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007b50:	071b      	lsls	r3, r3, #28
 8007b52:	d41a      	bmi.n	8007b8a <_scanf_chars+0x8e>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	3701      	adds	r7, #1
 8007b58:	06da      	lsls	r2, r3, #27
 8007b5a:	bf5e      	ittt	pl
 8007b5c:	682b      	ldrpl	r3, [r5, #0]
 8007b5e:	781b      	ldrbpl	r3, [r3, #0]
 8007b60:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007b64:	682a      	ldr	r2, [r5, #0]
 8007b66:	686b      	ldr	r3, [r5, #4]
 8007b68:	3201      	adds	r2, #1
 8007b6a:	602a      	str	r2, [r5, #0]
 8007b6c:	68a2      	ldr	r2, [r4, #8]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	3a01      	subs	r2, #1
 8007b72:	606b      	str	r3, [r5, #4]
 8007b74:	60a2      	str	r2, [r4, #8]
 8007b76:	b142      	cbz	r2, 8007b8a <_scanf_chars+0x8e>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	dcd7      	bgt.n	8007b2c <_scanf_chars+0x30>
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	4640      	mov	r0, r8
 8007b80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b84:	4798      	blx	r3
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d0d0      	beq.n	8007b2c <_scanf_chars+0x30>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	f013 0310 	ands.w	r3, r3, #16
 8007b90:	d105      	bne.n	8007b9e <_scanf_chars+0xa2>
 8007b92:	68e2      	ldr	r2, [r4, #12]
 8007b94:	3201      	adds	r2, #1
 8007b96:	60e2      	str	r2, [r4, #12]
 8007b98:	69a2      	ldr	r2, [r4, #24]
 8007b9a:	b102      	cbz	r2, 8007b9e <_scanf_chars+0xa2>
 8007b9c:	7033      	strb	r3, [r6, #0]
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	443b      	add	r3, r7
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007baa:	bf00      	nop
 8007bac:	08009161 	.word	0x08009161

08007bb0 <_scanf_i>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	4698      	mov	r8, r3
 8007bb8:	4b72      	ldr	r3, [pc, #456]	@ (8007d84 <_scanf_i+0x1d4>)
 8007bba:	b087      	sub	sp, #28
 8007bbc:	4682      	mov	sl, r0
 8007bbe:	4616      	mov	r6, r2
 8007bc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007bc4:	ab03      	add	r3, sp, #12
 8007bc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007bca:	4b6f      	ldr	r3, [pc, #444]	@ (8007d88 <_scanf_i+0x1d8>)
 8007bcc:	69a1      	ldr	r1, [r4, #24]
 8007bce:	4a6f      	ldr	r2, [pc, #444]	@ (8007d8c <_scanf_i+0x1dc>)
 8007bd0:	4627      	mov	r7, r4
 8007bd2:	2903      	cmp	r1, #3
 8007bd4:	bf08      	it	eq
 8007bd6:	461a      	moveq	r2, r3
 8007bd8:	68a3      	ldr	r3, [r4, #8]
 8007bda:	9201      	str	r2, [sp, #4]
 8007bdc:	1e5a      	subs	r2, r3, #1
 8007bde:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007be2:	bf81      	itttt	hi
 8007be4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007be8:	eb03 0905 	addhi.w	r9, r3, r5
 8007bec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007bf0:	60a3      	strhi	r3, [r4, #8]
 8007bf2:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007bf6:	bf98      	it	ls
 8007bf8:	f04f 0900 	movls.w	r9, #0
 8007bfc:	463d      	mov	r5, r7
 8007bfe:	f04f 0b00 	mov.w	fp, #0
 8007c02:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	6831      	ldr	r1, [r6, #0]
 8007c0a:	ab03      	add	r3, sp, #12
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	7809      	ldrb	r1, [r1, #0]
 8007c10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007c14:	f7fd f8a3 	bl	8004d5e <memchr>
 8007c18:	b328      	cbz	r0, 8007c66 <_scanf_i+0xb6>
 8007c1a:	f1bb 0f01 	cmp.w	fp, #1
 8007c1e:	d159      	bne.n	8007cd4 <_scanf_i+0x124>
 8007c20:	6862      	ldr	r2, [r4, #4]
 8007c22:	b92a      	cbnz	r2, 8007c30 <_scanf_i+0x80>
 8007c24:	2108      	movs	r1, #8
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	6061      	str	r1, [r4, #4]
 8007c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c2e:	6022      	str	r2, [r4, #0]
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007c36:	6022      	str	r2, [r4, #0]
 8007c38:	68a2      	ldr	r2, [r4, #8]
 8007c3a:	1e51      	subs	r1, r2, #1
 8007c3c:	60a1      	str	r1, [r4, #8]
 8007c3e:	b192      	cbz	r2, 8007c66 <_scanf_i+0xb6>
 8007c40:	6832      	ldr	r2, [r6, #0]
 8007c42:	1c51      	adds	r1, r2, #1
 8007c44:	6031      	str	r1, [r6, #0]
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	f805 2b01 	strb.w	r2, [r5], #1
 8007c4c:	6872      	ldr	r2, [r6, #4]
 8007c4e:	3a01      	subs	r2, #1
 8007c50:	2a00      	cmp	r2, #0
 8007c52:	6072      	str	r2, [r6, #4]
 8007c54:	dc07      	bgt.n	8007c66 <_scanf_i+0xb6>
 8007c56:	4631      	mov	r1, r6
 8007c58:	4650      	mov	r0, sl
 8007c5a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007c5e:	4790      	blx	r2
 8007c60:	2800      	cmp	r0, #0
 8007c62:	f040 8085 	bne.w	8007d70 <_scanf_i+0x1c0>
 8007c66:	f10b 0b01 	add.w	fp, fp, #1
 8007c6a:	f1bb 0f03 	cmp.w	fp, #3
 8007c6e:	d1cb      	bne.n	8007c08 <_scanf_i+0x58>
 8007c70:	6863      	ldr	r3, [r4, #4]
 8007c72:	b90b      	cbnz	r3, 8007c78 <_scanf_i+0xc8>
 8007c74:	230a      	movs	r3, #10
 8007c76:	6063      	str	r3, [r4, #4]
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	4945      	ldr	r1, [pc, #276]	@ (8007d90 <_scanf_i+0x1e0>)
 8007c7c:	6960      	ldr	r0, [r4, #20]
 8007c7e:	1ac9      	subs	r1, r1, r3
 8007c80:	f000 fa14 	bl	80080ac <__sccl>
 8007c84:	f04f 0b00 	mov.w	fp, #0
 8007c88:	68a3      	ldr	r3, [r4, #8]
 8007c8a:	6822      	ldr	r2, [r4, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d03d      	beq.n	8007d0c <_scanf_i+0x15c>
 8007c90:	6831      	ldr	r1, [r6, #0]
 8007c92:	6960      	ldr	r0, [r4, #20]
 8007c94:	f891 c000 	ldrb.w	ip, [r1]
 8007c98:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d035      	beq.n	8007d0c <_scanf_i+0x15c>
 8007ca0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007ca4:	d124      	bne.n	8007cf0 <_scanf_i+0x140>
 8007ca6:	0510      	lsls	r0, r2, #20
 8007ca8:	d522      	bpl.n	8007cf0 <_scanf_i+0x140>
 8007caa:	f10b 0b01 	add.w	fp, fp, #1
 8007cae:	f1b9 0f00 	cmp.w	r9, #0
 8007cb2:	d003      	beq.n	8007cbc <_scanf_i+0x10c>
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8007cba:	60a3      	str	r3, [r4, #8]
 8007cbc:	6873      	ldr	r3, [r6, #4]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	6073      	str	r3, [r6, #4]
 8007cc4:	dd1b      	ble.n	8007cfe <_scanf_i+0x14e>
 8007cc6:	6833      	ldr	r3, [r6, #0]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	6033      	str	r3, [r6, #0]
 8007ccc:	68a3      	ldr	r3, [r4, #8]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	60a3      	str	r3, [r4, #8]
 8007cd2:	e7d9      	b.n	8007c88 <_scanf_i+0xd8>
 8007cd4:	f1bb 0f02 	cmp.w	fp, #2
 8007cd8:	d1ae      	bne.n	8007c38 <_scanf_i+0x88>
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007ce0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007ce4:	d1bf      	bne.n	8007c66 <_scanf_i+0xb6>
 8007ce6:	2110      	movs	r1, #16
 8007ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cec:	6061      	str	r1, [r4, #4]
 8007cee:	e7a2      	b.n	8007c36 <_scanf_i+0x86>
 8007cf0:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007cf4:	6022      	str	r2, [r4, #0]
 8007cf6:	780b      	ldrb	r3, [r1, #0]
 8007cf8:	f805 3b01 	strb.w	r3, [r5], #1
 8007cfc:	e7de      	b.n	8007cbc <_scanf_i+0x10c>
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4650      	mov	r0, sl
 8007d02:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007d06:	4798      	blx	r3
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d0df      	beq.n	8007ccc <_scanf_i+0x11c>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	05d9      	lsls	r1, r3, #23
 8007d10:	d50d      	bpl.n	8007d2e <_scanf_i+0x17e>
 8007d12:	42bd      	cmp	r5, r7
 8007d14:	d909      	bls.n	8007d2a <_scanf_i+0x17a>
 8007d16:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007d1a:	4632      	mov	r2, r6
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d22:	f105 39ff 	add.w	r9, r5, #4294967295
 8007d26:	4798      	blx	r3
 8007d28:	464d      	mov	r5, r9
 8007d2a:	42bd      	cmp	r5, r7
 8007d2c:	d028      	beq.n	8007d80 <_scanf_i+0x1d0>
 8007d2e:	6822      	ldr	r2, [r4, #0]
 8007d30:	f012 0210 	ands.w	r2, r2, #16
 8007d34:	d113      	bne.n	8007d5e <_scanf_i+0x1ae>
 8007d36:	702a      	strb	r2, [r5, #0]
 8007d38:	4639      	mov	r1, r7
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	9e01      	ldr	r6, [sp, #4]
 8007d40:	47b0      	blx	r6
 8007d42:	f8d8 3000 	ldr.w	r3, [r8]
 8007d46:	6821      	ldr	r1, [r4, #0]
 8007d48:	1d1a      	adds	r2, r3, #4
 8007d4a:	f8c8 2000 	str.w	r2, [r8]
 8007d4e:	f011 0f20 	tst.w	r1, #32
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	d00f      	beq.n	8007d76 <_scanf_i+0x1c6>
 8007d56:	6018      	str	r0, [r3, #0]
 8007d58:	68e3      	ldr	r3, [r4, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	60e3      	str	r3, [r4, #12]
 8007d5e:	2000      	movs	r0, #0
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	1bed      	subs	r5, r5, r7
 8007d64:	445d      	add	r5, fp
 8007d66:	442b      	add	r3, r5
 8007d68:	6123      	str	r3, [r4, #16]
 8007d6a:	b007      	add	sp, #28
 8007d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d70:	f04f 0b00 	mov.w	fp, #0
 8007d74:	e7ca      	b.n	8007d0c <_scanf_i+0x15c>
 8007d76:	07ca      	lsls	r2, r1, #31
 8007d78:	bf4c      	ite	mi
 8007d7a:	8018      	strhmi	r0, [r3, #0]
 8007d7c:	6018      	strpl	r0, [r3, #0]
 8007d7e:	e7eb      	b.n	8007d58 <_scanf_i+0x1a8>
 8007d80:	2001      	movs	r0, #1
 8007d82:	e7f2      	b.n	8007d6a <_scanf_i+0x1ba>
 8007d84:	08008ebc 	.word	0x08008ebc
 8007d88:	08007269 	.word	0x08007269
 8007d8c:	08008ccd 	.word	0x08008ccd
 8007d90:	08009282 	.word	0x08009282

08007d94 <__sflush_r>:
 8007d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	0716      	lsls	r6, r2, #28
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	d454      	bmi.n	8007e4c <__sflush_r+0xb8>
 8007da2:	684b      	ldr	r3, [r1, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dc02      	bgt.n	8007dae <__sflush_r+0x1a>
 8007da8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	dd48      	ble.n	8007e40 <__sflush_r+0xac>
 8007dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	d045      	beq.n	8007e40 <__sflush_r+0xac>
 8007db4:	2300      	movs	r3, #0
 8007db6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007dba:	682f      	ldr	r7, [r5, #0]
 8007dbc:	6a21      	ldr	r1, [r4, #32]
 8007dbe:	602b      	str	r3, [r5, #0]
 8007dc0:	d030      	beq.n	8007e24 <__sflush_r+0x90>
 8007dc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	0759      	lsls	r1, r3, #29
 8007dc8:	d505      	bpl.n	8007dd6 <__sflush_r+0x42>
 8007dca:	6863      	ldr	r3, [r4, #4]
 8007dcc:	1ad2      	subs	r2, r2, r3
 8007dce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dd0:	b10b      	cbz	r3, 8007dd6 <__sflush_r+0x42>
 8007dd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dd4:	1ad2      	subs	r2, r2, r3
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4628      	mov	r0, r5
 8007dda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ddc:	6a21      	ldr	r1, [r4, #32]
 8007dde:	47b0      	blx	r6
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	d106      	bne.n	8007df4 <__sflush_r+0x60>
 8007de6:	6829      	ldr	r1, [r5, #0]
 8007de8:	291d      	cmp	r1, #29
 8007dea:	d82b      	bhi.n	8007e44 <__sflush_r+0xb0>
 8007dec:	4a28      	ldr	r2, [pc, #160]	@ (8007e90 <__sflush_r+0xfc>)
 8007dee:	410a      	asrs	r2, r1
 8007df0:	07d6      	lsls	r6, r2, #31
 8007df2:	d427      	bmi.n	8007e44 <__sflush_r+0xb0>
 8007df4:	2200      	movs	r2, #0
 8007df6:	6062      	str	r2, [r4, #4]
 8007df8:	6922      	ldr	r2, [r4, #16]
 8007dfa:	04d9      	lsls	r1, r3, #19
 8007dfc:	6022      	str	r2, [r4, #0]
 8007dfe:	d504      	bpl.n	8007e0a <__sflush_r+0x76>
 8007e00:	1c42      	adds	r2, r0, #1
 8007e02:	d101      	bne.n	8007e08 <__sflush_r+0x74>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b903      	cbnz	r3, 8007e0a <__sflush_r+0x76>
 8007e08:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e0c:	602f      	str	r7, [r5, #0]
 8007e0e:	b1b9      	cbz	r1, 8007e40 <__sflush_r+0xac>
 8007e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e14:	4299      	cmp	r1, r3
 8007e16:	d002      	beq.n	8007e1e <__sflush_r+0x8a>
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f7fd fe05 	bl	8005a28 <_free_r>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e22:	e00d      	b.n	8007e40 <__sflush_r+0xac>
 8007e24:	2301      	movs	r3, #1
 8007e26:	4628      	mov	r0, r5
 8007e28:	47b0      	blx	r6
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	1c50      	adds	r0, r2, #1
 8007e2e:	d1c9      	bne.n	8007dc4 <__sflush_r+0x30>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0c6      	beq.n	8007dc4 <__sflush_r+0x30>
 8007e36:	2b1d      	cmp	r3, #29
 8007e38:	d001      	beq.n	8007e3e <__sflush_r+0xaa>
 8007e3a:	2b16      	cmp	r3, #22
 8007e3c:	d11d      	bne.n	8007e7a <__sflush_r+0xe6>
 8007e3e:	602f      	str	r7, [r5, #0]
 8007e40:	2000      	movs	r0, #0
 8007e42:	e021      	b.n	8007e88 <__sflush_r+0xf4>
 8007e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e48:	b21b      	sxth	r3, r3
 8007e4a:	e01a      	b.n	8007e82 <__sflush_r+0xee>
 8007e4c:	690f      	ldr	r7, [r1, #16]
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	d0f6      	beq.n	8007e40 <__sflush_r+0xac>
 8007e52:	0793      	lsls	r3, r2, #30
 8007e54:	bf18      	it	ne
 8007e56:	2300      	movne	r3, #0
 8007e58:	680e      	ldr	r6, [r1, #0]
 8007e5a:	bf08      	it	eq
 8007e5c:	694b      	ldreq	r3, [r1, #20]
 8007e5e:	1bf6      	subs	r6, r6, r7
 8007e60:	600f      	str	r7, [r1, #0]
 8007e62:	608b      	str	r3, [r1, #8]
 8007e64:	2e00      	cmp	r6, #0
 8007e66:	ddeb      	ble.n	8007e40 <__sflush_r+0xac>
 8007e68:	4633      	mov	r3, r6
 8007e6a:	463a      	mov	r2, r7
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	6a21      	ldr	r1, [r4, #32]
 8007e70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007e74:	47e0      	blx	ip
 8007e76:	2800      	cmp	r0, #0
 8007e78:	dc07      	bgt.n	8007e8a <__sflush_r+0xf6>
 8007e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e82:	f04f 30ff 	mov.w	r0, #4294967295
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e8a:	4407      	add	r7, r0
 8007e8c:	1a36      	subs	r6, r6, r0
 8007e8e:	e7e9      	b.n	8007e64 <__sflush_r+0xd0>
 8007e90:	dfbffffe 	.word	0xdfbffffe

08007e94 <_fflush_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	690b      	ldr	r3, [r1, #16]
 8007e98:	4605      	mov	r5, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	b913      	cbnz	r3, 8007ea4 <_fflush_r+0x10>
 8007e9e:	2500      	movs	r5, #0
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	b118      	cbz	r0, 8007eae <_fflush_r+0x1a>
 8007ea6:	6a03      	ldr	r3, [r0, #32]
 8007ea8:	b90b      	cbnz	r3, 8007eae <_fflush_r+0x1a>
 8007eaa:	f7fc fd67 	bl	800497c <__sinit>
 8007eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f3      	beq.n	8007e9e <_fflush_r+0xa>
 8007eb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007eb8:	07d0      	lsls	r0, r2, #31
 8007eba:	d404      	bmi.n	8007ec6 <_fflush_r+0x32>
 8007ebc:	0599      	lsls	r1, r3, #22
 8007ebe:	d402      	bmi.n	8007ec6 <_fflush_r+0x32>
 8007ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ec2:	f7fc ff4a 	bl	8004d5a <__retarget_lock_acquire_recursive>
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	4621      	mov	r1, r4
 8007eca:	f7ff ff63 	bl	8007d94 <__sflush_r>
 8007ece:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	07da      	lsls	r2, r3, #31
 8007ed4:	d4e4      	bmi.n	8007ea0 <_fflush_r+0xc>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	059b      	lsls	r3, r3, #22
 8007eda:	d4e1      	bmi.n	8007ea0 <_fflush_r+0xc>
 8007edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ede:	f7fc ff3d 	bl	8004d5c <__retarget_lock_release_recursive>
 8007ee2:	e7dd      	b.n	8007ea0 <_fflush_r+0xc>

08007ee4 <__swhatbuf_r>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eec:	4615      	mov	r5, r2
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	461e      	mov	r6, r3
 8007ef2:	b096      	sub	sp, #88	@ 0x58
 8007ef4:	da0c      	bge.n	8007f10 <__swhatbuf_r+0x2c>
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	2100      	movs	r1, #0
 8007efa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007efe:	bf14      	ite	ne
 8007f00:	2340      	movne	r3, #64	@ 0x40
 8007f02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f06:	2000      	movs	r0, #0
 8007f08:	6031      	str	r1, [r6, #0]
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	b016      	add	sp, #88	@ 0x58
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	466a      	mov	r2, sp
 8007f12:	f000 fa7b 	bl	800840c <_fstat_r>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	dbed      	blt.n	8007ef6 <__swhatbuf_r+0x12>
 8007f1a:	9901      	ldr	r1, [sp, #4]
 8007f1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f24:	4259      	negs	r1, r3
 8007f26:	4159      	adcs	r1, r3
 8007f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f2c:	e7eb      	b.n	8007f06 <__swhatbuf_r+0x22>

08007f2e <__smakebuf_r>:
 8007f2e:	898b      	ldrh	r3, [r1, #12]
 8007f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f32:	079d      	lsls	r5, r3, #30
 8007f34:	4606      	mov	r6, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	d507      	bpl.n	8007f4a <__smakebuf_r+0x1c>
 8007f3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	2301      	movs	r3, #1
 8007f44:	6163      	str	r3, [r4, #20]
 8007f46:	b003      	add	sp, #12
 8007f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f4a:	466a      	mov	r2, sp
 8007f4c:	ab01      	add	r3, sp, #4
 8007f4e:	f7ff ffc9 	bl	8007ee4 <__swhatbuf_r>
 8007f52:	9f00      	ldr	r7, [sp, #0]
 8007f54:	4605      	mov	r5, r0
 8007f56:	4639      	mov	r1, r7
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7fd fdd7 	bl	8005b0c <_malloc_r>
 8007f5e:	b948      	cbnz	r0, 8007f74 <__smakebuf_r+0x46>
 8007f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f64:	059a      	lsls	r2, r3, #22
 8007f66:	d4ee      	bmi.n	8007f46 <__smakebuf_r+0x18>
 8007f68:	f023 0303 	bic.w	r3, r3, #3
 8007f6c:	f043 0302 	orr.w	r3, r3, #2
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	e7e2      	b.n	8007f3a <__smakebuf_r+0xc>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	9b01      	ldr	r3, [sp, #4]
 8007f82:	6020      	str	r0, [r4, #0]
 8007f84:	b15b      	cbz	r3, 8007f9e <__smakebuf_r+0x70>
 8007f86:	4630      	mov	r0, r6
 8007f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f8c:	f000 fa50 	bl	8008430 <_isatty_r>
 8007f90:	b128      	cbz	r0, 8007f9e <__smakebuf_r+0x70>
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	f043 0301 	orr.w	r3, r3, #1
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	431d      	orrs	r5, r3
 8007fa2:	81a5      	strh	r5, [r4, #12]
 8007fa4:	e7cf      	b.n	8007f46 <__smakebuf_r+0x18>
	...

08007fa8 <lflush>:
 8007fa8:	898b      	ldrh	r3, [r1, #12]
 8007faa:	f003 0309 	and.w	r3, r3, #9
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d103      	bne.n	8007fba <lflush+0x12>
 8007fb2:	4b03      	ldr	r3, [pc, #12]	@ (8007fc0 <lflush+0x18>)
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	f7ff bf6d 	b.w	8007e94 <_fflush_r>
 8007fba:	2000      	movs	r0, #0
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	20000020 	.word	0x20000020

08007fc4 <__srefill_r>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	4605      	mov	r5, r0
 8007fca:	b118      	cbz	r0, 8007fd4 <__srefill_r+0x10>
 8007fcc:	6a03      	ldr	r3, [r0, #32]
 8007fce:	b90b      	cbnz	r3, 8007fd4 <__srefill_r+0x10>
 8007fd0:	f7fc fcd4 	bl	800497c <__sinit>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	6063      	str	r3, [r4, #4]
 8007fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fdc:	069e      	lsls	r6, r3, #26
 8007fde:	d408      	bmi.n	8007ff2 <__srefill_r+0x2e>
 8007fe0:	0758      	lsls	r0, r3, #29
 8007fe2:	d445      	bmi.n	8008070 <__srefill_r+0xac>
 8007fe4:	06d9      	lsls	r1, r3, #27
 8007fe6:	d407      	bmi.n	8007ff8 <__srefill_r+0x34>
 8007fe8:	2209      	movs	r2, #9
 8007fea:	602a      	str	r2, [r5, #0]
 8007fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ff0:	81a3      	strh	r3, [r4, #12]
 8007ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	071a      	lsls	r2, r3, #28
 8007ffa:	d50b      	bpl.n	8008014 <__srefill_r+0x50>
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4628      	mov	r0, r5
 8008000:	f7ff ff48 	bl	8007e94 <_fflush_r>
 8008004:	2800      	cmp	r0, #0
 8008006:	d1f4      	bne.n	8007ff2 <__srefill_r+0x2e>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	60a0      	str	r0, [r4, #8]
 800800c:	f023 0308 	bic.w	r3, r3, #8
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	61a0      	str	r0, [r4, #24]
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	f043 0304 	orr.w	r3, r3, #4
 800801a:	81a3      	strh	r3, [r4, #12]
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	b91b      	cbnz	r3, 8008028 <__srefill_r+0x64>
 8008020:	4621      	mov	r1, r4
 8008022:	4628      	mov	r0, r5
 8008024:	f7ff ff83 	bl	8007f2e <__smakebuf_r>
 8008028:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800802c:	07b3      	lsls	r3, r6, #30
 800802e:	d00f      	beq.n	8008050 <__srefill_r+0x8c>
 8008030:	2301      	movs	r3, #1
 8008032:	4a1b      	ldr	r2, [pc, #108]	@ (80080a0 <__srefill_r+0xdc>)
 8008034:	491b      	ldr	r1, [pc, #108]	@ (80080a4 <__srefill_r+0xe0>)
 8008036:	481c      	ldr	r0, [pc, #112]	@ (80080a8 <__srefill_r+0xe4>)
 8008038:	81a3      	strh	r3, [r4, #12]
 800803a:	f7fc fcb7 	bl	80049ac <_fwalk_sglue>
 800803e:	81a6      	strh	r6, [r4, #12]
 8008040:	f006 0609 	and.w	r6, r6, #9
 8008044:	2e09      	cmp	r6, #9
 8008046:	d103      	bne.n	8008050 <__srefill_r+0x8c>
 8008048:	4621      	mov	r1, r4
 800804a:	4628      	mov	r0, r5
 800804c:	f7ff fea2 	bl	8007d94 <__sflush_r>
 8008050:	6922      	ldr	r2, [r4, #16]
 8008052:	4628      	mov	r0, r5
 8008054:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8008056:	6963      	ldr	r3, [r4, #20]
 8008058:	6a21      	ldr	r1, [r4, #32]
 800805a:	6022      	str	r2, [r4, #0]
 800805c:	47b0      	blx	r6
 800805e:	2800      	cmp	r0, #0
 8008060:	6060      	str	r0, [r4, #4]
 8008062:	dc17      	bgt.n	8008094 <__srefill_r+0xd0>
 8008064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008068:	d116      	bne.n	8008098 <__srefill_r+0xd4>
 800806a:	f043 0320 	orr.w	r3, r3, #32
 800806e:	e7bf      	b.n	8007ff0 <__srefill_r+0x2c>
 8008070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008072:	2900      	cmp	r1, #0
 8008074:	d0d2      	beq.n	800801c <__srefill_r+0x58>
 8008076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800807a:	4299      	cmp	r1, r3
 800807c:	d002      	beq.n	8008084 <__srefill_r+0xc0>
 800807e:	4628      	mov	r0, r5
 8008080:	f7fd fcd2 	bl	8005a28 <_free_r>
 8008084:	2300      	movs	r3, #0
 8008086:	6363      	str	r3, [r4, #52]	@ 0x34
 8008088:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800808a:	6063      	str	r3, [r4, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d0c5      	beq.n	800801c <__srefill_r+0x58>
 8008090:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008092:	6023      	str	r3, [r4, #0]
 8008094:	2000      	movs	r0, #0
 8008096:	e7ae      	b.n	8007ff6 <__srefill_r+0x32>
 8008098:	2200      	movs	r2, #0
 800809a:	6062      	str	r2, [r4, #4]
 800809c:	e7a6      	b.n	8007fec <__srefill_r+0x28>
 800809e:	bf00      	nop
 80080a0:	20000014 	.word	0x20000014
 80080a4:	08007fa9 	.word	0x08007fa9
 80080a8:	20000024 	.word	0x20000024

080080ac <__sccl>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	780b      	ldrb	r3, [r1, #0]
 80080b0:	4604      	mov	r4, r0
 80080b2:	2b5e      	cmp	r3, #94	@ 0x5e
 80080b4:	bf0b      	itete	eq
 80080b6:	784b      	ldrbeq	r3, [r1, #1]
 80080b8:	1c4a      	addne	r2, r1, #1
 80080ba:	1c8a      	addeq	r2, r1, #2
 80080bc:	2100      	movne	r1, #0
 80080be:	bf08      	it	eq
 80080c0:	2101      	moveq	r1, #1
 80080c2:	3801      	subs	r0, #1
 80080c4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80080c8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80080cc:	42a8      	cmp	r0, r5
 80080ce:	d1fb      	bne.n	80080c8 <__sccl+0x1c>
 80080d0:	b90b      	cbnz	r3, 80080d6 <__sccl+0x2a>
 80080d2:	1e50      	subs	r0, r2, #1
 80080d4:	bd70      	pop	{r4, r5, r6, pc}
 80080d6:	f081 0101 	eor.w	r1, r1, #1
 80080da:	4610      	mov	r0, r2
 80080dc:	54e1      	strb	r1, [r4, r3]
 80080de:	4602      	mov	r2, r0
 80080e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080e4:	2d2d      	cmp	r5, #45	@ 0x2d
 80080e6:	d005      	beq.n	80080f4 <__sccl+0x48>
 80080e8:	2d5d      	cmp	r5, #93	@ 0x5d
 80080ea:	d016      	beq.n	800811a <__sccl+0x6e>
 80080ec:	2d00      	cmp	r5, #0
 80080ee:	d0f1      	beq.n	80080d4 <__sccl+0x28>
 80080f0:	462b      	mov	r3, r5
 80080f2:	e7f2      	b.n	80080da <__sccl+0x2e>
 80080f4:	7846      	ldrb	r6, [r0, #1]
 80080f6:	2e5d      	cmp	r6, #93	@ 0x5d
 80080f8:	d0fa      	beq.n	80080f0 <__sccl+0x44>
 80080fa:	42b3      	cmp	r3, r6
 80080fc:	dcf8      	bgt.n	80080f0 <__sccl+0x44>
 80080fe:	461a      	mov	r2, r3
 8008100:	3002      	adds	r0, #2
 8008102:	3201      	adds	r2, #1
 8008104:	4296      	cmp	r6, r2
 8008106:	54a1      	strb	r1, [r4, r2]
 8008108:	dcfb      	bgt.n	8008102 <__sccl+0x56>
 800810a:	1af2      	subs	r2, r6, r3
 800810c:	3a01      	subs	r2, #1
 800810e:	42b3      	cmp	r3, r6
 8008110:	bfa8      	it	ge
 8008112:	2200      	movge	r2, #0
 8008114:	1c5d      	adds	r5, r3, #1
 8008116:	18ab      	adds	r3, r5, r2
 8008118:	e7e1      	b.n	80080de <__sccl+0x32>
 800811a:	4610      	mov	r0, r2
 800811c:	e7da      	b.n	80080d4 <__sccl+0x28>

0800811e <__submore>:
 800811e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008122:	460c      	mov	r4, r1
 8008124:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008126:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800812a:	4299      	cmp	r1, r3
 800812c:	d11b      	bne.n	8008166 <__submore+0x48>
 800812e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008132:	f7fd fceb 	bl	8005b0c <_malloc_r>
 8008136:	b918      	cbnz	r0, 8008140 <__submore+0x22>
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008140:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008144:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008146:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800814a:	6360      	str	r0, [r4, #52]	@ 0x34
 800814c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008150:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008154:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008158:	7043      	strb	r3, [r0, #1]
 800815a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800815e:	7003      	strb	r3, [r0, #0]
 8008160:	6020      	str	r0, [r4, #0]
 8008162:	2000      	movs	r0, #0
 8008164:	e7ea      	b.n	800813c <__submore+0x1e>
 8008166:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008168:	0077      	lsls	r7, r6, #1
 800816a:	463a      	mov	r2, r7
 800816c:	f000 fd11 	bl	8008b92 <_realloc_r>
 8008170:	4605      	mov	r5, r0
 8008172:	2800      	cmp	r0, #0
 8008174:	d0e0      	beq.n	8008138 <__submore+0x1a>
 8008176:	eb00 0806 	add.w	r8, r0, r6
 800817a:	4601      	mov	r1, r0
 800817c:	4632      	mov	r2, r6
 800817e:	4640      	mov	r0, r8
 8008180:	f000 f976 	bl	8008470 <memcpy>
 8008184:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008188:	f8c4 8000 	str.w	r8, [r4]
 800818c:	e7e9      	b.n	8008162 <__submore+0x44>

0800818e <_ungetc_r>:
 800818e:	b570      	push	{r4, r5, r6, lr}
 8008190:	460d      	mov	r5, r1
 8008192:	1c69      	adds	r1, r5, #1
 8008194:	4606      	mov	r6, r0
 8008196:	4614      	mov	r4, r2
 8008198:	d01e      	beq.n	80081d8 <_ungetc_r+0x4a>
 800819a:	b118      	cbz	r0, 80081a4 <_ungetc_r+0x16>
 800819c:	6a03      	ldr	r3, [r0, #32]
 800819e:	b90b      	cbnz	r3, 80081a4 <_ungetc_r+0x16>
 80081a0:	f7fc fbec 	bl	800497c <__sinit>
 80081a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081a6:	07da      	lsls	r2, r3, #31
 80081a8:	d405      	bmi.n	80081b6 <_ungetc_r+0x28>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	059b      	lsls	r3, r3, #22
 80081ae:	d402      	bmi.n	80081b6 <_ungetc_r+0x28>
 80081b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081b2:	f7fc fdd2 	bl	8004d5a <__retarget_lock_acquire_recursive>
 80081b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ba:	f023 0220 	bic.w	r2, r3, #32
 80081be:	0758      	lsls	r0, r3, #29
 80081c0:	81a2      	strh	r2, [r4, #12]
 80081c2:	d422      	bmi.n	800820a <_ungetc_r+0x7c>
 80081c4:	06d9      	lsls	r1, r3, #27
 80081c6:	d40a      	bmi.n	80081de <_ungetc_r+0x50>
 80081c8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081ca:	07d2      	lsls	r2, r2, #31
 80081cc:	d404      	bmi.n	80081d8 <_ungetc_r+0x4a>
 80081ce:	0599      	lsls	r1, r3, #22
 80081d0:	d402      	bmi.n	80081d8 <_ungetc_r+0x4a>
 80081d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081d4:	f7fc fdc2 	bl	8004d5c <__retarget_lock_release_recursive>
 80081d8:	f04f 35ff 	mov.w	r5, #4294967295
 80081dc:	e046      	b.n	800826c <_ungetc_r+0xde>
 80081de:	071b      	lsls	r3, r3, #28
 80081e0:	d50f      	bpl.n	8008202 <_ungetc_r+0x74>
 80081e2:	4621      	mov	r1, r4
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7ff fe55 	bl	8007e94 <_fflush_r>
 80081ea:	b120      	cbz	r0, 80081f6 <_ungetc_r+0x68>
 80081ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081ee:	07d8      	lsls	r0, r3, #31
 80081f0:	d4f2      	bmi.n	80081d8 <_ungetc_r+0x4a>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	e7eb      	b.n	80081ce <_ungetc_r+0x40>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	60a0      	str	r0, [r4, #8]
 80081fa:	f023 0308 	bic.w	r3, r3, #8
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	61a0      	str	r0, [r4, #24]
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	f043 0304 	orr.w	r3, r3, #4
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800820c:	6862      	ldr	r2, [r4, #4]
 800820e:	b2ed      	uxtb	r5, r5
 8008210:	b1d3      	cbz	r3, 8008248 <_ungetc_r+0xba>
 8008212:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008214:	4293      	cmp	r3, r2
 8008216:	dc05      	bgt.n	8008224 <_ungetc_r+0x96>
 8008218:	4621      	mov	r1, r4
 800821a:	4630      	mov	r0, r6
 800821c:	f7ff ff7f 	bl	800811e <__submore>
 8008220:	2800      	cmp	r0, #0
 8008222:	d1e3      	bne.n	80081ec <_ungetc_r+0x5e>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	1e5a      	subs	r2, r3, #1
 8008228:	6022      	str	r2, [r4, #0]
 800822a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800822e:	6863      	ldr	r3, [r4, #4]
 8008230:	3301      	adds	r3, #1
 8008232:	6063      	str	r3, [r4, #4]
 8008234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008236:	07da      	lsls	r2, r3, #31
 8008238:	d418      	bmi.n	800826c <_ungetc_r+0xde>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	059b      	lsls	r3, r3, #22
 800823e:	d415      	bmi.n	800826c <_ungetc_r+0xde>
 8008240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008242:	f7fc fd8b 	bl	8004d5c <__retarget_lock_release_recursive>
 8008246:	e011      	b.n	800826c <_ungetc_r+0xde>
 8008248:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800824a:	6920      	ldr	r0, [r4, #16]
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	f001 0101 	and.w	r1, r1, #1
 8008252:	b168      	cbz	r0, 8008270 <_ungetc_r+0xe2>
 8008254:	4298      	cmp	r0, r3
 8008256:	d20b      	bcs.n	8008270 <_ungetc_r+0xe2>
 8008258:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800825c:	42a8      	cmp	r0, r5
 800825e:	d107      	bne.n	8008270 <_ungetc_r+0xe2>
 8008260:	3b01      	subs	r3, #1
 8008262:	3201      	adds	r2, #1
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	6062      	str	r2, [r4, #4]
 8008268:	2900      	cmp	r1, #0
 800826a:	d0e6      	beq.n	800823a <_ungetc_r+0xac>
 800826c:	4628      	mov	r0, r5
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008274:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008278:	6363      	str	r3, [r4, #52]	@ 0x34
 800827a:	2303      	movs	r3, #3
 800827c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800827e:	4623      	mov	r3, r4
 8008280:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	2301      	movs	r3, #1
 8008288:	6063      	str	r3, [r4, #4]
 800828a:	e7ed      	b.n	8008268 <_ungetc_r+0xda>

0800828c <__swbuf_r>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	460e      	mov	r6, r1
 8008290:	4614      	mov	r4, r2
 8008292:	4605      	mov	r5, r0
 8008294:	b118      	cbz	r0, 800829e <__swbuf_r+0x12>
 8008296:	6a03      	ldr	r3, [r0, #32]
 8008298:	b90b      	cbnz	r3, 800829e <__swbuf_r+0x12>
 800829a:	f7fc fb6f 	bl	800497c <__sinit>
 800829e:	69a3      	ldr	r3, [r4, #24]
 80082a0:	60a3      	str	r3, [r4, #8]
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	071a      	lsls	r2, r3, #28
 80082a6:	d501      	bpl.n	80082ac <__swbuf_r+0x20>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	b943      	cbnz	r3, 80082be <__swbuf_r+0x32>
 80082ac:	4621      	mov	r1, r4
 80082ae:	4628      	mov	r0, r5
 80082b0:	f000 f82a 	bl	8008308 <__swsetup_r>
 80082b4:	b118      	cbz	r0, 80082be <__swbuf_r+0x32>
 80082b6:	f04f 37ff 	mov.w	r7, #4294967295
 80082ba:	4638      	mov	r0, r7
 80082bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	6922      	ldr	r2, [r4, #16]
 80082c2:	b2f6      	uxtb	r6, r6
 80082c4:	1a98      	subs	r0, r3, r2
 80082c6:	6963      	ldr	r3, [r4, #20]
 80082c8:	4637      	mov	r7, r6
 80082ca:	4283      	cmp	r3, r0
 80082cc:	dc05      	bgt.n	80082da <__swbuf_r+0x4e>
 80082ce:	4621      	mov	r1, r4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7ff fddf 	bl	8007e94 <_fflush_r>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d1ed      	bne.n	80082b6 <__swbuf_r+0x2a>
 80082da:	68a3      	ldr	r3, [r4, #8]
 80082dc:	3b01      	subs	r3, #1
 80082de:	60a3      	str	r3, [r4, #8]
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	6022      	str	r2, [r4, #0]
 80082e6:	701e      	strb	r6, [r3, #0]
 80082e8:	6962      	ldr	r2, [r4, #20]
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d004      	beq.n	80082fa <__swbuf_r+0x6e>
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	07db      	lsls	r3, r3, #31
 80082f4:	d5e1      	bpl.n	80082ba <__swbuf_r+0x2e>
 80082f6:	2e0a      	cmp	r6, #10
 80082f8:	d1df      	bne.n	80082ba <__swbuf_r+0x2e>
 80082fa:	4621      	mov	r1, r4
 80082fc:	4628      	mov	r0, r5
 80082fe:	f7ff fdc9 	bl	8007e94 <_fflush_r>
 8008302:	2800      	cmp	r0, #0
 8008304:	d0d9      	beq.n	80082ba <__swbuf_r+0x2e>
 8008306:	e7d6      	b.n	80082b6 <__swbuf_r+0x2a>

08008308 <__swsetup_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4b29      	ldr	r3, [pc, #164]	@ (80083b0 <__swsetup_r+0xa8>)
 800830c:	4605      	mov	r5, r0
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	460c      	mov	r4, r1
 8008312:	b118      	cbz	r0, 800831c <__swsetup_r+0x14>
 8008314:	6a03      	ldr	r3, [r0, #32]
 8008316:	b90b      	cbnz	r3, 800831c <__swsetup_r+0x14>
 8008318:	f7fc fb30 	bl	800497c <__sinit>
 800831c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008320:	0719      	lsls	r1, r3, #28
 8008322:	d422      	bmi.n	800836a <__swsetup_r+0x62>
 8008324:	06da      	lsls	r2, r3, #27
 8008326:	d407      	bmi.n	8008338 <__swsetup_r+0x30>
 8008328:	2209      	movs	r2, #9
 800832a:	602a      	str	r2, [r5, #0]
 800832c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	e033      	b.n	80083a0 <__swsetup_r+0x98>
 8008338:	0758      	lsls	r0, r3, #29
 800833a:	d512      	bpl.n	8008362 <__swsetup_r+0x5a>
 800833c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800833e:	b141      	cbz	r1, 8008352 <__swsetup_r+0x4a>
 8008340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008344:	4299      	cmp	r1, r3
 8008346:	d002      	beq.n	800834e <__swsetup_r+0x46>
 8008348:	4628      	mov	r0, r5
 800834a:	f7fd fb6d 	bl	8005a28 <_free_r>
 800834e:	2300      	movs	r3, #0
 8008350:	6363      	str	r3, [r4, #52]	@ 0x34
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	2300      	movs	r3, #0
 800835c:	6063      	str	r3, [r4, #4]
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f043 0308 	orr.w	r3, r3, #8
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	b94b      	cbnz	r3, 8008382 <__swsetup_r+0x7a>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008378:	d003      	beq.n	8008382 <__swsetup_r+0x7a>
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f7ff fdd6 	bl	8007f2e <__smakebuf_r>
 8008382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008386:	f013 0201 	ands.w	r2, r3, #1
 800838a:	d00a      	beq.n	80083a2 <__swsetup_r+0x9a>
 800838c:	2200      	movs	r2, #0
 800838e:	60a2      	str	r2, [r4, #8]
 8008390:	6962      	ldr	r2, [r4, #20]
 8008392:	4252      	negs	r2, r2
 8008394:	61a2      	str	r2, [r4, #24]
 8008396:	6922      	ldr	r2, [r4, #16]
 8008398:	b942      	cbnz	r2, 80083ac <__swsetup_r+0xa4>
 800839a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800839e:	d1c5      	bne.n	800832c <__swsetup_r+0x24>
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	0799      	lsls	r1, r3, #30
 80083a4:	bf58      	it	pl
 80083a6:	6962      	ldrpl	r2, [r4, #20]
 80083a8:	60a2      	str	r2, [r4, #8]
 80083aa:	e7f4      	b.n	8008396 <__swsetup_r+0x8e>
 80083ac:	2000      	movs	r0, #0
 80083ae:	e7f7      	b.n	80083a0 <__swsetup_r+0x98>
 80083b0:	20000020 	.word	0x20000020

080083b4 <memmove>:
 80083b4:	4288      	cmp	r0, r1
 80083b6:	b510      	push	{r4, lr}
 80083b8:	eb01 0402 	add.w	r4, r1, r2
 80083bc:	d902      	bls.n	80083c4 <memmove+0x10>
 80083be:	4284      	cmp	r4, r0
 80083c0:	4623      	mov	r3, r4
 80083c2:	d807      	bhi.n	80083d4 <memmove+0x20>
 80083c4:	1e43      	subs	r3, r0, #1
 80083c6:	42a1      	cmp	r1, r4
 80083c8:	d008      	beq.n	80083dc <memmove+0x28>
 80083ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083d2:	e7f8      	b.n	80083c6 <memmove+0x12>
 80083d4:	4601      	mov	r1, r0
 80083d6:	4402      	add	r2, r0
 80083d8:	428a      	cmp	r2, r1
 80083da:	d100      	bne.n	80083de <memmove+0x2a>
 80083dc:	bd10      	pop	{r4, pc}
 80083de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083e6:	e7f7      	b.n	80083d8 <memmove+0x24>

080083e8 <strncmp>:
 80083e8:	b510      	push	{r4, lr}
 80083ea:	b16a      	cbz	r2, 8008408 <strncmp+0x20>
 80083ec:	3901      	subs	r1, #1
 80083ee:	1884      	adds	r4, r0, r2
 80083f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d103      	bne.n	8008404 <strncmp+0x1c>
 80083fc:	42a0      	cmp	r0, r4
 80083fe:	d001      	beq.n	8008404 <strncmp+0x1c>
 8008400:	2a00      	cmp	r2, #0
 8008402:	d1f5      	bne.n	80083f0 <strncmp+0x8>
 8008404:	1ad0      	subs	r0, r2, r3
 8008406:	bd10      	pop	{r4, pc}
 8008408:	4610      	mov	r0, r2
 800840a:	e7fc      	b.n	8008406 <strncmp+0x1e>

0800840c <_fstat_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	2300      	movs	r3, #0
 8008410:	4d06      	ldr	r5, [pc, #24]	@ (800842c <_fstat_r+0x20>)
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f7f9 fbc1 	bl	8001ba0 <_fstat>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d102      	bne.n	8008428 <_fstat_r+0x1c>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b103      	cbz	r3, 8008428 <_fstat_r+0x1c>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	200003cc 	.word	0x200003cc

08008430 <_isatty_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4d05      	ldr	r5, [pc, #20]	@ (800844c <_isatty_r+0x1c>)
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	f7f9 fbbf 	bl	8001bbe <_isatty>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_isatty_r+0x1a>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_isatty_r+0x1a>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	200003cc 	.word	0x200003cc

08008450 <_sbrk_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	2300      	movs	r3, #0
 8008454:	4d05      	ldr	r5, [pc, #20]	@ (800846c <_sbrk_r+0x1c>)
 8008456:	4604      	mov	r4, r0
 8008458:	4608      	mov	r0, r1
 800845a:	602b      	str	r3, [r5, #0]
 800845c:	f7f9 fbc6 	bl	8001bec <_sbrk>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_sbrk_r+0x1a>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_sbrk_r+0x1a>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	200003cc 	.word	0x200003cc

08008470 <memcpy>:
 8008470:	440a      	add	r2, r1
 8008472:	4291      	cmp	r1, r2
 8008474:	f100 33ff 	add.w	r3, r0, #4294967295
 8008478:	d100      	bne.n	800847c <memcpy+0xc>
 800847a:	4770      	bx	lr
 800847c:	b510      	push	{r4, lr}
 800847e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008482:	4291      	cmp	r1, r2
 8008484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008488:	d1f9      	bne.n	800847e <memcpy+0xe>
 800848a:	bd10      	pop	{r4, pc}

0800848c <nan>:
 800848c:	2000      	movs	r0, #0
 800848e:	4901      	ldr	r1, [pc, #4]	@ (8008494 <nan+0x8>)
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	7ff80000 	.word	0x7ff80000

08008498 <__assert_func>:
 8008498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800849a:	4614      	mov	r4, r2
 800849c:	461a      	mov	r2, r3
 800849e:	4b09      	ldr	r3, [pc, #36]	@ (80084c4 <__assert_func+0x2c>)
 80084a0:	4605      	mov	r5, r0
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68d8      	ldr	r0, [r3, #12]
 80084a6:	b954      	cbnz	r4, 80084be <__assert_func+0x26>
 80084a8:	4b07      	ldr	r3, [pc, #28]	@ (80084c8 <__assert_func+0x30>)
 80084aa:	461c      	mov	r4, r3
 80084ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084b0:	9100      	str	r1, [sp, #0]
 80084b2:	462b      	mov	r3, r5
 80084b4:	4905      	ldr	r1, [pc, #20]	@ (80084cc <__assert_func+0x34>)
 80084b6:	f000 fc19 	bl	8008cec <fiprintf>
 80084ba:	f000 fc29 	bl	8008d10 <abort>
 80084be:	4b04      	ldr	r3, [pc, #16]	@ (80084d0 <__assert_func+0x38>)
 80084c0:	e7f4      	b.n	80084ac <__assert_func+0x14>
 80084c2:	bf00      	nop
 80084c4:	20000020 	.word	0x20000020
 80084c8:	080092d0 	.word	0x080092d0
 80084cc:	080092a2 	.word	0x080092a2
 80084d0:	08009295 	.word	0x08009295

080084d4 <_calloc_r>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	fba1 5402 	umull	r5, r4, r1, r2
 80084da:	b93c      	cbnz	r4, 80084ec <_calloc_r+0x18>
 80084dc:	4629      	mov	r1, r5
 80084de:	f7fd fb15 	bl	8005b0c <_malloc_r>
 80084e2:	4606      	mov	r6, r0
 80084e4:	b928      	cbnz	r0, 80084f2 <_calloc_r+0x1e>
 80084e6:	2600      	movs	r6, #0
 80084e8:	4630      	mov	r0, r6
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	220c      	movs	r2, #12
 80084ee:	6002      	str	r2, [r0, #0]
 80084f0:	e7f9      	b.n	80084e6 <_calloc_r+0x12>
 80084f2:	462a      	mov	r2, r5
 80084f4:	4621      	mov	r1, r4
 80084f6:	f7fc fbb2 	bl	8004c5e <memset>
 80084fa:	e7f5      	b.n	80084e8 <_calloc_r+0x14>

080084fc <rshift>:
 80084fc:	6903      	ldr	r3, [r0, #16]
 80084fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008502:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008506:	f100 0414 	add.w	r4, r0, #20
 800850a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800850e:	dd46      	ble.n	800859e <rshift+0xa2>
 8008510:	f011 011f 	ands.w	r1, r1, #31
 8008514:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008518:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800851c:	d10c      	bne.n	8008538 <rshift+0x3c>
 800851e:	4629      	mov	r1, r5
 8008520:	f100 0710 	add.w	r7, r0, #16
 8008524:	42b1      	cmp	r1, r6
 8008526:	d335      	bcc.n	8008594 <rshift+0x98>
 8008528:	1a9b      	subs	r3, r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	1eea      	subs	r2, r5, #3
 800852e:	4296      	cmp	r6, r2
 8008530:	bf38      	it	cc
 8008532:	2300      	movcc	r3, #0
 8008534:	4423      	add	r3, r4
 8008536:	e015      	b.n	8008564 <rshift+0x68>
 8008538:	46a1      	mov	r9, r4
 800853a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800853e:	f1c1 0820 	rsb	r8, r1, #32
 8008542:	40cf      	lsrs	r7, r1
 8008544:	f105 0e04 	add.w	lr, r5, #4
 8008548:	4576      	cmp	r6, lr
 800854a:	46f4      	mov	ip, lr
 800854c:	d816      	bhi.n	800857c <rshift+0x80>
 800854e:	1a9a      	subs	r2, r3, r2
 8008550:	0092      	lsls	r2, r2, #2
 8008552:	3a04      	subs	r2, #4
 8008554:	3501      	adds	r5, #1
 8008556:	42ae      	cmp	r6, r5
 8008558:	bf38      	it	cc
 800855a:	2200      	movcc	r2, #0
 800855c:	18a3      	adds	r3, r4, r2
 800855e:	50a7      	str	r7, [r4, r2]
 8008560:	b107      	cbz	r7, 8008564 <rshift+0x68>
 8008562:	3304      	adds	r3, #4
 8008564:	42a3      	cmp	r3, r4
 8008566:	eba3 0204 	sub.w	r2, r3, r4
 800856a:	bf08      	it	eq
 800856c:	2300      	moveq	r3, #0
 800856e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008572:	6102      	str	r2, [r0, #16]
 8008574:	bf08      	it	eq
 8008576:	6143      	streq	r3, [r0, #20]
 8008578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800857c:	f8dc c000 	ldr.w	ip, [ip]
 8008580:	fa0c fc08 	lsl.w	ip, ip, r8
 8008584:	ea4c 0707 	orr.w	r7, ip, r7
 8008588:	f849 7b04 	str.w	r7, [r9], #4
 800858c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008590:	40cf      	lsrs	r7, r1
 8008592:	e7d9      	b.n	8008548 <rshift+0x4c>
 8008594:	f851 cb04 	ldr.w	ip, [r1], #4
 8008598:	f847 cf04 	str.w	ip, [r7, #4]!
 800859c:	e7c2      	b.n	8008524 <rshift+0x28>
 800859e:	4623      	mov	r3, r4
 80085a0:	e7e0      	b.n	8008564 <rshift+0x68>

080085a2 <__hexdig_fun>:
 80085a2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80085a6:	2b09      	cmp	r3, #9
 80085a8:	d802      	bhi.n	80085b0 <__hexdig_fun+0xe>
 80085aa:	3820      	subs	r0, #32
 80085ac:	b2c0      	uxtb	r0, r0
 80085ae:	4770      	bx	lr
 80085b0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80085b4:	2b05      	cmp	r3, #5
 80085b6:	d801      	bhi.n	80085bc <__hexdig_fun+0x1a>
 80085b8:	3847      	subs	r0, #71	@ 0x47
 80085ba:	e7f7      	b.n	80085ac <__hexdig_fun+0xa>
 80085bc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	d801      	bhi.n	80085c8 <__hexdig_fun+0x26>
 80085c4:	3827      	subs	r0, #39	@ 0x27
 80085c6:	e7f1      	b.n	80085ac <__hexdig_fun+0xa>
 80085c8:	2000      	movs	r0, #0
 80085ca:	4770      	bx	lr

080085cc <__gethex>:
 80085cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d0:	468a      	mov	sl, r1
 80085d2:	4690      	mov	r8, r2
 80085d4:	b085      	sub	sp, #20
 80085d6:	9302      	str	r3, [sp, #8]
 80085d8:	680b      	ldr	r3, [r1, #0]
 80085da:	9001      	str	r0, [sp, #4]
 80085dc:	1c9c      	adds	r4, r3, #2
 80085de:	46a1      	mov	r9, r4
 80085e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80085e4:	2830      	cmp	r0, #48	@ 0x30
 80085e6:	d0fa      	beq.n	80085de <__gethex+0x12>
 80085e8:	eba9 0303 	sub.w	r3, r9, r3
 80085ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80085f0:	f7ff ffd7 	bl	80085a2 <__hexdig_fun>
 80085f4:	4605      	mov	r5, r0
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d168      	bne.n	80086cc <__gethex+0x100>
 80085fa:	2201      	movs	r2, #1
 80085fc:	4648      	mov	r0, r9
 80085fe:	499f      	ldr	r1, [pc, #636]	@ (800887c <__gethex+0x2b0>)
 8008600:	f7ff fef2 	bl	80083e8 <strncmp>
 8008604:	4607      	mov	r7, r0
 8008606:	2800      	cmp	r0, #0
 8008608:	d167      	bne.n	80086da <__gethex+0x10e>
 800860a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800860e:	4626      	mov	r6, r4
 8008610:	f7ff ffc7 	bl	80085a2 <__hexdig_fun>
 8008614:	2800      	cmp	r0, #0
 8008616:	d062      	beq.n	80086de <__gethex+0x112>
 8008618:	4623      	mov	r3, r4
 800861a:	7818      	ldrb	r0, [r3, #0]
 800861c:	4699      	mov	r9, r3
 800861e:	2830      	cmp	r0, #48	@ 0x30
 8008620:	f103 0301 	add.w	r3, r3, #1
 8008624:	d0f9      	beq.n	800861a <__gethex+0x4e>
 8008626:	f7ff ffbc 	bl	80085a2 <__hexdig_fun>
 800862a:	fab0 f580 	clz	r5, r0
 800862e:	f04f 0b01 	mov.w	fp, #1
 8008632:	096d      	lsrs	r5, r5, #5
 8008634:	464a      	mov	r2, r9
 8008636:	4616      	mov	r6, r2
 8008638:	7830      	ldrb	r0, [r6, #0]
 800863a:	3201      	adds	r2, #1
 800863c:	f7ff ffb1 	bl	80085a2 <__hexdig_fun>
 8008640:	2800      	cmp	r0, #0
 8008642:	d1f8      	bne.n	8008636 <__gethex+0x6a>
 8008644:	2201      	movs	r2, #1
 8008646:	4630      	mov	r0, r6
 8008648:	498c      	ldr	r1, [pc, #560]	@ (800887c <__gethex+0x2b0>)
 800864a:	f7ff fecd 	bl	80083e8 <strncmp>
 800864e:	2800      	cmp	r0, #0
 8008650:	d13f      	bne.n	80086d2 <__gethex+0x106>
 8008652:	b944      	cbnz	r4, 8008666 <__gethex+0x9a>
 8008654:	1c74      	adds	r4, r6, #1
 8008656:	4622      	mov	r2, r4
 8008658:	4616      	mov	r6, r2
 800865a:	7830      	ldrb	r0, [r6, #0]
 800865c:	3201      	adds	r2, #1
 800865e:	f7ff ffa0 	bl	80085a2 <__hexdig_fun>
 8008662:	2800      	cmp	r0, #0
 8008664:	d1f8      	bne.n	8008658 <__gethex+0x8c>
 8008666:	1ba4      	subs	r4, r4, r6
 8008668:	00a7      	lsls	r7, r4, #2
 800866a:	7833      	ldrb	r3, [r6, #0]
 800866c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008670:	2b50      	cmp	r3, #80	@ 0x50
 8008672:	d13e      	bne.n	80086f2 <__gethex+0x126>
 8008674:	7873      	ldrb	r3, [r6, #1]
 8008676:	2b2b      	cmp	r3, #43	@ 0x2b
 8008678:	d033      	beq.n	80086e2 <__gethex+0x116>
 800867a:	2b2d      	cmp	r3, #45	@ 0x2d
 800867c:	d034      	beq.n	80086e8 <__gethex+0x11c>
 800867e:	2400      	movs	r4, #0
 8008680:	1c71      	adds	r1, r6, #1
 8008682:	7808      	ldrb	r0, [r1, #0]
 8008684:	f7ff ff8d 	bl	80085a2 <__hexdig_fun>
 8008688:	1e43      	subs	r3, r0, #1
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b18      	cmp	r3, #24
 800868e:	d830      	bhi.n	80086f2 <__gethex+0x126>
 8008690:	f1a0 0210 	sub.w	r2, r0, #16
 8008694:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008698:	f7ff ff83 	bl	80085a2 <__hexdig_fun>
 800869c:	f100 3cff 	add.w	ip, r0, #4294967295
 80086a0:	fa5f fc8c 	uxtb.w	ip, ip
 80086a4:	f1bc 0f18 	cmp.w	ip, #24
 80086a8:	f04f 030a 	mov.w	r3, #10
 80086ac:	d91e      	bls.n	80086ec <__gethex+0x120>
 80086ae:	b104      	cbz	r4, 80086b2 <__gethex+0xe6>
 80086b0:	4252      	negs	r2, r2
 80086b2:	4417      	add	r7, r2
 80086b4:	f8ca 1000 	str.w	r1, [sl]
 80086b8:	b1ed      	cbz	r5, 80086f6 <__gethex+0x12a>
 80086ba:	f1bb 0f00 	cmp.w	fp, #0
 80086be:	bf0c      	ite	eq
 80086c0:	2506      	moveq	r5, #6
 80086c2:	2500      	movne	r5, #0
 80086c4:	4628      	mov	r0, r5
 80086c6:	b005      	add	sp, #20
 80086c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086cc:	2500      	movs	r5, #0
 80086ce:	462c      	mov	r4, r5
 80086d0:	e7b0      	b.n	8008634 <__gethex+0x68>
 80086d2:	2c00      	cmp	r4, #0
 80086d4:	d1c7      	bne.n	8008666 <__gethex+0x9a>
 80086d6:	4627      	mov	r7, r4
 80086d8:	e7c7      	b.n	800866a <__gethex+0x9e>
 80086da:	464e      	mov	r6, r9
 80086dc:	462f      	mov	r7, r5
 80086de:	2501      	movs	r5, #1
 80086e0:	e7c3      	b.n	800866a <__gethex+0x9e>
 80086e2:	2400      	movs	r4, #0
 80086e4:	1cb1      	adds	r1, r6, #2
 80086e6:	e7cc      	b.n	8008682 <__gethex+0xb6>
 80086e8:	2401      	movs	r4, #1
 80086ea:	e7fb      	b.n	80086e4 <__gethex+0x118>
 80086ec:	fb03 0002 	mla	r0, r3, r2, r0
 80086f0:	e7ce      	b.n	8008690 <__gethex+0xc4>
 80086f2:	4631      	mov	r1, r6
 80086f4:	e7de      	b.n	80086b4 <__gethex+0xe8>
 80086f6:	4629      	mov	r1, r5
 80086f8:	eba6 0309 	sub.w	r3, r6, r9
 80086fc:	3b01      	subs	r3, #1
 80086fe:	2b07      	cmp	r3, #7
 8008700:	dc0a      	bgt.n	8008718 <__gethex+0x14c>
 8008702:	9801      	ldr	r0, [sp, #4]
 8008704:	f7fd fa8e 	bl	8005c24 <_Balloc>
 8008708:	4604      	mov	r4, r0
 800870a:	b940      	cbnz	r0, 800871e <__gethex+0x152>
 800870c:	4602      	mov	r2, r0
 800870e:	21e4      	movs	r1, #228	@ 0xe4
 8008710:	4b5b      	ldr	r3, [pc, #364]	@ (8008880 <__gethex+0x2b4>)
 8008712:	485c      	ldr	r0, [pc, #368]	@ (8008884 <__gethex+0x2b8>)
 8008714:	f7ff fec0 	bl	8008498 <__assert_func>
 8008718:	3101      	adds	r1, #1
 800871a:	105b      	asrs	r3, r3, #1
 800871c:	e7ef      	b.n	80086fe <__gethex+0x132>
 800871e:	2300      	movs	r3, #0
 8008720:	f100 0a14 	add.w	sl, r0, #20
 8008724:	4655      	mov	r5, sl
 8008726:	469b      	mov	fp, r3
 8008728:	45b1      	cmp	r9, r6
 800872a:	d337      	bcc.n	800879c <__gethex+0x1d0>
 800872c:	f845 bb04 	str.w	fp, [r5], #4
 8008730:	eba5 050a 	sub.w	r5, r5, sl
 8008734:	10ad      	asrs	r5, r5, #2
 8008736:	6125      	str	r5, [r4, #16]
 8008738:	4658      	mov	r0, fp
 800873a:	f7fd fb65 	bl	8005e08 <__hi0bits>
 800873e:	016d      	lsls	r5, r5, #5
 8008740:	f8d8 6000 	ldr.w	r6, [r8]
 8008744:	1a2d      	subs	r5, r5, r0
 8008746:	42b5      	cmp	r5, r6
 8008748:	dd54      	ble.n	80087f4 <__gethex+0x228>
 800874a:	1bad      	subs	r5, r5, r6
 800874c:	4629      	mov	r1, r5
 800874e:	4620      	mov	r0, r4
 8008750:	f7fd feed 	bl	800652e <__any_on>
 8008754:	4681      	mov	r9, r0
 8008756:	b178      	cbz	r0, 8008778 <__gethex+0x1ac>
 8008758:	f04f 0901 	mov.w	r9, #1
 800875c:	1e6b      	subs	r3, r5, #1
 800875e:	1159      	asrs	r1, r3, #5
 8008760:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008764:	f003 021f 	and.w	r2, r3, #31
 8008768:	fa09 f202 	lsl.w	r2, r9, r2
 800876c:	420a      	tst	r2, r1
 800876e:	d003      	beq.n	8008778 <__gethex+0x1ac>
 8008770:	454b      	cmp	r3, r9
 8008772:	dc36      	bgt.n	80087e2 <__gethex+0x216>
 8008774:	f04f 0902 	mov.w	r9, #2
 8008778:	4629      	mov	r1, r5
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff febe 	bl	80084fc <rshift>
 8008780:	442f      	add	r7, r5
 8008782:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008786:	42bb      	cmp	r3, r7
 8008788:	da42      	bge.n	8008810 <__gethex+0x244>
 800878a:	4621      	mov	r1, r4
 800878c:	9801      	ldr	r0, [sp, #4]
 800878e:	f7fd fa89 	bl	8005ca4 <_Bfree>
 8008792:	2300      	movs	r3, #0
 8008794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008796:	25a3      	movs	r5, #163	@ 0xa3
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	e793      	b.n	80086c4 <__gethex+0xf8>
 800879c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80087a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80087a2:	d012      	beq.n	80087ca <__gethex+0x1fe>
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	d104      	bne.n	80087b2 <__gethex+0x1e6>
 80087a8:	f845 bb04 	str.w	fp, [r5], #4
 80087ac:	f04f 0b00 	mov.w	fp, #0
 80087b0:	465b      	mov	r3, fp
 80087b2:	7830      	ldrb	r0, [r6, #0]
 80087b4:	9303      	str	r3, [sp, #12]
 80087b6:	f7ff fef4 	bl	80085a2 <__hexdig_fun>
 80087ba:	9b03      	ldr	r3, [sp, #12]
 80087bc:	f000 000f 	and.w	r0, r0, #15
 80087c0:	4098      	lsls	r0, r3
 80087c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80087c6:	3304      	adds	r3, #4
 80087c8:	e7ae      	b.n	8008728 <__gethex+0x15c>
 80087ca:	45b1      	cmp	r9, r6
 80087cc:	d8ea      	bhi.n	80087a4 <__gethex+0x1d8>
 80087ce:	2201      	movs	r2, #1
 80087d0:	4630      	mov	r0, r6
 80087d2:	492a      	ldr	r1, [pc, #168]	@ (800887c <__gethex+0x2b0>)
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	f7ff fe07 	bl	80083e8 <strncmp>
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	2800      	cmp	r0, #0
 80087de:	d1e1      	bne.n	80087a4 <__gethex+0x1d8>
 80087e0:	e7a2      	b.n	8008728 <__gethex+0x15c>
 80087e2:	4620      	mov	r0, r4
 80087e4:	1ea9      	subs	r1, r5, #2
 80087e6:	f7fd fea2 	bl	800652e <__any_on>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d0c2      	beq.n	8008774 <__gethex+0x1a8>
 80087ee:	f04f 0903 	mov.w	r9, #3
 80087f2:	e7c1      	b.n	8008778 <__gethex+0x1ac>
 80087f4:	da09      	bge.n	800880a <__gethex+0x23e>
 80087f6:	1b75      	subs	r5, r6, r5
 80087f8:	4621      	mov	r1, r4
 80087fa:	462a      	mov	r2, r5
 80087fc:	9801      	ldr	r0, [sp, #4]
 80087fe:	f7fd fc67 	bl	80060d0 <__lshift>
 8008802:	4604      	mov	r4, r0
 8008804:	1b7f      	subs	r7, r7, r5
 8008806:	f100 0a14 	add.w	sl, r0, #20
 800880a:	f04f 0900 	mov.w	r9, #0
 800880e:	e7b8      	b.n	8008782 <__gethex+0x1b6>
 8008810:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008814:	42bd      	cmp	r5, r7
 8008816:	dd6f      	ble.n	80088f8 <__gethex+0x32c>
 8008818:	1bed      	subs	r5, r5, r7
 800881a:	42ae      	cmp	r6, r5
 800881c:	dc34      	bgt.n	8008888 <__gethex+0x2bc>
 800881e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d022      	beq.n	800886c <__gethex+0x2a0>
 8008826:	2b03      	cmp	r3, #3
 8008828:	d024      	beq.n	8008874 <__gethex+0x2a8>
 800882a:	2b01      	cmp	r3, #1
 800882c:	d115      	bne.n	800885a <__gethex+0x28e>
 800882e:	42ae      	cmp	r6, r5
 8008830:	d113      	bne.n	800885a <__gethex+0x28e>
 8008832:	2e01      	cmp	r6, #1
 8008834:	d10b      	bne.n	800884e <__gethex+0x282>
 8008836:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800883a:	9a02      	ldr	r2, [sp, #8]
 800883c:	2562      	movs	r5, #98	@ 0x62
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	2301      	movs	r3, #1
 8008842:	6123      	str	r3, [r4, #16]
 8008844:	f8ca 3000 	str.w	r3, [sl]
 8008848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800884a:	601c      	str	r4, [r3, #0]
 800884c:	e73a      	b.n	80086c4 <__gethex+0xf8>
 800884e:	4620      	mov	r0, r4
 8008850:	1e71      	subs	r1, r6, #1
 8008852:	f7fd fe6c 	bl	800652e <__any_on>
 8008856:	2800      	cmp	r0, #0
 8008858:	d1ed      	bne.n	8008836 <__gethex+0x26a>
 800885a:	4621      	mov	r1, r4
 800885c:	9801      	ldr	r0, [sp, #4]
 800885e:	f7fd fa21 	bl	8005ca4 <_Bfree>
 8008862:	2300      	movs	r3, #0
 8008864:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008866:	2550      	movs	r5, #80	@ 0x50
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	e72b      	b.n	80086c4 <__gethex+0xf8>
 800886c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f3      	bne.n	800885a <__gethex+0x28e>
 8008872:	e7e0      	b.n	8008836 <__gethex+0x26a>
 8008874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1dd      	bne.n	8008836 <__gethex+0x26a>
 800887a:	e7ee      	b.n	800885a <__gethex+0x28e>
 800887c:	08009108 	.word	0x08009108
 8008880:	08008f9f 	.word	0x08008f9f
 8008884:	080092d1 	.word	0x080092d1
 8008888:	1e6f      	subs	r7, r5, #1
 800888a:	f1b9 0f00 	cmp.w	r9, #0
 800888e:	d130      	bne.n	80088f2 <__gethex+0x326>
 8008890:	b127      	cbz	r7, 800889c <__gethex+0x2d0>
 8008892:	4639      	mov	r1, r7
 8008894:	4620      	mov	r0, r4
 8008896:	f7fd fe4a 	bl	800652e <__any_on>
 800889a:	4681      	mov	r9, r0
 800889c:	2301      	movs	r3, #1
 800889e:	4629      	mov	r1, r5
 80088a0:	1b76      	subs	r6, r6, r5
 80088a2:	2502      	movs	r5, #2
 80088a4:	117a      	asrs	r2, r7, #5
 80088a6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80088aa:	f007 071f 	and.w	r7, r7, #31
 80088ae:	40bb      	lsls	r3, r7
 80088b0:	4213      	tst	r3, r2
 80088b2:	4620      	mov	r0, r4
 80088b4:	bf18      	it	ne
 80088b6:	f049 0902 	orrne.w	r9, r9, #2
 80088ba:	f7ff fe1f 	bl	80084fc <rshift>
 80088be:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80088c2:	f1b9 0f00 	cmp.w	r9, #0
 80088c6:	d047      	beq.n	8008958 <__gethex+0x38c>
 80088c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d015      	beq.n	80088fc <__gethex+0x330>
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d017      	beq.n	8008904 <__gethex+0x338>
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d109      	bne.n	80088ec <__gethex+0x320>
 80088d8:	f019 0f02 	tst.w	r9, #2
 80088dc:	d006      	beq.n	80088ec <__gethex+0x320>
 80088de:	f8da 3000 	ldr.w	r3, [sl]
 80088e2:	ea49 0903 	orr.w	r9, r9, r3
 80088e6:	f019 0f01 	tst.w	r9, #1
 80088ea:	d10e      	bne.n	800890a <__gethex+0x33e>
 80088ec:	f045 0510 	orr.w	r5, r5, #16
 80088f0:	e032      	b.n	8008958 <__gethex+0x38c>
 80088f2:	f04f 0901 	mov.w	r9, #1
 80088f6:	e7d1      	b.n	800889c <__gethex+0x2d0>
 80088f8:	2501      	movs	r5, #1
 80088fa:	e7e2      	b.n	80088c2 <__gethex+0x2f6>
 80088fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088fe:	f1c3 0301 	rsb	r3, r3, #1
 8008902:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f0      	beq.n	80088ec <__gethex+0x320>
 800890a:	f04f 0c00 	mov.w	ip, #0
 800890e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008912:	f104 0314 	add.w	r3, r4, #20
 8008916:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800891a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800891e:	4618      	mov	r0, r3
 8008920:	f853 2b04 	ldr.w	r2, [r3], #4
 8008924:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008928:	d01b      	beq.n	8008962 <__gethex+0x396>
 800892a:	3201      	adds	r2, #1
 800892c:	6002      	str	r2, [r0, #0]
 800892e:	2d02      	cmp	r5, #2
 8008930:	f104 0314 	add.w	r3, r4, #20
 8008934:	d13c      	bne.n	80089b0 <__gethex+0x3e4>
 8008936:	f8d8 2000 	ldr.w	r2, [r8]
 800893a:	3a01      	subs	r2, #1
 800893c:	42b2      	cmp	r2, r6
 800893e:	d109      	bne.n	8008954 <__gethex+0x388>
 8008940:	2201      	movs	r2, #1
 8008942:	1171      	asrs	r1, r6, #5
 8008944:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008948:	f006 061f 	and.w	r6, r6, #31
 800894c:	fa02 f606 	lsl.w	r6, r2, r6
 8008950:	421e      	tst	r6, r3
 8008952:	d13a      	bne.n	80089ca <__gethex+0x3fe>
 8008954:	f045 0520 	orr.w	r5, r5, #32
 8008958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800895a:	601c      	str	r4, [r3, #0]
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	601f      	str	r7, [r3, #0]
 8008960:	e6b0      	b.n	80086c4 <__gethex+0xf8>
 8008962:	4299      	cmp	r1, r3
 8008964:	f843 cc04 	str.w	ip, [r3, #-4]
 8008968:	d8d9      	bhi.n	800891e <__gethex+0x352>
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	459b      	cmp	fp, r3
 800896e:	db17      	blt.n	80089a0 <__gethex+0x3d4>
 8008970:	6861      	ldr	r1, [r4, #4]
 8008972:	9801      	ldr	r0, [sp, #4]
 8008974:	3101      	adds	r1, #1
 8008976:	f7fd f955 	bl	8005c24 <_Balloc>
 800897a:	4681      	mov	r9, r0
 800897c:	b918      	cbnz	r0, 8008986 <__gethex+0x3ba>
 800897e:	4602      	mov	r2, r0
 8008980:	2184      	movs	r1, #132	@ 0x84
 8008982:	4b19      	ldr	r3, [pc, #100]	@ (80089e8 <__gethex+0x41c>)
 8008984:	e6c5      	b.n	8008712 <__gethex+0x146>
 8008986:	6922      	ldr	r2, [r4, #16]
 8008988:	f104 010c 	add.w	r1, r4, #12
 800898c:	3202      	adds	r2, #2
 800898e:	0092      	lsls	r2, r2, #2
 8008990:	300c      	adds	r0, #12
 8008992:	f7ff fd6d 	bl	8008470 <memcpy>
 8008996:	4621      	mov	r1, r4
 8008998:	9801      	ldr	r0, [sp, #4]
 800899a:	f7fd f983 	bl	8005ca4 <_Bfree>
 800899e:	464c      	mov	r4, r9
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	6122      	str	r2, [r4, #16]
 80089a6:	2201      	movs	r2, #1
 80089a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089ac:	615a      	str	r2, [r3, #20]
 80089ae:	e7be      	b.n	800892e <__gethex+0x362>
 80089b0:	6922      	ldr	r2, [r4, #16]
 80089b2:	455a      	cmp	r2, fp
 80089b4:	dd0b      	ble.n	80089ce <__gethex+0x402>
 80089b6:	2101      	movs	r1, #1
 80089b8:	4620      	mov	r0, r4
 80089ba:	f7ff fd9f 	bl	80084fc <rshift>
 80089be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089c2:	3701      	adds	r7, #1
 80089c4:	42bb      	cmp	r3, r7
 80089c6:	f6ff aee0 	blt.w	800878a <__gethex+0x1be>
 80089ca:	2501      	movs	r5, #1
 80089cc:	e7c2      	b.n	8008954 <__gethex+0x388>
 80089ce:	f016 061f 	ands.w	r6, r6, #31
 80089d2:	d0fa      	beq.n	80089ca <__gethex+0x3fe>
 80089d4:	4453      	add	r3, sl
 80089d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80089da:	f7fd fa15 	bl	8005e08 <__hi0bits>
 80089de:	f1c6 0620 	rsb	r6, r6, #32
 80089e2:	42b0      	cmp	r0, r6
 80089e4:	dbe7      	blt.n	80089b6 <__gethex+0x3ea>
 80089e6:	e7f0      	b.n	80089ca <__gethex+0x3fe>
 80089e8:	08008f9f 	.word	0x08008f9f

080089ec <L_shift>:
 80089ec:	f1c2 0208 	rsb	r2, r2, #8
 80089f0:	0092      	lsls	r2, r2, #2
 80089f2:	b570      	push	{r4, r5, r6, lr}
 80089f4:	f1c2 0620 	rsb	r6, r2, #32
 80089f8:	6843      	ldr	r3, [r0, #4]
 80089fa:	6804      	ldr	r4, [r0, #0]
 80089fc:	fa03 f506 	lsl.w	r5, r3, r6
 8008a00:	432c      	orrs	r4, r5
 8008a02:	40d3      	lsrs	r3, r2
 8008a04:	6004      	str	r4, [r0, #0]
 8008a06:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a0a:	4288      	cmp	r0, r1
 8008a0c:	d3f4      	bcc.n	80089f8 <L_shift+0xc>
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}

08008a10 <__match>:
 8008a10:	b530      	push	{r4, r5, lr}
 8008a12:	6803      	ldr	r3, [r0, #0]
 8008a14:	3301      	adds	r3, #1
 8008a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a1a:	b914      	cbnz	r4, 8008a22 <__match+0x12>
 8008a1c:	6003      	str	r3, [r0, #0]
 8008a1e:	2001      	movs	r0, #1
 8008a20:	bd30      	pop	{r4, r5, pc}
 8008a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008a2a:	2d19      	cmp	r5, #25
 8008a2c:	bf98      	it	ls
 8008a2e:	3220      	addls	r2, #32
 8008a30:	42a2      	cmp	r2, r4
 8008a32:	d0f0      	beq.n	8008a16 <__match+0x6>
 8008a34:	2000      	movs	r0, #0
 8008a36:	e7f3      	b.n	8008a20 <__match+0x10>

08008a38 <__hexnan>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	2500      	movs	r5, #0
 8008a3e:	680b      	ldr	r3, [r1, #0]
 8008a40:	4682      	mov	sl, r0
 8008a42:	115e      	asrs	r6, r3, #5
 8008a44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a48:	f013 031f 	ands.w	r3, r3, #31
 8008a4c:	bf18      	it	ne
 8008a4e:	3604      	addne	r6, #4
 8008a50:	1f37      	subs	r7, r6, #4
 8008a52:	4690      	mov	r8, r2
 8008a54:	46b9      	mov	r9, r7
 8008a56:	463c      	mov	r4, r7
 8008a58:	46ab      	mov	fp, r5
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	6801      	ldr	r1, [r0, #0]
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a64:	9502      	str	r5, [sp, #8]
 8008a66:	784a      	ldrb	r2, [r1, #1]
 8008a68:	1c4b      	adds	r3, r1, #1
 8008a6a:	9303      	str	r3, [sp, #12]
 8008a6c:	b342      	cbz	r2, 8008ac0 <__hexnan+0x88>
 8008a6e:	4610      	mov	r0, r2
 8008a70:	9105      	str	r1, [sp, #20]
 8008a72:	9204      	str	r2, [sp, #16]
 8008a74:	f7ff fd95 	bl	80085a2 <__hexdig_fun>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d151      	bne.n	8008b20 <__hexnan+0xe8>
 8008a7c:	9a04      	ldr	r2, [sp, #16]
 8008a7e:	9905      	ldr	r1, [sp, #20]
 8008a80:	2a20      	cmp	r2, #32
 8008a82:	d818      	bhi.n	8008ab6 <__hexnan+0x7e>
 8008a84:	9b02      	ldr	r3, [sp, #8]
 8008a86:	459b      	cmp	fp, r3
 8008a88:	dd13      	ble.n	8008ab2 <__hexnan+0x7a>
 8008a8a:	454c      	cmp	r4, r9
 8008a8c:	d206      	bcs.n	8008a9c <__hexnan+0x64>
 8008a8e:	2d07      	cmp	r5, #7
 8008a90:	dc04      	bgt.n	8008a9c <__hexnan+0x64>
 8008a92:	462a      	mov	r2, r5
 8008a94:	4649      	mov	r1, r9
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7ff ffa8 	bl	80089ec <L_shift>
 8008a9c:	4544      	cmp	r4, r8
 8008a9e:	d952      	bls.n	8008b46 <__hexnan+0x10e>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f1a4 0904 	sub.w	r9, r4, #4
 8008aa6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008aaa:	461d      	mov	r5, r3
 8008aac:	464c      	mov	r4, r9
 8008aae:	f8cd b008 	str.w	fp, [sp, #8]
 8008ab2:	9903      	ldr	r1, [sp, #12]
 8008ab4:	e7d7      	b.n	8008a66 <__hexnan+0x2e>
 8008ab6:	2a29      	cmp	r2, #41	@ 0x29
 8008ab8:	d157      	bne.n	8008b6a <__hexnan+0x132>
 8008aba:	3102      	adds	r1, #2
 8008abc:	f8ca 1000 	str.w	r1, [sl]
 8008ac0:	f1bb 0f00 	cmp.w	fp, #0
 8008ac4:	d051      	beq.n	8008b6a <__hexnan+0x132>
 8008ac6:	454c      	cmp	r4, r9
 8008ac8:	d206      	bcs.n	8008ad8 <__hexnan+0xa0>
 8008aca:	2d07      	cmp	r5, #7
 8008acc:	dc04      	bgt.n	8008ad8 <__hexnan+0xa0>
 8008ace:	462a      	mov	r2, r5
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f7ff ff8a 	bl	80089ec <L_shift>
 8008ad8:	4544      	cmp	r4, r8
 8008ada:	d936      	bls.n	8008b4a <__hexnan+0x112>
 8008adc:	4623      	mov	r3, r4
 8008ade:	f1a8 0204 	sub.w	r2, r8, #4
 8008ae2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ae6:	429f      	cmp	r7, r3
 8008ae8:	f842 1f04 	str.w	r1, [r2, #4]!
 8008aec:	d2f9      	bcs.n	8008ae2 <__hexnan+0xaa>
 8008aee:	1b3b      	subs	r3, r7, r4
 8008af0:	f023 0303 	bic.w	r3, r3, #3
 8008af4:	3304      	adds	r3, #4
 8008af6:	3401      	adds	r4, #1
 8008af8:	3e03      	subs	r6, #3
 8008afa:	42b4      	cmp	r4, r6
 8008afc:	bf88      	it	hi
 8008afe:	2304      	movhi	r3, #4
 8008b00:	2200      	movs	r2, #0
 8008b02:	4443      	add	r3, r8
 8008b04:	f843 2b04 	str.w	r2, [r3], #4
 8008b08:	429f      	cmp	r7, r3
 8008b0a:	d2fb      	bcs.n	8008b04 <__hexnan+0xcc>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	b91b      	cbnz	r3, 8008b18 <__hexnan+0xe0>
 8008b10:	4547      	cmp	r7, r8
 8008b12:	d128      	bne.n	8008b66 <__hexnan+0x12e>
 8008b14:	2301      	movs	r3, #1
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	2005      	movs	r0, #5
 8008b1a:	b007      	add	sp, #28
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b20:	3501      	adds	r5, #1
 8008b22:	2d08      	cmp	r5, #8
 8008b24:	f10b 0b01 	add.w	fp, fp, #1
 8008b28:	dd06      	ble.n	8008b38 <__hexnan+0x100>
 8008b2a:	4544      	cmp	r4, r8
 8008b2c:	d9c1      	bls.n	8008ab2 <__hexnan+0x7a>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	2501      	movs	r5, #1
 8008b32:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b36:	3c04      	subs	r4, #4
 8008b38:	6822      	ldr	r2, [r4, #0]
 8008b3a:	f000 000f 	and.w	r0, r0, #15
 8008b3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008b42:	6020      	str	r0, [r4, #0]
 8008b44:	e7b5      	b.n	8008ab2 <__hexnan+0x7a>
 8008b46:	2508      	movs	r5, #8
 8008b48:	e7b3      	b.n	8008ab2 <__hexnan+0x7a>
 8008b4a:	9b01      	ldr	r3, [sp, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0dd      	beq.n	8008b0c <__hexnan+0xd4>
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	f1c3 0320 	rsb	r3, r3, #32
 8008b58:	40da      	lsrs	r2, r3
 8008b5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b5e:	4013      	ands	r3, r2
 8008b60:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b64:	e7d2      	b.n	8008b0c <__hexnan+0xd4>
 8008b66:	3f04      	subs	r7, #4
 8008b68:	e7d0      	b.n	8008b0c <__hexnan+0xd4>
 8008b6a:	2004      	movs	r0, #4
 8008b6c:	e7d5      	b.n	8008b1a <__hexnan+0xe2>

08008b6e <__ascii_mbtowc>:
 8008b6e:	b082      	sub	sp, #8
 8008b70:	b901      	cbnz	r1, 8008b74 <__ascii_mbtowc+0x6>
 8008b72:	a901      	add	r1, sp, #4
 8008b74:	b142      	cbz	r2, 8008b88 <__ascii_mbtowc+0x1a>
 8008b76:	b14b      	cbz	r3, 8008b8c <__ascii_mbtowc+0x1e>
 8008b78:	7813      	ldrb	r3, [r2, #0]
 8008b7a:	600b      	str	r3, [r1, #0]
 8008b7c:	7812      	ldrb	r2, [r2, #0]
 8008b7e:	1e10      	subs	r0, r2, #0
 8008b80:	bf18      	it	ne
 8008b82:	2001      	movne	r0, #1
 8008b84:	b002      	add	sp, #8
 8008b86:	4770      	bx	lr
 8008b88:	4610      	mov	r0, r2
 8008b8a:	e7fb      	b.n	8008b84 <__ascii_mbtowc+0x16>
 8008b8c:	f06f 0001 	mvn.w	r0, #1
 8008b90:	e7f8      	b.n	8008b84 <__ascii_mbtowc+0x16>

08008b92 <_realloc_r>:
 8008b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b96:	4680      	mov	r8, r0
 8008b98:	4615      	mov	r5, r2
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	b921      	cbnz	r1, 8008ba8 <_realloc_r+0x16>
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba4:	f7fc bfb2 	b.w	8005b0c <_malloc_r>
 8008ba8:	b92a      	cbnz	r2, 8008bb6 <_realloc_r+0x24>
 8008baa:	f7fc ff3d 	bl	8005a28 <_free_r>
 8008bae:	2400      	movs	r4, #0
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb6:	f000 f8b2 	bl	8008d1e <_malloc_usable_size_r>
 8008bba:	4285      	cmp	r5, r0
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	d802      	bhi.n	8008bc6 <_realloc_r+0x34>
 8008bc0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bc4:	d8f4      	bhi.n	8008bb0 <_realloc_r+0x1e>
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	4640      	mov	r0, r8
 8008bca:	f7fc ff9f 	bl	8005b0c <_malloc_r>
 8008bce:	4607      	mov	r7, r0
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d0ec      	beq.n	8008bae <_realloc_r+0x1c>
 8008bd4:	42b5      	cmp	r5, r6
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	4621      	mov	r1, r4
 8008bda:	bf28      	it	cs
 8008bdc:	4632      	movcs	r2, r6
 8008bde:	f7ff fc47 	bl	8008470 <memcpy>
 8008be2:	4621      	mov	r1, r4
 8008be4:	4640      	mov	r0, r8
 8008be6:	f7fc ff1f 	bl	8005a28 <_free_r>
 8008bea:	463c      	mov	r4, r7
 8008bec:	e7e0      	b.n	8008bb0 <_realloc_r+0x1e>
	...

08008bf0 <_strtoul_l.constprop.0>:
 8008bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	4686      	mov	lr, r0
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	4e33      	ldr	r6, [pc, #204]	@ (8008cc8 <_strtoul_l.constprop.0+0xd8>)
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c00:	5d37      	ldrb	r7, [r6, r4]
 8008c02:	f017 0708 	ands.w	r7, r7, #8
 8008c06:	d1f8      	bne.n	8008bfa <_strtoul_l.constprop.0+0xa>
 8008c08:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c0a:	d12f      	bne.n	8008c6c <_strtoul_l.constprop.0+0x7c>
 8008c0c:	2701      	movs	r7, #1
 8008c0e:	782c      	ldrb	r4, [r5, #0]
 8008c10:	1c85      	adds	r5, r0, #2
 8008c12:	f033 0010 	bics.w	r0, r3, #16
 8008c16:	d109      	bne.n	8008c2c <_strtoul_l.constprop.0+0x3c>
 8008c18:	2c30      	cmp	r4, #48	@ 0x30
 8008c1a:	d12c      	bne.n	8008c76 <_strtoul_l.constprop.0+0x86>
 8008c1c:	7828      	ldrb	r0, [r5, #0]
 8008c1e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008c22:	2858      	cmp	r0, #88	@ 0x58
 8008c24:	d127      	bne.n	8008c76 <_strtoul_l.constprop.0+0x86>
 8008c26:	2310      	movs	r3, #16
 8008c28:	786c      	ldrb	r4, [r5, #1]
 8008c2a:	3502      	adds	r5, #2
 8008c2c:	f04f 38ff 	mov.w	r8, #4294967295
 8008c30:	fbb8 f8f3 	udiv	r8, r8, r3
 8008c34:	2600      	movs	r6, #0
 8008c36:	fb03 f908 	mul.w	r9, r3, r8
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	ea6f 0909 	mvn.w	r9, r9
 8008c40:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008c44:	f1bc 0f09 	cmp.w	ip, #9
 8008c48:	d81c      	bhi.n	8008c84 <_strtoul_l.constprop.0+0x94>
 8008c4a:	4664      	mov	r4, ip
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	dd2a      	ble.n	8008ca6 <_strtoul_l.constprop.0+0xb6>
 8008c50:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008c54:	d007      	beq.n	8008c66 <_strtoul_l.constprop.0+0x76>
 8008c56:	4580      	cmp	r8, r0
 8008c58:	d322      	bcc.n	8008ca0 <_strtoul_l.constprop.0+0xb0>
 8008c5a:	d101      	bne.n	8008c60 <_strtoul_l.constprop.0+0x70>
 8008c5c:	45a1      	cmp	r9, r4
 8008c5e:	db1f      	blt.n	8008ca0 <_strtoul_l.constprop.0+0xb0>
 8008c60:	2601      	movs	r6, #1
 8008c62:	fb00 4003 	mla	r0, r0, r3, r4
 8008c66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c6a:	e7e9      	b.n	8008c40 <_strtoul_l.constprop.0+0x50>
 8008c6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008c6e:	bf04      	itt	eq
 8008c70:	782c      	ldrbeq	r4, [r5, #0]
 8008c72:	1c85      	addeq	r5, r0, #2
 8008c74:	e7cd      	b.n	8008c12 <_strtoul_l.constprop.0+0x22>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1d8      	bne.n	8008c2c <_strtoul_l.constprop.0+0x3c>
 8008c7a:	2c30      	cmp	r4, #48	@ 0x30
 8008c7c:	bf0c      	ite	eq
 8008c7e:	2308      	moveq	r3, #8
 8008c80:	230a      	movne	r3, #10
 8008c82:	e7d3      	b.n	8008c2c <_strtoul_l.constprop.0+0x3c>
 8008c84:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008c88:	f1bc 0f19 	cmp.w	ip, #25
 8008c8c:	d801      	bhi.n	8008c92 <_strtoul_l.constprop.0+0xa2>
 8008c8e:	3c37      	subs	r4, #55	@ 0x37
 8008c90:	e7dc      	b.n	8008c4c <_strtoul_l.constprop.0+0x5c>
 8008c92:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008c96:	f1bc 0f19 	cmp.w	ip, #25
 8008c9a:	d804      	bhi.n	8008ca6 <_strtoul_l.constprop.0+0xb6>
 8008c9c:	3c57      	subs	r4, #87	@ 0x57
 8008c9e:	e7d5      	b.n	8008c4c <_strtoul_l.constprop.0+0x5c>
 8008ca0:	f04f 36ff 	mov.w	r6, #4294967295
 8008ca4:	e7df      	b.n	8008c66 <_strtoul_l.constprop.0+0x76>
 8008ca6:	1c73      	adds	r3, r6, #1
 8008ca8:	d106      	bne.n	8008cb8 <_strtoul_l.constprop.0+0xc8>
 8008caa:	2322      	movs	r3, #34	@ 0x22
 8008cac:	4630      	mov	r0, r6
 8008cae:	f8ce 3000 	str.w	r3, [lr]
 8008cb2:	b932      	cbnz	r2, 8008cc2 <_strtoul_l.constprop.0+0xd2>
 8008cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cb8:	b107      	cbz	r7, 8008cbc <_strtoul_l.constprop.0+0xcc>
 8008cba:	4240      	negs	r0, r0
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	d0f9      	beq.n	8008cb4 <_strtoul_l.constprop.0+0xc4>
 8008cc0:	b106      	cbz	r6, 8008cc4 <_strtoul_l.constprop.0+0xd4>
 8008cc2:	1e69      	subs	r1, r5, #1
 8008cc4:	6011      	str	r1, [r2, #0]
 8008cc6:	e7f5      	b.n	8008cb4 <_strtoul_l.constprop.0+0xc4>
 8008cc8:	08009161 	.word	0x08009161

08008ccc <_strtoul_r>:
 8008ccc:	f7ff bf90 	b.w	8008bf0 <_strtoul_l.constprop.0>

08008cd0 <__ascii_wctomb>:
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	b141      	cbz	r1, 8008ce8 <__ascii_wctomb+0x18>
 8008cd6:	2aff      	cmp	r2, #255	@ 0xff
 8008cd8:	d904      	bls.n	8008ce4 <__ascii_wctomb+0x14>
 8008cda:	228a      	movs	r2, #138	@ 0x8a
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	4770      	bx	lr
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	700a      	strb	r2, [r1, #0]
 8008ce8:	4770      	bx	lr
	...

08008cec <fiprintf>:
 8008cec:	b40e      	push	{r1, r2, r3}
 8008cee:	b503      	push	{r0, r1, lr}
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	ab03      	add	r3, sp, #12
 8008cf4:	4805      	ldr	r0, [pc, #20]	@ (8008d0c <fiprintf+0x20>)
 8008cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfa:	6800      	ldr	r0, [r0, #0]
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	f7fe fc35 	bl	800756c <_vfiprintf_r>
 8008d02:	b002      	add	sp, #8
 8008d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d08:	b003      	add	sp, #12
 8008d0a:	4770      	bx	lr
 8008d0c:	20000020 	.word	0x20000020

08008d10 <abort>:
 8008d10:	2006      	movs	r0, #6
 8008d12:	b508      	push	{r3, lr}
 8008d14:	f000 f834 	bl	8008d80 <raise>
 8008d18:	2001      	movs	r0, #1
 8008d1a:	f7f8 ff0e 	bl	8001b3a <_exit>

08008d1e <_malloc_usable_size_r>:
 8008d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d22:	1f18      	subs	r0, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	bfbc      	itt	lt
 8008d28:	580b      	ldrlt	r3, [r1, r0]
 8008d2a:	18c0      	addlt	r0, r0, r3
 8008d2c:	4770      	bx	lr

08008d2e <_raise_r>:
 8008d2e:	291f      	cmp	r1, #31
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4605      	mov	r5, r0
 8008d34:	460c      	mov	r4, r1
 8008d36:	d904      	bls.n	8008d42 <_raise_r+0x14>
 8008d38:	2316      	movs	r3, #22
 8008d3a:	6003      	str	r3, [r0, #0]
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d44:	b112      	cbz	r2, 8008d4c <_raise_r+0x1e>
 8008d46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d4a:	b94b      	cbnz	r3, 8008d60 <_raise_r+0x32>
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f000 f831 	bl	8008db4 <_getpid_r>
 8008d52:	4622      	mov	r2, r4
 8008d54:	4601      	mov	r1, r0
 8008d56:	4628      	mov	r0, r5
 8008d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d5c:	f000 b818 	b.w	8008d90 <_kill_r>
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d00a      	beq.n	8008d7a <_raise_r+0x4c>
 8008d64:	1c59      	adds	r1, r3, #1
 8008d66:	d103      	bne.n	8008d70 <_raise_r+0x42>
 8008d68:	2316      	movs	r3, #22
 8008d6a:	6003      	str	r3, [r0, #0]
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	e7e7      	b.n	8008d40 <_raise_r+0x12>
 8008d70:	2100      	movs	r1, #0
 8008d72:	4620      	mov	r0, r4
 8008d74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d78:	4798      	blx	r3
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	e7e0      	b.n	8008d40 <_raise_r+0x12>
	...

08008d80 <raise>:
 8008d80:	4b02      	ldr	r3, [pc, #8]	@ (8008d8c <raise+0xc>)
 8008d82:	4601      	mov	r1, r0
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	f7ff bfd2 	b.w	8008d2e <_raise_r>
 8008d8a:	bf00      	nop
 8008d8c:	20000020 	.word	0x20000020

08008d90 <_kill_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	2300      	movs	r3, #0
 8008d94:	4d06      	ldr	r5, [pc, #24]	@ (8008db0 <_kill_r+0x20>)
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	f7f8 febc 	bl	8001b1a <_kill>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	d102      	bne.n	8008dac <_kill_r+0x1c>
 8008da6:	682b      	ldr	r3, [r5, #0]
 8008da8:	b103      	cbz	r3, 8008dac <_kill_r+0x1c>
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	bf00      	nop
 8008db0:	200003cc 	.word	0x200003cc

08008db4 <_getpid_r>:
 8008db4:	f7f8 beaa 	b.w	8001b0c <_getpid>

08008db8 <_init>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr

08008dc4 <_fini>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	bf00      	nop
 8008dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dca:	bc08      	pop	{r3}
 8008dcc:	469e      	mov	lr, r3
 8008dce:	4770      	bx	lr
