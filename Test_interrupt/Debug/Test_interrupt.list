
Test_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e68  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002fa4  08002fa4  00003fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800301c  0800301c  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  0800301c  0800301c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003024  08003024  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003024  08003024  00004024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003028  08003028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800302c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000006c  08003098  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08003098  00005230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077a3  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001820  00000000  00000000  0000c838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000e058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000555  00000000  00000000  0000e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163df  00000000  00000000  0000ecc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095de  00000000  00000000  000250a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008624b  00000000  00000000  0002e682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b48cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c8  00000000  00000000  000b4910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b6bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002f8c 	.word	0x08002f8c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	08002f8c 	.word	0x08002f8c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	@ 0x28
 800046c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4b35      	ldr	r3, [pc, #212]	@ (8000554 <MX_GPIO_Init+0xec>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a34      	ldr	r2, [pc, #208]	@ (8000554 <MX_GPIO_Init+0xec>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b32      	ldr	r3, [pc, #200]	@ (8000554 <MX_GPIO_Init+0xec>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 0304 	and.w	r3, r3, #4
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000496:	4b2f      	ldr	r3, [pc, #188]	@ (8000554 <MX_GPIO_Init+0xec>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a2e      	ldr	r2, [pc, #184]	@ (8000554 <MX_GPIO_Init+0xec>)
 800049c:	f043 0320 	orr.w	r3, r3, #32
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000554 <MX_GPIO_Init+0xec>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 0320 	and.w	r3, r3, #32
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b29      	ldr	r3, [pc, #164]	@ (8000554 <MX_GPIO_Init+0xec>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a28      	ldr	r2, [pc, #160]	@ (8000554 <MX_GPIO_Init+0xec>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b26      	ldr	r3, [pc, #152]	@ (8000554 <MX_GPIO_Init+0xec>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b23      	ldr	r3, [pc, #140]	@ (8000554 <MX_GPIO_Init+0xec>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a22      	ldr	r2, [pc, #136]	@ (8000554 <MX_GPIO_Init+0xec>)
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_GPIO_Init+0xec>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	481d      	ldr	r0, [pc, #116]	@ (8000558 <MX_GPIO_Init+0xf0>)
 80004e4:	f000 fdcb 	bl	800107e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4619      	mov	r1, r3
 80004fe:	4817      	ldr	r0, [pc, #92]	@ (800055c <MX_GPIO_Init+0xf4>)
 8000500:	f000 fc16 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000504:	2320      	movs	r3, #32
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	480f      	ldr	r0, [pc, #60]	@ (8000558 <MX_GPIO_Init+0xf0>)
 800051c:	f000 fc08 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000520:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000526:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4619      	mov	r1, r3
 8000536:	4808      	ldr	r0, [pc, #32]	@ (8000558 <MX_GPIO_Init+0xf0>)
 8000538:	f000 fbfa 	bl	8000d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2102      	movs	r1, #2
 8000540:	2017      	movs	r0, #23
 8000542:	f000 fbbe 	bl	8000cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000546:	2017      	movs	r0, #23
 8000548:	f000 fbd7 	bl	8000cfa <HAL_NVIC_EnableIRQ>

}
 800054c:	bf00      	nop
 800054e:	3728      	adds	r7, #40	@ 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40023800 	.word	0x40023800
 8000558:	40020000 	.word	0x40020000
 800055c:	40020800 	.word	0x40020800

08000560 <_write>:
#include <stdio.h>
#include <stdbool.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
int _write(int file, char *data, int len) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]

    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	b29a      	uxth	r2, r3
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	68b9      	ldr	r1, [r7, #8]
 8000576:	4804      	ldr	r0, [pc, #16]	@ (8000588 <_write+0x28>)
 8000578:	f001 fbf8 	bl	8001d6c <HAL_UART_Transmit>

    return len;
 800057c:	687b      	ldr	r3, [r7, #4]

	}
 800057e:	4618      	mov	r0, r3
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000098 	.word	0x20000098

0800058c <HAL_GPIO_EXTI_Callback>:

uint32_t test = 0;         // Timestamp of the first press

volatile uint8_t press_count = 0;  // A Flag that's used for indicating a second press

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == b_pin){
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800059c:	d13f      	bne.n	800061e <HAL_GPIO_EXTI_Callback+0x92>
		if((HAL_GPIO_ReadPin(b_port, b_pin) == GPIO_PIN_SET)&& (press_count == 0)) {
 800059e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a2:	4821      	ldr	r0, [pc, #132]	@ (8000628 <HAL_GPIO_EXTI_Callback+0x9c>)
 80005a4:	f000 fd54 	bl	8001050 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d10d      	bne.n	80005ca <HAL_GPIO_EXTI_Callback+0x3e>
 80005ae:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d108      	bne.n	80005ca <HAL_GPIO_EXTI_Callback+0x3e>
					time_start = HAL_GetTick();
 80005b8:	f000 faa2 	bl	8000b00 <HAL_GetTick>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a1c      	ldr	r2, [pc, #112]	@ (8000630 <HAL_GPIO_EXTI_Callback+0xa4>)
 80005c0:	6013      	str	r3, [r2, #0]
					press_count = 1;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	@ (800062c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
				pre_val = false;
			}
		}*/


}
 80005c8:	e029      	b.n	800061e <HAL_GPIO_EXTI_Callback+0x92>
			else if((HAL_GPIO_ReadPin(b_port, b_pin) == GPIO_PIN_RESET) && (press_count == 1)) {
 80005ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ce:	4816      	ldr	r0, [pc, #88]	@ (8000628 <HAL_GPIO_EXTI_Callback+0x9c>)
 80005d0:	f000 fd3e 	bl	8001050 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d121      	bne.n	800061e <HAL_GPIO_EXTI_Callback+0x92>
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d11c      	bne.n	800061e <HAL_GPIO_EXTI_Callback+0x92>
					unsigned int current_time = HAL_GetTick();
 80005e4:	f000 fa8c 	bl	8000b00 <HAL_GetTick>
 80005e8:	60f8      	str	r0, [r7, #12]
						if(current_time - time_start <= DP_Threshold) {
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <HAL_GPIO_EXTI_Callback+0xa4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	1ad2      	subs	r2, r2, r3
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <HAL_GPIO_EXTI_Callback+0xa8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d803      	bhi.n	8000602 <HAL_GPIO_EXTI_Callback+0x76>
								button_press = press_short;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <HAL_GPIO_EXTI_Callback+0xac>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
 8000600:	e00a      	b.n	8000618 <HAL_GPIO_EXTI_Callback+0x8c>
						else if(current_time - time_start > DP_Threshold) {
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	1ad2      	subs	r2, r2, r3
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <HAL_GPIO_EXTI_Callback+0xa8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	d902      	bls.n	8000618 <HAL_GPIO_EXTI_Callback+0x8c>
									button_press = press_long;
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <HAL_GPIO_EXTI_Callback+0xac>)
 8000614:	2203      	movs	r2, #3
 8000616:	701a      	strb	r2, [r3, #0]
						press_count = 0;
 8000618:	4b04      	ldr	r3, [pc, #16]	@ (800062c <HAL_GPIO_EXTI_Callback+0xa0>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40020000 	.word	0x40020000
 800062c:	20000090 	.word	0x20000090
 8000630:	2000008c 	.word	0x2000008c
 8000634:	20000000 	.word	0x20000000
 8000638:	20000088 	.word	0x20000088

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 f9f9 	bl	8000a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f822 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ff0e 	bl	8000468 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f960 	bl	8000910 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  if(button_press == press_long) {
 8000650:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <main+0x44>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b03      	cmp	r3, #3
 8000658:	d106      	bne.n	8000668 <main+0x2c>
			/* stuff for long press */
			printf("Long Press\n\r");
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <main+0x48>)
 800065c:	f001 fe1e 	bl	800229c <iprintf>
			button_press = press_none;
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <main+0x44>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e7f3      	b.n	8000650 <main+0x14>
			}

		else if(button_press == press_short) {
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <main+0x44>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b01      	cmp	r3, #1
 8000670:	d1ee      	bne.n	8000650 <main+0x14>
			/* stuff for short press */
			printf("Single Press\n\r");
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <main+0x4c>)
 8000674:	f001 fe12 	bl	800229c <iprintf>
			button_press = press_none;
 8000678:	4b01      	ldr	r3, [pc, #4]	@ (8000680 <main+0x44>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
	  if(button_press == press_long) {
 800067e:	e7e7      	b.n	8000650 <main+0x14>
 8000680:	20000088 	.word	0x20000088
 8000684:	08002fa4 	.word	0x08002fa4
 8000688:	08002fb4 	.word	0x08002fb4

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b092      	sub	sp, #72	@ 0x48
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2234      	movs	r2, #52	@ 0x34
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fe53 	bl	8002346 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <SystemClock_Config+0x98>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80006b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <SystemClock_Config+0x98>)
 80006b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006bc:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c2:	2301      	movs	r3, #1
 80006c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	2310      	movs	r3, #16
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ce:	2300      	movs	r3, #0
 80006d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006d2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80006d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80006d8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80006dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fcfc 	bl	80010e0 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ee:	f000 f81b 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2303      	movs	r3, #3
 80006f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	2101      	movs	r1, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f818 	bl	8001740 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000716:	f000 f807 	bl	8000728 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3748      	adds	r7, #72	@ 0x48
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40007000 	.word	0x40007000

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <Error_Handler+0x8>

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <HAL_MspInit+0x5c>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <HAL_MspInit+0x5c>)
 8000740:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <HAL_MspInit+0x5c>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_MspInit+0x5c>)
 8000754:	6a1b      	ldr	r3, [r3, #32]
 8000756:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <HAL_MspInit+0x5c>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6213      	str	r3, [r2, #32]
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <HAL_MspInit+0x5c>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_MspInit+0x5c>)
 800076c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800076e:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_MspInit+0x5c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	6253      	str	r3, [r2, #36]	@ 0x24
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x5c>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000782:	2007      	movs	r0, #7
 8000784:	f000 fa92 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <NMI_Handler+0x4>

0800079c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <MemManage_Handler+0x4>

080007ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <UsageFault_Handler+0x4>

080007bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 f97a 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80007f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80007f4:	f000 fc5c 	bl	80010b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	e00a      	b.n	8000824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800080e:	f3af 8000 	nop.w
 8000812:	4601      	mov	r1, r0
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	60ba      	str	r2, [r7, #8]
 800081a:	b2ca      	uxtb	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf0      	blt.n	800080e <_read+0x12>
  }

  return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800085c:	605a      	str	r2, [r3, #4]
  return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <_isatty>:

int _isatty(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
	...

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	@ (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f001 fd8c 	bl	80023e4 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20014000 	.word	0x20014000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	20000094 	.word	0x20000094
 8000900:	20000230 	.word	0x20000230

08000904 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <MX_USART2_UART_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000948:	f001 f9c0 	bl	8001ccc <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f7ff fee9 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000098 	.word	0x20000098
 8000960:	40004400 	.word	0x40004400

08000964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a17      	ldr	r2, [pc, #92]	@ (80009e0 <HAL_UART_MspInit+0x7c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d127      	bne.n	80009d6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_UART_MspInit+0x80>)
 8000988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098a:	4a16      	ldr	r2, [pc, #88]	@ (80009e4 <HAL_UART_MspInit+0x80>)
 800098c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000990:	6253      	str	r3, [r2, #36]	@ 0x24
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_UART_MspInit+0x80>)
 8000994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <HAL_UART_MspInit+0x80>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a10      	ldr	r2, [pc, #64]	@ (80009e4 <HAL_UART_MspInit+0x80>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <HAL_UART_MspInit+0x80>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009b6:	230c      	movs	r3, #12
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c6:	2307      	movs	r3, #7
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <HAL_UART_MspInit+0x84>)
 80009d2:	f000 f9ad 	bl	8000d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	@ 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40004400 	.word	0x40004400
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000

080009ec <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ec:	f7ff ff8a 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009f2:	490c      	ldr	r1, [pc, #48]	@ (8000a24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a28 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a08:	4c09      	ldr	r4, [pc, #36]	@ (8000a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a16:	f001 fceb 	bl	80023f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff fe0f 	bl	800063c <main>
  bx lr
 8000a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a28:	0800302c 	.word	0x0800302c
  ldr r2, =_sbss
 8000a2c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a30:	20000230 	.word	0x20000230

08000a34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_IRQHandler>

08000a36 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f933 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 f80e 	bl	8000a68 <HAL_InitTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e001      	b.n	8000a5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a58:	f7ff fe6c 	bl	8000734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_InitTick+0x68>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d022      	beq.n	8000ac2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <HAL_InitTick+0x6c>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <HAL_InitTick+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f940 	bl	8000d16 <HAL_SYSTICK_Config>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10f      	bne.n	8000abc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	d809      	bhi.n	8000ab6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aaa:	f000 f90a 	bl	8000cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <HAL_InitTick+0x70>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	e007      	b.n	8000ac6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e004      	b.n	8000ac6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e001      	b.n	8000ac6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000000c 	.word	0x2000000c
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	20000008 	.word	0x20000008

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <HAL_IncTick+0x20>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a03      	ldr	r2, [pc, #12]	@ (8000af8 <HAL_IncTick+0x1c>)
 8000aec:	6013      	str	r3, [r2, #0]
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200000e0 	.word	0x200000e0
 8000afc:	2000000c 	.word	0x2000000c

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	@ (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	200000e0 	.word	0x200000e0

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4906      	ldr	r1, [pc, #24]	@ (8000bac <__NVIC_EnableIRQ+0x34>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	@ (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	@ (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	@ 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	@ 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff90 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff2d 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff42 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff90 	bl	8000c04 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5f 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff35 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffa2 	bl	8000c68 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d46:	e160      	b.n	800100a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 8152 	beq.w	8001004 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d005      	beq.n	8000d78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d017      	beq.n	8000e16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d123      	bne.n	8000e6a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	6939      	ldr	r1, [r7, #16]
 8000e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0203 	and.w	r2, r3, #3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80ac 	beq.w	8001004 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b5e      	ldr	r3, [pc, #376]	@ (8001028 <HAL_GPIO_Init+0x2f8>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8001028 <HAL_GPIO_Init+0x2f8>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6213      	str	r3, [r2, #32]
 8000eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8001028 <HAL_GPIO_Init+0x2f8>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ec4:	4a59      	ldr	r2, [pc, #356]	@ (800102c <HAL_GPIO_Init+0x2fc>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a51      	ldr	r2, [pc, #324]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d025      	beq.n	8000f3c <HAL_GPIO_Init+0x20c>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a50      	ldr	r2, [pc, #320]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d01f      	beq.n	8000f38 <HAL_GPIO_Init+0x208>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a4f      	ldr	r2, [pc, #316]	@ (8001038 <HAL_GPIO_Init+0x308>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d019      	beq.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a4e      	ldr	r2, [pc, #312]	@ (800103c <HAL_GPIO_Init+0x30c>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d013      	beq.n	8000f30 <HAL_GPIO_Init+0x200>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001040 <HAL_GPIO_Init+0x310>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00d      	beq.n	8000f2c <HAL_GPIO_Init+0x1fc>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a4c      	ldr	r2, [pc, #304]	@ (8001044 <HAL_GPIO_Init+0x314>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x1f8>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a4b      	ldr	r2, [pc, #300]	@ (8001048 <HAL_GPIO_Init+0x318>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d101      	bne.n	8000f24 <HAL_GPIO_Init+0x1f4>
 8000f20:	2306      	movs	r3, #6
 8000f22:	e00c      	b.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f24:	2307      	movs	r3, #7
 8000f26:	e00a      	b.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f28:	2305      	movs	r3, #5
 8000f2a:	e008      	b.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f30:	2303      	movs	r3, #3
 8000f32:	e004      	b.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4093      	lsls	r3, r2
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f4e:	4937      	ldr	r1, [pc, #220]	@ (800102c <HAL_GPIO_Init+0x2fc>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <HAL_GPIO_Init+0x31c>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f80:	4a32      	ldr	r2, [pc, #200]	@ (800104c <HAL_GPIO_Init+0x31c>)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f86:	4b31      	ldr	r3, [pc, #196]	@ (800104c <HAL_GPIO_Init+0x31c>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000faa:	4a28      	ldr	r2, [pc, #160]	@ (800104c <HAL_GPIO_Init+0x31c>)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	@ (800104c <HAL_GPIO_Init+0x31c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800104c <HAL_GPIO_Init+0x31c>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HAL_GPIO_Init+0x31c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ffe:	4a13      	ldr	r2, [pc, #76]	@ (800104c <HAL_GPIO_Init+0x31c>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	f47f ae97 	bne.w	8000d48 <HAL_GPIO_Init+0x18>
  }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	371c      	adds	r7, #28
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40010000 	.word	0x40010000
 8001030:	40020000 	.word	0x40020000
 8001034:	40020400 	.word	0x40020400
 8001038:	40020800 	.word	0x40020800
 800103c:	40020c00 	.word	0x40020c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40021400 	.word	0x40021400
 8001048:	40021800 	.word	0x40021800
 800104c:	40010400 	.word	0x40010400

08001050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e001      	b.n	8001072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	807b      	strh	r3, [r7, #2]
 800108a:	4613      	mov	r3, r2
 800108c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800108e:	787b      	ldrb	r3, [r7, #1]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001094:	887a      	ldrh	r2, [r7, #2]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800109a:	e003      	b.n	80010a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	041a      	lsls	r2, r3, #16
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa5c 	bl	800058c <HAL_GPIO_EXTI_Callback>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010400 	.word	0x40010400

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e31d      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f2:	4b94      	ldr	r3, [pc, #592]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010fc:	4b91      	ldr	r3, [pc, #580]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001104:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d07b      	beq.n	800120a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b08      	cmp	r3, #8
 8001116:	d006      	beq.n	8001126 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2b0c      	cmp	r3, #12
 800111c:	d10f      	bne.n	800113e <HAL_RCC_OscConfig+0x5e>
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001124:	d10b      	bne.n	800113e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	4b87      	ldr	r3, [pc, #540]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d06a      	beq.n	8001208 <HAL_RCC_OscConfig+0x128>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d166      	bne.n	8001208 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e2f7      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d106      	bne.n	8001154 <HAL_RCC_OscConfig+0x74>
 8001146:	4b7f      	ldr	r3, [pc, #508]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a7e      	ldr	r2, [pc, #504]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e02d      	b.n	80011b0 <HAL_RCC_OscConfig+0xd0>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10c      	bne.n	8001176 <HAL_RCC_OscConfig+0x96>
 800115c:	4b79      	ldr	r3, [pc, #484]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a78      	ldr	r2, [pc, #480]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b76      	ldr	r3, [pc, #472]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a75      	ldr	r2, [pc, #468]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e01c      	b.n	80011b0 <HAL_RCC_OscConfig+0xd0>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b05      	cmp	r3, #5
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0xb8>
 800117e:	4b71      	ldr	r3, [pc, #452]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a70      	ldr	r2, [pc, #448]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b6e      	ldr	r3, [pc, #440]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6d      	ldr	r2, [pc, #436]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xd0>
 8001198:	4b6a      	ldr	r3, [pc, #424]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a69      	ldr	r2, [pc, #420]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b67      	ldr	r3, [pc, #412]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a66      	ldr	r2, [pc, #408]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fca2 	bl	8000b00 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fc9e 	bl	8000b00 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	@ 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e2ad      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xe0>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc8e 	bl	8000b00 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fc8a 	bl	8000b00 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	@ 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e299      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011fa:	4b52      	ldr	r3, [pc, #328]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x108>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d05a      	beq.n	80012cc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d005      	beq.n	8001228 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b0c      	cmp	r3, #12
 8001220:	d119      	bne.n	8001256 <HAL_RCC_OscConfig+0x176>
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d116      	bne.n	8001256 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001228:	4b46      	ldr	r3, [pc, #280]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_OscConfig+0x160>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d001      	beq.n	8001240 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e276      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b40      	ldr	r3, [pc, #256]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	493d      	ldr	r1, [pc, #244]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001254:	e03a      	b.n	80012cc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d020      	beq.n	80012a0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125e:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <HAL_RCC_OscConfig+0x268>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fc4c 	bl	8000b00 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fc48 	bl	8000b00 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e257      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800127e:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	492a      	ldr	r1, [pc, #168]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
 800129e:	e015      	b.n	80012cc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a0:	4b29      	ldr	r3, [pc, #164]	@ (8001348 <HAL_RCC_OscConfig+0x268>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fc2b 	bl	8000b00 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc27 	bl	8000b00 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e236      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012c0:	4b20      	ldr	r3, [pc, #128]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f0      	bne.n	80012ae <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80b8 	beq.w	800144a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d170      	bne.n	80013c2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_OscConfig+0x218>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e21a      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1a      	ldr	r2, [r3, #32]
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001304:	429a      	cmp	r2, r3
 8001306:	d921      	bls.n	800134c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fc7d 	bl	8001c0c <RCC_SetFlashLatencyFromMSIRange>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e208      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4906      	ldr	r1, [pc, #24]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	061b      	lsls	r3, r3, #24
 800133c:	4901      	ldr	r1, [pc, #4]	@ (8001344 <HAL_RCC_OscConfig+0x264>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
 8001342:	e020      	b.n	8001386 <HAL_RCC_OscConfig+0x2a6>
 8001344:	40023800 	.word	0x40023800
 8001348:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134c:	4b99      	ldr	r3, [pc, #612]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4996      	ldr	r1, [pc, #600]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135e:	4b95      	ldr	r3, [pc, #596]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	061b      	lsls	r3, r3, #24
 800136c:	4991      	ldr	r1, [pc, #580]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fc48 	bl	8001c0c <RCC_SetFlashLatencyFromMSIRange>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1d3      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	0b5b      	lsrs	r3, r3, #13
 800138c:	3301      	adds	r3, #1
 800138e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001396:	4a87      	ldr	r2, [pc, #540]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001398:	6892      	ldr	r2, [r2, #8]
 800139a:	0912      	lsrs	r2, r2, #4
 800139c:	f002 020f 	and.w	r2, r2, #15
 80013a0:	4985      	ldr	r1, [pc, #532]	@ (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013a2:	5c8a      	ldrb	r2, [r1, r2]
 80013a4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013a6:	4a85      	ldr	r2, [pc, #532]	@ (80015bc <HAL_RCC_OscConfig+0x4dc>)
 80013a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013aa:	4b85      	ldr	r3, [pc, #532]	@ (80015c0 <HAL_RCC_OscConfig+0x4e0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fb5a 	bl	8000a68 <HAL_InitTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d045      	beq.n	800144a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	e1b5      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d029      	beq.n	800141e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013ca:	4b7e      	ldr	r3, [pc, #504]	@ (80015c4 <HAL_RCC_OscConfig+0x4e4>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fb96 	bl	8000b00 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d8:	f7ff fb92 	bl	8000b00 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1a1      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ea:	4b72      	ldr	r3, [pc, #456]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f6:	4b6f      	ldr	r3, [pc, #444]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	496c      	ldr	r1, [pc, #432]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001408:	4b6a      	ldr	r3, [pc, #424]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	061b      	lsls	r3, r3, #24
 8001416:	4967      	ldr	r1, [pc, #412]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800141e:	4b69      	ldr	r3, [pc, #420]	@ (80015c4 <HAL_RCC_OscConfig+0x4e4>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fb6c 	bl	8000b00 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142c:	f7ff fb68 	bl	8000b00 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e177      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800143e:	4b5d      	ldr	r3, [pc, #372]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d030      	beq.n	80014b8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d016      	beq.n	800148c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145e:	4b5a      	ldr	r3, [pc, #360]	@ (80015c8 <HAL_RCC_OscConfig+0x4e8>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fb4c 	bl	8000b00 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fb48 	bl	8000b00 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e157      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800147e:	4b4d      	ldr	r3, [pc, #308]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x38c>
 800148a:	e015      	b.n	80014b8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	4b4e      	ldr	r3, [pc, #312]	@ (80015c8 <HAL_RCC_OscConfig+0x4e8>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb35 	bl	8000b00 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff fb31 	bl	8000b00 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e140      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ac:	4b41      	ldr	r3, [pc, #260]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80014ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80b5 	beq.w	8001630 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b3a      	ldr	r3, [pc, #232]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10d      	bne.n	80014f2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b37      	ldr	r3, [pc, #220]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	4a36      	ldr	r2, [pc, #216]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	6253      	str	r3, [r2, #36]	@ 0x24
 80014e2:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ee:	2301      	movs	r3, #1
 80014f0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <HAL_RCC_OscConfig+0x4ec>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fe:	4b33      	ldr	r3, [pc, #204]	@ (80015cc <HAL_RCC_OscConfig+0x4ec>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a32      	ldr	r2, [pc, #200]	@ (80015cc <HAL_RCC_OscConfig+0x4ec>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150a:	f7ff faf9 	bl	8000b00 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001512:	f7ff faf5 	bl	8000b00 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b64      	cmp	r3, #100	@ 0x64
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e104      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <HAL_RCC_OscConfig+0x4ec>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x466>
 8001538:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800153a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800153c:	4a1d      	ldr	r2, [pc, #116]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001542:	6353      	str	r3, [r2, #52]	@ 0x34
 8001544:	e02d      	b.n	80015a2 <HAL_RCC_OscConfig+0x4c2>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x488>
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001552:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001558:	6353      	str	r3, [r2, #52]	@ 0x34
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800155c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800155e:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001560:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001564:	6353      	str	r3, [r2, #52]	@ 0x34
 8001566:	e01c      	b.n	80015a2 <HAL_RCC_OscConfig+0x4c2>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d10c      	bne.n	800158a <HAL_RCC_OscConfig+0x4aa>
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001574:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800157a:	6353      	str	r3, [r2, #52]	@ 0x34
 800157c:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800157e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001580:	4a0c      	ldr	r2, [pc, #48]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001586:	6353      	str	r3, [r2, #52]	@ 0x34
 8001588:	e00b      	b.n	80015a2 <HAL_RCC_OscConfig+0x4c2>
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800158c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158e:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001594:	6353      	str	r3, [r2, #52]	@ 0x34
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 8001598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159a:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 800159c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015a0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d024      	beq.n	80015f4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff faa9 	bl	8000b00 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015b0:	e019      	b.n	80015e6 <HAL_RCC_OscConfig+0x506>
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	08002fd0 	.word	0x08002fd0
 80015bc:	20000004 	.word	0x20000004
 80015c0:	20000008 	.word	0x20000008
 80015c4:	42470020 	.word	0x42470020
 80015c8:	42470680 	.word	0x42470680
 80015cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fa96 	bl	8000b00 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e0a3      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015e6:	4b54      	ldr	r3, [pc, #336]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 80015e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0ee      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4f0>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f4:	f7ff fa84 	bl	8000b00 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff fa80 	bl	8000b00 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e08d      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001612:	4b49      	ldr	r3, [pc, #292]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 8001614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ee      	bne.n	80015fc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800161e:	7ffb      	ldrb	r3, [r7, #31]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001624:	4b44      	ldr	r3, [pc, #272]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	4a43      	ldr	r2, [pc, #268]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 800162a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	2b00      	cmp	r3, #0
 8001636:	d079      	beq.n	800172c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d056      	beq.n	80016ec <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	2b02      	cmp	r3, #2
 8001644:	d13b      	bne.n	80016be <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001646:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <HAL_RCC_OscConfig+0x65c>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fa58 	bl	8000b00 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fa54 	bl	8000b00 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e063      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001666:	4b34      	ldr	r3, [pc, #208]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001672:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001682:	4319      	orrs	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	430b      	orrs	r3, r1
 800168a:	492b      	ldr	r1, [pc, #172]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <HAL_RCC_OscConfig+0x65c>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fa33 	bl	8000b00 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fa2f 	bl	8000b00 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e03e      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016b0:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x5be>
 80016bc:	e036      	b.n	800172c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <HAL_RCC_OscConfig+0x65c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fa1c 	bl	8000b00 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fa18 	bl	8000b00 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e027      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x5ec>
 80016ea:	e01f      	b.n	800172c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e01a      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_RCC_OscConfig+0x658>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001708:	429a      	cmp	r2, r3
 800170a:	d10d      	bne.n	8001728 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d106      	bne.n	8001728 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	42470060 	.word	0x42470060

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e11a      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b8f      	ldr	r3, [pc, #572]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d919      	bls.n	8001796 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_ClockConfig+0x34>
 8001768:	4b8a      	ldr	r3, [pc, #552]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a89      	ldr	r2, [pc, #548]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b87      	ldr	r3, [pc, #540]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 0201 	bic.w	r2, r3, #1
 800177c:	4985      	ldr	r1, [pc, #532]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001784:	4b83      	ldr	r3, [pc, #524]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0f9      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	497a      	ldr	r1, [pc, #488]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 808e 	beq.w	80018de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017ca:	4b73      	ldr	r3, [pc, #460]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d121      	bne.n	800181a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0d7      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d115      	bne.n	800181a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0cb      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017fa:	4b67      	ldr	r3, [pc, #412]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0bf      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800180a:	4b63      	ldr	r3, [pc, #396]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0b7      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b5f      	ldr	r3, [pc, #380]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	495c      	ldr	r1, [pc, #368]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff f968 	bl	8000b00 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d112      	bne.n	8001860 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff f960 	bl	8000b00 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e09b      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001852:	4b51      	ldr	r3, [pc, #324]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	d1ee      	bne.n	800183c <HAL_RCC_ClockConfig+0xfc>
 800185e:	e03e      	b.n	80018de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d112      	bne.n	800188e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186a:	f7ff f949 	bl	8000b00 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e084      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001880:	4b45      	ldr	r3, [pc, #276]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b0c      	cmp	r3, #12
 800188a:	d1ee      	bne.n	800186a <HAL_RCC_ClockConfig+0x12a>
 800188c:	e027      	b.n	80018de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d11d      	bne.n	80018d2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7ff f932 	bl	8000b00 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e06d      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d1ee      	bne.n	8001898 <HAL_RCC_ClockConfig+0x158>
 80018ba:	e010      	b.n	80018de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018bc:	f7ff f920 	bl	8000b00 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e05b      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ee      	bne.n	80018bc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018de:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d219      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <HAL_RCC_ClockConfig+0x1be>
 80018f2:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a27      	ldr	r2, [pc, #156]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0201 	bic.w	r2, r3, #1
 8001906:	4923      	ldr	r1, [pc, #140]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <HAL_RCC_ClockConfig+0x254>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e034      	b.n	800198a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4917      	ldr	r1, [pc, #92]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490f      	ldr	r1, [pc, #60]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800195e:	f000 f823 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <HAL_RCC_ClockConfig+0x258>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490b      	ldr	r1, [pc, #44]	@ (800199c <HAL_RCC_ClockConfig+0x25c>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_RCC_ClockConfig+0x260>)
 8001978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_RCC_ClockConfig+0x264>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f872 	bl	8000a68 <HAL_InitTick>
 8001984:	4603      	mov	r3, r0
 8001986:	72fb      	strb	r3, [r7, #11]

  return status;
 8001988:	7afb      	ldrb	r3, [r7, #11]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00
 8001998:	40023800 	.word	0x40023800
 800199c:	08002fd0 	.word	0x08002fd0
 80019a0:	20000004 	.word	0x20000004
 80019a4:	20000008 	.word	0x20000008

080019a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ac:	b092      	sub	sp, #72	@ 0x48
 80019ae:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80019b0:	4b79      	ldr	r3, [pc, #484]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d00d      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x34>
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	f200 80d5 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x1c8>
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d002      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x28>
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x2e>
 80019ce:	e0cf      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d0:	4b72      	ldr	r3, [pc, #456]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80019d2:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80019d4:	e0da      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d6:	4b72      	ldr	r3, [pc, #456]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80019d8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80019da:	e0d7      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019de:	0c9b      	lsrs	r3, r3, #18
 80019e0:	f003 020f 	and.w	r2, r3, #15
 80019e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80019e6:	5c9b      	ldrb	r3, [r3, r2]
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ec:	0d9b      	lsrs	r3, r3, #22
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	3301      	adds	r3, #1
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f6:	4b68      	ldr	r3, [pc, #416]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d05d      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a04:	2200      	movs	r2, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	460d      	mov	r5, r1
 8001a0e:	4622      	mov	r2, r4
 8001a10:	462b      	mov	r3, r5
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	0159      	lsls	r1, r3, #5
 8001a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a20:	0150      	lsls	r0, r2, #5
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4621      	mov	r1, r4
 8001a28:	1a51      	subs	r1, r2, r1
 8001a2a:	6139      	str	r1, [r7, #16]
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a40:	4659      	mov	r1, fp
 8001a42:	018b      	lsls	r3, r1, #6
 8001a44:	4651      	mov	r1, sl
 8001a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4a:	4651      	mov	r1, sl
 8001a4c:	018a      	lsls	r2, r1, #6
 8001a4e:	46d4      	mov	ip, sl
 8001a50:	ebb2 080c 	subs.w	r8, r2, ip
 8001a54:	4659      	mov	r1, fp
 8001a56:	eb63 0901 	sbc.w	r9, r3, r1
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a6e:	4690      	mov	r8, r2
 8001a70:	4699      	mov	r9, r3
 8001a72:	4623      	mov	r3, r4
 8001a74:	eb18 0303 	adds.w	r3, r8, r3
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	462b      	mov	r3, r5
 8001a7c:	eb49 0303 	adc.w	r3, r9, r3
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a8e:	4629      	mov	r1, r5
 8001a90:	024b      	lsls	r3, r1, #9
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	4604      	mov	r4, r0
 8001a98:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	024a      	lsls	r2, r1, #9
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ab0:	f7fe fb64 	bl	800017c <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8001abc:	e055      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ac6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aca:	4642      	mov	r2, r8
 8001acc:	464b      	mov	r3, r9
 8001ace:	f04f 0000 	mov.w	r0, #0
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	0159      	lsls	r1, r3, #5
 8001ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001adc:	0150      	lsls	r0, r2, #5
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	46c4      	mov	ip, r8
 8001ae4:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001ae8:	4640      	mov	r0, r8
 8001aea:	4649      	mov	r1, r9
 8001aec:	468c      	mov	ip, r1
 8001aee:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001afe:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b02:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b06:	ebb2 040a 	subs.w	r4, r2, sl
 8001b0a:	eb63 050b 	sbc.w	r5, r3, fp
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	00eb      	lsls	r3, r5, #3
 8001b18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b1c:	00e2      	lsls	r2, r4, #3
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	4603      	mov	r3, r0
 8001b24:	18e3      	adds	r3, r4, r3
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	eb45 0303 	adc.w	r3, r5, r3
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	028b      	lsls	r3, r1, #10
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	4604      	mov	r4, r0
 8001b46:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	028a      	lsls	r2, r1, #10
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b54:	2200      	movs	r2, #0
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	61fa      	str	r2, [r7, #28]
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	f7fe fb0d 	bl	800017c <__aeabi_uldivmod>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4613      	mov	r3, r2
 8001b68:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8001b6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b6c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001b6e:	e00d      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	0b5b      	lsrs	r3, r3, #13
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001b8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3748      	adds	r7, #72	@ 0x48
 8001b92:	46bd      	mov	sp, r7
 8001b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	007a1200 	.word	0x007a1200
 8001ba4:	08002fc4 	.word	0x08002fc4

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b02      	ldr	r3, [pc, #8]	@ (8001bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc0:	f7ff fff2 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	@ (8001be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08002fe0 	.word	0x08002fe0

08001be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0adb      	lsrs	r3, r3, #11
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	@ (8001c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	08002fe0 	.word	0x08002fe0

08001c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c18:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d12c      	bne.n	8001c7e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c24:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c30:	4b24      	ldr	r3, [pc, #144]	@ (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e016      	b.n	8001c6a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c54:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001c5c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c62:	4a17      	ldr	r2, [pc, #92]	@ (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001c70:	d105      	bne.n	8001c7e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001c78:	d101      	bne.n	8001c7e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001c84:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 0201 	bic.w	r2, r3, #1
 8001c98:	490b      	ldr	r1, [pc, #44]	@ (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e042      	b.n	8001d64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fe36 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	@ 0x24
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f91d 	bl	8001f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	@ 0x28
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d16d      	bne.n	8001e68 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_UART_Transmit+0x2c>
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e066      	b.n	8001e6a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2221      	movs	r2, #33	@ 0x21
 8001da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001daa:	f7fe fea9 	bl	8000b00 <HAL_GetTick>
 8001dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	88fa      	ldrh	r2, [r7, #6]
 8001db4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	88fa      	ldrh	r2, [r7, #6]
 8001dba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dc4:	d108      	bne.n	8001dd8 <HAL_UART_Transmit+0x6c>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d104      	bne.n	8001dd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	e003      	b.n	8001de0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001de0:	e02a      	b.n	8001e38 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2200      	movs	r2, #0
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f840 	bl	8001e72 <UART_WaitOnFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e036      	b.n	8001e6a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10b      	bne.n	8001e1a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	3302      	adds	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	e007      	b.n	8001e2a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	781a      	ldrb	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	3301      	adds	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1cf      	bne.n	8001de2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2140      	movs	r1, #64	@ 0x40
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 f810 	bl	8001e72 <UART_WaitOnFlagUntilTimeout>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e006      	b.n	8001e6a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b090      	sub	sp, #64	@ 0x40
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e82:	e050      	b.n	8001f26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8a:	d04c      	beq.n	8001f26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e92:	f7fe fe35 	bl	8000b00 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d241      	bcs.n	8001f26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eac:	e853 3f00 	ldrex	r3, [r3]
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	330c      	adds	r3, #12
 8001ec0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ec2:	637a      	str	r2, [r7, #52]	@ 0x34
 8001ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ec8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eca:	e841 2300 	strex	r3, r2, [r1]
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1e5      	bne.n	8001ea2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3314      	adds	r3, #20
 8001edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	e853 3f00 	ldrex	r3, [r3]
 8001ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3314      	adds	r3, #20
 8001ef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ef6:	623a      	str	r2, [r7, #32]
 8001ef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001efa:	69f9      	ldr	r1, [r7, #28]
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	e841 2300 	strex	r3, r2, [r1]
 8001f02:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1e5      	bne.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e00f      	b.n	8001f46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	bf0c      	ite	eq
 8001f36:	2301      	moveq	r3, #1
 8001f38:	2300      	movne	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d09f      	beq.n	8001e84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3740      	adds	r7, #64	@ 0x40
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001f90:	f023 030c 	bic.w	r3, r3, #12
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a55      	ldr	r2, [pc, #340]	@ (8002110 <UART_SetConfig+0x1c0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d103      	bne.n	8001fc6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fbe:	f7ff fe11 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	e002      	b.n	8001fcc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fc6:	f7ff fdf9 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8001fca:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fd4:	d14c      	bne.n	8002070 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	009a      	lsls	r2, r3, #2
 8001fe0:	441a      	add	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	4a49      	ldr	r2, [pc, #292]	@ (8002114 <UART_SetConfig+0x1c4>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	0119      	lsls	r1, r3, #4
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009a      	lsls	r2, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fbb2 f2f3 	udiv	r2, r2, r3
 800200c:	4b41      	ldr	r3, [pc, #260]	@ (8002114 <UART_SetConfig+0x1c4>)
 800200e:	fba3 0302 	umull	r0, r3, r3, r2
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2064      	movs	r0, #100	@ 0x64
 8002016:	fb00 f303 	mul.w	r3, r0, r3
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	3332      	adds	r3, #50	@ 0x32
 8002020:	4a3c      	ldr	r2, [pc, #240]	@ (8002114 <UART_SetConfig+0x1c4>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800202e:	4419      	add	r1, r3
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	009a      	lsls	r2, r3, #2
 800203a:	441a      	add	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fbb2 f2f3 	udiv	r2, r2, r3
 8002046:	4b33      	ldr	r3, [pc, #204]	@ (8002114 <UART_SetConfig+0x1c4>)
 8002048:	fba3 0302 	umull	r0, r3, r3, r2
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	2064      	movs	r0, #100	@ 0x64
 8002050:	fb00 f303 	mul.w	r3, r0, r3
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	3332      	adds	r3, #50	@ 0x32
 800205a:	4a2e      	ldr	r2, [pc, #184]	@ (8002114 <UART_SetConfig+0x1c4>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	f003 0207 	and.w	r2, r3, #7
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	440a      	add	r2, r1
 800206c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800206e:	e04a      	b.n	8002106 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	009a      	lsls	r2, r3, #2
 800207a:	441a      	add	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <UART_SetConfig+0x1c4>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	0119      	lsls	r1, r3, #4
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	009a      	lsls	r2, r3, #2
 800209a:	441a      	add	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80020a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <UART_SetConfig+0x1c4>)
 80020a8:	fba3 0302 	umull	r0, r3, r3, r2
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	2064      	movs	r0, #100	@ 0x64
 80020b0:	fb00 f303 	mul.w	r3, r0, r3
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	3332      	adds	r3, #50	@ 0x32
 80020ba:	4a16      	ldr	r2, [pc, #88]	@ (8002114 <UART_SetConfig+0x1c4>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c6:	4419      	add	r1, r3
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	009a      	lsls	r2, r3, #2
 80020d2:	441a      	add	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	fbb2 f2f3 	udiv	r2, r2, r3
 80020de:	4b0d      	ldr	r3, [pc, #52]	@ (8002114 <UART_SetConfig+0x1c4>)
 80020e0:	fba3 0302 	umull	r0, r3, r3, r2
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	2064      	movs	r0, #100	@ 0x64
 80020e8:	fb00 f303 	mul.w	r3, r0, r3
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	3332      	adds	r3, #50	@ 0x32
 80020f2:	4a08      	ldr	r2, [pc, #32]	@ (8002114 <UART_SetConfig+0x1c4>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	f003 020f 	and.w	r2, r3, #15
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	440a      	add	r2, r1
 8002104:	609a      	str	r2, [r3, #8]
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40013800 	.word	0x40013800
 8002114:	51eb851f 	.word	0x51eb851f

08002118 <std>:
 8002118:	2300      	movs	r3, #0
 800211a:	b510      	push	{r4, lr}
 800211c:	4604      	mov	r4, r0
 800211e:	e9c0 3300 	strd	r3, r3, [r0]
 8002122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002126:	6083      	str	r3, [r0, #8]
 8002128:	8181      	strh	r1, [r0, #12]
 800212a:	6643      	str	r3, [r0, #100]	@ 0x64
 800212c:	81c2      	strh	r2, [r0, #14]
 800212e:	6183      	str	r3, [r0, #24]
 8002130:	4619      	mov	r1, r3
 8002132:	2208      	movs	r2, #8
 8002134:	305c      	adds	r0, #92	@ 0x5c
 8002136:	f000 f906 	bl	8002346 <memset>
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <std+0x58>)
 800213c:	6224      	str	r4, [r4, #32]
 800213e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <std+0x5c>)
 8002142:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <std+0x60>)
 8002146:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <std+0x64>)
 800214a:	6323      	str	r3, [r4, #48]	@ 0x30
 800214c:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <std+0x68>)
 800214e:	429c      	cmp	r4, r3
 8002150:	d006      	beq.n	8002160 <std+0x48>
 8002152:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002156:	4294      	cmp	r4, r2
 8002158:	d002      	beq.n	8002160 <std+0x48>
 800215a:	33d0      	adds	r3, #208	@ 0xd0
 800215c:	429c      	cmp	r4, r3
 800215e:	d105      	bne.n	800216c <std+0x54>
 8002160:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002168:	f000 b966 	b.w	8002438 <__retarget_lock_init_recursive>
 800216c:	bd10      	pop	{r4, pc}
 800216e:	bf00      	nop
 8002170:	080022c1 	.word	0x080022c1
 8002174:	080022e3 	.word	0x080022e3
 8002178:	0800231b 	.word	0x0800231b
 800217c:	0800233f 	.word	0x0800233f
 8002180:	200000e4 	.word	0x200000e4

08002184 <stdio_exit_handler>:
 8002184:	4a02      	ldr	r2, [pc, #8]	@ (8002190 <stdio_exit_handler+0xc>)
 8002186:	4903      	ldr	r1, [pc, #12]	@ (8002194 <stdio_exit_handler+0x10>)
 8002188:	4803      	ldr	r0, [pc, #12]	@ (8002198 <stdio_exit_handler+0x14>)
 800218a:	f000 b869 	b.w	8002260 <_fwalk_sglue>
 800218e:	bf00      	nop
 8002190:	20000010 	.word	0x20000010
 8002194:	08002cd1 	.word	0x08002cd1
 8002198:	20000020 	.word	0x20000020

0800219c <cleanup_stdio>:
 800219c:	6841      	ldr	r1, [r0, #4]
 800219e:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <cleanup_stdio+0x34>)
 80021a0:	b510      	push	{r4, lr}
 80021a2:	4299      	cmp	r1, r3
 80021a4:	4604      	mov	r4, r0
 80021a6:	d001      	beq.n	80021ac <cleanup_stdio+0x10>
 80021a8:	f000 fd92 	bl	8002cd0 <_fflush_r>
 80021ac:	68a1      	ldr	r1, [r4, #8]
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <cleanup_stdio+0x38>)
 80021b0:	4299      	cmp	r1, r3
 80021b2:	d002      	beq.n	80021ba <cleanup_stdio+0x1e>
 80021b4:	4620      	mov	r0, r4
 80021b6:	f000 fd8b 	bl	8002cd0 <_fflush_r>
 80021ba:	68e1      	ldr	r1, [r4, #12]
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <cleanup_stdio+0x3c>)
 80021be:	4299      	cmp	r1, r3
 80021c0:	d004      	beq.n	80021cc <cleanup_stdio+0x30>
 80021c2:	4620      	mov	r0, r4
 80021c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021c8:	f000 bd82 	b.w	8002cd0 <_fflush_r>
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	bf00      	nop
 80021d0:	200000e4 	.word	0x200000e4
 80021d4:	2000014c 	.word	0x2000014c
 80021d8:	200001b4 	.word	0x200001b4

080021dc <global_stdio_init.part.0>:
 80021dc:	b510      	push	{r4, lr}
 80021de:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <global_stdio_init.part.0+0x30>)
 80021e0:	4c0b      	ldr	r4, [pc, #44]	@ (8002210 <global_stdio_init.part.0+0x34>)
 80021e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002214 <global_stdio_init.part.0+0x38>)
 80021e4:	4620      	mov	r0, r4
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	2104      	movs	r1, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	f7ff ff94 	bl	8002118 <std>
 80021f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80021f4:	2201      	movs	r2, #1
 80021f6:	2109      	movs	r1, #9
 80021f8:	f7ff ff8e 	bl	8002118 <std>
 80021fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002200:	2202      	movs	r2, #2
 8002202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002206:	2112      	movs	r1, #18
 8002208:	f7ff bf86 	b.w	8002118 <std>
 800220c:	2000021c 	.word	0x2000021c
 8002210:	200000e4 	.word	0x200000e4
 8002214:	08002185 	.word	0x08002185

08002218 <__sfp_lock_acquire>:
 8002218:	4801      	ldr	r0, [pc, #4]	@ (8002220 <__sfp_lock_acquire+0x8>)
 800221a:	f000 b90e 	b.w	800243a <__retarget_lock_acquire_recursive>
 800221e:	bf00      	nop
 8002220:	20000225 	.word	0x20000225

08002224 <__sfp_lock_release>:
 8002224:	4801      	ldr	r0, [pc, #4]	@ (800222c <__sfp_lock_release+0x8>)
 8002226:	f000 b909 	b.w	800243c <__retarget_lock_release_recursive>
 800222a:	bf00      	nop
 800222c:	20000225 	.word	0x20000225

08002230 <__sinit>:
 8002230:	b510      	push	{r4, lr}
 8002232:	4604      	mov	r4, r0
 8002234:	f7ff fff0 	bl	8002218 <__sfp_lock_acquire>
 8002238:	6a23      	ldr	r3, [r4, #32]
 800223a:	b11b      	cbz	r3, 8002244 <__sinit+0x14>
 800223c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002240:	f7ff bff0 	b.w	8002224 <__sfp_lock_release>
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <__sinit+0x28>)
 8002246:	6223      	str	r3, [r4, #32]
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <__sinit+0x2c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f5      	bne.n	800223c <__sinit+0xc>
 8002250:	f7ff ffc4 	bl	80021dc <global_stdio_init.part.0>
 8002254:	e7f2      	b.n	800223c <__sinit+0xc>
 8002256:	bf00      	nop
 8002258:	0800219d 	.word	0x0800219d
 800225c:	2000021c 	.word	0x2000021c

08002260 <_fwalk_sglue>:
 8002260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002264:	4607      	mov	r7, r0
 8002266:	4688      	mov	r8, r1
 8002268:	4614      	mov	r4, r2
 800226a:	2600      	movs	r6, #0
 800226c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002270:	f1b9 0901 	subs.w	r9, r9, #1
 8002274:	d505      	bpl.n	8002282 <_fwalk_sglue+0x22>
 8002276:	6824      	ldr	r4, [r4, #0]
 8002278:	2c00      	cmp	r4, #0
 800227a:	d1f7      	bne.n	800226c <_fwalk_sglue+0xc>
 800227c:	4630      	mov	r0, r6
 800227e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002282:	89ab      	ldrh	r3, [r5, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d907      	bls.n	8002298 <_fwalk_sglue+0x38>
 8002288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800228c:	3301      	adds	r3, #1
 800228e:	d003      	beq.n	8002298 <_fwalk_sglue+0x38>
 8002290:	4629      	mov	r1, r5
 8002292:	4638      	mov	r0, r7
 8002294:	47c0      	blx	r8
 8002296:	4306      	orrs	r6, r0
 8002298:	3568      	adds	r5, #104	@ 0x68
 800229a:	e7e9      	b.n	8002270 <_fwalk_sglue+0x10>

0800229c <iprintf>:
 800229c:	b40f      	push	{r0, r1, r2, r3}
 800229e:	b507      	push	{r0, r1, r2, lr}
 80022a0:	4906      	ldr	r1, [pc, #24]	@ (80022bc <iprintf+0x20>)
 80022a2:	ab04      	add	r3, sp, #16
 80022a4:	6808      	ldr	r0, [r1, #0]
 80022a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80022aa:	6881      	ldr	r1, [r0, #8]
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	f000 f9e5 	bl	800267c <_vfiprintf_r>
 80022b2:	b003      	add	sp, #12
 80022b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80022b8:	b004      	add	sp, #16
 80022ba:	4770      	bx	lr
 80022bc:	2000001c 	.word	0x2000001c

080022c0 <__sread>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	460c      	mov	r4, r1
 80022c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c8:	f000 f868 	bl	800239c <_read_r>
 80022cc:	2800      	cmp	r0, #0
 80022ce:	bfab      	itete	ge
 80022d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80022d2:	89a3      	ldrhlt	r3, [r4, #12]
 80022d4:	181b      	addge	r3, r3, r0
 80022d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80022da:	bfac      	ite	ge
 80022dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80022de:	81a3      	strhlt	r3, [r4, #12]
 80022e0:	bd10      	pop	{r4, pc}

080022e2 <__swrite>:
 80022e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e6:	461f      	mov	r7, r3
 80022e8:	898b      	ldrh	r3, [r1, #12]
 80022ea:	4605      	mov	r5, r0
 80022ec:	05db      	lsls	r3, r3, #23
 80022ee:	460c      	mov	r4, r1
 80022f0:	4616      	mov	r6, r2
 80022f2:	d505      	bpl.n	8002300 <__swrite+0x1e>
 80022f4:	2302      	movs	r3, #2
 80022f6:	2200      	movs	r2, #0
 80022f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fc:	f000 f83c 	bl	8002378 <_lseek_r>
 8002300:	89a3      	ldrh	r3, [r4, #12]
 8002302:	4632      	mov	r2, r6
 8002304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002308:	81a3      	strh	r3, [r4, #12]
 800230a:	4628      	mov	r0, r5
 800230c:	463b      	mov	r3, r7
 800230e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002316:	f000 b853 	b.w	80023c0 <_write_r>

0800231a <__sseek>:
 800231a:	b510      	push	{r4, lr}
 800231c:	460c      	mov	r4, r1
 800231e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002322:	f000 f829 	bl	8002378 <_lseek_r>
 8002326:	1c43      	adds	r3, r0, #1
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	bf15      	itete	ne
 800232c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800232e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002332:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002336:	81a3      	strheq	r3, [r4, #12]
 8002338:	bf18      	it	ne
 800233a:	81a3      	strhne	r3, [r4, #12]
 800233c:	bd10      	pop	{r4, pc}

0800233e <__sclose>:
 800233e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002342:	f000 b809 	b.w	8002358 <_close_r>

08002346 <memset>:
 8002346:	4603      	mov	r3, r0
 8002348:	4402      	add	r2, r0
 800234a:	4293      	cmp	r3, r2
 800234c:	d100      	bne.n	8002350 <memset+0xa>
 800234e:	4770      	bx	lr
 8002350:	f803 1b01 	strb.w	r1, [r3], #1
 8002354:	e7f9      	b.n	800234a <memset+0x4>
	...

08002358 <_close_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	2300      	movs	r3, #0
 800235c:	4d05      	ldr	r5, [pc, #20]	@ (8002374 <_close_r+0x1c>)
 800235e:	4604      	mov	r4, r0
 8002360:	4608      	mov	r0, r1
 8002362:	602b      	str	r3, [r5, #0]
 8002364:	f7fe fa67 	bl	8000836 <_close>
 8002368:	1c43      	adds	r3, r0, #1
 800236a:	d102      	bne.n	8002372 <_close_r+0x1a>
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	b103      	cbz	r3, 8002372 <_close_r+0x1a>
 8002370:	6023      	str	r3, [r4, #0]
 8002372:	bd38      	pop	{r3, r4, r5, pc}
 8002374:	20000220 	.word	0x20000220

08002378 <_lseek_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	4604      	mov	r4, r0
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	2200      	movs	r2, #0
 8002382:	4d05      	ldr	r5, [pc, #20]	@ (8002398 <_lseek_r+0x20>)
 8002384:	602a      	str	r2, [r5, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	f7fe fa79 	bl	800087e <_lseek>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d102      	bne.n	8002396 <_lseek_r+0x1e>
 8002390:	682b      	ldr	r3, [r5, #0]
 8002392:	b103      	cbz	r3, 8002396 <_lseek_r+0x1e>
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	20000220 	.word	0x20000220

0800239c <_read_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4604      	mov	r4, r0
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	2200      	movs	r2, #0
 80023a6:	4d05      	ldr	r5, [pc, #20]	@ (80023bc <_read_r+0x20>)
 80023a8:	602a      	str	r2, [r5, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7fe fa26 	bl	80007fc <_read>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d102      	bne.n	80023ba <_read_r+0x1e>
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	b103      	cbz	r3, 80023ba <_read_r+0x1e>
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	20000220 	.word	0x20000220

080023c0 <_write_r>:
 80023c0:	b538      	push	{r3, r4, r5, lr}
 80023c2:	4604      	mov	r4, r0
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	2200      	movs	r2, #0
 80023ca:	4d05      	ldr	r5, [pc, #20]	@ (80023e0 <_write_r+0x20>)
 80023cc:	602a      	str	r2, [r5, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f7fe f8c6 	bl	8000560 <_write>
 80023d4:	1c43      	adds	r3, r0, #1
 80023d6:	d102      	bne.n	80023de <_write_r+0x1e>
 80023d8:	682b      	ldr	r3, [r5, #0]
 80023da:	b103      	cbz	r3, 80023de <_write_r+0x1e>
 80023dc:	6023      	str	r3, [r4, #0]
 80023de:	bd38      	pop	{r3, r4, r5, pc}
 80023e0:	20000220 	.word	0x20000220

080023e4 <__errno>:
 80023e4:	4b01      	ldr	r3, [pc, #4]	@ (80023ec <__errno+0x8>)
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	2000001c 	.word	0x2000001c

080023f0 <__libc_init_array>:
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	2600      	movs	r6, #0
 80023f4:	4d0c      	ldr	r5, [pc, #48]	@ (8002428 <__libc_init_array+0x38>)
 80023f6:	4c0d      	ldr	r4, [pc, #52]	@ (800242c <__libc_init_array+0x3c>)
 80023f8:	1b64      	subs	r4, r4, r5
 80023fa:	10a4      	asrs	r4, r4, #2
 80023fc:	42a6      	cmp	r6, r4
 80023fe:	d109      	bne.n	8002414 <__libc_init_array+0x24>
 8002400:	f000 fdc4 	bl	8002f8c <_init>
 8002404:	2600      	movs	r6, #0
 8002406:	4d0a      	ldr	r5, [pc, #40]	@ (8002430 <__libc_init_array+0x40>)
 8002408:	4c0a      	ldr	r4, [pc, #40]	@ (8002434 <__libc_init_array+0x44>)
 800240a:	1b64      	subs	r4, r4, r5
 800240c:	10a4      	asrs	r4, r4, #2
 800240e:	42a6      	cmp	r6, r4
 8002410:	d105      	bne.n	800241e <__libc_init_array+0x2e>
 8002412:	bd70      	pop	{r4, r5, r6, pc}
 8002414:	f855 3b04 	ldr.w	r3, [r5], #4
 8002418:	4798      	blx	r3
 800241a:	3601      	adds	r6, #1
 800241c:	e7ee      	b.n	80023fc <__libc_init_array+0xc>
 800241e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002422:	4798      	blx	r3
 8002424:	3601      	adds	r6, #1
 8002426:	e7f2      	b.n	800240e <__libc_init_array+0x1e>
 8002428:	08003024 	.word	0x08003024
 800242c:	08003024 	.word	0x08003024
 8002430:	08003024 	.word	0x08003024
 8002434:	08003028 	.word	0x08003028

08002438 <__retarget_lock_init_recursive>:
 8002438:	4770      	bx	lr

0800243a <__retarget_lock_acquire_recursive>:
 800243a:	4770      	bx	lr

0800243c <__retarget_lock_release_recursive>:
 800243c:	4770      	bx	lr
	...

08002440 <_free_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4605      	mov	r5, r0
 8002444:	2900      	cmp	r1, #0
 8002446:	d040      	beq.n	80024ca <_free_r+0x8a>
 8002448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800244c:	1f0c      	subs	r4, r1, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	bfb8      	it	lt
 8002452:	18e4      	addlt	r4, r4, r3
 8002454:	f000 f8de 	bl	8002614 <__malloc_lock>
 8002458:	4a1c      	ldr	r2, [pc, #112]	@ (80024cc <_free_r+0x8c>)
 800245a:	6813      	ldr	r3, [r2, #0]
 800245c:	b933      	cbnz	r3, 800246c <_free_r+0x2c>
 800245e:	6063      	str	r3, [r4, #4]
 8002460:	6014      	str	r4, [r2, #0]
 8002462:	4628      	mov	r0, r5
 8002464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002468:	f000 b8da 	b.w	8002620 <__malloc_unlock>
 800246c:	42a3      	cmp	r3, r4
 800246e:	d908      	bls.n	8002482 <_free_r+0x42>
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	1821      	adds	r1, r4, r0
 8002474:	428b      	cmp	r3, r1
 8002476:	bf01      	itttt	eq
 8002478:	6819      	ldreq	r1, [r3, #0]
 800247a:	685b      	ldreq	r3, [r3, #4]
 800247c:	1809      	addeq	r1, r1, r0
 800247e:	6021      	streq	r1, [r4, #0]
 8002480:	e7ed      	b.n	800245e <_free_r+0x1e>
 8002482:	461a      	mov	r2, r3
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	b10b      	cbz	r3, 800248c <_free_r+0x4c>
 8002488:	42a3      	cmp	r3, r4
 800248a:	d9fa      	bls.n	8002482 <_free_r+0x42>
 800248c:	6811      	ldr	r1, [r2, #0]
 800248e:	1850      	adds	r0, r2, r1
 8002490:	42a0      	cmp	r0, r4
 8002492:	d10b      	bne.n	80024ac <_free_r+0x6c>
 8002494:	6820      	ldr	r0, [r4, #0]
 8002496:	4401      	add	r1, r0
 8002498:	1850      	adds	r0, r2, r1
 800249a:	4283      	cmp	r3, r0
 800249c:	6011      	str	r1, [r2, #0]
 800249e:	d1e0      	bne.n	8002462 <_free_r+0x22>
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4408      	add	r0, r1
 80024a6:	6010      	str	r0, [r2, #0]
 80024a8:	6053      	str	r3, [r2, #4]
 80024aa:	e7da      	b.n	8002462 <_free_r+0x22>
 80024ac:	d902      	bls.n	80024b4 <_free_r+0x74>
 80024ae:	230c      	movs	r3, #12
 80024b0:	602b      	str	r3, [r5, #0]
 80024b2:	e7d6      	b.n	8002462 <_free_r+0x22>
 80024b4:	6820      	ldr	r0, [r4, #0]
 80024b6:	1821      	adds	r1, r4, r0
 80024b8:	428b      	cmp	r3, r1
 80024ba:	bf01      	itttt	eq
 80024bc:	6819      	ldreq	r1, [r3, #0]
 80024be:	685b      	ldreq	r3, [r3, #4]
 80024c0:	1809      	addeq	r1, r1, r0
 80024c2:	6021      	streq	r1, [r4, #0]
 80024c4:	6063      	str	r3, [r4, #4]
 80024c6:	6054      	str	r4, [r2, #4]
 80024c8:	e7cb      	b.n	8002462 <_free_r+0x22>
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	2000022c 	.word	0x2000022c

080024d0 <sbrk_aligned>:
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	4e0f      	ldr	r6, [pc, #60]	@ (8002510 <sbrk_aligned+0x40>)
 80024d4:	460c      	mov	r4, r1
 80024d6:	6831      	ldr	r1, [r6, #0]
 80024d8:	4605      	mov	r5, r0
 80024da:	b911      	cbnz	r1, 80024e2 <sbrk_aligned+0x12>
 80024dc:	f000 fcb4 	bl	8002e48 <_sbrk_r>
 80024e0:	6030      	str	r0, [r6, #0]
 80024e2:	4621      	mov	r1, r4
 80024e4:	4628      	mov	r0, r5
 80024e6:	f000 fcaf 	bl	8002e48 <_sbrk_r>
 80024ea:	1c43      	adds	r3, r0, #1
 80024ec:	d103      	bne.n	80024f6 <sbrk_aligned+0x26>
 80024ee:	f04f 34ff 	mov.w	r4, #4294967295
 80024f2:	4620      	mov	r0, r4
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
 80024f6:	1cc4      	adds	r4, r0, #3
 80024f8:	f024 0403 	bic.w	r4, r4, #3
 80024fc:	42a0      	cmp	r0, r4
 80024fe:	d0f8      	beq.n	80024f2 <sbrk_aligned+0x22>
 8002500:	1a21      	subs	r1, r4, r0
 8002502:	4628      	mov	r0, r5
 8002504:	f000 fca0 	bl	8002e48 <_sbrk_r>
 8002508:	3001      	adds	r0, #1
 800250a:	d1f2      	bne.n	80024f2 <sbrk_aligned+0x22>
 800250c:	e7ef      	b.n	80024ee <sbrk_aligned+0x1e>
 800250e:	bf00      	nop
 8002510:	20000228 	.word	0x20000228

08002514 <_malloc_r>:
 8002514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002518:	1ccd      	adds	r5, r1, #3
 800251a:	f025 0503 	bic.w	r5, r5, #3
 800251e:	3508      	adds	r5, #8
 8002520:	2d0c      	cmp	r5, #12
 8002522:	bf38      	it	cc
 8002524:	250c      	movcc	r5, #12
 8002526:	2d00      	cmp	r5, #0
 8002528:	4606      	mov	r6, r0
 800252a:	db01      	blt.n	8002530 <_malloc_r+0x1c>
 800252c:	42a9      	cmp	r1, r5
 800252e:	d904      	bls.n	800253a <_malloc_r+0x26>
 8002530:	230c      	movs	r3, #12
 8002532:	6033      	str	r3, [r6, #0]
 8002534:	2000      	movs	r0, #0
 8002536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800253a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002610 <_malloc_r+0xfc>
 800253e:	f000 f869 	bl	8002614 <__malloc_lock>
 8002542:	f8d8 3000 	ldr.w	r3, [r8]
 8002546:	461c      	mov	r4, r3
 8002548:	bb44      	cbnz	r4, 800259c <_malloc_r+0x88>
 800254a:	4629      	mov	r1, r5
 800254c:	4630      	mov	r0, r6
 800254e:	f7ff ffbf 	bl	80024d0 <sbrk_aligned>
 8002552:	1c43      	adds	r3, r0, #1
 8002554:	4604      	mov	r4, r0
 8002556:	d158      	bne.n	800260a <_malloc_r+0xf6>
 8002558:	f8d8 4000 	ldr.w	r4, [r8]
 800255c:	4627      	mov	r7, r4
 800255e:	2f00      	cmp	r7, #0
 8002560:	d143      	bne.n	80025ea <_malloc_r+0xd6>
 8002562:	2c00      	cmp	r4, #0
 8002564:	d04b      	beq.n	80025fe <_malloc_r+0xea>
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	4639      	mov	r1, r7
 800256a:	4630      	mov	r0, r6
 800256c:	eb04 0903 	add.w	r9, r4, r3
 8002570:	f000 fc6a 	bl	8002e48 <_sbrk_r>
 8002574:	4581      	cmp	r9, r0
 8002576:	d142      	bne.n	80025fe <_malloc_r+0xea>
 8002578:	6821      	ldr	r1, [r4, #0]
 800257a:	4630      	mov	r0, r6
 800257c:	1a6d      	subs	r5, r5, r1
 800257e:	4629      	mov	r1, r5
 8002580:	f7ff ffa6 	bl	80024d0 <sbrk_aligned>
 8002584:	3001      	adds	r0, #1
 8002586:	d03a      	beq.n	80025fe <_malloc_r+0xea>
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	442b      	add	r3, r5
 800258c:	6023      	str	r3, [r4, #0]
 800258e:	f8d8 3000 	ldr.w	r3, [r8]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	bb62      	cbnz	r2, 80025f0 <_malloc_r+0xdc>
 8002596:	f8c8 7000 	str.w	r7, [r8]
 800259a:	e00f      	b.n	80025bc <_malloc_r+0xa8>
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	1b52      	subs	r2, r2, r5
 80025a0:	d420      	bmi.n	80025e4 <_malloc_r+0xd0>
 80025a2:	2a0b      	cmp	r2, #11
 80025a4:	d917      	bls.n	80025d6 <_malloc_r+0xc2>
 80025a6:	1961      	adds	r1, r4, r5
 80025a8:	42a3      	cmp	r3, r4
 80025aa:	6025      	str	r5, [r4, #0]
 80025ac:	bf18      	it	ne
 80025ae:	6059      	strne	r1, [r3, #4]
 80025b0:	6863      	ldr	r3, [r4, #4]
 80025b2:	bf08      	it	eq
 80025b4:	f8c8 1000 	streq.w	r1, [r8]
 80025b8:	5162      	str	r2, [r4, r5]
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 f82f 	bl	8002620 <__malloc_unlock>
 80025c2:	f104 000b 	add.w	r0, r4, #11
 80025c6:	1d23      	adds	r3, r4, #4
 80025c8:	f020 0007 	bic.w	r0, r0, #7
 80025cc:	1ac2      	subs	r2, r0, r3
 80025ce:	bf1c      	itt	ne
 80025d0:	1a1b      	subne	r3, r3, r0
 80025d2:	50a3      	strne	r3, [r4, r2]
 80025d4:	e7af      	b.n	8002536 <_malloc_r+0x22>
 80025d6:	6862      	ldr	r2, [r4, #4]
 80025d8:	42a3      	cmp	r3, r4
 80025da:	bf0c      	ite	eq
 80025dc:	f8c8 2000 	streq.w	r2, [r8]
 80025e0:	605a      	strne	r2, [r3, #4]
 80025e2:	e7eb      	b.n	80025bc <_malloc_r+0xa8>
 80025e4:	4623      	mov	r3, r4
 80025e6:	6864      	ldr	r4, [r4, #4]
 80025e8:	e7ae      	b.n	8002548 <_malloc_r+0x34>
 80025ea:	463c      	mov	r4, r7
 80025ec:	687f      	ldr	r7, [r7, #4]
 80025ee:	e7b6      	b.n	800255e <_malloc_r+0x4a>
 80025f0:	461a      	mov	r2, r3
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	42a3      	cmp	r3, r4
 80025f6:	d1fb      	bne.n	80025f0 <_malloc_r+0xdc>
 80025f8:	2300      	movs	r3, #0
 80025fa:	6053      	str	r3, [r2, #4]
 80025fc:	e7de      	b.n	80025bc <_malloc_r+0xa8>
 80025fe:	230c      	movs	r3, #12
 8002600:	4630      	mov	r0, r6
 8002602:	6033      	str	r3, [r6, #0]
 8002604:	f000 f80c 	bl	8002620 <__malloc_unlock>
 8002608:	e794      	b.n	8002534 <_malloc_r+0x20>
 800260a:	6005      	str	r5, [r0, #0]
 800260c:	e7d6      	b.n	80025bc <_malloc_r+0xa8>
 800260e:	bf00      	nop
 8002610:	2000022c 	.word	0x2000022c

08002614 <__malloc_lock>:
 8002614:	4801      	ldr	r0, [pc, #4]	@ (800261c <__malloc_lock+0x8>)
 8002616:	f7ff bf10 	b.w	800243a <__retarget_lock_acquire_recursive>
 800261a:	bf00      	nop
 800261c:	20000224 	.word	0x20000224

08002620 <__malloc_unlock>:
 8002620:	4801      	ldr	r0, [pc, #4]	@ (8002628 <__malloc_unlock+0x8>)
 8002622:	f7ff bf0b 	b.w	800243c <__retarget_lock_release_recursive>
 8002626:	bf00      	nop
 8002628:	20000224 	.word	0x20000224

0800262c <__sfputc_r>:
 800262c:	6893      	ldr	r3, [r2, #8]
 800262e:	b410      	push	{r4}
 8002630:	3b01      	subs	r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	6093      	str	r3, [r2, #8]
 8002636:	da07      	bge.n	8002648 <__sfputc_r+0x1c>
 8002638:	6994      	ldr	r4, [r2, #24]
 800263a:	42a3      	cmp	r3, r4
 800263c:	db01      	blt.n	8002642 <__sfputc_r+0x16>
 800263e:	290a      	cmp	r1, #10
 8002640:	d102      	bne.n	8002648 <__sfputc_r+0x1c>
 8002642:	bc10      	pop	{r4}
 8002644:	f000 bb6c 	b.w	8002d20 <__swbuf_r>
 8002648:	6813      	ldr	r3, [r2, #0]
 800264a:	1c58      	adds	r0, r3, #1
 800264c:	6010      	str	r0, [r2, #0]
 800264e:	7019      	strb	r1, [r3, #0]
 8002650:	4608      	mov	r0, r1
 8002652:	bc10      	pop	{r4}
 8002654:	4770      	bx	lr

08002656 <__sfputs_r>:
 8002656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002658:	4606      	mov	r6, r0
 800265a:	460f      	mov	r7, r1
 800265c:	4614      	mov	r4, r2
 800265e:	18d5      	adds	r5, r2, r3
 8002660:	42ac      	cmp	r4, r5
 8002662:	d101      	bne.n	8002668 <__sfputs_r+0x12>
 8002664:	2000      	movs	r0, #0
 8002666:	e007      	b.n	8002678 <__sfputs_r+0x22>
 8002668:	463a      	mov	r2, r7
 800266a:	4630      	mov	r0, r6
 800266c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002670:	f7ff ffdc 	bl	800262c <__sfputc_r>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d1f3      	bne.n	8002660 <__sfputs_r+0xa>
 8002678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800267c <_vfiprintf_r>:
 800267c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002680:	460d      	mov	r5, r1
 8002682:	4614      	mov	r4, r2
 8002684:	4698      	mov	r8, r3
 8002686:	4606      	mov	r6, r0
 8002688:	b09d      	sub	sp, #116	@ 0x74
 800268a:	b118      	cbz	r0, 8002694 <_vfiprintf_r+0x18>
 800268c:	6a03      	ldr	r3, [r0, #32]
 800268e:	b90b      	cbnz	r3, 8002694 <_vfiprintf_r+0x18>
 8002690:	f7ff fdce 	bl	8002230 <__sinit>
 8002694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002696:	07d9      	lsls	r1, r3, #31
 8002698:	d405      	bmi.n	80026a6 <_vfiprintf_r+0x2a>
 800269a:	89ab      	ldrh	r3, [r5, #12]
 800269c:	059a      	lsls	r2, r3, #22
 800269e:	d402      	bmi.n	80026a6 <_vfiprintf_r+0x2a>
 80026a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026a2:	f7ff feca 	bl	800243a <__retarget_lock_acquire_recursive>
 80026a6:	89ab      	ldrh	r3, [r5, #12]
 80026a8:	071b      	lsls	r3, r3, #28
 80026aa:	d501      	bpl.n	80026b0 <_vfiprintf_r+0x34>
 80026ac:	692b      	ldr	r3, [r5, #16]
 80026ae:	b99b      	cbnz	r3, 80026d8 <_vfiprintf_r+0x5c>
 80026b0:	4629      	mov	r1, r5
 80026b2:	4630      	mov	r0, r6
 80026b4:	f000 fb72 	bl	8002d9c <__swsetup_r>
 80026b8:	b170      	cbz	r0, 80026d8 <_vfiprintf_r+0x5c>
 80026ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026bc:	07dc      	lsls	r4, r3, #31
 80026be:	d504      	bpl.n	80026ca <_vfiprintf_r+0x4e>
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	b01d      	add	sp, #116	@ 0x74
 80026c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ca:	89ab      	ldrh	r3, [r5, #12]
 80026cc:	0598      	lsls	r0, r3, #22
 80026ce:	d4f7      	bmi.n	80026c0 <_vfiprintf_r+0x44>
 80026d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026d2:	f7ff feb3 	bl	800243c <__retarget_lock_release_recursive>
 80026d6:	e7f3      	b.n	80026c0 <_vfiprintf_r+0x44>
 80026d8:	2300      	movs	r3, #0
 80026da:	9309      	str	r3, [sp, #36]	@ 0x24
 80026dc:	2320      	movs	r3, #32
 80026de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80026e2:	2330      	movs	r3, #48	@ 0x30
 80026e4:	f04f 0901 	mov.w	r9, #1
 80026e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80026ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002898 <_vfiprintf_r+0x21c>
 80026f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80026f4:	4623      	mov	r3, r4
 80026f6:	469a      	mov	sl, r3
 80026f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026fc:	b10a      	cbz	r2, 8002702 <_vfiprintf_r+0x86>
 80026fe:	2a25      	cmp	r2, #37	@ 0x25
 8002700:	d1f9      	bne.n	80026f6 <_vfiprintf_r+0x7a>
 8002702:	ebba 0b04 	subs.w	fp, sl, r4
 8002706:	d00b      	beq.n	8002720 <_vfiprintf_r+0xa4>
 8002708:	465b      	mov	r3, fp
 800270a:	4622      	mov	r2, r4
 800270c:	4629      	mov	r1, r5
 800270e:	4630      	mov	r0, r6
 8002710:	f7ff ffa1 	bl	8002656 <__sfputs_r>
 8002714:	3001      	adds	r0, #1
 8002716:	f000 80a7 	beq.w	8002868 <_vfiprintf_r+0x1ec>
 800271a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800271c:	445a      	add	r2, fp
 800271e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002720:	f89a 3000 	ldrb.w	r3, [sl]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 809f 	beq.w	8002868 <_vfiprintf_r+0x1ec>
 800272a:	2300      	movs	r3, #0
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002734:	f10a 0a01 	add.w	sl, sl, #1
 8002738:	9304      	str	r3, [sp, #16]
 800273a:	9307      	str	r3, [sp, #28]
 800273c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002740:	931a      	str	r3, [sp, #104]	@ 0x68
 8002742:	4654      	mov	r4, sl
 8002744:	2205      	movs	r2, #5
 8002746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800274a:	4853      	ldr	r0, [pc, #332]	@ (8002898 <_vfiprintf_r+0x21c>)
 800274c:	f000 fb8c 	bl	8002e68 <memchr>
 8002750:	9a04      	ldr	r2, [sp, #16]
 8002752:	b9d8      	cbnz	r0, 800278c <_vfiprintf_r+0x110>
 8002754:	06d1      	lsls	r1, r2, #27
 8002756:	bf44      	itt	mi
 8002758:	2320      	movmi	r3, #32
 800275a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800275e:	0713      	lsls	r3, r2, #28
 8002760:	bf44      	itt	mi
 8002762:	232b      	movmi	r3, #43	@ 0x2b
 8002764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002768:	f89a 3000 	ldrb.w	r3, [sl]
 800276c:	2b2a      	cmp	r3, #42	@ 0x2a
 800276e:	d015      	beq.n	800279c <_vfiprintf_r+0x120>
 8002770:	4654      	mov	r4, sl
 8002772:	2000      	movs	r0, #0
 8002774:	f04f 0c0a 	mov.w	ip, #10
 8002778:	9a07      	ldr	r2, [sp, #28]
 800277a:	4621      	mov	r1, r4
 800277c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002780:	3b30      	subs	r3, #48	@ 0x30
 8002782:	2b09      	cmp	r3, #9
 8002784:	d94b      	bls.n	800281e <_vfiprintf_r+0x1a2>
 8002786:	b1b0      	cbz	r0, 80027b6 <_vfiprintf_r+0x13a>
 8002788:	9207      	str	r2, [sp, #28]
 800278a:	e014      	b.n	80027b6 <_vfiprintf_r+0x13a>
 800278c:	eba0 0308 	sub.w	r3, r0, r8
 8002790:	fa09 f303 	lsl.w	r3, r9, r3
 8002794:	4313      	orrs	r3, r2
 8002796:	46a2      	mov	sl, r4
 8002798:	9304      	str	r3, [sp, #16]
 800279a:	e7d2      	b.n	8002742 <_vfiprintf_r+0xc6>
 800279c:	9b03      	ldr	r3, [sp, #12]
 800279e:	1d19      	adds	r1, r3, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	9103      	str	r1, [sp, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bfbb      	ittet	lt
 80027a8:	425b      	neglt	r3, r3
 80027aa:	f042 0202 	orrlt.w	r2, r2, #2
 80027ae:	9307      	strge	r3, [sp, #28]
 80027b0:	9307      	strlt	r3, [sp, #28]
 80027b2:	bfb8      	it	lt
 80027b4:	9204      	strlt	r2, [sp, #16]
 80027b6:	7823      	ldrb	r3, [r4, #0]
 80027b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80027ba:	d10a      	bne.n	80027d2 <_vfiprintf_r+0x156>
 80027bc:	7863      	ldrb	r3, [r4, #1]
 80027be:	2b2a      	cmp	r3, #42	@ 0x2a
 80027c0:	d132      	bne.n	8002828 <_vfiprintf_r+0x1ac>
 80027c2:	9b03      	ldr	r3, [sp, #12]
 80027c4:	3402      	adds	r4, #2
 80027c6:	1d1a      	adds	r2, r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	9203      	str	r2, [sp, #12]
 80027cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80027d0:	9305      	str	r3, [sp, #20]
 80027d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800289c <_vfiprintf_r+0x220>
 80027d6:	2203      	movs	r2, #3
 80027d8:	4650      	mov	r0, sl
 80027da:	7821      	ldrb	r1, [r4, #0]
 80027dc:	f000 fb44 	bl	8002e68 <memchr>
 80027e0:	b138      	cbz	r0, 80027f2 <_vfiprintf_r+0x176>
 80027e2:	2240      	movs	r2, #64	@ 0x40
 80027e4:	9b04      	ldr	r3, [sp, #16]
 80027e6:	eba0 000a 	sub.w	r0, r0, sl
 80027ea:	4082      	lsls	r2, r0
 80027ec:	4313      	orrs	r3, r2
 80027ee:	3401      	adds	r4, #1
 80027f0:	9304      	str	r3, [sp, #16]
 80027f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027f6:	2206      	movs	r2, #6
 80027f8:	4829      	ldr	r0, [pc, #164]	@ (80028a0 <_vfiprintf_r+0x224>)
 80027fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80027fe:	f000 fb33 	bl	8002e68 <memchr>
 8002802:	2800      	cmp	r0, #0
 8002804:	d03f      	beq.n	8002886 <_vfiprintf_r+0x20a>
 8002806:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <_vfiprintf_r+0x228>)
 8002808:	bb1b      	cbnz	r3, 8002852 <_vfiprintf_r+0x1d6>
 800280a:	9b03      	ldr	r3, [sp, #12]
 800280c:	3307      	adds	r3, #7
 800280e:	f023 0307 	bic.w	r3, r3, #7
 8002812:	3308      	adds	r3, #8
 8002814:	9303      	str	r3, [sp, #12]
 8002816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002818:	443b      	add	r3, r7
 800281a:	9309      	str	r3, [sp, #36]	@ 0x24
 800281c:	e76a      	b.n	80026f4 <_vfiprintf_r+0x78>
 800281e:	460c      	mov	r4, r1
 8002820:	2001      	movs	r0, #1
 8002822:	fb0c 3202 	mla	r2, ip, r2, r3
 8002826:	e7a8      	b.n	800277a <_vfiprintf_r+0xfe>
 8002828:	2300      	movs	r3, #0
 800282a:	f04f 0c0a 	mov.w	ip, #10
 800282e:	4619      	mov	r1, r3
 8002830:	3401      	adds	r4, #1
 8002832:	9305      	str	r3, [sp, #20]
 8002834:	4620      	mov	r0, r4
 8002836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800283a:	3a30      	subs	r2, #48	@ 0x30
 800283c:	2a09      	cmp	r2, #9
 800283e:	d903      	bls.n	8002848 <_vfiprintf_r+0x1cc>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0c6      	beq.n	80027d2 <_vfiprintf_r+0x156>
 8002844:	9105      	str	r1, [sp, #20]
 8002846:	e7c4      	b.n	80027d2 <_vfiprintf_r+0x156>
 8002848:	4604      	mov	r4, r0
 800284a:	2301      	movs	r3, #1
 800284c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002850:	e7f0      	b.n	8002834 <_vfiprintf_r+0x1b8>
 8002852:	ab03      	add	r3, sp, #12
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	462a      	mov	r2, r5
 8002858:	4630      	mov	r0, r6
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <_vfiprintf_r+0x22c>)
 800285c:	a904      	add	r1, sp, #16
 800285e:	f3af 8000 	nop.w
 8002862:	4607      	mov	r7, r0
 8002864:	1c78      	adds	r0, r7, #1
 8002866:	d1d6      	bne.n	8002816 <_vfiprintf_r+0x19a>
 8002868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800286a:	07d9      	lsls	r1, r3, #31
 800286c:	d405      	bmi.n	800287a <_vfiprintf_r+0x1fe>
 800286e:	89ab      	ldrh	r3, [r5, #12]
 8002870:	059a      	lsls	r2, r3, #22
 8002872:	d402      	bmi.n	800287a <_vfiprintf_r+0x1fe>
 8002874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002876:	f7ff fde1 	bl	800243c <__retarget_lock_release_recursive>
 800287a:	89ab      	ldrh	r3, [r5, #12]
 800287c:	065b      	lsls	r3, r3, #25
 800287e:	f53f af1f 	bmi.w	80026c0 <_vfiprintf_r+0x44>
 8002882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002884:	e71e      	b.n	80026c4 <_vfiprintf_r+0x48>
 8002886:	ab03      	add	r3, sp, #12
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	462a      	mov	r2, r5
 800288c:	4630      	mov	r0, r6
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <_vfiprintf_r+0x22c>)
 8002890:	a904      	add	r1, sp, #16
 8002892:	f000 f87d 	bl	8002990 <_printf_i>
 8002896:	e7e4      	b.n	8002862 <_vfiprintf_r+0x1e6>
 8002898:	08002fe8 	.word	0x08002fe8
 800289c:	08002fee 	.word	0x08002fee
 80028a0:	08002ff2 	.word	0x08002ff2
 80028a4:	00000000 	.word	0x00000000
 80028a8:	08002657 	.word	0x08002657

080028ac <_printf_common>:
 80028ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	4616      	mov	r6, r2
 80028b2:	4698      	mov	r8, r3
 80028b4:	688a      	ldr	r2, [r1, #8]
 80028b6:	690b      	ldr	r3, [r1, #16]
 80028b8:	4607      	mov	r7, r0
 80028ba:	4293      	cmp	r3, r2
 80028bc:	bfb8      	it	lt
 80028be:	4613      	movlt	r3, r2
 80028c0:	6033      	str	r3, [r6, #0]
 80028c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80028c6:	460c      	mov	r4, r1
 80028c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80028cc:	b10a      	cbz	r2, 80028d2 <_printf_common+0x26>
 80028ce:	3301      	adds	r3, #1
 80028d0:	6033      	str	r3, [r6, #0]
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	0699      	lsls	r1, r3, #26
 80028d6:	bf42      	ittt	mi
 80028d8:	6833      	ldrmi	r3, [r6, #0]
 80028da:	3302      	addmi	r3, #2
 80028dc:	6033      	strmi	r3, [r6, #0]
 80028de:	6825      	ldr	r5, [r4, #0]
 80028e0:	f015 0506 	ands.w	r5, r5, #6
 80028e4:	d106      	bne.n	80028f4 <_printf_common+0x48>
 80028e6:	f104 0a19 	add.w	sl, r4, #25
 80028ea:	68e3      	ldr	r3, [r4, #12]
 80028ec:	6832      	ldr	r2, [r6, #0]
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	42ab      	cmp	r3, r5
 80028f2:	dc2b      	bgt.n	800294c <_printf_common+0xa0>
 80028f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028f8:	6822      	ldr	r2, [r4, #0]
 80028fa:	3b00      	subs	r3, #0
 80028fc:	bf18      	it	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	0692      	lsls	r2, r2, #26
 8002902:	d430      	bmi.n	8002966 <_printf_common+0xba>
 8002904:	4641      	mov	r1, r8
 8002906:	4638      	mov	r0, r7
 8002908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800290c:	47c8      	blx	r9
 800290e:	3001      	adds	r0, #1
 8002910:	d023      	beq.n	800295a <_printf_common+0xae>
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	6922      	ldr	r2, [r4, #16]
 8002916:	f003 0306 	and.w	r3, r3, #6
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf14      	ite	ne
 800291e:	2500      	movne	r5, #0
 8002920:	6833      	ldreq	r3, [r6, #0]
 8002922:	f04f 0600 	mov.w	r6, #0
 8002926:	bf08      	it	eq
 8002928:	68e5      	ldreq	r5, [r4, #12]
 800292a:	f104 041a 	add.w	r4, r4, #26
 800292e:	bf08      	it	eq
 8002930:	1aed      	subeq	r5, r5, r3
 8002932:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002936:	bf08      	it	eq
 8002938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800293c:	4293      	cmp	r3, r2
 800293e:	bfc4      	itt	gt
 8002940:	1a9b      	subgt	r3, r3, r2
 8002942:	18ed      	addgt	r5, r5, r3
 8002944:	42b5      	cmp	r5, r6
 8002946:	d11a      	bne.n	800297e <_printf_common+0xd2>
 8002948:	2000      	movs	r0, #0
 800294a:	e008      	b.n	800295e <_printf_common+0xb2>
 800294c:	2301      	movs	r3, #1
 800294e:	4652      	mov	r2, sl
 8002950:	4641      	mov	r1, r8
 8002952:	4638      	mov	r0, r7
 8002954:	47c8      	blx	r9
 8002956:	3001      	adds	r0, #1
 8002958:	d103      	bne.n	8002962 <_printf_common+0xb6>
 800295a:	f04f 30ff 	mov.w	r0, #4294967295
 800295e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002962:	3501      	adds	r5, #1
 8002964:	e7c1      	b.n	80028ea <_printf_common+0x3e>
 8002966:	2030      	movs	r0, #48	@ 0x30
 8002968:	18e1      	adds	r1, r4, r3
 800296a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002974:	4422      	add	r2, r4
 8002976:	3302      	adds	r3, #2
 8002978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800297c:	e7c2      	b.n	8002904 <_printf_common+0x58>
 800297e:	2301      	movs	r3, #1
 8002980:	4622      	mov	r2, r4
 8002982:	4641      	mov	r1, r8
 8002984:	4638      	mov	r0, r7
 8002986:	47c8      	blx	r9
 8002988:	3001      	adds	r0, #1
 800298a:	d0e6      	beq.n	800295a <_printf_common+0xae>
 800298c:	3601      	adds	r6, #1
 800298e:	e7d9      	b.n	8002944 <_printf_common+0x98>

08002990 <_printf_i>:
 8002990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002994:	7e0f      	ldrb	r7, [r1, #24]
 8002996:	4691      	mov	r9, r2
 8002998:	2f78      	cmp	r7, #120	@ 0x78
 800299a:	4680      	mov	r8, r0
 800299c:	460c      	mov	r4, r1
 800299e:	469a      	mov	sl, r3
 80029a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80029a6:	d807      	bhi.n	80029b8 <_printf_i+0x28>
 80029a8:	2f62      	cmp	r7, #98	@ 0x62
 80029aa:	d80a      	bhi.n	80029c2 <_printf_i+0x32>
 80029ac:	2f00      	cmp	r7, #0
 80029ae:	f000 80d3 	beq.w	8002b58 <_printf_i+0x1c8>
 80029b2:	2f58      	cmp	r7, #88	@ 0x58
 80029b4:	f000 80ba 	beq.w	8002b2c <_printf_i+0x19c>
 80029b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80029c0:	e03a      	b.n	8002a38 <_printf_i+0xa8>
 80029c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80029c6:	2b15      	cmp	r3, #21
 80029c8:	d8f6      	bhi.n	80029b8 <_printf_i+0x28>
 80029ca:	a101      	add	r1, pc, #4	@ (adr r1, 80029d0 <_printf_i+0x40>)
 80029cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029d0:	08002a29 	.word	0x08002a29
 80029d4:	08002a3d 	.word	0x08002a3d
 80029d8:	080029b9 	.word	0x080029b9
 80029dc:	080029b9 	.word	0x080029b9
 80029e0:	080029b9 	.word	0x080029b9
 80029e4:	080029b9 	.word	0x080029b9
 80029e8:	08002a3d 	.word	0x08002a3d
 80029ec:	080029b9 	.word	0x080029b9
 80029f0:	080029b9 	.word	0x080029b9
 80029f4:	080029b9 	.word	0x080029b9
 80029f8:	080029b9 	.word	0x080029b9
 80029fc:	08002b3f 	.word	0x08002b3f
 8002a00:	08002a67 	.word	0x08002a67
 8002a04:	08002af9 	.word	0x08002af9
 8002a08:	080029b9 	.word	0x080029b9
 8002a0c:	080029b9 	.word	0x080029b9
 8002a10:	08002b61 	.word	0x08002b61
 8002a14:	080029b9 	.word	0x080029b9
 8002a18:	08002a67 	.word	0x08002a67
 8002a1c:	080029b9 	.word	0x080029b9
 8002a20:	080029b9 	.word	0x080029b9
 8002a24:	08002b01 	.word	0x08002b01
 8002a28:	6833      	ldr	r3, [r6, #0]
 8002a2a:	1d1a      	adds	r2, r3, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6032      	str	r2, [r6, #0]
 8002a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e09e      	b.n	8002b7a <_printf_i+0x1ea>
 8002a3c:	6833      	ldr	r3, [r6, #0]
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	1d19      	adds	r1, r3, #4
 8002a42:	6031      	str	r1, [r6, #0]
 8002a44:	0606      	lsls	r6, r0, #24
 8002a46:	d501      	bpl.n	8002a4c <_printf_i+0xbc>
 8002a48:	681d      	ldr	r5, [r3, #0]
 8002a4a:	e003      	b.n	8002a54 <_printf_i+0xc4>
 8002a4c:	0645      	lsls	r5, r0, #25
 8002a4e:	d5fb      	bpl.n	8002a48 <_printf_i+0xb8>
 8002a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a54:	2d00      	cmp	r5, #0
 8002a56:	da03      	bge.n	8002a60 <_printf_i+0xd0>
 8002a58:	232d      	movs	r3, #45	@ 0x2d
 8002a5a:	426d      	negs	r5, r5
 8002a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a60:	230a      	movs	r3, #10
 8002a62:	4859      	ldr	r0, [pc, #356]	@ (8002bc8 <_printf_i+0x238>)
 8002a64:	e011      	b.n	8002a8a <_printf_i+0xfa>
 8002a66:	6821      	ldr	r1, [r4, #0]
 8002a68:	6833      	ldr	r3, [r6, #0]
 8002a6a:	0608      	lsls	r0, r1, #24
 8002a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a70:	d402      	bmi.n	8002a78 <_printf_i+0xe8>
 8002a72:	0649      	lsls	r1, r1, #25
 8002a74:	bf48      	it	mi
 8002a76:	b2ad      	uxthmi	r5, r5
 8002a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a7a:	6033      	str	r3, [r6, #0]
 8002a7c:	bf14      	ite	ne
 8002a7e:	230a      	movne	r3, #10
 8002a80:	2308      	moveq	r3, #8
 8002a82:	4851      	ldr	r0, [pc, #324]	@ (8002bc8 <_printf_i+0x238>)
 8002a84:	2100      	movs	r1, #0
 8002a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a8a:	6866      	ldr	r6, [r4, #4]
 8002a8c:	2e00      	cmp	r6, #0
 8002a8e:	bfa8      	it	ge
 8002a90:	6821      	ldrge	r1, [r4, #0]
 8002a92:	60a6      	str	r6, [r4, #8]
 8002a94:	bfa4      	itt	ge
 8002a96:	f021 0104 	bicge.w	r1, r1, #4
 8002a9a:	6021      	strge	r1, [r4, #0]
 8002a9c:	b90d      	cbnz	r5, 8002aa2 <_printf_i+0x112>
 8002a9e:	2e00      	cmp	r6, #0
 8002aa0:	d04b      	beq.n	8002b3a <_printf_i+0x1aa>
 8002aa2:	4616      	mov	r6, r2
 8002aa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002aa8:	fb03 5711 	mls	r7, r3, r1, r5
 8002aac:	5dc7      	ldrb	r7, [r0, r7]
 8002aae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ab2:	462f      	mov	r7, r5
 8002ab4:	42bb      	cmp	r3, r7
 8002ab6:	460d      	mov	r5, r1
 8002ab8:	d9f4      	bls.n	8002aa4 <_printf_i+0x114>
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d10b      	bne.n	8002ad6 <_printf_i+0x146>
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	07df      	lsls	r7, r3, #31
 8002ac2:	d508      	bpl.n	8002ad6 <_printf_i+0x146>
 8002ac4:	6923      	ldr	r3, [r4, #16]
 8002ac6:	6861      	ldr	r1, [r4, #4]
 8002ac8:	4299      	cmp	r1, r3
 8002aca:	bfde      	ittt	le
 8002acc:	2330      	movle	r3, #48	@ 0x30
 8002ace:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ad2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ad6:	1b92      	subs	r2, r2, r6
 8002ad8:	6122      	str	r2, [r4, #16]
 8002ada:	464b      	mov	r3, r9
 8002adc:	4621      	mov	r1, r4
 8002ade:	4640      	mov	r0, r8
 8002ae0:	f8cd a000 	str.w	sl, [sp]
 8002ae4:	aa03      	add	r2, sp, #12
 8002ae6:	f7ff fee1 	bl	80028ac <_printf_common>
 8002aea:	3001      	adds	r0, #1
 8002aec:	d14a      	bne.n	8002b84 <_printf_i+0x1f4>
 8002aee:	f04f 30ff 	mov.w	r0, #4294967295
 8002af2:	b004      	add	sp, #16
 8002af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	f043 0320 	orr.w	r3, r3, #32
 8002afe:	6023      	str	r3, [r4, #0]
 8002b00:	2778      	movs	r7, #120	@ 0x78
 8002b02:	4832      	ldr	r0, [pc, #200]	@ (8002bcc <_printf_i+0x23c>)
 8002b04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	6831      	ldr	r1, [r6, #0]
 8002b0c:	061f      	lsls	r7, r3, #24
 8002b0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b12:	d402      	bmi.n	8002b1a <_printf_i+0x18a>
 8002b14:	065f      	lsls	r7, r3, #25
 8002b16:	bf48      	it	mi
 8002b18:	b2ad      	uxthmi	r5, r5
 8002b1a:	6031      	str	r1, [r6, #0]
 8002b1c:	07d9      	lsls	r1, r3, #31
 8002b1e:	bf44      	itt	mi
 8002b20:	f043 0320 	orrmi.w	r3, r3, #32
 8002b24:	6023      	strmi	r3, [r4, #0]
 8002b26:	b11d      	cbz	r5, 8002b30 <_printf_i+0x1a0>
 8002b28:	2310      	movs	r3, #16
 8002b2a:	e7ab      	b.n	8002a84 <_printf_i+0xf4>
 8002b2c:	4826      	ldr	r0, [pc, #152]	@ (8002bc8 <_printf_i+0x238>)
 8002b2e:	e7e9      	b.n	8002b04 <_printf_i+0x174>
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	f023 0320 	bic.w	r3, r3, #32
 8002b36:	6023      	str	r3, [r4, #0]
 8002b38:	e7f6      	b.n	8002b28 <_printf_i+0x198>
 8002b3a:	4616      	mov	r6, r2
 8002b3c:	e7bd      	b.n	8002aba <_printf_i+0x12a>
 8002b3e:	6833      	ldr	r3, [r6, #0]
 8002b40:	6825      	ldr	r5, [r4, #0]
 8002b42:	1d18      	adds	r0, r3, #4
 8002b44:	6961      	ldr	r1, [r4, #20]
 8002b46:	6030      	str	r0, [r6, #0]
 8002b48:	062e      	lsls	r6, r5, #24
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	d501      	bpl.n	8002b52 <_printf_i+0x1c2>
 8002b4e:	6019      	str	r1, [r3, #0]
 8002b50:	e002      	b.n	8002b58 <_printf_i+0x1c8>
 8002b52:	0668      	lsls	r0, r5, #25
 8002b54:	d5fb      	bpl.n	8002b4e <_printf_i+0x1be>
 8002b56:	8019      	strh	r1, [r3, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	4616      	mov	r6, r2
 8002b5c:	6123      	str	r3, [r4, #16]
 8002b5e:	e7bc      	b.n	8002ada <_printf_i+0x14a>
 8002b60:	6833      	ldr	r3, [r6, #0]
 8002b62:	2100      	movs	r1, #0
 8002b64:	1d1a      	adds	r2, r3, #4
 8002b66:	6032      	str	r2, [r6, #0]
 8002b68:	681e      	ldr	r6, [r3, #0]
 8002b6a:	6862      	ldr	r2, [r4, #4]
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	f000 f97b 	bl	8002e68 <memchr>
 8002b72:	b108      	cbz	r0, 8002b78 <_printf_i+0x1e8>
 8002b74:	1b80      	subs	r0, r0, r6
 8002b76:	6060      	str	r0, [r4, #4]
 8002b78:	6863      	ldr	r3, [r4, #4]
 8002b7a:	6123      	str	r3, [r4, #16]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b82:	e7aa      	b.n	8002ada <_printf_i+0x14a>
 8002b84:	4632      	mov	r2, r6
 8002b86:	4649      	mov	r1, r9
 8002b88:	4640      	mov	r0, r8
 8002b8a:	6923      	ldr	r3, [r4, #16]
 8002b8c:	47d0      	blx	sl
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d0ad      	beq.n	8002aee <_printf_i+0x15e>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	079b      	lsls	r3, r3, #30
 8002b96:	d413      	bmi.n	8002bc0 <_printf_i+0x230>
 8002b98:	68e0      	ldr	r0, [r4, #12]
 8002b9a:	9b03      	ldr	r3, [sp, #12]
 8002b9c:	4298      	cmp	r0, r3
 8002b9e:	bfb8      	it	lt
 8002ba0:	4618      	movlt	r0, r3
 8002ba2:	e7a6      	b.n	8002af2 <_printf_i+0x162>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	4649      	mov	r1, r9
 8002baa:	4640      	mov	r0, r8
 8002bac:	47d0      	blx	sl
 8002bae:	3001      	adds	r0, #1
 8002bb0:	d09d      	beq.n	8002aee <_printf_i+0x15e>
 8002bb2:	3501      	adds	r5, #1
 8002bb4:	68e3      	ldr	r3, [r4, #12]
 8002bb6:	9903      	ldr	r1, [sp, #12]
 8002bb8:	1a5b      	subs	r3, r3, r1
 8002bba:	42ab      	cmp	r3, r5
 8002bbc:	dcf2      	bgt.n	8002ba4 <_printf_i+0x214>
 8002bbe:	e7eb      	b.n	8002b98 <_printf_i+0x208>
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	f104 0619 	add.w	r6, r4, #25
 8002bc6:	e7f5      	b.n	8002bb4 <_printf_i+0x224>
 8002bc8:	08002ff9 	.word	0x08002ff9
 8002bcc:	0800300a 	.word	0x0800300a

08002bd0 <__sflush_r>:
 8002bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	0716      	lsls	r6, r2, #28
 8002bd8:	4605      	mov	r5, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	d454      	bmi.n	8002c88 <__sflush_r+0xb8>
 8002bde:	684b      	ldr	r3, [r1, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	dc02      	bgt.n	8002bea <__sflush_r+0x1a>
 8002be4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	dd48      	ble.n	8002c7c <__sflush_r+0xac>
 8002bea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002bec:	2e00      	cmp	r6, #0
 8002bee:	d045      	beq.n	8002c7c <__sflush_r+0xac>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002bf6:	682f      	ldr	r7, [r5, #0]
 8002bf8:	6a21      	ldr	r1, [r4, #32]
 8002bfa:	602b      	str	r3, [r5, #0]
 8002bfc:	d030      	beq.n	8002c60 <__sflush_r+0x90>
 8002bfe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	0759      	lsls	r1, r3, #29
 8002c04:	d505      	bpl.n	8002c12 <__sflush_r+0x42>
 8002c06:	6863      	ldr	r3, [r4, #4]
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c0c:	b10b      	cbz	r3, 8002c12 <__sflush_r+0x42>
 8002c0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c10:	1ad2      	subs	r2, r2, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	4628      	mov	r0, r5
 8002c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c18:	6a21      	ldr	r1, [r4, #32]
 8002c1a:	47b0      	blx	r6
 8002c1c:	1c43      	adds	r3, r0, #1
 8002c1e:	89a3      	ldrh	r3, [r4, #12]
 8002c20:	d106      	bne.n	8002c30 <__sflush_r+0x60>
 8002c22:	6829      	ldr	r1, [r5, #0]
 8002c24:	291d      	cmp	r1, #29
 8002c26:	d82b      	bhi.n	8002c80 <__sflush_r+0xb0>
 8002c28:	4a28      	ldr	r2, [pc, #160]	@ (8002ccc <__sflush_r+0xfc>)
 8002c2a:	410a      	asrs	r2, r1
 8002c2c:	07d6      	lsls	r6, r2, #31
 8002c2e:	d427      	bmi.n	8002c80 <__sflush_r+0xb0>
 8002c30:	2200      	movs	r2, #0
 8002c32:	6062      	str	r2, [r4, #4]
 8002c34:	6922      	ldr	r2, [r4, #16]
 8002c36:	04d9      	lsls	r1, r3, #19
 8002c38:	6022      	str	r2, [r4, #0]
 8002c3a:	d504      	bpl.n	8002c46 <__sflush_r+0x76>
 8002c3c:	1c42      	adds	r2, r0, #1
 8002c3e:	d101      	bne.n	8002c44 <__sflush_r+0x74>
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	b903      	cbnz	r3, 8002c46 <__sflush_r+0x76>
 8002c44:	6560      	str	r0, [r4, #84]	@ 0x54
 8002c46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c48:	602f      	str	r7, [r5, #0]
 8002c4a:	b1b9      	cbz	r1, 8002c7c <__sflush_r+0xac>
 8002c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c50:	4299      	cmp	r1, r3
 8002c52:	d002      	beq.n	8002c5a <__sflush_r+0x8a>
 8002c54:	4628      	mov	r0, r5
 8002c56:	f7ff fbf3 	bl	8002440 <_free_r>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c5e:	e00d      	b.n	8002c7c <__sflush_r+0xac>
 8002c60:	2301      	movs	r3, #1
 8002c62:	4628      	mov	r0, r5
 8002c64:	47b0      	blx	r6
 8002c66:	4602      	mov	r2, r0
 8002c68:	1c50      	adds	r0, r2, #1
 8002c6a:	d1c9      	bne.n	8002c00 <__sflush_r+0x30>
 8002c6c:	682b      	ldr	r3, [r5, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0c6      	beq.n	8002c00 <__sflush_r+0x30>
 8002c72:	2b1d      	cmp	r3, #29
 8002c74:	d001      	beq.n	8002c7a <__sflush_r+0xaa>
 8002c76:	2b16      	cmp	r3, #22
 8002c78:	d11d      	bne.n	8002cb6 <__sflush_r+0xe6>
 8002c7a:	602f      	str	r7, [r5, #0]
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	e021      	b.n	8002cc4 <__sflush_r+0xf4>
 8002c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	e01a      	b.n	8002cbe <__sflush_r+0xee>
 8002c88:	690f      	ldr	r7, [r1, #16]
 8002c8a:	2f00      	cmp	r7, #0
 8002c8c:	d0f6      	beq.n	8002c7c <__sflush_r+0xac>
 8002c8e:	0793      	lsls	r3, r2, #30
 8002c90:	bf18      	it	ne
 8002c92:	2300      	movne	r3, #0
 8002c94:	680e      	ldr	r6, [r1, #0]
 8002c96:	bf08      	it	eq
 8002c98:	694b      	ldreq	r3, [r1, #20]
 8002c9a:	1bf6      	subs	r6, r6, r7
 8002c9c:	600f      	str	r7, [r1, #0]
 8002c9e:	608b      	str	r3, [r1, #8]
 8002ca0:	2e00      	cmp	r6, #0
 8002ca2:	ddeb      	ble.n	8002c7c <__sflush_r+0xac>
 8002ca4:	4633      	mov	r3, r6
 8002ca6:	463a      	mov	r2, r7
 8002ca8:	4628      	mov	r0, r5
 8002caa:	6a21      	ldr	r1, [r4, #32]
 8002cac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002cb0:	47e0      	blx	ip
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	dc07      	bgt.n	8002cc6 <__sflush_r+0xf6>
 8002cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc2:	81a3      	strh	r3, [r4, #12]
 8002cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cc6:	4407      	add	r7, r0
 8002cc8:	1a36      	subs	r6, r6, r0
 8002cca:	e7e9      	b.n	8002ca0 <__sflush_r+0xd0>
 8002ccc:	dfbffffe 	.word	0xdfbffffe

08002cd0 <_fflush_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	690b      	ldr	r3, [r1, #16]
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	b913      	cbnz	r3, 8002ce0 <_fflush_r+0x10>
 8002cda:	2500      	movs	r5, #0
 8002cdc:	4628      	mov	r0, r5
 8002cde:	bd38      	pop	{r3, r4, r5, pc}
 8002ce0:	b118      	cbz	r0, 8002cea <_fflush_r+0x1a>
 8002ce2:	6a03      	ldr	r3, [r0, #32]
 8002ce4:	b90b      	cbnz	r3, 8002cea <_fflush_r+0x1a>
 8002ce6:	f7ff faa3 	bl	8002230 <__sinit>
 8002cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f3      	beq.n	8002cda <_fflush_r+0xa>
 8002cf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002cf4:	07d0      	lsls	r0, r2, #31
 8002cf6:	d404      	bmi.n	8002d02 <_fflush_r+0x32>
 8002cf8:	0599      	lsls	r1, r3, #22
 8002cfa:	d402      	bmi.n	8002d02 <_fflush_r+0x32>
 8002cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cfe:	f7ff fb9c 	bl	800243a <__retarget_lock_acquire_recursive>
 8002d02:	4628      	mov	r0, r5
 8002d04:	4621      	mov	r1, r4
 8002d06:	f7ff ff63 	bl	8002bd0 <__sflush_r>
 8002d0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d0c:	4605      	mov	r5, r0
 8002d0e:	07da      	lsls	r2, r3, #31
 8002d10:	d4e4      	bmi.n	8002cdc <_fflush_r+0xc>
 8002d12:	89a3      	ldrh	r3, [r4, #12]
 8002d14:	059b      	lsls	r3, r3, #22
 8002d16:	d4e1      	bmi.n	8002cdc <_fflush_r+0xc>
 8002d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d1a:	f7ff fb8f 	bl	800243c <__retarget_lock_release_recursive>
 8002d1e:	e7dd      	b.n	8002cdc <_fflush_r+0xc>

08002d20 <__swbuf_r>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	460e      	mov	r6, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	4605      	mov	r5, r0
 8002d28:	b118      	cbz	r0, 8002d32 <__swbuf_r+0x12>
 8002d2a:	6a03      	ldr	r3, [r0, #32]
 8002d2c:	b90b      	cbnz	r3, 8002d32 <__swbuf_r+0x12>
 8002d2e:	f7ff fa7f 	bl	8002230 <__sinit>
 8002d32:	69a3      	ldr	r3, [r4, #24]
 8002d34:	60a3      	str	r3, [r4, #8]
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	071a      	lsls	r2, r3, #28
 8002d3a:	d501      	bpl.n	8002d40 <__swbuf_r+0x20>
 8002d3c:	6923      	ldr	r3, [r4, #16]
 8002d3e:	b943      	cbnz	r3, 8002d52 <__swbuf_r+0x32>
 8002d40:	4621      	mov	r1, r4
 8002d42:	4628      	mov	r0, r5
 8002d44:	f000 f82a 	bl	8002d9c <__swsetup_r>
 8002d48:	b118      	cbz	r0, 8002d52 <__swbuf_r+0x32>
 8002d4a:	f04f 37ff 	mov.w	r7, #4294967295
 8002d4e:	4638      	mov	r0, r7
 8002d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	6922      	ldr	r2, [r4, #16]
 8002d56:	b2f6      	uxtb	r6, r6
 8002d58:	1a98      	subs	r0, r3, r2
 8002d5a:	6963      	ldr	r3, [r4, #20]
 8002d5c:	4637      	mov	r7, r6
 8002d5e:	4283      	cmp	r3, r0
 8002d60:	dc05      	bgt.n	8002d6e <__swbuf_r+0x4e>
 8002d62:	4621      	mov	r1, r4
 8002d64:	4628      	mov	r0, r5
 8002d66:	f7ff ffb3 	bl	8002cd0 <_fflush_r>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d1ed      	bne.n	8002d4a <__swbuf_r+0x2a>
 8002d6e:	68a3      	ldr	r3, [r4, #8]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	60a3      	str	r3, [r4, #8]
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	6022      	str	r2, [r4, #0]
 8002d7a:	701e      	strb	r6, [r3, #0]
 8002d7c:	6962      	ldr	r2, [r4, #20]
 8002d7e:	1c43      	adds	r3, r0, #1
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d004      	beq.n	8002d8e <__swbuf_r+0x6e>
 8002d84:	89a3      	ldrh	r3, [r4, #12]
 8002d86:	07db      	lsls	r3, r3, #31
 8002d88:	d5e1      	bpl.n	8002d4e <__swbuf_r+0x2e>
 8002d8a:	2e0a      	cmp	r6, #10
 8002d8c:	d1df      	bne.n	8002d4e <__swbuf_r+0x2e>
 8002d8e:	4621      	mov	r1, r4
 8002d90:	4628      	mov	r0, r5
 8002d92:	f7ff ff9d 	bl	8002cd0 <_fflush_r>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d0d9      	beq.n	8002d4e <__swbuf_r+0x2e>
 8002d9a:	e7d6      	b.n	8002d4a <__swbuf_r+0x2a>

08002d9c <__swsetup_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <__swsetup_r+0xa8>)
 8002da0:	4605      	mov	r5, r0
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	460c      	mov	r4, r1
 8002da6:	b118      	cbz	r0, 8002db0 <__swsetup_r+0x14>
 8002da8:	6a03      	ldr	r3, [r0, #32]
 8002daa:	b90b      	cbnz	r3, 8002db0 <__swsetup_r+0x14>
 8002dac:	f7ff fa40 	bl	8002230 <__sinit>
 8002db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002db4:	0719      	lsls	r1, r3, #28
 8002db6:	d422      	bmi.n	8002dfe <__swsetup_r+0x62>
 8002db8:	06da      	lsls	r2, r3, #27
 8002dba:	d407      	bmi.n	8002dcc <__swsetup_r+0x30>
 8002dbc:	2209      	movs	r2, #9
 8002dbe:	602a      	str	r2, [r5, #0]
 8002dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	81a3      	strh	r3, [r4, #12]
 8002dca:	e033      	b.n	8002e34 <__swsetup_r+0x98>
 8002dcc:	0758      	lsls	r0, r3, #29
 8002dce:	d512      	bpl.n	8002df6 <__swsetup_r+0x5a>
 8002dd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002dd2:	b141      	cbz	r1, 8002de6 <__swsetup_r+0x4a>
 8002dd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002dd8:	4299      	cmp	r1, r3
 8002dda:	d002      	beq.n	8002de2 <__swsetup_r+0x46>
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f7ff fb2f 	bl	8002440 <_free_r>
 8002de2:	2300      	movs	r3, #0
 8002de4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002dec:	81a3      	strh	r3, [r4, #12]
 8002dee:	2300      	movs	r3, #0
 8002df0:	6063      	str	r3, [r4, #4]
 8002df2:	6923      	ldr	r3, [r4, #16]
 8002df4:	6023      	str	r3, [r4, #0]
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	81a3      	strh	r3, [r4, #12]
 8002dfe:	6923      	ldr	r3, [r4, #16]
 8002e00:	b94b      	cbnz	r3, 8002e16 <__swsetup_r+0x7a>
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e0c:	d003      	beq.n	8002e16 <__swsetup_r+0x7a>
 8002e0e:	4621      	mov	r1, r4
 8002e10:	4628      	mov	r0, r5
 8002e12:	f000 f85c 	bl	8002ece <__smakebuf_r>
 8002e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e1a:	f013 0201 	ands.w	r2, r3, #1
 8002e1e:	d00a      	beq.n	8002e36 <__swsetup_r+0x9a>
 8002e20:	2200      	movs	r2, #0
 8002e22:	60a2      	str	r2, [r4, #8]
 8002e24:	6962      	ldr	r2, [r4, #20]
 8002e26:	4252      	negs	r2, r2
 8002e28:	61a2      	str	r2, [r4, #24]
 8002e2a:	6922      	ldr	r2, [r4, #16]
 8002e2c:	b942      	cbnz	r2, 8002e40 <__swsetup_r+0xa4>
 8002e2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002e32:	d1c5      	bne.n	8002dc0 <__swsetup_r+0x24>
 8002e34:	bd38      	pop	{r3, r4, r5, pc}
 8002e36:	0799      	lsls	r1, r3, #30
 8002e38:	bf58      	it	pl
 8002e3a:	6962      	ldrpl	r2, [r4, #20]
 8002e3c:	60a2      	str	r2, [r4, #8]
 8002e3e:	e7f4      	b.n	8002e2a <__swsetup_r+0x8e>
 8002e40:	2000      	movs	r0, #0
 8002e42:	e7f7      	b.n	8002e34 <__swsetup_r+0x98>
 8002e44:	2000001c 	.word	0x2000001c

08002e48 <_sbrk_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	4d05      	ldr	r5, [pc, #20]	@ (8002e64 <_sbrk_r+0x1c>)
 8002e4e:	4604      	mov	r4, r0
 8002e50:	4608      	mov	r0, r1
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	f7fd fd20 	bl	8000898 <_sbrk>
 8002e58:	1c43      	adds	r3, r0, #1
 8002e5a:	d102      	bne.n	8002e62 <_sbrk_r+0x1a>
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	b103      	cbz	r3, 8002e62 <_sbrk_r+0x1a>
 8002e60:	6023      	str	r3, [r4, #0]
 8002e62:	bd38      	pop	{r3, r4, r5, pc}
 8002e64:	20000220 	.word	0x20000220

08002e68 <memchr>:
 8002e68:	4603      	mov	r3, r0
 8002e6a:	b510      	push	{r4, lr}
 8002e6c:	b2c9      	uxtb	r1, r1
 8002e6e:	4402      	add	r2, r0
 8002e70:	4293      	cmp	r3, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	d101      	bne.n	8002e7a <memchr+0x12>
 8002e76:	2000      	movs	r0, #0
 8002e78:	e003      	b.n	8002e82 <memchr+0x1a>
 8002e7a:	7804      	ldrb	r4, [r0, #0]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	428c      	cmp	r4, r1
 8002e80:	d1f6      	bne.n	8002e70 <memchr+0x8>
 8002e82:	bd10      	pop	{r4, pc}

08002e84 <__swhatbuf_r>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	460c      	mov	r4, r1
 8002e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e8c:	4615      	mov	r5, r2
 8002e8e:	2900      	cmp	r1, #0
 8002e90:	461e      	mov	r6, r3
 8002e92:	b096      	sub	sp, #88	@ 0x58
 8002e94:	da0c      	bge.n	8002eb0 <__swhatbuf_r+0x2c>
 8002e96:	89a3      	ldrh	r3, [r4, #12]
 8002e98:	2100      	movs	r1, #0
 8002e9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e9e:	bf14      	ite	ne
 8002ea0:	2340      	movne	r3, #64	@ 0x40
 8002ea2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	6031      	str	r1, [r6, #0]
 8002eaa:	602b      	str	r3, [r5, #0]
 8002eac:	b016      	add	sp, #88	@ 0x58
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	466a      	mov	r2, sp
 8002eb2:	f000 f849 	bl	8002f48 <_fstat_r>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	dbed      	blt.n	8002e96 <__swhatbuf_r+0x12>
 8002eba:	9901      	ldr	r1, [sp, #4]
 8002ebc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002ec0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002ec4:	4259      	negs	r1, r3
 8002ec6:	4159      	adcs	r1, r3
 8002ec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ecc:	e7eb      	b.n	8002ea6 <__swhatbuf_r+0x22>

08002ece <__smakebuf_r>:
 8002ece:	898b      	ldrh	r3, [r1, #12]
 8002ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ed2:	079d      	lsls	r5, r3, #30
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	d507      	bpl.n	8002eea <__smakebuf_r+0x1c>
 8002eda:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002ede:	6023      	str	r3, [r4, #0]
 8002ee0:	6123      	str	r3, [r4, #16]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	6163      	str	r3, [r4, #20]
 8002ee6:	b003      	add	sp, #12
 8002ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eea:	466a      	mov	r2, sp
 8002eec:	ab01      	add	r3, sp, #4
 8002eee:	f7ff ffc9 	bl	8002e84 <__swhatbuf_r>
 8002ef2:	9f00      	ldr	r7, [sp, #0]
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	4639      	mov	r1, r7
 8002ef8:	4630      	mov	r0, r6
 8002efa:	f7ff fb0b 	bl	8002514 <_malloc_r>
 8002efe:	b948      	cbnz	r0, 8002f14 <__smakebuf_r+0x46>
 8002f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f04:	059a      	lsls	r2, r3, #22
 8002f06:	d4ee      	bmi.n	8002ee6 <__smakebuf_r+0x18>
 8002f08:	f023 0303 	bic.w	r3, r3, #3
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	81a3      	strh	r3, [r4, #12]
 8002f12:	e7e2      	b.n	8002eda <__smakebuf_r+0xc>
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f1e:	81a3      	strh	r3, [r4, #12]
 8002f20:	9b01      	ldr	r3, [sp, #4]
 8002f22:	6020      	str	r0, [r4, #0]
 8002f24:	b15b      	cbz	r3, 8002f3e <__smakebuf_r+0x70>
 8002f26:	4630      	mov	r0, r6
 8002f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f2c:	f000 f81e 	bl	8002f6c <_isatty_r>
 8002f30:	b128      	cbz	r0, 8002f3e <__smakebuf_r+0x70>
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	f023 0303 	bic.w	r3, r3, #3
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	81a3      	strh	r3, [r4, #12]
 8002f3e:	89a3      	ldrh	r3, [r4, #12]
 8002f40:	431d      	orrs	r5, r3
 8002f42:	81a5      	strh	r5, [r4, #12]
 8002f44:	e7cf      	b.n	8002ee6 <__smakebuf_r+0x18>
	...

08002f48 <_fstat_r>:
 8002f48:	b538      	push	{r3, r4, r5, lr}
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	4d06      	ldr	r5, [pc, #24]	@ (8002f68 <_fstat_r+0x20>)
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4608      	mov	r0, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	602b      	str	r3, [r5, #0]
 8002f56:	f7fd fc79 	bl	800084c <_fstat>
 8002f5a:	1c43      	adds	r3, r0, #1
 8002f5c:	d102      	bne.n	8002f64 <_fstat_r+0x1c>
 8002f5e:	682b      	ldr	r3, [r5, #0]
 8002f60:	b103      	cbz	r3, 8002f64 <_fstat_r+0x1c>
 8002f62:	6023      	str	r3, [r4, #0]
 8002f64:	bd38      	pop	{r3, r4, r5, pc}
 8002f66:	bf00      	nop
 8002f68:	20000220 	.word	0x20000220

08002f6c <_isatty_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	2300      	movs	r3, #0
 8002f70:	4d05      	ldr	r5, [pc, #20]	@ (8002f88 <_isatty_r+0x1c>)
 8002f72:	4604      	mov	r4, r0
 8002f74:	4608      	mov	r0, r1
 8002f76:	602b      	str	r3, [r5, #0]
 8002f78:	f7fd fc77 	bl	800086a <_isatty>
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	d102      	bne.n	8002f86 <_isatty_r+0x1a>
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	b103      	cbz	r3, 8002f86 <_isatty_r+0x1a>
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	20000220 	.word	0x20000220

08002f8c <_init>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr

08002f98 <_fini>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr
